
Project_746_LwIP_LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015e54  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004c64  08016024  08016024  00026024  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801ac88  0801ac88  00049c40  2**0
                  CONTENTS
  4 .ARM          00000008  0801ac88  0801ac88  0002ac88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801ac90  0801ac90  00049c40  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801ac90  0801ac90  0002ac90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801ac94  0801ac94  0002ac94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d0  20000000  0801ac98  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200000d0  0801ad68  000300d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000170  0801ae08  00030170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00008b00  20000210  0801aea8  00030210  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20008d10  0801aea8  00038d10  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00049c40  2**0
                  CONTENTS, READONLY
 14 .ExtQSPIFlashSection 00009c40  90000000  90000000  00040000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 15 .debug_info   000304e2  00000000  00000000  00049c70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000072e3  00000000  00000000  0007a152  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002358  00000000  00000000  00081438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 000021c0  00000000  00000000  00083790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00036339  00000000  00000000  00085950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   000358d5  00000000  00000000  000bbc89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0010efb9  00000000  00000000  000f155e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000050  00000000  00000000  00200517  2**0
                  CONTENTS, READONLY
 23 .debug_frame  00009cdc  00000000  00000000  00200568  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000210 	.word	0x20000210
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801600c 	.word	0x0801600c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000214 	.word	0x20000214
 800020c:	0801600c 	.word	0x0801600c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <echo_close>:
#include <tcp.h>

char tcp_buffer[1024];

static void echo_close (struct tcp_pcb *pcb )
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
    tcp_arg(pcb, NULL);
 80005bc:	2100      	movs	r1, #0
 80005be:	6878      	ldr	r0, [r7, #4]
 80005c0:	f00c ffda 	bl	800d578 <tcp_arg>
    tcp_sent(pcb, NULL);
 80005c4:	2100      	movs	r1, #0
 80005c6:	6878      	ldr	r0, [r7, #4]
 80005c8:	f00d f80a 	bl	800d5e0 <tcp_sent>
    tcp_recv(pcb, NULL);
 80005cc:	2100      	movs	r1, #0
 80005ce:	6878      	ldr	r0, [r7, #4]
 80005d0:	f00c ffe4 	bl	800d59c <tcp_recv>
    tcp_close(pcb);
 80005d4:	6878      	ldr	r0, [r7, #4]
 80005d6:	f00b fe2d 	bl	800c234 <tcp_close>
}
 80005da:	bf00      	nop
 80005dc:	3708      	adds	r7, #8
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
	...

080005e4 <echo_recv>:

static err_t echo_recv( void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err )
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b088      	sub	sp, #32
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	60f8      	str	r0, [r7, #12]
 80005ec:	60b9      	str	r1, [r7, #8]
 80005ee:	607a      	str	r2, [r7, #4]
 80005f0:	70fb      	strb	r3, [r7, #3]
    int i;
    int len;
    char *pc;

    if ( err == ERR_OK && p != NULL )
 80005f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d142      	bne.n	8000680 <echo_recv+0x9c>
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d03f      	beq.n	8000680 <echo_recv+0x9c>
    {
        tcp_recved( pcb, p->tot_len );  //possible error
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	891b      	ldrh	r3, [r3, #8]
 8000604:	4619      	mov	r1, r3
 8000606:	68b8      	ldr	r0, [r7, #8]
 8000608:	f00c f8d8 	bl	800c7bc <tcp_recved>
        pc = (char *)p->payload;
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	685b      	ldr	r3, [r3, #4]
 8000610:	617b      	str	r3, [r7, #20]
        len =p->tot_len;				//possible error
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	891b      	ldrh	r3, [r3, #8]
 8000616:	61bb      	str	r3, [r7, #24]

        for( i=0; i<len; i++ )
 8000618:	2300      	movs	r3, #0
 800061a:	61fb      	str	r3, [r7, #28]
 800061c:	e00b      	b.n	8000636 <echo_recv+0x52>
        {
            tcp_buffer[i] = pc[i];
 800061e:	69fb      	ldr	r3, [r7, #28]
 8000620:	697a      	ldr	r2, [r7, #20]
 8000622:	4413      	add	r3, r2
 8000624:	7819      	ldrb	r1, [r3, #0]
 8000626:	4a1f      	ldr	r2, [pc, #124]	; (80006a4 <echo_recv+0xc0>)
 8000628:	69fb      	ldr	r3, [r7, #28]
 800062a:	4413      	add	r3, r2
 800062c:	460a      	mov	r2, r1
 800062e:	701a      	strb	r2, [r3, #0]
        for( i=0; i<len; i++ )
 8000630:	69fb      	ldr	r3, [r7, #28]
 8000632:	3301      	adds	r3, #1
 8000634:	61fb      	str	r3, [r7, #28]
 8000636:	69fa      	ldr	r2, [r7, #28]
 8000638:	69bb      	ldr	r3, [r7, #24]
 800063a:	429a      	cmp	r2, r3
 800063c:	dbef      	blt.n	800061e <echo_recv+0x3a>
        }

        if( tcp_buffer[0] == 'X' )
 800063e:	4b19      	ldr	r3, [pc, #100]	; (80006a4 <echo_recv+0xc0>)
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	2b58      	cmp	r3, #88	; 0x58
 8000644:	d102      	bne.n	800064c <echo_recv+0x68>
            echo_close( pcb );
 8000646:	68b8      	ldr	r0, [r7, #8]
 8000648:	f7ff ffb4 	bl	80005b4 <echo_close>

        pbuf_free( p );
 800064c:	6878      	ldr	r0, [r7, #4]
 800064e:	f00b f953 	bl	800b8f8 <pbuf_free>

        if( len > tcp_sndbuf( pcb ) )
 8000652:	68bb      	ldr	r3, [r7, #8]
 8000654:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8000658:	461a      	mov	r2, r3
 800065a:	69bb      	ldr	r3, [r7, #24]
 800065c:	4293      	cmp	r3, r2
 800065e:	dd03      	ble.n	8000668 <echo_recv+0x84>
            len= tcp_sndbuf( pcb );
 8000660:	68bb      	ldr	r3, [r7, #8]
 8000662:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8000666:	61bb      	str	r3, [r7, #24]

        tcp_write( pcb, tcp_buffer, len, 0 );
 8000668:	69bb      	ldr	r3, [r7, #24]
 800066a:	b29a      	uxth	r2, r3
 800066c:	2300      	movs	r3, #0
 800066e:	490d      	ldr	r1, [pc, #52]	; (80006a4 <echo_recv+0xc0>)
 8000670:	68b8      	ldr	r0, [r7, #8]
 8000672:	f00f fec3 	bl	80103fc <tcp_write>
        tcp_sent( pcb, NULL );
 8000676:	2100      	movs	r1, #0
 8000678:	68b8      	ldr	r0, [r7, #8]
 800067a:	f00c ffb1 	bl	800d5e0 <tcp_sent>
 800067e:	e002      	b.n	8000686 <echo_recv+0xa2>
    }
    else
    {
        pbuf_free( p );
 8000680:	6878      	ldr	r0, [r7, #4]
 8000682:	f00b f939 	bl	800b8f8 <pbuf_free>
    }

    if( err == ERR_OK && p == NULL )
 8000686:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800068a:	2b00      	cmp	r3, #0
 800068c:	d105      	bne.n	800069a <echo_recv+0xb6>
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	2b00      	cmp	r3, #0
 8000692:	d102      	bne.n	800069a <echo_recv+0xb6>
    {
        echo_close( pcb );
 8000694:	68b8      	ldr	r0, [r7, #8]
 8000696:	f7ff ff8d 	bl	80005b4 <echo_close>
    }

    return ERR_OK;
 800069a:	2300      	movs	r3, #0
}
 800069c:	4618      	mov	r0, r3
 800069e:	3720      	adds	r7, #32
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	2000022c 	.word	0x2000022c

080006a8 <echo_accept>:

static err_t echo_accept(void *arg, struct tcp_pcb *pcb, err_t err )
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	60f8      	str	r0, [r7, #12]
 80006b0:	60b9      	str	r1, [r7, #8]
 80006b2:	4613      	mov	r3, r2
 80006b4:	71fb      	strb	r3, [r7, #7]
    LWIP_UNUSED_ARG( arg );
    LWIP_UNUSED_ARG( err );
    tcp_setprio( pcb, TCP_PRIO_MIN );
 80006b6:	2101      	movs	r1, #1
 80006b8:	68b8      	ldr	r0, [r7, #8]
 80006ba:	f00c fd63 	bl	800d184 <tcp_setprio>
    tcp_recv( pcb, echo_recv );
 80006be:	490e      	ldr	r1, [pc, #56]	; (80006f8 <echo_accept+0x50>)
 80006c0:	68b8      	ldr	r0, [r7, #8]
 80006c2:	f00c ff6b 	bl	800d59c <tcp_recv>
    tcp_err( pcb, NULL );
 80006c6:	2100      	movs	r1, #0
 80006c8:	68b8      	ldr	r0, [r7, #8]
 80006ca:	f00c ffab 	bl	800d624 <tcp_err>
    tcp_poll( pcb, NULL, 4 );
 80006ce:	2204      	movs	r2, #4
 80006d0:	2100      	movs	r1, #0
 80006d2:	68b8      	ldr	r0, [r7, #8]
 80006d4:	f00c ffe0 	bl	800d698 <tcp_poll>
    tcp_write( pcb,
 80006d8:	2300      	movs	r3, #0
 80006da:	2276      	movs	r2, #118	; 0x76
 80006dc:	4907      	ldr	r1, [pc, #28]	; (80006fc <echo_accept+0x54>)
 80006de:	68b8      	ldr	r0, [r7, #8]
 80006e0:	f00f fe8c 	bl	80103fc <tcp_write>
    		"    Welcome to the echo server demo    \r\n"
    		" (I send everything back! X to close)  \r\n"
    		"=======================================\r\n", 118, 0 );
    tcp_sent( pcb, NULL );
 80006e4:	2100      	movs	r1, #0
 80006e6:	68b8      	ldr	r0, [r7, #8]
 80006e8:	f00c ff7a 	bl	800d5e0 <tcp_sent>
    return ERR_OK;
 80006ec:	2300      	movs	r3, #0
}
 80006ee:	4618      	mov	r0, r3
 80006f0:	3710      	adds	r7, #16
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	080005e5 	.word	0x080005e5
 80006fc:	08016024 	.word	0x08016024

08000700 <echo_init>:

void echo_init( void )
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
    struct tcp_pcb *tcp_pcb;
    tcp_pcb = tcp_new();
 8000706:	f00c ff2f 	bl	800d568 <tcp_new>
 800070a:	6078      	str	r0, [r7, #4]
    tcp_bind(tcp_pcb, IP_ADDR_ANY, 23);
 800070c:	2217      	movs	r2, #23
 800070e:	4908      	ldr	r1, [pc, #32]	; (8000730 <echo_init+0x30>)
 8000710:	6878      	ldr	r0, [r7, #4]
 8000712:	f00b fe85 	bl	800c420 <tcp_bind>

    tcp_pcb = tcp_listen( tcp_pcb );
 8000716:	21ff      	movs	r1, #255	; 0xff
 8000718:	6878      	ldr	r0, [r7, #4]
 800071a:	f00b ff39 	bl	800c590 <tcp_listen_with_backlog>
 800071e:	6078      	str	r0, [r7, #4]
    tcp_accept( tcp_pcb, echo_accept );
 8000720:	4904      	ldr	r1, [pc, #16]	; (8000734 <echo_init+0x34>)
 8000722:	6878      	ldr	r0, [r7, #4]
 8000724:	f00c ffa0 	bl	800d668 <tcp_accept>
}
 8000728:	bf00      	nop
 800072a:	3708      	adds	r7, #8
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	0801ab2c 	.word	0x0801ab2c
 8000734:	080006a9 	.word	0x080006a9

08000738 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//This function will send the characters from printf via UART1.
//Modified so you don't have to type \r\n anymore, just type \n.
int _write(int file, char *ptr, int len) {
 8000738:	b580      	push	{r7, lr}
 800073a:	b086      	sub	sp, #24
 800073c:	af00      	add	r7, sp, #0
 800073e:	60f8      	str	r0, [r7, #12]
 8000740:	60b9      	str	r1, [r7, #8]
 8000742:	607a      	str	r2, [r7, #4]
	for(int i = 0; i < len; i++){
 8000744:	2300      	movs	r3, #0
 8000746:	617b      	str	r3, [r7, #20]
 8000748:	e018      	b.n	800077c <_write+0x44>
		if(ptr[i]=='\n'){
 800074a:	697b      	ldr	r3, [r7, #20]
 800074c:	68ba      	ldr	r2, [r7, #8]
 800074e:	4413      	add	r3, r2
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	2b0a      	cmp	r3, #10
 8000754:	d106      	bne.n	8000764 <_write+0x2c>
			HAL_UART_Transmit(&huart1, (uint8_t*)"\r", 1, HAL_MAX_DELAY);
 8000756:	f04f 33ff 	mov.w	r3, #4294967295
 800075a:	2201      	movs	r2, #1
 800075c:	490c      	ldr	r1, [pc, #48]	; (8000790 <_write+0x58>)
 800075e:	480d      	ldr	r0, [pc, #52]	; (8000794 <_write+0x5c>)
 8000760:	f008 facb 	bl	8008cfa <HAL_UART_Transmit>
		}
		HAL_UART_Transmit(&huart1, (uint8_t*)&ptr[i], 1, HAL_MAX_DELAY);
 8000764:	697b      	ldr	r3, [r7, #20]
 8000766:	68ba      	ldr	r2, [r7, #8]
 8000768:	18d1      	adds	r1, r2, r3
 800076a:	f04f 33ff 	mov.w	r3, #4294967295
 800076e:	2201      	movs	r2, #1
 8000770:	4808      	ldr	r0, [pc, #32]	; (8000794 <_write+0x5c>)
 8000772:	f008 fac2 	bl	8008cfa <HAL_UART_Transmit>
	for(int i = 0; i < len; i++){
 8000776:	697b      	ldr	r3, [r7, #20]
 8000778:	3301      	adds	r3, #1
 800077a:	617b      	str	r3, [r7, #20]
 800077c:	697a      	ldr	r2, [r7, #20]
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	429a      	cmp	r2, r3
 8000782:	dbe2      	blt.n	800074a <_write+0x12>
	}
    return len;
 8000784:	687b      	ldr	r3, [r7, #4]
}
 8000786:	4618      	mov	r0, r3
 8000788:	3718      	adds	r7, #24
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	080160a0 	.word	0x080160a0
 8000794:	20000760 	.word	0x20000760

08000798 <checkScreensaver>:
//This function will check if the screensaver needs to be on or not.
//It will disable the screen if no fingers are detected after SCREENSAVER_DELAY
void checkScreensaver(void){
 8000798:	b580      	push	{r7, lr}
 800079a:	b08c      	sub	sp, #48	; 0x30
 800079c:	af00      	add	r7, sp, #0
	static uint32_t ScreensaverStart = SCREENSAVER_DELAY+100;
	static uint8_t screensaver_status = 0;
	if(ScreensaverStart < HAL_GetTick() && screensaver_status == 0){
 800079e:	f003 f97f 	bl	8003aa0 <HAL_GetTick>
 80007a2:	4602      	mov	r2, r0
 80007a4:	4b21      	ldr	r3, [pc, #132]	; (800082c <checkScreensaver+0x94>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	429a      	cmp	r2, r3
 80007aa:	d914      	bls.n	80007d6 <checkScreensaver+0x3e>
 80007ac:	4b20      	ldr	r3, [pc, #128]	; (8000830 <checkScreensaver+0x98>)
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d110      	bne.n	80007d6 <checkScreensaver+0x3e>
		//Screen saver on -> display Off
		HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_RESET);
 80007b4:	2200      	movs	r2, #0
 80007b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007ba:	481e      	ldr	r0, [pc, #120]	; (8000834 <checkScreensaver+0x9c>)
 80007bc:	f005 fb16 	bl	8005dec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_RESET);
 80007c0:	2200      	movs	r2, #0
 80007c2:	2108      	movs	r1, #8
 80007c4:	481c      	ldr	r0, [pc, #112]	; (8000838 <checkScreensaver+0xa0>)
 80007c6:	f005 fb11 	bl	8005dec <HAL_GPIO_WritePin>
		screensaver_status = 1;
 80007ca:	4b19      	ldr	r3, [pc, #100]	; (8000830 <checkScreensaver+0x98>)
 80007cc:	2201      	movs	r2, #1
 80007ce:	701a      	strb	r2, [r3, #0]
		printf("Screensaver: on\n");
 80007d0:	481a      	ldr	r0, [pc, #104]	; (800083c <checkScreensaver+0xa4>)
 80007d2:	f014 fa27 	bl	8014c24 <puts>
	}
	TS_StateTypeDef TS_State;
	BSP_TS_GetState(&TS_State);
 80007d6:	1d3b      	adds	r3, r7, #4
 80007d8:	4618      	mov	r0, r3
 80007da:	f002 fed3 	bl	8003584 <BSP_TS_GetState>
	if(TS_State.touchDetected > 0){
 80007de:	793b      	ldrb	r3, [r7, #4]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d01f      	beq.n	8000824 <checkScreensaver+0x8c>
		//new start value
		ScreensaverStart = HAL_GetTick() + SCREENSAVER_DELAY;
 80007e4:	f003 f95c 	bl	8003aa0 <HAL_GetTick>
 80007e8:	4602      	mov	r2, r0
 80007ea:	f247 5330 	movw	r3, #30000	; 0x7530
 80007ee:	4413      	add	r3, r2
 80007f0:	4a0e      	ldr	r2, [pc, #56]	; (800082c <checkScreensaver+0x94>)
 80007f2:	6013      	str	r3, [r2, #0]
		if(screensaver_status == 1){
 80007f4:	4b0e      	ldr	r3, [pc, #56]	; (8000830 <checkScreensaver+0x98>)
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	2b01      	cmp	r3, #1
 80007fa:	d113      	bne.n	8000824 <checkScreensaver+0x8c>
			HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 80007fc:	2201      	movs	r2, #1
 80007fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000802:	480c      	ldr	r0, [pc, #48]	; (8000834 <checkScreensaver+0x9c>)
 8000804:	f005 faf2 	bl	8005dec <HAL_GPIO_WritePin>
			HAL_Delay(100);
 8000808:	2064      	movs	r0, #100	; 0x64
 800080a:	f003 f955 	bl	8003ab8 <HAL_Delay>
			HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 800080e:	2201      	movs	r2, #1
 8000810:	2108      	movs	r1, #8
 8000812:	4809      	ldr	r0, [pc, #36]	; (8000838 <checkScreensaver+0xa0>)
 8000814:	f005 faea 	bl	8005dec <HAL_GPIO_WritePin>
			screensaver_status = 0;
 8000818:	4b05      	ldr	r3, [pc, #20]	; (8000830 <checkScreensaver+0x98>)
 800081a:	2200      	movs	r2, #0
 800081c:	701a      	strb	r2, [r3, #0]
			printf("Screensaver: off\n");
 800081e:	4808      	ldr	r0, [pc, #32]	; (8000840 <checkScreensaver+0xa8>)
 8000820:	f014 fa00 	bl	8014c24 <puts>
		}
	}
}
 8000824:	bf00      	nop
 8000826:	3730      	adds	r7, #48	; 0x30
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	20000000 	.word	0x20000000
 8000830:	2000081c 	.word	0x2000081c
 8000834:	40022000 	.word	0x40022000
 8000838:	40022800 	.word	0x40022800
 800083c:	080160a4 	.word	0x080160a4
 8000840:	080160b4 	.word	0x080160b4

08000844 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b090      	sub	sp, #64	; 0x40
 8000848:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800084a:	f003 f8d7 	bl	80039fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800084e:	f000 f873 	bl	8000938 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000852:	f000 fa77 	bl	8000d44 <MX_GPIO_Init>
  MX_LTDC_Init();
 8000856:	f000 f911 	bl	8000a7c <MX_LTDC_Init>
  MX_USART1_UART_Init();
 800085a:	f000 f9f5 	bl	8000c48 <MX_USART1_UART_Init>
  MX_DMA2D_Init();
 800085e:	f000 f8db 	bl	8000a18 <MX_DMA2D_Init>
  MX_FMC_Init();
 8000862:	f000 fa21 	bl	8000ca8 <MX_FMC_Init>
  MX_LWIP_Init();
 8000866:	f008 ffd1 	bl	800980c <MX_LWIP_Init>
  MX_QUADSPI_Init();
 800086a:	f000 f9c1 	bl	8000bf0 <MX_QUADSPI_Init>
  /* USER CODE BEGIN 2 */
  /*QSPI INIT*/
  BSP_QSPI_Init();
 800086e:	f002 fa11 	bl	8002c94 <BSP_QSPI_Init>
  BSP_QSPI_MemoryMappedMode();
 8000872:	f002 fa67 	bl	8002d44 <BSP_QSPI_EnableMemoryMappedMode>
  WRITE_REG(QUADSPI->LPTR, 0xFFF);
 8000876:	4b28      	ldr	r3, [pc, #160]	; (8000918 <main+0xd4>)
 8000878:	f640 72ff 	movw	r2, #4095	; 0xfff
 800087c:	631a      	str	r2, [r3, #48]	; 0x30
  printf("Running LwIP & LCD start project...\n");
 800087e:	4827      	ldr	r0, [pc, #156]	; (800091c <main+0xd8>)
 8000880:	f014 f9d0 	bl	8014c24 <puts>
  echo_init();
 8000884:	f7ff ff3c 	bl	8000700 <echo_init>
  BSP_LCD_Init();
 8000888:	f001 fcd6 	bl	8002238 <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(1, LCD_FB_START_ADDRESS);
 800088c:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8000890:	2001      	movs	r0, #1
 8000892:	f001 fd69 	bl	8002368 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS+(480*272*4));
 8000896:	4922      	ldr	r1, [pc, #136]	; (8000920 <main+0xdc>)
 8000898:	2000      	movs	r0, #0
 800089a:	f001 fd65 	bl	8002368 <BSP_LCD_LayerDefaultInit>
  /* Enable the LCD */
  BSP_LCD_DisplayOn();
 800089e:	f001 ff81 	bl	80027a4 <BSP_LCD_DisplayOn>
  /* Select the LCD Background Layer  */
  BSP_LCD_SelectLayer(0);
 80008a2:	2000      	movs	r0, #0
 80008a4:	f001 fdc0 	bl	8002428 <BSP_LCD_SelectLayer>
  /* Clear the Background Layer */
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 80008a8:	f04f 30ff 	mov.w	r0, #4294967295
 80008ac:	f001 fdfe 	bl	80024ac <BSP_LCD_Clear>
  BSP_LCD_SelectLayer(1);
 80008b0:	2001      	movs	r0, #1
 80008b2:	f001 fdb9 	bl	8002428 <BSP_LCD_SelectLayer>
  /* Clear the foreground Layer */
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 80008b6:	f04f 30ff 	mov.w	r0, #4294967295
 80008ba:	f001 fdf7 	bl	80024ac <BSP_LCD_Clear>
  /* Some sign */
  BSP_LCD_SetTextColor(LCD_COLOR_RED);
 80008be:	4819      	ldr	r0, [pc, #100]	; (8000924 <main+0xe0>)
 80008c0:	f001 fdc2 	bl	8002448 <BSP_LCD_SetTextColor>
  BSP_LCD_SetFont(&Font12);
 80008c4:	4818      	ldr	r0, [pc, #96]	; (8000928 <main+0xe4>)
 80008c6:	f001 fdd7 	bl	8002478 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 0, (uint8_t*) "Display is working", CENTER_MODE);
 80008ca:	2301      	movs	r3, #1
 80008cc:	4a17      	ldr	r2, [pc, #92]	; (800092c <main+0xe8>)
 80008ce:	2100      	movs	r1, #0
 80008d0:	2000      	movs	r0, #0
 80008d2:	f001 fe57 	bl	8002584 <BSP_LCD_DisplayStringAt>
  char buffer[50];
  sprintf(buffer, "Screensaver delay is set to: %ds", SCREENSAVER_DELAY/1000);
 80008d6:	1d3b      	adds	r3, r7, #4
 80008d8:	221e      	movs	r2, #30
 80008da:	4915      	ldr	r1, [pc, #84]	; (8000930 <main+0xec>)
 80008dc:	4618      	mov	r0, r3
 80008de:	f014 f9e7 	bl	8014cb0 <siprintf>
  BSP_LCD_DisplayStringAt(0, 12, (uint8_t*) buffer, CENTER_MODE);
 80008e2:	1d3a      	adds	r2, r7, #4
 80008e4:	2301      	movs	r3, #1
 80008e6:	210c      	movs	r1, #12
 80008e8:	2000      	movs	r0, #0
 80008ea:	f001 fe4b 	bl	8002584 <BSP_LCD_DisplayStringAt>
  WDA_LCD_DrawBitmap(TM_LOGO_DATA,
 80008ee:	2303      	movs	r3, #3
 80008f0:	9301      	str	r3, [sp, #4]
 80008f2:	2364      	movs	r3, #100	; 0x64
 80008f4:	9300      	str	r3, [sp, #0]
 80008f6:	23c8      	movs	r3, #200	; 0xc8
 80008f8:	2256      	movs	r2, #86	; 0x56
 80008fa:	218c      	movs	r1, #140	; 0x8c
 80008fc:	480d      	ldr	r0, [pc, #52]	; (8000934 <main+0xf0>)
 80008fe:	f002 f969 	bl	8002bd4 <WDA_LCD_DrawBitmap>
		  (272-TM_LOGO_DATA_Y_PIXEL)/2,
		  TM_LOGO_DATA_X_PIXEL,
		  TM_LOGO_DATA_Y_PIXEL,
		  TM_LOGO_DATA_FORMAT);
  /* Init touch screen */
  BSP_TS_Init(480,272);
 8000902:	f44f 7188 	mov.w	r1, #272	; 0x110
 8000906:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 800090a:	f002 fdfb 	bl	8003504 <BSP_TS_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	MX_LWIP_Process();
 800090e:	f009 f8c9 	bl	8009aa4 <MX_LWIP_Process>
	checkScreensaver();
 8000912:	f7ff ff41 	bl	8000798 <checkScreensaver>
	MX_LWIP_Process();
 8000916:	e7fa      	b.n	800090e <main+0xca>
 8000918:	a0001000 	.word	0xa0001000
 800091c:	080160c8 	.word	0x080160c8
 8000920:	c007f800 	.word	0xc007f800
 8000924:	ffff0000 	.word	0xffff0000
 8000928:	20000038 	.word	0x20000038
 800092c:	080160ec 	.word	0x080160ec
 8000930:	08016100 	.word	0x08016100
 8000934:	90000000 	.word	0x90000000

08000938 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b094      	sub	sp, #80	; 0x50
 800093c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800093e:	f107 0320 	add.w	r3, r7, #32
 8000942:	2230      	movs	r2, #48	; 0x30
 8000944:	2100      	movs	r1, #0
 8000946:	4618      	mov	r0, r3
 8000948:	f014 f8de 	bl	8014b08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800094c:	f107 030c 	add.w	r3, r7, #12
 8000950:	2200      	movs	r2, #0
 8000952:	601a      	str	r2, [r3, #0]
 8000954:	605a      	str	r2, [r3, #4]
 8000956:	609a      	str	r2, [r3, #8]
 8000958:	60da      	str	r2, [r3, #12]
 800095a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800095c:	f006 fac0 	bl	8006ee0 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000960:	4b2b      	ldr	r3, [pc, #172]	; (8000a10 <SystemClock_Config+0xd8>)
 8000962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000964:	4a2a      	ldr	r2, [pc, #168]	; (8000a10 <SystemClock_Config+0xd8>)
 8000966:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800096a:	6413      	str	r3, [r2, #64]	; 0x40
 800096c:	4b28      	ldr	r3, [pc, #160]	; (8000a10 <SystemClock_Config+0xd8>)
 800096e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000970:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000974:	60bb      	str	r3, [r7, #8]
 8000976:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000978:	4b26      	ldr	r3, [pc, #152]	; (8000a14 <SystemClock_Config+0xdc>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a25      	ldr	r2, [pc, #148]	; (8000a14 <SystemClock_Config+0xdc>)
 800097e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000982:	6013      	str	r3, [r2, #0]
 8000984:	4b23      	ldr	r3, [pc, #140]	; (8000a14 <SystemClock_Config+0xdc>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800098c:	607b      	str	r3, [r7, #4]
 800098e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000990:	2301      	movs	r3, #1
 8000992:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000994:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000998:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800099a:	2302      	movs	r3, #2
 800099c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800099e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80009a4:	2319      	movs	r3, #25
 80009a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 80009a8:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80009ac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009ae:	2302      	movs	r3, #2
 80009b0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80009b2:	2302      	movs	r3, #2
 80009b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009b6:	f107 0320 	add.w	r3, r7, #32
 80009ba:	4618      	mov	r0, r3
 80009bc:	f007 f844 	bl	8007a48 <HAL_RCC_OscConfig>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <SystemClock_Config+0x92>
  {
    Error_Handler();
 80009c6:	f000 fa8b 	bl	8000ee0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80009ca:	f006 fa99 	bl	8006f00 <HAL_PWREx_EnableOverDrive>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80009d4:	f000 fa84 	bl	8000ee0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009d8:	230f      	movs	r3, #15
 80009da:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009dc:	2302      	movs	r3, #2
 80009de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009e0:	2300      	movs	r3, #0
 80009e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80009e4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80009e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80009ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009ee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80009f0:	f107 030c 	add.w	r3, r7, #12
 80009f4:	2106      	movs	r1, #6
 80009f6:	4618      	mov	r0, r3
 80009f8:	f007 faca 	bl	8007f90 <HAL_RCC_ClockConfig>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000a02:	f000 fa6d 	bl	8000ee0 <Error_Handler>
  }
}
 8000a06:	bf00      	nop
 8000a08:	3750      	adds	r7, #80	; 0x50
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	40023800 	.word	0x40023800
 8000a14:	40007000 	.word	0x40007000

08000a18 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000a1c:	4b15      	ldr	r3, [pc, #84]	; (8000a74 <MX_DMA2D_Init+0x5c>)
 8000a1e:	4a16      	ldr	r2, [pc, #88]	; (8000a78 <MX_DMA2D_Init+0x60>)
 8000a20:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000a22:	4b14      	ldr	r3, [pc, #80]	; (8000a74 <MX_DMA2D_Init+0x5c>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000a28:	4b12      	ldr	r3, [pc, #72]	; (8000a74 <MX_DMA2D_Init+0x5c>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000a2e:	4b11      	ldr	r3, [pc, #68]	; (8000a74 <MX_DMA2D_Init+0x5c>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000a34:	4b0f      	ldr	r3, [pc, #60]	; (8000a74 <MX_DMA2D_Init+0x5c>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000a3a:	4b0e      	ldr	r3, [pc, #56]	; (8000a74 <MX_DMA2D_Init+0x5c>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000a40:	4b0c      	ldr	r3, [pc, #48]	; (8000a74 <MX_DMA2D_Init+0x5c>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000a46:	4b0b      	ldr	r3, [pc, #44]	; (8000a74 <MX_DMA2D_Init+0x5c>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000a4c:	4809      	ldr	r0, [pc, #36]	; (8000a74 <MX_DMA2D_Init+0x5c>)
 8000a4e:	f003 fb97 	bl	8004180 <HAL_DMA2D_Init>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000a58:	f000 fa42 	bl	8000ee0 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000a5c:	2101      	movs	r1, #1
 8000a5e:	4805      	ldr	r0, [pc, #20]	; (8000a74 <MX_DMA2D_Init+0x5c>)
 8000a60:	f003 fcec 	bl	800443c <HAL_DMA2D_ConfigLayer>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000a6a:	f000 fa39 	bl	8000ee0 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000a6e:	bf00      	nop
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	2000062c 	.word	0x2000062c
 8000a78:	4002b000 	.word	0x4002b000

08000a7c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b09a      	sub	sp, #104	; 0x68
 8000a80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000a82:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000a86:	2234      	movs	r2, #52	; 0x34
 8000a88:	2100      	movs	r1, #0
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f014 f83c 	bl	8014b08 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8000a90:	463b      	mov	r3, r7
 8000a92:	2234      	movs	r2, #52	; 0x34
 8000a94:	2100      	movs	r1, #0
 8000a96:	4618      	mov	r0, r3
 8000a98:	f014 f836 	bl	8014b08 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000a9c:	4b52      	ldr	r3, [pc, #328]	; (8000be8 <MX_LTDC_Init+0x16c>)
 8000a9e:	4a53      	ldr	r2, [pc, #332]	; (8000bec <MX_LTDC_Init+0x170>)
 8000aa0:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000aa2:	4b51      	ldr	r3, [pc, #324]	; (8000be8 <MX_LTDC_Init+0x16c>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000aa8:	4b4f      	ldr	r3, [pc, #316]	; (8000be8 <MX_LTDC_Init+0x16c>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000aae:	4b4e      	ldr	r3, [pc, #312]	; (8000be8 <MX_LTDC_Init+0x16c>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000ab4:	4b4c      	ldr	r3, [pc, #304]	; (8000be8 <MX_LTDC_Init+0x16c>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8000aba:	4b4b      	ldr	r3, [pc, #300]	; (8000be8 <MX_LTDC_Init+0x16c>)
 8000abc:	2228      	movs	r2, #40	; 0x28
 8000abe:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8000ac0:	4b49      	ldr	r3, [pc, #292]	; (8000be8 <MX_LTDC_Init+0x16c>)
 8000ac2:	2209      	movs	r2, #9
 8000ac4:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8000ac6:	4b48      	ldr	r3, [pc, #288]	; (8000be8 <MX_LTDC_Init+0x16c>)
 8000ac8:	2235      	movs	r2, #53	; 0x35
 8000aca:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8000acc:	4b46      	ldr	r3, [pc, #280]	; (8000be8 <MX_LTDC_Init+0x16c>)
 8000ace:	220b      	movs	r2, #11
 8000ad0:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8000ad2:	4b45      	ldr	r3, [pc, #276]	; (8000be8 <MX_LTDC_Init+0x16c>)
 8000ad4:	f240 2215 	movw	r2, #533	; 0x215
 8000ad8:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8000ada:	4b43      	ldr	r3, [pc, #268]	; (8000be8 <MX_LTDC_Init+0x16c>)
 8000adc:	f240 121b 	movw	r2, #283	; 0x11b
 8000ae0:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8000ae2:	4b41      	ldr	r3, [pc, #260]	; (8000be8 <MX_LTDC_Init+0x16c>)
 8000ae4:	f240 2235 	movw	r2, #565	; 0x235
 8000ae8:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8000aea:	4b3f      	ldr	r3, [pc, #252]	; (8000be8 <MX_LTDC_Init+0x16c>)
 8000aec:	f240 121d 	movw	r2, #285	; 0x11d
 8000af0:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000af2:	4b3d      	ldr	r3, [pc, #244]	; (8000be8 <MX_LTDC_Init+0x16c>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 255;
 8000afa:	4b3b      	ldr	r3, [pc, #236]	; (8000be8 <MX_LTDC_Init+0x16c>)
 8000afc:	22ff      	movs	r2, #255	; 0xff
 8000afe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000b02:	4b39      	ldr	r3, [pc, #228]	; (8000be8 <MX_LTDC_Init+0x16c>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000b0a:	4837      	ldr	r0, [pc, #220]	; (8000be8 <MX_LTDC_Init+0x16c>)
 8000b0c:	f005 ff32 	bl	8006974 <HAL_LTDC_Init>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8000b16:	f000 f9e3 	bl	8000ee0 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 480;
 8000b1e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000b22:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8000b24:	2300      	movs	r3, #0
 8000b26:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 272;
 8000b28:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000b2c:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB1555;
 8000b2e:	2303      	movs	r3, #3
 8000b30:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 255;
 8000b32:	23ff      	movs	r3, #255	; 0xff
 8000b34:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8000b36:	2300      	movs	r3, #0
 8000b38:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000b3a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000b3e:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000b40:	2307      	movs	r3, #7
 8000b42:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 8000b44:	2300      	movs	r3, #0
 8000b46:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 480;
 8000b48:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000b4c:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 272;
 8000b4e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000b52:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8000b54:	2300      	movs	r3, #0
 8000b56:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8000b60:	2300      	movs	r3, #0
 8000b62:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000b66:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	481e      	ldr	r0, [pc, #120]	; (8000be8 <MX_LTDC_Init+0x16c>)
 8000b70:	f005 ffd0 	bl	8006b14 <HAL_LTDC_ConfigLayer>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <MX_LTDC_Init+0x102>
  {
    Error_Handler();
 8000b7a:	f000 f9b1 	bl	8000ee0 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 480;
 8000b82:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000b86:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 272;
 8000b8c:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000b90:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB1555;
 8000b92:	2303      	movs	r3, #3
 8000b94:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 255;
 8000b96:	23ff      	movs	r3, #255	; 0xff
 8000b98:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000b9e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000ba2:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000ba4:	2307      	movs	r3, #7
 8000ba6:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 480;
 8000bac:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000bb0:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 272;
 8000bb2:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8000bca:	463b      	mov	r3, r7
 8000bcc:	2201      	movs	r2, #1
 8000bce:	4619      	mov	r1, r3
 8000bd0:	4805      	ldr	r0, [pc, #20]	; (8000be8 <MX_LTDC_Init+0x16c>)
 8000bd2:	f005 ff9f 	bl	8006b14 <HAL_LTDC_ConfigLayer>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <MX_LTDC_Init+0x164>
  {
    Error_Handler();
 8000bdc:	f000 f980 	bl	8000ee0 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000be0:	bf00      	nop
 8000be2:	3768      	adds	r7, #104	; 0x68
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	2000066c 	.word	0x2000066c
 8000bec:	40016800 	.word	0x40016800

08000bf0 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000bf4:	4b12      	ldr	r3, [pc, #72]	; (8000c40 <MX_QUADSPI_Init+0x50>)
 8000bf6:	4a13      	ldr	r2, [pc, #76]	; (8000c44 <MX_QUADSPI_Init+0x54>)
 8000bf8:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8000bfa:	4b11      	ldr	r3, [pc, #68]	; (8000c40 <MX_QUADSPI_Init+0x50>)
 8000bfc:	22ff      	movs	r2, #255	; 0xff
 8000bfe:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000c00:	4b0f      	ldr	r3, [pc, #60]	; (8000c40 <MX_QUADSPI_Init+0x50>)
 8000c02:	2201      	movs	r2, #1
 8000c04:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000c06:	4b0e      	ldr	r3, [pc, #56]	; (8000c40 <MX_QUADSPI_Init+0x50>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8000c0c:	4b0c      	ldr	r3, [pc, #48]	; (8000c40 <MX_QUADSPI_Init+0x50>)
 8000c0e:	2201      	movs	r2, #1
 8000c10:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000c12:	4b0b      	ldr	r3, [pc, #44]	; (8000c40 <MX_QUADSPI_Init+0x50>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000c18:	4b09      	ldr	r3, [pc, #36]	; (8000c40 <MX_QUADSPI_Init+0x50>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000c1e:	4b08      	ldr	r3, [pc, #32]	; (8000c40 <MX_QUADSPI_Init+0x50>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000c24:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <MX_QUADSPI_Init+0x50>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000c2a:	4805      	ldr	r0, [pc, #20]	; (8000c40 <MX_QUADSPI_Init+0x50>)
 8000c2c:	f006 f9b8 	bl	8006fa0 <HAL_QSPI_Init>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8000c36:	f000 f953 	bl	8000ee0 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000c3a:	bf00      	nop
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	20000714 	.word	0x20000714
 8000c44:	a0001000 	.word	0xa0001000

08000c48 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c4c:	4b14      	ldr	r3, [pc, #80]	; (8000ca0 <MX_USART1_UART_Init+0x58>)
 8000c4e:	4a15      	ldr	r2, [pc, #84]	; (8000ca4 <MX_USART1_UART_Init+0x5c>)
 8000c50:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c52:	4b13      	ldr	r3, [pc, #76]	; (8000ca0 <MX_USART1_UART_Init+0x58>)
 8000c54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c58:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c5a:	4b11      	ldr	r3, [pc, #68]	; (8000ca0 <MX_USART1_UART_Init+0x58>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c60:	4b0f      	ldr	r3, [pc, #60]	; (8000ca0 <MX_USART1_UART_Init+0x58>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c66:	4b0e      	ldr	r3, [pc, #56]	; (8000ca0 <MX_USART1_UART_Init+0x58>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ca0 <MX_USART1_UART_Init+0x58>)
 8000c6e:	220c      	movs	r2, #12
 8000c70:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c72:	4b0b      	ldr	r3, [pc, #44]	; (8000ca0 <MX_USART1_UART_Init+0x58>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c78:	4b09      	ldr	r3, [pc, #36]	; (8000ca0 <MX_USART1_UART_Init+0x58>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c7e:	4b08      	ldr	r3, [pc, #32]	; (8000ca0 <MX_USART1_UART_Init+0x58>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c84:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <MX_USART1_UART_Init+0x58>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c8a:	4805      	ldr	r0, [pc, #20]	; (8000ca0 <MX_USART1_UART_Init+0x58>)
 8000c8c:	f007 ffe7 	bl	8008c5e <HAL_UART_Init>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000c96:	f000 f923 	bl	8000ee0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c9a:	bf00      	nop
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	20000760 	.word	0x20000760
 8000ca4:	40011000 	.word	0x40011000

08000ca8 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b088      	sub	sp, #32
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000cae:	1d3b      	adds	r3, r7, #4
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
 8000cb4:	605a      	str	r2, [r3, #4]
 8000cb6:	609a      	str	r2, [r3, #8]
 8000cb8:	60da      	str	r2, [r3, #12]
 8000cba:	611a      	str	r2, [r3, #16]
 8000cbc:	615a      	str	r2, [r3, #20]
 8000cbe:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000cc0:	4b1e      	ldr	r3, [pc, #120]	; (8000d3c <MX_FMC_Init+0x94>)
 8000cc2:	4a1f      	ldr	r2, [pc, #124]	; (8000d40 <MX_FMC_Init+0x98>)
 8000cc4:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000cc6:	4b1d      	ldr	r3, [pc, #116]	; (8000d3c <MX_FMC_Init+0x94>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000ccc:	4b1b      	ldr	r3, [pc, #108]	; (8000d3c <MX_FMC_Init+0x94>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000cd2:	4b1a      	ldr	r3, [pc, #104]	; (8000d3c <MX_FMC_Init+0x94>)
 8000cd4:	2204      	movs	r2, #4
 8000cd6:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000cd8:	4b18      	ldr	r3, [pc, #96]	; (8000d3c <MX_FMC_Init+0x94>)
 8000cda:	2210      	movs	r2, #16
 8000cdc:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000cde:	4b17      	ldr	r3, [pc, #92]	; (8000d3c <MX_FMC_Init+0x94>)
 8000ce0:	2240      	movs	r2, #64	; 0x40
 8000ce2:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8000ce4:	4b15      	ldr	r3, [pc, #84]	; (8000d3c <MX_FMC_Init+0x94>)
 8000ce6:	2280      	movs	r2, #128	; 0x80
 8000ce8:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000cea:	4b14      	ldr	r3, [pc, #80]	; (8000d3c <MX_FMC_Init+0x94>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8000cf0:	4b12      	ldr	r3, [pc, #72]	; (8000d3c <MX_FMC_Init+0x94>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000cf6:	4b11      	ldr	r3, [pc, #68]	; (8000d3c <MX_FMC_Init+0x94>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000cfc:	4b0f      	ldr	r3, [pc, #60]	; (8000d3c <MX_FMC_Init+0x94>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8000d02:	2310      	movs	r3, #16
 8000d04:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8000d06:	2310      	movs	r3, #16
 8000d08:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 8000d0a:	2310      	movs	r3, #16
 8000d0c:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 8000d0e:	2310      	movs	r3, #16
 8000d10:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8000d12:	2310      	movs	r3, #16
 8000d14:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 8000d16:	2310      	movs	r3, #16
 8000d18:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 8000d1a:	2310      	movs	r3, #16
 8000d1c:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000d1e:	1d3b      	adds	r3, r7, #4
 8000d20:	4619      	mov	r1, r3
 8000d22:	4806      	ldr	r0, [pc, #24]	; (8000d3c <MX_FMC_Init+0x94>)
 8000d24:	f007 ff0a 	bl	8008b3c <HAL_SDRAM_Init>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 8000d2e:	f000 f8d7 	bl	8000ee0 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000d32:	bf00      	nop
 8000d34:	3720      	adds	r7, #32
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	200007e8 	.word	0x200007e8
 8000d40:	a0000140 	.word	0xa0000140

08000d44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b090      	sub	sp, #64	; 0x40
 8000d48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d4e:	2200      	movs	r2, #0
 8000d50:	601a      	str	r2, [r3, #0]
 8000d52:	605a      	str	r2, [r3, #4]
 8000d54:	609a      	str	r2, [r3, #8]
 8000d56:	60da      	str	r2, [r3, #12]
 8000d58:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d5a:	4b5e      	ldr	r3, [pc, #376]	; (8000ed4 <MX_GPIO_Init+0x190>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5e:	4a5d      	ldr	r2, [pc, #372]	; (8000ed4 <MX_GPIO_Init+0x190>)
 8000d60:	f043 0310 	orr.w	r3, r3, #16
 8000d64:	6313      	str	r3, [r2, #48]	; 0x30
 8000d66:	4b5b      	ldr	r3, [pc, #364]	; (8000ed4 <MX_GPIO_Init+0x190>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6a:	f003 0310 	and.w	r3, r3, #16
 8000d6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d72:	4b58      	ldr	r3, [pc, #352]	; (8000ed4 <MX_GPIO_Init+0x190>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d76:	4a57      	ldr	r2, [pc, #348]	; (8000ed4 <MX_GPIO_Init+0x190>)
 8000d78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7e:	4b55      	ldr	r3, [pc, #340]	; (8000ed4 <MX_GPIO_Init+0x190>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d86:	627b      	str	r3, [r7, #36]	; 0x24
 8000d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d8a:	4b52      	ldr	r3, [pc, #328]	; (8000ed4 <MX_GPIO_Init+0x190>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8e:	4a51      	ldr	r2, [pc, #324]	; (8000ed4 <MX_GPIO_Init+0x190>)
 8000d90:	f043 0302 	orr.w	r3, r3, #2
 8000d94:	6313      	str	r3, [r2, #48]	; 0x30
 8000d96:	4b4f      	ldr	r3, [pc, #316]	; (8000ed4 <MX_GPIO_Init+0x190>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9a:	f003 0302 	and.w	r3, r3, #2
 8000d9e:	623b      	str	r3, [r7, #32]
 8000da0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000da2:	4b4c      	ldr	r3, [pc, #304]	; (8000ed4 <MX_GPIO_Init+0x190>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da6:	4a4b      	ldr	r2, [pc, #300]	; (8000ed4 <MX_GPIO_Init+0x190>)
 8000da8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dac:	6313      	str	r3, [r2, #48]	; 0x30
 8000dae:	4b49      	ldr	r3, [pc, #292]	; (8000ed4 <MX_GPIO_Init+0x190>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000db6:	61fb      	str	r3, [r7, #28]
 8000db8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dba:	4b46      	ldr	r3, [pc, #280]	; (8000ed4 <MX_GPIO_Init+0x190>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbe:	4a45      	ldr	r2, [pc, #276]	; (8000ed4 <MX_GPIO_Init+0x190>)
 8000dc0:	f043 0308 	orr.w	r3, r3, #8
 8000dc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc6:	4b43      	ldr	r3, [pc, #268]	; (8000ed4 <MX_GPIO_Init+0x190>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dca:	f003 0308 	and.w	r3, r3, #8
 8000dce:	61bb      	str	r3, [r7, #24]
 8000dd0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000dd2:	4b40      	ldr	r3, [pc, #256]	; (8000ed4 <MX_GPIO_Init+0x190>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd6:	4a3f      	ldr	r2, [pc, #252]	; (8000ed4 <MX_GPIO_Init+0x190>)
 8000dd8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ddc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dde:	4b3d      	ldr	r3, [pc, #244]	; (8000ed4 <MX_GPIO_Init+0x190>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000de6:	617b      	str	r3, [r7, #20]
 8000de8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000dea:	4b3a      	ldr	r3, [pc, #232]	; (8000ed4 <MX_GPIO_Init+0x190>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dee:	4a39      	ldr	r2, [pc, #228]	; (8000ed4 <MX_GPIO_Init+0x190>)
 8000df0:	f043 0320 	orr.w	r3, r3, #32
 8000df4:	6313      	str	r3, [r2, #48]	; 0x30
 8000df6:	4b37      	ldr	r3, [pc, #220]	; (8000ed4 <MX_GPIO_Init+0x190>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfa:	f003 0320 	and.w	r3, r3, #32
 8000dfe:	613b      	str	r3, [r7, #16]
 8000e00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000e02:	4b34      	ldr	r3, [pc, #208]	; (8000ed4 <MX_GPIO_Init+0x190>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e06:	4a33      	ldr	r2, [pc, #204]	; (8000ed4 <MX_GPIO_Init+0x190>)
 8000e08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e0e:	4b31      	ldr	r3, [pc, #196]	; (8000ed4 <MX_GPIO_Init+0x190>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e16:	60fb      	str	r3, [r7, #12]
 8000e18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e1a:	4b2e      	ldr	r3, [pc, #184]	; (8000ed4 <MX_GPIO_Init+0x190>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1e:	4a2d      	ldr	r2, [pc, #180]	; (8000ed4 <MX_GPIO_Init+0x190>)
 8000e20:	f043 0304 	orr.w	r3, r3, #4
 8000e24:	6313      	str	r3, [r2, #48]	; 0x30
 8000e26:	4b2b      	ldr	r3, [pc, #172]	; (8000ed4 <MX_GPIO_Init+0x190>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2a:	f003 0304 	and.w	r3, r3, #4
 8000e2e:	60bb      	str	r3, [r7, #8]
 8000e30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e32:	4b28      	ldr	r3, [pc, #160]	; (8000ed4 <MX_GPIO_Init+0x190>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e36:	4a27      	ldr	r2, [pc, #156]	; (8000ed4 <MX_GPIO_Init+0x190>)
 8000e38:	f043 0301 	orr.w	r3, r3, #1
 8000e3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e3e:	4b25      	ldr	r3, [pc, #148]	; (8000ed4 <MX_GPIO_Init+0x190>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e42:	f003 0301 	and.w	r3, r3, #1
 8000e46:	607b      	str	r3, [r7, #4]
 8000e48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e4a:	4b22      	ldr	r3, [pc, #136]	; (8000ed4 <MX_GPIO_Init+0x190>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4e:	4a21      	ldr	r2, [pc, #132]	; (8000ed4 <MX_GPIO_Init+0x190>)
 8000e50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e54:	6313      	str	r3, [r2, #48]	; 0x30
 8000e56:	4b1f      	ldr	r3, [pc, #124]	; (8000ed4 <MX_GPIO_Init+0x190>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e5e:	603b      	str	r3, [r7, #0]
 8000e60:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8000e62:	2200      	movs	r2, #0
 8000e64:	2108      	movs	r1, #8
 8000e66:	481c      	ldr	r0, [pc, #112]	; (8000ed8 <MX_GPIO_Init+0x194>)
 8000e68:	f004 ffc0 	bl	8005dec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, LED_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	f241 0102 	movw	r1, #4098	; 0x1002
 8000e72:	481a      	ldr	r0, [pc, #104]	; (8000edc <MX_GPIO_Init+0x198>)
 8000e74:	f004 ffba 	bl	8005dec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8000e78:	2308      	movs	r3, #8
 8000e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e80:	2300      	movs	r3, #0
 8000e82:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e84:	2300      	movs	r3, #0
 8000e86:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000e88:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	4812      	ldr	r0, [pc, #72]	; (8000ed8 <MX_GPIO_Init+0x194>)
 8000e90:	f004 fcf4 	bl	800587c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = LED_Pin|LCD_DISP_Pin;
 8000e94:	f241 0302 	movw	r3, #4098	; 0x1002
 8000e98:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000ea6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000eaa:	4619      	mov	r1, r3
 8000eac:	480b      	ldr	r0, [pc, #44]	; (8000edc <MX_GPIO_Init+0x198>)
 8000eae:	f004 fce5 	bl	800587c <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8000eb2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000ec0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	4805      	ldr	r0, [pc, #20]	; (8000edc <MX_GPIO_Init+0x198>)
 8000ec8:	f004 fcd8 	bl	800587c <HAL_GPIO_Init>

}
 8000ecc:	bf00      	nop
 8000ece:	3740      	adds	r7, #64	; 0x40
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	40023800 	.word	0x40023800
 8000ed8:	40022800 	.word	0x40022800
 8000edc:	40022000 	.word	0x40022000

08000ee0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ee4:	b672      	cpsid	i
}
 8000ee6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ee8:	e7fe      	b.n	8000ee8 <Error_Handler+0x8>
	...

08000eec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000ef2:	4b0f      	ldr	r3, [pc, #60]	; (8000f30 <HAL_MspInit+0x44>)
 8000ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef6:	4a0e      	ldr	r2, [pc, #56]	; (8000f30 <HAL_MspInit+0x44>)
 8000ef8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000efc:	6413      	str	r3, [r2, #64]	; 0x40
 8000efe:	4b0c      	ldr	r3, [pc, #48]	; (8000f30 <HAL_MspInit+0x44>)
 8000f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f06:	607b      	str	r3, [r7, #4]
 8000f08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f0a:	4b09      	ldr	r3, [pc, #36]	; (8000f30 <HAL_MspInit+0x44>)
 8000f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f0e:	4a08      	ldr	r2, [pc, #32]	; (8000f30 <HAL_MspInit+0x44>)
 8000f10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f14:	6453      	str	r3, [r2, #68]	; 0x44
 8000f16:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <HAL_MspInit+0x44>)
 8000f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f1e:	603b      	str	r3, [r7, #0]
 8000f20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f22:	bf00      	nop
 8000f24:	370c      	adds	r7, #12
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	40023800 	.word	0x40023800

08000f34 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b085      	sub	sp, #20
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a0a      	ldr	r2, [pc, #40]	; (8000f6c <HAL_DMA2D_MspInit+0x38>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d10b      	bne.n	8000f5e <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000f46:	4b0a      	ldr	r3, [pc, #40]	; (8000f70 <HAL_DMA2D_MspInit+0x3c>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	4a09      	ldr	r2, [pc, #36]	; (8000f70 <HAL_DMA2D_MspInit+0x3c>)
 8000f4c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000f50:	6313      	str	r3, [r2, #48]	; 0x30
 8000f52:	4b07      	ldr	r3, [pc, #28]	; (8000f70 <HAL_DMA2D_MspInit+0x3c>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000f5a:	60fb      	str	r3, [r7, #12]
 8000f5c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8000f5e:	bf00      	nop
 8000f60:	3714      	adds	r7, #20
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	4002b000 	.word	0x4002b000
 8000f70:	40023800 	.word	0x40023800

08000f74 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b0ae      	sub	sp, #184	; 0xb8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f7c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f80:	2200      	movs	r2, #0
 8000f82:	601a      	str	r2, [r3, #0]
 8000f84:	605a      	str	r2, [r3, #4]
 8000f86:	609a      	str	r2, [r3, #8]
 8000f88:	60da      	str	r2, [r3, #12]
 8000f8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f8c:	f107 0320 	add.w	r3, r7, #32
 8000f90:	2284      	movs	r2, #132	; 0x84
 8000f92:	2100      	movs	r1, #0
 8000f94:	4618      	mov	r0, r3
 8000f96:	f013 fdb7 	bl	8014b08 <memset>
  if(hltdc->Instance==LTDC)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4a6a      	ldr	r2, [pc, #424]	; (8001148 <HAL_LTDC_MspInit+0x1d4>)
 8000fa0:	4293      	cmp	r3, r2
 8000fa2:	f040 80cd 	bne.w	8001140 <HAL_LTDC_MspInit+0x1cc>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000fa6:	2308      	movs	r3, #8
 8000fa8:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000faa:	23c0      	movs	r3, #192	; 0xc0
 8000fac:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8000fae:	2305      	movs	r3, #5
 8000fb0:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8000fbe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fc2:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fc4:	f107 0320 	add.w	r3, r7, #32
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f007 f9c7 	bl	800835c <HAL_RCCEx_PeriphCLKConfig>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <HAL_LTDC_MspInit+0x64>
    {
      Error_Handler();
 8000fd4:	f7ff ff84 	bl	8000ee0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000fd8:	4b5c      	ldr	r3, [pc, #368]	; (800114c <HAL_LTDC_MspInit+0x1d8>)
 8000fda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fdc:	4a5b      	ldr	r2, [pc, #364]	; (800114c <HAL_LTDC_MspInit+0x1d8>)
 8000fde:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000fe2:	6453      	str	r3, [r2, #68]	; 0x44
 8000fe4:	4b59      	ldr	r3, [pc, #356]	; (800114c <HAL_LTDC_MspInit+0x1d8>)
 8000fe6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fe8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000fec:	61fb      	str	r3, [r7, #28]
 8000fee:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ff0:	4b56      	ldr	r3, [pc, #344]	; (800114c <HAL_LTDC_MspInit+0x1d8>)
 8000ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff4:	4a55      	ldr	r2, [pc, #340]	; (800114c <HAL_LTDC_MspInit+0x1d8>)
 8000ff6:	f043 0310 	orr.w	r3, r3, #16
 8000ffa:	6313      	str	r3, [r2, #48]	; 0x30
 8000ffc:	4b53      	ldr	r3, [pc, #332]	; (800114c <HAL_LTDC_MspInit+0x1d8>)
 8000ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001000:	f003 0310 	and.w	r3, r3, #16
 8001004:	61bb      	str	r3, [r7, #24]
 8001006:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001008:	4b50      	ldr	r3, [pc, #320]	; (800114c <HAL_LTDC_MspInit+0x1d8>)
 800100a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100c:	4a4f      	ldr	r2, [pc, #316]	; (800114c <HAL_LTDC_MspInit+0x1d8>)
 800100e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001012:	6313      	str	r3, [r2, #48]	; 0x30
 8001014:	4b4d      	ldr	r3, [pc, #308]	; (800114c <HAL_LTDC_MspInit+0x1d8>)
 8001016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001018:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800101c:	617b      	str	r3, [r7, #20]
 800101e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8001020:	4b4a      	ldr	r3, [pc, #296]	; (800114c <HAL_LTDC_MspInit+0x1d8>)
 8001022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001024:	4a49      	ldr	r2, [pc, #292]	; (800114c <HAL_LTDC_MspInit+0x1d8>)
 8001026:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800102a:	6313      	str	r3, [r2, #48]	; 0x30
 800102c:	4b47      	ldr	r3, [pc, #284]	; (800114c <HAL_LTDC_MspInit+0x1d8>)
 800102e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001030:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001034:	613b      	str	r3, [r7, #16]
 8001036:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001038:	4b44      	ldr	r3, [pc, #272]	; (800114c <HAL_LTDC_MspInit+0x1d8>)
 800103a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103c:	4a43      	ldr	r2, [pc, #268]	; (800114c <HAL_LTDC_MspInit+0x1d8>)
 800103e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001042:	6313      	str	r3, [r2, #48]	; 0x30
 8001044:	4b41      	ldr	r3, [pc, #260]	; (800114c <HAL_LTDC_MspInit+0x1d8>)
 8001046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001048:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800104c:	60fb      	str	r3, [r7, #12]
 800104e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001050:	4b3e      	ldr	r3, [pc, #248]	; (800114c <HAL_LTDC_MspInit+0x1d8>)
 8001052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001054:	4a3d      	ldr	r2, [pc, #244]	; (800114c <HAL_LTDC_MspInit+0x1d8>)
 8001056:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800105a:	6313      	str	r3, [r2, #48]	; 0x30
 800105c:	4b3b      	ldr	r3, [pc, #236]	; (800114c <HAL_LTDC_MspInit+0x1d8>)
 800105e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001060:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001064:	60bb      	str	r3, [r7, #8]
 8001066:	68bb      	ldr	r3, [r7, #8]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001068:	2310      	movs	r3, #16
 800106a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106e:	2302      	movs	r3, #2
 8001070:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001074:	2300      	movs	r3, #0
 8001076:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107a:	2300      	movs	r3, #0
 800107c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001080:	230e      	movs	r3, #14
 8001082:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001086:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800108a:	4619      	mov	r1, r3
 800108c:	4830      	ldr	r0, [pc, #192]	; (8001150 <HAL_LTDC_MspInit+0x1dc>)
 800108e:	f004 fbf5 	bl	800587c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_11
 8001092:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8001096:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_7|GPIO_PIN_9
                          |GPIO_PIN_6|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_3
                          |GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109a:	2302      	movs	r3, #2
 800109c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a0:	2300      	movs	r3, #0
 80010a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a6:	2300      	movs	r3, #0
 80010a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80010ac:	230e      	movs	r3, #14
 80010ae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80010b2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80010b6:	4619      	mov	r1, r3
 80010b8:	4826      	ldr	r0, [pc, #152]	; (8001154 <HAL_LTDC_MspInit+0x1e0>)
 80010ba:	f004 fbdf 	bl	800587c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4
 80010be:	23f7      	movs	r3, #247	; 0xf7
 80010c0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c4:	2302      	movs	r3, #2
 80010c6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ca:	2300      	movs	r3, #0
 80010cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d0:	2300      	movs	r3, #0
 80010d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80010d6:	230e      	movs	r3, #14
 80010d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80010dc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80010e0:	4619      	mov	r1, r3
 80010e2:	481d      	ldr	r0, [pc, #116]	; (8001158 <HAL_LTDC_MspInit+0x1e4>)
 80010e4:	f004 fbca 	bl	800587c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80010e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010ec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f0:	2302      	movs	r3, #2
 80010f2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f6:	2300      	movs	r3, #0
 80010f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fc:	2300      	movs	r3, #0
 80010fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001102:	2309      	movs	r3, #9
 8001104:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001108:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800110c:	4619      	mov	r1, r3
 800110e:	4813      	ldr	r0, [pc, #76]	; (800115c <HAL_LTDC_MspInit+0x1e8>)
 8001110:	f004 fbb4 	bl	800587c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_15|GPIO_PIN_14;
 8001114:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8001118:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111c:	2302      	movs	r3, #2
 800111e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001122:	2300      	movs	r3, #0
 8001124:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001128:	2300      	movs	r3, #0
 800112a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800112e:	230e      	movs	r3, #14
 8001130:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001134:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001138:	4619      	mov	r1, r3
 800113a:	4809      	ldr	r0, [pc, #36]	; (8001160 <HAL_LTDC_MspInit+0x1ec>)
 800113c:	f004 fb9e 	bl	800587c <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001140:	bf00      	nop
 8001142:	37b8      	adds	r7, #184	; 0xb8
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	40016800 	.word	0x40016800
 800114c:	40023800 	.word	0x40023800
 8001150:	40021000 	.word	0x40021000
 8001154:	40022400 	.word	0x40022400
 8001158:	40022800 	.word	0x40022800
 800115c:	40021800 	.word	0x40021800
 8001160:	40022000 	.word	0x40022000

08001164 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b08c      	sub	sp, #48	; 0x30
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800116c:	f107 031c 	add.w	r3, r7, #28
 8001170:	2200      	movs	r2, #0
 8001172:	601a      	str	r2, [r3, #0]
 8001174:	605a      	str	r2, [r3, #4]
 8001176:	609a      	str	r2, [r3, #8]
 8001178:	60da      	str	r2, [r3, #12]
 800117a:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a3b      	ldr	r2, [pc, #236]	; (8001270 <HAL_QSPI_MspInit+0x10c>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d170      	bne.n	8001268 <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001186:	4b3b      	ldr	r3, [pc, #236]	; (8001274 <HAL_QSPI_MspInit+0x110>)
 8001188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800118a:	4a3a      	ldr	r2, [pc, #232]	; (8001274 <HAL_QSPI_MspInit+0x110>)
 800118c:	f043 0302 	orr.w	r3, r3, #2
 8001190:	6393      	str	r3, [r2, #56]	; 0x38
 8001192:	4b38      	ldr	r3, [pc, #224]	; (8001274 <HAL_QSPI_MspInit+0x110>)
 8001194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001196:	f003 0302 	and.w	r3, r3, #2
 800119a:	61bb      	str	r3, [r7, #24]
 800119c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800119e:	4b35      	ldr	r3, [pc, #212]	; (8001274 <HAL_QSPI_MspInit+0x110>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	4a34      	ldr	r2, [pc, #208]	; (8001274 <HAL_QSPI_MspInit+0x110>)
 80011a4:	f043 0310 	orr.w	r3, r3, #16
 80011a8:	6313      	str	r3, [r2, #48]	; 0x30
 80011aa:	4b32      	ldr	r3, [pc, #200]	; (8001274 <HAL_QSPI_MspInit+0x110>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	f003 0310 	and.w	r3, r3, #16
 80011b2:	617b      	str	r3, [r7, #20]
 80011b4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011b6:	4b2f      	ldr	r3, [pc, #188]	; (8001274 <HAL_QSPI_MspInit+0x110>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ba:	4a2e      	ldr	r2, [pc, #184]	; (8001274 <HAL_QSPI_MspInit+0x110>)
 80011bc:	f043 0302 	orr.w	r3, r3, #2
 80011c0:	6313      	str	r3, [r2, #48]	; 0x30
 80011c2:	4b2c      	ldr	r3, [pc, #176]	; (8001274 <HAL_QSPI_MspInit+0x110>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c6:	f003 0302 	and.w	r3, r3, #2
 80011ca:	613b      	str	r3, [r7, #16]
 80011cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011ce:	4b29      	ldr	r3, [pc, #164]	; (8001274 <HAL_QSPI_MspInit+0x110>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	4a28      	ldr	r2, [pc, #160]	; (8001274 <HAL_QSPI_MspInit+0x110>)
 80011d4:	f043 0308 	orr.w	r3, r3, #8
 80011d8:	6313      	str	r3, [r2, #48]	; 0x30
 80011da:	4b26      	ldr	r3, [pc, #152]	; (8001274 <HAL_QSPI_MspInit+0x110>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	f003 0308 	and.w	r3, r3, #8
 80011e2:	60fb      	str	r3, [r7, #12]
 80011e4:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80011e6:	2304      	movs	r3, #4
 80011e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ea:	2302      	movs	r3, #2
 80011ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ee:	2300      	movs	r3, #0
 80011f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011f2:	2303      	movs	r3, #3
 80011f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80011f6:	2309      	movs	r3, #9
 80011f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011fa:	f107 031c 	add.w	r3, r7, #28
 80011fe:	4619      	mov	r1, r3
 8001200:	481d      	ldr	r0, [pc, #116]	; (8001278 <HAL_QSPI_MspInit+0x114>)
 8001202:	f004 fb3b 	bl	800587c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001206:	2340      	movs	r3, #64	; 0x40
 8001208:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120a:	2302      	movs	r3, #2
 800120c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120e:	2300      	movs	r3, #0
 8001210:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001212:	2303      	movs	r3, #3
 8001214:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001216:	230a      	movs	r3, #10
 8001218:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800121a:	f107 031c 	add.w	r3, r7, #28
 800121e:	4619      	mov	r1, r3
 8001220:	4816      	ldr	r0, [pc, #88]	; (800127c <HAL_QSPI_MspInit+0x118>)
 8001222:	f004 fb2b 	bl	800587c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001226:	2304      	movs	r3, #4
 8001228:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800122a:	2302      	movs	r3, #2
 800122c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122e:	2300      	movs	r3, #0
 8001230:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001232:	2303      	movs	r3, #3
 8001234:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001236:	2309      	movs	r3, #9
 8001238:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800123a:	f107 031c 	add.w	r3, r7, #28
 800123e:	4619      	mov	r1, r3
 8001240:	480e      	ldr	r0, [pc, #56]	; (800127c <HAL_QSPI_MspInit+0x118>)
 8001242:	f004 fb1b 	bl	800587c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_11;
 8001246:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800124a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800124c:	2302      	movs	r3, #2
 800124e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001250:	2300      	movs	r3, #0
 8001252:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001254:	2303      	movs	r3, #3
 8001256:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001258:	2309      	movs	r3, #9
 800125a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800125c:	f107 031c 	add.w	r3, r7, #28
 8001260:	4619      	mov	r1, r3
 8001262:	4807      	ldr	r0, [pc, #28]	; (8001280 <HAL_QSPI_MspInit+0x11c>)
 8001264:	f004 fb0a 	bl	800587c <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001268:	bf00      	nop
 800126a:	3730      	adds	r7, #48	; 0x30
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	a0001000 	.word	0xa0001000
 8001274:	40023800 	.word	0x40023800
 8001278:	40021000 	.word	0x40021000
 800127c:	40020400 	.word	0x40020400
 8001280:	40020c00 	.word	0x40020c00

08001284 <HAL_QSPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* hqspi)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  if(hqspi->Instance==QUADSPI)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a0c      	ldr	r2, [pc, #48]	; (80012c4 <HAL_QSPI_MspDeInit+0x40>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d112      	bne.n	80012bc <HAL_QSPI_MspDeInit+0x38>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
 8001296:	4b0c      	ldr	r3, [pc, #48]	; (80012c8 <HAL_QSPI_MspDeInit+0x44>)
 8001298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800129a:	4a0b      	ldr	r2, [pc, #44]	; (80012c8 <HAL_QSPI_MspDeInit+0x44>)
 800129c:	f023 0302 	bic.w	r3, r3, #2
 80012a0:	6393      	str	r3, [r2, #56]	; 0x38
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_2);
 80012a2:	2104      	movs	r1, #4
 80012a4:	4809      	ldr	r0, [pc, #36]	; (80012cc <HAL_QSPI_MspDeInit+0x48>)
 80012a6:	f004 fc95 	bl	8005bd4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6|GPIO_PIN_2);
 80012aa:	2144      	movs	r1, #68	; 0x44
 80012ac:	4808      	ldr	r0, [pc, #32]	; (80012d0 <HAL_QSPI_MspDeInit+0x4c>)
 80012ae:	f004 fc91 	bl	8005bd4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_11);
 80012b2:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 80012b6:	4807      	ldr	r0, [pc, #28]	; (80012d4 <HAL_QSPI_MspDeInit+0x50>)
 80012b8:	f004 fc8c 	bl	8005bd4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }

}
 80012bc:	bf00      	nop
 80012be:	3708      	adds	r7, #8
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	a0001000 	.word	0xa0001000
 80012c8:	40023800 	.word	0x40023800
 80012cc:	40021000 	.word	0x40021000
 80012d0:	40020400 	.word	0x40020400
 80012d4:	40020c00 	.word	0x40020c00

080012d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b0ac      	sub	sp, #176	; 0xb0
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	605a      	str	r2, [r3, #4]
 80012ea:	609a      	str	r2, [r3, #8]
 80012ec:	60da      	str	r2, [r3, #12]
 80012ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012f0:	f107 0318 	add.w	r3, r7, #24
 80012f4:	2284      	movs	r2, #132	; 0x84
 80012f6:	2100      	movs	r1, #0
 80012f8:	4618      	mov	r0, r3
 80012fa:	f013 fc05 	bl	8014b08 <memset>
  if(huart->Instance==USART1)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a32      	ldr	r2, [pc, #200]	; (80013cc <HAL_UART_MspInit+0xf4>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d15c      	bne.n	80013c2 <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001308:	2340      	movs	r3, #64	; 0x40
 800130a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800130c:	2300      	movs	r3, #0
 800130e:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001310:	f107 0318 	add.w	r3, r7, #24
 8001314:	4618      	mov	r0, r3
 8001316:	f007 f821 	bl	800835c <HAL_RCCEx_PeriphCLKConfig>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001320:	f7ff fdde 	bl	8000ee0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001324:	4b2a      	ldr	r3, [pc, #168]	; (80013d0 <HAL_UART_MspInit+0xf8>)
 8001326:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001328:	4a29      	ldr	r2, [pc, #164]	; (80013d0 <HAL_UART_MspInit+0xf8>)
 800132a:	f043 0310 	orr.w	r3, r3, #16
 800132e:	6453      	str	r3, [r2, #68]	; 0x44
 8001330:	4b27      	ldr	r3, [pc, #156]	; (80013d0 <HAL_UART_MspInit+0xf8>)
 8001332:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001334:	f003 0310 	and.w	r3, r3, #16
 8001338:	617b      	str	r3, [r7, #20]
 800133a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800133c:	4b24      	ldr	r3, [pc, #144]	; (80013d0 <HAL_UART_MspInit+0xf8>)
 800133e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001340:	4a23      	ldr	r2, [pc, #140]	; (80013d0 <HAL_UART_MspInit+0xf8>)
 8001342:	f043 0302 	orr.w	r3, r3, #2
 8001346:	6313      	str	r3, [r2, #48]	; 0x30
 8001348:	4b21      	ldr	r3, [pc, #132]	; (80013d0 <HAL_UART_MspInit+0xf8>)
 800134a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134c:	f003 0302 	and.w	r3, r3, #2
 8001350:	613b      	str	r3, [r7, #16]
 8001352:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001354:	4b1e      	ldr	r3, [pc, #120]	; (80013d0 <HAL_UART_MspInit+0xf8>)
 8001356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001358:	4a1d      	ldr	r2, [pc, #116]	; (80013d0 <HAL_UART_MspInit+0xf8>)
 800135a:	f043 0301 	orr.w	r3, r3, #1
 800135e:	6313      	str	r3, [r2, #48]	; 0x30
 8001360:	4b1b      	ldr	r3, [pc, #108]	; (80013d0 <HAL_UART_MspInit+0xf8>)
 8001362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001364:	f003 0301 	and.w	r3, r3, #1
 8001368:	60fb      	str	r3, [r7, #12]
 800136a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800136c:	2380      	movs	r3, #128	; 0x80
 800136e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001372:	2302      	movs	r3, #2
 8001374:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001378:	2300      	movs	r3, #0
 800137a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800137e:	2303      	movs	r3, #3
 8001380:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001384:	2307      	movs	r3, #7
 8001386:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800138a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800138e:	4619      	mov	r1, r3
 8001390:	4810      	ldr	r0, [pc, #64]	; (80013d4 <HAL_UART_MspInit+0xfc>)
 8001392:	f004 fa73 	bl	800587c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001396:	f44f 7300 	mov.w	r3, #512	; 0x200
 800139a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139e:	2302      	movs	r3, #2
 80013a0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a4:	2300      	movs	r3, #0
 80013a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013aa:	2303      	movs	r3, #3
 80013ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80013b0:	2307      	movs	r3, #7
 80013b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80013ba:	4619      	mov	r1, r3
 80013bc:	4806      	ldr	r0, [pc, #24]	; (80013d8 <HAL_UART_MspInit+0x100>)
 80013be:	f004 fa5d 	bl	800587c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80013c2:	bf00      	nop
 80013c4:	37b0      	adds	r7, #176	; 0xb0
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	40011000 	.word	0x40011000
 80013d0:	40023800 	.word	0x40023800
 80013d4:	40020400 	.word	0x40020400
 80013d8:	40020000 	.word	0x40020000

080013dc <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80013dc:	b580      	push	{r7, lr}
 80013de:	b086      	sub	sp, #24
 80013e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80013e2:	1d3b      	adds	r3, r7, #4
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	605a      	str	r2, [r3, #4]
 80013ea:	609a      	str	r2, [r3, #8]
 80013ec:	60da      	str	r2, [r3, #12]
 80013ee:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80013f0:	4b33      	ldr	r3, [pc, #204]	; (80014c0 <HAL_FMC_MspInit+0xe4>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d15e      	bne.n	80014b6 <HAL_FMC_MspInit+0xda>
    return;
  }
  FMC_Initialized = 1;
 80013f8:	4b31      	ldr	r3, [pc, #196]	; (80014c0 <HAL_FMC_MspInit+0xe4>)
 80013fa:	2201      	movs	r2, #1
 80013fc:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80013fe:	4b31      	ldr	r3, [pc, #196]	; (80014c4 <HAL_FMC_MspInit+0xe8>)
 8001400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001402:	4a30      	ldr	r2, [pc, #192]	; (80014c4 <HAL_FMC_MspInit+0xe8>)
 8001404:	f043 0301 	orr.w	r3, r3, #1
 8001408:	6393      	str	r3, [r2, #56]	; 0x38
 800140a:	4b2e      	ldr	r3, [pc, #184]	; (80014c4 <HAL_FMC_MspInit+0xe8>)
 800140c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800140e:	f003 0301 	and.w	r3, r3, #1
 8001412:	603b      	str	r3, [r7, #0]
 8001414:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9
 8001416:	f64f 7383 	movw	r3, #65411	; 0xff83
 800141a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_7|GPIO_PIN_10
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800141c:	2302      	movs	r3, #2
 800141e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001420:	2300      	movs	r3, #0
 8001422:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001424:	2303      	movs	r3, #3
 8001426:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001428:	230c      	movs	r3, #12
 800142a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800142c:	1d3b      	adds	r3, r7, #4
 800142e:	4619      	mov	r1, r3
 8001430:	4825      	ldr	r0, [pc, #148]	; (80014c8 <HAL_FMC_MspInit+0xec>)
 8001432:	f004 fa23 	bl	800587c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0
 8001436:	f248 1333 	movw	r3, #33075	; 0x8133
 800143a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800143c:	2302      	movs	r3, #2
 800143e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001440:	2300      	movs	r3, #0
 8001442:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001444:	2303      	movs	r3, #3
 8001446:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001448:	230c      	movs	r3, #12
 800144a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800144c:	1d3b      	adds	r3, r7, #4
 800144e:	4619      	mov	r1, r3
 8001450:	481e      	ldr	r0, [pc, #120]	; (80014cc <HAL_FMC_MspInit+0xf0>)
 8001452:	f004 fa13 	bl	800587c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10
 8001456:	f24c 7303 	movw	r3, #50947	; 0xc703
 800145a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145c:	2302      	movs	r3, #2
 800145e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001460:	2300      	movs	r3, #0
 8001462:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001464:	2303      	movs	r3, #3
 8001466:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001468:	230c      	movs	r3, #12
 800146a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800146c:	1d3b      	adds	r3, r7, #4
 800146e:	4619      	mov	r1, r3
 8001470:	4817      	ldr	r0, [pc, #92]	; (80014d0 <HAL_FMC_MspInit+0xf4>)
 8001472:	f004 fa03 	bl	800587c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001476:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800147a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_15
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800147c:	2302      	movs	r3, #2
 800147e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001480:	2300      	movs	r3, #0
 8001482:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001484:	2303      	movs	r3, #3
 8001486:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001488:	230c      	movs	r3, #12
 800148a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800148c:	1d3b      	adds	r3, r7, #4
 800148e:	4619      	mov	r1, r3
 8001490:	4810      	ldr	r0, [pc, #64]	; (80014d4 <HAL_FMC_MspInit+0xf8>)
 8001492:	f004 f9f3 	bl	800587c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_2;
 8001496:	232c      	movs	r3, #44	; 0x2c
 8001498:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800149a:	2302      	movs	r3, #2
 800149c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149e:	2300      	movs	r3, #0
 80014a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014a2:	2303      	movs	r3, #3
 80014a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80014a6:	230c      	movs	r3, #12
 80014a8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80014aa:	1d3b      	adds	r3, r7, #4
 80014ac:	4619      	mov	r1, r3
 80014ae:	480a      	ldr	r0, [pc, #40]	; (80014d8 <HAL_FMC_MspInit+0xfc>)
 80014b0:	f004 f9e4 	bl	800587c <HAL_GPIO_Init>
 80014b4:	e000      	b.n	80014b8 <HAL_FMC_MspInit+0xdc>
    return;
 80014b6:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80014b8:	3718      	adds	r7, #24
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	20000820 	.word	0x20000820
 80014c4:	40023800 	.word	0x40023800
 80014c8:	40021000 	.word	0x40021000
 80014cc:	40021800 	.word	0x40021800
 80014d0:	40020c00 	.word	0x40020c00
 80014d4:	40021400 	.word	0x40021400
 80014d8:	40021c00 	.word	0x40021c00

080014dc <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80014e4:	f7ff ff7a 	bl	80013dc <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80014e8:	bf00      	nop
 80014ea:	3708      	adds	r7, #8
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}

080014f0 <SVC_Handler>:
/******************************************************************************/
/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014f4:	bf00      	nop
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr

080014fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014fe:	b480      	push	{r7}
 8001500:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001502:	bf00      	nop
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr

0800150c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001510:	f002 fab2 	bl	8003a78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001514:	bf00      	nop
 8001516:	bd80      	pop	{r7, pc}

08001518 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
	return 1;
 800151c:	2301      	movs	r3, #1
}
 800151e:	4618      	mov	r0, r3
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr

08001528 <_kill>:

int _kill(int pid, int sig)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001532:	4b05      	ldr	r3, [pc, #20]	; (8001548 <_kill+0x20>)
 8001534:	2216      	movs	r2, #22
 8001536:	601a      	str	r2, [r3, #0]
	return -1;
 8001538:	f04f 33ff 	mov.w	r3, #4294967295
}
 800153c:	4618      	mov	r0, r3
 800153e:	370c      	adds	r7, #12
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr
 8001548:	20008d00 	.word	0x20008d00

0800154c <_exit>:

void _exit (int status)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001554:	f04f 31ff 	mov.w	r1, #4294967295
 8001558:	6878      	ldr	r0, [r7, #4]
 800155a:	f7ff ffe5 	bl	8001528 <_kill>
	while (1) {}		/* Make sure we hang here */
 800155e:	e7fe      	b.n	800155e <_exit+0x12>

08001560 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b086      	sub	sp, #24
 8001564:	af00      	add	r7, sp, #0
 8001566:	60f8      	str	r0, [r7, #12]
 8001568:	60b9      	str	r1, [r7, #8]
 800156a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800156c:	2300      	movs	r3, #0
 800156e:	617b      	str	r3, [r7, #20]
 8001570:	e00a      	b.n	8001588 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001572:	f3af 8000 	nop.w
 8001576:	4601      	mov	r1, r0
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	1c5a      	adds	r2, r3, #1
 800157c:	60ba      	str	r2, [r7, #8]
 800157e:	b2ca      	uxtb	r2, r1
 8001580:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	3301      	adds	r3, #1
 8001586:	617b      	str	r3, [r7, #20]
 8001588:	697a      	ldr	r2, [r7, #20]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	429a      	cmp	r2, r3
 800158e:	dbf0      	blt.n	8001572 <_read+0x12>
	}

return len;
 8001590:	687b      	ldr	r3, [r7, #4]
}
 8001592:	4618      	mov	r0, r3
 8001594:	3718      	adds	r7, #24
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}

0800159a <_close>:
	}
	return len;
}

int _close(int file)
{
 800159a:	b480      	push	{r7}
 800159c:	b083      	sub	sp, #12
 800159e:	af00      	add	r7, sp, #0
 80015a0:	6078      	str	r0, [r7, #4]
	return -1;
 80015a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	370c      	adds	r7, #12
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr

080015b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015b2:	b480      	push	{r7}
 80015b4:	b083      	sub	sp, #12
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	6078      	str	r0, [r7, #4]
 80015ba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015c2:	605a      	str	r2, [r3, #4]
	return 0;
 80015c4:	2300      	movs	r3, #0
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	370c      	adds	r7, #12
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr

080015d2 <_isatty>:

int _isatty(int file)
{
 80015d2:	b480      	push	{r7}
 80015d4:	b083      	sub	sp, #12
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	6078      	str	r0, [r7, #4]
	return 1;
 80015da:	2301      	movs	r3, #1
}
 80015dc:	4618      	mov	r0, r3
 80015de:	370c      	adds	r7, #12
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr

080015e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b085      	sub	sp, #20
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	60f8      	str	r0, [r7, #12]
 80015f0:	60b9      	str	r1, [r7, #8]
 80015f2:	607a      	str	r2, [r7, #4]
	return 0;
 80015f4:	2300      	movs	r3, #0
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3714      	adds	r7, #20
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
	...

08001604 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001604:	b480      	push	{r7}
 8001606:	b087      	sub	sp, #28
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800160c:	4a14      	ldr	r2, [pc, #80]	; (8001660 <_sbrk+0x5c>)
 800160e:	4b15      	ldr	r3, [pc, #84]	; (8001664 <_sbrk+0x60>)
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001618:	4b13      	ldr	r3, [pc, #76]	; (8001668 <_sbrk+0x64>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d102      	bne.n	8001626 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001620:	4b11      	ldr	r3, [pc, #68]	; (8001668 <_sbrk+0x64>)
 8001622:	4a12      	ldr	r2, [pc, #72]	; (800166c <_sbrk+0x68>)
 8001624:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001626:	4b10      	ldr	r3, [pc, #64]	; (8001668 <_sbrk+0x64>)
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4413      	add	r3, r2
 800162e:	693a      	ldr	r2, [r7, #16]
 8001630:	429a      	cmp	r2, r3
 8001632:	d205      	bcs.n	8001640 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001634:	4b0e      	ldr	r3, [pc, #56]	; (8001670 <_sbrk+0x6c>)
 8001636:	220c      	movs	r2, #12
 8001638:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800163a:	f04f 33ff 	mov.w	r3, #4294967295
 800163e:	e009      	b.n	8001654 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001640:	4b09      	ldr	r3, [pc, #36]	; (8001668 <_sbrk+0x64>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001646:	4b08      	ldr	r3, [pc, #32]	; (8001668 <_sbrk+0x64>)
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4413      	add	r3, r2
 800164e:	4a06      	ldr	r2, [pc, #24]	; (8001668 <_sbrk+0x64>)
 8001650:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001652:	68fb      	ldr	r3, [r7, #12]
}
 8001654:	4618      	mov	r0, r3
 8001656:	371c      	adds	r7, #28
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr
 8001660:	20050000 	.word	0x20050000
 8001664:	00000400 	.word	0x00000400
 8001668:	20000824 	.word	0x20000824
 800166c:	20008d10 	.word	0x20008d10
 8001670:	20008d00 	.word	0x20008d00

08001674 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001678:	4b06      	ldr	r3, [pc, #24]	; (8001694 <SystemInit+0x20>)
 800167a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800167e:	4a05      	ldr	r2, [pc, #20]	; (8001694 <SystemInit+0x20>)
 8001680:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001684:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001688:	bf00      	nop
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	e000ed00 	.word	0xe000ed00

08001698 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001698:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016d0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800169c:	480d      	ldr	r0, [pc, #52]	; (80016d4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800169e:	490e      	ldr	r1, [pc, #56]	; (80016d8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80016a0:	4a0e      	ldr	r2, [pc, #56]	; (80016dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016a4:	e002      	b.n	80016ac <LoopCopyDataInit>

080016a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016aa:	3304      	adds	r3, #4

080016ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016b0:	d3f9      	bcc.n	80016a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016b2:	4a0b      	ldr	r2, [pc, #44]	; (80016e0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80016b4:	4c0b      	ldr	r4, [pc, #44]	; (80016e4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80016b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016b8:	e001      	b.n	80016be <LoopFillZerobss>

080016ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016bc:	3204      	adds	r2, #4

080016be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016c0:	d3fb      	bcc.n	80016ba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80016c2:	f7ff ffd7 	bl	8001674 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016c6:	f013 f9c3 	bl	8014a50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016ca:	f7ff f8bb 	bl	8000844 <main>
  bx  lr    
 80016ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016d0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80016d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016d8:	200000d0 	.word	0x200000d0
  ldr r2, =_sidata
 80016dc:	0801ac98 	.word	0x0801ac98
  ldr r2, =_sbss
 80016e0:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 80016e4:	20008d10 	.word	0x20008d10

080016e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016e8:	e7fe      	b.n	80016e8 <ADC_IRQHandler>

080016ea <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 80016ea:	b480      	push	{r7}
 80016ec:	b083      	sub	sp, #12
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	6078      	str	r0, [r7, #4]
 80016f2:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d00b      	beq.n	8001712 <LAN8742_RegisterBusIO+0x28>
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	68db      	ldr	r3, [r3, #12]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d007      	beq.n	8001712 <LAN8742_RegisterBusIO+0x28>
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d003      	beq.n	8001712 <LAN8742_RegisterBusIO+0x28>
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	691b      	ldr	r3, [r3, #16]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d102      	bne.n	8001718 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8001712:	f04f 33ff 	mov.w	r3, #4294967295
 8001716:	e014      	b.n	8001742 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	685a      	ldr	r2, [r3, #4]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	68da      	ldr	r2, [r3, #12]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	689a      	ldr	r2, [r3, #8]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	691a      	ldr	r2, [r3, #16]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8001740:	2300      	movs	r3, #0
}
 8001742:	4618      	mov	r0, r3
 8001744:	370c      	adds	r7, #12
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr

0800174e <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 800174e:	b580      	push	{r7, lr}
 8001750:	b086      	sub	sp, #24
 8001752:	af00      	add	r7, sp, #0
 8001754:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8001756:	2300      	movs	r3, #0
 8001758:	60fb      	str	r3, [r7, #12]
 800175a:	2300      	movs	r3, #0
 800175c:	60bb      	str	r3, [r7, #8]
 800175e:	2300      	movs	r3, #0
 8001760:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8001762:	2300      	movs	r3, #0
 8001764:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d17c      	bne.n	8001868 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d002      	beq.n	800177c <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2220      	movs	r2, #32
 8001780:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001782:	2300      	movs	r3, #0
 8001784:	617b      	str	r3, [r7, #20]
 8001786:	e01c      	b.n	80017c2 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	695b      	ldr	r3, [r3, #20]
 800178c:	f107 0208 	add.w	r2, r7, #8
 8001790:	2112      	movs	r1, #18
 8001792:	6978      	ldr	r0, [r7, #20]
 8001794:	4798      	blx	r3
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	da03      	bge.n	80017a4 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 800179c:	f06f 0304 	mvn.w	r3, #4
 80017a0:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 80017a2:	e00b      	b.n	80017bc <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	f003 031f 	and.w	r3, r3, #31
 80017aa:	697a      	ldr	r2, [r7, #20]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d105      	bne.n	80017bc <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	697a      	ldr	r2, [r7, #20]
 80017b4:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 80017b6:	2300      	movs	r3, #0
 80017b8:	613b      	str	r3, [r7, #16]
         break;
 80017ba:	e005      	b.n	80017c8 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	3301      	adds	r3, #1
 80017c0:	617b      	str	r3, [r7, #20]
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	2b1f      	cmp	r3, #31
 80017c6:	d9df      	bls.n	8001788 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	2b1f      	cmp	r3, #31
 80017ce:	d902      	bls.n	80017d6 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 80017d0:	f06f 0302 	mvn.w	r3, #2
 80017d4:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d145      	bne.n	8001868 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	691b      	ldr	r3, [r3, #16]
 80017e0:	687a      	ldr	r2, [r7, #4]
 80017e2:	6810      	ldr	r0, [r2, #0]
 80017e4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80017e8:	2100      	movs	r1, #0
 80017ea:	4798      	blx	r3
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	db37      	blt.n	8001862 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	695b      	ldr	r3, [r3, #20]
 80017f6:	687a      	ldr	r2, [r7, #4]
 80017f8:	6810      	ldr	r0, [r2, #0]
 80017fa:	f107 0208 	add.w	r2, r7, #8
 80017fe:	2100      	movs	r1, #0
 8001800:	4798      	blx	r3
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	db28      	blt.n	800185a <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	699b      	ldr	r3, [r3, #24]
 800180c:	4798      	blx	r3
 800180e:	4603      	mov	r3, r0
 8001810:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001812:	e01c      	b.n	800184e <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	699b      	ldr	r3, [r3, #24]
 8001818:	4798      	blx	r3
 800181a:	4603      	mov	r3, r0
 800181c:	461a      	mov	r2, r3
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001826:	d80e      	bhi.n	8001846 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	695b      	ldr	r3, [r3, #20]
 800182c:	687a      	ldr	r2, [r7, #4]
 800182e:	6810      	ldr	r0, [r2, #0]
 8001830:	f107 0208 	add.w	r2, r7, #8
 8001834:	2100      	movs	r1, #0
 8001836:	4798      	blx	r3
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	da07      	bge.n	800184e <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 800183e:	f06f 0304 	mvn.w	r3, #4
 8001842:	613b      	str	r3, [r7, #16]
                 break;
 8001844:	e010      	b.n	8001868 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8001846:	f06f 0301 	mvn.w	r3, #1
 800184a:	613b      	str	r3, [r7, #16]
               break;
 800184c:	e00c      	b.n	8001868 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001854:	2b00      	cmp	r3, #0
 8001856:	d1dd      	bne.n	8001814 <LAN8742_Init+0xc6>
 8001858:	e006      	b.n	8001868 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 800185a:	f06f 0304 	mvn.w	r3, #4
 800185e:	613b      	str	r3, [r7, #16]
 8001860:	e002      	b.n	8001868 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8001862:	f06f 0303 	mvn.w	r3, #3
 8001866:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d112      	bne.n	8001894 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	699b      	ldr	r3, [r3, #24]
 8001872:	4798      	blx	r3
 8001874:	4603      	mov	r3, r0
 8001876:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8001878:	bf00      	nop
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	699b      	ldr	r3, [r3, #24]
 800187e:	4798      	blx	r3
 8001880:	4603      	mov	r3, r0
 8001882:	461a      	mov	r2, r3
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	1ad3      	subs	r3, r2, r3
 8001888:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800188c:	d9f5      	bls.n	800187a <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2201      	movs	r2, #1
 8001892:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8001894:	693b      	ldr	r3, [r7, #16]
 }
 8001896:	4618      	mov	r0, r3
 8001898:	3718      	adds	r7, #24
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}

0800189e <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 800189e:	b580      	push	{r7, lr}
 80018a0:	b084      	sub	sp, #16
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80018a6:	2300      	movs	r3, #0
 80018a8:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	695b      	ldr	r3, [r3, #20]
 80018ae:	687a      	ldr	r2, [r7, #4]
 80018b0:	6810      	ldr	r0, [r2, #0]
 80018b2:	f107 020c 	add.w	r2, r7, #12
 80018b6:	2101      	movs	r1, #1
 80018b8:	4798      	blx	r3
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	da02      	bge.n	80018c6 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 80018c0:	f06f 0304 	mvn.w	r3, #4
 80018c4:	e06e      	b.n	80019a4 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	695b      	ldr	r3, [r3, #20]
 80018ca:	687a      	ldr	r2, [r7, #4]
 80018cc:	6810      	ldr	r0, [r2, #0]
 80018ce:	f107 020c 	add.w	r2, r7, #12
 80018d2:	2101      	movs	r1, #1
 80018d4:	4798      	blx	r3
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	da02      	bge.n	80018e2 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 80018dc:	f06f 0304 	mvn.w	r3, #4
 80018e0:	e060      	b.n	80019a4 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	f003 0304 	and.w	r3, r3, #4
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d101      	bne.n	80018f0 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 80018ec:	2301      	movs	r3, #1
 80018ee:	e059      	b.n	80019a4 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	695b      	ldr	r3, [r3, #20]
 80018f4:	687a      	ldr	r2, [r7, #4]
 80018f6:	6810      	ldr	r0, [r2, #0]
 80018f8:	f107 020c 	add.w	r2, r7, #12
 80018fc:	2100      	movs	r1, #0
 80018fe:	4798      	blx	r3
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	da02      	bge.n	800190c <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001906:	f06f 0304 	mvn.w	r3, #4
 800190a:	e04b      	b.n	80019a4 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d11b      	bne.n	800194e <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800191c:	2b00      	cmp	r3, #0
 800191e:	d006      	beq.n	800192e <LAN8742_GetLinkState+0x90>
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800192a:	2302      	movs	r3, #2
 800192c:	e03a      	b.n	80019a4 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001938:	2303      	movs	r3, #3
 800193a:	e033      	b.n	80019a4 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001942:	2b00      	cmp	r3, #0
 8001944:	d001      	beq.n	800194a <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001946:	2304      	movs	r3, #4
 8001948:	e02c      	b.n	80019a4 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800194a:	2305      	movs	r3, #5
 800194c:	e02a      	b.n	80019a4 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	695b      	ldr	r3, [r3, #20]
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	6810      	ldr	r0, [r2, #0]
 8001956:	f107 020c 	add.w	r2, r7, #12
 800195a:	211f      	movs	r1, #31
 800195c:	4798      	blx	r3
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	da02      	bge.n	800196a <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001964:	f06f 0304 	mvn.w	r3, #4
 8001968:	e01c      	b.n	80019a4 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001970:	2b00      	cmp	r3, #0
 8001972:	d101      	bne.n	8001978 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001974:	2306      	movs	r3, #6
 8001976:	e015      	b.n	80019a4 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	f003 031c 	and.w	r3, r3, #28
 800197e:	2b18      	cmp	r3, #24
 8001980:	d101      	bne.n	8001986 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001982:	2302      	movs	r3, #2
 8001984:	e00e      	b.n	80019a4 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	f003 031c 	and.w	r3, r3, #28
 800198c:	2b08      	cmp	r3, #8
 800198e:	d101      	bne.n	8001994 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001990:	2303      	movs	r3, #3
 8001992:	e007      	b.n	80019a4 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	f003 031c 	and.w	r3, r3, #28
 800199a:	2b14      	cmp	r3, #20
 800199c:	d101      	bne.n	80019a2 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800199e:	2304      	movs	r3, #4
 80019a0:	e000      	b.n	80019a4 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80019a2:	2305      	movs	r3, #5
    }				
  }
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3710      	adds	r7, #16
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}

080019ac <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	4603      	mov	r3, r0
 80019b4:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 80019b6:	20c8      	movs	r0, #200	; 0xc8
 80019b8:	f000 fc32 	bl	8002220 <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 80019bc:	f000 fa7a 	bl	8001eb4 <ft5336_I2C_InitializeIfRequired>
}
 80019c0:	bf00      	nop
 80019c2:	3708      	adds	r7, #8
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}

080019c8 <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	4603      	mov	r3, r0
 80019d0:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 80019d2:	bf00      	nop
 80019d4:	370c      	adds	r7, #12
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr

080019de <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 80019de:	b580      	push	{r7, lr}
 80019e0:	b084      	sub	sp, #16
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	4603      	mov	r3, r0
 80019e6:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 80019e8:	2300      	movs	r3, #0
 80019ea:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 80019ec:	2300      	movs	r3, #0
 80019ee:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 80019f0:	2300      	movs	r3, #0
 80019f2:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 80019f4:	f000 fa5e 	bl	8001eb4 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 80019f8:	2300      	movs	r3, #0
 80019fa:	73fb      	strb	r3, [r7, #15]
 80019fc:	e010      	b.n	8001a20 <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 80019fe:	88fb      	ldrh	r3, [r7, #6]
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	21a8      	movs	r1, #168	; 0xa8
 8001a04:	4618      	mov	r0, r3
 8001a06:	f000 fbed 	bl	80021e4 <TS_IO_Read>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 8001a0e:	7b7b      	ldrb	r3, [r7, #13]
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	2b51      	cmp	r3, #81	; 0x51
 8001a14:	d101      	bne.n	8001a1a <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 8001a16:	2301      	movs	r3, #1
 8001a18:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8001a1a:	7bfb      	ldrb	r3, [r7, #15]
 8001a1c:	3301      	adds	r3, #1
 8001a1e:	73fb      	strb	r3, [r7, #15]
 8001a20:	7bfb      	ldrb	r3, [r7, #15]
 8001a22:	2b02      	cmp	r3, #2
 8001a24:	d802      	bhi.n	8001a2c <ft5336_ReadID+0x4e>
 8001a26:	7bbb      	ldrb	r3, [r7, #14]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d0e8      	beq.n	80019fe <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 8001a2c:	7b7b      	ldrb	r3, [r7, #13]
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	b29b      	uxth	r3, r3
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3710      	adds	r7, #16
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}

08001a3a <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 8001a3a:	b580      	push	{r7, lr}
 8001a3c:	b082      	sub	sp, #8
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	4603      	mov	r3, r0
 8001a42:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 8001a44:	88fb      	ldrh	r3, [r7, #6]
 8001a46:	4618      	mov	r0, r3
 8001a48:	f000 fa44 	bl	8001ed4 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 8001a4c:	88fb      	ldrh	r3, [r7, #6]
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f000 f932 	bl	8001cb8 <ft5336_TS_DisableIT>
}
 8001a54:	bf00      	nop
 8001a56:	3708      	adds	r7, #8
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}

08001a5c <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b084      	sub	sp, #16
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	4603      	mov	r3, r0
 8001a64:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 8001a66:	2300      	movs	r3, #0
 8001a68:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 8001a6a:	88fb      	ldrh	r3, [r7, #6]
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	2102      	movs	r1, #2
 8001a70:	4618      	mov	r0, r3
 8001a72:	f000 fbb7 	bl	80021e4 <TS_IO_Read>
 8001a76:	4603      	mov	r3, r0
 8001a78:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 8001a7a:	7bfb      	ldrb	r3, [r7, #15]
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	f003 030f 	and.w	r3, r3, #15
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 8001a86:	7bfb      	ldrb	r3, [r7, #15]
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	2b05      	cmp	r3, #5
 8001a8c:	d901      	bls.n	8001a92 <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 8001a92:	7bfb      	ldrb	r3, [r7, #15]
 8001a94:	b2da      	uxtb	r2, r3
 8001a96:	4b05      	ldr	r3, [pc, #20]	; (8001aac <ft5336_TS_DetectTouch+0x50>)
 8001a98:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 8001a9a:	4b04      	ldr	r3, [pc, #16]	; (8001aac <ft5336_TS_DetectTouch+0x50>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 8001aa0:	7bfb      	ldrb	r3, [r7, #15]
 8001aa2:	b2db      	uxtb	r3, r3
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	3710      	adds	r7, #16
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	20000828 	.word	0x20000828

08001ab0 <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b086      	sub	sp, #24
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	60b9      	str	r1, [r7, #8]
 8001aba:	607a      	str	r2, [r7, #4]
 8001abc:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 8001aca:	2300      	movs	r3, #0
 8001acc:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8001ad2:	4b6d      	ldr	r3, [pc, #436]	; (8001c88 <ft5336_TS_GetXY+0x1d8>)
 8001ad4:	789a      	ldrb	r2, [r3, #2]
 8001ad6:	4b6c      	ldr	r3, [pc, #432]	; (8001c88 <ft5336_TS_GetXY+0x1d8>)
 8001ad8:	785b      	ldrb	r3, [r3, #1]
 8001ada:	429a      	cmp	r2, r3
 8001adc:	f080 80cf 	bcs.w	8001c7e <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 8001ae0:	4b69      	ldr	r3, [pc, #420]	; (8001c88 <ft5336_TS_GetXY+0x1d8>)
 8001ae2:	789b      	ldrb	r3, [r3, #2]
 8001ae4:	2b09      	cmp	r3, #9
 8001ae6:	d871      	bhi.n	8001bcc <ft5336_TS_GetXY+0x11c>
 8001ae8:	a201      	add	r2, pc, #4	; (adr r2, 8001af0 <ft5336_TS_GetXY+0x40>)
 8001aea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001aee:	bf00      	nop
 8001af0:	08001b19 	.word	0x08001b19
 8001af4:	08001b2b 	.word	0x08001b2b
 8001af8:	08001b3d 	.word	0x08001b3d
 8001afc:	08001b4f 	.word	0x08001b4f
 8001b00:	08001b61 	.word	0x08001b61
 8001b04:	08001b73 	.word	0x08001b73
 8001b08:	08001b85 	.word	0x08001b85
 8001b0c:	08001b97 	.word	0x08001b97
 8001b10:	08001ba9 	.word	0x08001ba9
 8001b14:	08001bbb 	.word	0x08001bbb
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 8001b18:	2304      	movs	r3, #4
 8001b1a:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 8001b20:	2306      	movs	r3, #6
 8001b22:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 8001b24:	2305      	movs	r3, #5
 8001b26:	753b      	strb	r3, [r7, #20]
      break;
 8001b28:	e051      	b.n	8001bce <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 8001b2a:	230a      	movs	r3, #10
 8001b2c:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 8001b2e:	2309      	movs	r3, #9
 8001b30:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 8001b32:	230c      	movs	r3, #12
 8001b34:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 8001b36:	230b      	movs	r3, #11
 8001b38:	753b      	strb	r3, [r7, #20]
      break;
 8001b3a:	e048      	b.n	8001bce <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 8001b3c:	2310      	movs	r3, #16
 8001b3e:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 8001b40:	230f      	movs	r3, #15
 8001b42:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 8001b44:	2312      	movs	r3, #18
 8001b46:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 8001b48:	2311      	movs	r3, #17
 8001b4a:	753b      	strb	r3, [r7, #20]
      break;
 8001b4c:	e03f      	b.n	8001bce <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 8001b4e:	2316      	movs	r3, #22
 8001b50:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 8001b52:	2315      	movs	r3, #21
 8001b54:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 8001b56:	2318      	movs	r3, #24
 8001b58:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 8001b5a:	2317      	movs	r3, #23
 8001b5c:	753b      	strb	r3, [r7, #20]
      break;
 8001b5e:	e036      	b.n	8001bce <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 8001b60:	231c      	movs	r3, #28
 8001b62:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 8001b64:	231b      	movs	r3, #27
 8001b66:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 8001b68:	231e      	movs	r3, #30
 8001b6a:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 8001b6c:	231d      	movs	r3, #29
 8001b6e:	753b      	strb	r3, [r7, #20]
      break;
 8001b70:	e02d      	b.n	8001bce <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 8001b72:	2322      	movs	r3, #34	; 0x22
 8001b74:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 8001b76:	2321      	movs	r3, #33	; 0x21
 8001b78:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 8001b7a:	2324      	movs	r3, #36	; 0x24
 8001b7c:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 8001b7e:	2323      	movs	r3, #35	; 0x23
 8001b80:	753b      	strb	r3, [r7, #20]
      break;
 8001b82:	e024      	b.n	8001bce <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 8001b84:	2328      	movs	r3, #40	; 0x28
 8001b86:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 8001b88:	2327      	movs	r3, #39	; 0x27
 8001b8a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 8001b8c:	232a      	movs	r3, #42	; 0x2a
 8001b8e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 8001b90:	2329      	movs	r3, #41	; 0x29
 8001b92:	753b      	strb	r3, [r7, #20]
      break;
 8001b94:	e01b      	b.n	8001bce <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 8001b96:	232e      	movs	r3, #46	; 0x2e
 8001b98:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 8001b9a:	232d      	movs	r3, #45	; 0x2d
 8001b9c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 8001b9e:	2330      	movs	r3, #48	; 0x30
 8001ba0:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 8001ba2:	232f      	movs	r3, #47	; 0x2f
 8001ba4:	753b      	strb	r3, [r7, #20]
      break;
 8001ba6:	e012      	b.n	8001bce <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 8001ba8:	2334      	movs	r3, #52	; 0x34
 8001baa:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 8001bac:	2333      	movs	r3, #51	; 0x33
 8001bae:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 8001bb0:	2336      	movs	r3, #54	; 0x36
 8001bb2:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 8001bb4:	2335      	movs	r3, #53	; 0x35
 8001bb6:	753b      	strb	r3, [r7, #20]
      break;
 8001bb8:	e009      	b.n	8001bce <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 8001bba:	233a      	movs	r3, #58	; 0x3a
 8001bbc:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 8001bbe:	2339      	movs	r3, #57	; 0x39
 8001bc0:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 8001bc2:	233c      	movs	r3, #60	; 0x3c
 8001bc4:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 8001bc6:	233b      	movs	r3, #59	; 0x3b
 8001bc8:	753b      	strb	r3, [r7, #20]
      break;
 8001bca:	e000      	b.n	8001bce <ft5336_TS_GetXY+0x11e>

    default :
      break;
 8001bcc:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 8001bce:	89fb      	ldrh	r3, [r7, #14]
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	7dfa      	ldrb	r2, [r7, #23]
 8001bd4:	4611      	mov	r1, r2
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f000 fb04 	bl	80021e4 <TS_IO_Read>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8001be0:	7cfb      	ldrb	r3, [r7, #19]
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	b29a      	uxth	r2, r3
 8001be6:	4b29      	ldr	r3, [pc, #164]	; (8001c8c <ft5336_TS_GetXY+0x1dc>)
 8001be8:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8001bea:	89fb      	ldrh	r3, [r7, #14]
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	7dba      	ldrb	r2, [r7, #22]
 8001bf0:	4611      	mov	r1, r2
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f000 faf6 	bl	80021e4 <TS_IO_Read>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8001bfc:	7cfb      	ldrb	r3, [r7, #19]
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	021b      	lsls	r3, r3, #8
 8001c02:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001c06:	b21a      	sxth	r2, r3
 8001c08:	4b20      	ldr	r3, [pc, #128]	; (8001c8c <ft5336_TS_GetXY+0x1dc>)
 8001c0a:	881b      	ldrh	r3, [r3, #0]
 8001c0c:	b21b      	sxth	r3, r3
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	b21b      	sxth	r3, r3
 8001c12:	b29a      	uxth	r2, r3
 8001c14:	4b1d      	ldr	r3, [pc, #116]	; (8001c8c <ft5336_TS_GetXY+0x1dc>)
 8001c16:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 8001c18:	4b1c      	ldr	r3, [pc, #112]	; (8001c8c <ft5336_TS_GetXY+0x1dc>)
 8001c1a:	881a      	ldrh	r2, [r3, #0]
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8001c20:	89fb      	ldrh	r3, [r7, #14]
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	7d7a      	ldrb	r2, [r7, #21]
 8001c26:	4611      	mov	r1, r2
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f000 fadb 	bl	80021e4 <TS_IO_Read>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8001c32:	7cfb      	ldrb	r3, [r7, #19]
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	b29a      	uxth	r2, r3
 8001c38:	4b14      	ldr	r3, [pc, #80]	; (8001c8c <ft5336_TS_GetXY+0x1dc>)
 8001c3a:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8001c3c:	89fb      	ldrh	r3, [r7, #14]
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	7d3a      	ldrb	r2, [r7, #20]
 8001c42:	4611      	mov	r1, r2
 8001c44:	4618      	mov	r0, r3
 8001c46:	f000 facd 	bl	80021e4 <TS_IO_Read>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8001c4e:	7cfb      	ldrb	r3, [r7, #19]
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	021b      	lsls	r3, r3, #8
 8001c54:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001c58:	b21a      	sxth	r2, r3
 8001c5a:	4b0c      	ldr	r3, [pc, #48]	; (8001c8c <ft5336_TS_GetXY+0x1dc>)
 8001c5c:	881b      	ldrh	r3, [r3, #0]
 8001c5e:	b21b      	sxth	r3, r3
 8001c60:	4313      	orrs	r3, r2
 8001c62:	b21b      	sxth	r3, r3
 8001c64:	b29a      	uxth	r2, r3
 8001c66:	4b09      	ldr	r3, [pc, #36]	; (8001c8c <ft5336_TS_GetXY+0x1dc>)
 8001c68:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 8001c6a:	4b08      	ldr	r3, [pc, #32]	; (8001c8c <ft5336_TS_GetXY+0x1dc>)
 8001c6c:	881a      	ldrh	r2, [r3, #0]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 8001c72:	4b05      	ldr	r3, [pc, #20]	; (8001c88 <ft5336_TS_GetXY+0x1d8>)
 8001c74:	789b      	ldrb	r3, [r3, #2]
 8001c76:	3301      	adds	r3, #1
 8001c78:	b2da      	uxtb	r2, r3
 8001c7a:	4b03      	ldr	r3, [pc, #12]	; (8001c88 <ft5336_TS_GetXY+0x1d8>)
 8001c7c:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 8001c7e:	bf00      	nop
 8001c80:	3718      	adds	r7, #24
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	20000828 	.word	0x20000828
 8001c8c:	2000082c 	.word	0x2000082c

08001c90 <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b084      	sub	sp, #16
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	4603      	mov	r3, r0
 8001c98:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8001ca2:	88fb      	ldrh	r3, [r7, #6]
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	7bfa      	ldrb	r2, [r7, #15]
 8001ca8:	21a4      	movs	r1, #164	; 0xa4
 8001caa:	4618      	mov	r0, r3
 8001cac:	f000 fa80 	bl	80021b0 <TS_IO_Write>
}
 8001cb0:	bf00      	nop
 8001cb2:	3710      	adds	r7, #16
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}

08001cb8 <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8001cca:	88fb      	ldrh	r3, [r7, #6]
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	7bfa      	ldrb	r2, [r7, #15]
 8001cd0:	21a4      	movs	r1, #164	; 0xa4
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f000 fa6c 	bl	80021b0 <TS_IO_Write>
}
 8001cd8:	bf00      	nop
 8001cda:	3710      	adds	r7, #16
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}

08001ce0 <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 8001cea:	2300      	movs	r3, #0
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	4603      	mov	r3, r0
 8001d00:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 8001d02:	bf00      	nop
 8001d04:	370c      	adds	r7, #12
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr

08001d0e <ft5336_TS_GetGestureID>:
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @param  pGestureId : Pointer to get last touch gesture Identification.
  * @retval None.
  */
void ft5336_TS_GetGestureID(uint16_t DeviceAddr, uint32_t * pGestureId)
{
 8001d0e:	b580      	push	{r7, lr}
 8001d10:	b084      	sub	sp, #16
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	4603      	mov	r3, r0
 8001d16:	6039      	str	r1, [r7, #0]
 8001d18:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadData = 0;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	73fb      	strb	r3, [r7, #15]

  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 8001d1e:	88fb      	ldrh	r3, [r7, #6]
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	2101      	movs	r1, #1
 8001d24:	4618      	mov	r0, r3
 8001d26:	f000 fa5d 	bl	80021e4 <TS_IO_Read>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	73fb      	strb	r3, [r7, #15]

  * pGestureId = ucReadData;
 8001d2e:	7bfb      	ldrb	r3, [r7, #15]
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	461a      	mov	r2, r3
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	601a      	str	r2, [r3, #0]
}
 8001d38:	bf00      	nop
 8001d3a:	3710      	adds	r7, #16
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}

08001d40 <ft5336_TS_GetTouchInfo>:
void ft5336_TS_GetTouchInfo(uint16_t   DeviceAddr,
                            uint32_t   touchIdx,
                            uint32_t * pWeight,
                            uint32_t * pArea,
                            uint32_t * pEvent)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b086      	sub	sp, #24
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	60b9      	str	r1, [r7, #8]
 8001d48:	607a      	str	r2, [r7, #4]
 8001d4a:	603b      	str	r3, [r7, #0]
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8001d50:	2300      	movs	r3, #0
 8001d52:	753b      	strb	r3, [r7, #20]
  uint8_t regAddressXHigh = 0;
 8001d54:	2300      	movs	r3, #0
 8001d56:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressPWeight = 0;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressPMisc = 0;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	757b      	strb	r3, [r7, #21]

  if(touchIdx < ft5336_handle.currActiveTouchNb)
 8001d60:	4b4d      	ldr	r3, [pc, #308]	; (8001e98 <ft5336_TS_GetTouchInfo+0x158>)
 8001d62:	785b      	ldrb	r3, [r3, #1]
 8001d64:	461a      	mov	r2, r3
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	f080 8090 	bcs.w	8001e8e <ft5336_TS_GetTouchInfo+0x14e>
  {
    switch(touchIdx)
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	2b09      	cmp	r3, #9
 8001d72:	d85d      	bhi.n	8001e30 <ft5336_TS_GetTouchInfo+0xf0>
 8001d74:	a201      	add	r2, pc, #4	; (adr r2, 8001d7c <ft5336_TS_GetTouchInfo+0x3c>)
 8001d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d7a:	bf00      	nop
 8001d7c:	08001da5 	.word	0x08001da5
 8001d80:	08001db3 	.word	0x08001db3
 8001d84:	08001dc1 	.word	0x08001dc1
 8001d88:	08001dcf 	.word	0x08001dcf
 8001d8c:	08001ddd 	.word	0x08001ddd
 8001d90:	08001deb 	.word	0x08001deb
 8001d94:	08001df9 	.word	0x08001df9
 8001d98:	08001e07 	.word	0x08001e07
 8001d9c:	08001e15 	.word	0x08001e15
 8001da0:	08001e23 	.word	0x08001e23
    {
    case 0 :
      regAddressXHigh   = FT5336_P1_XH_REG;
 8001da4:	2303      	movs	r3, #3
 8001da6:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P1_WEIGHT_REG;
 8001da8:	2307      	movs	r3, #7
 8001daa:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P1_MISC_REG;
 8001dac:	2308      	movs	r3, #8
 8001dae:	757b      	strb	r3, [r7, #21]
      break;
 8001db0:	e03f      	b.n	8001e32 <ft5336_TS_GetTouchInfo+0xf2>

    case 1 :
      regAddressXHigh   = FT5336_P2_XH_REG;
 8001db2:	2309      	movs	r3, #9
 8001db4:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P2_WEIGHT_REG;
 8001db6:	230d      	movs	r3, #13
 8001db8:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P2_MISC_REG;
 8001dba:	230e      	movs	r3, #14
 8001dbc:	757b      	strb	r3, [r7, #21]
      break;
 8001dbe:	e038      	b.n	8001e32 <ft5336_TS_GetTouchInfo+0xf2>

    case 2 :
      regAddressXHigh   = FT5336_P3_XH_REG;
 8001dc0:	230f      	movs	r3, #15
 8001dc2:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P3_WEIGHT_REG;
 8001dc4:	2313      	movs	r3, #19
 8001dc6:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P3_MISC_REG;
 8001dc8:	2314      	movs	r3, #20
 8001dca:	757b      	strb	r3, [r7, #21]
      break;
 8001dcc:	e031      	b.n	8001e32 <ft5336_TS_GetTouchInfo+0xf2>

    case 3 :
      regAddressXHigh   = FT5336_P4_XH_REG;
 8001dce:	2315      	movs	r3, #21
 8001dd0:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P4_WEIGHT_REG;
 8001dd2:	2319      	movs	r3, #25
 8001dd4:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P4_MISC_REG;
 8001dd6:	231a      	movs	r3, #26
 8001dd8:	757b      	strb	r3, [r7, #21]
      break;
 8001dda:	e02a      	b.n	8001e32 <ft5336_TS_GetTouchInfo+0xf2>

    case 4 :
      regAddressXHigh   = FT5336_P5_XH_REG;
 8001ddc:	231b      	movs	r3, #27
 8001dde:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P5_WEIGHT_REG;
 8001de0:	231f      	movs	r3, #31
 8001de2:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P5_MISC_REG;
 8001de4:	2320      	movs	r3, #32
 8001de6:	757b      	strb	r3, [r7, #21]
      break;
 8001de8:	e023      	b.n	8001e32 <ft5336_TS_GetTouchInfo+0xf2>

    case 5 :
      regAddressXHigh   = FT5336_P6_XH_REG;
 8001dea:	2321      	movs	r3, #33	; 0x21
 8001dec:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P6_WEIGHT_REG;
 8001dee:	2325      	movs	r3, #37	; 0x25
 8001df0:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P6_MISC_REG;
 8001df2:	2326      	movs	r3, #38	; 0x26
 8001df4:	757b      	strb	r3, [r7, #21]
      break;
 8001df6:	e01c      	b.n	8001e32 <ft5336_TS_GetTouchInfo+0xf2>

    case 6 :
      regAddressXHigh   = FT5336_P7_XH_REG;
 8001df8:	2327      	movs	r3, #39	; 0x27
 8001dfa:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P7_WEIGHT_REG;
 8001dfc:	232b      	movs	r3, #43	; 0x2b
 8001dfe:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P7_MISC_REG;
 8001e00:	232c      	movs	r3, #44	; 0x2c
 8001e02:	757b      	strb	r3, [r7, #21]
      break;
 8001e04:	e015      	b.n	8001e32 <ft5336_TS_GetTouchInfo+0xf2>

    case 7 :
      regAddressXHigh   = FT5336_P8_XH_REG;
 8001e06:	232d      	movs	r3, #45	; 0x2d
 8001e08:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P8_WEIGHT_REG;
 8001e0a:	2331      	movs	r3, #49	; 0x31
 8001e0c:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P8_MISC_REG;
 8001e0e:	2332      	movs	r3, #50	; 0x32
 8001e10:	757b      	strb	r3, [r7, #21]
      break;
 8001e12:	e00e      	b.n	8001e32 <ft5336_TS_GetTouchInfo+0xf2>

    case 8 :
      regAddressXHigh   = FT5336_P9_XH_REG;
 8001e14:	2333      	movs	r3, #51	; 0x33
 8001e16:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P9_WEIGHT_REG;
 8001e18:	2337      	movs	r3, #55	; 0x37
 8001e1a:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P9_MISC_REG;
 8001e1c:	2338      	movs	r3, #56	; 0x38
 8001e1e:	757b      	strb	r3, [r7, #21]
      break;
 8001e20:	e007      	b.n	8001e32 <ft5336_TS_GetTouchInfo+0xf2>

    case 9 :
      regAddressXHigh   = FT5336_P10_XH_REG;
 8001e22:	2339      	movs	r3, #57	; 0x39
 8001e24:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P10_WEIGHT_REG;
 8001e26:	233d      	movs	r3, #61	; 0x3d
 8001e28:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P10_MISC_REG;
 8001e2a:	233e      	movs	r3, #62	; 0x3e
 8001e2c:	757b      	strb	r3, [r7, #21]
      break;
 8001e2e:	e000      	b.n	8001e32 <ft5336_TS_GetTouchInfo+0xf2>

    default :
      break;
 8001e30:	bf00      	nop

    } /* end switch(touchIdx) */

    /* Read Event Id of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8001e32:	89fb      	ldrh	r3, [r7, #14]
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	7dfa      	ldrb	r2, [r7, #23]
 8001e38:	4611      	mov	r1, r2
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f000 f9d2 	bl	80021e4 <TS_IO_Read>
 8001e40:	4603      	mov	r3, r0
 8001e42:	753b      	strb	r3, [r7, #20]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 8001e44:	7d3b      	ldrb	r3, [r7, #20]
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	119b      	asrs	r3, r3, #6
 8001e4a:	f003 0203 	and.w	r2, r3, #3
 8001e4e:	6a3b      	ldr	r3, [r7, #32]
 8001e50:	601a      	str	r2, [r3, #0]

    /* Read weight of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 8001e52:	89fb      	ldrh	r3, [r7, #14]
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	7dba      	ldrb	r2, [r7, #22]
 8001e58:	4611      	mov	r1, r2
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f000 f9c2 	bl	80021e4 <TS_IO_Read>
 8001e60:	4603      	mov	r3, r0
 8001e62:	753b      	strb	r3, [r7, #20]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 8001e64:	7d3b      	ldrb	r3, [r7, #20]
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	461a      	mov	r2, r3
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	601a      	str	r2, [r3, #0]

    /* Read area of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 8001e6e:	89fb      	ldrh	r3, [r7, #14]
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	7d7a      	ldrb	r2, [r7, #21]
 8001e74:	4611      	mov	r1, r2
 8001e76:	4618      	mov	r0, r3
 8001e78:	f000 f9b4 	bl	80021e4 <TS_IO_Read>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	753b      	strb	r3, [r7, #20]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 8001e80:	7d3b      	ldrb	r3, [r7, #20]
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	111b      	asrs	r3, r3, #4
 8001e86:	f003 0204 	and.w	r2, r3, #4
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	601a      	str	r2, [r3, #0]

  } /* of if(touchIdx < ft5336_handle.currActiveTouchNb) */
}
 8001e8e:	bf00      	nop
 8001e90:	3718      	adds	r7, #24
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	20000828 	.word	0x20000828

08001e9c <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 8001ea0:	4b03      	ldr	r3, [pc, #12]	; (8001eb0 <ft5336_Get_I2C_InitializedStatus+0x14>)
 8001ea2:	781b      	ldrb	r3, [r3, #0]
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	20000828 	.word	0x20000828

08001eb4 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8001eb8:	f7ff fff0 	bl	8001e9c <ft5336_Get_I2C_InitializedStatus>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d104      	bne.n	8001ecc <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 8001ec2:	f000 f96b 	bl	800219c <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8001ec6:	4b02      	ldr	r3, [pc, #8]	; (8001ed0 <ft5336_I2C_InitializeIfRequired+0x1c>)
 8001ec8:	2201      	movs	r2, #1
 8001eca:	701a      	strb	r2, [r3, #0]
  }
}
 8001ecc:	bf00      	nop
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	20000828 	.word	0x20000828

08001ed4 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b085      	sub	sp, #20
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	4603      	mov	r3, r0
 8001edc:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 8001ee2:	68fb      	ldr	r3, [r7, #12]
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3714      	adds	r7, #20
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr

08001ef0 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b08c      	sub	sp, #48	; 0x30
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	4a51      	ldr	r2, [pc, #324]	; (8002040 <I2Cx_MspInit+0x150>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d14d      	bne.n	8001f9c <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001f00:	4b50      	ldr	r3, [pc, #320]	; (8002044 <I2Cx_MspInit+0x154>)
 8001f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f04:	4a4f      	ldr	r2, [pc, #316]	; (8002044 <I2Cx_MspInit+0x154>)
 8001f06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f0a:	6313      	str	r3, [r2, #48]	; 0x30
 8001f0c:	4b4d      	ldr	r3, [pc, #308]	; (8002044 <I2Cx_MspInit+0x154>)
 8001f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f14:	61bb      	str	r3, [r7, #24]
 8001f16:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8001f18:	2380      	movs	r3, #128	; 0x80
 8001f1a:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001f1c:	2312      	movs	r3, #18
 8001f1e:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8001f20:	2300      	movs	r3, #0
 8001f22:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8001f24:	2302      	movs	r3, #2
 8001f26:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8001f28:	2304      	movs	r3, #4
 8001f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001f2c:	f107 031c 	add.w	r3, r7, #28
 8001f30:	4619      	mov	r1, r3
 8001f32:	4845      	ldr	r0, [pc, #276]	; (8002048 <I2Cx_MspInit+0x158>)
 8001f34:	f003 fca2 	bl	800587c <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8001f38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f3c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001f3e:	f107 031c 	add.w	r3, r7, #28
 8001f42:	4619      	mov	r1, r3
 8001f44:	4840      	ldr	r0, [pc, #256]	; (8002048 <I2Cx_MspInit+0x158>)
 8001f46:	f003 fc99 	bl	800587c <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8001f4a:	4b3e      	ldr	r3, [pc, #248]	; (8002044 <I2Cx_MspInit+0x154>)
 8001f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4e:	4a3d      	ldr	r2, [pc, #244]	; (8002044 <I2Cx_MspInit+0x154>)
 8001f50:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001f54:	6413      	str	r3, [r2, #64]	; 0x40
 8001f56:	4b3b      	ldr	r3, [pc, #236]	; (8002044 <I2Cx_MspInit+0x154>)
 8001f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f5e:	617b      	str	r3, [r7, #20]
 8001f60:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8001f62:	4b38      	ldr	r3, [pc, #224]	; (8002044 <I2Cx_MspInit+0x154>)
 8001f64:	6a1b      	ldr	r3, [r3, #32]
 8001f66:	4a37      	ldr	r2, [pc, #220]	; (8002044 <I2Cx_MspInit+0x154>)
 8001f68:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001f6c:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8001f6e:	4b35      	ldr	r3, [pc, #212]	; (8002044 <I2Cx_MspInit+0x154>)
 8001f70:	6a1b      	ldr	r3, [r3, #32]
 8001f72:	4a34      	ldr	r2, [pc, #208]	; (8002044 <I2Cx_MspInit+0x154>)
 8001f74:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001f78:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	210f      	movs	r1, #15
 8001f7e:	2048      	movs	r0, #72	; 0x48
 8001f80:	f001 fe99 	bl	8003cb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8001f84:	2048      	movs	r0, #72	; 0x48
 8001f86:	f001 feb2 	bl	8003cee <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	210f      	movs	r1, #15
 8001f8e:	2049      	movs	r0, #73	; 0x49
 8001f90:	f001 fe91 	bl	8003cb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8001f94:	2049      	movs	r0, #73	; 0x49
 8001f96:	f001 feaa 	bl	8003cee <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8001f9a:	e04d      	b.n	8002038 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001f9c:	4b29      	ldr	r3, [pc, #164]	; (8002044 <I2Cx_MspInit+0x154>)
 8001f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa0:	4a28      	ldr	r2, [pc, #160]	; (8002044 <I2Cx_MspInit+0x154>)
 8001fa2:	f043 0302 	orr.w	r3, r3, #2
 8001fa6:	6313      	str	r3, [r2, #48]	; 0x30
 8001fa8:	4b26      	ldr	r3, [pc, #152]	; (8002044 <I2Cx_MspInit+0x154>)
 8001faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fac:	f003 0302 	and.w	r3, r3, #2
 8001fb0:	613b      	str	r3, [r7, #16]
 8001fb2:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8001fb4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fb8:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001fba:	2312      	movs	r3, #18
 8001fbc:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8001fc2:	2302      	movs	r3, #2
 8001fc4:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8001fc6:	2304      	movs	r3, #4
 8001fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001fca:	f107 031c 	add.w	r3, r7, #28
 8001fce:	4619      	mov	r1, r3
 8001fd0:	481e      	ldr	r0, [pc, #120]	; (800204c <I2Cx_MspInit+0x15c>)
 8001fd2:	f003 fc53 	bl	800587c <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8001fd6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fda:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001fdc:	f107 031c 	add.w	r3, r7, #28
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	481a      	ldr	r0, [pc, #104]	; (800204c <I2Cx_MspInit+0x15c>)
 8001fe4:	f003 fc4a 	bl	800587c <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8001fe8:	4b16      	ldr	r3, [pc, #88]	; (8002044 <I2Cx_MspInit+0x154>)
 8001fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fec:	4a15      	ldr	r2, [pc, #84]	; (8002044 <I2Cx_MspInit+0x154>)
 8001fee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ff2:	6413      	str	r3, [r2, #64]	; 0x40
 8001ff4:	4b13      	ldr	r3, [pc, #76]	; (8002044 <I2Cx_MspInit+0x154>)
 8001ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ffc:	60fb      	str	r3, [r7, #12]
 8001ffe:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8002000:	4b10      	ldr	r3, [pc, #64]	; (8002044 <I2Cx_MspInit+0x154>)
 8002002:	6a1b      	ldr	r3, [r3, #32]
 8002004:	4a0f      	ldr	r2, [pc, #60]	; (8002044 <I2Cx_MspInit+0x154>)
 8002006:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800200a:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 800200c:	4b0d      	ldr	r3, [pc, #52]	; (8002044 <I2Cx_MspInit+0x154>)
 800200e:	6a1b      	ldr	r3, [r3, #32]
 8002010:	4a0c      	ldr	r2, [pc, #48]	; (8002044 <I2Cx_MspInit+0x154>)
 8002012:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002016:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8002018:	2200      	movs	r2, #0
 800201a:	210f      	movs	r1, #15
 800201c:	201f      	movs	r0, #31
 800201e:	f001 fe4a 	bl	8003cb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8002022:	201f      	movs	r0, #31
 8002024:	f001 fe63 	bl	8003cee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8002028:	2200      	movs	r2, #0
 800202a:	210f      	movs	r1, #15
 800202c:	2020      	movs	r0, #32
 800202e:	f001 fe42 	bl	8003cb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8002032:	2020      	movs	r0, #32
 8002034:	f001 fe5b 	bl	8003cee <HAL_NVIC_EnableIRQ>
}
 8002038:	bf00      	nop
 800203a:	3730      	adds	r7, #48	; 0x30
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}
 8002040:	20000830 	.word	0x20000830
 8002044:	40023800 	.word	0x40023800
 8002048:	40021c00 	.word	0x40021c00
 800204c:	40020400 	.word	0x40020400

08002050 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	f004 f9e3 	bl	8006424 <HAL_I2C_GetState>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d125      	bne.n	80020b0 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	4a14      	ldr	r2, [pc, #80]	; (80020b8 <I2Cx_Init+0x68>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d103      	bne.n	8002074 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	4a13      	ldr	r2, [pc, #76]	; (80020bc <I2Cx_Init+0x6c>)
 8002070:	601a      	str	r2, [r3, #0]
 8002072:	e002      	b.n	800207a <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	4a12      	ldr	r2, [pc, #72]	; (80020c0 <I2Cx_Init+0x70>)
 8002078:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a11      	ldr	r2, [pc, #68]	; (80020c4 <I2Cx_Init+0x74>)
 800207e:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2200      	movs	r2, #0
 8002084:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2201      	movs	r2, #1
 800208a:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2200      	movs	r2, #0
 8002090:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2200      	movs	r2, #0
 8002096:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2200      	movs	r2, #0
 800209c:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2200      	movs	r2, #0
 80020a2:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 80020a4:	6878      	ldr	r0, [r7, #4]
 80020a6:	f7ff ff23 	bl	8001ef0 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f003 feb8 	bl	8005e20 <HAL_I2C_Init>
  }
}
 80020b0:	bf00      	nop
 80020b2:	3708      	adds	r7, #8
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	20000830 	.word	0x20000830
 80020bc:	40005c00 	.word	0x40005c00
 80020c0:	40005400 	.word	0x40005400
 80020c4:	40912732 	.word	0x40912732

080020c8 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b08a      	sub	sp, #40	; 0x28
 80020cc:	af04      	add	r7, sp, #16
 80020ce:	60f8      	str	r0, [r7, #12]
 80020d0:	4608      	mov	r0, r1
 80020d2:	4611      	mov	r1, r2
 80020d4:	461a      	mov	r2, r3
 80020d6:	4603      	mov	r3, r0
 80020d8:	72fb      	strb	r3, [r7, #11]
 80020da:	460b      	mov	r3, r1
 80020dc:	813b      	strh	r3, [r7, #8]
 80020de:	4613      	mov	r3, r2
 80020e0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80020e2:	2300      	movs	r3, #0
 80020e4:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80020e6:	7afb      	ldrb	r3, [r7, #11]
 80020e8:	b299      	uxth	r1, r3
 80020ea:	88f8      	ldrh	r0, [r7, #6]
 80020ec:	893a      	ldrh	r2, [r7, #8]
 80020ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020f2:	9302      	str	r3, [sp, #8]
 80020f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80020f6:	9301      	str	r3, [sp, #4]
 80020f8:	6a3b      	ldr	r3, [r7, #32]
 80020fa:	9300      	str	r3, [sp, #0]
 80020fc:	4603      	mov	r3, r0
 80020fe:	68f8      	ldr	r0, [r7, #12]
 8002100:	f004 f876 	bl	80061f0 <HAL_I2C_Mem_Read>
 8002104:	4603      	mov	r3, r0
 8002106:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002108:	7dfb      	ldrb	r3, [r7, #23]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d004      	beq.n	8002118 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 800210e:	7afb      	ldrb	r3, [r7, #11]
 8002110:	4619      	mov	r1, r3
 8002112:	68f8      	ldr	r0, [r7, #12]
 8002114:	f000 f832 	bl	800217c <I2Cx_Error>
  }
  return status;    
 8002118:	7dfb      	ldrb	r3, [r7, #23]
}
 800211a:	4618      	mov	r0, r3
 800211c:	3718      	adds	r7, #24
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}

08002122 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 8002122:	b580      	push	{r7, lr}
 8002124:	b08a      	sub	sp, #40	; 0x28
 8002126:	af04      	add	r7, sp, #16
 8002128:	60f8      	str	r0, [r7, #12]
 800212a:	4608      	mov	r0, r1
 800212c:	4611      	mov	r1, r2
 800212e:	461a      	mov	r2, r3
 8002130:	4603      	mov	r3, r0
 8002132:	72fb      	strb	r3, [r7, #11]
 8002134:	460b      	mov	r3, r1
 8002136:	813b      	strh	r3, [r7, #8]
 8002138:	4613      	mov	r3, r2
 800213a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800213c:	2300      	movs	r3, #0
 800213e:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002140:	7afb      	ldrb	r3, [r7, #11]
 8002142:	b299      	uxth	r1, r3
 8002144:	88f8      	ldrh	r0, [r7, #6]
 8002146:	893a      	ldrh	r2, [r7, #8]
 8002148:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800214c:	9302      	str	r3, [sp, #8]
 800214e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002150:	9301      	str	r3, [sp, #4]
 8002152:	6a3b      	ldr	r3, [r7, #32]
 8002154:	9300      	str	r3, [sp, #0]
 8002156:	4603      	mov	r3, r0
 8002158:	68f8      	ldr	r0, [r7, #12]
 800215a:	f003 ff35 	bl	8005fc8 <HAL_I2C_Mem_Write>
 800215e:	4603      	mov	r3, r0
 8002160:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002162:	7dfb      	ldrb	r3, [r7, #23]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d004      	beq.n	8002172 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8002168:	7afb      	ldrb	r3, [r7, #11]
 800216a:	4619      	mov	r1, r3
 800216c:	68f8      	ldr	r0, [r7, #12]
 800216e:	f000 f805 	bl	800217c <I2Cx_Error>
  }
  return status;
 8002172:	7dfb      	ldrb	r3, [r7, #23]
}
 8002174:	4618      	mov	r0, r3
 8002176:	3718      	adds	r7, #24
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}

0800217c <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	460b      	mov	r3, r1
 8002186:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8002188:	6878      	ldr	r0, [r7, #4]
 800218a:	f003 fed9 	bl	8005f40 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f7ff ff5e 	bl	8002050 <I2Cx_Init>
}
 8002194:	bf00      	nop
 8002196:	3708      	adds	r7, #8
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}

0800219c <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 80021a0:	4802      	ldr	r0, [pc, #8]	; (80021ac <TS_IO_Init+0x10>)
 80021a2:	f7ff ff55 	bl	8002050 <I2Cx_Init>
}
 80021a6:	bf00      	nop
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	20000830 	.word	0x20000830

080021b0 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b084      	sub	sp, #16
 80021b4:	af02      	add	r7, sp, #8
 80021b6:	4603      	mov	r3, r0
 80021b8:	71fb      	strb	r3, [r7, #7]
 80021ba:	460b      	mov	r3, r1
 80021bc:	71bb      	strb	r3, [r7, #6]
 80021be:	4613      	mov	r3, r2
 80021c0:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80021c2:	79bb      	ldrb	r3, [r7, #6]
 80021c4:	b29a      	uxth	r2, r3
 80021c6:	79f9      	ldrb	r1, [r7, #7]
 80021c8:	2301      	movs	r3, #1
 80021ca:	9301      	str	r3, [sp, #4]
 80021cc:	1d7b      	adds	r3, r7, #5
 80021ce:	9300      	str	r3, [sp, #0]
 80021d0:	2301      	movs	r3, #1
 80021d2:	4803      	ldr	r0, [pc, #12]	; (80021e0 <TS_IO_Write+0x30>)
 80021d4:	f7ff ffa5 	bl	8002122 <I2Cx_WriteMultiple>
}
 80021d8:	bf00      	nop
 80021da:	3708      	adds	r7, #8
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	20000830 	.word	0x20000830

080021e4 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b086      	sub	sp, #24
 80021e8:	af02      	add	r7, sp, #8
 80021ea:	4603      	mov	r3, r0
 80021ec:	460a      	mov	r2, r1
 80021ee:	71fb      	strb	r3, [r7, #7]
 80021f0:	4613      	mov	r3, r2
 80021f2:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80021f4:	2300      	movs	r3, #0
 80021f6:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80021f8:	79bb      	ldrb	r3, [r7, #6]
 80021fa:	b29a      	uxth	r2, r3
 80021fc:	79f9      	ldrb	r1, [r7, #7]
 80021fe:	2301      	movs	r3, #1
 8002200:	9301      	str	r3, [sp, #4]
 8002202:	f107 030f 	add.w	r3, r7, #15
 8002206:	9300      	str	r3, [sp, #0]
 8002208:	2301      	movs	r3, #1
 800220a:	4804      	ldr	r0, [pc, #16]	; (800221c <TS_IO_Read+0x38>)
 800220c:	f7ff ff5c 	bl	80020c8 <I2Cx_ReadMultiple>

  return read_value;
 8002210:	7bfb      	ldrb	r3, [r7, #15]
}
 8002212:	4618      	mov	r0, r3
 8002214:	3710      	adds	r7, #16
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	20000830 	.word	0x20000830

08002220 <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	f001 fc45 	bl	8003ab8 <HAL_Delay>
}
 800222e:	bf00      	nop
 8002230:	3708      	adds	r7, #8
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
	...

08002238 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 8002238:	b580      	push	{r7, lr}
 800223a:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 800223c:	4b31      	ldr	r3, [pc, #196]	; (8002304 <BSP_LCD_Init+0xcc>)
 800223e:	2228      	movs	r2, #40	; 0x28
 8002240:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8002242:	4b30      	ldr	r3, [pc, #192]	; (8002304 <BSP_LCD_Init+0xcc>)
 8002244:	2209      	movs	r2, #9
 8002246:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8002248:	4b2e      	ldr	r3, [pc, #184]	; (8002304 <BSP_LCD_Init+0xcc>)
 800224a:	2235      	movs	r2, #53	; 0x35
 800224c:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 800224e:	4b2d      	ldr	r3, [pc, #180]	; (8002304 <BSP_LCD_Init+0xcc>)
 8002250:	220b      	movs	r2, #11
 8002252:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8002254:	4b2b      	ldr	r3, [pc, #172]	; (8002304 <BSP_LCD_Init+0xcc>)
 8002256:	f240 121b 	movw	r2, #283	; 0x11b
 800225a:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 800225c:	4b29      	ldr	r3, [pc, #164]	; (8002304 <BSP_LCD_Init+0xcc>)
 800225e:	f240 2215 	movw	r2, #533	; 0x215
 8002262:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8002264:	4b27      	ldr	r3, [pc, #156]	; (8002304 <BSP_LCD_Init+0xcc>)
 8002266:	f240 121d 	movw	r2, #285	; 0x11d
 800226a:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 800226c:	4b25      	ldr	r3, [pc, #148]	; (8002304 <BSP_LCD_Init+0xcc>)
 800226e:	f240 2235 	movw	r2, #565	; 0x235
 8002272:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8002274:	2100      	movs	r1, #0
 8002276:	4823      	ldr	r0, [pc, #140]	; (8002304 <BSP_LCD_Init+0xcc>)
 8002278:	f000 fb8c 	bl	8002994 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 800227c:	4b21      	ldr	r3, [pc, #132]	; (8002304 <BSP_LCD_Init+0xcc>)
 800227e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002282:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8002284:	4b1f      	ldr	r3, [pc, #124]	; (8002304 <BSP_LCD_Init+0xcc>)
 8002286:	f44f 7288 	mov.w	r2, #272	; 0x110
 800228a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 800228c:	4b1d      	ldr	r3, [pc, #116]	; (8002304 <BSP_LCD_Init+0xcc>)
 800228e:	2200      	movs	r2, #0
 8002290:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8002294:	4b1b      	ldr	r3, [pc, #108]	; (8002304 <BSP_LCD_Init+0xcc>)
 8002296:	2200      	movs	r2, #0
 8002298:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 800229c:	4b19      	ldr	r3, [pc, #100]	; (8002304 <BSP_LCD_Init+0xcc>)
 800229e:	2200      	movs	r2, #0
 80022a0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80022a4:	4b17      	ldr	r3, [pc, #92]	; (8002304 <BSP_LCD_Init+0xcc>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 80022aa:	4b16      	ldr	r3, [pc, #88]	; (8002304 <BSP_LCD_Init+0xcc>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 80022b0:	4b14      	ldr	r3, [pc, #80]	; (8002304 <BSP_LCD_Init+0xcc>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80022b6:	4b13      	ldr	r3, [pc, #76]	; (8002304 <BSP_LCD_Init+0xcc>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 80022bc:	4b11      	ldr	r3, [pc, #68]	; (8002304 <BSP_LCD_Init+0xcc>)
 80022be:	4a12      	ldr	r2, [pc, #72]	; (8002308 <BSP_LCD_Init+0xd0>)
 80022c0:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 80022c2:	4810      	ldr	r0, [pc, #64]	; (8002304 <BSP_LCD_Init+0xcc>)
 80022c4:	f004 fc64 	bl	8006b90 <HAL_LTDC_GetState>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d103      	bne.n	80022d6 <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 80022ce:	2100      	movs	r1, #0
 80022d0:	480c      	ldr	r0, [pc, #48]	; (8002304 <BSP_LCD_Init+0xcc>)
 80022d2:	f000 fa85 	bl	80027e0 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 80022d6:	480b      	ldr	r0, [pc, #44]	; (8002304 <BSP_LCD_Init+0xcc>)
 80022d8:	f004 fb4c 	bl	8006974 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 80022dc:	2201      	movs	r2, #1
 80022de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022e2:	480a      	ldr	r0, [pc, #40]	; (800230c <BSP_LCD_Init+0xd4>)
 80022e4:	f003 fd82 	bl	8005dec <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 80022e8:	2201      	movs	r2, #1
 80022ea:	2108      	movs	r1, #8
 80022ec:	4808      	ldr	r0, [pc, #32]	; (8002310 <BSP_LCD_Init+0xd8>)
 80022ee:	f003 fd7d 	bl	8005dec <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 80022f2:	f000 ff51 	bl	8003198 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80022f6:	4807      	ldr	r0, [pc, #28]	; (8002314 <BSP_LCD_Init+0xdc>)
 80022f8:	f000 f8be 	bl	8002478 <BSP_LCD_SetFont>
  
  return LCD_OK;
 80022fc:	2300      	movs	r3, #0
}
 80022fe:	4618      	mov	r0, r3
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	20000884 	.word	0x20000884
 8002308:	40016800 	.word	0x40016800
 800230c:	40022000 	.word	0x40022000
 8002310:	40022800 	.word	0x40022800
 8002314:	20000030 	.word	0x20000030

08002318 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 800231c:	4b06      	ldr	r3, [pc, #24]	; (8002338 <BSP_LCD_GetXSize+0x20>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a06      	ldr	r2, [pc, #24]	; (800233c <BSP_LCD_GetXSize+0x24>)
 8002322:	2134      	movs	r1, #52	; 0x34
 8002324:	fb01 f303 	mul.w	r3, r1, r3
 8002328:	4413      	add	r3, r2
 800232a:	3360      	adds	r3, #96	; 0x60
 800232c:	681b      	ldr	r3, [r3, #0]
}
 800232e:	4618      	mov	r0, r3
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr
 8002338:	2000096c 	.word	0x2000096c
 800233c:	20000884 	.word	0x20000884

08002340 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8002344:	4b06      	ldr	r3, [pc, #24]	; (8002360 <BSP_LCD_GetYSize+0x20>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a06      	ldr	r2, [pc, #24]	; (8002364 <BSP_LCD_GetYSize+0x24>)
 800234a:	2134      	movs	r1, #52	; 0x34
 800234c:	fb01 f303 	mul.w	r3, r1, r3
 8002350:	4413      	add	r3, r2
 8002352:	3364      	adds	r3, #100	; 0x64
 8002354:	681b      	ldr	r3, [r3, #0]
}
 8002356:	4618      	mov	r0, r3
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr
 8002360:	2000096c 	.word	0x2000096c
 8002364:	20000884 	.word	0x20000884

08002368 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8002368:	b580      	push	{r7, lr}
 800236a:	b090      	sub	sp, #64	; 0x40
 800236c:	af00      	add	r7, sp, #0
 800236e:	4603      	mov	r3, r0
 8002370:	6039      	str	r1, [r7, #0]
 8002372:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8002374:	2300      	movs	r3, #0
 8002376:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8002378:	f7ff ffce 	bl	8002318 <BSP_LCD_GetXSize>
 800237c:	4603      	mov	r3, r0
 800237e:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 8002380:	2300      	movs	r3, #0
 8002382:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8002384:	f7ff ffdc 	bl	8002340 <BSP_LCD_GetYSize>
 8002388:	4603      	mov	r3, r0
 800238a:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800238c:	2300      	movs	r3, #0
 800238e:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 8002394:	23ff      	movs	r3, #255	; 0xff
 8002396:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8002398:	2300      	movs	r3, #0
 800239a:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 800239c:	2300      	movs	r3, #0
 800239e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 80023a2:	2300      	movs	r3, #0
 80023a4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 80023a8:	2300      	movs	r3, #0
 80023aa:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80023ae:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80023b2:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80023b4:	2307      	movs	r3, #7
 80023b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 80023b8:	f7ff ffae 	bl	8002318 <BSP_LCD_GetXSize>
 80023bc:	4603      	mov	r3, r0
 80023be:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 80023c0:	f7ff ffbe 	bl	8002340 <BSP_LCD_GetYSize>
 80023c4:	4603      	mov	r3, r0
 80023c6:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 80023c8:	88fa      	ldrh	r2, [r7, #6]
 80023ca:	f107 030c 	add.w	r3, r7, #12
 80023ce:	4619      	mov	r1, r3
 80023d0:	4812      	ldr	r0, [pc, #72]	; (800241c <BSP_LCD_LayerDefaultInit+0xb4>)
 80023d2:	f004 fb9f 	bl	8006b14 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80023d6:	88fa      	ldrh	r2, [r7, #6]
 80023d8:	4911      	ldr	r1, [pc, #68]	; (8002420 <BSP_LCD_LayerDefaultInit+0xb8>)
 80023da:	4613      	mov	r3, r2
 80023dc:	005b      	lsls	r3, r3, #1
 80023de:	4413      	add	r3, r2
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	440b      	add	r3, r1
 80023e4:	3304      	adds	r3, #4
 80023e6:	f04f 32ff 	mov.w	r2, #4294967295
 80023ea:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 80023ec:	88fa      	ldrh	r2, [r7, #6]
 80023ee:	490c      	ldr	r1, [pc, #48]	; (8002420 <BSP_LCD_LayerDefaultInit+0xb8>)
 80023f0:	4613      	mov	r3, r2
 80023f2:	005b      	lsls	r3, r3, #1
 80023f4:	4413      	add	r3, r2
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	440b      	add	r3, r1
 80023fa:	3308      	adds	r3, #8
 80023fc:	4a09      	ldr	r2, [pc, #36]	; (8002424 <BSP_LCD_LayerDefaultInit+0xbc>)
 80023fe:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8002400:	88fa      	ldrh	r2, [r7, #6]
 8002402:	4907      	ldr	r1, [pc, #28]	; (8002420 <BSP_LCD_LayerDefaultInit+0xb8>)
 8002404:	4613      	mov	r3, r2
 8002406:	005b      	lsls	r3, r3, #1
 8002408:	4413      	add	r3, r2
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	440b      	add	r3, r1
 800240e:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8002412:	601a      	str	r2, [r3, #0]
}
 8002414:	bf00      	nop
 8002416:	3740      	adds	r7, #64	; 0x40
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}
 800241c:	20000884 	.word	0x20000884
 8002420:	20000970 	.word	0x20000970
 8002424:	20000030 	.word	0x20000030

08002428 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8002430:	4a04      	ldr	r2, [pc, #16]	; (8002444 <BSP_LCD_SelectLayer+0x1c>)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6013      	str	r3, [r2, #0]
} 
 8002436:	bf00      	nop
 8002438:	370c      	adds	r7, #12
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr
 8002442:	bf00      	nop
 8002444:	2000096c 	.word	0x2000096c

08002448 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8002450:	4b07      	ldr	r3, [pc, #28]	; (8002470 <BSP_LCD_SetTextColor+0x28>)
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	4907      	ldr	r1, [pc, #28]	; (8002474 <BSP_LCD_SetTextColor+0x2c>)
 8002456:	4613      	mov	r3, r2
 8002458:	005b      	lsls	r3, r3, #1
 800245a:	4413      	add	r3, r2
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	440b      	add	r3, r1
 8002460:	687a      	ldr	r2, [r7, #4]
 8002462:	601a      	str	r2, [r3, #0]
}
 8002464:	bf00      	nop
 8002466:	370c      	adds	r7, #12
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr
 8002470:	2000096c 	.word	0x2000096c
 8002474:	20000970 	.word	0x20000970

08002478 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8002480:	4b08      	ldr	r3, [pc, #32]	; (80024a4 <BSP_LCD_SetFont+0x2c>)
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	4908      	ldr	r1, [pc, #32]	; (80024a8 <BSP_LCD_SetFont+0x30>)
 8002486:	4613      	mov	r3, r2
 8002488:	005b      	lsls	r3, r3, #1
 800248a:	4413      	add	r3, r2
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	440b      	add	r3, r1
 8002490:	3308      	adds	r3, #8
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	601a      	str	r2, [r3, #0]
}
 8002496:	bf00      	nop
 8002498:	370c      	adds	r7, #12
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr
 80024a2:	bf00      	nop
 80024a4:	2000096c 	.word	0x2000096c
 80024a8:	20000970 	.word	0x20000970

080024ac <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 80024ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024ae:	b085      	sub	sp, #20
 80024b0:	af02      	add	r7, sp, #8
 80024b2:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 80024b4:	4b0f      	ldr	r3, [pc, #60]	; (80024f4 <BSP_LCD_Clear+0x48>)
 80024b6:	681c      	ldr	r4, [r3, #0]
 80024b8:	4b0e      	ldr	r3, [pc, #56]	; (80024f4 <BSP_LCD_Clear+0x48>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a0e      	ldr	r2, [pc, #56]	; (80024f8 <BSP_LCD_Clear+0x4c>)
 80024be:	2134      	movs	r1, #52	; 0x34
 80024c0:	fb01 f303 	mul.w	r3, r1, r3
 80024c4:	4413      	add	r3, r2
 80024c6:	335c      	adds	r3, #92	; 0x5c
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	461e      	mov	r6, r3
 80024cc:	f7ff ff24 	bl	8002318 <BSP_LCD_GetXSize>
 80024d0:	4605      	mov	r5, r0
 80024d2:	f7ff ff35 	bl	8002340 <BSP_LCD_GetYSize>
 80024d6:	4602      	mov	r2, r0
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	9301      	str	r3, [sp, #4]
 80024dc:	2300      	movs	r3, #0
 80024de:	9300      	str	r3, [sp, #0]
 80024e0:	4613      	mov	r3, r2
 80024e2:	462a      	mov	r2, r5
 80024e4:	4631      	mov	r1, r6
 80024e6:	4620      	mov	r0, r4
 80024e8:	f000 fb28 	bl	8002b3c <LL_FillBuffer>
}
 80024ec:	bf00      	nop
 80024ee:	370c      	adds	r7, #12
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024f4:	2000096c 	.word	0x2000096c
 80024f8:	20000884 	.word	0x20000884

080024fc <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 80024fc:	b590      	push	{r4, r7, lr}
 80024fe:	b083      	sub	sp, #12
 8002500:	af00      	add	r7, sp, #0
 8002502:	4603      	mov	r3, r0
 8002504:	80fb      	strh	r3, [r7, #6]
 8002506:	460b      	mov	r3, r1
 8002508:	80bb      	strh	r3, [r7, #4]
 800250a:	4613      	mov	r3, r2
 800250c:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800250e:	4b1b      	ldr	r3, [pc, #108]	; (800257c <BSP_LCD_DisplayChar+0x80>)
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	491b      	ldr	r1, [pc, #108]	; (8002580 <BSP_LCD_DisplayChar+0x84>)
 8002514:	4613      	mov	r3, r2
 8002516:	005b      	lsls	r3, r3, #1
 8002518:	4413      	add	r3, r2
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	440b      	add	r3, r1
 800251e:	3308      	adds	r3, #8
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	6819      	ldr	r1, [r3, #0]
 8002524:	78fb      	ldrb	r3, [r7, #3]
 8002526:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800252a:	4b14      	ldr	r3, [pc, #80]	; (800257c <BSP_LCD_DisplayChar+0x80>)
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	4c14      	ldr	r4, [pc, #80]	; (8002580 <BSP_LCD_DisplayChar+0x84>)
 8002530:	4613      	mov	r3, r2
 8002532:	005b      	lsls	r3, r3, #1
 8002534:	4413      	add	r3, r2
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	4423      	add	r3, r4
 800253a:	3308      	adds	r3, #8
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002540:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002544:	4b0d      	ldr	r3, [pc, #52]	; (800257c <BSP_LCD_DisplayChar+0x80>)
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	4c0d      	ldr	r4, [pc, #52]	; (8002580 <BSP_LCD_DisplayChar+0x84>)
 800254a:	4613      	mov	r3, r2
 800254c:	005b      	lsls	r3, r3, #1
 800254e:	4413      	add	r3, r2
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	4423      	add	r3, r4
 8002554:	3308      	adds	r3, #8
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	889b      	ldrh	r3, [r3, #4]
 800255a:	3307      	adds	r3, #7
 800255c:	2b00      	cmp	r3, #0
 800255e:	da00      	bge.n	8002562 <BSP_LCD_DisplayChar+0x66>
 8002560:	3307      	adds	r3, #7
 8002562:	10db      	asrs	r3, r3, #3
 8002564:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002568:	18ca      	adds	r2, r1, r3
 800256a:	88b9      	ldrh	r1, [r7, #4]
 800256c:	88fb      	ldrh	r3, [r7, #6]
 800256e:	4618      	mov	r0, r3
 8002570:	f000 fa2c 	bl	80029cc <DrawChar>
}
 8002574:	bf00      	nop
 8002576:	370c      	adds	r7, #12
 8002578:	46bd      	mov	sp, r7
 800257a:	bd90      	pop	{r4, r7, pc}
 800257c:	2000096c 	.word	0x2000096c
 8002580:	20000970 	.word	0x20000970

08002584 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8002584:	b5b0      	push	{r4, r5, r7, lr}
 8002586:	b088      	sub	sp, #32
 8002588:	af00      	add	r7, sp, #0
 800258a:	60ba      	str	r2, [r7, #8]
 800258c:	461a      	mov	r2, r3
 800258e:	4603      	mov	r3, r0
 8002590:	81fb      	strh	r3, [r7, #14]
 8002592:	460b      	mov	r3, r1
 8002594:	81bb      	strh	r3, [r7, #12]
 8002596:	4613      	mov	r3, r2
 8002598:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 800259a:	2301      	movs	r3, #1
 800259c:	83fb      	strh	r3, [r7, #30]
 800259e:	2300      	movs	r3, #0
 80025a0:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 80025a2:	2300      	movs	r3, #0
 80025a4:	61bb      	str	r3, [r7, #24]
 80025a6:	2300      	movs	r3, #0
 80025a8:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 80025ae:	e002      	b.n	80025b6 <BSP_LCD_DisplayStringAt+0x32>
 80025b0:	69bb      	ldr	r3, [r7, #24]
 80025b2:	3301      	adds	r3, #1
 80025b4:	61bb      	str	r3, [r7, #24]
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	1c5a      	adds	r2, r3, #1
 80025ba:	617a      	str	r2, [r7, #20]
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d1f6      	bne.n	80025b0 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 80025c2:	f7ff fea9 	bl	8002318 <BSP_LCD_GetXSize>
 80025c6:	4601      	mov	r1, r0
 80025c8:	4b50      	ldr	r3, [pc, #320]	; (800270c <BSP_LCD_DisplayStringAt+0x188>)
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	4850      	ldr	r0, [pc, #320]	; (8002710 <BSP_LCD_DisplayStringAt+0x18c>)
 80025ce:	4613      	mov	r3, r2
 80025d0:	005b      	lsls	r3, r3, #1
 80025d2:	4413      	add	r3, r2
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	4403      	add	r3, r0
 80025d8:	3308      	adds	r3, #8
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	889b      	ldrh	r3, [r3, #4]
 80025de:	fbb1 f3f3 	udiv	r3, r1, r3
 80025e2:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 80025e4:	79fb      	ldrb	r3, [r7, #7]
 80025e6:	2b03      	cmp	r3, #3
 80025e8:	d01c      	beq.n	8002624 <BSP_LCD_DisplayStringAt+0xa0>
 80025ea:	2b03      	cmp	r3, #3
 80025ec:	dc33      	bgt.n	8002656 <BSP_LCD_DisplayStringAt+0xd2>
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d002      	beq.n	80025f8 <BSP_LCD_DisplayStringAt+0x74>
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d019      	beq.n	800262a <BSP_LCD_DisplayStringAt+0xa6>
 80025f6:	e02e      	b.n	8002656 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 80025f8:	693a      	ldr	r2, [r7, #16]
 80025fa:	69bb      	ldr	r3, [r7, #24]
 80025fc:	1ad1      	subs	r1, r2, r3
 80025fe:	4b43      	ldr	r3, [pc, #268]	; (800270c <BSP_LCD_DisplayStringAt+0x188>)
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	4843      	ldr	r0, [pc, #268]	; (8002710 <BSP_LCD_DisplayStringAt+0x18c>)
 8002604:	4613      	mov	r3, r2
 8002606:	005b      	lsls	r3, r3, #1
 8002608:	4413      	add	r3, r2
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	4403      	add	r3, r0
 800260e:	3308      	adds	r3, #8
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	889b      	ldrh	r3, [r3, #4]
 8002614:	fb01 f303 	mul.w	r3, r1, r3
 8002618:	085b      	lsrs	r3, r3, #1
 800261a:	b29a      	uxth	r2, r3
 800261c:	89fb      	ldrh	r3, [r7, #14]
 800261e:	4413      	add	r3, r2
 8002620:	83fb      	strh	r3, [r7, #30]
      break;
 8002622:	e01b      	b.n	800265c <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 8002624:	89fb      	ldrh	r3, [r7, #14]
 8002626:	83fb      	strh	r3, [r7, #30]
      break;
 8002628:	e018      	b.n	800265c <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 800262a:	693a      	ldr	r2, [r7, #16]
 800262c:	69bb      	ldr	r3, [r7, #24]
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	b299      	uxth	r1, r3
 8002632:	4b36      	ldr	r3, [pc, #216]	; (800270c <BSP_LCD_DisplayStringAt+0x188>)
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	4836      	ldr	r0, [pc, #216]	; (8002710 <BSP_LCD_DisplayStringAt+0x18c>)
 8002638:	4613      	mov	r3, r2
 800263a:	005b      	lsls	r3, r3, #1
 800263c:	4413      	add	r3, r2
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	4403      	add	r3, r0
 8002642:	3308      	adds	r3, #8
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	889b      	ldrh	r3, [r3, #4]
 8002648:	fb11 f303 	smulbb	r3, r1, r3
 800264c:	b29a      	uxth	r2, r3
 800264e:	89fb      	ldrh	r3, [r7, #14]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	83fb      	strh	r3, [r7, #30]
      break;
 8002654:	e002      	b.n	800265c <BSP_LCD_DisplayStringAt+0xd8>
    }    
  default:
    {
      ref_column = Xpos;
 8002656:	89fb      	ldrh	r3, [r7, #14]
 8002658:	83fb      	strh	r3, [r7, #30]
      break;
 800265a:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 800265c:	8bfb      	ldrh	r3, [r7, #30]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d003      	beq.n	800266a <BSP_LCD_DisplayStringAt+0xe6>
 8002662:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002666:	2b00      	cmp	r3, #0
 8002668:	da1d      	bge.n	80026a6 <BSP_LCD_DisplayStringAt+0x122>
  {
    ref_column = 1;
 800266a:	2301      	movs	r3, #1
 800266c:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800266e:	e01a      	b.n	80026a6 <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	781a      	ldrb	r2, [r3, #0]
 8002674:	89b9      	ldrh	r1, [r7, #12]
 8002676:	8bfb      	ldrh	r3, [r7, #30]
 8002678:	4618      	mov	r0, r3
 800267a:	f7ff ff3f 	bl	80024fc <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 800267e:	4b23      	ldr	r3, [pc, #140]	; (800270c <BSP_LCD_DisplayStringAt+0x188>)
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	4923      	ldr	r1, [pc, #140]	; (8002710 <BSP_LCD_DisplayStringAt+0x18c>)
 8002684:	4613      	mov	r3, r2
 8002686:	005b      	lsls	r3, r3, #1
 8002688:	4413      	add	r3, r2
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	440b      	add	r3, r1
 800268e:	3308      	adds	r3, #8
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	889a      	ldrh	r2, [r3, #4]
 8002694:	8bfb      	ldrh	r3, [r7, #30]
 8002696:	4413      	add	r3, r2
 8002698:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	3301      	adds	r3, #1
 800269e:	60bb      	str	r3, [r7, #8]
    i++;
 80026a0:	8bbb      	ldrh	r3, [r7, #28]
 80026a2:	3301      	adds	r3, #1
 80026a4:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	bf14      	ite	ne
 80026ae:	2301      	movne	r3, #1
 80026b0:	2300      	moveq	r3, #0
 80026b2:	b2dc      	uxtb	r4, r3
 80026b4:	f7ff fe30 	bl	8002318 <BSP_LCD_GetXSize>
 80026b8:	8bb9      	ldrh	r1, [r7, #28]
 80026ba:	4b14      	ldr	r3, [pc, #80]	; (800270c <BSP_LCD_DisplayStringAt+0x188>)
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	4d14      	ldr	r5, [pc, #80]	; (8002710 <BSP_LCD_DisplayStringAt+0x18c>)
 80026c0:	4613      	mov	r3, r2
 80026c2:	005b      	lsls	r3, r3, #1
 80026c4:	4413      	add	r3, r2
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	442b      	add	r3, r5
 80026ca:	3308      	adds	r3, #8
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	889b      	ldrh	r3, [r3, #4]
 80026d0:	fb01 f303 	mul.w	r3, r1, r3
 80026d4:	1ac3      	subs	r3, r0, r3
 80026d6:	b299      	uxth	r1, r3
 80026d8:	4b0c      	ldr	r3, [pc, #48]	; (800270c <BSP_LCD_DisplayStringAt+0x188>)
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	480c      	ldr	r0, [pc, #48]	; (8002710 <BSP_LCD_DisplayStringAt+0x18c>)
 80026de:	4613      	mov	r3, r2
 80026e0:	005b      	lsls	r3, r3, #1
 80026e2:	4413      	add	r3, r2
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	4403      	add	r3, r0
 80026e8:	3308      	adds	r3, #8
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	889b      	ldrh	r3, [r3, #4]
 80026ee:	4299      	cmp	r1, r3
 80026f0:	bf2c      	ite	cs
 80026f2:	2301      	movcs	r3, #1
 80026f4:	2300      	movcc	r3, #0
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	4023      	ands	r3, r4
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d1b7      	bne.n	8002670 <BSP_LCD_DisplayStringAt+0xec>
  }  
}
 8002700:	bf00      	nop
 8002702:	bf00      	nop
 8002704:	3720      	adds	r7, #32
 8002706:	46bd      	mov	sp, r7
 8002708:	bdb0      	pop	{r4, r5, r7, pc}
 800270a:	bf00      	nop
 800270c:	2000096c 	.word	0x2000096c
 8002710:	20000970 	.word	0x20000970

08002714 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8002714:	b5b0      	push	{r4, r5, r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0
 800271a:	4603      	mov	r3, r0
 800271c:	603a      	str	r2, [r7, #0]
 800271e:	80fb      	strh	r3, [r7, #6]
 8002720:	460b      	mov	r3, r1
 8002722:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002724:	4b1d      	ldr	r3, [pc, #116]	; (800279c <BSP_LCD_DrawPixel+0x88>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a1d      	ldr	r2, [pc, #116]	; (80027a0 <BSP_LCD_DrawPixel+0x8c>)
 800272a:	2134      	movs	r1, #52	; 0x34
 800272c:	fb01 f303 	mul.w	r3, r1, r3
 8002730:	4413      	add	r3, r2
 8002732:	3348      	adds	r3, #72	; 0x48
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	2b02      	cmp	r3, #2
 8002738:	d116      	bne.n	8002768 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 800273a:	4b18      	ldr	r3, [pc, #96]	; (800279c <BSP_LCD_DrawPixel+0x88>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a18      	ldr	r2, [pc, #96]	; (80027a0 <BSP_LCD_DrawPixel+0x8c>)
 8002740:	2134      	movs	r1, #52	; 0x34
 8002742:	fb01 f303 	mul.w	r3, r1, r3
 8002746:	4413      	add	r3, r2
 8002748:	335c      	adds	r3, #92	; 0x5c
 800274a:	681c      	ldr	r4, [r3, #0]
 800274c:	88bd      	ldrh	r5, [r7, #4]
 800274e:	f7ff fde3 	bl	8002318 <BSP_LCD_GetXSize>
 8002752:	4603      	mov	r3, r0
 8002754:	fb03 f205 	mul.w	r2, r3, r5
 8002758:	88fb      	ldrh	r3, [r7, #6]
 800275a:	4413      	add	r3, r2
 800275c:	005b      	lsls	r3, r3, #1
 800275e:	4423      	add	r3, r4
 8002760:	683a      	ldr	r2, [r7, #0]
 8002762:	b292      	uxth	r2, r2
 8002764:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 8002766:	e015      	b.n	8002794 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8002768:	4b0c      	ldr	r3, [pc, #48]	; (800279c <BSP_LCD_DrawPixel+0x88>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a0c      	ldr	r2, [pc, #48]	; (80027a0 <BSP_LCD_DrawPixel+0x8c>)
 800276e:	2134      	movs	r1, #52	; 0x34
 8002770:	fb01 f303 	mul.w	r3, r1, r3
 8002774:	4413      	add	r3, r2
 8002776:	335c      	adds	r3, #92	; 0x5c
 8002778:	681c      	ldr	r4, [r3, #0]
 800277a:	88bd      	ldrh	r5, [r7, #4]
 800277c:	f7ff fdcc 	bl	8002318 <BSP_LCD_GetXSize>
 8002780:	4603      	mov	r3, r0
 8002782:	fb03 f205 	mul.w	r2, r3, r5
 8002786:	88fb      	ldrh	r3, [r7, #6]
 8002788:	4413      	add	r3, r2
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	4423      	add	r3, r4
 800278e:	461a      	mov	r2, r3
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	6013      	str	r3, [r2, #0]
}
 8002794:	bf00      	nop
 8002796:	3708      	adds	r7, #8
 8002798:	46bd      	mov	sp, r7
 800279a:	bdb0      	pop	{r4, r5, r7, pc}
 800279c:	2000096c 	.word	0x2000096c
 80027a0:	20000884 	.word	0x20000884

080027a4 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 80027a8:	4b0a      	ldr	r3, [pc, #40]	; (80027d4 <BSP_LCD_DisplayOn+0x30>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	699a      	ldr	r2, [r3, #24]
 80027ae:	4b09      	ldr	r3, [pc, #36]	; (80027d4 <BSP_LCD_DisplayOn+0x30>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f042 0201 	orr.w	r2, r2, #1
 80027b6:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 80027b8:	2201      	movs	r2, #1
 80027ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80027be:	4806      	ldr	r0, [pc, #24]	; (80027d8 <BSP_LCD_DisplayOn+0x34>)
 80027c0:	f003 fb14 	bl	8005dec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 80027c4:	2201      	movs	r2, #1
 80027c6:	2108      	movs	r1, #8
 80027c8:	4804      	ldr	r0, [pc, #16]	; (80027dc <BSP_LCD_DisplayOn+0x38>)
 80027ca:	f003 fb0f 	bl	8005dec <HAL_GPIO_WritePin>
}
 80027ce:	bf00      	nop
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	20000884 	.word	0x20000884
 80027d8:	40022000 	.word	0x40022000
 80027dc:	40022800 	.word	0x40022800

080027e0 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b090      	sub	sp, #64	; 0x40
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80027ea:	4b64      	ldr	r3, [pc, #400]	; (800297c <BSP_LCD_MspInit+0x19c>)
 80027ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ee:	4a63      	ldr	r2, [pc, #396]	; (800297c <BSP_LCD_MspInit+0x19c>)
 80027f0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80027f4:	6453      	str	r3, [r2, #68]	; 0x44
 80027f6:	4b61      	ldr	r3, [pc, #388]	; (800297c <BSP_LCD_MspInit+0x19c>)
 80027f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027fa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80027fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8002800:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8002802:	4b5e      	ldr	r3, [pc, #376]	; (800297c <BSP_LCD_MspInit+0x19c>)
 8002804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002806:	4a5d      	ldr	r2, [pc, #372]	; (800297c <BSP_LCD_MspInit+0x19c>)
 8002808:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800280c:	6313      	str	r3, [r2, #48]	; 0x30
 800280e:	4b5b      	ldr	r3, [pc, #364]	; (800297c <BSP_LCD_MspInit+0x19c>)
 8002810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002812:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002816:	627b      	str	r3, [r7, #36]	; 0x24
 8002818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800281a:	4b58      	ldr	r3, [pc, #352]	; (800297c <BSP_LCD_MspInit+0x19c>)
 800281c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281e:	4a57      	ldr	r2, [pc, #348]	; (800297c <BSP_LCD_MspInit+0x19c>)
 8002820:	f043 0310 	orr.w	r3, r3, #16
 8002824:	6313      	str	r3, [r2, #48]	; 0x30
 8002826:	4b55      	ldr	r3, [pc, #340]	; (800297c <BSP_LCD_MspInit+0x19c>)
 8002828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282a:	f003 0310 	and.w	r3, r3, #16
 800282e:	623b      	str	r3, [r7, #32]
 8002830:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002832:	4b52      	ldr	r3, [pc, #328]	; (800297c <BSP_LCD_MspInit+0x19c>)
 8002834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002836:	4a51      	ldr	r2, [pc, #324]	; (800297c <BSP_LCD_MspInit+0x19c>)
 8002838:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800283c:	6313      	str	r3, [r2, #48]	; 0x30
 800283e:	4b4f      	ldr	r3, [pc, #316]	; (800297c <BSP_LCD_MspInit+0x19c>)
 8002840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002842:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002846:	61fb      	str	r3, [r7, #28]
 8002848:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800284a:	4b4c      	ldr	r3, [pc, #304]	; (800297c <BSP_LCD_MspInit+0x19c>)
 800284c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284e:	4a4b      	ldr	r2, [pc, #300]	; (800297c <BSP_LCD_MspInit+0x19c>)
 8002850:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002854:	6313      	str	r3, [r2, #48]	; 0x30
 8002856:	4b49      	ldr	r3, [pc, #292]	; (800297c <BSP_LCD_MspInit+0x19c>)
 8002858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800285e:	61bb      	str	r3, [r7, #24]
 8002860:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002862:	4b46      	ldr	r3, [pc, #280]	; (800297c <BSP_LCD_MspInit+0x19c>)
 8002864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002866:	4a45      	ldr	r2, [pc, #276]	; (800297c <BSP_LCD_MspInit+0x19c>)
 8002868:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800286c:	6313      	str	r3, [r2, #48]	; 0x30
 800286e:	4b43      	ldr	r3, [pc, #268]	; (800297c <BSP_LCD_MspInit+0x19c>)
 8002870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002872:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002876:	617b      	str	r3, [r7, #20]
 8002878:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800287a:	4b40      	ldr	r3, [pc, #256]	; (800297c <BSP_LCD_MspInit+0x19c>)
 800287c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287e:	4a3f      	ldr	r2, [pc, #252]	; (800297c <BSP_LCD_MspInit+0x19c>)
 8002880:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002884:	6313      	str	r3, [r2, #48]	; 0x30
 8002886:	4b3d      	ldr	r3, [pc, #244]	; (800297c <BSP_LCD_MspInit+0x19c>)
 8002888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800288e:	613b      	str	r3, [r7, #16]
 8002890:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 8002892:	4b3a      	ldr	r3, [pc, #232]	; (800297c <BSP_LCD_MspInit+0x19c>)
 8002894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002896:	4a39      	ldr	r2, [pc, #228]	; (800297c <BSP_LCD_MspInit+0x19c>)
 8002898:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800289c:	6313      	str	r3, [r2, #48]	; 0x30
 800289e:	4b37      	ldr	r3, [pc, #220]	; (800297c <BSP_LCD_MspInit+0x19c>)
 80028a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028a6:	60fb      	str	r3, [r7, #12]
 80028a8:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 80028aa:	4b34      	ldr	r3, [pc, #208]	; (800297c <BSP_LCD_MspInit+0x19c>)
 80028ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ae:	4a33      	ldr	r2, [pc, #204]	; (800297c <BSP_LCD_MspInit+0x19c>)
 80028b0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80028b4:	6313      	str	r3, [r2, #48]	; 0x30
 80028b6:	4b31      	ldr	r3, [pc, #196]	; (800297c <BSP_LCD_MspInit+0x19c>)
 80028b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028be:	60bb      	str	r3, [r7, #8]
 80028c0:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 80028c2:	2310      	movs	r3, #16
 80028c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80028c6:	2302      	movs	r3, #2
 80028c8:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80028ca:	2300      	movs	r3, #0
 80028cc:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 80028ce:	2302      	movs	r3, #2
 80028d0:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 80028d2:	230e      	movs	r3, #14
 80028d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80028d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028da:	4619      	mov	r1, r3
 80028dc:	4828      	ldr	r0, [pc, #160]	; (8002980 <BSP_LCD_MspInit+0x1a0>)
 80028de:	f002 ffcd 	bl	800587c <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 80028e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80028e8:	2302      	movs	r3, #2
 80028ea:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 80028ec:	2309      	movs	r3, #9
 80028ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80028f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028f4:	4619      	mov	r1, r3
 80028f6:	4823      	ldr	r0, [pc, #140]	; (8002984 <BSP_LCD_MspInit+0x1a4>)
 80028f8:	f002 ffc0 	bl	800587c <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 80028fc:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8002900:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002902:	2302      	movs	r3, #2
 8002904:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8002906:	230e      	movs	r3, #14
 8002908:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 800290a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800290e:	4619      	mov	r1, r3
 8002910:	481d      	ldr	r0, [pc, #116]	; (8002988 <BSP_LCD_MspInit+0x1a8>)
 8002912:	f002 ffb3 	bl	800587c <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8002916:	f64e 73ff 	movw	r3, #61439	; 0xefff
 800291a:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800291c:	2302      	movs	r3, #2
 800291e:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8002920:	230e      	movs	r3, #14
 8002922:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8002924:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002928:	4619      	mov	r1, r3
 800292a:	4818      	ldr	r0, [pc, #96]	; (800298c <BSP_LCD_MspInit+0x1ac>)
 800292c:	f002 ffa6 	bl	800587c <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8002930:	23f7      	movs	r3, #247	; 0xf7
 8002932:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002934:	2302      	movs	r3, #2
 8002936:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8002938:	230e      	movs	r3, #14
 800293a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 800293c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002940:	4619      	mov	r1, r3
 8002942:	4813      	ldr	r0, [pc, #76]	; (8002990 <BSP_LCD_MspInit+0x1b0>)
 8002944:	f002 ff9a 	bl	800587c <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8002948:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800294c:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800294e:	2301      	movs	r3, #1
 8002950:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8002952:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002956:	4619      	mov	r1, r3
 8002958:	480b      	ldr	r0, [pc, #44]	; (8002988 <BSP_LCD_MspInit+0x1a8>)
 800295a:	f002 ff8f 	bl	800587c <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 800295e:	2308      	movs	r3, #8
 8002960:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8002962:	2301      	movs	r3, #1
 8002964:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8002966:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800296a:	4619      	mov	r1, r3
 800296c:	4808      	ldr	r0, [pc, #32]	; (8002990 <BSP_LCD_MspInit+0x1b0>)
 800296e:	f002 ff85 	bl	800587c <HAL_GPIO_Init>
}
 8002972:	bf00      	nop
 8002974:	3740      	adds	r7, #64	; 0x40
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	40023800 	.word	0x40023800
 8002980:	40021000 	.word	0x40021000
 8002984:	40021800 	.word	0x40021800
 8002988:	40022000 	.word	0x40022000
 800298c:	40022400 	.word	0x40022400
 8002990:	40022800 	.word	0x40022800

08002994 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800299e:	4b0a      	ldr	r3, [pc, #40]	; (80029c8 <BSP_LCD_ClockConfig+0x34>)
 80029a0:	2208      	movs	r2, #8
 80029a2:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 80029a4:	4b08      	ldr	r3, [pc, #32]	; (80029c8 <BSP_LCD_ClockConfig+0x34>)
 80029a6:	22c0      	movs	r2, #192	; 0xc0
 80029a8:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 80029aa:	4b07      	ldr	r3, [pc, #28]	; (80029c8 <BSP_LCD_ClockConfig+0x34>)
 80029ac:	2205      	movs	r2, #5
 80029ae:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 80029b0:	4b05      	ldr	r3, [pc, #20]	; (80029c8 <BSP_LCD_ClockConfig+0x34>)
 80029b2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80029b6:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 80029b8:	4803      	ldr	r0, [pc, #12]	; (80029c8 <BSP_LCD_ClockConfig+0x34>)
 80029ba:	f005 fccf 	bl	800835c <HAL_RCCEx_PeriphCLKConfig>
}
 80029be:	bf00      	nop
 80029c0:	3708      	adds	r7, #8
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	20000988 	.word	0x20000988

080029cc <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b088      	sub	sp, #32
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	4603      	mov	r3, r0
 80029d4:	603a      	str	r2, [r7, #0]
 80029d6:	80fb      	strh	r3, [r7, #6]
 80029d8:	460b      	mov	r3, r1
 80029da:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 80029dc:	2300      	movs	r3, #0
 80029de:	61fb      	str	r3, [r7, #28]
 80029e0:	2300      	movs	r3, #0
 80029e2:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 80029e4:	4b53      	ldr	r3, [pc, #332]	; (8002b34 <DrawChar+0x168>)
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	4953      	ldr	r1, [pc, #332]	; (8002b38 <DrawChar+0x16c>)
 80029ea:	4613      	mov	r3, r2
 80029ec:	005b      	lsls	r3, r3, #1
 80029ee:	4413      	add	r3, r2
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	440b      	add	r3, r1
 80029f4:	3308      	adds	r3, #8
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	88db      	ldrh	r3, [r3, #6]
 80029fa:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 80029fc:	4b4d      	ldr	r3, [pc, #308]	; (8002b34 <DrawChar+0x168>)
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	494d      	ldr	r1, [pc, #308]	; (8002b38 <DrawChar+0x16c>)
 8002a02:	4613      	mov	r3, r2
 8002a04:	005b      	lsls	r3, r3, #1
 8002a06:	4413      	add	r3, r2
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	440b      	add	r3, r1
 8002a0c:	3308      	adds	r3, #8
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	889b      	ldrh	r3, [r3, #4]
 8002a12:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 8002a14:	8a3b      	ldrh	r3, [r7, #16]
 8002a16:	3307      	adds	r3, #7
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	da00      	bge.n	8002a1e <DrawChar+0x52>
 8002a1c:	3307      	adds	r3, #7
 8002a1e:	10db      	asrs	r3, r3, #3
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	00db      	lsls	r3, r3, #3
 8002a24:	b2da      	uxtb	r2, r3
 8002a26:	8a3b      	ldrh	r3, [r7, #16]
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 8002a2e:	2300      	movs	r3, #0
 8002a30:	61fb      	str	r3, [r7, #28]
 8002a32:	e076      	b.n	8002b22 <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8002a34:	8a3b      	ldrh	r3, [r7, #16]
 8002a36:	3307      	adds	r3, #7
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	da00      	bge.n	8002a3e <DrawChar+0x72>
 8002a3c:	3307      	adds	r3, #7
 8002a3e:	10db      	asrs	r3, r3, #3
 8002a40:	461a      	mov	r2, r3
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	fb02 f303 	mul.w	r3, r2, r3
 8002a48:	683a      	ldr	r2, [r7, #0]
 8002a4a:	4413      	add	r3, r2
 8002a4c:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 8002a4e:	8a3b      	ldrh	r3, [r7, #16]
 8002a50:	3307      	adds	r3, #7
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	da00      	bge.n	8002a58 <DrawChar+0x8c>
 8002a56:	3307      	adds	r3, #7
 8002a58:	10db      	asrs	r3, r3, #3
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d002      	beq.n	8002a64 <DrawChar+0x98>
 8002a5e:	2b02      	cmp	r3, #2
 8002a60:	d004      	beq.n	8002a6c <DrawChar+0xa0>
 8002a62:	e00c      	b.n	8002a7e <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	617b      	str	r3, [r7, #20]
      break;
 8002a6a:	e016      	b.n	8002a9a <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	021b      	lsls	r3, r3, #8
 8002a72:	68ba      	ldr	r2, [r7, #8]
 8002a74:	3201      	adds	r2, #1
 8002a76:	7812      	ldrb	r2, [r2, #0]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	617b      	str	r3, [r7, #20]
      break;
 8002a7c:	e00d      	b.n	8002a9a <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	781b      	ldrb	r3, [r3, #0]
 8002a82:	041a      	lsls	r2, r3, #16
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	3301      	adds	r3, #1
 8002a88:	781b      	ldrb	r3, [r3, #0]
 8002a8a:	021b      	lsls	r3, r3, #8
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	68ba      	ldr	r2, [r7, #8]
 8002a90:	3202      	adds	r2, #2
 8002a92:	7812      	ldrb	r2, [r2, #0]
 8002a94:	4313      	orrs	r3, r2
 8002a96:	617b      	str	r3, [r7, #20]
      break;
 8002a98:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	61bb      	str	r3, [r7, #24]
 8002a9e:	e036      	b.n	8002b0e <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8002aa0:	8a3a      	ldrh	r2, [r7, #16]
 8002aa2:	69bb      	ldr	r3, [r7, #24]
 8002aa4:	1ad2      	subs	r2, r2, r3
 8002aa6:	7bfb      	ldrb	r3, [r7, #15]
 8002aa8:	4413      	add	r3, r2
 8002aaa:	3b01      	subs	r3, #1
 8002aac:	2201      	movs	r2, #1
 8002aae:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d012      	beq.n	8002ae2 <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8002abc:	69bb      	ldr	r3, [r7, #24]
 8002abe:	b29a      	uxth	r2, r3
 8002ac0:	88fb      	ldrh	r3, [r7, #6]
 8002ac2:	4413      	add	r3, r2
 8002ac4:	b298      	uxth	r0, r3
 8002ac6:	4b1b      	ldr	r3, [pc, #108]	; (8002b34 <DrawChar+0x168>)
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	491b      	ldr	r1, [pc, #108]	; (8002b38 <DrawChar+0x16c>)
 8002acc:	4613      	mov	r3, r2
 8002ace:	005b      	lsls	r3, r3, #1
 8002ad0:	4413      	add	r3, r2
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	440b      	add	r3, r1
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	88bb      	ldrh	r3, [r7, #4]
 8002ada:	4619      	mov	r1, r3
 8002adc:	f7ff fe1a 	bl	8002714 <BSP_LCD_DrawPixel>
 8002ae0:	e012      	b.n	8002b08 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8002ae2:	69bb      	ldr	r3, [r7, #24]
 8002ae4:	b29a      	uxth	r2, r3
 8002ae6:	88fb      	ldrh	r3, [r7, #6]
 8002ae8:	4413      	add	r3, r2
 8002aea:	b298      	uxth	r0, r3
 8002aec:	4b11      	ldr	r3, [pc, #68]	; (8002b34 <DrawChar+0x168>)
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	4911      	ldr	r1, [pc, #68]	; (8002b38 <DrawChar+0x16c>)
 8002af2:	4613      	mov	r3, r2
 8002af4:	005b      	lsls	r3, r3, #1
 8002af6:	4413      	add	r3, r2
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	440b      	add	r3, r1
 8002afc:	3304      	adds	r3, #4
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	88bb      	ldrh	r3, [r7, #4]
 8002b02:	4619      	mov	r1, r3
 8002b04:	f7ff fe06 	bl	8002714 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8002b08:	69bb      	ldr	r3, [r7, #24]
 8002b0a:	3301      	adds	r3, #1
 8002b0c:	61bb      	str	r3, [r7, #24]
 8002b0e:	8a3b      	ldrh	r3, [r7, #16]
 8002b10:	69ba      	ldr	r2, [r7, #24]
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d3c4      	bcc.n	8002aa0 <DrawChar+0xd4>
      } 
    }
    Ypos++;
 8002b16:	88bb      	ldrh	r3, [r7, #4]
 8002b18:	3301      	adds	r3, #1
 8002b1a:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	3301      	adds	r3, #1
 8002b20:	61fb      	str	r3, [r7, #28]
 8002b22:	8a7b      	ldrh	r3, [r7, #18]
 8002b24:	69fa      	ldr	r2, [r7, #28]
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d384      	bcc.n	8002a34 <DrawChar+0x68>
  }
}
 8002b2a:	bf00      	nop
 8002b2c:	bf00      	nop
 8002b2e:	3720      	adds	r7, #32
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	2000096c 	.word	0x2000096c
 8002b38:	20000970 	.word	0x20000970

08002b3c <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b086      	sub	sp, #24
 8002b40:	af02      	add	r7, sp, #8
 8002b42:	60f8      	str	r0, [r7, #12]
 8002b44:	60b9      	str	r1, [r7, #8]
 8002b46:	607a      	str	r2, [r7, #4]
 8002b48:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8002b4a:	4b1e      	ldr	r3, [pc, #120]	; (8002bc4 <LL_FillBuffer+0x88>)
 8002b4c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002b50:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002b52:	4b1d      	ldr	r3, [pc, #116]	; (8002bc8 <LL_FillBuffer+0x8c>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a1d      	ldr	r2, [pc, #116]	; (8002bcc <LL_FillBuffer+0x90>)
 8002b58:	2134      	movs	r1, #52	; 0x34
 8002b5a:	fb01 f303 	mul.w	r3, r1, r3
 8002b5e:	4413      	add	r3, r2
 8002b60:	3348      	adds	r3, #72	; 0x48
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	d103      	bne.n	8002b70 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8002b68:	4b16      	ldr	r3, [pc, #88]	; (8002bc4 <LL_FillBuffer+0x88>)
 8002b6a:	2202      	movs	r2, #2
 8002b6c:	609a      	str	r2, [r3, #8]
 8002b6e:	e002      	b.n	8002b76 <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8002b70:	4b14      	ldr	r3, [pc, #80]	; (8002bc4 <LL_FillBuffer+0x88>)
 8002b72:	2200      	movs	r2, #0
 8002b74:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8002b76:	4a13      	ldr	r2, [pc, #76]	; (8002bc4 <LL_FillBuffer+0x88>)
 8002b78:	69bb      	ldr	r3, [r7, #24]
 8002b7a:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 8002b7c:	4b11      	ldr	r3, [pc, #68]	; (8002bc4 <LL_FillBuffer+0x88>)
 8002b7e:	4a14      	ldr	r2, [pc, #80]	; (8002bd0 <LL_FillBuffer+0x94>)
 8002b80:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8002b82:	4810      	ldr	r0, [pc, #64]	; (8002bc4 <LL_FillBuffer+0x88>)
 8002b84:	f001 fafc 	bl	8004180 <HAL_DMA2D_Init>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d115      	bne.n	8002bba <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 8002b8e:	68f9      	ldr	r1, [r7, #12]
 8002b90:	480c      	ldr	r0, [pc, #48]	; (8002bc4 <LL_FillBuffer+0x88>)
 8002b92:	f001 fc53 	bl	800443c <HAL_DMA2D_ConfigLayer>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d10e      	bne.n	8002bba <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8002b9c:	68ba      	ldr	r2, [r7, #8]
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	9300      	str	r3, [sp, #0]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	69f9      	ldr	r1, [r7, #28]
 8002ba6:	4807      	ldr	r0, [pc, #28]	; (8002bc4 <LL_FillBuffer+0x88>)
 8002ba8:	f001 fb34 	bl	8004214 <HAL_DMA2D_Start>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d103      	bne.n	8002bba <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8002bb2:	210a      	movs	r1, #10
 8002bb4:	4803      	ldr	r0, [pc, #12]	; (8002bc4 <LL_FillBuffer+0x88>)
 8002bb6:	f001 fb58 	bl	800426a <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8002bba:	bf00      	nop
 8002bbc:	3710      	adds	r7, #16
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	2000092c 	.word	0x2000092c
 8002bc8:	2000096c 	.word	0x2000096c
 8002bcc:	20000884 	.word	0x20000884
 8002bd0:	4002b000 	.word	0x4002b000

08002bd4 <WDA_LCD_DrawBitmap>:
 * @param: ySize size of the image (in pixels)
 * @param: ColorMode is the color format of the image data (pSrc).
 * @retval None
 */
void WDA_LCD_DrawBitmap(const void *pSrc, uint32_t xPos, uint32_t yPos, uint32_t xSize, uint32_t ySize, uint32_t ColorMode)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b088      	sub	sp, #32
 8002bd8:	af02      	add	r7, sp, #8
 8002bda:	60f8      	str	r0, [r7, #12]
 8002bdc:	60b9      	str	r1, [r7, #8]
 8002bde:	607a      	str	r2, [r7, #4]
 8002be0:	603b      	str	r3, [r7, #0]


	uint32_t address = hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (((480*yPos) + xPos)*(4));
 8002be2:	4b28      	ldr	r3, [pc, #160]	; (8002c84 <WDA_LCD_DrawBitmap+0xb0>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a28      	ldr	r2, [pc, #160]	; (8002c88 <WDA_LCD_DrawBitmap+0xb4>)
 8002be8:	2134      	movs	r1, #52	; 0x34
 8002bea:	fb01 f303 	mul.w	r3, r1, r3
 8002bee:	4413      	add	r3, r2
 8002bf0:	335c      	adds	r3, #92	; 0x5c
 8002bf2:	6819      	ldr	r1, [r3, #0]
 8002bf4:	687a      	ldr	r2, [r7, #4]
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	011b      	lsls	r3, r3, #4
 8002bfa:	1a9b      	subs	r3, r3, r2
 8002bfc:	015b      	lsls	r3, r3, #5
 8002bfe:	461a      	mov	r2, r3
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	4413      	add	r3, r2
 8002c04:	009b      	lsls	r3, r3, #2
 8002c06:	440b      	add	r3, r1
 8002c08:	617b      	str	r3, [r7, #20]
	void *pDst = (void *)address;
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	613b      	str	r3, [r7, #16]

  /* Configure the DMA2D Mode, Color Mode and output offset */
	hDma2dHandler.Init.Mode         = DMA2D_M2M_PFC;
 8002c0e:	4b1f      	ldr	r3, [pc, #124]	; (8002c8c <WDA_LCD_DrawBitmap+0xb8>)
 8002c10:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002c14:	605a      	str	r2, [r3, #4]
	hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8002c16:	4b1d      	ldr	r3, [pc, #116]	; (8002c8c <WDA_LCD_DrawBitmap+0xb8>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	609a      	str	r2, [r3, #8]
	hDma2dHandler.Init.OutputOffset = 480-xSize;
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	f5c3 73f0 	rsb	r3, r3, #480	; 0x1e0
 8002c22:	4a1a      	ldr	r2, [pc, #104]	; (8002c8c <WDA_LCD_DrawBitmap+0xb8>)
 8002c24:	60d3      	str	r3, [r2, #12]

  /* Foreground Configuration */
	hDma2dHandler.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8002c26:	4b19      	ldr	r3, [pc, #100]	; (8002c8c <WDA_LCD_DrawBitmap+0xb8>)
 8002c28:	2200      	movs	r2, #0
 8002c2a:	631a      	str	r2, [r3, #48]	; 0x30
	hDma2dHandler.LayerCfg[1].InputAlpha = 0xFF;
 8002c2c:	4b17      	ldr	r3, [pc, #92]	; (8002c8c <WDA_LCD_DrawBitmap+0xb8>)
 8002c2e:	22ff      	movs	r2, #255	; 0xff
 8002c30:	635a      	str	r2, [r3, #52]	; 0x34
	hDma2dHandler.LayerCfg[1].InputColorMode = ColorMode;
 8002c32:	4a16      	ldr	r2, [pc, #88]	; (8002c8c <WDA_LCD_DrawBitmap+0xb8>)
 8002c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c36:	62d3      	str	r3, [r2, #44]	; 0x2c
	hDma2dHandler.LayerCfg[1].InputOffset = 0;
 8002c38:	4b14      	ldr	r3, [pc, #80]	; (8002c8c <WDA_LCD_DrawBitmap+0xb8>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	629a      	str	r2, [r3, #40]	; 0x28

	hDma2dHandler.Instance = DMA2D;
 8002c3e:	4b13      	ldr	r3, [pc, #76]	; (8002c8c <WDA_LCD_DrawBitmap+0xb8>)
 8002c40:	4a13      	ldr	r2, [pc, #76]	; (8002c90 <WDA_LCD_DrawBitmap+0xbc>)
 8002c42:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK)
 8002c44:	4811      	ldr	r0, [pc, #68]	; (8002c8c <WDA_LCD_DrawBitmap+0xb8>)
 8002c46:	f001 fa9b 	bl	8004180 <HAL_DMA2D_Init>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d115      	bne.n	8002c7c <WDA_LCD_DrawBitmap+0xa8>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, 1) == HAL_OK)
 8002c50:	2101      	movs	r1, #1
 8002c52:	480e      	ldr	r0, [pc, #56]	; (8002c8c <WDA_LCD_DrawBitmap+0xb8>)
 8002c54:	f001 fbf2 	bl	800443c <HAL_DMA2D_ConfigLayer>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d10e      	bne.n	8002c7c <WDA_LCD_DrawBitmap+0xa8>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, (uint32_t)pSrc, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8002c5e:	68f9      	ldr	r1, [r7, #12]
 8002c60:	693a      	ldr	r2, [r7, #16]
 8002c62:	6a3b      	ldr	r3, [r7, #32]
 8002c64:	9300      	str	r3, [sp, #0]
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	4808      	ldr	r0, [pc, #32]	; (8002c8c <WDA_LCD_DrawBitmap+0xb8>)
 8002c6a:	f001 fad3 	bl	8004214 <HAL_DMA2D_Start>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d103      	bne.n	8002c7c <WDA_LCD_DrawBitmap+0xa8>
      {
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8002c74:	210a      	movs	r1, #10
 8002c76:	4805      	ldr	r0, [pc, #20]	; (8002c8c <WDA_LCD_DrawBitmap+0xb8>)
 8002c78:	f001 faf7 	bl	800426a <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 8002c7c:	bf00      	nop
 8002c7e:	3718      	adds	r7, #24
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	2000096c 	.word	0x2000096c
 8002c88:	20000884 	.word	0x20000884
 8002c8c:	2000092c 	.word	0x2000092c
 8002c90:	4002b000 	.word	0x4002b000

08002c94 <BSP_QSPI_Init>:
/**
  * @brief  Initializes the QSPI interface.
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Init(void)
{ 
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b082      	sub	sp, #8
 8002c98:	af00      	add	r7, sp, #0
  QSPIHandle.Instance = QUADSPI;
 8002c9a:	4b28      	ldr	r3, [pc, #160]	; (8002d3c <BSP_QSPI_Init+0xa8>)
 8002c9c:	4a28      	ldr	r2, [pc, #160]	; (8002d40 <BSP_QSPI_Init+0xac>)
 8002c9e:	601a      	str	r2, [r3, #0]

  /* Call the DeInit function to reset the driver */
  if (HAL_QSPI_DeInit(&QSPIHandle) != HAL_OK)
 8002ca0:	4826      	ldr	r0, [pc, #152]	; (8002d3c <BSP_QSPI_Init+0xa8>)
 8002ca2:	f004 f9f9 	bl	8007098 <HAL_QSPI_DeInit>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d001      	beq.n	8002cb0 <BSP_QSPI_Init+0x1c>
  {
    return QSPI_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	e041      	b.n	8002d34 <BSP_QSPI_Init+0xa0>
  }
        
  /* System level initialization */
  BSP_QSPI_MspInit(&QSPIHandle, NULL);
 8002cb0:	2100      	movs	r1, #0
 8002cb2:	4822      	ldr	r0, [pc, #136]	; (8002d3c <BSP_QSPI_Init+0xa8>)
 8002cb4:	f000 f878 	bl	8002da8 <BSP_QSPI_MspInit>
  
  /* QSPI initialization */
  QSPIHandle.Init.ClockPrescaler     = 1; /* QSPI freq = 216 MHz/(1+1) = 108 Mhz */
 8002cb8:	4b20      	ldr	r3, [pc, #128]	; (8002d3c <BSP_QSPI_Init+0xa8>)
 8002cba:	2201      	movs	r2, #1
 8002cbc:	605a      	str	r2, [r3, #4]
  QSPIHandle.Init.FifoThreshold      = 4;
 8002cbe:	4b1f      	ldr	r3, [pc, #124]	; (8002d3c <BSP_QSPI_Init+0xa8>)
 8002cc0:	2204      	movs	r2, #4
 8002cc2:	609a      	str	r2, [r3, #8]
  QSPIHandle.Init.SampleShifting     = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8002cc4:	4b1d      	ldr	r3, [pc, #116]	; (8002d3c <BSP_QSPI_Init+0xa8>)
 8002cc6:	2210      	movs	r2, #16
 8002cc8:	60da      	str	r2, [r3, #12]
 8002cca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002cce:	607b      	str	r3, [r7, #4]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	fa93 f3a3 	rbit	r3, r3
 8002cd6:	603b      	str	r3, [r7, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002cd8:	683b      	ldr	r3, [r7, #0]
  QSPIHandle.Init.FlashSize          = POSITION_VAL(N25Q128A_FLASH_SIZE) - 1;
 8002cda:	fab3 f383 	clz	r3, r3
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	3b01      	subs	r3, #1
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	4b15      	ldr	r3, [pc, #84]	; (8002d3c <BSP_QSPI_Init+0xa8>)
 8002ce6:	611a      	str	r2, [r3, #16]
  QSPIHandle.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE; /* Min 50ns for nonRead */
 8002ce8:	4b14      	ldr	r3, [pc, #80]	; (8002d3c <BSP_QSPI_Init+0xa8>)
 8002cea:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8002cee:	615a      	str	r2, [r3, #20]
  QSPIHandle.Init.ClockMode          = QSPI_CLOCK_MODE_0;
 8002cf0:	4b12      	ldr	r3, [pc, #72]	; (8002d3c <BSP_QSPI_Init+0xa8>)
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	619a      	str	r2, [r3, #24]
  QSPIHandle.Init.FlashID            = QSPI_FLASH_ID_1;
 8002cf6:	4b11      	ldr	r3, [pc, #68]	; (8002d3c <BSP_QSPI_Init+0xa8>)
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	61da      	str	r2, [r3, #28]
  QSPIHandle.Init.DualFlash          = QSPI_DUALFLASH_DISABLE;
 8002cfc:	4b0f      	ldr	r3, [pc, #60]	; (8002d3c <BSP_QSPI_Init+0xa8>)
 8002cfe:	2200      	movs	r2, #0
 8002d00:	621a      	str	r2, [r3, #32]

  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 8002d02:	480e      	ldr	r0, [pc, #56]	; (8002d3c <BSP_QSPI_Init+0xa8>)
 8002d04:	f004 f94c 	bl	8006fa0 <HAL_QSPI_Init>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d001      	beq.n	8002d12 <BSP_QSPI_Init+0x7e>
  {
    return QSPI_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e010      	b.n	8002d34 <BSP_QSPI_Init+0xa0>
  }

  /* QSPI memory reset */
  if (QSPI_ResetMemory(&QSPIHandle) != QSPI_OK)
 8002d12:	480a      	ldr	r0, [pc, #40]	; (8002d3c <BSP_QSPI_Init+0xa8>)
 8002d14:	f000 f908 	bl	8002f28 <QSPI_ResetMemory>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d001      	beq.n	8002d22 <BSP_QSPI_Init+0x8e>
  {
    return QSPI_NOT_SUPPORTED;
 8002d1e:	2304      	movs	r3, #4
 8002d20:	e008      	b.n	8002d34 <BSP_QSPI_Init+0xa0>
  }
 
  /* Configuration of the dummy cycles on QSPI memory side */
  if (QSPI_DummyCyclesCfg(&QSPIHandle) != QSPI_OK)
 8002d22:	4806      	ldr	r0, [pc, #24]	; (8002d3c <BSP_QSPI_Init+0xa8>)
 8002d24:	f000 f942 	bl	8002fac <QSPI_DummyCyclesCfg>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d001      	beq.n	8002d32 <BSP_QSPI_Init+0x9e>
  {
    return QSPI_NOT_SUPPORTED;
 8002d2e:	2304      	movs	r3, #4
 8002d30:	e000      	b.n	8002d34 <BSP_QSPI_Init+0xa0>
  }
  
  return QSPI_OK;
 8002d32:	2300      	movs	r3, #0
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3708      	adds	r7, #8
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	20000a0c 	.word	0x20000a0c
 8002d40:	a0001000 	.word	0xa0001000

08002d44 <BSP_QSPI_EnableMemoryMappedMode>:
/**
  * @brief  Configure the QSPI in memory-mapped mode
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_EnableMemoryMappedMode(void)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b090      	sub	sp, #64	; 0x40
 8002d48:	af00      	add	r7, sp, #0
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;

  /* Configure the command for the read instruction */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002d4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d4e:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = QUAD_INOUT_FAST_READ_CMD;
 8002d50:	23eb      	movs	r3, #235	; 0xeb
 8002d52:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8002d54:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002d58:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AddressSize       = QSPI_ADDRESS_24_BITS;
 8002d5a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d5e:	617b      	str	r3, [r7, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002d60:	2300      	movs	r3, #0
 8002d62:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8002d64:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8002d68:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = N25Q128A_DUMMY_CYCLES_READ_QUAD;
 8002d6a:	230a      	movs	r3, #10
 8002d6c:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002d72:	2300      	movs	r3, #0
 8002d74:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002d76:	2300      	movs	r3, #0
 8002d78:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	607b      	str	r3, [r7, #4]
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	603b      	str	r3, [r7, #0]
  
  if (HAL_QSPI_MemoryMapped(&QSPIHandle, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8002d82:	463a      	mov	r2, r7
 8002d84:	f107 0308 	add.w	r3, r7, #8
 8002d88:	4619      	mov	r1, r3
 8002d8a:	4806      	ldr	r0, [pc, #24]	; (8002da4 <BSP_QSPI_EnableMemoryMappedMode+0x60>)
 8002d8c:	f004 fbb6 	bl	80074fc <HAL_QSPI_MemoryMapped>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d001      	beq.n	8002d9a <BSP_QSPI_EnableMemoryMappedMode+0x56>
  {
    return QSPI_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e000      	b.n	8002d9c <BSP_QSPI_EnableMemoryMappedMode+0x58>
  }

  return QSPI_OK;
 8002d9a:	2300      	movs	r3, #0
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3740      	adds	r7, #64	; 0x40
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	20000a0c 	.word	0x20000a0c

08002da8 <BSP_QSPI_MspInit>:
  *           - Peripheral's GPIO Configuration
  *           - NVIC configuration for QSPI interrupt
  * @retval None
  */
__weak void BSP_QSPI_MspInit(QSPI_HandleTypeDef *hqspi, void *Params)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b08e      	sub	sp, #56	; 0x38
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable the QuadSPI memory interface clock */
  QSPI_CLK_ENABLE();
 8002db2:	4b59      	ldr	r3, [pc, #356]	; (8002f18 <BSP_QSPI_MspInit+0x170>)
 8002db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002db6:	4a58      	ldr	r2, [pc, #352]	; (8002f18 <BSP_QSPI_MspInit+0x170>)
 8002db8:	f043 0302 	orr.w	r3, r3, #2
 8002dbc:	6393      	str	r3, [r2, #56]	; 0x38
 8002dbe:	4b56      	ldr	r3, [pc, #344]	; (8002f18 <BSP_QSPI_MspInit+0x170>)
 8002dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dc2:	f003 0302 	and.w	r3, r3, #2
 8002dc6:	623b      	str	r3, [r7, #32]
 8002dc8:	6a3b      	ldr	r3, [r7, #32]
  /* Reset the QuadSPI memory interface */
  QSPI_FORCE_RESET();
 8002dca:	4b53      	ldr	r3, [pc, #332]	; (8002f18 <BSP_QSPI_MspInit+0x170>)
 8002dcc:	699b      	ldr	r3, [r3, #24]
 8002dce:	4a52      	ldr	r2, [pc, #328]	; (8002f18 <BSP_QSPI_MspInit+0x170>)
 8002dd0:	f043 0302 	orr.w	r3, r3, #2
 8002dd4:	6193      	str	r3, [r2, #24]
  QSPI_RELEASE_RESET();
 8002dd6:	4b50      	ldr	r3, [pc, #320]	; (8002f18 <BSP_QSPI_MspInit+0x170>)
 8002dd8:	699b      	ldr	r3, [r3, #24]
 8002dda:	4a4f      	ldr	r2, [pc, #316]	; (8002f18 <BSP_QSPI_MspInit+0x170>)
 8002ddc:	f023 0302 	bic.w	r3, r3, #2
 8002de0:	6193      	str	r3, [r2, #24]
  /* Enable GPIO clocks */
  QSPI_CS_GPIO_CLK_ENABLE();
 8002de2:	4b4d      	ldr	r3, [pc, #308]	; (8002f18 <BSP_QSPI_MspInit+0x170>)
 8002de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de6:	4a4c      	ldr	r2, [pc, #304]	; (8002f18 <BSP_QSPI_MspInit+0x170>)
 8002de8:	f043 0302 	orr.w	r3, r3, #2
 8002dec:	6313      	str	r3, [r2, #48]	; 0x30
 8002dee:	4b4a      	ldr	r3, [pc, #296]	; (8002f18 <BSP_QSPI_MspInit+0x170>)
 8002df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df2:	f003 0302 	and.w	r3, r3, #2
 8002df6:	61fb      	str	r3, [r7, #28]
 8002df8:	69fb      	ldr	r3, [r7, #28]
  QSPI_CLK_GPIO_CLK_ENABLE();
 8002dfa:	4b47      	ldr	r3, [pc, #284]	; (8002f18 <BSP_QSPI_MspInit+0x170>)
 8002dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfe:	4a46      	ldr	r2, [pc, #280]	; (8002f18 <BSP_QSPI_MspInit+0x170>)
 8002e00:	f043 0302 	orr.w	r3, r3, #2
 8002e04:	6313      	str	r3, [r2, #48]	; 0x30
 8002e06:	4b44      	ldr	r3, [pc, #272]	; (8002f18 <BSP_QSPI_MspInit+0x170>)
 8002e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0a:	f003 0302 	and.w	r3, r3, #2
 8002e0e:	61bb      	str	r3, [r7, #24]
 8002e10:	69bb      	ldr	r3, [r7, #24]
  QSPI_D0_GPIO_CLK_ENABLE();
 8002e12:	4b41      	ldr	r3, [pc, #260]	; (8002f18 <BSP_QSPI_MspInit+0x170>)
 8002e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e16:	4a40      	ldr	r2, [pc, #256]	; (8002f18 <BSP_QSPI_MspInit+0x170>)
 8002e18:	f043 0308 	orr.w	r3, r3, #8
 8002e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e1e:	4b3e      	ldr	r3, [pc, #248]	; (8002f18 <BSP_QSPI_MspInit+0x170>)
 8002e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e22:	f003 0308 	and.w	r3, r3, #8
 8002e26:	617b      	str	r3, [r7, #20]
 8002e28:	697b      	ldr	r3, [r7, #20]
  QSPI_D1_GPIO_CLK_ENABLE();
 8002e2a:	4b3b      	ldr	r3, [pc, #236]	; (8002f18 <BSP_QSPI_MspInit+0x170>)
 8002e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2e:	4a3a      	ldr	r2, [pc, #232]	; (8002f18 <BSP_QSPI_MspInit+0x170>)
 8002e30:	f043 0308 	orr.w	r3, r3, #8
 8002e34:	6313      	str	r3, [r2, #48]	; 0x30
 8002e36:	4b38      	ldr	r3, [pc, #224]	; (8002f18 <BSP_QSPI_MspInit+0x170>)
 8002e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3a:	f003 0308 	and.w	r3, r3, #8
 8002e3e:	613b      	str	r3, [r7, #16]
 8002e40:	693b      	ldr	r3, [r7, #16]
  QSPI_D2_GPIO_CLK_ENABLE();
 8002e42:	4b35      	ldr	r3, [pc, #212]	; (8002f18 <BSP_QSPI_MspInit+0x170>)
 8002e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e46:	4a34      	ldr	r2, [pc, #208]	; (8002f18 <BSP_QSPI_MspInit+0x170>)
 8002e48:	f043 0310 	orr.w	r3, r3, #16
 8002e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e4e:	4b32      	ldr	r3, [pc, #200]	; (8002f18 <BSP_QSPI_MspInit+0x170>)
 8002e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e52:	f003 0310 	and.w	r3, r3, #16
 8002e56:	60fb      	str	r3, [r7, #12]
 8002e58:	68fb      	ldr	r3, [r7, #12]
  QSPI_D3_GPIO_CLK_ENABLE();
 8002e5a:	4b2f      	ldr	r3, [pc, #188]	; (8002f18 <BSP_QSPI_MspInit+0x170>)
 8002e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5e:	4a2e      	ldr	r2, [pc, #184]	; (8002f18 <BSP_QSPI_MspInit+0x170>)
 8002e60:	f043 0308 	orr.w	r3, r3, #8
 8002e64:	6313      	str	r3, [r2, #48]	; 0x30
 8002e66:	4b2c      	ldr	r3, [pc, #176]	; (8002f18 <BSP_QSPI_MspInit+0x170>)
 8002e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6a:	f003 0308 	and.w	r3, r3, #8
 8002e6e:	60bb      	str	r3, [r7, #8]
 8002e70:	68bb      	ldr	r3, [r7, #8]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* QSPI CS GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_CS_PIN;
 8002e72:	2340      	movs	r3, #64	; 0x40
 8002e74:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002e76:	2302      	movs	r3, #2
 8002e78:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 8002e82:	230a      	movs	r3, #10
 8002e84:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(QSPI_CS_GPIO_PORT, &gpio_init_structure);
 8002e86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	4823      	ldr	r0, [pc, #140]	; (8002f1c <BSP_QSPI_MspInit+0x174>)
 8002e8e:	f002 fcf5 	bl	800587c <HAL_GPIO_Init>

  /* QSPI CLK GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
 8002e92:	2304      	movs	r3, #4
 8002e94:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8002e96:	2300      	movs	r3, #0
 8002e98:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8002e9a:	2309      	movs	r3, #9
 8002e9c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 8002e9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ea2:	4619      	mov	r1, r3
 8002ea4:	481d      	ldr	r0, [pc, #116]	; (8002f1c <BSP_QSPI_MspInit+0x174>)
 8002ea6:	f002 fce9 	bl	800587c <HAL_GPIO_Init>

  /* QSPI D0 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_D0_PIN;
 8002eaa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002eae:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8002eb0:	2309      	movs	r3, #9
 8002eb2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(QSPI_D0_GPIO_PORT, &gpio_init_structure);
 8002eb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002eb8:	4619      	mov	r1, r3
 8002eba:	4819      	ldr	r0, [pc, #100]	; (8002f20 <BSP_QSPI_MspInit+0x178>)
 8002ebc:	f002 fcde 	bl	800587c <HAL_GPIO_Init>

  /* QSPI D1 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_D1_PIN;
 8002ec0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ec4:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8002ec6:	2309      	movs	r3, #9
 8002ec8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(QSPI_D1_GPIO_PORT, &gpio_init_structure);
 8002eca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ece:	4619      	mov	r1, r3
 8002ed0:	4813      	ldr	r0, [pc, #76]	; (8002f20 <BSP_QSPI_MspInit+0x178>)
 8002ed2:	f002 fcd3 	bl	800587c <HAL_GPIO_Init>

  /* QSPI D2 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_D2_PIN;
 8002ed6:	2304      	movs	r3, #4
 8002ed8:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8002eda:	2309      	movs	r3, #9
 8002edc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(QSPI_D2_GPIO_PORT, &gpio_init_structure);
 8002ede:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ee2:	4619      	mov	r1, r3
 8002ee4:	480f      	ldr	r0, [pc, #60]	; (8002f24 <BSP_QSPI_MspInit+0x17c>)
 8002ee6:	f002 fcc9 	bl	800587c <HAL_GPIO_Init>

  /* QSPI D3 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_D3_PIN;
 8002eea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002eee:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8002ef0:	2309      	movs	r3, #9
 8002ef2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(QSPI_D3_GPIO_PORT, &gpio_init_structure);
 8002ef4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ef8:	4619      	mov	r1, r3
 8002efa:	4809      	ldr	r0, [pc, #36]	; (8002f20 <BSP_QSPI_MspInit+0x178>)
 8002efc:	f002 fcbe 	bl	800587c <HAL_GPIO_Init>

  /*##-3- Configure the NVIC for QSPI #########################################*/
  /* NVIC configuration for QSPI interrupt */
  HAL_NVIC_SetPriority(QUADSPI_IRQn, 0x0F, 0);
 8002f00:	2200      	movs	r2, #0
 8002f02:	210f      	movs	r1, #15
 8002f04:	205c      	movs	r0, #92	; 0x5c
 8002f06:	f000 fed6 	bl	8003cb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 8002f0a:	205c      	movs	r0, #92	; 0x5c
 8002f0c:	f000 feef 	bl	8003cee <HAL_NVIC_EnableIRQ>
}
 8002f10:	bf00      	nop
 8002f12:	3738      	adds	r7, #56	; 0x38
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	40023800 	.word	0x40023800
 8002f1c:	40020400 	.word	0x40020400
 8002f20:	40020c00 	.word	0x40020c00
 8002f24:	40021000 	.word	0x40021000

08002f28 <QSPI_ResetMemory>:
  * @brief  This function reset the QSPI memory.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_ResetMemory(QSPI_HandleTypeDef *hqspi)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b090      	sub	sp, #64	; 0x40
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002f30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f34:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = RESET_ENABLE_CMD;
 8002f36:	2366      	movs	r3, #102	; 0x66
 8002f38:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 8002f42:	2300      	movs	r3, #0
 8002f44:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 8002f46:	2300      	movs	r3, #0
 8002f48:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002f52:	2300      	movs	r3, #0
 8002f54:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002f56:	f107 0308 	add.w	r3, r7, #8
 8002f5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f5e:	4619      	mov	r1, r3
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	f004 f8bd 	bl	80070e0 <HAL_QSPI_Command>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d001      	beq.n	8002f70 <QSPI_ResetMemory+0x48>
  {
    return QSPI_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e019      	b.n	8002fa4 <QSPI_ResetMemory+0x7c>
  }

  /* Send the reset memory command */
  s_command.Instruction = RESET_MEMORY_CMD;
 8002f70:	2399      	movs	r3, #153	; 0x99
 8002f72:	60bb      	str	r3, [r7, #8]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002f74:	f107 0308 	add.w	r3, r7, #8
 8002f78:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f7c:	4619      	mov	r1, r3
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f004 f8ae 	bl	80070e0 <HAL_QSPI_Command>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d001      	beq.n	8002f8e <QSPI_ResetMemory+0x66>
  {
    return QSPI_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e00a      	b.n	8002fa4 <QSPI_ResetMemory+0x7c>
  }

  /* Configure automatic polling mode to wait the memory is ready */  
  if (QSPI_AutoPollingMemReady(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8002f8e:	f241 3188 	movw	r1, #5000	; 0x1388
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f000 f8c7 	bl	8003126 <QSPI_AutoPollingMemReady>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d001      	beq.n	8002fa2 <QSPI_ResetMemory+0x7a>
  {
    return QSPI_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e000      	b.n	8002fa4 <QSPI_ResetMemory+0x7c>
  }

  return QSPI_OK;
 8002fa2:	2300      	movs	r3, #0
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3740      	adds	r7, #64	; 0x40
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}

08002fac <QSPI_DummyCyclesCfg>:
  * @brief  This function configure the dummy cycles on memory side.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_DummyCyclesCfg(QSPI_HandleTypeDef *hqspi)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b094      	sub	sp, #80	; 0x50
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;
  uint8_t reg;

  /* Initialize the read volatile configuration register command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002fb4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002fb8:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction       = READ_VOL_CFG_REG_CMD;
 8002fba:	2385      	movs	r3, #133	; 0x85
 8002fbc:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode          = QSPI_DATA_1_LINE;
 8002fc6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002fca:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles       = 0;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData            = 1;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002fe0:	f107 0310 	add.w	r3, r7, #16
 8002fe4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fe8:	4619      	mov	r1, r3
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f004 f878 	bl	80070e0 <HAL_QSPI_Command>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d001      	beq.n	8002ffa <QSPI_DummyCyclesCfg+0x4e>
  {
    return QSPI_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e048      	b.n	800308c <QSPI_DummyCyclesCfg+0xe0>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002ffa:	f107 030f 	add.w	r3, r7, #15
 8002ffe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003002:	4619      	mov	r1, r3
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	f004 f960 	bl	80072ca <HAL_QSPI_Receive>
 800300a:	4603      	mov	r3, r0
 800300c:	2b00      	cmp	r3, #0
 800300e:	d001      	beq.n	8003014 <QSPI_DummyCyclesCfg+0x68>
  {
    return QSPI_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e03b      	b.n	800308c <QSPI_DummyCyclesCfg+0xe0>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(hqspi) != QSPI_OK)
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f000 f83d 	bl	8003094 <QSPI_WriteEnable>
 800301a:	4603      	mov	r3, r0
 800301c:	2b00      	cmp	r3, #0
 800301e:	d001      	beq.n	8003024 <QSPI_DummyCyclesCfg+0x78>
  {
    return QSPI_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e033      	b.n	800308c <QSPI_DummyCyclesCfg+0xe0>
  }

  /* Update volatile configuration register (with new dummy cycles) */  
  s_command.Instruction = WRITE_VOL_CFG_REG_CMD;
 8003024:	2381      	movs	r3, #129	; 0x81
 8003026:	613b      	str	r3, [r7, #16]
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 8003028:	7bfb      	ldrb	r3, [r7, #15]
 800302a:	b25b      	sxtb	r3, r3
 800302c:	f003 030f 	and.w	r3, r3, #15
 8003030:	b25a      	sxtb	r2, r3
 8003032:	23f0      	movs	r3, #240	; 0xf0
 8003034:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003036:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003038:	fa93 f3a3 	rbit	r3, r3
 800303c:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800303e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003040:	fab3 f383 	clz	r3, r3
 8003044:	b2db      	uxtb	r3, r3
 8003046:	4619      	mov	r1, r3
 8003048:	230a      	movs	r3, #10
 800304a:	408b      	lsls	r3, r1
 800304c:	b25b      	sxtb	r3, r3
 800304e:	4313      	orrs	r3, r2
 8003050:	b25b      	sxtb	r3, r3
 8003052:	b2db      	uxtb	r3, r3
 8003054:	73fb      	strb	r3, [r7, #15]
      
  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003056:	f107 0310 	add.w	r3, r7, #16
 800305a:	f241 3288 	movw	r2, #5000	; 0x1388
 800305e:	4619      	mov	r1, r3
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	f004 f83d 	bl	80070e0 <HAL_QSPI_Command>
 8003066:	4603      	mov	r3, r0
 8003068:	2b00      	cmp	r3, #0
 800306a:	d001      	beq.n	8003070 <QSPI_DummyCyclesCfg+0xc4>
  {
    return QSPI_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e00d      	b.n	800308c <QSPI_DummyCyclesCfg+0xe0>
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003070:	f107 030f 	add.w	r3, r7, #15
 8003074:	f241 3288 	movw	r2, #5000	; 0x1388
 8003078:	4619      	mov	r1, r3
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f004 f88e 	bl	800719c <HAL_QSPI_Transmit>
 8003080:	4603      	mov	r3, r0
 8003082:	2b00      	cmp	r3, #0
 8003084:	d001      	beq.n	800308a <QSPI_DummyCyclesCfg+0xde>
  {
    return QSPI_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e000      	b.n	800308c <QSPI_DummyCyclesCfg+0xe0>
  }
  
  return QSPI_OK;
 800308a:	2300      	movs	r3, #0
}
 800308c:	4618      	mov	r0, r3
 800308e:	3750      	adds	r7, #80	; 0x50
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}

08003094 <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b096      	sub	sp, #88	; 0x58
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800309c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030a0:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = WRITE_ENABLE_CMD;
 80030a2:	2306      	movs	r3, #6
 80030a4:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80030a6:	2300      	movs	r3, #0
 80030a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80030aa:	2300      	movs	r3, #0
 80030ac:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_NONE;
 80030ae:	2300      	movs	r3, #0
 80030b0:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 0;
 80030b2:	2300      	movs	r3, #0
 80030b4:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80030b6:	2300      	movs	r3, #0
 80030b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80030ba:	2300      	movs	r3, #0
 80030bc:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80030be:	2300      	movs	r3, #0
 80030c0:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80030c2:	f107 0320 	add.w	r3, r7, #32
 80030c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80030ca:	4619      	mov	r1, r3
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	f004 f807 	bl	80070e0 <HAL_QSPI_Command>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d001      	beq.n	80030dc <QSPI_WriteEnable+0x48>
  {
    return QSPI_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e020      	b.n	800311e <QSPI_WriteEnable+0x8a>
  }
  
  /* Configure automatic polling mode to wait for write enabling */  
  s_config.Match           = N25Q128A_SR_WREN;
 80030dc:	2302      	movs	r3, #2
 80030de:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = N25Q128A_SR_WREN;
 80030e0:	2302      	movs	r3, #2
 80030e2:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 80030e4:	2300      	movs	r3, #0
 80030e6:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 1;
 80030e8:	2301      	movs	r3, #1
 80030ea:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 80030ec:	2310      	movs	r3, #16
 80030ee:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 80030f0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80030f4:	61fb      	str	r3, [r7, #28]

  s_command.Instruction    = READ_STATUS_REG_CMD;
 80030f6:	2305      	movs	r3, #5
 80030f8:	623b      	str	r3, [r7, #32]
  s_command.DataMode       = QSPI_DATA_1_LINE;
 80030fa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80030fe:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003100:	f107 0208 	add.w	r2, r7, #8
 8003104:	f107 0120 	add.w	r1, r7, #32
 8003108:	f241 3388 	movw	r3, #5000	; 0x1388
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	f004 f97e 	bl	800740e <HAL_QSPI_AutoPolling>
 8003112:	4603      	mov	r3, r0
 8003114:	2b00      	cmp	r3, #0
 8003116:	d001      	beq.n	800311c <QSPI_WriteEnable+0x88>
  {
    return QSPI_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e000      	b.n	800311e <QSPI_WriteEnable+0x8a>
  }

  return QSPI_OK;
 800311c:	2300      	movs	r3, #0
}
 800311e:	4618      	mov	r0, r3
 8003120:	3758      	adds	r7, #88	; 0x58
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}

08003126 <QSPI_AutoPollingMemReady>:
  * @param  hqspi: QSPI handle
  * @param  Timeout
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8003126:	b580      	push	{r7, lr}
 8003128:	b096      	sub	sp, #88	; 0x58
 800312a:	af00      	add	r7, sp, #0
 800312c:	6078      	str	r0, [r7, #4]
 800312e:	6039      	str	r1, [r7, #0]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */  
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003130:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003134:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = READ_STATUS_REG_CMD;
 8003136:	2305      	movs	r3, #5
 8003138:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800313a:	2300      	movs	r3, #0
 800313c:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800313e:	2300      	movs	r3, #0
 8003140:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_1_LINE;
 8003142:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003146:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 0;
 8003148:	2300      	movs	r3, #0
 800314a:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800314c:	2300      	movs	r3, #0
 800314e:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003150:	2300      	movs	r3, #0
 8003152:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003154:	2300      	movs	r3, #0
 8003156:	657b      	str	r3, [r7, #84]	; 0x54

  s_config.Match           = 0;
 8003158:	2300      	movs	r3, #0
 800315a:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = N25Q128A_SR_WIP;
 800315c:	2301      	movs	r3, #1
 800315e:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8003160:	2300      	movs	r3, #0
 8003162:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 1;
 8003164:	2301      	movs	r3, #1
 8003166:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 8003168:	2310      	movs	r3, #16
 800316a:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 800316c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003170:	61fb      	str	r3, [r7, #28]

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 8003172:	f107 0208 	add.w	r2, r7, #8
 8003176:	f107 0120 	add.w	r1, r7, #32
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	f004 f946 	bl	800740e <HAL_QSPI_AutoPolling>
 8003182:	4603      	mov	r3, r0
 8003184:	2b00      	cmp	r3, #0
 8003186:	d001      	beq.n	800318c <QSPI_AutoPollingMemReady+0x66>
  {
    return QSPI_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e000      	b.n	800318e <QSPI_AutoPollingMemReady+0x68>
  }

  return QSPI_OK;
 800318c:	2300      	movs	r3, #0
}
 800318e:	4618      	mov	r0, r3
 8003190:	3758      	adds	r7, #88	; 0x58
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
	...

08003198 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8003198:	b580      	push	{r7, lr}
 800319a:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 800319c:	4b29      	ldr	r3, [pc, #164]	; (8003244 <BSP_SDRAM_Init+0xac>)
 800319e:	4a2a      	ldr	r2, [pc, #168]	; (8003248 <BSP_SDRAM_Init+0xb0>)
 80031a0:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 80031a2:	4b2a      	ldr	r3, [pc, #168]	; (800324c <BSP_SDRAM_Init+0xb4>)
 80031a4:	2202      	movs	r2, #2
 80031a6:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 80031a8:	4b28      	ldr	r3, [pc, #160]	; (800324c <BSP_SDRAM_Init+0xb4>)
 80031aa:	2207      	movs	r2, #7
 80031ac:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 80031ae:	4b27      	ldr	r3, [pc, #156]	; (800324c <BSP_SDRAM_Init+0xb4>)
 80031b0:	2204      	movs	r2, #4
 80031b2:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 80031b4:	4b25      	ldr	r3, [pc, #148]	; (800324c <BSP_SDRAM_Init+0xb4>)
 80031b6:	2207      	movs	r2, #7
 80031b8:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 80031ba:	4b24      	ldr	r3, [pc, #144]	; (800324c <BSP_SDRAM_Init+0xb4>)
 80031bc:	2202      	movs	r2, #2
 80031be:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 80031c0:	4b22      	ldr	r3, [pc, #136]	; (800324c <BSP_SDRAM_Init+0xb4>)
 80031c2:	2202      	movs	r2, #2
 80031c4:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 80031c6:	4b21      	ldr	r3, [pc, #132]	; (800324c <BSP_SDRAM_Init+0xb4>)
 80031c8:	2202      	movs	r2, #2
 80031ca:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 80031cc:	4b1d      	ldr	r3, [pc, #116]	; (8003244 <BSP_SDRAM_Init+0xac>)
 80031ce:	2200      	movs	r2, #0
 80031d0:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80031d2:	4b1c      	ldr	r3, [pc, #112]	; (8003244 <BSP_SDRAM_Init+0xac>)
 80031d4:	2200      	movs	r2, #0
 80031d6:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80031d8:	4b1a      	ldr	r3, [pc, #104]	; (8003244 <BSP_SDRAM_Init+0xac>)
 80031da:	2204      	movs	r2, #4
 80031dc:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 80031de:	4b19      	ldr	r3, [pc, #100]	; (8003244 <BSP_SDRAM_Init+0xac>)
 80031e0:	2210      	movs	r2, #16
 80031e2:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80031e4:	4b17      	ldr	r3, [pc, #92]	; (8003244 <BSP_SDRAM_Init+0xac>)
 80031e6:	2240      	movs	r2, #64	; 0x40
 80031e8:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 80031ea:	4b16      	ldr	r3, [pc, #88]	; (8003244 <BSP_SDRAM_Init+0xac>)
 80031ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80031f0:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80031f2:	4b14      	ldr	r3, [pc, #80]	; (8003244 <BSP_SDRAM_Init+0xac>)
 80031f4:	2200      	movs	r2, #0
 80031f6:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 80031f8:	4b12      	ldr	r3, [pc, #72]	; (8003244 <BSP_SDRAM_Init+0xac>)
 80031fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80031fe:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8003200:	4b10      	ldr	r3, [pc, #64]	; (8003244 <BSP_SDRAM_Init+0xac>)
 8003202:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003206:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8003208:	4b0e      	ldr	r3, [pc, #56]	; (8003244 <BSP_SDRAM_Init+0xac>)
 800320a:	2200      	movs	r2, #0
 800320c:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 800320e:	2100      	movs	r1, #0
 8003210:	480c      	ldr	r0, [pc, #48]	; (8003244 <BSP_SDRAM_Init+0xac>)
 8003212:	f000 f87f 	bl	8003314 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8003216:	490d      	ldr	r1, [pc, #52]	; (800324c <BSP_SDRAM_Init+0xb4>)
 8003218:	480a      	ldr	r0, [pc, #40]	; (8003244 <BSP_SDRAM_Init+0xac>)
 800321a:	f005 fc8f 	bl	8008b3c <HAL_SDRAM_Init>
 800321e:	4603      	mov	r3, r0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d003      	beq.n	800322c <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8003224:	4b0a      	ldr	r3, [pc, #40]	; (8003250 <BSP_SDRAM_Init+0xb8>)
 8003226:	2201      	movs	r2, #1
 8003228:	701a      	strb	r2, [r3, #0]
 800322a:	e002      	b.n	8003232 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 800322c:	4b08      	ldr	r3, [pc, #32]	; (8003250 <BSP_SDRAM_Init+0xb8>)
 800322e:	2200      	movs	r2, #0
 8003230:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8003232:	f240 6003 	movw	r0, #1539	; 0x603
 8003236:	f000 f80d 	bl	8003254 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 800323a:	4b05      	ldr	r3, [pc, #20]	; (8003250 <BSP_SDRAM_Init+0xb8>)
 800323c:	781b      	ldrb	r3, [r3, #0]
}
 800323e:	4618      	mov	r0, r3
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	20000a58 	.word	0x20000a58
 8003248:	a0000140 	.word	0xa0000140
 800324c:	20000a8c 	.word	0x20000a8c
 8003250:	20000040 	.word	0x20000040

08003254 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b084      	sub	sp, #16
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 800325c:	2300      	movs	r3, #0
 800325e:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8003260:	4b2a      	ldr	r3, [pc, #168]	; (800330c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003262:	2201      	movs	r2, #1
 8003264:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003266:	4b29      	ldr	r3, [pc, #164]	; (800330c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003268:	2210      	movs	r2, #16
 800326a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 800326c:	4b27      	ldr	r3, [pc, #156]	; (800330c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800326e:	2201      	movs	r2, #1
 8003270:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003272:	4b26      	ldr	r3, [pc, #152]	; (800330c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003274:	2200      	movs	r2, #0
 8003276:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003278:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800327c:	4923      	ldr	r1, [pc, #140]	; (800330c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800327e:	4824      	ldr	r0, [pc, #144]	; (8003310 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003280:	f005 fc90 	bl	8008ba4 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8003284:	2001      	movs	r0, #1
 8003286:	f000 fc17 	bl	8003ab8 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 800328a:	4b20      	ldr	r3, [pc, #128]	; (800330c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800328c:	2202      	movs	r2, #2
 800328e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003290:	4b1e      	ldr	r3, [pc, #120]	; (800330c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003292:	2210      	movs	r2, #16
 8003294:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003296:	4b1d      	ldr	r3, [pc, #116]	; (800330c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003298:	2201      	movs	r2, #1
 800329a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800329c:	4b1b      	ldr	r3, [pc, #108]	; (800330c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800329e:	2200      	movs	r2, #0
 80032a0:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 80032a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80032a6:	4919      	ldr	r1, [pc, #100]	; (800330c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80032a8:	4819      	ldr	r0, [pc, #100]	; (8003310 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80032aa:	f005 fc7b 	bl	8008ba4 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80032ae:	4b17      	ldr	r3, [pc, #92]	; (800330c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80032b0:	2203      	movs	r2, #3
 80032b2:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80032b4:	4b15      	ldr	r3, [pc, #84]	; (800330c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80032b6:	2210      	movs	r2, #16
 80032b8:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 80032ba:	4b14      	ldr	r3, [pc, #80]	; (800330c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80032bc:	2208      	movs	r2, #8
 80032be:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80032c0:	4b12      	ldr	r3, [pc, #72]	; (800330c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80032c2:	2200      	movs	r2, #0
 80032c4:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80032c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80032ca:	4910      	ldr	r1, [pc, #64]	; (800330c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80032cc:	4810      	ldr	r0, [pc, #64]	; (8003310 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80032ce:	f005 fc69 	bl	8008ba4 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 80032d2:	f44f 7308 	mov.w	r3, #544	; 0x220
 80032d6:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 80032d8:	4b0c      	ldr	r3, [pc, #48]	; (800330c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80032da:	2204      	movs	r2, #4
 80032dc:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80032de:	4b0b      	ldr	r3, [pc, #44]	; (800330c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80032e0:	2210      	movs	r2, #16
 80032e2:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80032e4:	4b09      	ldr	r3, [pc, #36]	; (800330c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80032e6:	2201      	movs	r2, #1
 80032e8:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	4a07      	ldr	r2, [pc, #28]	; (800330c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80032ee:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80032f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80032f4:	4905      	ldr	r1, [pc, #20]	; (800330c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80032f6:	4806      	ldr	r0, [pc, #24]	; (8003310 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80032f8:	f005 fc54 	bl	8008ba4 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 80032fc:	6879      	ldr	r1, [r7, #4]
 80032fe:	4804      	ldr	r0, [pc, #16]	; (8003310 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003300:	f005 fc85 	bl	8008c0e <HAL_SDRAM_ProgramRefreshRate>
}
 8003304:	bf00      	nop
 8003306:	3710      	adds	r7, #16
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}
 800330c:	20000aa8 	.word	0x20000aa8
 8003310:	20000a58 	.word	0x20000a58

08003314 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8003314:	b580      	push	{r7, lr}
 8003316:	b090      	sub	sp, #64	; 0x40
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 800331e:	4b70      	ldr	r3, [pc, #448]	; (80034e0 <BSP_SDRAM_MspInit+0x1cc>)
 8003320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003322:	4a6f      	ldr	r2, [pc, #444]	; (80034e0 <BSP_SDRAM_MspInit+0x1cc>)
 8003324:	f043 0301 	orr.w	r3, r3, #1
 8003328:	6393      	str	r3, [r2, #56]	; 0x38
 800332a:	4b6d      	ldr	r3, [pc, #436]	; (80034e0 <BSP_SDRAM_MspInit+0x1cc>)
 800332c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800332e:	f003 0301 	and.w	r3, r3, #1
 8003332:	62bb      	str	r3, [r7, #40]	; 0x28
 8003334:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8003336:	4b6a      	ldr	r3, [pc, #424]	; (80034e0 <BSP_SDRAM_MspInit+0x1cc>)
 8003338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800333a:	4a69      	ldr	r2, [pc, #420]	; (80034e0 <BSP_SDRAM_MspInit+0x1cc>)
 800333c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003340:	6313      	str	r3, [r2, #48]	; 0x30
 8003342:	4b67      	ldr	r3, [pc, #412]	; (80034e0 <BSP_SDRAM_MspInit+0x1cc>)
 8003344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003346:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800334a:	627b      	str	r3, [r7, #36]	; 0x24
 800334c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800334e:	4b64      	ldr	r3, [pc, #400]	; (80034e0 <BSP_SDRAM_MspInit+0x1cc>)
 8003350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003352:	4a63      	ldr	r2, [pc, #396]	; (80034e0 <BSP_SDRAM_MspInit+0x1cc>)
 8003354:	f043 0304 	orr.w	r3, r3, #4
 8003358:	6313      	str	r3, [r2, #48]	; 0x30
 800335a:	4b61      	ldr	r3, [pc, #388]	; (80034e0 <BSP_SDRAM_MspInit+0x1cc>)
 800335c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335e:	f003 0304 	and.w	r3, r3, #4
 8003362:	623b      	str	r3, [r7, #32]
 8003364:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003366:	4b5e      	ldr	r3, [pc, #376]	; (80034e0 <BSP_SDRAM_MspInit+0x1cc>)
 8003368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800336a:	4a5d      	ldr	r2, [pc, #372]	; (80034e0 <BSP_SDRAM_MspInit+0x1cc>)
 800336c:	f043 0308 	orr.w	r3, r3, #8
 8003370:	6313      	str	r3, [r2, #48]	; 0x30
 8003372:	4b5b      	ldr	r3, [pc, #364]	; (80034e0 <BSP_SDRAM_MspInit+0x1cc>)
 8003374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003376:	f003 0308 	and.w	r3, r3, #8
 800337a:	61fb      	str	r3, [r7, #28]
 800337c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800337e:	4b58      	ldr	r3, [pc, #352]	; (80034e0 <BSP_SDRAM_MspInit+0x1cc>)
 8003380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003382:	4a57      	ldr	r2, [pc, #348]	; (80034e0 <BSP_SDRAM_MspInit+0x1cc>)
 8003384:	f043 0310 	orr.w	r3, r3, #16
 8003388:	6313      	str	r3, [r2, #48]	; 0x30
 800338a:	4b55      	ldr	r3, [pc, #340]	; (80034e0 <BSP_SDRAM_MspInit+0x1cc>)
 800338c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338e:	f003 0310 	and.w	r3, r3, #16
 8003392:	61bb      	str	r3, [r7, #24]
 8003394:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003396:	4b52      	ldr	r3, [pc, #328]	; (80034e0 <BSP_SDRAM_MspInit+0x1cc>)
 8003398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800339a:	4a51      	ldr	r2, [pc, #324]	; (80034e0 <BSP_SDRAM_MspInit+0x1cc>)
 800339c:	f043 0320 	orr.w	r3, r3, #32
 80033a0:	6313      	str	r3, [r2, #48]	; 0x30
 80033a2:	4b4f      	ldr	r3, [pc, #316]	; (80034e0 <BSP_SDRAM_MspInit+0x1cc>)
 80033a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a6:	f003 0320 	and.w	r3, r3, #32
 80033aa:	617b      	str	r3, [r7, #20]
 80033ac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80033ae:	4b4c      	ldr	r3, [pc, #304]	; (80034e0 <BSP_SDRAM_MspInit+0x1cc>)
 80033b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b2:	4a4b      	ldr	r2, [pc, #300]	; (80034e0 <BSP_SDRAM_MspInit+0x1cc>)
 80033b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033b8:	6313      	str	r3, [r2, #48]	; 0x30
 80033ba:	4b49      	ldr	r3, [pc, #292]	; (80034e0 <BSP_SDRAM_MspInit+0x1cc>)
 80033bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033c2:	613b      	str	r3, [r7, #16]
 80033c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80033c6:	4b46      	ldr	r3, [pc, #280]	; (80034e0 <BSP_SDRAM_MspInit+0x1cc>)
 80033c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ca:	4a45      	ldr	r2, [pc, #276]	; (80034e0 <BSP_SDRAM_MspInit+0x1cc>)
 80033cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033d0:	6313      	str	r3, [r2, #48]	; 0x30
 80033d2:	4b43      	ldr	r3, [pc, #268]	; (80034e0 <BSP_SDRAM_MspInit+0x1cc>)
 80033d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033da:	60fb      	str	r3, [r7, #12]
 80033dc:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80033de:	2302      	movs	r3, #2
 80033e0:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80033e2:	2301      	movs	r3, #1
 80033e4:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 80033e6:	2302      	movs	r3, #2
 80033e8:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 80033ea:	230c      	movs	r3, #12
 80033ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 80033ee:	2308      	movs	r3, #8
 80033f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 80033f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80033f6:	4619      	mov	r1, r3
 80033f8:	483a      	ldr	r0, [pc, #232]	; (80034e4 <BSP_SDRAM_MspInit+0x1d0>)
 80033fa:	f002 fa3f 	bl	800587c <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 80033fe:	f24c 7303 	movw	r3, #50947	; 0xc703
 8003402:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8003404:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003408:	4619      	mov	r1, r3
 800340a:	4837      	ldr	r0, [pc, #220]	; (80034e8 <BSP_SDRAM_MspInit+0x1d4>)
 800340c:	f002 fa36 	bl	800587c <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8003410:	f64f 7383 	movw	r3, #65411	; 0xff83
 8003414:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8003416:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800341a:	4619      	mov	r1, r3
 800341c:	4833      	ldr	r0, [pc, #204]	; (80034ec <BSP_SDRAM_MspInit+0x1d8>)
 800341e:	f002 fa2d 	bl	800587c <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8003422:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8003426:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8003428:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800342c:	4619      	mov	r1, r3
 800342e:	4830      	ldr	r0, [pc, #192]	; (80034f0 <BSP_SDRAM_MspInit+0x1dc>)
 8003430:	f002 fa24 	bl	800587c <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8003434:	f248 1333 	movw	r3, #33075	; 0x8133
 8003438:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800343a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800343e:	4619      	mov	r1, r3
 8003440:	482c      	ldr	r0, [pc, #176]	; (80034f4 <BSP_SDRAM_MspInit+0x1e0>)
 8003442:	f002 fa1b 	bl	800587c <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8003446:	2328      	movs	r3, #40	; 0x28
 8003448:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 800344a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800344e:	4619      	mov	r1, r3
 8003450:	4829      	ldr	r0, [pc, #164]	; (80034f8 <BSP_SDRAM_MspInit+0x1e4>)
 8003452:	f002 fa13 	bl	800587c <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8003456:	4b29      	ldr	r3, [pc, #164]	; (80034fc <BSP_SDRAM_MspInit+0x1e8>)
 8003458:	2200      	movs	r2, #0
 800345a:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 800345c:	4b27      	ldr	r3, [pc, #156]	; (80034fc <BSP_SDRAM_MspInit+0x1e8>)
 800345e:	2280      	movs	r2, #128	; 0x80
 8003460:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8003462:	4b26      	ldr	r3, [pc, #152]	; (80034fc <BSP_SDRAM_MspInit+0x1e8>)
 8003464:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003468:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 800346a:	4b24      	ldr	r3, [pc, #144]	; (80034fc <BSP_SDRAM_MspInit+0x1e8>)
 800346c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003470:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003472:	4b22      	ldr	r3, [pc, #136]	; (80034fc <BSP_SDRAM_MspInit+0x1e8>)
 8003474:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003478:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800347a:	4b20      	ldr	r3, [pc, #128]	; (80034fc <BSP_SDRAM_MspInit+0x1e8>)
 800347c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003480:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8003482:	4b1e      	ldr	r3, [pc, #120]	; (80034fc <BSP_SDRAM_MspInit+0x1e8>)
 8003484:	2200      	movs	r2, #0
 8003486:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8003488:	4b1c      	ldr	r3, [pc, #112]	; (80034fc <BSP_SDRAM_MspInit+0x1e8>)
 800348a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800348e:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8003490:	4b1a      	ldr	r3, [pc, #104]	; (80034fc <BSP_SDRAM_MspInit+0x1e8>)
 8003492:	2200      	movs	r2, #0
 8003494:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8003496:	4b19      	ldr	r3, [pc, #100]	; (80034fc <BSP_SDRAM_MspInit+0x1e8>)
 8003498:	2203      	movs	r2, #3
 800349a:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 800349c:	4b17      	ldr	r3, [pc, #92]	; (80034fc <BSP_SDRAM_MspInit+0x1e8>)
 800349e:	2200      	movs	r2, #0
 80034a0:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80034a2:	4b16      	ldr	r3, [pc, #88]	; (80034fc <BSP_SDRAM_MspInit+0x1e8>)
 80034a4:	2200      	movs	r2, #0
 80034a6:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 80034a8:	4b14      	ldr	r3, [pc, #80]	; (80034fc <BSP_SDRAM_MspInit+0x1e8>)
 80034aa:	4a15      	ldr	r2, [pc, #84]	; (8003500 <BSP_SDRAM_MspInit+0x1ec>)
 80034ac:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	4a12      	ldr	r2, [pc, #72]	; (80034fc <BSP_SDRAM_MspInit+0x1e8>)
 80034b2:	631a      	str	r2, [r3, #48]	; 0x30
 80034b4:	4a11      	ldr	r2, [pc, #68]	; (80034fc <BSP_SDRAM_MspInit+0x1e8>)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 80034ba:	4810      	ldr	r0, [pc, #64]	; (80034fc <BSP_SDRAM_MspInit+0x1e8>)
 80034bc:	f000 fce0 	bl	8003e80 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 80034c0:	480e      	ldr	r0, [pc, #56]	; (80034fc <BSP_SDRAM_MspInit+0x1e8>)
 80034c2:	f000 fc2f 	bl	8003d24 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 80034c6:	2200      	movs	r2, #0
 80034c8:	210f      	movs	r1, #15
 80034ca:	2038      	movs	r0, #56	; 0x38
 80034cc:	f000 fbf3 	bl	8003cb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 80034d0:	2038      	movs	r0, #56	; 0x38
 80034d2:	f000 fc0c 	bl	8003cee <HAL_NVIC_EnableIRQ>
}
 80034d6:	bf00      	nop
 80034d8:	3740      	adds	r7, #64	; 0x40
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop
 80034e0:	40023800 	.word	0x40023800
 80034e4:	40020800 	.word	0x40020800
 80034e8:	40020c00 	.word	0x40020c00
 80034ec:	40021000 	.word	0x40021000
 80034f0:	40021400 	.word	0x40021400
 80034f4:	40021800 	.word	0x40021800
 80034f8:	40021c00 	.word	0x40021c00
 80034fc:	20000ab8 	.word	0x20000ab8
 8003500:	40026410 	.word	0x40026410

08003504 <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b084      	sub	sp, #16
 8003508:	af00      	add	r7, sp, #0
 800350a:	4603      	mov	r3, r0
 800350c:	460a      	mov	r2, r1
 800350e:	80fb      	strh	r3, [r7, #6]
 8003510:	4613      	mov	r3, r2
 8003512:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 8003514:	2300      	movs	r3, #0
 8003516:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 8003518:	4a14      	ldr	r2, [pc, #80]	; (800356c <BSP_TS_Init+0x68>)
 800351a:	88fb      	ldrh	r3, [r7, #6]
 800351c:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 800351e:	4a14      	ldr	r2, [pc, #80]	; (8003570 <BSP_TS_Init+0x6c>)
 8003520:	88bb      	ldrh	r3, [r7, #4]
 8003522:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 8003524:	4b13      	ldr	r3, [pc, #76]	; (8003574 <BSP_TS_Init+0x70>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	2070      	movs	r0, #112	; 0x70
 800352a:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 800352c:	4b11      	ldr	r3, [pc, #68]	; (8003574 <BSP_TS_Init+0x70>)
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	2070      	movs	r0, #112	; 0x70
 8003532:	4798      	blx	r3
 8003534:	4603      	mov	r3, r0
 8003536:	2b51      	cmp	r3, #81	; 0x51
 8003538:	d111      	bne.n	800355e <BSP_TS_Init+0x5a>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 800353a:	4b0f      	ldr	r3, [pc, #60]	; (8003578 <BSP_TS_Init+0x74>)
 800353c:	4a0d      	ldr	r2, [pc, #52]	; (8003574 <BSP_TS_Init+0x70>)
 800353e:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 8003540:	4b0e      	ldr	r3, [pc, #56]	; (800357c <BSP_TS_Init+0x78>)
 8003542:	2270      	movs	r2, #112	; 0x70
 8003544:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 8003546:	4b0e      	ldr	r3, [pc, #56]	; (8003580 <BSP_TS_Init+0x7c>)
 8003548:	2208      	movs	r2, #8
 800354a:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 800354c:	4b0a      	ldr	r3, [pc, #40]	; (8003578 <BSP_TS_Init+0x74>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	68db      	ldr	r3, [r3, #12]
 8003552:	4a0a      	ldr	r2, [pc, #40]	; (800357c <BSP_TS_Init+0x78>)
 8003554:	7812      	ldrb	r2, [r2, #0]
 8003556:	b292      	uxth	r2, r2
 8003558:	4610      	mov	r0, r2
 800355a:	4798      	blx	r3
 800355c:	e001      	b.n	8003562 <BSP_TS_Init+0x5e>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 800355e:	2303      	movs	r3, #3
 8003560:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8003562:	7bfb      	ldrb	r3, [r7, #15]
}
 8003564:	4618      	mov	r0, r3
 8003566:	3710      	adds	r7, #16
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}
 800356c:	20000b1c 	.word	0x20000b1c
 8003570:	20000b1e 	.word	0x20000b1e
 8003574:	20000008 	.word	0x20000008
 8003578:	20000b18 	.word	0x20000b18
 800357c:	20000b21 	.word	0x20000b21
 8003580:	20000b20 	.word	0x20000b20

08003584 <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 8003584:	b590      	push	{r4, r7, lr}
 8003586:	b097      	sub	sp, #92	; 0x5c
 8003588:	af02      	add	r7, sp, #8
 800358a:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 800358c:	2300      	movs	r3, #0
 800358e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint16_t brute_y[TS_MAX_NB_TOUCH];
  uint16_t x_diff;
  uint16_t y_diff;
  uint32_t index;
#if (TS_MULTI_TOUCH_SUPPORTED == 1)
  uint32_t weight = 0;
 8003592:	2300      	movs	r3, #0
 8003594:	613b      	str	r3, [r7, #16]
  uint32_t area = 0;
 8003596:	2300      	movs	r3, #0
 8003598:	60fb      	str	r3, [r7, #12]
  uint32_t event = 0;
 800359a:	2300      	movs	r3, #0
 800359c:	60bb      	str	r3, [r7, #8]
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 800359e:	4bb4      	ldr	r3, [pc, #720]	; (8003870 <BSP_TS_GetState+0x2ec>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	691b      	ldr	r3, [r3, #16]
 80035a4:	4ab3      	ldr	r2, [pc, #716]	; (8003874 <BSP_TS_GetState+0x2f0>)
 80035a6:	7812      	ldrb	r2, [r2, #0]
 80035a8:	b292      	uxth	r2, r2
 80035aa:	4610      	mov	r0, r2
 80035ac:	4798      	blx	r3
 80035ae:	4603      	mov	r3, r0
 80035b0:	461a      	mov	r2, r3
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	701a      	strb	r2, [r3, #0]
  
  if(TS_State->touchDetected)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	781b      	ldrb	r3, [r3, #0]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	f000 8196 	beq.w	80038ec <BSP_TS_GetState+0x368>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 80035c0:	2300      	movs	r3, #0
 80035c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80035c4:	e185      	b.n	80038d2 <BSP_TS_GetState+0x34e>
    {
      /* Get each touch coordinates */
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 80035c6:	4baa      	ldr	r3, [pc, #680]	; (8003870 <BSP_TS_GetState+0x2ec>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	695b      	ldr	r3, [r3, #20]
 80035cc:	4aa9      	ldr	r2, [pc, #676]	; (8003874 <BSP_TS_GetState+0x2f0>)
 80035ce:	7812      	ldrb	r2, [r2, #0]
 80035d0:	b290      	uxth	r0, r2
 80035d2:	f107 0120 	add.w	r1, r7, #32
 80035d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80035d8:	0052      	lsls	r2, r2, #1
 80035da:	188c      	adds	r4, r1, r2
 80035dc:	f107 0114 	add.w	r1, r7, #20
 80035e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80035e2:	0052      	lsls	r2, r2, #1
 80035e4:	440a      	add	r2, r1
 80035e6:	4621      	mov	r1, r4
 80035e8:	4798      	blx	r3

      if(tsOrientation == TS_SWAP_NONE)
 80035ea:	4ba3      	ldr	r3, [pc, #652]	; (8003878 <BSP_TS_GetState+0x2f4>)
 80035ec:	781b      	ldrb	r3, [r3, #0]
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d117      	bne.n	8003622 <BSP_TS_GetState+0x9e>
      {
        x[index] = brute_x[index];
 80035f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035f4:	005b      	lsls	r3, r3, #1
 80035f6:	3350      	adds	r3, #80	; 0x50
 80035f8:	443b      	add	r3, r7
 80035fa:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 80035fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003600:	005b      	lsls	r3, r3, #1
 8003602:	3350      	adds	r3, #80	; 0x50
 8003604:	443b      	add	r3, r7
 8003606:	f823 2c18 	strh.w	r2, [r3, #-24]
        y[index] = brute_y[index];
 800360a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800360c:	005b      	lsls	r3, r3, #1
 800360e:	3350      	adds	r3, #80	; 0x50
 8003610:	443b      	add	r3, r7
 8003612:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8003616:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003618:	005b      	lsls	r3, r3, #1
 800361a:	3350      	adds	r3, #80	; 0x50
 800361c:	443b      	add	r3, r7
 800361e:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_X)
 8003622:	4b95      	ldr	r3, [pc, #596]	; (8003878 <BSP_TS_GetState+0x2f4>)
 8003624:	781b      	ldrb	r3, [r3, #0]
 8003626:	f003 0302 	and.w	r3, r3, #2
 800362a:	2b00      	cmp	r3, #0
 800362c:	d00e      	beq.n	800364c <BSP_TS_GetState+0xc8>
      {
        x[index] = 4096 - brute_x[index];
 800362e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003630:	005b      	lsls	r3, r3, #1
 8003632:	3350      	adds	r3, #80	; 0x50
 8003634:	443b      	add	r3, r7
 8003636:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 800363a:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 800363e:	b29a      	uxth	r2, r3
 8003640:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003642:	005b      	lsls	r3, r3, #1
 8003644:	3350      	adds	r3, #80	; 0x50
 8003646:	443b      	add	r3, r7
 8003648:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      if(tsOrientation & TS_SWAP_Y)
 800364c:	4b8a      	ldr	r3, [pc, #552]	; (8003878 <BSP_TS_GetState+0x2f4>)
 800364e:	781b      	ldrb	r3, [r3, #0]
 8003650:	f003 0304 	and.w	r3, r3, #4
 8003654:	2b00      	cmp	r3, #0
 8003656:	d00e      	beq.n	8003676 <BSP_TS_GetState+0xf2>
      {
        y[index] = 4096 - brute_y[index];
 8003658:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800365a:	005b      	lsls	r3, r3, #1
 800365c:	3350      	adds	r3, #80	; 0x50
 800365e:	443b      	add	r3, r7
 8003660:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 8003664:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8003668:	b29a      	uxth	r2, r3
 800366a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800366c:	005b      	lsls	r3, r3, #1
 800366e:	3350      	adds	r3, #80	; 0x50
 8003670:	443b      	add	r3, r7
 8003672:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_XY)
 8003676:	4b80      	ldr	r3, [pc, #512]	; (8003878 <BSP_TS_GetState+0x2f4>)
 8003678:	781b      	ldrb	r3, [r3, #0]
 800367a:	f003 0308 	and.w	r3, r3, #8
 800367e:	2b00      	cmp	r3, #0
 8003680:	d017      	beq.n	80036b2 <BSP_TS_GetState+0x12e>
      {
        y[index] = brute_x[index];
 8003682:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003684:	005b      	lsls	r3, r3, #1
 8003686:	3350      	adds	r3, #80	; 0x50
 8003688:	443b      	add	r3, r7
 800368a:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 800368e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003690:	005b      	lsls	r3, r3, #1
 8003692:	3350      	adds	r3, #80	; 0x50
 8003694:	443b      	add	r3, r7
 8003696:	f823 2c24 	strh.w	r2, [r3, #-36]
        x[index] = brute_y[index];
 800369a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800369c:	005b      	lsls	r3, r3, #1
 800369e:	3350      	adds	r3, #80	; 0x50
 80036a0:	443b      	add	r3, r7
 80036a2:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 80036a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036a8:	005b      	lsls	r3, r3, #1
 80036aa:	3350      	adds	r3, #80	; 0x50
 80036ac:	443b      	add	r3, r7
 80036ae:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 80036b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036b4:	005b      	lsls	r3, r3, #1
 80036b6:	3350      	adds	r3, #80	; 0x50
 80036b8:	443b      	add	r3, r7
 80036ba:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80036be:	4619      	mov	r1, r3
 80036c0:	4a6e      	ldr	r2, [pc, #440]	; (800387c <BSP_TS_GetState+0x2f8>)
 80036c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036c8:	4299      	cmp	r1, r3
 80036ca:	d90d      	bls.n	80036e8 <BSP_TS_GetState+0x164>
 80036cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036ce:	005b      	lsls	r3, r3, #1
 80036d0:	3350      	adds	r3, #80	; 0x50
 80036d2:	443b      	add	r3, r7
 80036d4:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 80036d8:	4968      	ldr	r1, [pc, #416]	; (800387c <BSP_TS_GetState+0x2f8>)
 80036da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036dc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80036e0:	b29b      	uxth	r3, r3
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	b29b      	uxth	r3, r3
 80036e6:	e00c      	b.n	8003702 <BSP_TS_GetState+0x17e>
 80036e8:	4a64      	ldr	r2, [pc, #400]	; (800387c <BSP_TS_GetState+0x2f8>)
 80036ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036f0:	b29a      	uxth	r2, r3
 80036f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036f4:	005b      	lsls	r3, r3, #1
 80036f6:	3350      	adds	r3, #80	; 0x50
 80036f8:	443b      	add	r3, r7
 80036fa:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80036fe:	1ad3      	subs	r3, r2, r3
 8003700:	b29b      	uxth	r3, r3
 8003702:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 8003706:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003708:	005b      	lsls	r3, r3, #1
 800370a:	3350      	adds	r3, #80	; 0x50
 800370c:	443b      	add	r3, r7
 800370e:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8003712:	4619      	mov	r1, r3
 8003714:	4a5a      	ldr	r2, [pc, #360]	; (8003880 <BSP_TS_GetState+0x2fc>)
 8003716:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003718:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800371c:	4299      	cmp	r1, r3
 800371e:	d90d      	bls.n	800373c <BSP_TS_GetState+0x1b8>
 8003720:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003722:	005b      	lsls	r3, r3, #1
 8003724:	3350      	adds	r3, #80	; 0x50
 8003726:	443b      	add	r3, r7
 8003728:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 800372c:	4954      	ldr	r1, [pc, #336]	; (8003880 <BSP_TS_GetState+0x2fc>)
 800372e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003730:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003734:	b29b      	uxth	r3, r3
 8003736:	1ad3      	subs	r3, r2, r3
 8003738:	b29b      	uxth	r3, r3
 800373a:	e00c      	b.n	8003756 <BSP_TS_GetState+0x1d2>
 800373c:	4a50      	ldr	r2, [pc, #320]	; (8003880 <BSP_TS_GetState+0x2fc>)
 800373e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003740:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003744:	b29a      	uxth	r2, r3
 8003746:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003748:	005b      	lsls	r3, r3, #1
 800374a:	3350      	adds	r3, #80	; 0x50
 800374c:	443b      	add	r3, r7
 800374e:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8003752:	1ad3      	subs	r3, r2, r3
 8003754:	b29b      	uxth	r3, r3
 8003756:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

      if ((x_diff + y_diff) > 5)
 800375a:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800375e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003762:	4413      	add	r3, r2
 8003764:	2b05      	cmp	r3, #5
 8003766:	dd15      	ble.n	8003794 <BSP_TS_GetState+0x210>
      {
        _x[index] = x[index];
 8003768:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800376a:	005b      	lsls	r3, r3, #1
 800376c:	3350      	adds	r3, #80	; 0x50
 800376e:	443b      	add	r3, r7
 8003770:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003774:	4619      	mov	r1, r3
 8003776:	4a41      	ldr	r2, [pc, #260]	; (800387c <BSP_TS_GetState+0x2f8>)
 8003778:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800377a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = y[index];
 800377e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003780:	005b      	lsls	r3, r3, #1
 8003782:	3350      	adds	r3, #80	; 0x50
 8003784:	443b      	add	r3, r7
 8003786:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 800378a:	4619      	mov	r1, r3
 800378c:	4a3c      	ldr	r2, [pc, #240]	; (8003880 <BSP_TS_GetState+0x2fc>)
 800378e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003790:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }

      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 8003794:	4b37      	ldr	r3, [pc, #220]	; (8003874 <BSP_TS_GetState+0x2f0>)
 8003796:	781b      	ldrb	r3, [r3, #0]
 8003798:	2b70      	cmp	r3, #112	; 0x70
 800379a:	d119      	bne.n	80037d0 <BSP_TS_GetState+0x24c>
      {
        TS_State->touchX[index] = x[index];
 800379c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800379e:	005b      	lsls	r3, r3, #1
 80037a0:	3350      	adds	r3, #80	; 0x50
 80037a2:	443b      	add	r3, r7
 80037a4:	f833 1c18 	ldrh.w	r1, [r3, #-24]
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037ac:	005b      	lsls	r3, r3, #1
 80037ae:	4413      	add	r3, r2
 80037b0:	460a      	mov	r2, r1
 80037b2:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = y[index];
 80037b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037b6:	005b      	lsls	r3, r3, #1
 80037b8:	3350      	adds	r3, #80	; 0x50
 80037ba:	443b      	add	r3, r7
 80037bc:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 80037c0:	687a      	ldr	r2, [r7, #4]
 80037c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037c4:	3304      	adds	r3, #4
 80037c6:	005b      	lsls	r3, r3, #1
 80037c8:	4413      	add	r3, r2
 80037ca:	460a      	mov	r2, r1
 80037cc:	809a      	strh	r2, [r3, #4]
 80037ce:	e022      	b.n	8003816 <BSP_TS_GetState+0x292>
      }
      else
      {
        /* 2^12 = 4096 : indexes are expressed on a dynamic of 4096 */
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 80037d0:	4b2c      	ldr	r3, [pc, #176]	; (8003884 <BSP_TS_GetState+0x300>)
 80037d2:	881b      	ldrh	r3, [r3, #0]
 80037d4:	4619      	mov	r1, r3
 80037d6:	4a29      	ldr	r2, [pc, #164]	; (800387c <BSP_TS_GetState+0x2f8>)
 80037d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037de:	fb01 f303 	mul.w	r3, r1, r3
 80037e2:	0b1b      	lsrs	r3, r3, #12
 80037e4:	b299      	uxth	r1, r3
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037ea:	005b      	lsls	r3, r3, #1
 80037ec:	4413      	add	r3, r2
 80037ee:	460a      	mov	r2, r1
 80037f0:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 80037f2:	4b25      	ldr	r3, [pc, #148]	; (8003888 <BSP_TS_GetState+0x304>)
 80037f4:	881b      	ldrh	r3, [r3, #0]
 80037f6:	4619      	mov	r1, r3
 80037f8:	4a21      	ldr	r2, [pc, #132]	; (8003880 <BSP_TS_GetState+0x2fc>)
 80037fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003800:	fb01 f303 	mul.w	r3, r1, r3
 8003804:	0b1b      	lsrs	r3, r3, #12
 8003806:	b299      	uxth	r1, r3
 8003808:	687a      	ldr	r2, [r7, #4]
 800380a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800380c:	3304      	adds	r3, #4
 800380e:	005b      	lsls	r3, r3, #1
 8003810:	4413      	add	r3, r2
 8003812:	460a      	mov	r2, r1
 8003814:	809a      	strh	r2, [r3, #4]
      }

#if (TS_MULTI_TOUCH_SUPPORTED == 1)

      /* Get touch info related to the current touch */
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 8003816:	4b17      	ldr	r3, [pc, #92]	; (8003874 <BSP_TS_GetState+0x2f0>)
 8003818:	781b      	ldrb	r3, [r3, #0]
 800381a:	b298      	uxth	r0, r3
 800381c:	f107 010c 	add.w	r1, r7, #12
 8003820:	f107 0210 	add.w	r2, r7, #16
 8003824:	f107 0308 	add.w	r3, r7, #8
 8003828:	9300      	str	r3, [sp, #0]
 800382a:	460b      	mov	r3, r1
 800382c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800382e:	f7fe fa87 	bl	8001d40 <ft5336_TS_GetTouchInfo>

      /* Update TS_State structure */
      TS_State->touchWeight[index] = weight;
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	b2d9      	uxtb	r1, r3
 8003836:	687a      	ldr	r2, [r7, #4]
 8003838:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800383a:	4413      	add	r3, r2
 800383c:	3316      	adds	r3, #22
 800383e:	460a      	mov	r2, r1
 8003840:	701a      	strb	r2, [r3, #0]
      TS_State->touchArea[index]   = area;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	b2d9      	uxtb	r1, r3
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800384a:	4413      	add	r3, r2
 800384c:	3320      	adds	r3, #32
 800384e:	460a      	mov	r2, r1
 8003850:	701a      	strb	r2, [r3, #0]

      /* Remap touch event */
      switch(event)
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	2b03      	cmp	r3, #3
 8003856:	d835      	bhi.n	80038c4 <BSP_TS_GetState+0x340>
 8003858:	a201      	add	r2, pc, #4	; (adr r2, 8003860 <BSP_TS_GetState+0x2dc>)
 800385a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800385e:	bf00      	nop
 8003860:	0800388d 	.word	0x0800388d
 8003864:	0800389b 	.word	0x0800389b
 8003868:	080038a9 	.word	0x080038a9
 800386c:	080038b7 	.word	0x080038b7
 8003870:	20000b18 	.word	0x20000b18
 8003874:	20000b21 	.word	0x20000b21
 8003878:	20000b20 	.word	0x20000b20
 800387c:	20000b24 	.word	0x20000b24
 8003880:	20000b38 	.word	0x20000b38
 8003884:	20000b1c 	.word	0x20000b1c
 8003888:	20000b1e 	.word	0x20000b1e
      {
        case FT5336_TOUCH_EVT_FLAG_PRESS_DOWN	:
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 800388c:	687a      	ldr	r2, [r7, #4]
 800388e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003890:	4413      	add	r3, r2
 8003892:	331b      	adds	r3, #27
 8003894:	2201      	movs	r2, #1
 8003896:	701a      	strb	r2, [r3, #0]
          break;
 8003898:	e018      	b.n	80038cc <BSP_TS_GetState+0x348>
        case FT5336_TOUCH_EVT_FLAG_LIFT_UP :
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 800389a:	687a      	ldr	r2, [r7, #4]
 800389c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800389e:	4413      	add	r3, r2
 80038a0:	331b      	adds	r3, #27
 80038a2:	2202      	movs	r2, #2
 80038a4:	701a      	strb	r2, [r3, #0]
          break;
 80038a6:	e011      	b.n	80038cc <BSP_TS_GetState+0x348>
        case FT5336_TOUCH_EVT_FLAG_CONTACT :
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 80038a8:	687a      	ldr	r2, [r7, #4]
 80038aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038ac:	4413      	add	r3, r2
 80038ae:	331b      	adds	r3, #27
 80038b0:	2203      	movs	r2, #3
 80038b2:	701a      	strb	r2, [r3, #0]
          break;
 80038b4:	e00a      	b.n	80038cc <BSP_TS_GetState+0x348>
        case FT5336_TOUCH_EVT_FLAG_NO_EVENT :
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038ba:	4413      	add	r3, r2
 80038bc:	331b      	adds	r3, #27
 80038be:	2200      	movs	r2, #0
 80038c0:	701a      	strb	r2, [r3, #0]
          break;
 80038c2:	e003      	b.n	80038cc <BSP_TS_GetState+0x348>
        default :
          ts_status = TS_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
          break;
 80038ca:	bf00      	nop
    for(index=0; index < TS_State->touchDetected; index++)
 80038cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038ce:	3301      	adds	r3, #1
 80038d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	781b      	ldrb	r3, [r3, #0]
 80038d6:	461a      	mov	r2, r3
 80038d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038da:	4293      	cmp	r3, r2
 80038dc:	f4ff ae73 	bcc.w	80035c6 <BSP_TS_GetState+0x42>

    } /* of for(index=0; index < TS_State->touchDetected; index++) */

#if (TS_MULTI_TOUCH_SUPPORTED == 1)
    /* Get gesture Id */
    ts_status = BSP_TS_Get_GestureId(TS_State);
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f000 f809 	bl	80038f8 <BSP_TS_Get_GestureId>
 80038e6:	4603      	mov	r3, r0
 80038e8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 80038ec:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3754      	adds	r7, #84	; 0x54
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd90      	pop	{r4, r7, pc}

080038f8 <BSP_TS_Get_GestureId>:
  * @brief  Update gesture Id following a touch detected.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b084      	sub	sp, #16
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  uint32_t gestureId = 0;
 8003900:	2300      	movs	r3, #0
 8003902:	60bb      	str	r3, [r7, #8]
  uint8_t  ts_status = TS_OK;
 8003904:	2300      	movs	r3, #0
 8003906:	73fb      	strb	r3, [r7, #15]

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 8003908:	4b3b      	ldr	r3, [pc, #236]	; (80039f8 <BSP_TS_Get_GestureId+0x100>)
 800390a:	781b      	ldrb	r3, [r3, #0]
 800390c:	b29b      	uxth	r3, r3
 800390e:	f107 0208 	add.w	r2, r7, #8
 8003912:	4611      	mov	r1, r2
 8003914:	4618      	mov	r0, r3
 8003916:	f7fe f9fa 	bl	8001d0e <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	2b49      	cmp	r3, #73	; 0x49
 800391e:	d05e      	beq.n	80039de <BSP_TS_Get_GestureId+0xe6>
 8003920:	2b49      	cmp	r3, #73	; 0x49
 8003922:	d860      	bhi.n	80039e6 <BSP_TS_Get_GestureId+0xee>
 8003924:	2b1c      	cmp	r3, #28
 8003926:	d83f      	bhi.n	80039a8 <BSP_TS_Get_GestureId+0xb0>
 8003928:	2b1c      	cmp	r3, #28
 800392a:	d85c      	bhi.n	80039e6 <BSP_TS_Get_GestureId+0xee>
 800392c:	a201      	add	r2, pc, #4	; (adr r2, 8003934 <BSP_TS_Get_GestureId+0x3c>)
 800392e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003932:	bf00      	nop
 8003934:	080039af 	.word	0x080039af
 8003938:	080039e7 	.word	0x080039e7
 800393c:	080039e7 	.word	0x080039e7
 8003940:	080039e7 	.word	0x080039e7
 8003944:	080039e7 	.word	0x080039e7
 8003948:	080039e7 	.word	0x080039e7
 800394c:	080039e7 	.word	0x080039e7
 8003950:	080039e7 	.word	0x080039e7
 8003954:	080039e7 	.word	0x080039e7
 8003958:	080039e7 	.word	0x080039e7
 800395c:	080039e7 	.word	0x080039e7
 8003960:	080039e7 	.word	0x080039e7
 8003964:	080039e7 	.word	0x080039e7
 8003968:	080039e7 	.word	0x080039e7
 800396c:	080039e7 	.word	0x080039e7
 8003970:	080039e7 	.word	0x080039e7
 8003974:	080039b7 	.word	0x080039b7
 8003978:	080039e7 	.word	0x080039e7
 800397c:	080039e7 	.word	0x080039e7
 8003980:	080039e7 	.word	0x080039e7
 8003984:	080039bf 	.word	0x080039bf
 8003988:	080039e7 	.word	0x080039e7
 800398c:	080039e7 	.word	0x080039e7
 8003990:	080039e7 	.word	0x080039e7
 8003994:	080039c7 	.word	0x080039c7
 8003998:	080039e7 	.word	0x080039e7
 800399c:	080039e7 	.word	0x080039e7
 80039a0:	080039e7 	.word	0x080039e7
 80039a4:	080039cf 	.word	0x080039cf
 80039a8:	2b40      	cmp	r3, #64	; 0x40
 80039aa:	d014      	beq.n	80039d6 <BSP_TS_Get_GestureId+0xde>
 80039ac:	e01b      	b.n	80039e6 <BSP_TS_Get_GestureId+0xee>
  {
    case FT5336_GEST_ID_NO_GESTURE :
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2200      	movs	r2, #0
 80039b2:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 80039b4:	e01a      	b.n	80039ec <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_UP :
      TS_State->gestureId = GEST_ID_MOVE_UP;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2201      	movs	r2, #1
 80039ba:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 80039bc:	e016      	b.n	80039ec <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_RIGHT :
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2202      	movs	r2, #2
 80039c2:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 80039c4:	e012      	b.n	80039ec <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_DOWN :
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2203      	movs	r2, #3
 80039ca:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 80039cc:	e00e      	b.n	80039ec <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_LEFT :
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2204      	movs	r2, #4
 80039d2:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 80039d4:	e00a      	b.n	80039ec <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_IN :
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2205      	movs	r2, #5
 80039da:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 80039dc:	e006      	b.n	80039ec <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_OUT :
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2206      	movs	r2, #6
 80039e2:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 80039e4:	e002      	b.n	80039ec <BSP_TS_Get_GestureId+0xf4>
    default :
      ts_status = TS_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	73fb      	strb	r3, [r7, #15]
      break;
 80039ea:	bf00      	nop
  } /* of switch(gestureId) */

  return(ts_status);
 80039ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3710      	adds	r7, #16
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	20000b21 	.word	0x20000b21

080039fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a00:	2003      	movs	r0, #3
 8003a02:	f000 f94d 	bl	8003ca0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003a06:	2000      	movs	r0, #0
 8003a08:	f000 f806 	bl	8003a18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003a0c:	f7fd fa6e 	bl	8000eec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003a10:	2300      	movs	r3, #0
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	bd80      	pop	{r7, pc}
	...

08003a18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b082      	sub	sp, #8
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003a20:	4b12      	ldr	r3, [pc, #72]	; (8003a6c <HAL_InitTick+0x54>)
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	4b12      	ldr	r3, [pc, #72]	; (8003a70 <HAL_InitTick+0x58>)
 8003a26:	781b      	ldrb	r3, [r3, #0]
 8003a28:	4619      	mov	r1, r3
 8003a2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003a32:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a36:	4618      	mov	r0, r3
 8003a38:	f000 f967 	bl	8003d0a <HAL_SYSTICK_Config>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d001      	beq.n	8003a46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e00e      	b.n	8003a64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2b0f      	cmp	r3, #15
 8003a4a:	d80a      	bhi.n	8003a62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	6879      	ldr	r1, [r7, #4]
 8003a50:	f04f 30ff 	mov.w	r0, #4294967295
 8003a54:	f000 f92f 	bl	8003cb6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003a58:	4a06      	ldr	r2, [pc, #24]	; (8003a74 <HAL_InitTick+0x5c>)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	e000      	b.n	8003a64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	3708      	adds	r7, #8
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}
 8003a6c:	20000004 	.word	0x20000004
 8003a70:	20000048 	.word	0x20000048
 8003a74:	20000044 	.word	0x20000044

08003a78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003a7c:	4b06      	ldr	r3, [pc, #24]	; (8003a98 <HAL_IncTick+0x20>)
 8003a7e:	781b      	ldrb	r3, [r3, #0]
 8003a80:	461a      	mov	r2, r3
 8003a82:	4b06      	ldr	r3, [pc, #24]	; (8003a9c <HAL_IncTick+0x24>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4413      	add	r3, r2
 8003a88:	4a04      	ldr	r2, [pc, #16]	; (8003a9c <HAL_IncTick+0x24>)
 8003a8a:	6013      	str	r3, [r2, #0]
}
 8003a8c:	bf00      	nop
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr
 8003a96:	bf00      	nop
 8003a98:	20000048 	.word	0x20000048
 8003a9c:	20000b4c 	.word	0x20000b4c

08003aa0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	af00      	add	r7, sp, #0
  return uwTick;
 8003aa4:	4b03      	ldr	r3, [pc, #12]	; (8003ab4 <HAL_GetTick+0x14>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr
 8003ab2:	bf00      	nop
 8003ab4:	20000b4c 	.word	0x20000b4c

08003ab8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b084      	sub	sp, #16
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003ac0:	f7ff ffee 	bl	8003aa0 <HAL_GetTick>
 8003ac4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ad0:	d005      	beq.n	8003ade <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003ad2:	4b0a      	ldr	r3, [pc, #40]	; (8003afc <HAL_Delay+0x44>)
 8003ad4:	781b      	ldrb	r3, [r3, #0]
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	4413      	add	r3, r2
 8003adc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003ade:	bf00      	nop
 8003ae0:	f7ff ffde 	bl	8003aa0 <HAL_GetTick>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	1ad3      	subs	r3, r2, r3
 8003aea:	68fa      	ldr	r2, [r7, #12]
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d8f7      	bhi.n	8003ae0 <HAL_Delay+0x28>
  {
  }
}
 8003af0:	bf00      	nop
 8003af2:	bf00      	nop
 8003af4:	3710      	adds	r7, #16
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	20000048 	.word	0x20000048

08003b00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b085      	sub	sp, #20
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	f003 0307 	and.w	r3, r3, #7
 8003b0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b10:	4b0b      	ldr	r3, [pc, #44]	; (8003b40 <__NVIC_SetPriorityGrouping+0x40>)
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b16:	68ba      	ldr	r2, [r7, #8]
 8003b18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003b28:	4b06      	ldr	r3, [pc, #24]	; (8003b44 <__NVIC_SetPriorityGrouping+0x44>)
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b2e:	4a04      	ldr	r2, [pc, #16]	; (8003b40 <__NVIC_SetPriorityGrouping+0x40>)
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	60d3      	str	r3, [r2, #12]
}
 8003b34:	bf00      	nop
 8003b36:	3714      	adds	r7, #20
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr
 8003b40:	e000ed00 	.word	0xe000ed00
 8003b44:	05fa0000 	.word	0x05fa0000

08003b48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b4c:	4b04      	ldr	r3, [pc, #16]	; (8003b60 <__NVIC_GetPriorityGrouping+0x18>)
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	0a1b      	lsrs	r3, r3, #8
 8003b52:	f003 0307 	and.w	r3, r3, #7
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr
 8003b60:	e000ed00 	.word	0xe000ed00

08003b64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b083      	sub	sp, #12
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	db0b      	blt.n	8003b8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b76:	79fb      	ldrb	r3, [r7, #7]
 8003b78:	f003 021f 	and.w	r2, r3, #31
 8003b7c:	4907      	ldr	r1, [pc, #28]	; (8003b9c <__NVIC_EnableIRQ+0x38>)
 8003b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b82:	095b      	lsrs	r3, r3, #5
 8003b84:	2001      	movs	r0, #1
 8003b86:	fa00 f202 	lsl.w	r2, r0, r2
 8003b8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003b8e:	bf00      	nop
 8003b90:	370c      	adds	r7, #12
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr
 8003b9a:	bf00      	nop
 8003b9c:	e000e100 	.word	0xe000e100

08003ba0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b083      	sub	sp, #12
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	6039      	str	r1, [r7, #0]
 8003baa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	db0a      	blt.n	8003bca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	b2da      	uxtb	r2, r3
 8003bb8:	490c      	ldr	r1, [pc, #48]	; (8003bec <__NVIC_SetPriority+0x4c>)
 8003bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bbe:	0112      	lsls	r2, r2, #4
 8003bc0:	b2d2      	uxtb	r2, r2
 8003bc2:	440b      	add	r3, r1
 8003bc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003bc8:	e00a      	b.n	8003be0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	b2da      	uxtb	r2, r3
 8003bce:	4908      	ldr	r1, [pc, #32]	; (8003bf0 <__NVIC_SetPriority+0x50>)
 8003bd0:	79fb      	ldrb	r3, [r7, #7]
 8003bd2:	f003 030f 	and.w	r3, r3, #15
 8003bd6:	3b04      	subs	r3, #4
 8003bd8:	0112      	lsls	r2, r2, #4
 8003bda:	b2d2      	uxtb	r2, r2
 8003bdc:	440b      	add	r3, r1
 8003bde:	761a      	strb	r2, [r3, #24]
}
 8003be0:	bf00      	nop
 8003be2:	370c      	adds	r7, #12
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr
 8003bec:	e000e100 	.word	0xe000e100
 8003bf0:	e000ed00 	.word	0xe000ed00

08003bf4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b089      	sub	sp, #36	; 0x24
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	60f8      	str	r0, [r7, #12]
 8003bfc:	60b9      	str	r1, [r7, #8]
 8003bfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f003 0307 	and.w	r3, r3, #7
 8003c06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c08:	69fb      	ldr	r3, [r7, #28]
 8003c0a:	f1c3 0307 	rsb	r3, r3, #7
 8003c0e:	2b04      	cmp	r3, #4
 8003c10:	bf28      	it	cs
 8003c12:	2304      	movcs	r3, #4
 8003c14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c16:	69fb      	ldr	r3, [r7, #28]
 8003c18:	3304      	adds	r3, #4
 8003c1a:	2b06      	cmp	r3, #6
 8003c1c:	d902      	bls.n	8003c24 <NVIC_EncodePriority+0x30>
 8003c1e:	69fb      	ldr	r3, [r7, #28]
 8003c20:	3b03      	subs	r3, #3
 8003c22:	e000      	b.n	8003c26 <NVIC_EncodePriority+0x32>
 8003c24:	2300      	movs	r3, #0
 8003c26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c28:	f04f 32ff 	mov.w	r2, #4294967295
 8003c2c:	69bb      	ldr	r3, [r7, #24]
 8003c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c32:	43da      	mvns	r2, r3
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	401a      	ands	r2, r3
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c3c:	f04f 31ff 	mov.w	r1, #4294967295
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	fa01 f303 	lsl.w	r3, r1, r3
 8003c46:	43d9      	mvns	r1, r3
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c4c:	4313      	orrs	r3, r2
         );
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3724      	adds	r7, #36	; 0x24
 8003c52:	46bd      	mov	sp, r7
 8003c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c58:	4770      	bx	lr
	...

08003c5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b082      	sub	sp, #8
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	3b01      	subs	r3, #1
 8003c68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c6c:	d301      	bcc.n	8003c72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e00f      	b.n	8003c92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c72:	4a0a      	ldr	r2, [pc, #40]	; (8003c9c <SysTick_Config+0x40>)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	3b01      	subs	r3, #1
 8003c78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c7a:	210f      	movs	r1, #15
 8003c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8003c80:	f7ff ff8e 	bl	8003ba0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c84:	4b05      	ldr	r3, [pc, #20]	; (8003c9c <SysTick_Config+0x40>)
 8003c86:	2200      	movs	r2, #0
 8003c88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c8a:	4b04      	ldr	r3, [pc, #16]	; (8003c9c <SysTick_Config+0x40>)
 8003c8c:	2207      	movs	r2, #7
 8003c8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c90:	2300      	movs	r3, #0
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3708      	adds	r7, #8
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}
 8003c9a:	bf00      	nop
 8003c9c:	e000e010 	.word	0xe000e010

08003ca0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b082      	sub	sp, #8
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	f7ff ff29 	bl	8003b00 <__NVIC_SetPriorityGrouping>
}
 8003cae:	bf00      	nop
 8003cb0:	3708      	adds	r7, #8
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}

08003cb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003cb6:	b580      	push	{r7, lr}
 8003cb8:	b086      	sub	sp, #24
 8003cba:	af00      	add	r7, sp, #0
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	60b9      	str	r1, [r7, #8]
 8003cc0:	607a      	str	r2, [r7, #4]
 8003cc2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003cc8:	f7ff ff3e 	bl	8003b48 <__NVIC_GetPriorityGrouping>
 8003ccc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	68b9      	ldr	r1, [r7, #8]
 8003cd2:	6978      	ldr	r0, [r7, #20]
 8003cd4:	f7ff ff8e 	bl	8003bf4 <NVIC_EncodePriority>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cde:	4611      	mov	r1, r2
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f7ff ff5d 	bl	8003ba0 <__NVIC_SetPriority>
}
 8003ce6:	bf00      	nop
 8003ce8:	3718      	adds	r7, #24
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}

08003cee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cee:	b580      	push	{r7, lr}
 8003cf0:	b082      	sub	sp, #8
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003cf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f7ff ff31 	bl	8003b64 <__NVIC_EnableIRQ>
}
 8003d02:	bf00      	nop
 8003d04:	3708      	adds	r7, #8
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}

08003d0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d0a:	b580      	push	{r7, lr}
 8003d0c:	b082      	sub	sp, #8
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f7ff ffa2 	bl	8003c5c <SysTick_Config>
 8003d18:	4603      	mov	r3, r0
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3708      	adds	r7, #8
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
	...

08003d24 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b086      	sub	sp, #24
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003d30:	f7ff feb6 	bl	8003aa0 <HAL_GetTick>
 8003d34:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d101      	bne.n	8003d40 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e099      	b.n	8003e74 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2202      	movs	r2, #2
 8003d44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f022 0201 	bic.w	r2, r2, #1
 8003d5e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d60:	e00f      	b.n	8003d82 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003d62:	f7ff fe9d 	bl	8003aa0 <HAL_GetTick>
 8003d66:	4602      	mov	r2, r0
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	1ad3      	subs	r3, r2, r3
 8003d6c:	2b05      	cmp	r3, #5
 8003d6e:	d908      	bls.n	8003d82 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2220      	movs	r2, #32
 8003d74:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2203      	movs	r2, #3
 8003d7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003d7e:	2303      	movs	r3, #3
 8003d80:	e078      	b.n	8003e74 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 0301 	and.w	r3, r3, #1
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d1e8      	bne.n	8003d62 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003d98:	697a      	ldr	r2, [r7, #20]
 8003d9a:	4b38      	ldr	r3, [pc, #224]	; (8003e7c <HAL_DMA_Init+0x158>)
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	685a      	ldr	r2, [r3, #4]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003dae:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	691b      	ldr	r3, [r3, #16]
 8003db4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003dba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	699b      	ldr	r3, [r3, #24]
 8003dc0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003dc6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6a1b      	ldr	r3, [r3, #32]
 8003dcc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003dce:	697a      	ldr	r2, [r7, #20]
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd8:	2b04      	cmp	r3, #4
 8003dda:	d107      	bne.n	8003dec <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de4:	4313      	orrs	r3, r2
 8003de6:	697a      	ldr	r2, [r7, #20]
 8003de8:	4313      	orrs	r3, r2
 8003dea:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	697a      	ldr	r2, [r7, #20]
 8003df2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	695b      	ldr	r3, [r3, #20]
 8003dfa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	f023 0307 	bic.w	r3, r3, #7
 8003e02:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e08:	697a      	ldr	r2, [r7, #20]
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e12:	2b04      	cmp	r3, #4
 8003e14:	d117      	bne.n	8003e46 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e1a:	697a      	ldr	r2, [r7, #20]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d00e      	beq.n	8003e46 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003e28:	6878      	ldr	r0, [r7, #4]
 8003e2a:	f000 f92d 	bl	8004088 <DMA_CheckFifoParam>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d008      	beq.n	8003e46 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2240      	movs	r2, #64	; 0x40
 8003e38:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003e42:	2301      	movs	r3, #1
 8003e44:	e016      	b.n	8003e74 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	697a      	ldr	r2, [r7, #20]
 8003e4c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f000 f8e4 	bl	800401c <DMA_CalcBaseAndBitshift>
 8003e54:	4603      	mov	r3, r0
 8003e56:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e5c:	223f      	movs	r2, #63	; 0x3f
 8003e5e:	409a      	lsls	r2, r3
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2200      	movs	r2, #0
 8003e68:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003e72:	2300      	movs	r3, #0
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3718      	adds	r7, #24
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}
 8003e7c:	f010803f 	.word	0xf010803f

08003e80 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b084      	sub	sp, #16
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d101      	bne.n	8003e92 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e050      	b.n	8003f34 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e98:	b2db      	uxtb	r3, r3
 8003e9a:	2b02      	cmp	r3, #2
 8003e9c:	d101      	bne.n	8003ea2 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8003e9e:	2302      	movs	r3, #2
 8003ea0:	e048      	b.n	8003f34 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f022 0201 	bic.w	r2, r2, #1
 8003eb0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	2221      	movs	r2, #33	; 0x21
 8003ee0:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f000 f89a 	bl	800401c <DMA_CalcBaseAndBitshift>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ef0:	223f      	movs	r2, #63	; 0x3f
 8003ef2:	409a      	lsls	r2, r3
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2200      	movs	r2, #0
 8003efc:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2200      	movs	r2, #0
 8003f02:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2200      	movs	r2, #0
 8003f08:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2200      	movs	r2, #0
 8003f14:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2200      	movs	r2, #0
 8003f26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003f32:	2300      	movs	r3, #0
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3710      	adds	r7, #16
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}

08003f3c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b084      	sub	sp, #16
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f48:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003f4a:	f7ff fda9 	bl	8003aa0 <HAL_GetTick>
 8003f4e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	2b02      	cmp	r3, #2
 8003f5a:	d008      	beq.n	8003f6e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2280      	movs	r2, #128	; 0x80
 8003f60:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e052      	b.n	8004014 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f022 0216 	bic.w	r2, r2, #22
 8003f7c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	695a      	ldr	r2, [r3, #20]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f8c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d103      	bne.n	8003f9e <HAL_DMA_Abort+0x62>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d007      	beq.n	8003fae <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f022 0208 	bic.w	r2, r2, #8
 8003fac:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f022 0201 	bic.w	r2, r2, #1
 8003fbc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003fbe:	e013      	b.n	8003fe8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003fc0:	f7ff fd6e 	bl	8003aa0 <HAL_GetTick>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	2b05      	cmp	r3, #5
 8003fcc:	d90c      	bls.n	8003fe8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2220      	movs	r2, #32
 8003fd2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2203      	movs	r2, #3
 8003fd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8003fe4:	2303      	movs	r3, #3
 8003fe6:	e015      	b.n	8004014 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 0301 	and.w	r3, r3, #1
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d1e4      	bne.n	8003fc0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ffa:	223f      	movs	r2, #63	; 0x3f
 8003ffc:	409a      	lsls	r2, r3
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2201      	movs	r2, #1
 8004006:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2200      	movs	r2, #0
 800400e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8004012:	2300      	movs	r3, #0
}
 8004014:	4618      	mov	r0, r3
 8004016:	3710      	adds	r7, #16
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}

0800401c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800401c:	b480      	push	{r7}
 800401e:	b085      	sub	sp, #20
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	b2db      	uxtb	r3, r3
 800402a:	3b10      	subs	r3, #16
 800402c:	4a13      	ldr	r2, [pc, #76]	; (800407c <DMA_CalcBaseAndBitshift+0x60>)
 800402e:	fba2 2303 	umull	r2, r3, r2, r3
 8004032:	091b      	lsrs	r3, r3, #4
 8004034:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004036:	4a12      	ldr	r2, [pc, #72]	; (8004080 <DMA_CalcBaseAndBitshift+0x64>)
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	4413      	add	r3, r2
 800403c:	781b      	ldrb	r3, [r3, #0]
 800403e:	461a      	mov	r2, r3
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2b03      	cmp	r3, #3
 8004048:	d908      	bls.n	800405c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	461a      	mov	r2, r3
 8004050:	4b0c      	ldr	r3, [pc, #48]	; (8004084 <DMA_CalcBaseAndBitshift+0x68>)
 8004052:	4013      	ands	r3, r2
 8004054:	1d1a      	adds	r2, r3, #4
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	659a      	str	r2, [r3, #88]	; 0x58
 800405a:	e006      	b.n	800406a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	461a      	mov	r2, r3
 8004062:	4b08      	ldr	r3, [pc, #32]	; (8004084 <DMA_CalcBaseAndBitshift+0x68>)
 8004064:	4013      	ands	r3, r2
 8004066:	687a      	ldr	r2, [r7, #4]
 8004068:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800406e:	4618      	mov	r0, r3
 8004070:	3714      	adds	r7, #20
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr
 800407a:	bf00      	nop
 800407c:	aaaaaaab 	.word	0xaaaaaaab
 8004080:	0801aa48 	.word	0x0801aa48
 8004084:	fffffc00 	.word	0xfffffc00

08004088 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004088:	b480      	push	{r7}
 800408a:	b085      	sub	sp, #20
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004090:	2300      	movs	r3, #0
 8004092:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004098:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	699b      	ldr	r3, [r3, #24]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d11f      	bne.n	80040e2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	2b03      	cmp	r3, #3
 80040a6:	d856      	bhi.n	8004156 <DMA_CheckFifoParam+0xce>
 80040a8:	a201      	add	r2, pc, #4	; (adr r2, 80040b0 <DMA_CheckFifoParam+0x28>)
 80040aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ae:	bf00      	nop
 80040b0:	080040c1 	.word	0x080040c1
 80040b4:	080040d3 	.word	0x080040d3
 80040b8:	080040c1 	.word	0x080040c1
 80040bc:	08004157 	.word	0x08004157
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d046      	beq.n	800415a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040d0:	e043      	b.n	800415a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80040da:	d140      	bne.n	800415e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040e0:	e03d      	b.n	800415e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	699b      	ldr	r3, [r3, #24]
 80040e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040ea:	d121      	bne.n	8004130 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	2b03      	cmp	r3, #3
 80040f0:	d837      	bhi.n	8004162 <DMA_CheckFifoParam+0xda>
 80040f2:	a201      	add	r2, pc, #4	; (adr r2, 80040f8 <DMA_CheckFifoParam+0x70>)
 80040f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040f8:	08004109 	.word	0x08004109
 80040fc:	0800410f 	.word	0x0800410f
 8004100:	08004109 	.word	0x08004109
 8004104:	08004121 	.word	0x08004121
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	73fb      	strb	r3, [r7, #15]
      break;
 800410c:	e030      	b.n	8004170 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004112:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004116:	2b00      	cmp	r3, #0
 8004118:	d025      	beq.n	8004166 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800411e:	e022      	b.n	8004166 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004124:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004128:	d11f      	bne.n	800416a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800412e:	e01c      	b.n	800416a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	2b02      	cmp	r3, #2
 8004134:	d903      	bls.n	800413e <DMA_CheckFifoParam+0xb6>
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	2b03      	cmp	r3, #3
 800413a:	d003      	beq.n	8004144 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800413c:	e018      	b.n	8004170 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	73fb      	strb	r3, [r7, #15]
      break;
 8004142:	e015      	b.n	8004170 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004148:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800414c:	2b00      	cmp	r3, #0
 800414e:	d00e      	beq.n	800416e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	73fb      	strb	r3, [r7, #15]
      break;
 8004154:	e00b      	b.n	800416e <DMA_CheckFifoParam+0xe6>
      break;
 8004156:	bf00      	nop
 8004158:	e00a      	b.n	8004170 <DMA_CheckFifoParam+0xe8>
      break;
 800415a:	bf00      	nop
 800415c:	e008      	b.n	8004170 <DMA_CheckFifoParam+0xe8>
      break;
 800415e:	bf00      	nop
 8004160:	e006      	b.n	8004170 <DMA_CheckFifoParam+0xe8>
      break;
 8004162:	bf00      	nop
 8004164:	e004      	b.n	8004170 <DMA_CheckFifoParam+0xe8>
      break;
 8004166:	bf00      	nop
 8004168:	e002      	b.n	8004170 <DMA_CheckFifoParam+0xe8>
      break;   
 800416a:	bf00      	nop
 800416c:	e000      	b.n	8004170 <DMA_CheckFifoParam+0xe8>
      break;
 800416e:	bf00      	nop
    }
  } 
  
  return status; 
 8004170:	7bfb      	ldrb	r3, [r7, #15]
}
 8004172:	4618      	mov	r0, r3
 8004174:	3714      	adds	r7, #20
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr
 800417e:	bf00      	nop

08004180 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b082      	sub	sp, #8
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d101      	bne.n	8004192 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e039      	b.n	8004206 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004198:	b2db      	uxtb	r3, r3
 800419a:	2b00      	cmp	r3, #0
 800419c:	d106      	bne.n	80041ac <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2200      	movs	r2, #0
 80041a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f7fc fec4 	bl	8000f34 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2202      	movs	r2, #2
 80041b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	685a      	ldr	r2, [r3, #4]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	430a      	orrs	r2, r1
 80041c8:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041d0:	f023 0107 	bic.w	r1, r3, #7
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	689a      	ldr	r2, [r3, #8]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	430a      	orrs	r2, r1
 80041de:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041e6:	4b0a      	ldr	r3, [pc, #40]	; (8004210 <HAL_DMA2D_Init+0x90>)
 80041e8:	4013      	ands	r3, r2
 80041ea:	687a      	ldr	r2, [r7, #4]
 80041ec:	68d1      	ldr	r1, [r2, #12]
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	6812      	ldr	r2, [r2, #0]
 80041f2:	430b      	orrs	r3, r1
 80041f4:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2200      	movs	r2, #0
 80041fa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2201      	movs	r2, #1
 8004200:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8004204:	2300      	movs	r3, #0
}
 8004206:	4618      	mov	r0, r3
 8004208:	3708      	adds	r7, #8
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
 800420e:	bf00      	nop
 8004210:	ffffc000 	.word	0xffffc000

08004214 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b086      	sub	sp, #24
 8004218:	af02      	add	r7, sp, #8
 800421a:	60f8      	str	r0, [r7, #12]
 800421c:	60b9      	str	r1, [r7, #8]
 800421e:	607a      	str	r2, [r7, #4]
 8004220:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004228:	2b01      	cmp	r3, #1
 800422a:	d101      	bne.n	8004230 <HAL_DMA2D_Start+0x1c>
 800422c:	2302      	movs	r3, #2
 800422e:	e018      	b.n	8004262 <HAL_DMA2D_Start+0x4e>
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2201      	movs	r2, #1
 8004234:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2202      	movs	r2, #2
 800423c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8004240:	69bb      	ldr	r3, [r7, #24]
 8004242:	9300      	str	r3, [sp, #0]
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	687a      	ldr	r2, [r7, #4]
 8004248:	68b9      	ldr	r1, [r7, #8]
 800424a:	68f8      	ldr	r0, [r7, #12]
 800424c:	f000 f988 	bl	8004560 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f042 0201 	orr.w	r2, r2, #1
 800425e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004260:	2300      	movs	r3, #0
}
 8004262:	4618      	mov	r0, r3
 8004264:	3710      	adds	r7, #16
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}

0800426a <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 800426a:	b580      	push	{r7, lr}
 800426c:	b086      	sub	sp, #24
 800426e:	af00      	add	r7, sp, #0
 8004270:	6078      	str	r0, [r7, #4]
 8004272:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8004274:	2300      	movs	r3, #0
 8004276:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f003 0301 	and.w	r3, r3, #1
 8004282:	2b00      	cmp	r3, #0
 8004284:	d056      	beq.n	8004334 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8004286:	f7ff fc0b 	bl	8003aa0 <HAL_GetTick>
 800428a:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800428c:	e04b      	b.n	8004326 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800429c:	2b00      	cmp	r3, #0
 800429e:	d023      	beq.n	80042e8 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f003 0320 	and.w	r3, r3, #32
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d005      	beq.n	80042b6 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042ae:	f043 0202 	orr.w	r2, r3, #2
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	f003 0301 	and.w	r3, r3, #1
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d005      	beq.n	80042cc <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042c4:	f043 0201 	orr.w	r2, r3, #1
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	2221      	movs	r2, #33	; 0x21
 80042d2:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2204      	movs	r2, #4
 80042d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2200      	movs	r2, #0
 80042e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	e0a5      	b.n	8004434 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ee:	d01a      	beq.n	8004326 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80042f0:	f7ff fbd6 	bl	8003aa0 <HAL_GetTick>
 80042f4:	4602      	mov	r2, r0
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	683a      	ldr	r2, [r7, #0]
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d302      	bcc.n	8004306 <HAL_DMA2D_PollForTransfer+0x9c>
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d10f      	bne.n	8004326 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800430a:	f043 0220 	orr.w	r2, r3, #32
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2203      	movs	r2, #3
 8004316:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8004322:	2303      	movs	r3, #3
 8004324:	e086      	b.n	8004434 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	f003 0302 	and.w	r3, r3, #2
 8004330:	2b00      	cmp	r3, #0
 8004332:	d0ac      	beq.n	800428e <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	69db      	ldr	r3, [r3, #28]
 800433a:	f003 0320 	and.w	r3, r3, #32
 800433e:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004346:	f003 0320 	and.w	r3, r3, #32
 800434a:	693a      	ldr	r2, [r7, #16]
 800434c:	4313      	orrs	r3, r2
 800434e:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d061      	beq.n	800441a <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8004356:	f7ff fba3 	bl	8003aa0 <HAL_GetTick>
 800435a:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800435c:	e056      	b.n	800440c <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	f003 0329 	and.w	r3, r3, #41	; 0x29
 800436c:	2b00      	cmp	r3, #0
 800436e:	d02e      	beq.n	80043ce <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	f003 0308 	and.w	r3, r3, #8
 8004376:	2b00      	cmp	r3, #0
 8004378:	d005      	beq.n	8004386 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800437e:	f043 0204 	orr.w	r2, r3, #4
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	f003 0320 	and.w	r3, r3, #32
 800438c:	2b00      	cmp	r3, #0
 800438e:	d005      	beq.n	800439c <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004394:	f043 0202 	orr.w	r2, r3, #2
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f003 0301 	and.w	r3, r3, #1
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d005      	beq.n	80043b2 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043aa:	f043 0201 	orr.w	r2, r3, #1
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	2229      	movs	r2, #41	; 0x29
 80043b8:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2204      	movs	r2, #4
 80043be:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2200      	movs	r2, #0
 80043c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e032      	b.n	8004434 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043d4:	d01a      	beq.n	800440c <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80043d6:	f7ff fb63 	bl	8003aa0 <HAL_GetTick>
 80043da:	4602      	mov	r2, r0
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	1ad3      	subs	r3, r2, r3
 80043e0:	683a      	ldr	r2, [r7, #0]
 80043e2:	429a      	cmp	r2, r3
 80043e4:	d302      	bcc.n	80043ec <HAL_DMA2D_PollForTransfer+0x182>
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d10f      	bne.n	800440c <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043f0:	f043 0220 	orr.w	r2, r3, #32
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2203      	movs	r2, #3
 80043fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8004408:	2303      	movs	r3, #3
 800440a:	e013      	b.n	8004434 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	f003 0310 	and.w	r3, r3, #16
 8004416:	2b00      	cmp	r3, #0
 8004418:	d0a1      	beq.n	800435e <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	2212      	movs	r2, #18
 8004420:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2201      	movs	r2, #1
 8004426:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2200      	movs	r2, #0
 800442e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004432:	2300      	movs	r3, #0
}
 8004434:	4618      	mov	r0, r3
 8004436:	3718      	adds	r7, #24
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}

0800443c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800443c:	b480      	push	{r7}
 800443e:	b087      	sub	sp, #28
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004454:	2b01      	cmp	r3, #1
 8004456:	d101      	bne.n	800445c <HAL_DMA2D_ConfigLayer+0x20>
 8004458:	2302      	movs	r3, #2
 800445a:	e079      	b.n	8004550 <HAL_DMA2D_ConfigLayer+0x114>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2201      	movs	r2, #1
 8004460:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2202      	movs	r2, #2
 8004468:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	011b      	lsls	r3, r3, #4
 8004470:	3318      	adds	r3, #24
 8004472:	687a      	ldr	r2, [r7, #4]
 8004474:	4413      	add	r3, r2
 8004476:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	685a      	ldr	r2, [r3, #4]
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	041b      	lsls	r3, r3, #16
 8004482:	4313      	orrs	r3, r2
 8004484:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8004486:	4b35      	ldr	r3, [pc, #212]	; (800455c <HAL_DMA2D_ConfigLayer+0x120>)
 8004488:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	2b0a      	cmp	r3, #10
 8004490:	d003      	beq.n	800449a <HAL_DMA2D_ConfigLayer+0x5e>
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	2b09      	cmp	r3, #9
 8004498:	d107      	bne.n	80044aa <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	68db      	ldr	r3, [r3, #12]
 800449e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80044a2:	697a      	ldr	r2, [r7, #20]
 80044a4:	4313      	orrs	r3, r2
 80044a6:	617b      	str	r3, [r7, #20]
 80044a8:	e005      	b.n	80044b6 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	68db      	ldr	r3, [r3, #12]
 80044ae:	061b      	lsls	r3, r3, #24
 80044b0:	697a      	ldr	r2, [r7, #20]
 80044b2:	4313      	orrs	r3, r2
 80044b4:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d120      	bne.n	80044fe <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	43db      	mvns	r3, r3
 80044c6:	ea02 0103 	and.w	r1, r2, r3
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	697a      	ldr	r2, [r7, #20]
 80044d0:	430a      	orrs	r2, r1
 80044d2:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	693a      	ldr	r2, [r7, #16]
 80044da:	6812      	ldr	r2, [r2, #0]
 80044dc:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	2b0a      	cmp	r3, #10
 80044e4:	d003      	beq.n	80044ee <HAL_DMA2D_ConfigLayer+0xb2>
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	2b09      	cmp	r3, #9
 80044ec:	d127      	bne.n	800453e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	68da      	ldr	r2, [r3, #12]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80044fa:	629a      	str	r2, [r3, #40]	; 0x28
 80044fc:	e01f      	b.n	800453e <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	69da      	ldr	r2, [r3, #28]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	43db      	mvns	r3, r3
 8004508:	ea02 0103 	and.w	r1, r2, r3
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	697a      	ldr	r2, [r7, #20]
 8004512:	430a      	orrs	r2, r1
 8004514:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	693a      	ldr	r2, [r7, #16]
 800451c:	6812      	ldr	r2, [r2, #0]
 800451e:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	2b0a      	cmp	r3, #10
 8004526:	d003      	beq.n	8004530 <HAL_DMA2D_ConfigLayer+0xf4>
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	2b09      	cmp	r3, #9
 800452e:	d106      	bne.n	800453e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	68da      	ldr	r2, [r3, #12]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800453c:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2201      	movs	r2, #1
 8004542:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2200      	movs	r2, #0
 800454a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800454e:	2300      	movs	r3, #0
}
 8004550:	4618      	mov	r0, r3
 8004552:	371c      	adds	r7, #28
 8004554:	46bd      	mov	sp, r7
 8004556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455a:	4770      	bx	lr
 800455c:	ff03000f 	.word	0xff03000f

08004560 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8004560:	b480      	push	{r7}
 8004562:	b08b      	sub	sp, #44	; 0x2c
 8004564:	af00      	add	r7, sp, #0
 8004566:	60f8      	str	r0, [r7, #12]
 8004568:	60b9      	str	r1, [r7, #8]
 800456a:	607a      	str	r2, [r7, #4]
 800456c:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004574:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	041a      	lsls	r2, r3, #16
 800457c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800457e:	431a      	orrs	r2, r3
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	430a      	orrs	r2, r1
 8004586:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	687a      	ldr	r2, [r7, #4]
 800458e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004598:	d174      	bne.n	8004684 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80045a0:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80045a8:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80045b0:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d108      	bne.n	80045d2 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 80045c0:	69ba      	ldr	r2, [r7, #24]
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	431a      	orrs	r2, r3
 80045c6:	6a3b      	ldr	r3, [r7, #32]
 80045c8:	4313      	orrs	r3, r2
 80045ca:	697a      	ldr	r2, [r7, #20]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	627b      	str	r3, [r7, #36]	; 0x24
 80045d0:	e053      	b.n	800467a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d106      	bne.n	80045e8 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80045da:	69ba      	ldr	r2, [r7, #24]
 80045dc:	69fb      	ldr	r3, [r7, #28]
 80045de:	4313      	orrs	r3, r2
 80045e0:	697a      	ldr	r2, [r7, #20]
 80045e2:	4313      	orrs	r3, r2
 80045e4:	627b      	str	r3, [r7, #36]	; 0x24
 80045e6:	e048      	b.n	800467a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	2b02      	cmp	r3, #2
 80045ee:	d111      	bne.n	8004614 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80045f0:	69fb      	ldr	r3, [r7, #28]
 80045f2:	0cdb      	lsrs	r3, r3, #19
 80045f4:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80045f6:	69bb      	ldr	r3, [r7, #24]
 80045f8:	0a9b      	lsrs	r3, r3, #10
 80045fa:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	08db      	lsrs	r3, r3, #3
 8004600:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8004602:	69bb      	ldr	r3, [r7, #24]
 8004604:	015a      	lsls	r2, r3, #5
 8004606:	69fb      	ldr	r3, [r7, #28]
 8004608:	02db      	lsls	r3, r3, #11
 800460a:	4313      	orrs	r3, r2
 800460c:	697a      	ldr	r2, [r7, #20]
 800460e:	4313      	orrs	r3, r2
 8004610:	627b      	str	r3, [r7, #36]	; 0x24
 8004612:	e032      	b.n	800467a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	2b03      	cmp	r3, #3
 800461a:	d117      	bne.n	800464c <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 800461c:	6a3b      	ldr	r3, [r7, #32]
 800461e:	0fdb      	lsrs	r3, r3, #31
 8004620:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8004622:	69fb      	ldr	r3, [r7, #28]
 8004624:	0cdb      	lsrs	r3, r3, #19
 8004626:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8004628:	69bb      	ldr	r3, [r7, #24]
 800462a:	0adb      	lsrs	r3, r3, #11
 800462c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	08db      	lsrs	r3, r3, #3
 8004632:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8004634:	69bb      	ldr	r3, [r7, #24]
 8004636:	015a      	lsls	r2, r3, #5
 8004638:	69fb      	ldr	r3, [r7, #28]
 800463a:	029b      	lsls	r3, r3, #10
 800463c:	431a      	orrs	r2, r3
 800463e:	6a3b      	ldr	r3, [r7, #32]
 8004640:	03db      	lsls	r3, r3, #15
 8004642:	4313      	orrs	r3, r2
 8004644:	697a      	ldr	r2, [r7, #20]
 8004646:	4313      	orrs	r3, r2
 8004648:	627b      	str	r3, [r7, #36]	; 0x24
 800464a:	e016      	b.n	800467a <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 800464c:	6a3b      	ldr	r3, [r7, #32]
 800464e:	0f1b      	lsrs	r3, r3, #28
 8004650:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8004652:	69fb      	ldr	r3, [r7, #28]
 8004654:	0d1b      	lsrs	r3, r3, #20
 8004656:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8004658:	69bb      	ldr	r3, [r7, #24]
 800465a:	0b1b      	lsrs	r3, r3, #12
 800465c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	091b      	lsrs	r3, r3, #4
 8004662:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8004664:	69bb      	ldr	r3, [r7, #24]
 8004666:	011a      	lsls	r2, r3, #4
 8004668:	69fb      	ldr	r3, [r7, #28]
 800466a:	021b      	lsls	r3, r3, #8
 800466c:	431a      	orrs	r2, r3
 800466e:	6a3b      	ldr	r3, [r7, #32]
 8004670:	031b      	lsls	r3, r3, #12
 8004672:	4313      	orrs	r3, r2
 8004674:	697a      	ldr	r2, [r7, #20]
 8004676:	4313      	orrs	r3, r2
 8004678:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004680:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8004682:	e003      	b.n	800468c <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	68ba      	ldr	r2, [r7, #8]
 800468a:	60da      	str	r2, [r3, #12]
}
 800468c:	bf00      	nop
 800468e:	372c      	adds	r7, #44	; 0x2c
 8004690:	46bd      	mov	sp, r7
 8004692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004696:	4770      	bx	lr

08004698 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b084      	sub	sp, #16
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d101      	bne.n	80046aa <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	e06a      	b.n	8004780 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d106      	bne.n	80046c2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2223      	movs	r2, #35	; 0x23
 80046b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80046bc:	6878      	ldr	r0, [r7, #4]
 80046be:	f005 fbd9 	bl	8009e74 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046c2:	4b31      	ldr	r3, [pc, #196]	; (8004788 <HAL_ETH_Init+0xf0>)
 80046c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046c6:	4a30      	ldr	r2, [pc, #192]	; (8004788 <HAL_ETH_Init+0xf0>)
 80046c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80046cc:	6453      	str	r3, [r2, #68]	; 0x44
 80046ce:	4b2e      	ldr	r3, [pc, #184]	; (8004788 <HAL_ETH_Init+0xf0>)
 80046d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046d6:	60bb      	str	r3, [r7, #8]
 80046d8:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80046da:	4b2c      	ldr	r3, [pc, #176]	; (800478c <HAL_ETH_Init+0xf4>)
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	4a2b      	ldr	r2, [pc, #172]	; (800478c <HAL_ETH_Init+0xf4>)
 80046e0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80046e4:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80046e6:	4b29      	ldr	r3, [pc, #164]	; (800478c <HAL_ETH_Init+0xf4>)
 80046e8:	685a      	ldr	r2, [r3, #4]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	4927      	ldr	r1, [pc, #156]	; (800478c <HAL_ETH_Init+0xf4>)
 80046f0:	4313      	orrs	r3, r2
 80046f2:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80046f4:	4b25      	ldr	r3, [pc, #148]	; (800478c <HAL_ETH_Init+0xf4>)
 80046f6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	6812      	ldr	r2, [r2, #0]
 8004706:	f043 0301 	orr.w	r3, r3, #1
 800470a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800470e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004710:	f7ff f9c6 	bl	8003aa0 <HAL_GetTick>
 8004714:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8004716:	e011      	b.n	800473c <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8004718:	f7ff f9c2 	bl	8003aa0 <HAL_GetTick>
 800471c:	4602      	mov	r2, r0
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	1ad3      	subs	r3, r2, r3
 8004722:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004726:	d909      	bls.n	800473c <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2204      	movs	r2, #4
 800472c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	22e0      	movs	r2, #224	; 0xe0
 8004734:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	e021      	b.n	8004780 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 0301 	and.w	r3, r3, #1
 800474a:	2b00      	cmp	r3, #0
 800474c:	d1e4      	bne.n	8004718 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f000 fdf0 	bl	8005334 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	f000 fe97 	bl	8005488 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f000 feed 	bl	800553a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	461a      	mov	r2, r3
 8004766:	2100      	movs	r1, #0
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	f000 fe55 	bl	8005418 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2200      	movs	r2, #0
 8004772:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2210      	movs	r2, #16
 800477a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800477e:	2300      	movs	r3, #0
}
 8004780:	4618      	mov	r0, r3
 8004782:	3710      	adds	r7, #16
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}
 8004788:	40023800 	.word	0x40023800
 800478c:	40013800 	.word	0x40013800

08004790 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b084      	sub	sp, #16
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800479e:	2b10      	cmp	r3, #16
 80047a0:	d150      	bne.n	8004844 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2223      	movs	r2, #35	; 0x23
 80047a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2204      	movs	r2, #4
 80047ae:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f000 f9fd 	bl	8004bb0 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f042 0208 	orr.w	r2, r2, #8
 80047c4:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80047ce:	2001      	movs	r0, #1
 80047d0:	f7ff f972 	bl	8003ab8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	68fa      	ldr	r2, [r7, #12]
 80047da:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f042 0204 	orr.w	r2, r2, #4
 80047ea:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80047f4:	2001      	movs	r0, #1
 80047f6:	f7ff f95f 	bl	8003ab8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	68fa      	ldr	r2, [r7, #12]
 8004800:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f000 fc36 	bl	8005074 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004810:	699b      	ldr	r3, [r3, #24]
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	6812      	ldr	r2, [r2, #0]
 8004816:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800481a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800481e:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004828:	699b      	ldr	r3, [r3, #24]
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	6812      	ldr	r2, [r2, #0]
 800482e:	f043 0302 	orr.w	r3, r3, #2
 8004832:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004836:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2223      	movs	r2, #35	; 0x23
 800483c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8004840:	2300      	movs	r3, #0
 8004842:	e000      	b.n	8004846 <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 8004844:	2301      	movs	r3, #1
  }
}
 8004846:	4618      	mov	r0, r3
 8004848:	3710      	adds	r7, #16
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}

0800484e <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 800484e:	b580      	push	{r7, lr}
 8004850:	b084      	sub	sp, #16
 8004852:	af00      	add	r7, sp, #0
 8004854:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800485c:	2b23      	cmp	r3, #35	; 0x23
 800485e:	d14a      	bne.n	80048f6 <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2223      	movs	r2, #35	; 0x23
 8004864:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004870:	699b      	ldr	r3, [r3, #24]
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	6812      	ldr	r2, [r2, #0]
 8004876:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800487a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800487e:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004888:	699b      	ldr	r3, [r3, #24]
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	6812      	ldr	r2, [r2, #0]
 800488e:	f023 0302 	bic.w	r3, r3, #2
 8004892:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004896:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f022 0204 	bic.w	r2, r2, #4
 80048a6:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80048b0:	2001      	movs	r0, #1
 80048b2:	f7ff f901 	bl	8003ab8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	68fa      	ldr	r2, [r7, #12]
 80048bc:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f000 fbd8 	bl	8005074 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f022 0208 	bic.w	r2, r2, #8
 80048d2:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80048dc:	2001      	movs	r0, #1
 80048de:	f7ff f8eb 	bl	8003ab8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	68fa      	ldr	r2, [r7, #12]
 80048e8:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2210      	movs	r2, #16
 80048ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 80048f2:	2300      	movs	r3, #0
 80048f4:	e000      	b.n	80048f8 <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
  }
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	3710      	adds	r7, #16
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}

08004900 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b086      	sub	sp, #24
 8004904:	af00      	add	r7, sp, #0
 8004906:	60f8      	str	r0, [r7, #12]
 8004908:	60b9      	str	r1, [r7, #8]
 800490a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d109      	bne.n	8004926 <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004918:	f043 0201 	orr.w	r2, r3, #1
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e07c      	b.n	8004a20 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800492c:	2b23      	cmp	r3, #35	; 0x23
 800492e:	d176      	bne.n	8004a1e <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8004930:	2200      	movs	r2, #0
 8004932:	68b9      	ldr	r1, [r7, #8]
 8004934:	68f8      	ldr	r0, [r7, #12]
 8004936:	f000 fe6d 	bl	8005614 <ETH_Prepare_Tx_Descriptors>
 800493a:	4603      	mov	r3, r0
 800493c:	2b00      	cmp	r3, #0
 800493e:	d009      	beq.n	8004954 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004946:	f043 0202 	orr.w	r2, r3, #2
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	e065      	b.n	8004a20 <HAL_ETH_Transmit+0x120>
  __ASM volatile ("dsb 0xF":::"memory");
 8004954:	f3bf 8f4f 	dsb	sy
}
 8004958:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	3206      	adds	r2, #6
 8004962:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004966:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800496c:	1c5a      	adds	r2, r3, #1
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	629a      	str	r2, [r3, #40]	; 0x28
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004976:	2b03      	cmp	r3, #3
 8004978:	d904      	bls.n	8004984 <HAL_ETH_Transmit+0x84>
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800497e:	1f1a      	subs	r2, r3, #4
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	3106      	adds	r1, #6
 8004990:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004994:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004998:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 800499a:	f7ff f881 	bl	8003aa0 <HAL_GetTick>
 800499e:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80049a0:	e037      	b.n	8004a12 <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049aa:	695b      	ldr	r3, [r3, #20]
 80049ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d011      	beq.n	80049d8 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049ba:	f043 0208 	orr.w	r2, r3, #8
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049cc:	695a      	ldr	r2, [r3, #20]
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	e023      	b.n	8004a20 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049de:	d018      	beq.n	8004a12 <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80049e0:	f7ff f85e 	bl	8003aa0 <HAL_GetTick>
 80049e4:	4602      	mov	r2, r0
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	1ad3      	subs	r3, r2, r3
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d302      	bcc.n	80049f6 <HAL_ETH_Transmit+0xf6>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d10d      	bne.n	8004a12 <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049fc:	f043 0204 	orr.w	r2, r3, #4
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8004a0c:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e006      	b.n	8004a20 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	dbc3      	blt.n	80049a2 <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	e000      	b.n	8004a20 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
  }
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	3718      	adds	r7, #24
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}

08004a28 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b088      	sub	sp, #32
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8004a32:	2300      	movs	r3, #0
 8004a34:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8004a36:	2300      	movs	r3, #0
 8004a38:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d109      	bne.n	8004a54 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a46:	f043 0201 	orr.w	r2, r3, #1
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8004a50:	2301      	movs	r3, #1
 8004a52:	e0a8      	b.n	8004ba6 <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a5a:	2b23      	cmp	r3, #35	; 0x23
 8004a5c:	d001      	beq.n	8004a62 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	e0a1      	b.n	8004ba6 <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a66:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	69fa      	ldr	r2, [r7, #28]
 8004a6c:	3212      	adds	r2, #18
 8004a6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a72:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a78:	f1c3 0304 	rsb	r3, r3, #4
 8004a7c:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8004a7e:	e06a      	b.n	8004b56 <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8004a80:	69bb      	ldr	r3, [r7, #24]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d007      	beq.n	8004a9c <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 8004a8c:	69bb      	ldr	r3, [r7, #24]
 8004a8e:	699a      	ldr	r2, [r3, #24]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 8004a94:	69bb      	ldr	r3, [r7, #24]
 8004a96:	69da      	ldr	r2, [r3, #28]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8004a9c:	69bb      	ldr	r3, [r7, #24]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d103      	bne.n	8004ab0 <HAL_ETH_ReadData+0x88>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d040      	beq.n	8004b32 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8004ab0:	69bb      	ldr	r3, [r7, #24]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d005      	beq.n	8004ac8 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	695b      	ldr	r3, [r3, #20]
 8004acc:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8004ace:	69bb      	ldr	r3, [r7, #24]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d00c      	beq.n	8004af4 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8004ada:	69bb      	ldr	r3, [r7, #24]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	0c1b      	lsrs	r3, r3, #16
 8004ae0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8004ae4:	3b04      	subs	r3, #4
 8004ae6:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8004ae8:	69bb      	ldr	r3, [r7, #24]
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8004af0:	2301      	movs	r3, #1
 8004af2:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8004af4:	69bb      	ldr	r3, [r7, #24]
 8004af6:	689a      	ldr	r2, [r3, #8]
 8004af8:	69bb      	ldr	r3, [r7, #24]
 8004afa:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8004b08:	69bb      	ldr	r3, [r7, #24]
 8004b0a:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8004b0c:	461a      	mov	r2, r3
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	b29b      	uxth	r3, r3
 8004b12:	f005 fb51 	bl	800a1b8 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b1a:	1c5a      	adds	r2, r3, #1
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	441a      	add	r2, r3
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8004b2c:	69bb      	ldr	r3, [r7, #24]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8004b32:	69fb      	ldr	r3, [r7, #28]
 8004b34:	3301      	adds	r3, #1
 8004b36:	61fb      	str	r3, [r7, #28]
 8004b38:	69fb      	ldr	r3, [r7, #28]
 8004b3a:	2b03      	cmp	r3, #3
 8004b3c:	d902      	bls.n	8004b44 <HAL_ETH_ReadData+0x11c>
 8004b3e:	69fb      	ldr	r3, [r7, #28]
 8004b40:	3b04      	subs	r3, #4
 8004b42:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	69fa      	ldr	r2, [r7, #28]
 8004b48:	3212      	adds	r2, #18
 8004b4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b4e:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	3301      	adds	r3, #1
 8004b54:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8004b56:	69bb      	ldr	r3, [r7, #24]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	db06      	blt.n	8004b6c <HAL_ETH_ReadData+0x144>
 8004b5e:	697a      	ldr	r2, [r7, #20]
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	429a      	cmp	r2, r3
 8004b64:	d202      	bcs.n	8004b6c <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 8004b66:	7bfb      	ldrb	r3, [r7, #15]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d089      	beq.n	8004a80 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	441a      	add	r2, r3
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d002      	beq.n	8004b86 <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	f000 f815 	bl	8004bb0 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	69fa      	ldr	r2, [r7, #28]
 8004b8a:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8004b8c:	7bfb      	ldrb	r3, [r7, #15]
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	d108      	bne.n	8004ba4 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	e000      	b.n	8004ba6 <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8004ba4:	2301      	movs	r3, #1
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3720      	adds	r7, #32
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}
	...

08004bb0 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b088      	sub	sp, #32
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004bc4:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	69fa      	ldr	r2, [r7, #28]
 8004bca:	3212      	adds	r2, #18
 8004bcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bd0:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bd6:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8004bd8:	e040      	b.n	8004c5c <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	6a1b      	ldr	r3, [r3, #32]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d112      	bne.n	8004c08 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8004be2:	f107 030c 	add.w	r3, r7, #12
 8004be6:	4618      	mov	r0, r3
 8004be8:	f005 fab6 	bl	800a158 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d102      	bne.n	8004bf8 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	74fb      	strb	r3, [r7, #19]
 8004bf6:	e007      	b.n	8004c08 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	461a      	mov	r2, r3
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	461a      	mov	r2, r3
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8004c08:	7cfb      	ldrb	r3, [r7, #19]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d026      	beq.n	8004c5c <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d103      	bne.n	8004c1e <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	4a1e      	ldr	r2, [pc, #120]	; (8004c94 <ETH_UpdateDescriptor+0xe4>)
 8004c1a:	605a      	str	r2, [r3, #4]
 8004c1c:	e003      	b.n	8004c26 <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8004c24:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dmb 0xF":::"memory");
 8004c26:	f3bf 8f5f 	dmb	sy
}
 8004c2a:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8004c38:	69fb      	ldr	r3, [r7, #28]
 8004c3a:	3301      	adds	r3, #1
 8004c3c:	61fb      	str	r3, [r7, #28]
 8004c3e:	69fb      	ldr	r3, [r7, #28]
 8004c40:	2b03      	cmp	r3, #3
 8004c42:	d902      	bls.n	8004c4a <ETH_UpdateDescriptor+0x9a>
 8004c44:	69fb      	ldr	r3, [r7, #28]
 8004c46:	3b04      	subs	r3, #4
 8004c48:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	69fa      	ldr	r2, [r7, #28]
 8004c4e:	3212      	adds	r2, #18
 8004c50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c54:	617b      	str	r3, [r7, #20]
      desccount--;
 8004c56:	69bb      	ldr	r3, [r7, #24]
 8004c58:	3b01      	subs	r3, #1
 8004c5a:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8004c5c:	69bb      	ldr	r3, [r7, #24]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d002      	beq.n	8004c68 <ETH_UpdateDescriptor+0xb8>
 8004c62:	7cfb      	ldrb	r3, [r7, #19]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d1b8      	bne.n	8004bda <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c6c:	69ba      	ldr	r2, [r7, #24]
 8004c6e:	429a      	cmp	r2, r3
 8004c70:	d00c      	beq.n	8004c8c <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c7a:	461a      	mov	r2, r3
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	69fa      	ldr	r2, [r7, #28]
 8004c84:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	69ba      	ldr	r2, [r7, #24]
 8004c8a:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8004c8c:	bf00      	nop
 8004c8e:	3720      	adds	r7, #32
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}
 8004c94:	800045f8 	.word	0x800045f8

08004c98 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b086      	sub	sp, #24
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	60f8      	str	r0, [r7, #12]
 8004ca0:	60b9      	str	r1, [r7, #8]
 8004ca2:	607a      	str	r2, [r7, #4]
 8004ca4:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	691b      	ldr	r3, [r3, #16]
 8004cac:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	f003 031c 	and.w	r3, r3, #28
 8004cb4:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	02db      	lsls	r3, r3, #11
 8004cba:	b29b      	uxth	r3, r3
 8004cbc:	697a      	ldr	r2, [r7, #20]
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	019b      	lsls	r3, r3, #6
 8004cc6:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8004cca:	697a      	ldr	r2, [r7, #20]
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	f023 0302 	bic.w	r3, r3, #2
 8004cd6:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	f043 0301 	orr.w	r3, r3, #1
 8004cde:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	697a      	ldr	r2, [r7, #20]
 8004ce6:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8004ce8:	f7fe feda 	bl	8003aa0 <HAL_GetTick>
 8004cec:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004cee:	e00d      	b.n	8004d0c <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8004cf0:	f7fe fed6 	bl	8003aa0 <HAL_GetTick>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	1ad3      	subs	r3, r2, r3
 8004cfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cfe:	d301      	bcc.n	8004d04 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8004d00:	2301      	movs	r3, #1
 8004d02:	e010      	b.n	8004d26 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	691b      	ldr	r3, [r3, #16]
 8004d0a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	f003 0301 	and.w	r3, r3, #1
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d1ec      	bne.n	8004cf0 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	695b      	ldr	r3, [r3, #20]
 8004d1c:	b29b      	uxth	r3, r3
 8004d1e:	461a      	mov	r2, r3
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004d24:	2300      	movs	r3, #0
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	3718      	adds	r7, #24
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}

08004d2e <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8004d2e:	b580      	push	{r7, lr}
 8004d30:	b086      	sub	sp, #24
 8004d32:	af00      	add	r7, sp, #0
 8004d34:	60f8      	str	r0, [r7, #12]
 8004d36:	60b9      	str	r1, [r7, #8]
 8004d38:	607a      	str	r2, [r7, #4]
 8004d3a:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	691b      	ldr	r3, [r3, #16]
 8004d42:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	f003 031c 	and.w	r3, r3, #28
 8004d4a:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	02db      	lsls	r3, r3, #11
 8004d50:	b29b      	uxth	r3, r3
 8004d52:	697a      	ldr	r2, [r7, #20]
 8004d54:	4313      	orrs	r3, r2
 8004d56:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	019b      	lsls	r3, r3, #6
 8004d5c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8004d60:	697a      	ldr	r2, [r7, #20]
 8004d62:	4313      	orrs	r3, r2
 8004d64:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	f043 0302 	orr.w	r3, r3, #2
 8004d6c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	f043 0301 	orr.w	r3, r3, #1
 8004d74:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	b29a      	uxth	r2, r3
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	697a      	ldr	r2, [r7, #20]
 8004d86:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004d88:	f7fe fe8a 	bl	8003aa0 <HAL_GetTick>
 8004d8c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004d8e:	e00d      	b.n	8004dac <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8004d90:	f7fe fe86 	bl	8003aa0 <HAL_GetTick>
 8004d94:	4602      	mov	r2, r0
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	1ad3      	subs	r3, r2, r3
 8004d9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d9e:	d301      	bcc.n	8004da4 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8004da0:	2301      	movs	r3, #1
 8004da2:	e009      	b.n	8004db8 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	691b      	ldr	r3, [r3, #16]
 8004daa:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	f003 0301 	and.w	r3, r3, #1
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d1ec      	bne.n	8004d90 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8004db6:	2300      	movs	r3, #0
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	3718      	adds	r7, #24
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}

08004dc0 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b083      	sub	sp, #12
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d101      	bne.n	8004dd4 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	e0d9      	b.n	8004f88 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f003 0310 	and.w	r3, r3, #16
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	bf14      	ite	ne
 8004de2:	2301      	movne	r3, #1
 8004de4:	2300      	moveq	r3, #0
 8004de6:	b2db      	uxtb	r3, r3
 8004de8:	461a      	mov	r2, r3
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	bf0c      	ite	eq
 8004e0c:	2301      	moveq	r3, #1
 8004e0e:	2300      	movne	r3, #0
 8004e10:	b2db      	uxtb	r3, r3
 8004e12:	461a      	mov	r2, r3
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	bf14      	ite	ne
 8004e28:	2301      	movne	r3, #1
 8004e2a:	2300      	moveq	r3, #0
 8004e2c:	b2db      	uxtb	r3, r3
 8004e2e:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	bf0c      	ite	eq
 8004e42:	2301      	moveq	r3, #1
 8004e44:	2300      	movne	r3, #0
 8004e46:	b2db      	uxtb	r3, r3
 8004e48:	461a      	mov	r2, r3
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	bf14      	ite	ne
 8004e5c:	2301      	movne	r3, #1
 8004e5e:	2300      	moveq	r3, #0
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	461a      	mov	r2, r3
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	bf0c      	ite	eq
 8004e92:	2301      	moveq	r3, #1
 8004e94:	2300      	movne	r3, #0
 8004e96:	b2db      	uxtb	r3, r3
 8004e98:	461a      	mov	r2, r3
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	bf0c      	ite	eq
 8004eac:	2301      	moveq	r3, #1
 8004eae:	2300      	movne	r3, #0
 8004eb0:	b2db      	uxtb	r3, r3
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	bf14      	ite	ne
 8004ec6:	2301      	movne	r3, #1
 8004ec8:	2300      	moveq	r3, #0
 8004eca:	b2db      	uxtb	r3, r3
 8004ecc:	461a      	mov	r2, r3
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	bf14      	ite	ne
 8004eee:	2301      	movne	r3, #1
 8004ef0:	2300      	moveq	r3, #0
 8004ef2:	b2db      	uxtb	r3, r3
 8004ef4:	461a      	mov	r2, r3
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	699b      	ldr	r3, [r3, #24]
 8004f00:	f003 0302 	and.w	r3, r3, #2
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	bf14      	ite	ne
 8004f08:	2301      	movne	r3, #1
 8004f0a:	2300      	moveq	r3, #0
 8004f0c:	b2db      	uxtb	r3, r3
 8004f0e:	461a      	mov	r2, r3
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	699b      	ldr	r3, [r3, #24]
 8004f1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	bf0c      	ite	eq
 8004f24:	2301      	moveq	r3, #1
 8004f26:	2300      	movne	r3, #0
 8004f28:	b2db      	uxtb	r3, r3
 8004f2a:	461a      	mov	r2, r3
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	699b      	ldr	r3, [r3, #24]
 8004f38:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	699b      	ldr	r3, [r3, #24]
 8004f46:	0c1b      	lsrs	r3, r3, #16
 8004f48:	b29a      	uxth	r2, r3
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	699b      	ldr	r3, [r3, #24]
 8004f54:	f003 0304 	and.w	r3, r3, #4
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	bf14      	ite	ne
 8004f5c:	2301      	movne	r3, #1
 8004f5e:	2300      	moveq	r3, #0
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	461a      	mov	r2, r3
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	699b      	ldr	r3, [r3, #24]
 8004f70:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	bf14      	ite	ne
 8004f78:	2301      	movne	r3, #1
 8004f7a:	2300      	moveq	r3, #0
 8004f7c:	b2db      	uxtb	r3, r3
 8004f7e:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8004f86:	2300      	movs	r3, #0
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	370c      	adds	r7, #12
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr

08004f94 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b082      	sub	sp, #8
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
 8004f9c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d101      	bne.n	8004fa8 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	e00b      	b.n	8004fc0 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fae:	2b10      	cmp	r3, #16
 8004fb0:	d105      	bne.n	8004fbe <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8004fb2:	6839      	ldr	r1, [r7, #0]
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	f000 f883 	bl	80050c0 <ETH_SetMACConfig>

    return HAL_OK;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	e000      	b.n	8004fc0 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8004fbe:	2301      	movs	r3, #1
  }
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3708      	adds	r7, #8
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}

08004fc8 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b084      	sub	sp, #16
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	691b      	ldr	r3, [r3, #16]
 8004fd6:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f023 031c 	bic.w	r3, r3, #28
 8004fde:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004fe0:	f003 f988 	bl	80082f4 <HAL_RCC_GetHCLKFreq>
 8004fe4:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	4a1d      	ldr	r2, [pc, #116]	; (8005060 <HAL_ETH_SetMDIOClockRange+0x98>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d908      	bls.n	8005000 <HAL_ETH_SetMDIOClockRange+0x38>
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	4a1c      	ldr	r2, [pc, #112]	; (8005064 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d804      	bhi.n	8005000 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	f043 0308 	orr.w	r3, r3, #8
 8004ffc:	60fb      	str	r3, [r7, #12]
 8004ffe:	e027      	b.n	8005050 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	4a18      	ldr	r2, [pc, #96]	; (8005064 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d908      	bls.n	800501a <HAL_ETH_SetMDIOClockRange+0x52>
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	4a17      	ldr	r2, [pc, #92]	; (8005068 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d204      	bcs.n	800501a <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f043 030c 	orr.w	r3, r3, #12
 8005016:	60fb      	str	r3, [r7, #12]
 8005018:	e01a      	b.n	8005050 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	4a12      	ldr	r2, [pc, #72]	; (8005068 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d303      	bcc.n	800502a <HAL_ETH_SetMDIOClockRange+0x62>
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	4a11      	ldr	r2, [pc, #68]	; (800506c <HAL_ETH_SetMDIOClockRange+0xa4>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d911      	bls.n	800504e <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	4a0f      	ldr	r2, [pc, #60]	; (800506c <HAL_ETH_SetMDIOClockRange+0xa4>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d908      	bls.n	8005044 <HAL_ETH_SetMDIOClockRange+0x7c>
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	4a0e      	ldr	r2, [pc, #56]	; (8005070 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d804      	bhi.n	8005044 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	f043 0304 	orr.w	r3, r3, #4
 8005040:	60fb      	str	r3, [r7, #12]
 8005042:	e005      	b.n	8005050 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f043 0310 	orr.w	r3, r3, #16
 800504a:	60fb      	str	r3, [r7, #12]
 800504c:	e000      	b.n	8005050 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800504e:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	68fa      	ldr	r2, [r7, #12]
 8005056:	611a      	str	r2, [r3, #16]
}
 8005058:	bf00      	nop
 800505a:	3710      	adds	r7, #16
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}
 8005060:	01312cff 	.word	0x01312cff
 8005064:	02160ebf 	.word	0x02160ebf
 8005068:	03938700 	.word	0x03938700
 800506c:	05f5e0ff 	.word	0x05f5e0ff
 8005070:	08f0d17f 	.word	0x08f0d17f

08005074 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b084      	sub	sp, #16
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800507c:	2300      	movs	r3, #0
 800507e:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005088:	699b      	ldr	r3, [r3, #24]
 800508a:	687a      	ldr	r2, [r7, #4]
 800508c:	6812      	ldr	r2, [r2, #0]
 800508e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005092:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005096:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050a0:	699b      	ldr	r3, [r3, #24]
 80050a2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80050a4:	2001      	movs	r0, #1
 80050a6:	f7fe fd07 	bl	8003ab8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80050b4:	6193      	str	r3, [r2, #24]
}
 80050b6:	bf00      	nop
 80050b8:	3710      	adds	r7, #16
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}
	...

080050c0 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b084      	sub	sp, #16
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
 80050c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80050d2:	68fa      	ldr	r2, [r7, #12]
 80050d4:	4b51      	ldr	r3, [pc, #324]	; (800521c <ETH_SetMACConfig+0x15c>)
 80050d6:	4013      	ands	r3, r2
 80050d8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	7c1b      	ldrb	r3, [r3, #16]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d102      	bne.n	80050e8 <ETH_SetMACConfig+0x28>
 80050e2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80050e6:	e000      	b.n	80050ea <ETH_SetMACConfig+0x2a>
 80050e8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	7c5b      	ldrb	r3, [r3, #17]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d102      	bne.n	80050f8 <ETH_SetMACConfig+0x38>
 80050f2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80050f6:	e000      	b.n	80050fa <ETH_SetMACConfig+0x3a>
 80050f8:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80050fa:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8005100:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	7fdb      	ldrb	r3, [r3, #31]
 8005106:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8005108:	431a      	orrs	r2, r3
                        macconf->Speed |
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800510e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8005110:	683a      	ldr	r2, [r7, #0]
 8005112:	7f92      	ldrb	r2, [r2, #30]
 8005114:	2a00      	cmp	r2, #0
 8005116:	d102      	bne.n	800511e <ETH_SetMACConfig+0x5e>
 8005118:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800511c:	e000      	b.n	8005120 <ETH_SetMACConfig+0x60>
 800511e:	2200      	movs	r2, #0
                        macconf->Speed |
 8005120:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	7f1b      	ldrb	r3, [r3, #28]
 8005126:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8005128:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800512e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	791b      	ldrb	r3, [r3, #4]
 8005134:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8005136:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8005138:	683a      	ldr	r2, [r7, #0]
 800513a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800513e:	2a00      	cmp	r2, #0
 8005140:	d102      	bne.n	8005148 <ETH_SetMACConfig+0x88>
 8005142:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005146:	e000      	b.n	800514a <ETH_SetMACConfig+0x8a>
 8005148:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800514a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	7bdb      	ldrb	r3, [r3, #15]
 8005150:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8005152:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8005158:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005160:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8005162:	4313      	orrs	r3, r2
 8005164:	68fa      	ldr	r2, [r7, #12]
 8005166:	4313      	orrs	r3, r2
 8005168:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	68fa      	ldr	r2, [r7, #12]
 8005170:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800517a:	2001      	movs	r0, #1
 800517c:	f7fe fc9c 	bl	8003ab8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	68fa      	ldr	r2, [r7, #12]
 8005186:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	699b      	ldr	r3, [r3, #24]
 800518e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8005190:	68fa      	ldr	r2, [r7, #12]
 8005192:	f64f 7341 	movw	r3, #65345	; 0xff41
 8005196:	4013      	ands	r3, r2
 8005198:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800519e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80051a0:	683a      	ldr	r2, [r7, #0]
 80051a2:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80051a6:	2a00      	cmp	r2, #0
 80051a8:	d101      	bne.n	80051ae <ETH_SetMACConfig+0xee>
 80051aa:	2280      	movs	r2, #128	; 0x80
 80051ac:	e000      	b.n	80051b0 <ETH_SetMACConfig+0xf0>
 80051ae:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80051b0:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80051b6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80051b8:	683a      	ldr	r2, [r7, #0]
 80051ba:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80051be:	2a01      	cmp	r2, #1
 80051c0:	d101      	bne.n	80051c6 <ETH_SetMACConfig+0x106>
 80051c2:	2208      	movs	r2, #8
 80051c4:	e000      	b.n	80051c8 <ETH_SetMACConfig+0x108>
 80051c6:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80051c8:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80051ca:	683a      	ldr	r2, [r7, #0]
 80051cc:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80051d0:	2a01      	cmp	r2, #1
 80051d2:	d101      	bne.n	80051d8 <ETH_SetMACConfig+0x118>
 80051d4:	2204      	movs	r2, #4
 80051d6:	e000      	b.n	80051da <ETH_SetMACConfig+0x11a>
 80051d8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80051da:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80051dc:	683a      	ldr	r2, [r7, #0]
 80051de:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80051e2:	2a01      	cmp	r2, #1
 80051e4:	d101      	bne.n	80051ea <ETH_SetMACConfig+0x12a>
 80051e6:	2202      	movs	r2, #2
 80051e8:	e000      	b.n	80051ec <ETH_SetMACConfig+0x12c>
 80051ea:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80051ec:	4313      	orrs	r3, r2
 80051ee:	68fa      	ldr	r2, [r7, #12]
 80051f0:	4313      	orrs	r3, r2
 80051f2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	68fa      	ldr	r2, [r7, #12]
 80051fa:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	699b      	ldr	r3, [r3, #24]
 8005202:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005204:	2001      	movs	r0, #1
 8005206:	f7fe fc57 	bl	8003ab8 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	68fa      	ldr	r2, [r7, #12]
 8005210:	619a      	str	r2, [r3, #24]
}
 8005212:	bf00      	nop
 8005214:	3710      	adds	r7, #16
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}
 800521a:	bf00      	nop
 800521c:	ff20810f 	.word	0xff20810f

08005220 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b084      	sub	sp, #16
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
 8005228:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005232:	699b      	ldr	r3, [r3, #24]
 8005234:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8005236:	68fa      	ldr	r2, [r7, #12]
 8005238:	4b3d      	ldr	r3, [pc, #244]	; (8005330 <ETH_SetDMAConfig+0x110>)
 800523a:	4013      	ands	r3, r2
 800523c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	7b1b      	ldrb	r3, [r3, #12]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d102      	bne.n	800524c <ETH_SetDMAConfig+0x2c>
 8005246:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800524a:	e000      	b.n	800524e <ETH_SetDMAConfig+0x2e>
 800524c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	7b5b      	ldrb	r3, [r3, #13]
 8005252:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8005254:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8005256:	683a      	ldr	r2, [r7, #0]
 8005258:	7f52      	ldrb	r2, [r2, #29]
 800525a:	2a00      	cmp	r2, #0
 800525c:	d102      	bne.n	8005264 <ETH_SetDMAConfig+0x44>
 800525e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005262:	e000      	b.n	8005266 <ETH_SetDMAConfig+0x46>
 8005264:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8005266:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	7b9b      	ldrb	r3, [r3, #14]
 800526c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800526e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8005274:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	7f1b      	ldrb	r3, [r3, #28]
 800527a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 800527c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	7f9b      	ldrb	r3, [r3, #30]
 8005282:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8005284:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800528a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005292:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8005294:	4313      	orrs	r3, r2
 8005296:	68fa      	ldr	r2, [r7, #12]
 8005298:	4313      	orrs	r3, r2
 800529a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052a4:	461a      	mov	r2, r3
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052b2:	699b      	ldr	r3, [r3, #24]
 80052b4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80052b6:	2001      	movs	r0, #1
 80052b8:	f7fe fbfe 	bl	8003ab8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052c4:	461a      	mov	r2, r3
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	791b      	ldrb	r3, [r3, #4]
 80052ce:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80052d4:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80052da:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80052e0:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80052e8:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80052ea:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052f0:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80052f2:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80052f8:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80052fa:	687a      	ldr	r2, [r7, #4]
 80052fc:	6812      	ldr	r2, [r2, #0]
 80052fe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005302:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005306:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005314:	2001      	movs	r0, #1
 8005316:	f7fe fbcf 	bl	8003ab8 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005322:	461a      	mov	r2, r3
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	6013      	str	r3, [r2, #0]
}
 8005328:	bf00      	nop
 800532a:	3710      	adds	r7, #16
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}
 8005330:	f8de3f23 	.word	0xf8de3f23

08005334 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b0a6      	sub	sp, #152	; 0x98
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 800533c:	2301      	movs	r3, #1
 800533e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8005342:	2301      	movs	r3, #1
 8005344:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8005348:	2300      	movs	r3, #0
 800534a:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800534c:	2300      	movs	r3, #0
 800534e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8005352:	2301      	movs	r3, #1
 8005354:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8005358:	2300      	movs	r3, #0
 800535a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800535e:	2301      	movs	r3, #1
 8005360:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8005364:	2300      	movs	r3, #0
 8005366:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800536a:	2300      	movs	r3, #0
 800536c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8005370:	2300      	movs	r3, #0
 8005372:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8005374:	2300      	movs	r3, #0
 8005376:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800537a:	2300      	movs	r3, #0
 800537c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800537e:	2300      	movs	r3, #0
 8005380:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8005384:	2300      	movs	r3, #0
 8005386:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800538a:	2300      	movs	r3, #0
 800538c:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8005390:	2300      	movs	r3, #0
 8005392:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8005396:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800539a:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800539c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80053a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80053a2:	2300      	movs	r3, #0
 80053a4:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80053a8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80053ac:	4619      	mov	r1, r3
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f7ff fe86 	bl	80050c0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80053b4:	2301      	movs	r3, #1
 80053b6:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80053b8:	2301      	movs	r3, #1
 80053ba:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80053bc:	2301      	movs	r3, #1
 80053be:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80053c2:	2301      	movs	r3, #1
 80053c4:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80053c6:	2300      	movs	r3, #0
 80053c8:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80053ca:	2300      	movs	r3, #0
 80053cc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80053d0:	2300      	movs	r3, #0
 80053d2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80053d6:	2300      	movs	r3, #0
 80053d8:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80053da:	2301      	movs	r3, #1
 80053dc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80053e0:	2301      	movs	r3, #1
 80053e2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80053e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80053e8:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80053ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80053ee:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80053f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80053f4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80053f6:	2301      	movs	r3, #1
 80053f8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80053fc:	2300      	movs	r3, #0
 80053fe:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8005400:	2300      	movs	r3, #0
 8005402:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8005404:	f107 0308 	add.w	r3, r7, #8
 8005408:	4619      	mov	r1, r3
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f7ff ff08 	bl	8005220 <ETH_SetDMAConfig>
}
 8005410:	bf00      	nop
 8005412:	3798      	adds	r7, #152	; 0x98
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}

08005418 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8005418:	b480      	push	{r7}
 800541a:	b087      	sub	sp, #28
 800541c:	af00      	add	r7, sp, #0
 800541e:	60f8      	str	r0, [r7, #12]
 8005420:	60b9      	str	r1, [r7, #8]
 8005422:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	3305      	adds	r3, #5
 8005428:	781b      	ldrb	r3, [r3, #0]
 800542a:	021b      	lsls	r3, r3, #8
 800542c:	687a      	ldr	r2, [r7, #4]
 800542e:	3204      	adds	r2, #4
 8005430:	7812      	ldrb	r2, [r2, #0]
 8005432:	4313      	orrs	r3, r2
 8005434:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8005436:	68ba      	ldr	r2, [r7, #8]
 8005438:	4b11      	ldr	r3, [pc, #68]	; (8005480 <ETH_MACAddressConfig+0x68>)
 800543a:	4413      	add	r3, r2
 800543c:	461a      	mov	r2, r3
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	3303      	adds	r3, #3
 8005446:	781b      	ldrb	r3, [r3, #0]
 8005448:	061a      	lsls	r2, r3, #24
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	3302      	adds	r3, #2
 800544e:	781b      	ldrb	r3, [r3, #0]
 8005450:	041b      	lsls	r3, r3, #16
 8005452:	431a      	orrs	r2, r3
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	3301      	adds	r3, #1
 8005458:	781b      	ldrb	r3, [r3, #0]
 800545a:	021b      	lsls	r3, r3, #8
 800545c:	4313      	orrs	r3, r2
 800545e:	687a      	ldr	r2, [r7, #4]
 8005460:	7812      	ldrb	r2, [r2, #0]
 8005462:	4313      	orrs	r3, r2
 8005464:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8005466:	68ba      	ldr	r2, [r7, #8]
 8005468:	4b06      	ldr	r3, [pc, #24]	; (8005484 <ETH_MACAddressConfig+0x6c>)
 800546a:	4413      	add	r3, r2
 800546c:	461a      	mov	r2, r3
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	6013      	str	r3, [r2, #0]
}
 8005472:	bf00      	nop
 8005474:	371c      	adds	r7, #28
 8005476:	46bd      	mov	sp, r7
 8005478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547c:	4770      	bx	lr
 800547e:	bf00      	nop
 8005480:	40028040 	.word	0x40028040
 8005484:	40028044 	.word	0x40028044

08005488 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8005488:	b480      	push	{r7}
 800548a:	b085      	sub	sp, #20
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005490:	2300      	movs	r3, #0
 8005492:	60fb      	str	r3, [r7, #12]
 8005494:	e03e      	b.n	8005514 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	68d9      	ldr	r1, [r3, #12]
 800549a:	68fa      	ldr	r2, [r7, #12]
 800549c:	4613      	mov	r3, r2
 800549e:	009b      	lsls	r3, r3, #2
 80054a0:	4413      	add	r3, r2
 80054a2:	00db      	lsls	r3, r3, #3
 80054a4:	440b      	add	r3, r1
 80054a6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	2200      	movs	r2, #0
 80054ac:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	2200      	movs	r2, #0
 80054b2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	2200      	movs	r2, #0
 80054b8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	2200      	movs	r2, #0
 80054be:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80054c0:	68b9      	ldr	r1, [r7, #8]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	68fa      	ldr	r2, [r7, #12]
 80054c6:	3206      	adds	r2, #6
 80054c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	2b02      	cmp	r3, #2
 80054dc:	d80c      	bhi.n	80054f8 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	68d9      	ldr	r1, [r3, #12]
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	1c5a      	adds	r2, r3, #1
 80054e6:	4613      	mov	r3, r2
 80054e8:	009b      	lsls	r3, r3, #2
 80054ea:	4413      	add	r3, r2
 80054ec:	00db      	lsls	r3, r3, #3
 80054ee:	440b      	add	r3, r1
 80054f0:	461a      	mov	r2, r3
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	60da      	str	r2, [r3, #12]
 80054f6:	e004      	b.n	8005502 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	68db      	ldr	r3, [r3, #12]
 80054fc:	461a      	mov	r2, r3
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	3301      	adds	r3, #1
 8005512:	60fb      	str	r3, [r7, #12]
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2b03      	cmp	r3, #3
 8005518:	d9bd      	bls.n	8005496 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2200      	movs	r2, #0
 800551e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	68da      	ldr	r2, [r3, #12]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800552c:	611a      	str	r2, [r3, #16]
}
 800552e:	bf00      	nop
 8005530:	3714      	adds	r7, #20
 8005532:	46bd      	mov	sp, r7
 8005534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005538:	4770      	bx	lr

0800553a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800553a:	b480      	push	{r7}
 800553c:	b085      	sub	sp, #20
 800553e:	af00      	add	r7, sp, #0
 8005540:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005542:	2300      	movs	r3, #0
 8005544:	60fb      	str	r3, [r7, #12]
 8005546:	e046      	b.n	80055d6 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6919      	ldr	r1, [r3, #16]
 800554c:	68fa      	ldr	r2, [r7, #12]
 800554e:	4613      	mov	r3, r2
 8005550:	009b      	lsls	r3, r3, #2
 8005552:	4413      	add	r3, r2
 8005554:	00db      	lsls	r3, r3, #3
 8005556:	440b      	add	r3, r1
 8005558:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	2200      	movs	r2, #0
 800555e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	2200      	movs	r2, #0
 8005564:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	2200      	movs	r2, #0
 800556a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	2200      	movs	r2, #0
 8005570:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	2200      	movs	r2, #0
 8005576:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	2200      	movs	r2, #0
 800557c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005584:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	f244 52f8 	movw	r2, #17912	; 0x45f8
 800558c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800559a:	68b9      	ldr	r1, [r7, #8]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	68fa      	ldr	r2, [r7, #12]
 80055a0:	3212      	adds	r2, #18
 80055a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2b02      	cmp	r3, #2
 80055aa:	d80c      	bhi.n	80055c6 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6919      	ldr	r1, [r3, #16]
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	1c5a      	adds	r2, r3, #1
 80055b4:	4613      	mov	r3, r2
 80055b6:	009b      	lsls	r3, r3, #2
 80055b8:	4413      	add	r3, r2
 80055ba:	00db      	lsls	r3, r3, #3
 80055bc:	440b      	add	r3, r1
 80055be:	461a      	mov	r2, r3
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	60da      	str	r2, [r3, #12]
 80055c4:	e004      	b.n	80055d0 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	691b      	ldr	r3, [r3, #16]
 80055ca:	461a      	mov	r2, r3
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	3301      	adds	r3, #1
 80055d4:	60fb      	str	r3, [r7, #12]
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2b03      	cmp	r3, #3
 80055da:	d9b5      	bls.n	8005548 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2200      	movs	r2, #0
 80055e0:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2200      	movs	r2, #0
 80055e6:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2200      	movs	r2, #0
 80055ec:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2200      	movs	r2, #0
 80055f2:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2200      	movs	r2, #0
 80055f8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	691a      	ldr	r2, [r3, #16]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005606:	60da      	str	r2, [r3, #12]
}
 8005608:	bf00      	nop
 800560a:	3714      	adds	r7, #20
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr

08005614 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8005614:	b480      	push	{r7}
 8005616:	b08d      	sub	sp, #52	; 0x34
 8005618:	af00      	add	r7, sp, #0
 800561a:	60f8      	str	r0, [r7, #12]
 800561c:	60b9      	str	r1, [r7, #8]
 800561e:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	3318      	adds	r3, #24
 8005624:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	691b      	ldr	r3, [r3, #16]
 800562a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	691b      	ldr	r3, [r3, #16]
 8005630:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8005632:	2300      	movs	r3, #0
 8005634:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800563a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800563e:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8005646:	2300      	movs	r3, #0
 8005648:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800564a:	6a3b      	ldr	r3, [r7, #32]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005652:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005656:	d007      	beq.n	8005668 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8005658:	697a      	ldr	r2, [r7, #20]
 800565a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800565c:	3304      	adds	r3, #4
 800565e:	009b      	lsls	r3, r3, #2
 8005660:	4413      	add	r3, r2
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d001      	beq.n	800566c <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8005668:	2302      	movs	r3, #2
 800566a:	e0ff      	b.n	800586c <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 800566c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800566e:	3301      	adds	r3, #1
 8005670:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8005672:	69fb      	ldr	r3, [r7, #28]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	461a      	mov	r2, r3
 8005678:	6a3b      	ldr	r3, [r7, #32]
 800567a:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800567c:	6a3b      	ldr	r3, [r7, #32]
 800567e:	685a      	ldr	r2, [r3, #4]
 8005680:	4b7d      	ldr	r3, [pc, #500]	; (8005878 <ETH_Prepare_Tx_Descriptors+0x264>)
 8005682:	4013      	ands	r3, r2
 8005684:	69fa      	ldr	r2, [r7, #28]
 8005686:	6852      	ldr	r2, [r2, #4]
 8005688:	431a      	orrs	r2, r3
 800568a:	6a3b      	ldr	r3, [r7, #32]
 800568c:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f003 0301 	and.w	r3, r3, #1
 8005696:	2b00      	cmp	r3, #0
 8005698:	d008      	beq.n	80056ac <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 800569a:	6a3b      	ldr	r3, [r7, #32]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	695b      	ldr	r3, [r3, #20]
 80056a6:	431a      	orrs	r2, r3
 80056a8:	6a3b      	ldr	r3, [r7, #32]
 80056aa:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f003 0320 	and.w	r3, r3, #32
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d008      	beq.n	80056ca <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 80056b8:	6a3b      	ldr	r3, [r7, #32]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	691b      	ldr	r3, [r3, #16]
 80056c4:	431a      	orrs	r2, r3
 80056c6:	6a3b      	ldr	r3, [r7, #32]
 80056c8:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f003 0304 	and.w	r3, r3, #4
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d005      	beq.n	80056e2 <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 80056d6:	6a3b      	ldr	r3, [r7, #32]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80056de:	6a3b      	ldr	r3, [r7, #32]
 80056e0:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80056e2:	6a3b      	ldr	r3, [r7, #32]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80056ea:	6a3b      	ldr	r3, [r7, #32]
 80056ec:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 80056ee:	f3bf 8f5f 	dmb	sy
}
 80056f2:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80056f4:	6a3b      	ldr	r3, [r7, #32]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80056fc:	6a3b      	ldr	r3, [r7, #32]
 80056fe:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8005700:	e082      	b.n	8005808 <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8005702:	6a3b      	ldr	r3, [r7, #32]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800570a:	6a3b      	ldr	r3, [r7, #32]
 800570c:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d006      	beq.n	8005722 <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8005714:	6a3b      	ldr	r3, [r7, #32]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800571c:	6a3b      	ldr	r3, [r7, #32]
 800571e:	601a      	str	r2, [r3, #0]
 8005720:	e005      	b.n	800572e <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8005722:	6a3b      	ldr	r3, [r7, #32]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800572a:	6a3b      	ldr	r3, [r7, #32]
 800572c:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800572e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005730:	3301      	adds	r3, #1
 8005732:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005736:	2b03      	cmp	r3, #3
 8005738:	d902      	bls.n	8005740 <ETH_Prepare_Tx_Descriptors+0x12c>
 800573a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800573c:	3b04      	subs	r3, #4
 800573e:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005744:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005748:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800574a:	6a3b      	ldr	r3, [r7, #32]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005752:	6a3b      	ldr	r3, [r7, #32]
 8005754:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8005756:	6a3b      	ldr	r3, [r7, #32]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800575e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005762:	d007      	beq.n	8005774 <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8005764:	697a      	ldr	r2, [r7, #20]
 8005766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005768:	3304      	adds	r3, #4
 800576a:	009b      	lsls	r3, r3, #2
 800576c:	4413      	add	r3, r2
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d029      	beq.n	80057c8 <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800577c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005780:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8005782:	2300      	movs	r3, #0
 8005784:	62bb      	str	r3, [r7, #40]	; 0x28
 8005786:	e019      	b.n	80057bc <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 8005788:	f3bf 8f5f 	dmb	sy
}
 800578c:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800578e:	6a3b      	ldr	r3, [r7, #32]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005796:	6a3b      	ldr	r3, [r7, #32]
 8005798:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 800579a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800579c:	3301      	adds	r3, #1
 800579e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057a2:	2b03      	cmp	r3, #3
 80057a4:	d902      	bls.n	80057ac <ETH_Prepare_Tx_Descriptors+0x198>
 80057a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057a8:	3b04      	subs	r3, #4
 80057aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057b4:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 80057b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057b8:	3301      	adds	r3, #1
 80057ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80057bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c0:	429a      	cmp	r2, r3
 80057c2:	d3e1      	bcc.n	8005788 <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 80057c4:	2302      	movs	r3, #2
 80057c6:	e051      	b.n	800586c <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 80057c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ca:	3301      	adds	r3, #1
 80057cc:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 80057ce:	69fb      	ldr	r3, [r7, #28]
 80057d0:	689b      	ldr	r3, [r3, #8]
 80057d2:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80057d4:	69fb      	ldr	r3, [r7, #28]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	461a      	mov	r2, r3
 80057da:	6a3b      	ldr	r3, [r7, #32]
 80057dc:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80057de:	6a3b      	ldr	r3, [r7, #32]
 80057e0:	685a      	ldr	r2, [r3, #4]
 80057e2:	4b25      	ldr	r3, [pc, #148]	; (8005878 <ETH_Prepare_Tx_Descriptors+0x264>)
 80057e4:	4013      	ands	r3, r2
 80057e6:	69fa      	ldr	r2, [r7, #28]
 80057e8:	6852      	ldr	r2, [r2, #4]
 80057ea:	431a      	orrs	r2, r3
 80057ec:	6a3b      	ldr	r3, [r7, #32]
 80057ee:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 80057f0:	69bb      	ldr	r3, [r7, #24]
 80057f2:	3301      	adds	r3, #1
 80057f4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 80057f6:	f3bf 8f5f 	dmb	sy
}
 80057fa:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80057fc:	6a3b      	ldr	r3, [r7, #32]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005804:	6a3b      	ldr	r3, [r7, #32]
 8005806:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8005808:	69fb      	ldr	r3, [r7, #28]
 800580a:	689b      	ldr	r3, [r3, #8]
 800580c:	2b00      	cmp	r3, #0
 800580e:	f47f af78 	bne.w	8005702 <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d006      	beq.n	8005826 <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8005818:	6a3b      	ldr	r3, [r7, #32]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005820:	6a3b      	ldr	r3, [r7, #32]
 8005822:	601a      	str	r2, [r3, #0]
 8005824:	e005      	b.n	8005832 <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8005826:	6a3b      	ldr	r3, [r7, #32]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800582e:	6a3b      	ldr	r3, [r7, #32]
 8005830:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8005832:	6a3b      	ldr	r3, [r7, #32]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800583a:	6a3b      	ldr	r3, [r7, #32]
 800583c:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005842:	6979      	ldr	r1, [r7, #20]
 8005844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005846:	3304      	adds	r3, #4
 8005848:	009b      	lsls	r3, r3, #2
 800584a:	440b      	add	r3, r1
 800584c:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005852:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8005854:	b672      	cpsid	i
}
 8005856:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800585c:	69bb      	ldr	r3, [r7, #24]
 800585e:	4413      	add	r3, r2
 8005860:	1c5a      	adds	r2, r3, #1
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8005866:	b662      	cpsie	i
}
 8005868:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 800586a:	2300      	movs	r3, #0
}
 800586c:	4618      	mov	r0, r3
 800586e:	3734      	adds	r7, #52	; 0x34
 8005870:	46bd      	mov	sp, r7
 8005872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005876:	4770      	bx	lr
 8005878:	ffffe000 	.word	0xffffe000

0800587c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800587c:	b480      	push	{r7}
 800587e:	b089      	sub	sp, #36	; 0x24
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
 8005884:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8005886:	2300      	movs	r3, #0
 8005888:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800588a:	2300      	movs	r3, #0
 800588c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800588e:	2300      	movs	r3, #0
 8005890:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8005892:	2300      	movs	r3, #0
 8005894:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8005896:	2300      	movs	r3, #0
 8005898:	61fb      	str	r3, [r7, #28]
 800589a:	e175      	b.n	8005b88 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800589c:	2201      	movs	r2, #1
 800589e:	69fb      	ldr	r3, [r7, #28]
 80058a0:	fa02 f303 	lsl.w	r3, r2, r3
 80058a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	697a      	ldr	r2, [r7, #20]
 80058ac:	4013      	ands	r3, r2
 80058ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80058b0:	693a      	ldr	r2, [r7, #16]
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	429a      	cmp	r2, r3
 80058b6:	f040 8164 	bne.w	8005b82 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	f003 0303 	and.w	r3, r3, #3
 80058c2:	2b01      	cmp	r3, #1
 80058c4:	d005      	beq.n	80058d2 <HAL_GPIO_Init+0x56>
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	f003 0303 	and.w	r3, r3, #3
 80058ce:	2b02      	cmp	r3, #2
 80058d0:	d130      	bne.n	8005934 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80058d8:	69fb      	ldr	r3, [r7, #28]
 80058da:	005b      	lsls	r3, r3, #1
 80058dc:	2203      	movs	r2, #3
 80058de:	fa02 f303 	lsl.w	r3, r2, r3
 80058e2:	43db      	mvns	r3, r3
 80058e4:	69ba      	ldr	r2, [r7, #24]
 80058e6:	4013      	ands	r3, r2
 80058e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	68da      	ldr	r2, [r3, #12]
 80058ee:	69fb      	ldr	r3, [r7, #28]
 80058f0:	005b      	lsls	r3, r3, #1
 80058f2:	fa02 f303 	lsl.w	r3, r2, r3
 80058f6:	69ba      	ldr	r2, [r7, #24]
 80058f8:	4313      	orrs	r3, r2
 80058fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	69ba      	ldr	r2, [r7, #24]
 8005900:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005908:	2201      	movs	r2, #1
 800590a:	69fb      	ldr	r3, [r7, #28]
 800590c:	fa02 f303 	lsl.w	r3, r2, r3
 8005910:	43db      	mvns	r3, r3
 8005912:	69ba      	ldr	r2, [r7, #24]
 8005914:	4013      	ands	r3, r2
 8005916:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	091b      	lsrs	r3, r3, #4
 800591e:	f003 0201 	and.w	r2, r3, #1
 8005922:	69fb      	ldr	r3, [r7, #28]
 8005924:	fa02 f303 	lsl.w	r3, r2, r3
 8005928:	69ba      	ldr	r2, [r7, #24]
 800592a:	4313      	orrs	r3, r2
 800592c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	69ba      	ldr	r2, [r7, #24]
 8005932:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	f003 0303 	and.w	r3, r3, #3
 800593c:	2b03      	cmp	r3, #3
 800593e:	d017      	beq.n	8005970 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	68db      	ldr	r3, [r3, #12]
 8005944:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005946:	69fb      	ldr	r3, [r7, #28]
 8005948:	005b      	lsls	r3, r3, #1
 800594a:	2203      	movs	r2, #3
 800594c:	fa02 f303 	lsl.w	r3, r2, r3
 8005950:	43db      	mvns	r3, r3
 8005952:	69ba      	ldr	r2, [r7, #24]
 8005954:	4013      	ands	r3, r2
 8005956:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	689a      	ldr	r2, [r3, #8]
 800595c:	69fb      	ldr	r3, [r7, #28]
 800595e:	005b      	lsls	r3, r3, #1
 8005960:	fa02 f303 	lsl.w	r3, r2, r3
 8005964:	69ba      	ldr	r2, [r7, #24]
 8005966:	4313      	orrs	r3, r2
 8005968:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	69ba      	ldr	r2, [r7, #24]
 800596e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	f003 0303 	and.w	r3, r3, #3
 8005978:	2b02      	cmp	r3, #2
 800597a:	d123      	bne.n	80059c4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800597c:	69fb      	ldr	r3, [r7, #28]
 800597e:	08da      	lsrs	r2, r3, #3
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	3208      	adds	r2, #8
 8005984:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005988:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800598a:	69fb      	ldr	r3, [r7, #28]
 800598c:	f003 0307 	and.w	r3, r3, #7
 8005990:	009b      	lsls	r3, r3, #2
 8005992:	220f      	movs	r2, #15
 8005994:	fa02 f303 	lsl.w	r3, r2, r3
 8005998:	43db      	mvns	r3, r3
 800599a:	69ba      	ldr	r2, [r7, #24]
 800599c:	4013      	ands	r3, r2
 800599e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	691a      	ldr	r2, [r3, #16]
 80059a4:	69fb      	ldr	r3, [r7, #28]
 80059a6:	f003 0307 	and.w	r3, r3, #7
 80059aa:	009b      	lsls	r3, r3, #2
 80059ac:	fa02 f303 	lsl.w	r3, r2, r3
 80059b0:	69ba      	ldr	r2, [r7, #24]
 80059b2:	4313      	orrs	r3, r2
 80059b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80059b6:	69fb      	ldr	r3, [r7, #28]
 80059b8:	08da      	lsrs	r2, r3, #3
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	3208      	adds	r2, #8
 80059be:	69b9      	ldr	r1, [r7, #24]
 80059c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80059ca:	69fb      	ldr	r3, [r7, #28]
 80059cc:	005b      	lsls	r3, r3, #1
 80059ce:	2203      	movs	r2, #3
 80059d0:	fa02 f303 	lsl.w	r3, r2, r3
 80059d4:	43db      	mvns	r3, r3
 80059d6:	69ba      	ldr	r2, [r7, #24]
 80059d8:	4013      	ands	r3, r2
 80059da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	f003 0203 	and.w	r2, r3, #3
 80059e4:	69fb      	ldr	r3, [r7, #28]
 80059e6:	005b      	lsls	r3, r3, #1
 80059e8:	fa02 f303 	lsl.w	r3, r2, r3
 80059ec:	69ba      	ldr	r2, [r7, #24]
 80059ee:	4313      	orrs	r3, r2
 80059f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	69ba      	ldr	r2, [r7, #24]
 80059f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	f000 80be 	beq.w	8005b82 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005a06:	4b66      	ldr	r3, [pc, #408]	; (8005ba0 <HAL_GPIO_Init+0x324>)
 8005a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a0a:	4a65      	ldr	r2, [pc, #404]	; (8005ba0 <HAL_GPIO_Init+0x324>)
 8005a0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005a10:	6453      	str	r3, [r2, #68]	; 0x44
 8005a12:	4b63      	ldr	r3, [pc, #396]	; (8005ba0 <HAL_GPIO_Init+0x324>)
 8005a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a1a:	60fb      	str	r3, [r7, #12]
 8005a1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005a1e:	4a61      	ldr	r2, [pc, #388]	; (8005ba4 <HAL_GPIO_Init+0x328>)
 8005a20:	69fb      	ldr	r3, [r7, #28]
 8005a22:	089b      	lsrs	r3, r3, #2
 8005a24:	3302      	adds	r3, #2
 8005a26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005a2c:	69fb      	ldr	r3, [r7, #28]
 8005a2e:	f003 0303 	and.w	r3, r3, #3
 8005a32:	009b      	lsls	r3, r3, #2
 8005a34:	220f      	movs	r2, #15
 8005a36:	fa02 f303 	lsl.w	r3, r2, r3
 8005a3a:	43db      	mvns	r3, r3
 8005a3c:	69ba      	ldr	r2, [r7, #24]
 8005a3e:	4013      	ands	r3, r2
 8005a40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	4a58      	ldr	r2, [pc, #352]	; (8005ba8 <HAL_GPIO_Init+0x32c>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d037      	beq.n	8005aba <HAL_GPIO_Init+0x23e>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	4a57      	ldr	r2, [pc, #348]	; (8005bac <HAL_GPIO_Init+0x330>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d031      	beq.n	8005ab6 <HAL_GPIO_Init+0x23a>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	4a56      	ldr	r2, [pc, #344]	; (8005bb0 <HAL_GPIO_Init+0x334>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d02b      	beq.n	8005ab2 <HAL_GPIO_Init+0x236>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	4a55      	ldr	r2, [pc, #340]	; (8005bb4 <HAL_GPIO_Init+0x338>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d025      	beq.n	8005aae <HAL_GPIO_Init+0x232>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	4a54      	ldr	r2, [pc, #336]	; (8005bb8 <HAL_GPIO_Init+0x33c>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d01f      	beq.n	8005aaa <HAL_GPIO_Init+0x22e>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	4a53      	ldr	r2, [pc, #332]	; (8005bbc <HAL_GPIO_Init+0x340>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d019      	beq.n	8005aa6 <HAL_GPIO_Init+0x22a>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	4a52      	ldr	r2, [pc, #328]	; (8005bc0 <HAL_GPIO_Init+0x344>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d013      	beq.n	8005aa2 <HAL_GPIO_Init+0x226>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	4a51      	ldr	r2, [pc, #324]	; (8005bc4 <HAL_GPIO_Init+0x348>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d00d      	beq.n	8005a9e <HAL_GPIO_Init+0x222>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	4a50      	ldr	r2, [pc, #320]	; (8005bc8 <HAL_GPIO_Init+0x34c>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d007      	beq.n	8005a9a <HAL_GPIO_Init+0x21e>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	4a4f      	ldr	r2, [pc, #316]	; (8005bcc <HAL_GPIO_Init+0x350>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d101      	bne.n	8005a96 <HAL_GPIO_Init+0x21a>
 8005a92:	2309      	movs	r3, #9
 8005a94:	e012      	b.n	8005abc <HAL_GPIO_Init+0x240>
 8005a96:	230a      	movs	r3, #10
 8005a98:	e010      	b.n	8005abc <HAL_GPIO_Init+0x240>
 8005a9a:	2308      	movs	r3, #8
 8005a9c:	e00e      	b.n	8005abc <HAL_GPIO_Init+0x240>
 8005a9e:	2307      	movs	r3, #7
 8005aa0:	e00c      	b.n	8005abc <HAL_GPIO_Init+0x240>
 8005aa2:	2306      	movs	r3, #6
 8005aa4:	e00a      	b.n	8005abc <HAL_GPIO_Init+0x240>
 8005aa6:	2305      	movs	r3, #5
 8005aa8:	e008      	b.n	8005abc <HAL_GPIO_Init+0x240>
 8005aaa:	2304      	movs	r3, #4
 8005aac:	e006      	b.n	8005abc <HAL_GPIO_Init+0x240>
 8005aae:	2303      	movs	r3, #3
 8005ab0:	e004      	b.n	8005abc <HAL_GPIO_Init+0x240>
 8005ab2:	2302      	movs	r3, #2
 8005ab4:	e002      	b.n	8005abc <HAL_GPIO_Init+0x240>
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	e000      	b.n	8005abc <HAL_GPIO_Init+0x240>
 8005aba:	2300      	movs	r3, #0
 8005abc:	69fa      	ldr	r2, [r7, #28]
 8005abe:	f002 0203 	and.w	r2, r2, #3
 8005ac2:	0092      	lsls	r2, r2, #2
 8005ac4:	4093      	lsls	r3, r2
 8005ac6:	69ba      	ldr	r2, [r7, #24]
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005acc:	4935      	ldr	r1, [pc, #212]	; (8005ba4 <HAL_GPIO_Init+0x328>)
 8005ace:	69fb      	ldr	r3, [r7, #28]
 8005ad0:	089b      	lsrs	r3, r3, #2
 8005ad2:	3302      	adds	r3, #2
 8005ad4:	69ba      	ldr	r2, [r7, #24]
 8005ad6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005ada:	4b3d      	ldr	r3, [pc, #244]	; (8005bd0 <HAL_GPIO_Init+0x354>)
 8005adc:	689b      	ldr	r3, [r3, #8]
 8005ade:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	43db      	mvns	r3, r3
 8005ae4:	69ba      	ldr	r2, [r7, #24]
 8005ae6:	4013      	ands	r3, r2
 8005ae8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d003      	beq.n	8005afe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005af6:	69ba      	ldr	r2, [r7, #24]
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	4313      	orrs	r3, r2
 8005afc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005afe:	4a34      	ldr	r2, [pc, #208]	; (8005bd0 <HAL_GPIO_Init+0x354>)
 8005b00:	69bb      	ldr	r3, [r7, #24]
 8005b02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005b04:	4b32      	ldr	r3, [pc, #200]	; (8005bd0 <HAL_GPIO_Init+0x354>)
 8005b06:	68db      	ldr	r3, [r3, #12]
 8005b08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	43db      	mvns	r3, r3
 8005b0e:	69ba      	ldr	r2, [r7, #24]
 8005b10:	4013      	ands	r3, r2
 8005b12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d003      	beq.n	8005b28 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005b20:	69ba      	ldr	r2, [r7, #24]
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	4313      	orrs	r3, r2
 8005b26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005b28:	4a29      	ldr	r2, [pc, #164]	; (8005bd0 <HAL_GPIO_Init+0x354>)
 8005b2a:	69bb      	ldr	r3, [r7, #24]
 8005b2c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005b2e:	4b28      	ldr	r3, [pc, #160]	; (8005bd0 <HAL_GPIO_Init+0x354>)
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	43db      	mvns	r3, r3
 8005b38:	69ba      	ldr	r2, [r7, #24]
 8005b3a:	4013      	ands	r3, r2
 8005b3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d003      	beq.n	8005b52 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005b4a:	69ba      	ldr	r2, [r7, #24]
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005b52:	4a1f      	ldr	r2, [pc, #124]	; (8005bd0 <HAL_GPIO_Init+0x354>)
 8005b54:	69bb      	ldr	r3, [r7, #24]
 8005b56:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005b58:	4b1d      	ldr	r3, [pc, #116]	; (8005bd0 <HAL_GPIO_Init+0x354>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	43db      	mvns	r3, r3
 8005b62:	69ba      	ldr	r2, [r7, #24]
 8005b64:	4013      	ands	r3, r2
 8005b66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d003      	beq.n	8005b7c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005b74:	69ba      	ldr	r2, [r7, #24]
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005b7c:	4a14      	ldr	r2, [pc, #80]	; (8005bd0 <HAL_GPIO_Init+0x354>)
 8005b7e:	69bb      	ldr	r3, [r7, #24]
 8005b80:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005b82:	69fb      	ldr	r3, [r7, #28]
 8005b84:	3301      	adds	r3, #1
 8005b86:	61fb      	str	r3, [r7, #28]
 8005b88:	69fb      	ldr	r3, [r7, #28]
 8005b8a:	2b0f      	cmp	r3, #15
 8005b8c:	f67f ae86 	bls.w	800589c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005b90:	bf00      	nop
 8005b92:	bf00      	nop
 8005b94:	3724      	adds	r7, #36	; 0x24
 8005b96:	46bd      	mov	sp, r7
 8005b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9c:	4770      	bx	lr
 8005b9e:	bf00      	nop
 8005ba0:	40023800 	.word	0x40023800
 8005ba4:	40013800 	.word	0x40013800
 8005ba8:	40020000 	.word	0x40020000
 8005bac:	40020400 	.word	0x40020400
 8005bb0:	40020800 	.word	0x40020800
 8005bb4:	40020c00 	.word	0x40020c00
 8005bb8:	40021000 	.word	0x40021000
 8005bbc:	40021400 	.word	0x40021400
 8005bc0:	40021800 	.word	0x40021800
 8005bc4:	40021c00 	.word	0x40021c00
 8005bc8:	40022000 	.word	0x40022000
 8005bcc:	40022400 	.word	0x40022400
 8005bd0:	40013c00 	.word	0x40013c00

08005bd4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b087      	sub	sp, #28
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
 8005bdc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8005bde:	2300      	movs	r3, #0
 8005be0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8005be2:	2300      	movs	r3, #0
 8005be4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8005be6:	2300      	movs	r3, #0
 8005be8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8005bea:	2300      	movs	r3, #0
 8005bec:	617b      	str	r3, [r7, #20]
 8005bee:	e0d9      	b.n	8005da4 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005bf0:	2201      	movs	r2, #1
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8005bf8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8005bfa:	683a      	ldr	r2, [r7, #0]
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	4013      	ands	r3, r2
 8005c00:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8005c02:	68fa      	ldr	r2, [r7, #12]
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	429a      	cmp	r2, r3
 8005c08:	f040 80c9 	bne.w	8005d9e <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8005c0c:	4a6b      	ldr	r2, [pc, #428]	; (8005dbc <HAL_GPIO_DeInit+0x1e8>)
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	089b      	lsrs	r3, r3, #2
 8005c12:	3302      	adds	r3, #2
 8005c14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c18:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	f003 0303 	and.w	r3, r3, #3
 8005c20:	009b      	lsls	r3, r3, #2
 8005c22:	220f      	movs	r2, #15
 8005c24:	fa02 f303 	lsl.w	r3, r2, r3
 8005c28:	68ba      	ldr	r2, [r7, #8]
 8005c2a:	4013      	ands	r3, r2
 8005c2c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	4a63      	ldr	r2, [pc, #396]	; (8005dc0 <HAL_GPIO_DeInit+0x1ec>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d037      	beq.n	8005ca6 <HAL_GPIO_DeInit+0xd2>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	4a62      	ldr	r2, [pc, #392]	; (8005dc4 <HAL_GPIO_DeInit+0x1f0>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d031      	beq.n	8005ca2 <HAL_GPIO_DeInit+0xce>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	4a61      	ldr	r2, [pc, #388]	; (8005dc8 <HAL_GPIO_DeInit+0x1f4>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d02b      	beq.n	8005c9e <HAL_GPIO_DeInit+0xca>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	4a60      	ldr	r2, [pc, #384]	; (8005dcc <HAL_GPIO_DeInit+0x1f8>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d025      	beq.n	8005c9a <HAL_GPIO_DeInit+0xc6>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	4a5f      	ldr	r2, [pc, #380]	; (8005dd0 <HAL_GPIO_DeInit+0x1fc>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d01f      	beq.n	8005c96 <HAL_GPIO_DeInit+0xc2>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	4a5e      	ldr	r2, [pc, #376]	; (8005dd4 <HAL_GPIO_DeInit+0x200>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d019      	beq.n	8005c92 <HAL_GPIO_DeInit+0xbe>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	4a5d      	ldr	r2, [pc, #372]	; (8005dd8 <HAL_GPIO_DeInit+0x204>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d013      	beq.n	8005c8e <HAL_GPIO_DeInit+0xba>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	4a5c      	ldr	r2, [pc, #368]	; (8005ddc <HAL_GPIO_DeInit+0x208>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d00d      	beq.n	8005c8a <HAL_GPIO_DeInit+0xb6>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	4a5b      	ldr	r2, [pc, #364]	; (8005de0 <HAL_GPIO_DeInit+0x20c>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d007      	beq.n	8005c86 <HAL_GPIO_DeInit+0xb2>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	4a5a      	ldr	r2, [pc, #360]	; (8005de4 <HAL_GPIO_DeInit+0x210>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d101      	bne.n	8005c82 <HAL_GPIO_DeInit+0xae>
 8005c7e:	2309      	movs	r3, #9
 8005c80:	e012      	b.n	8005ca8 <HAL_GPIO_DeInit+0xd4>
 8005c82:	230a      	movs	r3, #10
 8005c84:	e010      	b.n	8005ca8 <HAL_GPIO_DeInit+0xd4>
 8005c86:	2308      	movs	r3, #8
 8005c88:	e00e      	b.n	8005ca8 <HAL_GPIO_DeInit+0xd4>
 8005c8a:	2307      	movs	r3, #7
 8005c8c:	e00c      	b.n	8005ca8 <HAL_GPIO_DeInit+0xd4>
 8005c8e:	2306      	movs	r3, #6
 8005c90:	e00a      	b.n	8005ca8 <HAL_GPIO_DeInit+0xd4>
 8005c92:	2305      	movs	r3, #5
 8005c94:	e008      	b.n	8005ca8 <HAL_GPIO_DeInit+0xd4>
 8005c96:	2304      	movs	r3, #4
 8005c98:	e006      	b.n	8005ca8 <HAL_GPIO_DeInit+0xd4>
 8005c9a:	2303      	movs	r3, #3
 8005c9c:	e004      	b.n	8005ca8 <HAL_GPIO_DeInit+0xd4>
 8005c9e:	2302      	movs	r3, #2
 8005ca0:	e002      	b.n	8005ca8 <HAL_GPIO_DeInit+0xd4>
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	e000      	b.n	8005ca8 <HAL_GPIO_DeInit+0xd4>
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	697a      	ldr	r2, [r7, #20]
 8005caa:	f002 0203 	and.w	r2, r2, #3
 8005cae:	0092      	lsls	r2, r2, #2
 8005cb0:	4093      	lsls	r3, r2
 8005cb2:	68ba      	ldr	r2, [r7, #8]
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	d132      	bne.n	8005d1e <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005cb8:	4b4b      	ldr	r3, [pc, #300]	; (8005de8 <HAL_GPIO_DeInit+0x214>)
 8005cba:	681a      	ldr	r2, [r3, #0]
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	43db      	mvns	r3, r3
 8005cc0:	4949      	ldr	r1, [pc, #292]	; (8005de8 <HAL_GPIO_DeInit+0x214>)
 8005cc2:	4013      	ands	r3, r2
 8005cc4:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005cc6:	4b48      	ldr	r3, [pc, #288]	; (8005de8 <HAL_GPIO_DeInit+0x214>)
 8005cc8:	685a      	ldr	r2, [r3, #4]
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	43db      	mvns	r3, r3
 8005cce:	4946      	ldr	r1, [pc, #280]	; (8005de8 <HAL_GPIO_DeInit+0x214>)
 8005cd0:	4013      	ands	r3, r2
 8005cd2:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005cd4:	4b44      	ldr	r3, [pc, #272]	; (8005de8 <HAL_GPIO_DeInit+0x214>)
 8005cd6:	68da      	ldr	r2, [r3, #12]
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	43db      	mvns	r3, r3
 8005cdc:	4942      	ldr	r1, [pc, #264]	; (8005de8 <HAL_GPIO_DeInit+0x214>)
 8005cde:	4013      	ands	r3, r2
 8005ce0:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005ce2:	4b41      	ldr	r3, [pc, #260]	; (8005de8 <HAL_GPIO_DeInit+0x214>)
 8005ce4:	689a      	ldr	r2, [r3, #8]
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	43db      	mvns	r3, r3
 8005cea:	493f      	ldr	r1, [pc, #252]	; (8005de8 <HAL_GPIO_DeInit+0x214>)
 8005cec:	4013      	ands	r3, r2
 8005cee:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	f003 0303 	and.w	r3, r3, #3
 8005cf6:	009b      	lsls	r3, r3, #2
 8005cf8:	220f      	movs	r2, #15
 8005cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8005cfe:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8005d00:	4a2e      	ldr	r2, [pc, #184]	; (8005dbc <HAL_GPIO_DeInit+0x1e8>)
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	089b      	lsrs	r3, r3, #2
 8005d06:	3302      	adds	r3, #2
 8005d08:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	43da      	mvns	r2, r3
 8005d10:	482a      	ldr	r0, [pc, #168]	; (8005dbc <HAL_GPIO_DeInit+0x1e8>)
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	089b      	lsrs	r3, r3, #2
 8005d16:	400a      	ands	r2, r1
 8005d18:	3302      	adds	r3, #2
 8005d1a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681a      	ldr	r2, [r3, #0]
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	005b      	lsls	r3, r3, #1
 8005d26:	2103      	movs	r1, #3
 8005d28:	fa01 f303 	lsl.w	r3, r1, r3
 8005d2c:	43db      	mvns	r3, r3
 8005d2e:	401a      	ands	r2, r3
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	08da      	lsrs	r2, r3, #3
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	3208      	adds	r2, #8
 8005d3c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	f003 0307 	and.w	r3, r3, #7
 8005d46:	009b      	lsls	r3, r3, #2
 8005d48:	220f      	movs	r2, #15
 8005d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d4e:	43db      	mvns	r3, r3
 8005d50:	697a      	ldr	r2, [r7, #20]
 8005d52:	08d2      	lsrs	r2, r2, #3
 8005d54:	4019      	ands	r1, r3
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	3208      	adds	r2, #8
 8005d5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	68da      	ldr	r2, [r3, #12]
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	005b      	lsls	r3, r3, #1
 8005d66:	2103      	movs	r1, #3
 8005d68:	fa01 f303 	lsl.w	r3, r1, r3
 8005d6c:	43db      	mvns	r3, r3
 8005d6e:	401a      	ands	r2, r3
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	685a      	ldr	r2, [r3, #4]
 8005d78:	2101      	movs	r1, #1
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	fa01 f303 	lsl.w	r3, r1, r3
 8005d80:	43db      	mvns	r3, r3
 8005d82:	401a      	ands	r2, r3
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	689a      	ldr	r2, [r3, #8]
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	005b      	lsls	r3, r3, #1
 8005d90:	2103      	movs	r1, #3
 8005d92:	fa01 f303 	lsl.w	r3, r1, r3
 8005d96:	43db      	mvns	r3, r3
 8005d98:	401a      	ands	r2, r3
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	3301      	adds	r3, #1
 8005da2:	617b      	str	r3, [r7, #20]
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	2b0f      	cmp	r3, #15
 8005da8:	f67f af22 	bls.w	8005bf0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8005dac:	bf00      	nop
 8005dae:	bf00      	nop
 8005db0:	371c      	adds	r7, #28
 8005db2:	46bd      	mov	sp, r7
 8005db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db8:	4770      	bx	lr
 8005dba:	bf00      	nop
 8005dbc:	40013800 	.word	0x40013800
 8005dc0:	40020000 	.word	0x40020000
 8005dc4:	40020400 	.word	0x40020400
 8005dc8:	40020800 	.word	0x40020800
 8005dcc:	40020c00 	.word	0x40020c00
 8005dd0:	40021000 	.word	0x40021000
 8005dd4:	40021400 	.word	0x40021400
 8005dd8:	40021800 	.word	0x40021800
 8005ddc:	40021c00 	.word	0x40021c00
 8005de0:	40022000 	.word	0x40022000
 8005de4:	40022400 	.word	0x40022400
 8005de8:	40013c00 	.word	0x40013c00

08005dec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b083      	sub	sp, #12
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	460b      	mov	r3, r1
 8005df6:	807b      	strh	r3, [r7, #2]
 8005df8:	4613      	mov	r3, r2
 8005dfa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005dfc:	787b      	ldrb	r3, [r7, #1]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d003      	beq.n	8005e0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005e02:	887a      	ldrh	r2, [r7, #2]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005e08:	e003      	b.n	8005e12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005e0a:	887b      	ldrh	r3, [r7, #2]
 8005e0c:	041a      	lsls	r2, r3, #16
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	619a      	str	r2, [r3, #24]
}
 8005e12:	bf00      	nop
 8005e14:	370c      	adds	r7, #12
 8005e16:	46bd      	mov	sp, r7
 8005e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1c:	4770      	bx	lr
	...

08005e20 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b082      	sub	sp, #8
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d101      	bne.n	8005e32 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005e2e:	2301      	movs	r3, #1
 8005e30:	e07f      	b.n	8005f32 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e38:	b2db      	uxtb	r3, r3
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d106      	bne.n	8005e4c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2200      	movs	r2, #0
 8005e42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f000 f8a9 	bl	8005f9e <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2224      	movs	r2, #36	; 0x24
 8005e50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	681a      	ldr	r2, [r3, #0]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f022 0201 	bic.w	r2, r2, #1
 8005e62:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	685a      	ldr	r2, [r3, #4]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005e70:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	689a      	ldr	r2, [r3, #8]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005e80:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	68db      	ldr	r3, [r3, #12]
 8005e86:	2b01      	cmp	r3, #1
 8005e88:	d107      	bne.n	8005e9a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	689a      	ldr	r2, [r3, #8]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005e96:	609a      	str	r2, [r3, #8]
 8005e98:	e006      	b.n	8005ea8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	689a      	ldr	r2, [r3, #8]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005ea6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	68db      	ldr	r3, [r3, #12]
 8005eac:	2b02      	cmp	r3, #2
 8005eae:	d104      	bne.n	8005eba <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005eb8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	6859      	ldr	r1, [r3, #4]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681a      	ldr	r2, [r3, #0]
 8005ec4:	4b1d      	ldr	r3, [pc, #116]	; (8005f3c <HAL_I2C_Init+0x11c>)
 8005ec6:	430b      	orrs	r3, r1
 8005ec8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	68da      	ldr	r2, [r3, #12]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005ed8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	691a      	ldr	r2, [r3, #16]
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	695b      	ldr	r3, [r3, #20]
 8005ee2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	699b      	ldr	r3, [r3, #24]
 8005eea:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	430a      	orrs	r2, r1
 8005ef2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	69d9      	ldr	r1, [r3, #28]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6a1a      	ldr	r2, [r3, #32]
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	430a      	orrs	r2, r1
 8005f02:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	681a      	ldr	r2, [r3, #0]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f042 0201 	orr.w	r2, r2, #1
 8005f12:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2200      	movs	r2, #0
 8005f18:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2220      	movs	r2, #32
 8005f1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2200      	movs	r2, #0
 8005f26:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005f30:	2300      	movs	r3, #0
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	3708      	adds	r7, #8
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}
 8005f3a:	bf00      	nop
 8005f3c:	02008000 	.word	0x02008000

08005f40 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b082      	sub	sp, #8
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d101      	bne.n	8005f52 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005f4e:	2301      	movs	r3, #1
 8005f50:	e021      	b.n	8005f96 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2224      	movs	r2, #36	; 0x24
 8005f56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	681a      	ldr	r2, [r3, #0]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f022 0201 	bic.w	r2, r2, #1
 8005f68:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f000 f821 	bl	8005fb2 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2200      	movs	r2, #0
 8005f74:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2200      	movs	r2, #0
 8005f82:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2200      	movs	r2, #0
 8005f88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005f94:	2300      	movs	r3, #0
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3708      	adds	r7, #8
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}

08005f9e <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8005f9e:	b480      	push	{r7}
 8005fa0:	b083      	sub	sp, #12
 8005fa2:	af00      	add	r7, sp, #0
 8005fa4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8005fa6:	bf00      	nop
 8005fa8:	370c      	adds	r7, #12
 8005faa:	46bd      	mov	sp, r7
 8005fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb0:	4770      	bx	lr

08005fb2 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8005fb2:	b480      	push	{r7}
 8005fb4:	b083      	sub	sp, #12
 8005fb6:	af00      	add	r7, sp, #0
 8005fb8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8005fba:	bf00      	nop
 8005fbc:	370c      	adds	r7, #12
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc4:	4770      	bx	lr
	...

08005fc8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b088      	sub	sp, #32
 8005fcc:	af02      	add	r7, sp, #8
 8005fce:	60f8      	str	r0, [r7, #12]
 8005fd0:	4608      	mov	r0, r1
 8005fd2:	4611      	mov	r1, r2
 8005fd4:	461a      	mov	r2, r3
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	817b      	strh	r3, [r7, #10]
 8005fda:	460b      	mov	r3, r1
 8005fdc:	813b      	strh	r3, [r7, #8]
 8005fde:	4613      	mov	r3, r2
 8005fe0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005fe8:	b2db      	uxtb	r3, r3
 8005fea:	2b20      	cmp	r3, #32
 8005fec:	f040 80f9 	bne.w	80061e2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ff0:	6a3b      	ldr	r3, [r7, #32]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d002      	beq.n	8005ffc <HAL_I2C_Mem_Write+0x34>
 8005ff6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d105      	bne.n	8006008 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006002:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006004:	2301      	movs	r3, #1
 8006006:	e0ed      	b.n	80061e4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800600e:	2b01      	cmp	r3, #1
 8006010:	d101      	bne.n	8006016 <HAL_I2C_Mem_Write+0x4e>
 8006012:	2302      	movs	r3, #2
 8006014:	e0e6      	b.n	80061e4 <HAL_I2C_Mem_Write+0x21c>
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2201      	movs	r2, #1
 800601a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800601e:	f7fd fd3f 	bl	8003aa0 <HAL_GetTick>
 8006022:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	9300      	str	r3, [sp, #0]
 8006028:	2319      	movs	r3, #25
 800602a:	2201      	movs	r2, #1
 800602c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006030:	68f8      	ldr	r0, [r7, #12]
 8006032:	f000 fad1 	bl	80065d8 <I2C_WaitOnFlagUntilTimeout>
 8006036:	4603      	mov	r3, r0
 8006038:	2b00      	cmp	r3, #0
 800603a:	d001      	beq.n	8006040 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800603c:	2301      	movs	r3, #1
 800603e:	e0d1      	b.n	80061e4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	2221      	movs	r2, #33	; 0x21
 8006044:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	2240      	movs	r2, #64	; 0x40
 800604c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	2200      	movs	r2, #0
 8006054:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	6a3a      	ldr	r2, [r7, #32]
 800605a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006060:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2200      	movs	r2, #0
 8006066:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006068:	88f8      	ldrh	r0, [r7, #6]
 800606a:	893a      	ldrh	r2, [r7, #8]
 800606c:	8979      	ldrh	r1, [r7, #10]
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	9301      	str	r3, [sp, #4]
 8006072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006074:	9300      	str	r3, [sp, #0]
 8006076:	4603      	mov	r3, r0
 8006078:	68f8      	ldr	r0, [r7, #12]
 800607a:	f000 f9e1 	bl	8006440 <I2C_RequestMemoryWrite>
 800607e:	4603      	mov	r3, r0
 8006080:	2b00      	cmp	r3, #0
 8006082:	d005      	beq.n	8006090 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2200      	movs	r2, #0
 8006088:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800608c:	2301      	movs	r3, #1
 800608e:	e0a9      	b.n	80061e4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006094:	b29b      	uxth	r3, r3
 8006096:	2bff      	cmp	r3, #255	; 0xff
 8006098:	d90e      	bls.n	80060b8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	22ff      	movs	r2, #255	; 0xff
 800609e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060a4:	b2da      	uxtb	r2, r3
 80060a6:	8979      	ldrh	r1, [r7, #10]
 80060a8:	2300      	movs	r3, #0
 80060aa:	9300      	str	r3, [sp, #0]
 80060ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80060b0:	68f8      	ldr	r0, [r7, #12]
 80060b2:	f000 fc2d 	bl	8006910 <I2C_TransferConfig>
 80060b6:	e00f      	b.n	80060d8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060bc:	b29a      	uxth	r2, r3
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060c6:	b2da      	uxtb	r2, r3
 80060c8:	8979      	ldrh	r1, [r7, #10]
 80060ca:	2300      	movs	r3, #0
 80060cc:	9300      	str	r3, [sp, #0]
 80060ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80060d2:	68f8      	ldr	r0, [r7, #12]
 80060d4:	f000 fc1c 	bl	8006910 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80060d8:	697a      	ldr	r2, [r7, #20]
 80060da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80060dc:	68f8      	ldr	r0, [r7, #12]
 80060de:	f000 fabb 	bl	8006658 <I2C_WaitOnTXISFlagUntilTimeout>
 80060e2:	4603      	mov	r3, r0
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d001      	beq.n	80060ec <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80060e8:	2301      	movs	r3, #1
 80060ea:	e07b      	b.n	80061e4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f0:	781a      	ldrb	r2, [r3, #0]
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060fc:	1c5a      	adds	r2, r3, #1
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006106:	b29b      	uxth	r3, r3
 8006108:	3b01      	subs	r3, #1
 800610a:	b29a      	uxth	r2, r3
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006114:	3b01      	subs	r3, #1
 8006116:	b29a      	uxth	r2, r3
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006120:	b29b      	uxth	r3, r3
 8006122:	2b00      	cmp	r3, #0
 8006124:	d034      	beq.n	8006190 <HAL_I2C_Mem_Write+0x1c8>
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800612a:	2b00      	cmp	r3, #0
 800612c:	d130      	bne.n	8006190 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	9300      	str	r3, [sp, #0]
 8006132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006134:	2200      	movs	r2, #0
 8006136:	2180      	movs	r1, #128	; 0x80
 8006138:	68f8      	ldr	r0, [r7, #12]
 800613a:	f000 fa4d 	bl	80065d8 <I2C_WaitOnFlagUntilTimeout>
 800613e:	4603      	mov	r3, r0
 8006140:	2b00      	cmp	r3, #0
 8006142:	d001      	beq.n	8006148 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006144:	2301      	movs	r3, #1
 8006146:	e04d      	b.n	80061e4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800614c:	b29b      	uxth	r3, r3
 800614e:	2bff      	cmp	r3, #255	; 0xff
 8006150:	d90e      	bls.n	8006170 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	22ff      	movs	r2, #255	; 0xff
 8006156:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800615c:	b2da      	uxtb	r2, r3
 800615e:	8979      	ldrh	r1, [r7, #10]
 8006160:	2300      	movs	r3, #0
 8006162:	9300      	str	r3, [sp, #0]
 8006164:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006168:	68f8      	ldr	r0, [r7, #12]
 800616a:	f000 fbd1 	bl	8006910 <I2C_TransferConfig>
 800616e:	e00f      	b.n	8006190 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006174:	b29a      	uxth	r2, r3
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800617e:	b2da      	uxtb	r2, r3
 8006180:	8979      	ldrh	r1, [r7, #10]
 8006182:	2300      	movs	r3, #0
 8006184:	9300      	str	r3, [sp, #0]
 8006186:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800618a:	68f8      	ldr	r0, [r7, #12]
 800618c:	f000 fbc0 	bl	8006910 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006194:	b29b      	uxth	r3, r3
 8006196:	2b00      	cmp	r3, #0
 8006198:	d19e      	bne.n	80060d8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800619a:	697a      	ldr	r2, [r7, #20]
 800619c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800619e:	68f8      	ldr	r0, [r7, #12]
 80061a0:	f000 fa9a 	bl	80066d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80061a4:	4603      	mov	r3, r0
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d001      	beq.n	80061ae <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80061aa:	2301      	movs	r3, #1
 80061ac:	e01a      	b.n	80061e4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	2220      	movs	r2, #32
 80061b4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	6859      	ldr	r1, [r3, #4]
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681a      	ldr	r2, [r3, #0]
 80061c0:	4b0a      	ldr	r3, [pc, #40]	; (80061ec <HAL_I2C_Mem_Write+0x224>)
 80061c2:	400b      	ands	r3, r1
 80061c4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2220      	movs	r2, #32
 80061ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2200      	movs	r2, #0
 80061d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2200      	movs	r2, #0
 80061da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80061de:	2300      	movs	r3, #0
 80061e0:	e000      	b.n	80061e4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80061e2:	2302      	movs	r3, #2
  }
}
 80061e4:	4618      	mov	r0, r3
 80061e6:	3718      	adds	r7, #24
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}
 80061ec:	fe00e800 	.word	0xfe00e800

080061f0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b088      	sub	sp, #32
 80061f4:	af02      	add	r7, sp, #8
 80061f6:	60f8      	str	r0, [r7, #12]
 80061f8:	4608      	mov	r0, r1
 80061fa:	4611      	mov	r1, r2
 80061fc:	461a      	mov	r2, r3
 80061fe:	4603      	mov	r3, r0
 8006200:	817b      	strh	r3, [r7, #10]
 8006202:	460b      	mov	r3, r1
 8006204:	813b      	strh	r3, [r7, #8]
 8006206:	4613      	mov	r3, r2
 8006208:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006210:	b2db      	uxtb	r3, r3
 8006212:	2b20      	cmp	r3, #32
 8006214:	f040 80fd 	bne.w	8006412 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006218:	6a3b      	ldr	r3, [r7, #32]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d002      	beq.n	8006224 <HAL_I2C_Mem_Read+0x34>
 800621e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006220:	2b00      	cmp	r3, #0
 8006222:	d105      	bne.n	8006230 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	f44f 7200 	mov.w	r2, #512	; 0x200
 800622a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800622c:	2301      	movs	r3, #1
 800622e:	e0f1      	b.n	8006414 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006236:	2b01      	cmp	r3, #1
 8006238:	d101      	bne.n	800623e <HAL_I2C_Mem_Read+0x4e>
 800623a:	2302      	movs	r3, #2
 800623c:	e0ea      	b.n	8006414 <HAL_I2C_Mem_Read+0x224>
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2201      	movs	r2, #1
 8006242:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006246:	f7fd fc2b 	bl	8003aa0 <HAL_GetTick>
 800624a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800624c:	697b      	ldr	r3, [r7, #20]
 800624e:	9300      	str	r3, [sp, #0]
 8006250:	2319      	movs	r3, #25
 8006252:	2201      	movs	r2, #1
 8006254:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006258:	68f8      	ldr	r0, [r7, #12]
 800625a:	f000 f9bd 	bl	80065d8 <I2C_WaitOnFlagUntilTimeout>
 800625e:	4603      	mov	r3, r0
 8006260:	2b00      	cmp	r3, #0
 8006262:	d001      	beq.n	8006268 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006264:	2301      	movs	r3, #1
 8006266:	e0d5      	b.n	8006414 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	2222      	movs	r2, #34	; 0x22
 800626c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	2240      	movs	r2, #64	; 0x40
 8006274:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	2200      	movs	r2, #0
 800627c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	6a3a      	ldr	r2, [r7, #32]
 8006282:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006288:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	2200      	movs	r2, #0
 800628e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006290:	88f8      	ldrh	r0, [r7, #6]
 8006292:	893a      	ldrh	r2, [r7, #8]
 8006294:	8979      	ldrh	r1, [r7, #10]
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	9301      	str	r3, [sp, #4]
 800629a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800629c:	9300      	str	r3, [sp, #0]
 800629e:	4603      	mov	r3, r0
 80062a0:	68f8      	ldr	r0, [r7, #12]
 80062a2:	f000 f921 	bl	80064e8 <I2C_RequestMemoryRead>
 80062a6:	4603      	mov	r3, r0
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d005      	beq.n	80062b8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	2200      	movs	r2, #0
 80062b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80062b4:	2301      	movs	r3, #1
 80062b6:	e0ad      	b.n	8006414 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062bc:	b29b      	uxth	r3, r3
 80062be:	2bff      	cmp	r3, #255	; 0xff
 80062c0:	d90e      	bls.n	80062e0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	22ff      	movs	r2, #255	; 0xff
 80062c6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062cc:	b2da      	uxtb	r2, r3
 80062ce:	8979      	ldrh	r1, [r7, #10]
 80062d0:	4b52      	ldr	r3, [pc, #328]	; (800641c <HAL_I2C_Mem_Read+0x22c>)
 80062d2:	9300      	str	r3, [sp, #0]
 80062d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80062d8:	68f8      	ldr	r0, [r7, #12]
 80062da:	f000 fb19 	bl	8006910 <I2C_TransferConfig>
 80062de:	e00f      	b.n	8006300 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062e4:	b29a      	uxth	r2, r3
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062ee:	b2da      	uxtb	r2, r3
 80062f0:	8979      	ldrh	r1, [r7, #10]
 80062f2:	4b4a      	ldr	r3, [pc, #296]	; (800641c <HAL_I2C_Mem_Read+0x22c>)
 80062f4:	9300      	str	r3, [sp, #0]
 80062f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80062fa:	68f8      	ldr	r0, [r7, #12]
 80062fc:	f000 fb08 	bl	8006910 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	9300      	str	r3, [sp, #0]
 8006304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006306:	2200      	movs	r2, #0
 8006308:	2104      	movs	r1, #4
 800630a:	68f8      	ldr	r0, [r7, #12]
 800630c:	f000 f964 	bl	80065d8 <I2C_WaitOnFlagUntilTimeout>
 8006310:	4603      	mov	r3, r0
 8006312:	2b00      	cmp	r3, #0
 8006314:	d001      	beq.n	800631a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8006316:	2301      	movs	r3, #1
 8006318:	e07c      	b.n	8006414 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006324:	b2d2      	uxtb	r2, r2
 8006326:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800632c:	1c5a      	adds	r2, r3, #1
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006336:	3b01      	subs	r3, #1
 8006338:	b29a      	uxth	r2, r3
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006342:	b29b      	uxth	r3, r3
 8006344:	3b01      	subs	r3, #1
 8006346:	b29a      	uxth	r2, r3
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006350:	b29b      	uxth	r3, r3
 8006352:	2b00      	cmp	r3, #0
 8006354:	d034      	beq.n	80063c0 <HAL_I2C_Mem_Read+0x1d0>
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800635a:	2b00      	cmp	r3, #0
 800635c:	d130      	bne.n	80063c0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	9300      	str	r3, [sp, #0]
 8006362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006364:	2200      	movs	r2, #0
 8006366:	2180      	movs	r1, #128	; 0x80
 8006368:	68f8      	ldr	r0, [r7, #12]
 800636a:	f000 f935 	bl	80065d8 <I2C_WaitOnFlagUntilTimeout>
 800636e:	4603      	mov	r3, r0
 8006370:	2b00      	cmp	r3, #0
 8006372:	d001      	beq.n	8006378 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006374:	2301      	movs	r3, #1
 8006376:	e04d      	b.n	8006414 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800637c:	b29b      	uxth	r3, r3
 800637e:	2bff      	cmp	r3, #255	; 0xff
 8006380:	d90e      	bls.n	80063a0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	22ff      	movs	r2, #255	; 0xff
 8006386:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800638c:	b2da      	uxtb	r2, r3
 800638e:	8979      	ldrh	r1, [r7, #10]
 8006390:	2300      	movs	r3, #0
 8006392:	9300      	str	r3, [sp, #0]
 8006394:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006398:	68f8      	ldr	r0, [r7, #12]
 800639a:	f000 fab9 	bl	8006910 <I2C_TransferConfig>
 800639e:	e00f      	b.n	80063c0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063a4:	b29a      	uxth	r2, r3
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063ae:	b2da      	uxtb	r2, r3
 80063b0:	8979      	ldrh	r1, [r7, #10]
 80063b2:	2300      	movs	r3, #0
 80063b4:	9300      	str	r3, [sp, #0]
 80063b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80063ba:	68f8      	ldr	r0, [r7, #12]
 80063bc:	f000 faa8 	bl	8006910 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063c4:	b29b      	uxth	r3, r3
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d19a      	bne.n	8006300 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80063ca:	697a      	ldr	r2, [r7, #20]
 80063cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80063ce:	68f8      	ldr	r0, [r7, #12]
 80063d0:	f000 f982 	bl	80066d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80063d4:	4603      	mov	r3, r0
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d001      	beq.n	80063de <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80063da:	2301      	movs	r3, #1
 80063dc:	e01a      	b.n	8006414 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	2220      	movs	r2, #32
 80063e4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	6859      	ldr	r1, [r3, #4]
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681a      	ldr	r2, [r3, #0]
 80063f0:	4b0b      	ldr	r3, [pc, #44]	; (8006420 <HAL_I2C_Mem_Read+0x230>)
 80063f2:	400b      	ands	r3, r1
 80063f4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	2220      	movs	r2, #32
 80063fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	2200      	movs	r2, #0
 8006402:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	2200      	movs	r2, #0
 800640a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800640e:	2300      	movs	r3, #0
 8006410:	e000      	b.n	8006414 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8006412:	2302      	movs	r3, #2
  }
}
 8006414:	4618      	mov	r0, r3
 8006416:	3718      	adds	r7, #24
 8006418:	46bd      	mov	sp, r7
 800641a:	bd80      	pop	{r7, pc}
 800641c:	80002400 	.word	0x80002400
 8006420:	fe00e800 	.word	0xfe00e800

08006424 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8006424:	b480      	push	{r7}
 8006426:	b083      	sub	sp, #12
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006432:	b2db      	uxtb	r3, r3
}
 8006434:	4618      	mov	r0, r3
 8006436:	370c      	adds	r7, #12
 8006438:	46bd      	mov	sp, r7
 800643a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643e:	4770      	bx	lr

08006440 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b086      	sub	sp, #24
 8006444:	af02      	add	r7, sp, #8
 8006446:	60f8      	str	r0, [r7, #12]
 8006448:	4608      	mov	r0, r1
 800644a:	4611      	mov	r1, r2
 800644c:	461a      	mov	r2, r3
 800644e:	4603      	mov	r3, r0
 8006450:	817b      	strh	r3, [r7, #10]
 8006452:	460b      	mov	r3, r1
 8006454:	813b      	strh	r3, [r7, #8]
 8006456:	4613      	mov	r3, r2
 8006458:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800645a:	88fb      	ldrh	r3, [r7, #6]
 800645c:	b2da      	uxtb	r2, r3
 800645e:	8979      	ldrh	r1, [r7, #10]
 8006460:	4b20      	ldr	r3, [pc, #128]	; (80064e4 <I2C_RequestMemoryWrite+0xa4>)
 8006462:	9300      	str	r3, [sp, #0]
 8006464:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006468:	68f8      	ldr	r0, [r7, #12]
 800646a:	f000 fa51 	bl	8006910 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800646e:	69fa      	ldr	r2, [r7, #28]
 8006470:	69b9      	ldr	r1, [r7, #24]
 8006472:	68f8      	ldr	r0, [r7, #12]
 8006474:	f000 f8f0 	bl	8006658 <I2C_WaitOnTXISFlagUntilTimeout>
 8006478:	4603      	mov	r3, r0
 800647a:	2b00      	cmp	r3, #0
 800647c:	d001      	beq.n	8006482 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800647e:	2301      	movs	r3, #1
 8006480:	e02c      	b.n	80064dc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006482:	88fb      	ldrh	r3, [r7, #6]
 8006484:	2b01      	cmp	r3, #1
 8006486:	d105      	bne.n	8006494 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006488:	893b      	ldrh	r3, [r7, #8]
 800648a:	b2da      	uxtb	r2, r3
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	629a      	str	r2, [r3, #40]	; 0x28
 8006492:	e015      	b.n	80064c0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006494:	893b      	ldrh	r3, [r7, #8]
 8006496:	0a1b      	lsrs	r3, r3, #8
 8006498:	b29b      	uxth	r3, r3
 800649a:	b2da      	uxtb	r2, r3
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80064a2:	69fa      	ldr	r2, [r7, #28]
 80064a4:	69b9      	ldr	r1, [r7, #24]
 80064a6:	68f8      	ldr	r0, [r7, #12]
 80064a8:	f000 f8d6 	bl	8006658 <I2C_WaitOnTXISFlagUntilTimeout>
 80064ac:	4603      	mov	r3, r0
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d001      	beq.n	80064b6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80064b2:	2301      	movs	r3, #1
 80064b4:	e012      	b.n	80064dc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80064b6:	893b      	ldrh	r3, [r7, #8]
 80064b8:	b2da      	uxtb	r2, r3
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80064c0:	69fb      	ldr	r3, [r7, #28]
 80064c2:	9300      	str	r3, [sp, #0]
 80064c4:	69bb      	ldr	r3, [r7, #24]
 80064c6:	2200      	movs	r2, #0
 80064c8:	2180      	movs	r1, #128	; 0x80
 80064ca:	68f8      	ldr	r0, [r7, #12]
 80064cc:	f000 f884 	bl	80065d8 <I2C_WaitOnFlagUntilTimeout>
 80064d0:	4603      	mov	r3, r0
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d001      	beq.n	80064da <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80064d6:	2301      	movs	r3, #1
 80064d8:	e000      	b.n	80064dc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80064da:	2300      	movs	r3, #0
}
 80064dc:	4618      	mov	r0, r3
 80064de:	3710      	adds	r7, #16
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bd80      	pop	{r7, pc}
 80064e4:	80002000 	.word	0x80002000

080064e8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b086      	sub	sp, #24
 80064ec:	af02      	add	r7, sp, #8
 80064ee:	60f8      	str	r0, [r7, #12]
 80064f0:	4608      	mov	r0, r1
 80064f2:	4611      	mov	r1, r2
 80064f4:	461a      	mov	r2, r3
 80064f6:	4603      	mov	r3, r0
 80064f8:	817b      	strh	r3, [r7, #10]
 80064fa:	460b      	mov	r3, r1
 80064fc:	813b      	strh	r3, [r7, #8]
 80064fe:	4613      	mov	r3, r2
 8006500:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006502:	88fb      	ldrh	r3, [r7, #6]
 8006504:	b2da      	uxtb	r2, r3
 8006506:	8979      	ldrh	r1, [r7, #10]
 8006508:	4b20      	ldr	r3, [pc, #128]	; (800658c <I2C_RequestMemoryRead+0xa4>)
 800650a:	9300      	str	r3, [sp, #0]
 800650c:	2300      	movs	r3, #0
 800650e:	68f8      	ldr	r0, [r7, #12]
 8006510:	f000 f9fe 	bl	8006910 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006514:	69fa      	ldr	r2, [r7, #28]
 8006516:	69b9      	ldr	r1, [r7, #24]
 8006518:	68f8      	ldr	r0, [r7, #12]
 800651a:	f000 f89d 	bl	8006658 <I2C_WaitOnTXISFlagUntilTimeout>
 800651e:	4603      	mov	r3, r0
 8006520:	2b00      	cmp	r3, #0
 8006522:	d001      	beq.n	8006528 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006524:	2301      	movs	r3, #1
 8006526:	e02c      	b.n	8006582 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006528:	88fb      	ldrh	r3, [r7, #6]
 800652a:	2b01      	cmp	r3, #1
 800652c:	d105      	bne.n	800653a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800652e:	893b      	ldrh	r3, [r7, #8]
 8006530:	b2da      	uxtb	r2, r3
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	629a      	str	r2, [r3, #40]	; 0x28
 8006538:	e015      	b.n	8006566 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800653a:	893b      	ldrh	r3, [r7, #8]
 800653c:	0a1b      	lsrs	r3, r3, #8
 800653e:	b29b      	uxth	r3, r3
 8006540:	b2da      	uxtb	r2, r3
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006548:	69fa      	ldr	r2, [r7, #28]
 800654a:	69b9      	ldr	r1, [r7, #24]
 800654c:	68f8      	ldr	r0, [r7, #12]
 800654e:	f000 f883 	bl	8006658 <I2C_WaitOnTXISFlagUntilTimeout>
 8006552:	4603      	mov	r3, r0
 8006554:	2b00      	cmp	r3, #0
 8006556:	d001      	beq.n	800655c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006558:	2301      	movs	r3, #1
 800655a:	e012      	b.n	8006582 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800655c:	893b      	ldrh	r3, [r7, #8]
 800655e:	b2da      	uxtb	r2, r3
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006566:	69fb      	ldr	r3, [r7, #28]
 8006568:	9300      	str	r3, [sp, #0]
 800656a:	69bb      	ldr	r3, [r7, #24]
 800656c:	2200      	movs	r2, #0
 800656e:	2140      	movs	r1, #64	; 0x40
 8006570:	68f8      	ldr	r0, [r7, #12]
 8006572:	f000 f831 	bl	80065d8 <I2C_WaitOnFlagUntilTimeout>
 8006576:	4603      	mov	r3, r0
 8006578:	2b00      	cmp	r3, #0
 800657a:	d001      	beq.n	8006580 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800657c:	2301      	movs	r3, #1
 800657e:	e000      	b.n	8006582 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006580:	2300      	movs	r3, #0
}
 8006582:	4618      	mov	r0, r3
 8006584:	3710      	adds	r7, #16
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}
 800658a:	bf00      	nop
 800658c:	80002000 	.word	0x80002000

08006590 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006590:	b480      	push	{r7}
 8006592:	b083      	sub	sp, #12
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	699b      	ldr	r3, [r3, #24]
 800659e:	f003 0302 	and.w	r3, r3, #2
 80065a2:	2b02      	cmp	r3, #2
 80065a4:	d103      	bne.n	80065ae <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	2200      	movs	r2, #0
 80065ac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	699b      	ldr	r3, [r3, #24]
 80065b4:	f003 0301 	and.w	r3, r3, #1
 80065b8:	2b01      	cmp	r3, #1
 80065ba:	d007      	beq.n	80065cc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	699a      	ldr	r2, [r3, #24]
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f042 0201 	orr.w	r2, r2, #1
 80065ca:	619a      	str	r2, [r3, #24]
  }
}
 80065cc:	bf00      	nop
 80065ce:	370c      	adds	r7, #12
 80065d0:	46bd      	mov	sp, r7
 80065d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d6:	4770      	bx	lr

080065d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b084      	sub	sp, #16
 80065dc:	af00      	add	r7, sp, #0
 80065de:	60f8      	str	r0, [r7, #12]
 80065e0:	60b9      	str	r1, [r7, #8]
 80065e2:	603b      	str	r3, [r7, #0]
 80065e4:	4613      	mov	r3, r2
 80065e6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80065e8:	e022      	b.n	8006630 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065f0:	d01e      	beq.n	8006630 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065f2:	f7fd fa55 	bl	8003aa0 <HAL_GetTick>
 80065f6:	4602      	mov	r2, r0
 80065f8:	69bb      	ldr	r3, [r7, #24]
 80065fa:	1ad3      	subs	r3, r2, r3
 80065fc:	683a      	ldr	r2, [r7, #0]
 80065fe:	429a      	cmp	r2, r3
 8006600:	d302      	bcc.n	8006608 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d113      	bne.n	8006630 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800660c:	f043 0220 	orr.w	r2, r3, #32
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	2220      	movs	r2, #32
 8006618:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	2200      	movs	r2, #0
 8006620:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	2200      	movs	r2, #0
 8006628:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800662c:	2301      	movs	r3, #1
 800662e:	e00f      	b.n	8006650 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	699a      	ldr	r2, [r3, #24]
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	4013      	ands	r3, r2
 800663a:	68ba      	ldr	r2, [r7, #8]
 800663c:	429a      	cmp	r2, r3
 800663e:	bf0c      	ite	eq
 8006640:	2301      	moveq	r3, #1
 8006642:	2300      	movne	r3, #0
 8006644:	b2db      	uxtb	r3, r3
 8006646:	461a      	mov	r2, r3
 8006648:	79fb      	ldrb	r3, [r7, #7]
 800664a:	429a      	cmp	r2, r3
 800664c:	d0cd      	beq.n	80065ea <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800664e:	2300      	movs	r3, #0
}
 8006650:	4618      	mov	r0, r3
 8006652:	3710      	adds	r7, #16
 8006654:	46bd      	mov	sp, r7
 8006656:	bd80      	pop	{r7, pc}

08006658 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b084      	sub	sp, #16
 800665c:	af00      	add	r7, sp, #0
 800665e:	60f8      	str	r0, [r7, #12]
 8006660:	60b9      	str	r1, [r7, #8]
 8006662:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006664:	e02c      	b.n	80066c0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006666:	687a      	ldr	r2, [r7, #4]
 8006668:	68b9      	ldr	r1, [r7, #8]
 800666a:	68f8      	ldr	r0, [r7, #12]
 800666c:	f000 f870 	bl	8006750 <I2C_IsErrorOccurred>
 8006670:	4603      	mov	r3, r0
 8006672:	2b00      	cmp	r3, #0
 8006674:	d001      	beq.n	800667a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006676:	2301      	movs	r3, #1
 8006678:	e02a      	b.n	80066d0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006680:	d01e      	beq.n	80066c0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006682:	f7fd fa0d 	bl	8003aa0 <HAL_GetTick>
 8006686:	4602      	mov	r2, r0
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	1ad3      	subs	r3, r2, r3
 800668c:	68ba      	ldr	r2, [r7, #8]
 800668e:	429a      	cmp	r2, r3
 8006690:	d302      	bcc.n	8006698 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d113      	bne.n	80066c0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800669c:	f043 0220 	orr.w	r2, r3, #32
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	2220      	movs	r2, #32
 80066a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	2200      	movs	r2, #0
 80066b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	2200      	movs	r2, #0
 80066b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80066bc:	2301      	movs	r3, #1
 80066be:	e007      	b.n	80066d0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	699b      	ldr	r3, [r3, #24]
 80066c6:	f003 0302 	and.w	r3, r3, #2
 80066ca:	2b02      	cmp	r3, #2
 80066cc:	d1cb      	bne.n	8006666 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80066ce:	2300      	movs	r3, #0
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	3710      	adds	r7, #16
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bd80      	pop	{r7, pc}

080066d8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b084      	sub	sp, #16
 80066dc:	af00      	add	r7, sp, #0
 80066de:	60f8      	str	r0, [r7, #12]
 80066e0:	60b9      	str	r1, [r7, #8]
 80066e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80066e4:	e028      	b.n	8006738 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80066e6:	687a      	ldr	r2, [r7, #4]
 80066e8:	68b9      	ldr	r1, [r7, #8]
 80066ea:	68f8      	ldr	r0, [r7, #12]
 80066ec:	f000 f830 	bl	8006750 <I2C_IsErrorOccurred>
 80066f0:	4603      	mov	r3, r0
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d001      	beq.n	80066fa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80066f6:	2301      	movs	r3, #1
 80066f8:	e026      	b.n	8006748 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066fa:	f7fd f9d1 	bl	8003aa0 <HAL_GetTick>
 80066fe:	4602      	mov	r2, r0
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	1ad3      	subs	r3, r2, r3
 8006704:	68ba      	ldr	r2, [r7, #8]
 8006706:	429a      	cmp	r2, r3
 8006708:	d302      	bcc.n	8006710 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d113      	bne.n	8006738 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006714:	f043 0220 	orr.w	r2, r3, #32
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	2220      	movs	r2, #32
 8006720:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	2200      	movs	r2, #0
 8006728:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	2200      	movs	r2, #0
 8006730:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006734:	2301      	movs	r3, #1
 8006736:	e007      	b.n	8006748 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	699b      	ldr	r3, [r3, #24]
 800673e:	f003 0320 	and.w	r3, r3, #32
 8006742:	2b20      	cmp	r3, #32
 8006744:	d1cf      	bne.n	80066e6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006746:	2300      	movs	r3, #0
}
 8006748:	4618      	mov	r0, r3
 800674a:	3710      	adds	r7, #16
 800674c:	46bd      	mov	sp, r7
 800674e:	bd80      	pop	{r7, pc}

08006750 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b08a      	sub	sp, #40	; 0x28
 8006754:	af00      	add	r7, sp, #0
 8006756:	60f8      	str	r0, [r7, #12]
 8006758:	60b9      	str	r1, [r7, #8]
 800675a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800675c:	2300      	movs	r3, #0
 800675e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	699b      	ldr	r3, [r3, #24]
 8006768:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800676a:	2300      	movs	r3, #0
 800676c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006772:	69bb      	ldr	r3, [r7, #24]
 8006774:	f003 0310 	and.w	r3, r3, #16
 8006778:	2b00      	cmp	r3, #0
 800677a:	d068      	beq.n	800684e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	2210      	movs	r2, #16
 8006782:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006784:	e049      	b.n	800681a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800678c:	d045      	beq.n	800681a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800678e:	f7fd f987 	bl	8003aa0 <HAL_GetTick>
 8006792:	4602      	mov	r2, r0
 8006794:	69fb      	ldr	r3, [r7, #28]
 8006796:	1ad3      	subs	r3, r2, r3
 8006798:	68ba      	ldr	r2, [r7, #8]
 800679a:	429a      	cmp	r2, r3
 800679c:	d302      	bcc.n	80067a4 <I2C_IsErrorOccurred+0x54>
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d13a      	bne.n	800681a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	685b      	ldr	r3, [r3, #4]
 80067aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80067ae:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80067b6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	699b      	ldr	r3, [r3, #24]
 80067be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80067c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067c6:	d121      	bne.n	800680c <I2C_IsErrorOccurred+0xbc>
 80067c8:	697b      	ldr	r3, [r7, #20]
 80067ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80067ce:	d01d      	beq.n	800680c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80067d0:	7cfb      	ldrb	r3, [r7, #19]
 80067d2:	2b20      	cmp	r3, #32
 80067d4:	d01a      	beq.n	800680c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	685a      	ldr	r2, [r3, #4]
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80067e4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80067e6:	f7fd f95b 	bl	8003aa0 <HAL_GetTick>
 80067ea:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80067ec:	e00e      	b.n	800680c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80067ee:	f7fd f957 	bl	8003aa0 <HAL_GetTick>
 80067f2:	4602      	mov	r2, r0
 80067f4:	69fb      	ldr	r3, [r7, #28]
 80067f6:	1ad3      	subs	r3, r2, r3
 80067f8:	2b19      	cmp	r3, #25
 80067fa:	d907      	bls.n	800680c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 80067fc:	6a3b      	ldr	r3, [r7, #32]
 80067fe:	f043 0320 	orr.w	r3, r3, #32
 8006802:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006804:	2301      	movs	r3, #1
 8006806:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800680a:	e006      	b.n	800681a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	699b      	ldr	r3, [r3, #24]
 8006812:	f003 0320 	and.w	r3, r3, #32
 8006816:	2b20      	cmp	r3, #32
 8006818:	d1e9      	bne.n	80067ee <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	699b      	ldr	r3, [r3, #24]
 8006820:	f003 0320 	and.w	r3, r3, #32
 8006824:	2b20      	cmp	r3, #32
 8006826:	d003      	beq.n	8006830 <I2C_IsErrorOccurred+0xe0>
 8006828:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800682c:	2b00      	cmp	r3, #0
 800682e:	d0aa      	beq.n	8006786 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006830:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006834:	2b00      	cmp	r3, #0
 8006836:	d103      	bne.n	8006840 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	2220      	movs	r2, #32
 800683e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006840:	6a3b      	ldr	r3, [r7, #32]
 8006842:	f043 0304 	orr.w	r3, r3, #4
 8006846:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006848:	2301      	movs	r3, #1
 800684a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	699b      	ldr	r3, [r3, #24]
 8006854:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006856:	69bb      	ldr	r3, [r7, #24]
 8006858:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800685c:	2b00      	cmp	r3, #0
 800685e:	d00b      	beq.n	8006878 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006860:	6a3b      	ldr	r3, [r7, #32]
 8006862:	f043 0301 	orr.w	r3, r3, #1
 8006866:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006870:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006872:	2301      	movs	r3, #1
 8006874:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006878:	69bb      	ldr	r3, [r7, #24]
 800687a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800687e:	2b00      	cmp	r3, #0
 8006880:	d00b      	beq.n	800689a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006882:	6a3b      	ldr	r3, [r7, #32]
 8006884:	f043 0308 	orr.w	r3, r3, #8
 8006888:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006892:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006894:	2301      	movs	r3, #1
 8006896:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800689a:	69bb      	ldr	r3, [r7, #24]
 800689c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d00b      	beq.n	80068bc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80068a4:	6a3b      	ldr	r3, [r7, #32]
 80068a6:	f043 0302 	orr.w	r3, r3, #2
 80068aa:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80068b4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80068b6:	2301      	movs	r3, #1
 80068b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80068bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d01c      	beq.n	80068fe <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80068c4:	68f8      	ldr	r0, [r7, #12]
 80068c6:	f7ff fe63 	bl	8006590 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	6859      	ldr	r1, [r3, #4]
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681a      	ldr	r2, [r3, #0]
 80068d4:	4b0d      	ldr	r3, [pc, #52]	; (800690c <I2C_IsErrorOccurred+0x1bc>)
 80068d6:	400b      	ands	r3, r1
 80068d8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80068de:	6a3b      	ldr	r3, [r7, #32]
 80068e0:	431a      	orrs	r2, r3
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	2220      	movs	r2, #32
 80068ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	2200      	movs	r2, #0
 80068f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	2200      	movs	r2, #0
 80068fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80068fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006902:	4618      	mov	r0, r3
 8006904:	3728      	adds	r7, #40	; 0x28
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}
 800690a:	bf00      	nop
 800690c:	fe00e800 	.word	0xfe00e800

08006910 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006910:	b480      	push	{r7}
 8006912:	b087      	sub	sp, #28
 8006914:	af00      	add	r7, sp, #0
 8006916:	60f8      	str	r0, [r7, #12]
 8006918:	607b      	str	r3, [r7, #4]
 800691a:	460b      	mov	r3, r1
 800691c:	817b      	strh	r3, [r7, #10]
 800691e:	4613      	mov	r3, r2
 8006920:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006922:	897b      	ldrh	r3, [r7, #10]
 8006924:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006928:	7a7b      	ldrb	r3, [r7, #9]
 800692a:	041b      	lsls	r3, r3, #16
 800692c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006930:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006936:	6a3b      	ldr	r3, [r7, #32]
 8006938:	4313      	orrs	r3, r2
 800693a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800693e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	685a      	ldr	r2, [r3, #4]
 8006946:	6a3b      	ldr	r3, [r7, #32]
 8006948:	0d5b      	lsrs	r3, r3, #21
 800694a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800694e:	4b08      	ldr	r3, [pc, #32]	; (8006970 <I2C_TransferConfig+0x60>)
 8006950:	430b      	orrs	r3, r1
 8006952:	43db      	mvns	r3, r3
 8006954:	ea02 0103 	and.w	r1, r2, r3
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	697a      	ldr	r2, [r7, #20]
 800695e:	430a      	orrs	r2, r1
 8006960:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006962:	bf00      	nop
 8006964:	371c      	adds	r7, #28
 8006966:	46bd      	mov	sp, r7
 8006968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696c:	4770      	bx	lr
 800696e:	bf00      	nop
 8006970:	03ff63ff 	.word	0x03ff63ff

08006974 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b084      	sub	sp, #16
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d101      	bne.n	8006986 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8006982:	2301      	movs	r3, #1
 8006984:	e0bf      	b.n	8006b06 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800698c:	b2db      	uxtb	r3, r3
 800698e:	2b00      	cmp	r3, #0
 8006990:	d106      	bne.n	80069a0 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2200      	movs	r2, #0
 8006996:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f7fa faea 	bl	8000f74 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2202      	movs	r2, #2
 80069a4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	699a      	ldr	r2, [r3, #24]
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80069b6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	6999      	ldr	r1, [r3, #24]
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	685a      	ldr	r2, [r3, #4]
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	689b      	ldr	r3, [r3, #8]
 80069c6:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80069cc:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	691b      	ldr	r3, [r3, #16]
 80069d2:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	430a      	orrs	r2, r1
 80069da:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	6899      	ldr	r1, [r3, #8]
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681a      	ldr	r2, [r3, #0]
 80069e6:	4b4a      	ldr	r3, [pc, #296]	; (8006b10 <HAL_LTDC_Init+0x19c>)
 80069e8:	400b      	ands	r3, r1
 80069ea:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	695b      	ldr	r3, [r3, #20]
 80069f0:	041b      	lsls	r3, r3, #16
 80069f2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	6899      	ldr	r1, [r3, #8]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	699a      	ldr	r2, [r3, #24]
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	431a      	orrs	r2, r3
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	430a      	orrs	r2, r1
 8006a08:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	68d9      	ldr	r1, [r3, #12]
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681a      	ldr	r2, [r3, #0]
 8006a14:	4b3e      	ldr	r3, [pc, #248]	; (8006b10 <HAL_LTDC_Init+0x19c>)
 8006a16:	400b      	ands	r3, r1
 8006a18:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	69db      	ldr	r3, [r3, #28]
 8006a1e:	041b      	lsls	r3, r3, #16
 8006a20:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	68d9      	ldr	r1, [r3, #12]
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6a1a      	ldr	r2, [r3, #32]
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	431a      	orrs	r2, r3
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	430a      	orrs	r2, r1
 8006a36:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	6919      	ldr	r1, [r3, #16]
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681a      	ldr	r2, [r3, #0]
 8006a42:	4b33      	ldr	r3, [pc, #204]	; (8006b10 <HAL_LTDC_Init+0x19c>)
 8006a44:	400b      	ands	r3, r1
 8006a46:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a4c:	041b      	lsls	r3, r3, #16
 8006a4e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	6919      	ldr	r1, [r3, #16]
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	431a      	orrs	r2, r3
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	430a      	orrs	r2, r1
 8006a64:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	6959      	ldr	r1, [r3, #20]
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681a      	ldr	r2, [r3, #0]
 8006a70:	4b27      	ldr	r3, [pc, #156]	; (8006b10 <HAL_LTDC_Init+0x19c>)
 8006a72:	400b      	ands	r3, r1
 8006a74:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a7a:	041b      	lsls	r3, r3, #16
 8006a7c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	6959      	ldr	r1, [r3, #20]
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	431a      	orrs	r2, r3
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	430a      	orrs	r2, r1
 8006a92:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006a9a:	021b      	lsls	r3, r3, #8
 8006a9c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006aa4:	041b      	lsls	r3, r3, #16
 8006aa6:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8006ab6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006abe:	68ba      	ldr	r2, [r7, #8]
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	4313      	orrs	r3, r2
 8006ac4:	687a      	ldr	r2, [r7, #4]
 8006ac6:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8006aca:	431a      	orrs	r2, r3
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	430a      	orrs	r2, r1
 8006ad2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f042 0206 	orr.w	r2, r2, #6
 8006ae2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	699a      	ldr	r2, [r3, #24]
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f042 0201 	orr.w	r2, r2, #1
 8006af2:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2200      	movs	r2, #0
 8006af8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2201      	movs	r2, #1
 8006b00:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8006b04:	2300      	movs	r3, #0
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	3710      	adds	r7, #16
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bd80      	pop	{r7, pc}
 8006b0e:	bf00      	nop
 8006b10:	f000f800 	.word	0xf000f800

08006b14 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006b14:	b5b0      	push	{r4, r5, r7, lr}
 8006b16:	b084      	sub	sp, #16
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	60f8      	str	r0, [r7, #12]
 8006b1c:	60b9      	str	r1, [r7, #8]
 8006b1e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8006b26:	2b01      	cmp	r3, #1
 8006b28:	d101      	bne.n	8006b2e <HAL_LTDC_ConfigLayer+0x1a>
 8006b2a:	2302      	movs	r3, #2
 8006b2c:	e02c      	b.n	8006b88 <HAL_LTDC_ConfigLayer+0x74>
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	2201      	movs	r2, #1
 8006b32:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	2202      	movs	r2, #2
 8006b3a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006b3e:	68fa      	ldr	r2, [r7, #12]
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2134      	movs	r1, #52	; 0x34
 8006b44:	fb01 f303 	mul.w	r3, r1, r3
 8006b48:	4413      	add	r3, r2
 8006b4a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	4614      	mov	r4, r2
 8006b52:	461d      	mov	r5, r3
 8006b54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006b56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006b5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006b5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b60:	682b      	ldr	r3, [r5, #0]
 8006b62:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006b64:	687a      	ldr	r2, [r7, #4]
 8006b66:	68b9      	ldr	r1, [r7, #8]
 8006b68:	68f8      	ldr	r0, [r7, #12]
 8006b6a:	f000 f81f 	bl	8006bac <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	2201      	movs	r2, #1
 8006b74:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	2201      	movs	r2, #1
 8006b7a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	2200      	movs	r2, #0
 8006b82:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8006b86:	2300      	movs	r3, #0
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	3710      	adds	r7, #16
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bdb0      	pop	{r4, r5, r7, pc}

08006b90 <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 8006b90:	b480      	push	{r7}
 8006b92:	b083      	sub	sp, #12
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8006b9e:	b2db      	uxtb	r3, r3
}
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	370c      	adds	r7, #12
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006baa:	4770      	bx	lr

08006bac <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006bac:	b480      	push	{r7}
 8006bae:	b089      	sub	sp, #36	; 0x24
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	60f8      	str	r0, [r7, #12]
 8006bb4:	60b9      	str	r1, [r7, #8]
 8006bb6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	685a      	ldr	r2, [r3, #4]
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	68db      	ldr	r3, [r3, #12]
 8006bc2:	0c1b      	lsrs	r3, r3, #16
 8006bc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006bc8:	4413      	add	r3, r2
 8006bca:	041b      	lsls	r3, r3, #16
 8006bcc:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	461a      	mov	r2, r3
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	01db      	lsls	r3, r3, #7
 8006bd8:	4413      	add	r3, r2
 8006bda:	3384      	adds	r3, #132	; 0x84
 8006bdc:	685b      	ldr	r3, [r3, #4]
 8006bde:	68fa      	ldr	r2, [r7, #12]
 8006be0:	6812      	ldr	r2, [r2, #0]
 8006be2:	4611      	mov	r1, r2
 8006be4:	687a      	ldr	r2, [r7, #4]
 8006be6:	01d2      	lsls	r2, r2, #7
 8006be8:	440a      	add	r2, r1
 8006bea:	3284      	adds	r2, #132	; 0x84
 8006bec:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006bf0:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	68db      	ldr	r3, [r3, #12]
 8006bfc:	0c1b      	lsrs	r3, r3, #16
 8006bfe:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006c02:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006c04:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4619      	mov	r1, r3
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	01db      	lsls	r3, r3, #7
 8006c10:	440b      	add	r3, r1
 8006c12:	3384      	adds	r3, #132	; 0x84
 8006c14:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006c16:	69fb      	ldr	r3, [r7, #28]
 8006c18:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006c1a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	68da      	ldr	r2, [r3, #12]
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	68db      	ldr	r3, [r3, #12]
 8006c26:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006c2a:	4413      	add	r3, r2
 8006c2c:	041b      	lsls	r3, r3, #16
 8006c2e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	461a      	mov	r2, r3
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	01db      	lsls	r3, r3, #7
 8006c3a:	4413      	add	r3, r2
 8006c3c:	3384      	adds	r3, #132	; 0x84
 8006c3e:	689b      	ldr	r3, [r3, #8]
 8006c40:	68fa      	ldr	r2, [r7, #12]
 8006c42:	6812      	ldr	r2, [r2, #0]
 8006c44:	4611      	mov	r1, r2
 8006c46:	687a      	ldr	r2, [r7, #4]
 8006c48:	01d2      	lsls	r2, r2, #7
 8006c4a:	440a      	add	r2, r1
 8006c4c:	3284      	adds	r2, #132	; 0x84
 8006c4e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006c52:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	689a      	ldr	r2, [r3, #8]
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	68db      	ldr	r3, [r3, #12]
 8006c5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006c62:	4413      	add	r3, r2
 8006c64:	1c5a      	adds	r2, r3, #1
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	4619      	mov	r1, r3
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	01db      	lsls	r3, r3, #7
 8006c70:	440b      	add	r3, r1
 8006c72:	3384      	adds	r3, #132	; 0x84
 8006c74:	4619      	mov	r1, r3
 8006c76:	69fb      	ldr	r3, [r7, #28]
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	461a      	mov	r2, r3
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	01db      	lsls	r3, r3, #7
 8006c86:	4413      	add	r3, r2
 8006c88:	3384      	adds	r3, #132	; 0x84
 8006c8a:	691b      	ldr	r3, [r3, #16]
 8006c8c:	68fa      	ldr	r2, [r7, #12]
 8006c8e:	6812      	ldr	r2, [r2, #0]
 8006c90:	4611      	mov	r1, r2
 8006c92:	687a      	ldr	r2, [r7, #4]
 8006c94:	01d2      	lsls	r2, r2, #7
 8006c96:	440a      	add	r2, r1
 8006c98:	3284      	adds	r2, #132	; 0x84
 8006c9a:	f023 0307 	bic.w	r3, r3, #7
 8006c9e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	461a      	mov	r2, r3
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	01db      	lsls	r3, r3, #7
 8006caa:	4413      	add	r3, r2
 8006cac:	3384      	adds	r3, #132	; 0x84
 8006cae:	461a      	mov	r2, r3
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	691b      	ldr	r3, [r3, #16]
 8006cb4:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006cbc:	021b      	lsls	r3, r3, #8
 8006cbe:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006cc6:	041b      	lsls	r3, r3, #16
 8006cc8:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	699b      	ldr	r3, [r3, #24]
 8006cce:	061b      	lsls	r3, r3, #24
 8006cd0:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	461a      	mov	r2, r3
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	01db      	lsls	r3, r3, #7
 8006cdc:	4413      	add	r3, r2
 8006cde:	3384      	adds	r3, #132	; 0x84
 8006ce0:	699b      	ldr	r3, [r3, #24]
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	461a      	mov	r2, r3
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	01db      	lsls	r3, r3, #7
 8006cec:	4413      	add	r3, r2
 8006cee:	3384      	adds	r3, #132	; 0x84
 8006cf0:	461a      	mov	r2, r3
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006cfc:	461a      	mov	r2, r3
 8006cfe:	69fb      	ldr	r3, [r7, #28]
 8006d00:	431a      	orrs	r2, r3
 8006d02:	69bb      	ldr	r3, [r7, #24]
 8006d04:	431a      	orrs	r2, r3
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4619      	mov	r1, r3
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	01db      	lsls	r3, r3, #7
 8006d10:	440b      	add	r3, r1
 8006d12:	3384      	adds	r3, #132	; 0x84
 8006d14:	4619      	mov	r1, r3
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	461a      	mov	r2, r3
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	01db      	lsls	r3, r3, #7
 8006d26:	4413      	add	r3, r2
 8006d28:	3384      	adds	r3, #132	; 0x84
 8006d2a:	695b      	ldr	r3, [r3, #20]
 8006d2c:	68fa      	ldr	r2, [r7, #12]
 8006d2e:	6812      	ldr	r2, [r2, #0]
 8006d30:	4611      	mov	r1, r2
 8006d32:	687a      	ldr	r2, [r7, #4]
 8006d34:	01d2      	lsls	r2, r2, #7
 8006d36:	440a      	add	r2, r1
 8006d38:	3284      	adds	r2, #132	; 0x84
 8006d3a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006d3e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	461a      	mov	r2, r3
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	01db      	lsls	r3, r3, #7
 8006d4a:	4413      	add	r3, r2
 8006d4c:	3384      	adds	r3, #132	; 0x84
 8006d4e:	461a      	mov	r2, r3
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	695b      	ldr	r3, [r3, #20]
 8006d54:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	461a      	mov	r2, r3
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	01db      	lsls	r3, r3, #7
 8006d60:	4413      	add	r3, r2
 8006d62:	3384      	adds	r3, #132	; 0x84
 8006d64:	69da      	ldr	r2, [r3, #28]
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4619      	mov	r1, r3
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	01db      	lsls	r3, r3, #7
 8006d70:	440b      	add	r3, r1
 8006d72:	3384      	adds	r3, #132	; 0x84
 8006d74:	4619      	mov	r1, r3
 8006d76:	4b58      	ldr	r3, [pc, #352]	; (8006ed8 <LTDC_SetConfig+0x32c>)
 8006d78:	4013      	ands	r3, r2
 8006d7a:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	69da      	ldr	r2, [r3, #28]
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	6a1b      	ldr	r3, [r3, #32]
 8006d84:	68f9      	ldr	r1, [r7, #12]
 8006d86:	6809      	ldr	r1, [r1, #0]
 8006d88:	4608      	mov	r0, r1
 8006d8a:	6879      	ldr	r1, [r7, #4]
 8006d8c:	01c9      	lsls	r1, r1, #7
 8006d8e:	4401      	add	r1, r0
 8006d90:	3184      	adds	r1, #132	; 0x84
 8006d92:	4313      	orrs	r3, r2
 8006d94:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	461a      	mov	r2, r3
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	01db      	lsls	r3, r3, #7
 8006da0:	4413      	add	r3, r2
 8006da2:	3384      	adds	r3, #132	; 0x84
 8006da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	461a      	mov	r2, r3
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	01db      	lsls	r3, r3, #7
 8006db0:	4413      	add	r3, r2
 8006db2:	3384      	adds	r3, #132	; 0x84
 8006db4:	461a      	mov	r2, r3
 8006db6:	2300      	movs	r3, #0
 8006db8:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	461a      	mov	r2, r3
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	01db      	lsls	r3, r3, #7
 8006dc4:	4413      	add	r3, r2
 8006dc6:	3384      	adds	r3, #132	; 0x84
 8006dc8:	461a      	mov	r2, r3
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dce:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	691b      	ldr	r3, [r3, #16]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d102      	bne.n	8006dde <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8006dd8:	2304      	movs	r3, #4
 8006dda:	61fb      	str	r3, [r7, #28]
 8006ddc:	e01b      	b.n	8006e16 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	691b      	ldr	r3, [r3, #16]
 8006de2:	2b01      	cmp	r3, #1
 8006de4:	d102      	bne.n	8006dec <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8006de6:	2303      	movs	r3, #3
 8006de8:	61fb      	str	r3, [r7, #28]
 8006dea:	e014      	b.n	8006e16 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	691b      	ldr	r3, [r3, #16]
 8006df0:	2b04      	cmp	r3, #4
 8006df2:	d00b      	beq.n	8006e0c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006df8:	2b02      	cmp	r3, #2
 8006dfa:	d007      	beq.n	8006e0c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006e00:	2b03      	cmp	r3, #3
 8006e02:	d003      	beq.n	8006e0c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006e08:	2b07      	cmp	r3, #7
 8006e0a:	d102      	bne.n	8006e12 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8006e0c:	2302      	movs	r3, #2
 8006e0e:	61fb      	str	r3, [r7, #28]
 8006e10:	e001      	b.n	8006e16 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8006e12:	2301      	movs	r3, #1
 8006e14:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	461a      	mov	r2, r3
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	01db      	lsls	r3, r3, #7
 8006e20:	4413      	add	r3, r2
 8006e22:	3384      	adds	r3, #132	; 0x84
 8006e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e26:	68fa      	ldr	r2, [r7, #12]
 8006e28:	6812      	ldr	r2, [r2, #0]
 8006e2a:	4611      	mov	r1, r2
 8006e2c:	687a      	ldr	r2, [r7, #4]
 8006e2e:	01d2      	lsls	r2, r2, #7
 8006e30:	440a      	add	r2, r1
 8006e32:	3284      	adds	r2, #132	; 0x84
 8006e34:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8006e38:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e3e:	69fa      	ldr	r2, [r7, #28]
 8006e40:	fb02 f303 	mul.w	r3, r2, r3
 8006e44:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	6859      	ldr	r1, [r3, #4]
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	1acb      	subs	r3, r1, r3
 8006e50:	69f9      	ldr	r1, [r7, #28]
 8006e52:	fb01 f303 	mul.w	r3, r1, r3
 8006e56:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8006e58:	68f9      	ldr	r1, [r7, #12]
 8006e5a:	6809      	ldr	r1, [r1, #0]
 8006e5c:	4608      	mov	r0, r1
 8006e5e:	6879      	ldr	r1, [r7, #4]
 8006e60:	01c9      	lsls	r1, r1, #7
 8006e62:	4401      	add	r1, r0
 8006e64:	3184      	adds	r1, #132	; 0x84
 8006e66:	4313      	orrs	r3, r2
 8006e68:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	461a      	mov	r2, r3
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	01db      	lsls	r3, r3, #7
 8006e74:	4413      	add	r3, r2
 8006e76:	3384      	adds	r3, #132	; 0x84
 8006e78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	4619      	mov	r1, r3
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	01db      	lsls	r3, r3, #7
 8006e84:	440b      	add	r3, r1
 8006e86:	3384      	adds	r3, #132	; 0x84
 8006e88:	4619      	mov	r1, r3
 8006e8a:	4b14      	ldr	r3, [pc, #80]	; (8006edc <LTDC_SetConfig+0x330>)
 8006e8c:	4013      	ands	r3, r2
 8006e8e:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	461a      	mov	r2, r3
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	01db      	lsls	r3, r3, #7
 8006e9a:	4413      	add	r3, r2
 8006e9c:	3384      	adds	r3, #132	; 0x84
 8006e9e:	461a      	mov	r2, r3
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ea4:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	461a      	mov	r2, r3
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	01db      	lsls	r3, r3, #7
 8006eb0:	4413      	add	r3, r2
 8006eb2:	3384      	adds	r3, #132	; 0x84
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	68fa      	ldr	r2, [r7, #12]
 8006eb8:	6812      	ldr	r2, [r2, #0]
 8006eba:	4611      	mov	r1, r2
 8006ebc:	687a      	ldr	r2, [r7, #4]
 8006ebe:	01d2      	lsls	r2, r2, #7
 8006ec0:	440a      	add	r2, r1
 8006ec2:	3284      	adds	r2, #132	; 0x84
 8006ec4:	f043 0301 	orr.w	r3, r3, #1
 8006ec8:	6013      	str	r3, [r2, #0]
}
 8006eca:	bf00      	nop
 8006ecc:	3724      	adds	r7, #36	; 0x24
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed4:	4770      	bx	lr
 8006ed6:	bf00      	nop
 8006ed8:	fffff8f8 	.word	0xfffff8f8
 8006edc:	fffff800 	.word	0xfffff800

08006ee0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006ee4:	4b05      	ldr	r3, [pc, #20]	; (8006efc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	4a04      	ldr	r2, [pc, #16]	; (8006efc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006eea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006eee:	6013      	str	r3, [r2, #0]
}
 8006ef0:	bf00      	nop
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef8:	4770      	bx	lr
 8006efa:	bf00      	nop
 8006efc:	40007000 	.word	0x40007000

08006f00 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b082      	sub	sp, #8
 8006f04:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8006f06:	2300      	movs	r3, #0
 8006f08:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006f0a:	4b23      	ldr	r3, [pc, #140]	; (8006f98 <HAL_PWREx_EnableOverDrive+0x98>)
 8006f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f0e:	4a22      	ldr	r2, [pc, #136]	; (8006f98 <HAL_PWREx_EnableOverDrive+0x98>)
 8006f10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f14:	6413      	str	r3, [r2, #64]	; 0x40
 8006f16:	4b20      	ldr	r3, [pc, #128]	; (8006f98 <HAL_PWREx_EnableOverDrive+0x98>)
 8006f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f1e:	603b      	str	r3, [r7, #0]
 8006f20:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006f22:	4b1e      	ldr	r3, [pc, #120]	; (8006f9c <HAL_PWREx_EnableOverDrive+0x9c>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4a1d      	ldr	r2, [pc, #116]	; (8006f9c <HAL_PWREx_EnableOverDrive+0x9c>)
 8006f28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f2c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006f2e:	f7fc fdb7 	bl	8003aa0 <HAL_GetTick>
 8006f32:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006f34:	e009      	b.n	8006f4a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006f36:	f7fc fdb3 	bl	8003aa0 <HAL_GetTick>
 8006f3a:	4602      	mov	r2, r0
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	1ad3      	subs	r3, r2, r3
 8006f40:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006f44:	d901      	bls.n	8006f4a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8006f46:	2303      	movs	r3, #3
 8006f48:	e022      	b.n	8006f90 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006f4a:	4b14      	ldr	r3, [pc, #80]	; (8006f9c <HAL_PWREx_EnableOverDrive+0x9c>)
 8006f4c:	685b      	ldr	r3, [r3, #4]
 8006f4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f56:	d1ee      	bne.n	8006f36 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006f58:	4b10      	ldr	r3, [pc, #64]	; (8006f9c <HAL_PWREx_EnableOverDrive+0x9c>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4a0f      	ldr	r2, [pc, #60]	; (8006f9c <HAL_PWREx_EnableOverDrive+0x9c>)
 8006f5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f62:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006f64:	f7fc fd9c 	bl	8003aa0 <HAL_GetTick>
 8006f68:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006f6a:	e009      	b.n	8006f80 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006f6c:	f7fc fd98 	bl	8003aa0 <HAL_GetTick>
 8006f70:	4602      	mov	r2, r0
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	1ad3      	subs	r3, r2, r3
 8006f76:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006f7a:	d901      	bls.n	8006f80 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8006f7c:	2303      	movs	r3, #3
 8006f7e:	e007      	b.n	8006f90 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006f80:	4b06      	ldr	r3, [pc, #24]	; (8006f9c <HAL_PWREx_EnableOverDrive+0x9c>)
 8006f82:	685b      	ldr	r3, [r3, #4]
 8006f84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f88:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006f8c:	d1ee      	bne.n	8006f6c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8006f8e:	2300      	movs	r3, #0
}
 8006f90:	4618      	mov	r0, r3
 8006f92:	3708      	adds	r7, #8
 8006f94:	46bd      	mov	sp, r7
 8006f96:	bd80      	pop	{r7, pc}
 8006f98:	40023800 	.word	0x40023800
 8006f9c:	40007000 	.word	0x40007000

08006fa0 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b086      	sub	sp, #24
 8006fa4:	af02      	add	r7, sp, #8
 8006fa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8006fa8:	f7fc fd7a 	bl	8003aa0 <HAL_GetTick>
 8006fac:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d101      	bne.n	8006fb8 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	e067      	b.n	8007088 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006fbe:	b2db      	uxtb	r3, r3
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d10b      	bne.n	8006fdc <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	f7fa f8c9 	bl	8001164 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8006fd2:	f241 3188 	movw	r1, #5000	; 0x1388
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f000 fb6b 	bl	80076b2 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	689b      	ldr	r3, [r3, #8]
 8006fea:	3b01      	subs	r3, #1
 8006fec:	021a      	lsls	r2, r3, #8
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	430a      	orrs	r2, r1
 8006ff4:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ffa:	9300      	str	r3, [sp, #0]
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	2200      	movs	r2, #0
 8007000:	2120      	movs	r1, #32
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f000 fb63 	bl	80076ce <QSPI_WaitFlagStateUntilTimeout>
 8007008:	4603      	mov	r3, r0
 800700a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800700c:	7afb      	ldrb	r3, [r7, #11]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d135      	bne.n	800707e <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	681a      	ldr	r2, [r3, #0]
 8007018:	4b1d      	ldr	r3, [pc, #116]	; (8007090 <HAL_QSPI_Init+0xf0>)
 800701a:	4013      	ands	r3, r2
 800701c:	687a      	ldr	r2, [r7, #4]
 800701e:	6852      	ldr	r2, [r2, #4]
 8007020:	0611      	lsls	r1, r2, #24
 8007022:	687a      	ldr	r2, [r7, #4]
 8007024:	68d2      	ldr	r2, [r2, #12]
 8007026:	4311      	orrs	r1, r2
 8007028:	687a      	ldr	r2, [r7, #4]
 800702a:	69d2      	ldr	r2, [r2, #28]
 800702c:	4311      	orrs	r1, r2
 800702e:	687a      	ldr	r2, [r7, #4]
 8007030:	6a12      	ldr	r2, [r2, #32]
 8007032:	4311      	orrs	r1, r2
 8007034:	687a      	ldr	r2, [r7, #4]
 8007036:	6812      	ldr	r2, [r2, #0]
 8007038:	430b      	orrs	r3, r1
 800703a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	685a      	ldr	r2, [r3, #4]
 8007042:	4b14      	ldr	r3, [pc, #80]	; (8007094 <HAL_QSPI_Init+0xf4>)
 8007044:	4013      	ands	r3, r2
 8007046:	687a      	ldr	r2, [r7, #4]
 8007048:	6912      	ldr	r2, [r2, #16]
 800704a:	0411      	lsls	r1, r2, #16
 800704c:	687a      	ldr	r2, [r7, #4]
 800704e:	6952      	ldr	r2, [r2, #20]
 8007050:	4311      	orrs	r1, r2
 8007052:	687a      	ldr	r2, [r7, #4]
 8007054:	6992      	ldr	r2, [r2, #24]
 8007056:	4311      	orrs	r1, r2
 8007058:	687a      	ldr	r2, [r7, #4]
 800705a:	6812      	ldr	r2, [r2, #0]
 800705c:	430b      	orrs	r3, r1
 800705e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	681a      	ldr	r2, [r3, #0]
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f042 0201 	orr.w	r2, r2, #1
 800706e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2200      	movs	r2, #0
 8007074:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2201      	movs	r2, #1
 800707a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2200      	movs	r2, #0
 8007082:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8007086:	7afb      	ldrb	r3, [r7, #11]
}
 8007088:	4618      	mov	r0, r3
 800708a:	3710      	adds	r7, #16
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}
 8007090:	00ffff2f 	.word	0x00ffff2f
 8007094:	ffe0f8fe 	.word	0xffe0f8fe

08007098 <HAL_QSPI_DeInit>:
  * @brief De-Initialize the QSPI peripheral.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_DeInit(QSPI_HandleTypeDef *hqspi)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b082      	sub	sp, #8
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d101      	bne.n	80070aa <HAL_QSPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80070a6:	2301      	movs	r3, #1
 80070a8:	e016      	b.n	80070d8 <HAL_QSPI_DeInit+0x40>
  }

  /* Disable the QSPI Peripheral Clock */
  __HAL_QSPI_DISABLE(hqspi);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	681a      	ldr	r2, [r3, #0]
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f022 0201 	bic.w	r2, r2, #1
 80070b8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hqspi->MspDeInitCallback(hqspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_QSPI_MspDeInit(hqspi);
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f7fa f8e2 	bl	8001284 <HAL_QSPI_MspDeInit>
#endif

  /* Set QSPI error code to none */
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2200      	movs	r2, #0
 80070c4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Initialize the QSPI state */
  hqspi->State = HAL_QSPI_STATE_RESET;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2200      	movs	r2, #0
 80070ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2200      	movs	r2, #0
 80070d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80070d6:	2300      	movs	r3, #0
}
 80070d8:	4618      	mov	r0, r3
 80070da:	3708      	adds	r7, #8
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd80      	pop	{r7, pc}

080070e0 <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b088      	sub	sp, #32
 80070e4:	af02      	add	r7, sp, #8
 80070e6:	60f8      	str	r0, [r7, #12]
 80070e8:	60b9      	str	r1, [r7, #8]
 80070ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80070ec:	f7fc fcd8 	bl	8003aa0 <HAL_GetTick>
 80070f0:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80070f8:	b2db      	uxtb	r3, r3
 80070fa:	2b01      	cmp	r3, #1
 80070fc:	d101      	bne.n	8007102 <HAL_QSPI_Command+0x22>
 80070fe:	2302      	movs	r3, #2
 8007100:	e048      	b.n	8007194 <HAL_QSPI_Command+0xb4>
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	2201      	movs	r2, #1
 8007106:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007110:	b2db      	uxtb	r3, r3
 8007112:	2b01      	cmp	r3, #1
 8007114:	d137      	bne.n	8007186 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	2200      	movs	r2, #0
 800711a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	2202      	movs	r2, #2
 8007120:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	9300      	str	r3, [sp, #0]
 8007128:	693b      	ldr	r3, [r7, #16]
 800712a:	2200      	movs	r2, #0
 800712c:	2120      	movs	r1, #32
 800712e:	68f8      	ldr	r0, [r7, #12]
 8007130:	f000 facd 	bl	80076ce <QSPI_WaitFlagStateUntilTimeout>
 8007134:	4603      	mov	r3, r0
 8007136:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8007138:	7dfb      	ldrb	r3, [r7, #23]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d125      	bne.n	800718a <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800713e:	2200      	movs	r2, #0
 8007140:	68b9      	ldr	r1, [r7, #8]
 8007142:	68f8      	ldr	r0, [r7, #12]
 8007144:	f000 fafa 	bl	800773c <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800714c:	2b00      	cmp	r3, #0
 800714e:	d115      	bne.n	800717c <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	9300      	str	r3, [sp, #0]
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	2201      	movs	r2, #1
 8007158:	2102      	movs	r1, #2
 800715a:	68f8      	ldr	r0, [r7, #12]
 800715c:	f000 fab7 	bl	80076ce <QSPI_WaitFlagStateUntilTimeout>
 8007160:	4603      	mov	r3, r0
 8007162:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8007164:	7dfb      	ldrb	r3, [r7, #23]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d10f      	bne.n	800718a <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	2202      	movs	r2, #2
 8007170:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	2201      	movs	r2, #1
 8007176:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800717a:	e006      	b.n	800718a <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	2201      	movs	r2, #1
 8007180:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007184:	e001      	b.n	800718a <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8007186:	2302      	movs	r3, #2
 8007188:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	2200      	movs	r2, #0
 800718e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8007192:	7dfb      	ldrb	r3, [r7, #23]
}
 8007194:	4618      	mov	r0, r3
 8007196:	3718      	adds	r7, #24
 8007198:	46bd      	mov	sp, r7
 800719a:	bd80      	pop	{r7, pc}

0800719c <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b08a      	sub	sp, #40	; 0x28
 80071a0:	af02      	add	r7, sp, #8
 80071a2:	60f8      	str	r0, [r7, #12]
 80071a4:	60b9      	str	r1, [r7, #8]
 80071a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80071a8:	2300      	movs	r3, #0
 80071aa:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 80071ac:	f7fc fc78 	bl	8003aa0 <HAL_GetTick>
 80071b0:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	3320      	adds	r3, #32
 80071b8:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80071c0:	b2db      	uxtb	r3, r3
 80071c2:	2b01      	cmp	r3, #1
 80071c4:	d101      	bne.n	80071ca <HAL_QSPI_Transmit+0x2e>
 80071c6:	2302      	movs	r3, #2
 80071c8:	e07b      	b.n	80072c2 <HAL_QSPI_Transmit+0x126>
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	2201      	movs	r2, #1
 80071ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80071d8:	b2db      	uxtb	r3, r3
 80071da:	2b01      	cmp	r3, #1
 80071dc:	d16a      	bne.n	80072b4 <HAL_QSPI_Transmit+0x118>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	2200      	movs	r2, #0
 80071e2:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d05b      	beq.n	80072a2 <HAL_QSPI_Transmit+0x106>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	2212      	movs	r2, #18
 80071ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	691b      	ldr	r3, [r3, #16]
 80071f8:	1c5a      	adds	r2, r3, #1
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	691b      	ldr	r3, [r3, #16]
 8007204:	1c5a      	adds	r2, r3, #1
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	68ba      	ldr	r2, [r7, #8]
 800720e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	695a      	ldr	r2, [r3, #20]
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800721e:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 8007220:	e01b      	b.n	800725a <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	9300      	str	r3, [sp, #0]
 8007226:	69bb      	ldr	r3, [r7, #24]
 8007228:	2201      	movs	r2, #1
 800722a:	2104      	movs	r1, #4
 800722c:	68f8      	ldr	r0, [r7, #12]
 800722e:	f000 fa4e 	bl	80076ce <QSPI_WaitFlagStateUntilTimeout>
 8007232:	4603      	mov	r3, r0
 8007234:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8007236:	7ffb      	ldrb	r3, [r7, #31]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d113      	bne.n	8007264 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007240:	781a      	ldrb	r2, [r3, #0]
 8007242:	697b      	ldr	r3, [r7, #20]
 8007244:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800724a:	1c5a      	adds	r2, r3, #1
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007254:	1e5a      	subs	r2, r3, #1
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800725e:	2b00      	cmp	r3, #0
 8007260:	d1df      	bne.n	8007222 <HAL_QSPI_Transmit+0x86>
 8007262:	e000      	b.n	8007266 <HAL_QSPI_Transmit+0xca>
          break;
 8007264:	bf00      	nop
      }

      if (status == HAL_OK)
 8007266:	7ffb      	ldrb	r3, [r7, #31]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d115      	bne.n	8007298 <HAL_QSPI_Transmit+0xfc>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	9300      	str	r3, [sp, #0]
 8007270:	69bb      	ldr	r3, [r7, #24]
 8007272:	2201      	movs	r2, #1
 8007274:	2102      	movs	r1, #2
 8007276:	68f8      	ldr	r0, [r7, #12]
 8007278:	f000 fa29 	bl	80076ce <QSPI_WaitFlagStateUntilTimeout>
 800727c:	4603      	mov	r3, r0
 800727e:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8007280:	7ffb      	ldrb	r3, [r7, #31]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d108      	bne.n	8007298 <HAL_QSPI_Transmit+0xfc>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	2202      	movs	r2, #2
 800728c:	60da      	str	r2, [r3, #12]

#if  defined(QSPI1_V1_0)
          /* Clear Busy bit */
          status = HAL_QSPI_Abort(hqspi);
 800728e:	68f8      	ldr	r0, [r7, #12]
 8007290:	f000 f996 	bl	80075c0 <HAL_QSPI_Abort>
 8007294:	4603      	mov	r3, r0
 8007296:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	2201      	movs	r2, #1
 800729c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80072a0:	e00a      	b.n	80072b8 <HAL_QSPI_Transmit+0x11c>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072a6:	f043 0208 	orr.w	r2, r3, #8
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 80072ae:	2301      	movs	r3, #1
 80072b0:	77fb      	strb	r3, [r7, #31]
 80072b2:	e001      	b.n	80072b8 <HAL_QSPI_Transmit+0x11c>
    }
  }
  else
  {
    status = HAL_BUSY;
 80072b4:	2302      	movs	r3, #2
 80072b6:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	2200      	movs	r2, #0
 80072bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 80072c0:	7ffb      	ldrb	r3, [r7, #31]
}
 80072c2:	4618      	mov	r0, r3
 80072c4:	3720      	adds	r7, #32
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bd80      	pop	{r7, pc}

080072ca <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 80072ca:	b580      	push	{r7, lr}
 80072cc:	b08a      	sub	sp, #40	; 0x28
 80072ce:	af02      	add	r7, sp, #8
 80072d0:	60f8      	str	r0, [r7, #12]
 80072d2:	60b9      	str	r1, [r7, #8]
 80072d4:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80072d6:	2300      	movs	r3, #0
 80072d8:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 80072da:	f7fc fbe1 	bl	8003aa0 <HAL_GetTick>
 80072de:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	699b      	ldr	r3, [r3, #24]
 80072e6:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	3320      	adds	r3, #32
 80072ee:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80072f6:	b2db      	uxtb	r3, r3
 80072f8:	2b01      	cmp	r3, #1
 80072fa:	d101      	bne.n	8007300 <HAL_QSPI_Receive+0x36>
 80072fc:	2302      	movs	r3, #2
 80072fe:	e082      	b.n	8007406 <HAL_QSPI_Receive+0x13c>
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	2201      	movs	r2, #1
 8007304:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800730e:	b2db      	uxtb	r3, r3
 8007310:	2b01      	cmp	r3, #1
 8007312:	d171      	bne.n	80073f8 <HAL_QSPI_Receive+0x12e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	2200      	movs	r2, #0
 8007318:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d062      	beq.n	80073e6 <HAL_QSPI_Receive+0x11c>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	2222      	movs	r2, #34	; 0x22
 8007324:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	691b      	ldr	r3, [r3, #16]
 800732e:	1c5a      	adds	r2, r3, #1
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	691b      	ldr	r3, [r3, #16]
 800733a:	1c5a      	adds	r2, r3, #1
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	68ba      	ldr	r2, [r7, #8]
 8007344:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	695b      	ldr	r3, [r3, #20]
 800734c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8007358:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	697a      	ldr	r2, [r7, #20]
 8007360:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 8007362:	e01c      	b.n	800739e <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	9300      	str	r3, [sp, #0]
 8007368:	69bb      	ldr	r3, [r7, #24]
 800736a:	2201      	movs	r2, #1
 800736c:	2106      	movs	r1, #6
 800736e:	68f8      	ldr	r0, [r7, #12]
 8007370:	f000 f9ad 	bl	80076ce <QSPI_WaitFlagStateUntilTimeout>
 8007374:	4603      	mov	r3, r0
 8007376:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 8007378:	7ffb      	ldrb	r3, [r7, #31]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d114      	bne.n	80073a8 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007382:	693a      	ldr	r2, [r7, #16]
 8007384:	7812      	ldrb	r2, [r2, #0]
 8007386:	b2d2      	uxtb	r2, r2
 8007388:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800738e:	1c5a      	adds	r2, r3, #1
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007398:	1e5a      	subs	r2, r3, #1
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d1de      	bne.n	8007364 <HAL_QSPI_Receive+0x9a>
 80073a6:	e000      	b.n	80073aa <HAL_QSPI_Receive+0xe0>
          break;
 80073a8:	bf00      	nop
      }

      if (status == HAL_OK)
 80073aa:	7ffb      	ldrb	r3, [r7, #31]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d115      	bne.n	80073dc <HAL_QSPI_Receive+0x112>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	9300      	str	r3, [sp, #0]
 80073b4:	69bb      	ldr	r3, [r7, #24]
 80073b6:	2201      	movs	r2, #1
 80073b8:	2102      	movs	r1, #2
 80073ba:	68f8      	ldr	r0, [r7, #12]
 80073bc:	f000 f987 	bl	80076ce <QSPI_WaitFlagStateUntilTimeout>
 80073c0:	4603      	mov	r3, r0
 80073c2:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 80073c4:	7ffb      	ldrb	r3, [r7, #31]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d108      	bne.n	80073dc <HAL_QSPI_Receive+0x112>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	2202      	movs	r2, #2
 80073d0:	60da      	str	r2, [r3, #12]

#if  defined(QSPI1_V1_0)
          /* Workaround - Extra data written in the FIFO at the end of a read transfer */
          status = HAL_QSPI_Abort(hqspi);
 80073d2:	68f8      	ldr	r0, [r7, #12]
 80073d4:	f000 f8f4 	bl	80075c0 <HAL_QSPI_Abort>
 80073d8:	4603      	mov	r3, r0
 80073da:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	2201      	movs	r2, #1
 80073e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80073e4:	e00a      	b.n	80073fc <HAL_QSPI_Receive+0x132>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073ea:	f043 0208 	orr.w	r2, r3, #8
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 80073f2:	2301      	movs	r3, #1
 80073f4:	77fb      	strb	r3, [r7, #31]
 80073f6:	e001      	b.n	80073fc <HAL_QSPI_Receive+0x132>
    }
  }
  else
  {
    status = HAL_BUSY;
 80073f8:	2302      	movs	r3, #2
 80073fa:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	2200      	movs	r2, #0
 8007400:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 8007404:	7ffb      	ldrb	r3, [r7, #31]
}
 8007406:	4618      	mov	r0, r3
 8007408:	3720      	adds	r7, #32
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}

0800740e <HAL_QSPI_AutoPolling>:
  * @param  Timeout Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 800740e:	b580      	push	{r7, lr}
 8007410:	b088      	sub	sp, #32
 8007412:	af02      	add	r7, sp, #8
 8007414:	60f8      	str	r0, [r7, #12]
 8007416:	60b9      	str	r1, [r7, #8]
 8007418:	607a      	str	r2, [r7, #4]
 800741a:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800741c:	f7fc fb40 	bl	8003aa0 <HAL_GetTick>
 8007420:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007428:	b2db      	uxtb	r3, r3
 800742a:	2b01      	cmp	r3, #1
 800742c:	d101      	bne.n	8007432 <HAL_QSPI_AutoPolling+0x24>
 800742e:	2302      	movs	r3, #2
 8007430:	e060      	b.n	80074f4 <HAL_QSPI_AutoPolling+0xe6>
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	2201      	movs	r2, #1
 8007436:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007440:	b2db      	uxtb	r3, r3
 8007442:	2b01      	cmp	r3, #1
 8007444:	d14f      	bne.n	80074e6 <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	2200      	movs	r2, #0
 800744a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	2242      	movs	r2, #66	; 0x42
 8007450:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	9300      	str	r3, [sp, #0]
 8007458:	693b      	ldr	r3, [r7, #16]
 800745a:	2200      	movs	r2, #0
 800745c:	2120      	movs	r1, #32
 800745e:	68f8      	ldr	r0, [r7, #12]
 8007460:	f000 f935 	bl	80076ce <QSPI_WaitFlagStateUntilTimeout>
 8007464:	4603      	mov	r3, r0
 8007466:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8007468:	7dfb      	ldrb	r3, [r7, #23]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d13d      	bne.n	80074ea <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	687a      	ldr	r2, [r7, #4]
 8007474:	6812      	ldr	r2, [r2, #0]
 8007476:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	687a      	ldr	r2, [r7, #4]
 800747e:	6852      	ldr	r2, [r2, #4]
 8007480:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	687a      	ldr	r2, [r7, #4]
 8007488:	6892      	ldr	r2, [r2, #8]
 800748a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	691b      	ldr	r3, [r3, #16]
 800749a:	431a      	orrs	r2, r3
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80074a4:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	68da      	ldr	r2, [r3, #12]
 80074aa:	68bb      	ldr	r3, [r7, #8]
 80074ac:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 80074ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80074b2:	68b9      	ldr	r1, [r7, #8]
 80074b4:	68f8      	ldr	r0, [r7, #12]
 80074b6:	f000 f941 	bl	800773c <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	9300      	str	r3, [sp, #0]
 80074be:	693b      	ldr	r3, [r7, #16]
 80074c0:	2201      	movs	r2, #1
 80074c2:	2108      	movs	r1, #8
 80074c4:	68f8      	ldr	r0, [r7, #12]
 80074c6:	f000 f902 	bl	80076ce <QSPI_WaitFlagStateUntilTimeout>
 80074ca:	4603      	mov	r3, r0
 80074cc:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 80074ce:	7dfb      	ldrb	r3, [r7, #23]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d10a      	bne.n	80074ea <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	2208      	movs	r2, #8
 80074da:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	2201      	movs	r2, #1
 80074e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80074e4:	e001      	b.n	80074ea <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 80074e6:	2302      	movs	r3, #2
 80074e8:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	2200      	movs	r2, #0
 80074ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80074f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	3718      	adds	r7, #24
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}

080074fc <HAL_QSPI_MemoryMapped>:
  * @param  cfg structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_MemoryMapped(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_MemoryMappedTypeDef *cfg)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b088      	sub	sp, #32
 8007500:	af02      	add	r7, sp, #8
 8007502:	60f8      	str	r0, [r7, #12]
 8007504:	60b9      	str	r1, [r7, #8]
 8007506:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8007508:	f7fc faca 	bl	8003aa0 <HAL_GetTick>
 800750c:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  assert_param(IS_QSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007514:	b2db      	uxtb	r3, r3
 8007516:	2b01      	cmp	r3, #1
 8007518:	d101      	bne.n	800751e <HAL_QSPI_MemoryMapped+0x22>
 800751a:	2302      	movs	r3, #2
 800751c:	e04c      	b.n	80075b8 <HAL_QSPI_MemoryMapped+0xbc>
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	2201      	movs	r2, #1
 8007522:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800752c:	b2db      	uxtb	r3, r3
 800752e:	2b01      	cmp	r3, #1
 8007530:	d13b      	bne.n	80075aa <HAL_QSPI_MemoryMapped+0xae>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	2200      	movs	r2, #0
 8007536:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	2282      	movs	r2, #130	; 0x82
 800753c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007544:	9300      	str	r3, [sp, #0]
 8007546:	693b      	ldr	r3, [r7, #16]
 8007548:	2200      	movs	r2, #0
 800754a:	2120      	movs	r1, #32
 800754c:	68f8      	ldr	r0, [r7, #12]
 800754e:	f000 f8be 	bl	80076ce <QSPI_WaitFlagStateUntilTimeout>
 8007552:	4603      	mov	r3, r0
 8007554:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8007556:	7dfb      	ldrb	r3, [r7, #23]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d128      	bne.n	80075ae <HAL_QSPI_MemoryMapped+0xb2>
    {
      /* Configure QSPI: CR register with timeout counter enable */
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f023 0108 	bic.w	r1, r3, #8
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	685a      	ldr	r2, [r3, #4]
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	430a      	orrs	r2, r1
 8007570:	601a      	str	r2, [r3, #0]

    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	685b      	ldr	r3, [r3, #4]
 8007576:	2b08      	cmp	r3, #8
 8007578:	d110      	bne.n	800759c <HAL_QSPI_MemoryMapped+0xa0>
      {
        assert_param(IS_QSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure QSPI: LPTR register with the low-power timeout value */
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	687a      	ldr	r2, [r7, #4]
 8007580:	6812      	ldr	r2, [r2, #0]
 8007582:	631a      	str	r2, [r3, #48]	; 0x30

        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	2210      	movs	r2, #16
 800758a:	60da      	str	r2, [r3, #12]

        /* Enable the QSPI TimeOut Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	681a      	ldr	r2, [r3, #0]
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800759a:	601a      	str	r2, [r3, #0]
      }

      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 800759c:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80075a0:	68b9      	ldr	r1, [r7, #8]
 80075a2:	68f8      	ldr	r0, [r7, #12]
 80075a4:	f000 f8ca 	bl	800773c <QSPI_Config>
 80075a8:	e001      	b.n	80075ae <HAL_QSPI_MemoryMapped+0xb2>
    }
  }
  else
  {
    status = HAL_BUSY;
 80075aa:	2302      	movs	r3, #2
 80075ac:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	2200      	movs	r2, #0
 80075b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80075b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	3718      	adds	r7, #24
 80075bc:	46bd      	mov	sp, r7
 80075be:	bd80      	pop	{r7, pc}

080075c0 <HAL_QSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hqspi QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b086      	sub	sp, #24
 80075c4:	af02      	add	r7, sp, #8
 80075c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80075c8:	2300      	movs	r3, #0
 80075ca:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 80075cc:	f7fc fa68 	bl	8003aa0 <HAL_GetTick>
 80075d0:	60b8      	str	r0, [r7, #8]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80075d8:	b2db      	uxtb	r3, r3
 80075da:	f003 0302 	and.w	r3, r3, #2
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d062      	beq.n	80076a8 <HAL_QSPI_Abort+0xe8>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2200      	movs	r2, #0
 80075e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f003 0304 	and.w	r3, r3, #4
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d017      	beq.n	8007628 <HAL_QSPI_Abort+0x68>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	681a      	ldr	r2, [r3, #0]
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f022 0204 	bic.w	r2, r2, #4
 8007606:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      status = HAL_DMA_Abort(hqspi->hdma);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800760c:	4618      	mov	r0, r3
 800760e:	f7fc fc95 	bl	8003f3c <HAL_DMA_Abort>
 8007612:	4603      	mov	r3, r0
 8007614:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
 8007616:	7bfb      	ldrb	r3, [r7, #15]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d005      	beq.n	8007628 <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007620:	f043 0204 	orr.w	r2, r3, #4
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    if (__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_BUSY) != RESET)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	689b      	ldr	r3, [r3, #8]
 800762e:	f003 0320 	and.w	r3, r3, #32
 8007632:	2b00      	cmp	r3, #0
 8007634:	d034      	beq.n	80076a0 <HAL_QSPI_Abort+0xe0>
    {
      /* Configure QSPI: CR register with Abort request */
      SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	681a      	ldr	r2, [r3, #0]
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f042 0202 	orr.w	r2, r2, #2
 8007644:	601a      	str	r2, [r3, #0]
      
      /* Wait until TC flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800764a:	9300      	str	r3, [sp, #0]
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	2201      	movs	r2, #1
 8007650:	2102      	movs	r1, #2
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f000 f83b 	bl	80076ce <QSPI_WaitFlagStateUntilTimeout>
 8007658:	4603      	mov	r3, r0
 800765a:	73fb      	strb	r3, [r7, #15]
      
      if (status == HAL_OK)
 800765c:	7bfb      	ldrb	r3, [r7, #15]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d10e      	bne.n	8007680 <HAL_QSPI_Abort+0xc0>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	2202      	movs	r2, #2
 8007668:	60da      	str	r2, [r3, #12]
        
        /* Wait until BUSY flag is reset */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800766e:	9300      	str	r3, [sp, #0]
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	2200      	movs	r2, #0
 8007674:	2120      	movs	r1, #32
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	f000 f829 	bl	80076ce <QSPI_WaitFlagStateUntilTimeout>
 800767c:	4603      	mov	r3, r0
 800767e:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 8007680:	7bfb      	ldrb	r3, [r7, #15]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d110      	bne.n	80076a8 <HAL_QSPI_Abort+0xe8>
      {
        /* Reset functional mode configuration to indirect write mode by default */
        CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	695a      	ldr	r2, [r3, #20]
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8007694:	615a      	str	r2, [r3, #20]
        
        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2201      	movs	r2, #1
 800769a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800769e:	e003      	b.n	80076a8 <HAL_QSPI_Abort+0xe8>
      }
    }
    else
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2201      	movs	r2, #1
 80076a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
  }

  return status;
 80076a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80076aa:	4618      	mov	r0, r3
 80076ac:	3710      	adds	r7, #16
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bd80      	pop	{r7, pc}

080076b2 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80076b2:	b480      	push	{r7}
 80076b4:	b083      	sub	sp, #12
 80076b6:	af00      	add	r7, sp, #0
 80076b8:	6078      	str	r0, [r7, #4]
 80076ba:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	683a      	ldr	r2, [r7, #0]
 80076c0:	649a      	str	r2, [r3, #72]	; 0x48
}
 80076c2:	bf00      	nop
 80076c4:	370c      	adds	r7, #12
 80076c6:	46bd      	mov	sp, r7
 80076c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076cc:	4770      	bx	lr

080076ce <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80076ce:	b580      	push	{r7, lr}
 80076d0:	b084      	sub	sp, #16
 80076d2:	af00      	add	r7, sp, #0
 80076d4:	60f8      	str	r0, [r7, #12]
 80076d6:	60b9      	str	r1, [r7, #8]
 80076d8:	603b      	str	r3, [r7, #0]
 80076da:	4613      	mov	r3, r2
 80076dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80076de:	e01a      	b.n	8007716 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80076e0:	69bb      	ldr	r3, [r7, #24]
 80076e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076e6:	d016      	beq.n	8007716 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80076e8:	f7fc f9da 	bl	8003aa0 <HAL_GetTick>
 80076ec:	4602      	mov	r2, r0
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	1ad3      	subs	r3, r2, r3
 80076f2:	69ba      	ldr	r2, [r7, #24]
 80076f4:	429a      	cmp	r2, r3
 80076f6:	d302      	bcc.n	80076fe <QSPI_WaitFlagStateUntilTimeout+0x30>
 80076f8:	69bb      	ldr	r3, [r7, #24]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d10b      	bne.n	8007716 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	2204      	movs	r2, #4
 8007702:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800770a:	f043 0201 	orr.w	r2, r3, #1
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8007712:	2301      	movs	r3, #1
 8007714:	e00e      	b.n	8007734 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	689a      	ldr	r2, [r3, #8]
 800771c:	68bb      	ldr	r3, [r7, #8]
 800771e:	4013      	ands	r3, r2
 8007720:	2b00      	cmp	r3, #0
 8007722:	bf14      	ite	ne
 8007724:	2301      	movne	r3, #1
 8007726:	2300      	moveq	r3, #0
 8007728:	b2db      	uxtb	r3, r3
 800772a:	461a      	mov	r2, r3
 800772c:	79fb      	ldrb	r3, [r7, #7]
 800772e:	429a      	cmp	r2, r3
 8007730:	d1d6      	bne.n	80076e0 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007732:	2300      	movs	r3, #0
}
 8007734:	4618      	mov	r0, r3
 8007736:	3710      	adds	r7, #16
 8007738:	46bd      	mov	sp, r7
 800773a:	bd80      	pop	{r7, pc}

0800773c <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 800773c:	b480      	push	{r7}
 800773e:	b085      	sub	sp, #20
 8007740:	af00      	add	r7, sp, #0
 8007742:	60f8      	str	r0, [r7, #12]
 8007744:	60b9      	str	r1, [r7, #8]
 8007746:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800774c:	2b00      	cmp	r3, #0
 800774e:	d009      	beq.n	8007764 <QSPI_Config+0x28>
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007756:	d005      	beq.n	8007764 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	3a01      	subs	r2, #1
 8007762:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	699b      	ldr	r3, [r3, #24]
 8007768:	2b00      	cmp	r3, #0
 800776a:	f000 80b9 	beq.w	80078e0 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	6a1b      	ldr	r3, [r3, #32]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d05f      	beq.n	8007836 <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	68ba      	ldr	r2, [r7, #8]
 800777c:	6892      	ldr	r2, [r2, #8]
 800777e:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	69db      	ldr	r3, [r3, #28]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d031      	beq.n	80077ec <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007790:	431a      	orrs	r2, r3
 8007792:	68bb      	ldr	r3, [r7, #8]
 8007794:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007796:	431a      	orrs	r2, r3
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800779c:	431a      	orrs	r2, r3
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	695b      	ldr	r3, [r3, #20]
 80077a2:	049b      	lsls	r3, r3, #18
 80077a4:	431a      	orrs	r2, r3
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	691b      	ldr	r3, [r3, #16]
 80077aa:	431a      	orrs	r2, r3
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	6a1b      	ldr	r3, [r3, #32]
 80077b0:	431a      	orrs	r2, r3
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	68db      	ldr	r3, [r3, #12]
 80077b6:	431a      	orrs	r2, r3
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	69db      	ldr	r3, [r3, #28]
 80077bc:	431a      	orrs	r2, r3
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	699b      	ldr	r3, [r3, #24]
 80077c2:	431a      	orrs	r2, r3
 80077c4:	68bb      	ldr	r3, [r7, #8]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	ea42 0103 	orr.w	r1, r2, r3
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	687a      	ldr	r2, [r7, #4]
 80077d2:	430a      	orrs	r2, r1
 80077d4:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80077dc:	f000 812e 	beq.w	8007a3c <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	68ba      	ldr	r2, [r7, #8]
 80077e6:	6852      	ldr	r2, [r2, #4]
 80077e8:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 80077ea:	e127      	b.n	8007a3c <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80077ec:	68bb      	ldr	r3, [r7, #8]
 80077ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077f4:	431a      	orrs	r2, r3
 80077f6:	68bb      	ldr	r3, [r7, #8]
 80077f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077fa:	431a      	orrs	r2, r3
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007800:	431a      	orrs	r2, r3
 8007802:	68bb      	ldr	r3, [r7, #8]
 8007804:	695b      	ldr	r3, [r3, #20]
 8007806:	049b      	lsls	r3, r3, #18
 8007808:	431a      	orrs	r2, r3
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	691b      	ldr	r3, [r3, #16]
 800780e:	431a      	orrs	r2, r3
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	6a1b      	ldr	r3, [r3, #32]
 8007814:	431a      	orrs	r2, r3
 8007816:	68bb      	ldr	r3, [r7, #8]
 8007818:	69db      	ldr	r3, [r3, #28]
 800781a:	431a      	orrs	r2, r3
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	699b      	ldr	r3, [r3, #24]
 8007820:	431a      	orrs	r2, r3
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	ea42 0103 	orr.w	r1, r2, r3
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	687a      	ldr	r2, [r7, #4]
 8007830:	430a      	orrs	r2, r1
 8007832:	615a      	str	r2, [r3, #20]
}
 8007834:	e102      	b.n	8007a3c <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	69db      	ldr	r3, [r3, #28]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d02e      	beq.n	800789c <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800783e:	68bb      	ldr	r3, [r7, #8]
 8007840:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007846:	431a      	orrs	r2, r3
 8007848:	68bb      	ldr	r3, [r7, #8]
 800784a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800784c:	431a      	orrs	r2, r3
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007852:	431a      	orrs	r2, r3
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	695b      	ldr	r3, [r3, #20]
 8007858:	049b      	lsls	r3, r3, #18
 800785a:	431a      	orrs	r2, r3
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	6a1b      	ldr	r3, [r3, #32]
 8007860:	431a      	orrs	r2, r3
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	68db      	ldr	r3, [r3, #12]
 8007866:	431a      	orrs	r2, r3
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	69db      	ldr	r3, [r3, #28]
 800786c:	431a      	orrs	r2, r3
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	699b      	ldr	r3, [r3, #24]
 8007872:	431a      	orrs	r2, r3
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	ea42 0103 	orr.w	r1, r2, r3
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	687a      	ldr	r2, [r7, #4]
 8007882:	430a      	orrs	r2, r1
 8007884:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800788c:	f000 80d6 	beq.w	8007a3c <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	68ba      	ldr	r2, [r7, #8]
 8007896:	6852      	ldr	r2, [r2, #4]
 8007898:	619a      	str	r2, [r3, #24]
}
 800789a:	e0cf      	b.n	8007a3c <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078a4:	431a      	orrs	r2, r3
 80078a6:	68bb      	ldr	r3, [r7, #8]
 80078a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078aa:	431a      	orrs	r2, r3
 80078ac:	68bb      	ldr	r3, [r7, #8]
 80078ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078b0:	431a      	orrs	r2, r3
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	695b      	ldr	r3, [r3, #20]
 80078b6:	049b      	lsls	r3, r3, #18
 80078b8:	431a      	orrs	r2, r3
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	6a1b      	ldr	r3, [r3, #32]
 80078be:	431a      	orrs	r2, r3
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	69db      	ldr	r3, [r3, #28]
 80078c4:	431a      	orrs	r2, r3
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	699b      	ldr	r3, [r3, #24]
 80078ca:	431a      	orrs	r2, r3
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	ea42 0103 	orr.w	r1, r2, r3
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	687a      	ldr	r2, [r7, #4]
 80078da:	430a      	orrs	r2, r1
 80078dc:	615a      	str	r2, [r3, #20]
}
 80078de:	e0ad      	b.n	8007a3c <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	6a1b      	ldr	r3, [r3, #32]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d058      	beq.n	800799a <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	68ba      	ldr	r2, [r7, #8]
 80078ee:	6892      	ldr	r2, [r2, #8]
 80078f0:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	69db      	ldr	r3, [r3, #28]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d02d      	beq.n	8007956 <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80078fa:	68bb      	ldr	r3, [r7, #8]
 80078fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078fe:	68bb      	ldr	r3, [r7, #8]
 8007900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007902:	431a      	orrs	r2, r3
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007908:	431a      	orrs	r2, r3
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800790e:	431a      	orrs	r2, r3
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	695b      	ldr	r3, [r3, #20]
 8007914:	049b      	lsls	r3, r3, #18
 8007916:	431a      	orrs	r2, r3
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	691b      	ldr	r3, [r3, #16]
 800791c:	431a      	orrs	r2, r3
 800791e:	68bb      	ldr	r3, [r7, #8]
 8007920:	6a1b      	ldr	r3, [r3, #32]
 8007922:	431a      	orrs	r2, r3
 8007924:	68bb      	ldr	r3, [r7, #8]
 8007926:	68db      	ldr	r3, [r3, #12]
 8007928:	431a      	orrs	r2, r3
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	69db      	ldr	r3, [r3, #28]
 800792e:	431a      	orrs	r2, r3
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	699b      	ldr	r3, [r3, #24]
 8007934:	ea42 0103 	orr.w	r1, r2, r3
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	687a      	ldr	r2, [r7, #4]
 800793e:	430a      	orrs	r2, r1
 8007940:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007948:	d078      	beq.n	8007a3c <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	68ba      	ldr	r2, [r7, #8]
 8007950:	6852      	ldr	r2, [r2, #4]
 8007952:	619a      	str	r2, [r3, #24]
}
 8007954:	e072      	b.n	8007a3c <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8007956:	68bb      	ldr	r3, [r7, #8]
 8007958:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800795a:	68bb      	ldr	r3, [r7, #8]
 800795c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800795e:	431a      	orrs	r2, r3
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007964:	431a      	orrs	r2, r3
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800796a:	431a      	orrs	r2, r3
 800796c:	68bb      	ldr	r3, [r7, #8]
 800796e:	695b      	ldr	r3, [r3, #20]
 8007970:	049b      	lsls	r3, r3, #18
 8007972:	431a      	orrs	r2, r3
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	691b      	ldr	r3, [r3, #16]
 8007978:	431a      	orrs	r2, r3
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	6a1b      	ldr	r3, [r3, #32]
 800797e:	431a      	orrs	r2, r3
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	69db      	ldr	r3, [r3, #28]
 8007984:	431a      	orrs	r2, r3
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	699b      	ldr	r3, [r3, #24]
 800798a:	ea42 0103 	orr.w	r1, r2, r3
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	687a      	ldr	r2, [r7, #4]
 8007994:	430a      	orrs	r2, r1
 8007996:	615a      	str	r2, [r3, #20]
}
 8007998:	e050      	b.n	8007a3c <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800799a:	68bb      	ldr	r3, [r7, #8]
 800799c:	69db      	ldr	r3, [r3, #28]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d02a      	beq.n	80079f8 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80079a2:	68bb      	ldr	r3, [r7, #8]
 80079a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079a6:	68bb      	ldr	r3, [r7, #8]
 80079a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079aa:	431a      	orrs	r2, r3
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079b0:	431a      	orrs	r2, r3
 80079b2:	68bb      	ldr	r3, [r7, #8]
 80079b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079b6:	431a      	orrs	r2, r3
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	695b      	ldr	r3, [r3, #20]
 80079bc:	049b      	lsls	r3, r3, #18
 80079be:	431a      	orrs	r2, r3
 80079c0:	68bb      	ldr	r3, [r7, #8]
 80079c2:	6a1b      	ldr	r3, [r3, #32]
 80079c4:	431a      	orrs	r2, r3
 80079c6:	68bb      	ldr	r3, [r7, #8]
 80079c8:	68db      	ldr	r3, [r3, #12]
 80079ca:	431a      	orrs	r2, r3
 80079cc:	68bb      	ldr	r3, [r7, #8]
 80079ce:	69db      	ldr	r3, [r3, #28]
 80079d0:	431a      	orrs	r2, r3
 80079d2:	68bb      	ldr	r3, [r7, #8]
 80079d4:	699b      	ldr	r3, [r3, #24]
 80079d6:	ea42 0103 	orr.w	r1, r2, r3
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	687a      	ldr	r2, [r7, #4]
 80079e0:	430a      	orrs	r2, r1
 80079e2:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80079ea:	d027      	beq.n	8007a3c <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	68ba      	ldr	r2, [r7, #8]
 80079f2:	6852      	ldr	r2, [r2, #4]
 80079f4:	619a      	str	r2, [r3, #24]
}
 80079f6:	e021      	b.n	8007a3c <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d01d      	beq.n	8007a3c <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8007a00:	68bb      	ldr	r3, [r7, #8]
 8007a02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a08:	431a      	orrs	r2, r3
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a0e:	431a      	orrs	r2, r3
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a14:	431a      	orrs	r2, r3
 8007a16:	68bb      	ldr	r3, [r7, #8]
 8007a18:	695b      	ldr	r3, [r3, #20]
 8007a1a:	049b      	lsls	r3, r3, #18
 8007a1c:	431a      	orrs	r2, r3
 8007a1e:	68bb      	ldr	r3, [r7, #8]
 8007a20:	6a1b      	ldr	r3, [r3, #32]
 8007a22:	431a      	orrs	r2, r3
 8007a24:	68bb      	ldr	r3, [r7, #8]
 8007a26:	69db      	ldr	r3, [r3, #28]
 8007a28:	431a      	orrs	r2, r3
 8007a2a:	68bb      	ldr	r3, [r7, #8]
 8007a2c:	699b      	ldr	r3, [r3, #24]
 8007a2e:	ea42 0103 	orr.w	r1, r2, r3
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	687a      	ldr	r2, [r7, #4]
 8007a38:	430a      	orrs	r2, r1
 8007a3a:	615a      	str	r2, [r3, #20]
}
 8007a3c:	bf00      	nop
 8007a3e:	3714      	adds	r7, #20
 8007a40:	46bd      	mov	sp, r7
 8007a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a46:	4770      	bx	lr

08007a48 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b086      	sub	sp, #24
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8007a50:	2300      	movs	r3, #0
 8007a52:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d101      	bne.n	8007a5e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	e291      	b.n	8007f82 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f003 0301 	and.w	r3, r3, #1
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	f000 8087 	beq.w	8007b7a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007a6c:	4b96      	ldr	r3, [pc, #600]	; (8007cc8 <HAL_RCC_OscConfig+0x280>)
 8007a6e:	689b      	ldr	r3, [r3, #8]
 8007a70:	f003 030c 	and.w	r3, r3, #12
 8007a74:	2b04      	cmp	r3, #4
 8007a76:	d00c      	beq.n	8007a92 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007a78:	4b93      	ldr	r3, [pc, #588]	; (8007cc8 <HAL_RCC_OscConfig+0x280>)
 8007a7a:	689b      	ldr	r3, [r3, #8]
 8007a7c:	f003 030c 	and.w	r3, r3, #12
 8007a80:	2b08      	cmp	r3, #8
 8007a82:	d112      	bne.n	8007aaa <HAL_RCC_OscConfig+0x62>
 8007a84:	4b90      	ldr	r3, [pc, #576]	; (8007cc8 <HAL_RCC_OscConfig+0x280>)
 8007a86:	685b      	ldr	r3, [r3, #4]
 8007a88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007a90:	d10b      	bne.n	8007aaa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a92:	4b8d      	ldr	r3, [pc, #564]	; (8007cc8 <HAL_RCC_OscConfig+0x280>)
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d06c      	beq.n	8007b78 <HAL_RCC_OscConfig+0x130>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	685b      	ldr	r3, [r3, #4]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d168      	bne.n	8007b78 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007aa6:	2301      	movs	r3, #1
 8007aa8:	e26b      	b.n	8007f82 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	685b      	ldr	r3, [r3, #4]
 8007aae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ab2:	d106      	bne.n	8007ac2 <HAL_RCC_OscConfig+0x7a>
 8007ab4:	4b84      	ldr	r3, [pc, #528]	; (8007cc8 <HAL_RCC_OscConfig+0x280>)
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	4a83      	ldr	r2, [pc, #524]	; (8007cc8 <HAL_RCC_OscConfig+0x280>)
 8007aba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007abe:	6013      	str	r3, [r2, #0]
 8007ac0:	e02e      	b.n	8007b20 <HAL_RCC_OscConfig+0xd8>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	685b      	ldr	r3, [r3, #4]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d10c      	bne.n	8007ae4 <HAL_RCC_OscConfig+0x9c>
 8007aca:	4b7f      	ldr	r3, [pc, #508]	; (8007cc8 <HAL_RCC_OscConfig+0x280>)
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	4a7e      	ldr	r2, [pc, #504]	; (8007cc8 <HAL_RCC_OscConfig+0x280>)
 8007ad0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007ad4:	6013      	str	r3, [r2, #0]
 8007ad6:	4b7c      	ldr	r3, [pc, #496]	; (8007cc8 <HAL_RCC_OscConfig+0x280>)
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	4a7b      	ldr	r2, [pc, #492]	; (8007cc8 <HAL_RCC_OscConfig+0x280>)
 8007adc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007ae0:	6013      	str	r3, [r2, #0]
 8007ae2:	e01d      	b.n	8007b20 <HAL_RCC_OscConfig+0xd8>
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	685b      	ldr	r3, [r3, #4]
 8007ae8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007aec:	d10c      	bne.n	8007b08 <HAL_RCC_OscConfig+0xc0>
 8007aee:	4b76      	ldr	r3, [pc, #472]	; (8007cc8 <HAL_RCC_OscConfig+0x280>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	4a75      	ldr	r2, [pc, #468]	; (8007cc8 <HAL_RCC_OscConfig+0x280>)
 8007af4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007af8:	6013      	str	r3, [r2, #0]
 8007afa:	4b73      	ldr	r3, [pc, #460]	; (8007cc8 <HAL_RCC_OscConfig+0x280>)
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	4a72      	ldr	r2, [pc, #456]	; (8007cc8 <HAL_RCC_OscConfig+0x280>)
 8007b00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b04:	6013      	str	r3, [r2, #0]
 8007b06:	e00b      	b.n	8007b20 <HAL_RCC_OscConfig+0xd8>
 8007b08:	4b6f      	ldr	r3, [pc, #444]	; (8007cc8 <HAL_RCC_OscConfig+0x280>)
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	4a6e      	ldr	r2, [pc, #440]	; (8007cc8 <HAL_RCC_OscConfig+0x280>)
 8007b0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b12:	6013      	str	r3, [r2, #0]
 8007b14:	4b6c      	ldr	r3, [pc, #432]	; (8007cc8 <HAL_RCC_OscConfig+0x280>)
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	4a6b      	ldr	r2, [pc, #428]	; (8007cc8 <HAL_RCC_OscConfig+0x280>)
 8007b1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007b1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	685b      	ldr	r3, [r3, #4]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d013      	beq.n	8007b50 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b28:	f7fb ffba 	bl	8003aa0 <HAL_GetTick>
 8007b2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007b2e:	e008      	b.n	8007b42 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007b30:	f7fb ffb6 	bl	8003aa0 <HAL_GetTick>
 8007b34:	4602      	mov	r2, r0
 8007b36:	693b      	ldr	r3, [r7, #16]
 8007b38:	1ad3      	subs	r3, r2, r3
 8007b3a:	2b64      	cmp	r3, #100	; 0x64
 8007b3c:	d901      	bls.n	8007b42 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007b3e:	2303      	movs	r3, #3
 8007b40:	e21f      	b.n	8007f82 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007b42:	4b61      	ldr	r3, [pc, #388]	; (8007cc8 <HAL_RCC_OscConfig+0x280>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d0f0      	beq.n	8007b30 <HAL_RCC_OscConfig+0xe8>
 8007b4e:	e014      	b.n	8007b7a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b50:	f7fb ffa6 	bl	8003aa0 <HAL_GetTick>
 8007b54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007b56:	e008      	b.n	8007b6a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007b58:	f7fb ffa2 	bl	8003aa0 <HAL_GetTick>
 8007b5c:	4602      	mov	r2, r0
 8007b5e:	693b      	ldr	r3, [r7, #16]
 8007b60:	1ad3      	subs	r3, r2, r3
 8007b62:	2b64      	cmp	r3, #100	; 0x64
 8007b64:	d901      	bls.n	8007b6a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007b66:	2303      	movs	r3, #3
 8007b68:	e20b      	b.n	8007f82 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007b6a:	4b57      	ldr	r3, [pc, #348]	; (8007cc8 <HAL_RCC_OscConfig+0x280>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d1f0      	bne.n	8007b58 <HAL_RCC_OscConfig+0x110>
 8007b76:	e000      	b.n	8007b7a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007b78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f003 0302 	and.w	r3, r3, #2
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d069      	beq.n	8007c5a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007b86:	4b50      	ldr	r3, [pc, #320]	; (8007cc8 <HAL_RCC_OscConfig+0x280>)
 8007b88:	689b      	ldr	r3, [r3, #8]
 8007b8a:	f003 030c 	and.w	r3, r3, #12
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d00b      	beq.n	8007baa <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007b92:	4b4d      	ldr	r3, [pc, #308]	; (8007cc8 <HAL_RCC_OscConfig+0x280>)
 8007b94:	689b      	ldr	r3, [r3, #8]
 8007b96:	f003 030c 	and.w	r3, r3, #12
 8007b9a:	2b08      	cmp	r3, #8
 8007b9c:	d11c      	bne.n	8007bd8 <HAL_RCC_OscConfig+0x190>
 8007b9e:	4b4a      	ldr	r3, [pc, #296]	; (8007cc8 <HAL_RCC_OscConfig+0x280>)
 8007ba0:	685b      	ldr	r3, [r3, #4]
 8007ba2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d116      	bne.n	8007bd8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007baa:	4b47      	ldr	r3, [pc, #284]	; (8007cc8 <HAL_RCC_OscConfig+0x280>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f003 0302 	and.w	r3, r3, #2
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d005      	beq.n	8007bc2 <HAL_RCC_OscConfig+0x17a>
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	68db      	ldr	r3, [r3, #12]
 8007bba:	2b01      	cmp	r3, #1
 8007bbc:	d001      	beq.n	8007bc2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	e1df      	b.n	8007f82 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007bc2:	4b41      	ldr	r3, [pc, #260]	; (8007cc8 <HAL_RCC_OscConfig+0x280>)
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	691b      	ldr	r3, [r3, #16]
 8007bce:	00db      	lsls	r3, r3, #3
 8007bd0:	493d      	ldr	r1, [pc, #244]	; (8007cc8 <HAL_RCC_OscConfig+0x280>)
 8007bd2:	4313      	orrs	r3, r2
 8007bd4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007bd6:	e040      	b.n	8007c5a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	68db      	ldr	r3, [r3, #12]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d023      	beq.n	8007c28 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007be0:	4b39      	ldr	r3, [pc, #228]	; (8007cc8 <HAL_RCC_OscConfig+0x280>)
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	4a38      	ldr	r2, [pc, #224]	; (8007cc8 <HAL_RCC_OscConfig+0x280>)
 8007be6:	f043 0301 	orr.w	r3, r3, #1
 8007bea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bec:	f7fb ff58 	bl	8003aa0 <HAL_GetTick>
 8007bf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007bf2:	e008      	b.n	8007c06 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007bf4:	f7fb ff54 	bl	8003aa0 <HAL_GetTick>
 8007bf8:	4602      	mov	r2, r0
 8007bfa:	693b      	ldr	r3, [r7, #16]
 8007bfc:	1ad3      	subs	r3, r2, r3
 8007bfe:	2b02      	cmp	r3, #2
 8007c00:	d901      	bls.n	8007c06 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8007c02:	2303      	movs	r3, #3
 8007c04:	e1bd      	b.n	8007f82 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007c06:	4b30      	ldr	r3, [pc, #192]	; (8007cc8 <HAL_RCC_OscConfig+0x280>)
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f003 0302 	and.w	r3, r3, #2
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d0f0      	beq.n	8007bf4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c12:	4b2d      	ldr	r3, [pc, #180]	; (8007cc8 <HAL_RCC_OscConfig+0x280>)
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	691b      	ldr	r3, [r3, #16]
 8007c1e:	00db      	lsls	r3, r3, #3
 8007c20:	4929      	ldr	r1, [pc, #164]	; (8007cc8 <HAL_RCC_OscConfig+0x280>)
 8007c22:	4313      	orrs	r3, r2
 8007c24:	600b      	str	r3, [r1, #0]
 8007c26:	e018      	b.n	8007c5a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007c28:	4b27      	ldr	r3, [pc, #156]	; (8007cc8 <HAL_RCC_OscConfig+0x280>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	4a26      	ldr	r2, [pc, #152]	; (8007cc8 <HAL_RCC_OscConfig+0x280>)
 8007c2e:	f023 0301 	bic.w	r3, r3, #1
 8007c32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c34:	f7fb ff34 	bl	8003aa0 <HAL_GetTick>
 8007c38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007c3a:	e008      	b.n	8007c4e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007c3c:	f7fb ff30 	bl	8003aa0 <HAL_GetTick>
 8007c40:	4602      	mov	r2, r0
 8007c42:	693b      	ldr	r3, [r7, #16]
 8007c44:	1ad3      	subs	r3, r2, r3
 8007c46:	2b02      	cmp	r3, #2
 8007c48:	d901      	bls.n	8007c4e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007c4a:	2303      	movs	r3, #3
 8007c4c:	e199      	b.n	8007f82 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007c4e:	4b1e      	ldr	r3, [pc, #120]	; (8007cc8 <HAL_RCC_OscConfig+0x280>)
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f003 0302 	and.w	r3, r3, #2
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d1f0      	bne.n	8007c3c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f003 0308 	and.w	r3, r3, #8
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d038      	beq.n	8007cd8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	695b      	ldr	r3, [r3, #20]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d019      	beq.n	8007ca2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007c6e:	4b16      	ldr	r3, [pc, #88]	; (8007cc8 <HAL_RCC_OscConfig+0x280>)
 8007c70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c72:	4a15      	ldr	r2, [pc, #84]	; (8007cc8 <HAL_RCC_OscConfig+0x280>)
 8007c74:	f043 0301 	orr.w	r3, r3, #1
 8007c78:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c7a:	f7fb ff11 	bl	8003aa0 <HAL_GetTick>
 8007c7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007c80:	e008      	b.n	8007c94 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007c82:	f7fb ff0d 	bl	8003aa0 <HAL_GetTick>
 8007c86:	4602      	mov	r2, r0
 8007c88:	693b      	ldr	r3, [r7, #16]
 8007c8a:	1ad3      	subs	r3, r2, r3
 8007c8c:	2b02      	cmp	r3, #2
 8007c8e:	d901      	bls.n	8007c94 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007c90:	2303      	movs	r3, #3
 8007c92:	e176      	b.n	8007f82 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007c94:	4b0c      	ldr	r3, [pc, #48]	; (8007cc8 <HAL_RCC_OscConfig+0x280>)
 8007c96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c98:	f003 0302 	and.w	r3, r3, #2
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d0f0      	beq.n	8007c82 <HAL_RCC_OscConfig+0x23a>
 8007ca0:	e01a      	b.n	8007cd8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007ca2:	4b09      	ldr	r3, [pc, #36]	; (8007cc8 <HAL_RCC_OscConfig+0x280>)
 8007ca4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ca6:	4a08      	ldr	r2, [pc, #32]	; (8007cc8 <HAL_RCC_OscConfig+0x280>)
 8007ca8:	f023 0301 	bic.w	r3, r3, #1
 8007cac:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007cae:	f7fb fef7 	bl	8003aa0 <HAL_GetTick>
 8007cb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007cb4:	e00a      	b.n	8007ccc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007cb6:	f7fb fef3 	bl	8003aa0 <HAL_GetTick>
 8007cba:	4602      	mov	r2, r0
 8007cbc:	693b      	ldr	r3, [r7, #16]
 8007cbe:	1ad3      	subs	r3, r2, r3
 8007cc0:	2b02      	cmp	r3, #2
 8007cc2:	d903      	bls.n	8007ccc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007cc4:	2303      	movs	r3, #3
 8007cc6:	e15c      	b.n	8007f82 <HAL_RCC_OscConfig+0x53a>
 8007cc8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007ccc:	4b91      	ldr	r3, [pc, #580]	; (8007f14 <HAL_RCC_OscConfig+0x4cc>)
 8007cce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007cd0:	f003 0302 	and.w	r3, r3, #2
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d1ee      	bne.n	8007cb6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f003 0304 	and.w	r3, r3, #4
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	f000 80a4 	beq.w	8007e2e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007ce6:	4b8b      	ldr	r3, [pc, #556]	; (8007f14 <HAL_RCC_OscConfig+0x4cc>)
 8007ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d10d      	bne.n	8007d0e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8007cf2:	4b88      	ldr	r3, [pc, #544]	; (8007f14 <HAL_RCC_OscConfig+0x4cc>)
 8007cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cf6:	4a87      	ldr	r2, [pc, #540]	; (8007f14 <HAL_RCC_OscConfig+0x4cc>)
 8007cf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007cfc:	6413      	str	r3, [r2, #64]	; 0x40
 8007cfe:	4b85      	ldr	r3, [pc, #532]	; (8007f14 <HAL_RCC_OscConfig+0x4cc>)
 8007d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d06:	60bb      	str	r3, [r7, #8]
 8007d08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007d0e:	4b82      	ldr	r3, [pc, #520]	; (8007f18 <HAL_RCC_OscConfig+0x4d0>)
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d118      	bne.n	8007d4c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8007d1a:	4b7f      	ldr	r3, [pc, #508]	; (8007f18 <HAL_RCC_OscConfig+0x4d0>)
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	4a7e      	ldr	r2, [pc, #504]	; (8007f18 <HAL_RCC_OscConfig+0x4d0>)
 8007d20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007d26:	f7fb febb 	bl	8003aa0 <HAL_GetTick>
 8007d2a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007d2c:	e008      	b.n	8007d40 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007d2e:	f7fb feb7 	bl	8003aa0 <HAL_GetTick>
 8007d32:	4602      	mov	r2, r0
 8007d34:	693b      	ldr	r3, [r7, #16]
 8007d36:	1ad3      	subs	r3, r2, r3
 8007d38:	2b64      	cmp	r3, #100	; 0x64
 8007d3a:	d901      	bls.n	8007d40 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007d3c:	2303      	movs	r3, #3
 8007d3e:	e120      	b.n	8007f82 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007d40:	4b75      	ldr	r3, [pc, #468]	; (8007f18 <HAL_RCC_OscConfig+0x4d0>)
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d0f0      	beq.n	8007d2e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	689b      	ldr	r3, [r3, #8]
 8007d50:	2b01      	cmp	r3, #1
 8007d52:	d106      	bne.n	8007d62 <HAL_RCC_OscConfig+0x31a>
 8007d54:	4b6f      	ldr	r3, [pc, #444]	; (8007f14 <HAL_RCC_OscConfig+0x4cc>)
 8007d56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d58:	4a6e      	ldr	r2, [pc, #440]	; (8007f14 <HAL_RCC_OscConfig+0x4cc>)
 8007d5a:	f043 0301 	orr.w	r3, r3, #1
 8007d5e:	6713      	str	r3, [r2, #112]	; 0x70
 8007d60:	e02d      	b.n	8007dbe <HAL_RCC_OscConfig+0x376>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	689b      	ldr	r3, [r3, #8]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d10c      	bne.n	8007d84 <HAL_RCC_OscConfig+0x33c>
 8007d6a:	4b6a      	ldr	r3, [pc, #424]	; (8007f14 <HAL_RCC_OscConfig+0x4cc>)
 8007d6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d6e:	4a69      	ldr	r2, [pc, #420]	; (8007f14 <HAL_RCC_OscConfig+0x4cc>)
 8007d70:	f023 0301 	bic.w	r3, r3, #1
 8007d74:	6713      	str	r3, [r2, #112]	; 0x70
 8007d76:	4b67      	ldr	r3, [pc, #412]	; (8007f14 <HAL_RCC_OscConfig+0x4cc>)
 8007d78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d7a:	4a66      	ldr	r2, [pc, #408]	; (8007f14 <HAL_RCC_OscConfig+0x4cc>)
 8007d7c:	f023 0304 	bic.w	r3, r3, #4
 8007d80:	6713      	str	r3, [r2, #112]	; 0x70
 8007d82:	e01c      	b.n	8007dbe <HAL_RCC_OscConfig+0x376>
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	689b      	ldr	r3, [r3, #8]
 8007d88:	2b05      	cmp	r3, #5
 8007d8a:	d10c      	bne.n	8007da6 <HAL_RCC_OscConfig+0x35e>
 8007d8c:	4b61      	ldr	r3, [pc, #388]	; (8007f14 <HAL_RCC_OscConfig+0x4cc>)
 8007d8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d90:	4a60      	ldr	r2, [pc, #384]	; (8007f14 <HAL_RCC_OscConfig+0x4cc>)
 8007d92:	f043 0304 	orr.w	r3, r3, #4
 8007d96:	6713      	str	r3, [r2, #112]	; 0x70
 8007d98:	4b5e      	ldr	r3, [pc, #376]	; (8007f14 <HAL_RCC_OscConfig+0x4cc>)
 8007d9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d9c:	4a5d      	ldr	r2, [pc, #372]	; (8007f14 <HAL_RCC_OscConfig+0x4cc>)
 8007d9e:	f043 0301 	orr.w	r3, r3, #1
 8007da2:	6713      	str	r3, [r2, #112]	; 0x70
 8007da4:	e00b      	b.n	8007dbe <HAL_RCC_OscConfig+0x376>
 8007da6:	4b5b      	ldr	r3, [pc, #364]	; (8007f14 <HAL_RCC_OscConfig+0x4cc>)
 8007da8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007daa:	4a5a      	ldr	r2, [pc, #360]	; (8007f14 <HAL_RCC_OscConfig+0x4cc>)
 8007dac:	f023 0301 	bic.w	r3, r3, #1
 8007db0:	6713      	str	r3, [r2, #112]	; 0x70
 8007db2:	4b58      	ldr	r3, [pc, #352]	; (8007f14 <HAL_RCC_OscConfig+0x4cc>)
 8007db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007db6:	4a57      	ldr	r2, [pc, #348]	; (8007f14 <HAL_RCC_OscConfig+0x4cc>)
 8007db8:	f023 0304 	bic.w	r3, r3, #4
 8007dbc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	689b      	ldr	r3, [r3, #8]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d015      	beq.n	8007df2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007dc6:	f7fb fe6b 	bl	8003aa0 <HAL_GetTick>
 8007dca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007dcc:	e00a      	b.n	8007de4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007dce:	f7fb fe67 	bl	8003aa0 <HAL_GetTick>
 8007dd2:	4602      	mov	r2, r0
 8007dd4:	693b      	ldr	r3, [r7, #16]
 8007dd6:	1ad3      	subs	r3, r2, r3
 8007dd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ddc:	4293      	cmp	r3, r2
 8007dde:	d901      	bls.n	8007de4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8007de0:	2303      	movs	r3, #3
 8007de2:	e0ce      	b.n	8007f82 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007de4:	4b4b      	ldr	r3, [pc, #300]	; (8007f14 <HAL_RCC_OscConfig+0x4cc>)
 8007de6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007de8:	f003 0302 	and.w	r3, r3, #2
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d0ee      	beq.n	8007dce <HAL_RCC_OscConfig+0x386>
 8007df0:	e014      	b.n	8007e1c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007df2:	f7fb fe55 	bl	8003aa0 <HAL_GetTick>
 8007df6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007df8:	e00a      	b.n	8007e10 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007dfa:	f7fb fe51 	bl	8003aa0 <HAL_GetTick>
 8007dfe:	4602      	mov	r2, r0
 8007e00:	693b      	ldr	r3, [r7, #16]
 8007e02:	1ad3      	subs	r3, r2, r3
 8007e04:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e08:	4293      	cmp	r3, r2
 8007e0a:	d901      	bls.n	8007e10 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8007e0c:	2303      	movs	r3, #3
 8007e0e:	e0b8      	b.n	8007f82 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007e10:	4b40      	ldr	r3, [pc, #256]	; (8007f14 <HAL_RCC_OscConfig+0x4cc>)
 8007e12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e14:	f003 0302 	and.w	r3, r3, #2
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d1ee      	bne.n	8007dfa <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007e1c:	7dfb      	ldrb	r3, [r7, #23]
 8007e1e:	2b01      	cmp	r3, #1
 8007e20:	d105      	bne.n	8007e2e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007e22:	4b3c      	ldr	r3, [pc, #240]	; (8007f14 <HAL_RCC_OscConfig+0x4cc>)
 8007e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e26:	4a3b      	ldr	r2, [pc, #236]	; (8007f14 <HAL_RCC_OscConfig+0x4cc>)
 8007e28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007e2c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	699b      	ldr	r3, [r3, #24]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	f000 80a4 	beq.w	8007f80 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007e38:	4b36      	ldr	r3, [pc, #216]	; (8007f14 <HAL_RCC_OscConfig+0x4cc>)
 8007e3a:	689b      	ldr	r3, [r3, #8]
 8007e3c:	f003 030c 	and.w	r3, r3, #12
 8007e40:	2b08      	cmp	r3, #8
 8007e42:	d06b      	beq.n	8007f1c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	699b      	ldr	r3, [r3, #24]
 8007e48:	2b02      	cmp	r3, #2
 8007e4a:	d149      	bne.n	8007ee0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007e4c:	4b31      	ldr	r3, [pc, #196]	; (8007f14 <HAL_RCC_OscConfig+0x4cc>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4a30      	ldr	r2, [pc, #192]	; (8007f14 <HAL_RCC_OscConfig+0x4cc>)
 8007e52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007e56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e58:	f7fb fe22 	bl	8003aa0 <HAL_GetTick>
 8007e5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007e5e:	e008      	b.n	8007e72 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007e60:	f7fb fe1e 	bl	8003aa0 <HAL_GetTick>
 8007e64:	4602      	mov	r2, r0
 8007e66:	693b      	ldr	r3, [r7, #16]
 8007e68:	1ad3      	subs	r3, r2, r3
 8007e6a:	2b02      	cmp	r3, #2
 8007e6c:	d901      	bls.n	8007e72 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8007e6e:	2303      	movs	r3, #3
 8007e70:	e087      	b.n	8007f82 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007e72:	4b28      	ldr	r3, [pc, #160]	; (8007f14 <HAL_RCC_OscConfig+0x4cc>)
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d1f0      	bne.n	8007e60 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	69da      	ldr	r2, [r3, #28]
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6a1b      	ldr	r3, [r3, #32]
 8007e86:	431a      	orrs	r2, r3
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e8c:	019b      	lsls	r3, r3, #6
 8007e8e:	431a      	orrs	r2, r3
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e94:	085b      	lsrs	r3, r3, #1
 8007e96:	3b01      	subs	r3, #1
 8007e98:	041b      	lsls	r3, r3, #16
 8007e9a:	431a      	orrs	r2, r3
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ea0:	061b      	lsls	r3, r3, #24
 8007ea2:	4313      	orrs	r3, r2
 8007ea4:	4a1b      	ldr	r2, [pc, #108]	; (8007f14 <HAL_RCC_OscConfig+0x4cc>)
 8007ea6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007eaa:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007eac:	4b19      	ldr	r3, [pc, #100]	; (8007f14 <HAL_RCC_OscConfig+0x4cc>)
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	4a18      	ldr	r2, [pc, #96]	; (8007f14 <HAL_RCC_OscConfig+0x4cc>)
 8007eb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007eb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007eb8:	f7fb fdf2 	bl	8003aa0 <HAL_GetTick>
 8007ebc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007ebe:	e008      	b.n	8007ed2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007ec0:	f7fb fdee 	bl	8003aa0 <HAL_GetTick>
 8007ec4:	4602      	mov	r2, r0
 8007ec6:	693b      	ldr	r3, [r7, #16]
 8007ec8:	1ad3      	subs	r3, r2, r3
 8007eca:	2b02      	cmp	r3, #2
 8007ecc:	d901      	bls.n	8007ed2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8007ece:	2303      	movs	r3, #3
 8007ed0:	e057      	b.n	8007f82 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007ed2:	4b10      	ldr	r3, [pc, #64]	; (8007f14 <HAL_RCC_OscConfig+0x4cc>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d0f0      	beq.n	8007ec0 <HAL_RCC_OscConfig+0x478>
 8007ede:	e04f      	b.n	8007f80 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007ee0:	4b0c      	ldr	r3, [pc, #48]	; (8007f14 <HAL_RCC_OscConfig+0x4cc>)
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	4a0b      	ldr	r2, [pc, #44]	; (8007f14 <HAL_RCC_OscConfig+0x4cc>)
 8007ee6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007eea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007eec:	f7fb fdd8 	bl	8003aa0 <HAL_GetTick>
 8007ef0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007ef2:	e008      	b.n	8007f06 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007ef4:	f7fb fdd4 	bl	8003aa0 <HAL_GetTick>
 8007ef8:	4602      	mov	r2, r0
 8007efa:	693b      	ldr	r3, [r7, #16]
 8007efc:	1ad3      	subs	r3, r2, r3
 8007efe:	2b02      	cmp	r3, #2
 8007f00:	d901      	bls.n	8007f06 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8007f02:	2303      	movs	r3, #3
 8007f04:	e03d      	b.n	8007f82 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007f06:	4b03      	ldr	r3, [pc, #12]	; (8007f14 <HAL_RCC_OscConfig+0x4cc>)
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d1f0      	bne.n	8007ef4 <HAL_RCC_OscConfig+0x4ac>
 8007f12:	e035      	b.n	8007f80 <HAL_RCC_OscConfig+0x538>
 8007f14:	40023800 	.word	0x40023800
 8007f18:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8007f1c:	4b1b      	ldr	r3, [pc, #108]	; (8007f8c <HAL_RCC_OscConfig+0x544>)
 8007f1e:	685b      	ldr	r3, [r3, #4]
 8007f20:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	699b      	ldr	r3, [r3, #24]
 8007f26:	2b01      	cmp	r3, #1
 8007f28:	d028      	beq.n	8007f7c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007f34:	429a      	cmp	r2, r3
 8007f36:	d121      	bne.n	8007f7c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f42:	429a      	cmp	r2, r3
 8007f44:	d11a      	bne.n	8007f7c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007f46:	68fa      	ldr	r2, [r7, #12]
 8007f48:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007f4c:	4013      	ands	r3, r2
 8007f4e:	687a      	ldr	r2, [r7, #4]
 8007f50:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007f52:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007f54:	4293      	cmp	r3, r2
 8007f56:	d111      	bne.n	8007f7c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f62:	085b      	lsrs	r3, r3, #1
 8007f64:	3b01      	subs	r3, #1
 8007f66:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007f68:	429a      	cmp	r2, r3
 8007f6a:	d107      	bne.n	8007f7c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f76:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007f78:	429a      	cmp	r2, r3
 8007f7a:	d001      	beq.n	8007f80 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8007f7c:	2301      	movs	r3, #1
 8007f7e:	e000      	b.n	8007f82 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8007f80:	2300      	movs	r3, #0
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	3718      	adds	r7, #24
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}
 8007f8a:	bf00      	nop
 8007f8c:	40023800 	.word	0x40023800

08007f90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b084      	sub	sp, #16
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
 8007f98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d101      	bne.n	8007fa8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007fa4:	2301      	movs	r3, #1
 8007fa6:	e0d0      	b.n	800814a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007fa8:	4b6a      	ldr	r3, [pc, #424]	; (8008154 <HAL_RCC_ClockConfig+0x1c4>)
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f003 030f 	and.w	r3, r3, #15
 8007fb0:	683a      	ldr	r2, [r7, #0]
 8007fb2:	429a      	cmp	r2, r3
 8007fb4:	d910      	bls.n	8007fd8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007fb6:	4b67      	ldr	r3, [pc, #412]	; (8008154 <HAL_RCC_ClockConfig+0x1c4>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f023 020f 	bic.w	r2, r3, #15
 8007fbe:	4965      	ldr	r1, [pc, #404]	; (8008154 <HAL_RCC_ClockConfig+0x1c4>)
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	4313      	orrs	r3, r2
 8007fc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007fc6:	4b63      	ldr	r3, [pc, #396]	; (8008154 <HAL_RCC_ClockConfig+0x1c4>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f003 030f 	and.w	r3, r3, #15
 8007fce:	683a      	ldr	r2, [r7, #0]
 8007fd0:	429a      	cmp	r2, r3
 8007fd2:	d001      	beq.n	8007fd8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	e0b8      	b.n	800814a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f003 0302 	and.w	r3, r3, #2
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d020      	beq.n	8008026 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f003 0304 	and.w	r3, r3, #4
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d005      	beq.n	8007ffc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007ff0:	4b59      	ldr	r3, [pc, #356]	; (8008158 <HAL_RCC_ClockConfig+0x1c8>)
 8007ff2:	689b      	ldr	r3, [r3, #8]
 8007ff4:	4a58      	ldr	r2, [pc, #352]	; (8008158 <HAL_RCC_ClockConfig+0x1c8>)
 8007ff6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007ffa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	f003 0308 	and.w	r3, r3, #8
 8008004:	2b00      	cmp	r3, #0
 8008006:	d005      	beq.n	8008014 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008008:	4b53      	ldr	r3, [pc, #332]	; (8008158 <HAL_RCC_ClockConfig+0x1c8>)
 800800a:	689b      	ldr	r3, [r3, #8]
 800800c:	4a52      	ldr	r2, [pc, #328]	; (8008158 <HAL_RCC_ClockConfig+0x1c8>)
 800800e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008012:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008014:	4b50      	ldr	r3, [pc, #320]	; (8008158 <HAL_RCC_ClockConfig+0x1c8>)
 8008016:	689b      	ldr	r3, [r3, #8]
 8008018:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	689b      	ldr	r3, [r3, #8]
 8008020:	494d      	ldr	r1, [pc, #308]	; (8008158 <HAL_RCC_ClockConfig+0x1c8>)
 8008022:	4313      	orrs	r3, r2
 8008024:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f003 0301 	and.w	r3, r3, #1
 800802e:	2b00      	cmp	r3, #0
 8008030:	d040      	beq.n	80080b4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	685b      	ldr	r3, [r3, #4]
 8008036:	2b01      	cmp	r3, #1
 8008038:	d107      	bne.n	800804a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800803a:	4b47      	ldr	r3, [pc, #284]	; (8008158 <HAL_RCC_ClockConfig+0x1c8>)
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008042:	2b00      	cmp	r3, #0
 8008044:	d115      	bne.n	8008072 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008046:	2301      	movs	r3, #1
 8008048:	e07f      	b.n	800814a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	685b      	ldr	r3, [r3, #4]
 800804e:	2b02      	cmp	r3, #2
 8008050:	d107      	bne.n	8008062 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008052:	4b41      	ldr	r3, [pc, #260]	; (8008158 <HAL_RCC_ClockConfig+0x1c8>)
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800805a:	2b00      	cmp	r3, #0
 800805c:	d109      	bne.n	8008072 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800805e:	2301      	movs	r3, #1
 8008060:	e073      	b.n	800814a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008062:	4b3d      	ldr	r3, [pc, #244]	; (8008158 <HAL_RCC_ClockConfig+0x1c8>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f003 0302 	and.w	r3, r3, #2
 800806a:	2b00      	cmp	r3, #0
 800806c:	d101      	bne.n	8008072 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800806e:	2301      	movs	r3, #1
 8008070:	e06b      	b.n	800814a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008072:	4b39      	ldr	r3, [pc, #228]	; (8008158 <HAL_RCC_ClockConfig+0x1c8>)
 8008074:	689b      	ldr	r3, [r3, #8]
 8008076:	f023 0203 	bic.w	r2, r3, #3
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	685b      	ldr	r3, [r3, #4]
 800807e:	4936      	ldr	r1, [pc, #216]	; (8008158 <HAL_RCC_ClockConfig+0x1c8>)
 8008080:	4313      	orrs	r3, r2
 8008082:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008084:	f7fb fd0c 	bl	8003aa0 <HAL_GetTick>
 8008088:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800808a:	e00a      	b.n	80080a2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800808c:	f7fb fd08 	bl	8003aa0 <HAL_GetTick>
 8008090:	4602      	mov	r2, r0
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	1ad3      	subs	r3, r2, r3
 8008096:	f241 3288 	movw	r2, #5000	; 0x1388
 800809a:	4293      	cmp	r3, r2
 800809c:	d901      	bls.n	80080a2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800809e:	2303      	movs	r3, #3
 80080a0:	e053      	b.n	800814a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80080a2:	4b2d      	ldr	r3, [pc, #180]	; (8008158 <HAL_RCC_ClockConfig+0x1c8>)
 80080a4:	689b      	ldr	r3, [r3, #8]
 80080a6:	f003 020c 	and.w	r2, r3, #12
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	685b      	ldr	r3, [r3, #4]
 80080ae:	009b      	lsls	r3, r3, #2
 80080b0:	429a      	cmp	r2, r3
 80080b2:	d1eb      	bne.n	800808c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80080b4:	4b27      	ldr	r3, [pc, #156]	; (8008154 <HAL_RCC_ClockConfig+0x1c4>)
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	f003 030f 	and.w	r3, r3, #15
 80080bc:	683a      	ldr	r2, [r7, #0]
 80080be:	429a      	cmp	r2, r3
 80080c0:	d210      	bcs.n	80080e4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80080c2:	4b24      	ldr	r3, [pc, #144]	; (8008154 <HAL_RCC_ClockConfig+0x1c4>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f023 020f 	bic.w	r2, r3, #15
 80080ca:	4922      	ldr	r1, [pc, #136]	; (8008154 <HAL_RCC_ClockConfig+0x1c4>)
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	4313      	orrs	r3, r2
 80080d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80080d2:	4b20      	ldr	r3, [pc, #128]	; (8008154 <HAL_RCC_ClockConfig+0x1c4>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f003 030f 	and.w	r3, r3, #15
 80080da:	683a      	ldr	r2, [r7, #0]
 80080dc:	429a      	cmp	r2, r3
 80080de:	d001      	beq.n	80080e4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80080e0:	2301      	movs	r3, #1
 80080e2:	e032      	b.n	800814a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f003 0304 	and.w	r3, r3, #4
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d008      	beq.n	8008102 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80080f0:	4b19      	ldr	r3, [pc, #100]	; (8008158 <HAL_RCC_ClockConfig+0x1c8>)
 80080f2:	689b      	ldr	r3, [r3, #8]
 80080f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	68db      	ldr	r3, [r3, #12]
 80080fc:	4916      	ldr	r1, [pc, #88]	; (8008158 <HAL_RCC_ClockConfig+0x1c8>)
 80080fe:	4313      	orrs	r3, r2
 8008100:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f003 0308 	and.w	r3, r3, #8
 800810a:	2b00      	cmp	r3, #0
 800810c:	d009      	beq.n	8008122 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800810e:	4b12      	ldr	r3, [pc, #72]	; (8008158 <HAL_RCC_ClockConfig+0x1c8>)
 8008110:	689b      	ldr	r3, [r3, #8]
 8008112:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	691b      	ldr	r3, [r3, #16]
 800811a:	00db      	lsls	r3, r3, #3
 800811c:	490e      	ldr	r1, [pc, #56]	; (8008158 <HAL_RCC_ClockConfig+0x1c8>)
 800811e:	4313      	orrs	r3, r2
 8008120:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008122:	f000 f821 	bl	8008168 <HAL_RCC_GetSysClockFreq>
 8008126:	4602      	mov	r2, r0
 8008128:	4b0b      	ldr	r3, [pc, #44]	; (8008158 <HAL_RCC_ClockConfig+0x1c8>)
 800812a:	689b      	ldr	r3, [r3, #8]
 800812c:	091b      	lsrs	r3, r3, #4
 800812e:	f003 030f 	and.w	r3, r3, #15
 8008132:	490a      	ldr	r1, [pc, #40]	; (800815c <HAL_RCC_ClockConfig+0x1cc>)
 8008134:	5ccb      	ldrb	r3, [r1, r3]
 8008136:	fa22 f303 	lsr.w	r3, r2, r3
 800813a:	4a09      	ldr	r2, [pc, #36]	; (8008160 <HAL_RCC_ClockConfig+0x1d0>)
 800813c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800813e:	4b09      	ldr	r3, [pc, #36]	; (8008164 <HAL_RCC_ClockConfig+0x1d4>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	4618      	mov	r0, r3
 8008144:	f7fb fc68 	bl	8003a18 <HAL_InitTick>

  return HAL_OK;
 8008148:	2300      	movs	r3, #0
}
 800814a:	4618      	mov	r0, r3
 800814c:	3710      	adds	r7, #16
 800814e:	46bd      	mov	sp, r7
 8008150:	bd80      	pop	{r7, pc}
 8008152:	bf00      	nop
 8008154:	40023c00 	.word	0x40023c00
 8008158:	40023800 	.word	0x40023800
 800815c:	08018b04 	.word	0x08018b04
 8008160:	20000004 	.word	0x20000004
 8008164:	20000044 	.word	0x20000044

08008168 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008168:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800816c:	b090      	sub	sp, #64	; 0x40
 800816e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8008170:	2300      	movs	r3, #0
 8008172:	637b      	str	r3, [r7, #52]	; 0x34
 8008174:	2300      	movs	r3, #0
 8008176:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008178:	2300      	movs	r3, #0
 800817a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 800817c:	2300      	movs	r3, #0
 800817e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008180:	4b59      	ldr	r3, [pc, #356]	; (80082e8 <HAL_RCC_GetSysClockFreq+0x180>)
 8008182:	689b      	ldr	r3, [r3, #8]
 8008184:	f003 030c 	and.w	r3, r3, #12
 8008188:	2b08      	cmp	r3, #8
 800818a:	d00d      	beq.n	80081a8 <HAL_RCC_GetSysClockFreq+0x40>
 800818c:	2b08      	cmp	r3, #8
 800818e:	f200 80a1 	bhi.w	80082d4 <HAL_RCC_GetSysClockFreq+0x16c>
 8008192:	2b00      	cmp	r3, #0
 8008194:	d002      	beq.n	800819c <HAL_RCC_GetSysClockFreq+0x34>
 8008196:	2b04      	cmp	r3, #4
 8008198:	d003      	beq.n	80081a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800819a:	e09b      	b.n	80082d4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800819c:	4b53      	ldr	r3, [pc, #332]	; (80082ec <HAL_RCC_GetSysClockFreq+0x184>)
 800819e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80081a0:	e09b      	b.n	80082da <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80081a2:	4b53      	ldr	r3, [pc, #332]	; (80082f0 <HAL_RCC_GetSysClockFreq+0x188>)
 80081a4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80081a6:	e098      	b.n	80082da <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80081a8:	4b4f      	ldr	r3, [pc, #316]	; (80082e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80081aa:	685b      	ldr	r3, [r3, #4]
 80081ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80081b0:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80081b2:	4b4d      	ldr	r3, [pc, #308]	; (80082e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80081b4:	685b      	ldr	r3, [r3, #4]
 80081b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d028      	beq.n	8008210 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80081be:	4b4a      	ldr	r3, [pc, #296]	; (80082e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80081c0:	685b      	ldr	r3, [r3, #4]
 80081c2:	099b      	lsrs	r3, r3, #6
 80081c4:	2200      	movs	r2, #0
 80081c6:	623b      	str	r3, [r7, #32]
 80081c8:	627a      	str	r2, [r7, #36]	; 0x24
 80081ca:	6a3b      	ldr	r3, [r7, #32]
 80081cc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80081d0:	2100      	movs	r1, #0
 80081d2:	4b47      	ldr	r3, [pc, #284]	; (80082f0 <HAL_RCC_GetSysClockFreq+0x188>)
 80081d4:	fb03 f201 	mul.w	r2, r3, r1
 80081d8:	2300      	movs	r3, #0
 80081da:	fb00 f303 	mul.w	r3, r0, r3
 80081de:	4413      	add	r3, r2
 80081e0:	4a43      	ldr	r2, [pc, #268]	; (80082f0 <HAL_RCC_GetSysClockFreq+0x188>)
 80081e2:	fba0 1202 	umull	r1, r2, r0, r2
 80081e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80081e8:	460a      	mov	r2, r1
 80081ea:	62ba      	str	r2, [r7, #40]	; 0x28
 80081ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80081ee:	4413      	add	r3, r2
 80081f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80081f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081f4:	2200      	movs	r2, #0
 80081f6:	61bb      	str	r3, [r7, #24]
 80081f8:	61fa      	str	r2, [r7, #28]
 80081fa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80081fe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8008202:	f7f8 f855 	bl	80002b0 <__aeabi_uldivmod>
 8008206:	4602      	mov	r2, r0
 8008208:	460b      	mov	r3, r1
 800820a:	4613      	mov	r3, r2
 800820c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800820e:	e053      	b.n	80082b8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008210:	4b35      	ldr	r3, [pc, #212]	; (80082e8 <HAL_RCC_GetSysClockFreq+0x180>)
 8008212:	685b      	ldr	r3, [r3, #4]
 8008214:	099b      	lsrs	r3, r3, #6
 8008216:	2200      	movs	r2, #0
 8008218:	613b      	str	r3, [r7, #16]
 800821a:	617a      	str	r2, [r7, #20]
 800821c:	693b      	ldr	r3, [r7, #16]
 800821e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8008222:	f04f 0b00 	mov.w	fp, #0
 8008226:	4652      	mov	r2, sl
 8008228:	465b      	mov	r3, fp
 800822a:	f04f 0000 	mov.w	r0, #0
 800822e:	f04f 0100 	mov.w	r1, #0
 8008232:	0159      	lsls	r1, r3, #5
 8008234:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008238:	0150      	lsls	r0, r2, #5
 800823a:	4602      	mov	r2, r0
 800823c:	460b      	mov	r3, r1
 800823e:	ebb2 080a 	subs.w	r8, r2, sl
 8008242:	eb63 090b 	sbc.w	r9, r3, fp
 8008246:	f04f 0200 	mov.w	r2, #0
 800824a:	f04f 0300 	mov.w	r3, #0
 800824e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8008252:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8008256:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800825a:	ebb2 0408 	subs.w	r4, r2, r8
 800825e:	eb63 0509 	sbc.w	r5, r3, r9
 8008262:	f04f 0200 	mov.w	r2, #0
 8008266:	f04f 0300 	mov.w	r3, #0
 800826a:	00eb      	lsls	r3, r5, #3
 800826c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008270:	00e2      	lsls	r2, r4, #3
 8008272:	4614      	mov	r4, r2
 8008274:	461d      	mov	r5, r3
 8008276:	eb14 030a 	adds.w	r3, r4, sl
 800827a:	603b      	str	r3, [r7, #0]
 800827c:	eb45 030b 	adc.w	r3, r5, fp
 8008280:	607b      	str	r3, [r7, #4]
 8008282:	f04f 0200 	mov.w	r2, #0
 8008286:	f04f 0300 	mov.w	r3, #0
 800828a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800828e:	4629      	mov	r1, r5
 8008290:	028b      	lsls	r3, r1, #10
 8008292:	4621      	mov	r1, r4
 8008294:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008298:	4621      	mov	r1, r4
 800829a:	028a      	lsls	r2, r1, #10
 800829c:	4610      	mov	r0, r2
 800829e:	4619      	mov	r1, r3
 80082a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082a2:	2200      	movs	r2, #0
 80082a4:	60bb      	str	r3, [r7, #8]
 80082a6:	60fa      	str	r2, [r7, #12]
 80082a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80082ac:	f7f8 f800 	bl	80002b0 <__aeabi_uldivmod>
 80082b0:	4602      	mov	r2, r0
 80082b2:	460b      	mov	r3, r1
 80082b4:	4613      	mov	r3, r2
 80082b6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80082b8:	4b0b      	ldr	r3, [pc, #44]	; (80082e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80082ba:	685b      	ldr	r3, [r3, #4]
 80082bc:	0c1b      	lsrs	r3, r3, #16
 80082be:	f003 0303 	and.w	r3, r3, #3
 80082c2:	3301      	adds	r3, #1
 80082c4:	005b      	lsls	r3, r3, #1
 80082c6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 80082c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80082ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80082d0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80082d2:	e002      	b.n	80082da <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80082d4:	4b05      	ldr	r3, [pc, #20]	; (80082ec <HAL_RCC_GetSysClockFreq+0x184>)
 80082d6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80082d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80082da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80082dc:	4618      	mov	r0, r3
 80082de:	3740      	adds	r7, #64	; 0x40
 80082e0:	46bd      	mov	sp, r7
 80082e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80082e6:	bf00      	nop
 80082e8:	40023800 	.word	0x40023800
 80082ec:	00f42400 	.word	0x00f42400
 80082f0:	017d7840 	.word	0x017d7840

080082f4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80082f4:	b480      	push	{r7}
 80082f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80082f8:	4b03      	ldr	r3, [pc, #12]	; (8008308 <HAL_RCC_GetHCLKFreq+0x14>)
 80082fa:	681b      	ldr	r3, [r3, #0]
}
 80082fc:	4618      	mov	r0, r3
 80082fe:	46bd      	mov	sp, r7
 8008300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008304:	4770      	bx	lr
 8008306:	bf00      	nop
 8008308:	20000004 	.word	0x20000004

0800830c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008310:	f7ff fff0 	bl	80082f4 <HAL_RCC_GetHCLKFreq>
 8008314:	4602      	mov	r2, r0
 8008316:	4b05      	ldr	r3, [pc, #20]	; (800832c <HAL_RCC_GetPCLK1Freq+0x20>)
 8008318:	689b      	ldr	r3, [r3, #8]
 800831a:	0a9b      	lsrs	r3, r3, #10
 800831c:	f003 0307 	and.w	r3, r3, #7
 8008320:	4903      	ldr	r1, [pc, #12]	; (8008330 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008322:	5ccb      	ldrb	r3, [r1, r3]
 8008324:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008328:	4618      	mov	r0, r3
 800832a:	bd80      	pop	{r7, pc}
 800832c:	40023800 	.word	0x40023800
 8008330:	08018b14 	.word	0x08018b14

08008334 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008338:	f7ff ffdc 	bl	80082f4 <HAL_RCC_GetHCLKFreq>
 800833c:	4602      	mov	r2, r0
 800833e:	4b05      	ldr	r3, [pc, #20]	; (8008354 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008340:	689b      	ldr	r3, [r3, #8]
 8008342:	0b5b      	lsrs	r3, r3, #13
 8008344:	f003 0307 	and.w	r3, r3, #7
 8008348:	4903      	ldr	r1, [pc, #12]	; (8008358 <HAL_RCC_GetPCLK2Freq+0x24>)
 800834a:	5ccb      	ldrb	r3, [r1, r3]
 800834c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008350:	4618      	mov	r0, r3
 8008352:	bd80      	pop	{r7, pc}
 8008354:	40023800 	.word	0x40023800
 8008358:	08018b14 	.word	0x08018b14

0800835c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b088      	sub	sp, #32
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008364:	2300      	movs	r3, #0
 8008366:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8008368:	2300      	movs	r3, #0
 800836a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800836c:	2300      	movs	r3, #0
 800836e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8008370:	2300      	movs	r3, #0
 8008372:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8008374:	2300      	movs	r3, #0
 8008376:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f003 0301 	and.w	r3, r3, #1
 8008380:	2b00      	cmp	r3, #0
 8008382:	d012      	beq.n	80083aa <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008384:	4b69      	ldr	r3, [pc, #420]	; (800852c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008386:	689b      	ldr	r3, [r3, #8]
 8008388:	4a68      	ldr	r2, [pc, #416]	; (800852c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800838a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800838e:	6093      	str	r3, [r2, #8]
 8008390:	4b66      	ldr	r3, [pc, #408]	; (800852c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008392:	689a      	ldr	r2, [r3, #8]
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008398:	4964      	ldr	r1, [pc, #400]	; (800852c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800839a:	4313      	orrs	r3, r2
 800839c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d101      	bne.n	80083aa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80083a6:	2301      	movs	r3, #1
 80083a8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d017      	beq.n	80083e6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80083b6:	4b5d      	ldr	r3, [pc, #372]	; (800852c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80083bc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083c4:	4959      	ldr	r1, [pc, #356]	; (800852c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083c6:	4313      	orrs	r3, r2
 80083c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80083d4:	d101      	bne.n	80083da <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80083d6:	2301      	movs	r3, #1
 80083d8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d101      	bne.n	80083e6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80083e2:	2301      	movs	r3, #1
 80083e4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d017      	beq.n	8008422 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80083f2:	4b4e      	ldr	r3, [pc, #312]	; (800852c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80083f8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008400:	494a      	ldr	r1, [pc, #296]	; (800852c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008402:	4313      	orrs	r3, r2
 8008404:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800840c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008410:	d101      	bne.n	8008416 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8008412:	2301      	movs	r3, #1
 8008414:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800841a:	2b00      	cmp	r3, #0
 800841c:	d101      	bne.n	8008422 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800841e:	2301      	movs	r3, #1
 8008420:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800842a:	2b00      	cmp	r3, #0
 800842c:	d001      	beq.n	8008432 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800842e:	2301      	movs	r3, #1
 8008430:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f003 0320 	and.w	r3, r3, #32
 800843a:	2b00      	cmp	r3, #0
 800843c:	f000 808b 	beq.w	8008556 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008440:	4b3a      	ldr	r3, [pc, #232]	; (800852c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008444:	4a39      	ldr	r2, [pc, #228]	; (800852c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008446:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800844a:	6413      	str	r3, [r2, #64]	; 0x40
 800844c:	4b37      	ldr	r3, [pc, #220]	; (800852c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800844e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008450:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008454:	60bb      	str	r3, [r7, #8]
 8008456:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008458:	4b35      	ldr	r3, [pc, #212]	; (8008530 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	4a34      	ldr	r2, [pc, #208]	; (8008530 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800845e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008462:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008464:	f7fb fb1c 	bl	8003aa0 <HAL_GetTick>
 8008468:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800846a:	e008      	b.n	800847e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800846c:	f7fb fb18 	bl	8003aa0 <HAL_GetTick>
 8008470:	4602      	mov	r2, r0
 8008472:	697b      	ldr	r3, [r7, #20]
 8008474:	1ad3      	subs	r3, r2, r3
 8008476:	2b64      	cmp	r3, #100	; 0x64
 8008478:	d901      	bls.n	800847e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800847a:	2303      	movs	r3, #3
 800847c:	e357      	b.n	8008b2e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800847e:	4b2c      	ldr	r3, [pc, #176]	; (8008530 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008486:	2b00      	cmp	r3, #0
 8008488:	d0f0      	beq.n	800846c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800848a:	4b28      	ldr	r3, [pc, #160]	; (800852c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800848c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800848e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008492:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008494:	693b      	ldr	r3, [r7, #16]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d035      	beq.n	8008506 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800849e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80084a2:	693a      	ldr	r2, [r7, #16]
 80084a4:	429a      	cmp	r2, r3
 80084a6:	d02e      	beq.n	8008506 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80084a8:	4b20      	ldr	r3, [pc, #128]	; (800852c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80084aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80084b0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80084b2:	4b1e      	ldr	r3, [pc, #120]	; (800852c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80084b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084b6:	4a1d      	ldr	r2, [pc, #116]	; (800852c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80084b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80084bc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80084be:	4b1b      	ldr	r3, [pc, #108]	; (800852c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80084c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084c2:	4a1a      	ldr	r2, [pc, #104]	; (800852c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80084c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80084c8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80084ca:	4a18      	ldr	r2, [pc, #96]	; (800852c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80084cc:	693b      	ldr	r3, [r7, #16]
 80084ce:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80084d0:	4b16      	ldr	r3, [pc, #88]	; (800852c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80084d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084d4:	f003 0301 	and.w	r3, r3, #1
 80084d8:	2b01      	cmp	r3, #1
 80084da:	d114      	bne.n	8008506 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084dc:	f7fb fae0 	bl	8003aa0 <HAL_GetTick>
 80084e0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80084e2:	e00a      	b.n	80084fa <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80084e4:	f7fb fadc 	bl	8003aa0 <HAL_GetTick>
 80084e8:	4602      	mov	r2, r0
 80084ea:	697b      	ldr	r3, [r7, #20]
 80084ec:	1ad3      	subs	r3, r2, r3
 80084ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80084f2:	4293      	cmp	r3, r2
 80084f4:	d901      	bls.n	80084fa <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80084f6:	2303      	movs	r3, #3
 80084f8:	e319      	b.n	8008b2e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80084fa:	4b0c      	ldr	r3, [pc, #48]	; (800852c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80084fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084fe:	f003 0302 	and.w	r3, r3, #2
 8008502:	2b00      	cmp	r3, #0
 8008504:	d0ee      	beq.n	80084e4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800850a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800850e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008512:	d111      	bne.n	8008538 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8008514:	4b05      	ldr	r3, [pc, #20]	; (800852c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008516:	689b      	ldr	r3, [r3, #8]
 8008518:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008520:	4b04      	ldr	r3, [pc, #16]	; (8008534 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008522:	400b      	ands	r3, r1
 8008524:	4901      	ldr	r1, [pc, #4]	; (800852c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008526:	4313      	orrs	r3, r2
 8008528:	608b      	str	r3, [r1, #8]
 800852a:	e00b      	b.n	8008544 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800852c:	40023800 	.word	0x40023800
 8008530:	40007000 	.word	0x40007000
 8008534:	0ffffcff 	.word	0x0ffffcff
 8008538:	4baa      	ldr	r3, [pc, #680]	; (80087e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800853a:	689b      	ldr	r3, [r3, #8]
 800853c:	4aa9      	ldr	r2, [pc, #676]	; (80087e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800853e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008542:	6093      	str	r3, [r2, #8]
 8008544:	4ba7      	ldr	r3, [pc, #668]	; (80087e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008546:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800854c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008550:	49a4      	ldr	r1, [pc, #656]	; (80087e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008552:	4313      	orrs	r3, r2
 8008554:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	f003 0310 	and.w	r3, r3, #16
 800855e:	2b00      	cmp	r3, #0
 8008560:	d010      	beq.n	8008584 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008562:	4ba0      	ldr	r3, [pc, #640]	; (80087e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008564:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008568:	4a9e      	ldr	r2, [pc, #632]	; (80087e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800856a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800856e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8008572:	4b9c      	ldr	r3, [pc, #624]	; (80087e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008574:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800857c:	4999      	ldr	r1, [pc, #612]	; (80087e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800857e:	4313      	orrs	r3, r2
 8008580:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800858c:	2b00      	cmp	r3, #0
 800858e:	d00a      	beq.n	80085a6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008590:	4b94      	ldr	r3, [pc, #592]	; (80087e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008592:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008596:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800859e:	4991      	ldr	r1, [pc, #580]	; (80087e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085a0:	4313      	orrs	r3, r2
 80085a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d00a      	beq.n	80085c8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80085b2:	4b8c      	ldr	r3, [pc, #560]	; (80087e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085b8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80085c0:	4988      	ldr	r1, [pc, #544]	; (80087e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085c2:	4313      	orrs	r3, r2
 80085c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d00a      	beq.n	80085ea <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80085d4:	4b83      	ldr	r3, [pc, #524]	; (80087e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085da:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80085e2:	4980      	ldr	r1, [pc, #512]	; (80087e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085e4:	4313      	orrs	r3, r2
 80085e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d00a      	beq.n	800860c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80085f6:	4b7b      	ldr	r3, [pc, #492]	; (80087e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085fc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008604:	4977      	ldr	r1, [pc, #476]	; (80087e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008606:	4313      	orrs	r3, r2
 8008608:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008614:	2b00      	cmp	r3, #0
 8008616:	d00a      	beq.n	800862e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008618:	4b72      	ldr	r3, [pc, #456]	; (80087e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800861a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800861e:	f023 0203 	bic.w	r2, r3, #3
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008626:	496f      	ldr	r1, [pc, #444]	; (80087e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008628:	4313      	orrs	r3, r2
 800862a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008636:	2b00      	cmp	r3, #0
 8008638:	d00a      	beq.n	8008650 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800863a:	4b6a      	ldr	r3, [pc, #424]	; (80087e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800863c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008640:	f023 020c 	bic.w	r2, r3, #12
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008648:	4966      	ldr	r1, [pc, #408]	; (80087e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800864a:	4313      	orrs	r3, r2
 800864c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008658:	2b00      	cmp	r3, #0
 800865a:	d00a      	beq.n	8008672 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800865c:	4b61      	ldr	r3, [pc, #388]	; (80087e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800865e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008662:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800866a:	495e      	ldr	r1, [pc, #376]	; (80087e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800866c:	4313      	orrs	r3, r2
 800866e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800867a:	2b00      	cmp	r3, #0
 800867c:	d00a      	beq.n	8008694 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800867e:	4b59      	ldr	r3, [pc, #356]	; (80087e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008680:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008684:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800868c:	4955      	ldr	r1, [pc, #340]	; (80087e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800868e:	4313      	orrs	r3, r2
 8008690:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800869c:	2b00      	cmp	r3, #0
 800869e:	d00a      	beq.n	80086b6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80086a0:	4b50      	ldr	r3, [pc, #320]	; (80087e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80086a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086a6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086ae:	494d      	ldr	r1, [pc, #308]	; (80087e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80086b0:	4313      	orrs	r3, r2
 80086b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d00a      	beq.n	80086d8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80086c2:	4b48      	ldr	r3, [pc, #288]	; (80087e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80086c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086c8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086d0:	4944      	ldr	r1, [pc, #272]	; (80087e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80086d2:	4313      	orrs	r3, r2
 80086d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d00a      	beq.n	80086fa <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80086e4:	4b3f      	ldr	r3, [pc, #252]	; (80087e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80086e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086ea:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086f2:	493c      	ldr	r1, [pc, #240]	; (80087e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80086f4:	4313      	orrs	r3, r2
 80086f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008702:	2b00      	cmp	r3, #0
 8008704:	d00a      	beq.n	800871c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8008706:	4b37      	ldr	r3, [pc, #220]	; (80087e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008708:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800870c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008714:	4933      	ldr	r1, [pc, #204]	; (80087e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008716:	4313      	orrs	r3, r2
 8008718:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008724:	2b00      	cmp	r3, #0
 8008726:	d00a      	beq.n	800873e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008728:	4b2e      	ldr	r3, [pc, #184]	; (80087e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800872a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800872e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008736:	492b      	ldr	r1, [pc, #172]	; (80087e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008738:	4313      	orrs	r3, r2
 800873a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008746:	2b00      	cmp	r3, #0
 8008748:	d011      	beq.n	800876e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800874a:	4b26      	ldr	r3, [pc, #152]	; (80087e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800874c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008750:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008758:	4922      	ldr	r1, [pc, #136]	; (80087e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800875a:	4313      	orrs	r3, r2
 800875c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008764:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008768:	d101      	bne.n	800876e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800876a:	2301      	movs	r3, #1
 800876c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	f003 0308 	and.w	r3, r3, #8
 8008776:	2b00      	cmp	r3, #0
 8008778:	d001      	beq.n	800877e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800877a:	2301      	movs	r3, #1
 800877c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008786:	2b00      	cmp	r3, #0
 8008788:	d00a      	beq.n	80087a0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800878a:	4b16      	ldr	r3, [pc, #88]	; (80087e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800878c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008790:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008798:	4912      	ldr	r1, [pc, #72]	; (80087e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800879a:	4313      	orrs	r3, r2
 800879c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d00b      	beq.n	80087c4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80087ac:	4b0d      	ldr	r3, [pc, #52]	; (80087e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80087ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087b2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80087bc:	4909      	ldr	r1, [pc, #36]	; (80087e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80087be:	4313      	orrs	r3, r2
 80087c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80087c4:	69fb      	ldr	r3, [r7, #28]
 80087c6:	2b01      	cmp	r3, #1
 80087c8:	d006      	beq.n	80087d8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	f000 80d9 	beq.w	800898a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80087d8:	4b02      	ldr	r3, [pc, #8]	; (80087e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	4a01      	ldr	r2, [pc, #4]	; (80087e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80087de:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80087e2:	e001      	b.n	80087e8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80087e4:	40023800 	.word	0x40023800
 80087e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80087ea:	f7fb f959 	bl	8003aa0 <HAL_GetTick>
 80087ee:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80087f0:	e008      	b.n	8008804 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80087f2:	f7fb f955 	bl	8003aa0 <HAL_GetTick>
 80087f6:	4602      	mov	r2, r0
 80087f8:	697b      	ldr	r3, [r7, #20]
 80087fa:	1ad3      	subs	r3, r2, r3
 80087fc:	2b64      	cmp	r3, #100	; 0x64
 80087fe:	d901      	bls.n	8008804 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008800:	2303      	movs	r3, #3
 8008802:	e194      	b.n	8008b2e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008804:	4b6c      	ldr	r3, [pc, #432]	; (80089b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800880c:	2b00      	cmp	r3, #0
 800880e:	d1f0      	bne.n	80087f2 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	f003 0301 	and.w	r3, r3, #1
 8008818:	2b00      	cmp	r3, #0
 800881a:	d021      	beq.n	8008860 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008820:	2b00      	cmp	r3, #0
 8008822:	d11d      	bne.n	8008860 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008824:	4b64      	ldr	r3, [pc, #400]	; (80089b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008826:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800882a:	0c1b      	lsrs	r3, r3, #16
 800882c:	f003 0303 	and.w	r3, r3, #3
 8008830:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008832:	4b61      	ldr	r3, [pc, #388]	; (80089b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008834:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008838:	0e1b      	lsrs	r3, r3, #24
 800883a:	f003 030f 	and.w	r3, r3, #15
 800883e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	685b      	ldr	r3, [r3, #4]
 8008844:	019a      	lsls	r2, r3, #6
 8008846:	693b      	ldr	r3, [r7, #16]
 8008848:	041b      	lsls	r3, r3, #16
 800884a:	431a      	orrs	r2, r3
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	061b      	lsls	r3, r3, #24
 8008850:	431a      	orrs	r2, r3
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	689b      	ldr	r3, [r3, #8]
 8008856:	071b      	lsls	r3, r3, #28
 8008858:	4957      	ldr	r1, [pc, #348]	; (80089b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800885a:	4313      	orrs	r3, r2
 800885c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008868:	2b00      	cmp	r3, #0
 800886a:	d004      	beq.n	8008876 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008870:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008874:	d00a      	beq.n	800888c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800887e:	2b00      	cmp	r3, #0
 8008880:	d02e      	beq.n	80088e0 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008886:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800888a:	d129      	bne.n	80088e0 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800888c:	4b4a      	ldr	r3, [pc, #296]	; (80089b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800888e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008892:	0c1b      	lsrs	r3, r3, #16
 8008894:	f003 0303 	and.w	r3, r3, #3
 8008898:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800889a:	4b47      	ldr	r3, [pc, #284]	; (80089b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800889c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80088a0:	0f1b      	lsrs	r3, r3, #28
 80088a2:	f003 0307 	and.w	r3, r3, #7
 80088a6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	685b      	ldr	r3, [r3, #4]
 80088ac:	019a      	lsls	r2, r3, #6
 80088ae:	693b      	ldr	r3, [r7, #16]
 80088b0:	041b      	lsls	r3, r3, #16
 80088b2:	431a      	orrs	r2, r3
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	68db      	ldr	r3, [r3, #12]
 80088b8:	061b      	lsls	r3, r3, #24
 80088ba:	431a      	orrs	r2, r3
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	071b      	lsls	r3, r3, #28
 80088c0:	493d      	ldr	r1, [pc, #244]	; (80089b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80088c2:	4313      	orrs	r3, r2
 80088c4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80088c8:	4b3b      	ldr	r3, [pc, #236]	; (80089b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80088ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80088ce:	f023 021f 	bic.w	r2, r3, #31
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088d6:	3b01      	subs	r3, #1
 80088d8:	4937      	ldr	r1, [pc, #220]	; (80089b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80088da:	4313      	orrs	r3, r2
 80088dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d01d      	beq.n	8008928 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80088ec:	4b32      	ldr	r3, [pc, #200]	; (80089b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80088ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80088f2:	0e1b      	lsrs	r3, r3, #24
 80088f4:	f003 030f 	and.w	r3, r3, #15
 80088f8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80088fa:	4b2f      	ldr	r3, [pc, #188]	; (80089b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80088fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008900:	0f1b      	lsrs	r3, r3, #28
 8008902:	f003 0307 	and.w	r3, r3, #7
 8008906:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	685b      	ldr	r3, [r3, #4]
 800890c:	019a      	lsls	r2, r3, #6
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	691b      	ldr	r3, [r3, #16]
 8008912:	041b      	lsls	r3, r3, #16
 8008914:	431a      	orrs	r2, r3
 8008916:	693b      	ldr	r3, [r7, #16]
 8008918:	061b      	lsls	r3, r3, #24
 800891a:	431a      	orrs	r2, r3
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	071b      	lsls	r3, r3, #28
 8008920:	4925      	ldr	r1, [pc, #148]	; (80089b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008922:	4313      	orrs	r3, r2
 8008924:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008930:	2b00      	cmp	r3, #0
 8008932:	d011      	beq.n	8008958 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	685b      	ldr	r3, [r3, #4]
 8008938:	019a      	lsls	r2, r3, #6
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	691b      	ldr	r3, [r3, #16]
 800893e:	041b      	lsls	r3, r3, #16
 8008940:	431a      	orrs	r2, r3
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	68db      	ldr	r3, [r3, #12]
 8008946:	061b      	lsls	r3, r3, #24
 8008948:	431a      	orrs	r2, r3
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	689b      	ldr	r3, [r3, #8]
 800894e:	071b      	lsls	r3, r3, #28
 8008950:	4919      	ldr	r1, [pc, #100]	; (80089b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008952:	4313      	orrs	r3, r2
 8008954:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008958:	4b17      	ldr	r3, [pc, #92]	; (80089b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	4a16      	ldr	r2, [pc, #88]	; (80089b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800895e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008962:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008964:	f7fb f89c 	bl	8003aa0 <HAL_GetTick>
 8008968:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800896a:	e008      	b.n	800897e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800896c:	f7fb f898 	bl	8003aa0 <HAL_GetTick>
 8008970:	4602      	mov	r2, r0
 8008972:	697b      	ldr	r3, [r7, #20]
 8008974:	1ad3      	subs	r3, r2, r3
 8008976:	2b64      	cmp	r3, #100	; 0x64
 8008978:	d901      	bls.n	800897e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800897a:	2303      	movs	r3, #3
 800897c:	e0d7      	b.n	8008b2e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800897e:	4b0e      	ldr	r3, [pc, #56]	; (80089b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008986:	2b00      	cmp	r3, #0
 8008988:	d0f0      	beq.n	800896c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800898a:	69bb      	ldr	r3, [r7, #24]
 800898c:	2b01      	cmp	r3, #1
 800898e:	f040 80cd 	bne.w	8008b2c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8008992:	4b09      	ldr	r3, [pc, #36]	; (80089b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	4a08      	ldr	r2, [pc, #32]	; (80089b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008998:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800899c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800899e:	f7fb f87f 	bl	8003aa0 <HAL_GetTick>
 80089a2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80089a4:	e00a      	b.n	80089bc <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80089a6:	f7fb f87b 	bl	8003aa0 <HAL_GetTick>
 80089aa:	4602      	mov	r2, r0
 80089ac:	697b      	ldr	r3, [r7, #20]
 80089ae:	1ad3      	subs	r3, r2, r3
 80089b0:	2b64      	cmp	r3, #100	; 0x64
 80089b2:	d903      	bls.n	80089bc <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80089b4:	2303      	movs	r3, #3
 80089b6:	e0ba      	b.n	8008b2e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80089b8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80089bc:	4b5e      	ldr	r3, [pc, #376]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80089c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80089c8:	d0ed      	beq.n	80089a6 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d003      	beq.n	80089de <HAL_RCCEx_PeriphCLKConfig+0x682>
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d009      	beq.n	80089f2 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d02e      	beq.n	8008a48 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d12a      	bne.n	8008a48 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80089f2:	4b51      	ldr	r3, [pc, #324]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80089f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089f8:	0c1b      	lsrs	r3, r3, #16
 80089fa:	f003 0303 	and.w	r3, r3, #3
 80089fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008a00:	4b4d      	ldr	r3, [pc, #308]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a06:	0f1b      	lsrs	r3, r3, #28
 8008a08:	f003 0307 	and.w	r3, r3, #7
 8008a0c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	695b      	ldr	r3, [r3, #20]
 8008a12:	019a      	lsls	r2, r3, #6
 8008a14:	693b      	ldr	r3, [r7, #16]
 8008a16:	041b      	lsls	r3, r3, #16
 8008a18:	431a      	orrs	r2, r3
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	699b      	ldr	r3, [r3, #24]
 8008a1e:	061b      	lsls	r3, r3, #24
 8008a20:	431a      	orrs	r2, r3
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	071b      	lsls	r3, r3, #28
 8008a26:	4944      	ldr	r1, [pc, #272]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a28:	4313      	orrs	r3, r2
 8008a2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008a2e:	4b42      	ldr	r3, [pc, #264]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a34:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a3c:	3b01      	subs	r3, #1
 8008a3e:	021b      	lsls	r3, r3, #8
 8008a40:	493d      	ldr	r1, [pc, #244]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a42:	4313      	orrs	r3, r2
 8008a44:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d022      	beq.n	8008a9a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008a58:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008a5c:	d11d      	bne.n	8008a9a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008a5e:	4b36      	ldr	r3, [pc, #216]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a64:	0e1b      	lsrs	r3, r3, #24
 8008a66:	f003 030f 	and.w	r3, r3, #15
 8008a6a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008a6c:	4b32      	ldr	r3, [pc, #200]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a72:	0f1b      	lsrs	r3, r3, #28
 8008a74:	f003 0307 	and.w	r3, r3, #7
 8008a78:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	695b      	ldr	r3, [r3, #20]
 8008a7e:	019a      	lsls	r2, r3, #6
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	6a1b      	ldr	r3, [r3, #32]
 8008a84:	041b      	lsls	r3, r3, #16
 8008a86:	431a      	orrs	r2, r3
 8008a88:	693b      	ldr	r3, [r7, #16]
 8008a8a:	061b      	lsls	r3, r3, #24
 8008a8c:	431a      	orrs	r2, r3
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	071b      	lsls	r3, r3, #28
 8008a92:	4929      	ldr	r1, [pc, #164]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a94:	4313      	orrs	r3, r2
 8008a96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	f003 0308 	and.w	r3, r3, #8
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d028      	beq.n	8008af8 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008aa6:	4b24      	ldr	r3, [pc, #144]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008aa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008aac:	0e1b      	lsrs	r3, r3, #24
 8008aae:	f003 030f 	and.w	r3, r3, #15
 8008ab2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008ab4:	4b20      	ldr	r3, [pc, #128]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008aba:	0c1b      	lsrs	r3, r3, #16
 8008abc:	f003 0303 	and.w	r3, r3, #3
 8008ac0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	695b      	ldr	r3, [r3, #20]
 8008ac6:	019a      	lsls	r2, r3, #6
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	041b      	lsls	r3, r3, #16
 8008acc:	431a      	orrs	r2, r3
 8008ace:	693b      	ldr	r3, [r7, #16]
 8008ad0:	061b      	lsls	r3, r3, #24
 8008ad2:	431a      	orrs	r2, r3
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	69db      	ldr	r3, [r3, #28]
 8008ad8:	071b      	lsls	r3, r3, #28
 8008ada:	4917      	ldr	r1, [pc, #92]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008adc:	4313      	orrs	r3, r2
 8008ade:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8008ae2:	4b15      	ldr	r3, [pc, #84]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008ae4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008ae8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008af0:	4911      	ldr	r1, [pc, #68]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008af2:	4313      	orrs	r3, r2
 8008af4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008af8:	4b0f      	ldr	r3, [pc, #60]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	4a0e      	ldr	r2, [pc, #56]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008afe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008b02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008b04:	f7fa ffcc 	bl	8003aa0 <HAL_GetTick>
 8008b08:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008b0a:	e008      	b.n	8008b1e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008b0c:	f7fa ffc8 	bl	8003aa0 <HAL_GetTick>
 8008b10:	4602      	mov	r2, r0
 8008b12:	697b      	ldr	r3, [r7, #20]
 8008b14:	1ad3      	subs	r3, r2, r3
 8008b16:	2b64      	cmp	r3, #100	; 0x64
 8008b18:	d901      	bls.n	8008b1e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008b1a:	2303      	movs	r3, #3
 8008b1c:	e007      	b.n	8008b2e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008b1e:	4b06      	ldr	r3, [pc, #24]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008b26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b2a:	d1ef      	bne.n	8008b0c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8008b2c:	2300      	movs	r3, #0
}
 8008b2e:	4618      	mov	r0, r3
 8008b30:	3720      	adds	r7, #32
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bd80      	pop	{r7, pc}
 8008b36:	bf00      	nop
 8008b38:	40023800 	.word	0x40023800

08008b3c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b082      	sub	sp, #8
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
 8008b44:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d101      	bne.n	8008b50 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8008b4c:	2301      	movs	r3, #1
 8008b4e:	e025      	b.n	8008b9c <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008b56:	b2db      	uxtb	r3, r3
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d106      	bne.n	8008b6a <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2200      	movs	r2, #0
 8008b60:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8008b64:	6878      	ldr	r0, [r7, #4]
 8008b66:	f7f8 fcb9 	bl	80014dc <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	2202      	movs	r2, #2
 8008b6e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681a      	ldr	r2, [r3, #0]
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	3304      	adds	r3, #4
 8008b7a:	4619      	mov	r1, r3
 8008b7c:	4610      	mov	r0, r2
 8008b7e:	f000 fd43 	bl	8009608 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	6818      	ldr	r0, [r3, #0]
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	685b      	ldr	r3, [r3, #4]
 8008b8a:	461a      	mov	r2, r3
 8008b8c:	6839      	ldr	r1, [r7, #0]
 8008b8e:	f000 fd97 	bl	80096c0 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	2201      	movs	r2, #1
 8008b96:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008b9a:	2300      	movs	r3, #0
}
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	3708      	adds	r7, #8
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	bd80      	pop	{r7, pc}

08008ba4 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b086      	sub	sp, #24
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	60f8      	str	r0, [r7, #12]
 8008bac:	60b9      	str	r1, [r7, #8]
 8008bae:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008bb6:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8008bb8:	7dfb      	ldrb	r3, [r7, #23]
 8008bba:	2b02      	cmp	r3, #2
 8008bbc:	d101      	bne.n	8008bc2 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8008bbe:	2302      	movs	r3, #2
 8008bc0:	e021      	b.n	8008c06 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8008bc2:	7dfb      	ldrb	r3, [r7, #23]
 8008bc4:	2b01      	cmp	r3, #1
 8008bc6:	d002      	beq.n	8008bce <HAL_SDRAM_SendCommand+0x2a>
 8008bc8:	7dfb      	ldrb	r3, [r7, #23]
 8008bca:	2b05      	cmp	r3, #5
 8008bcc:	d118      	bne.n	8008c00 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	2202      	movs	r2, #2
 8008bd2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	687a      	ldr	r2, [r7, #4]
 8008bdc:	68b9      	ldr	r1, [r7, #8]
 8008bde:	4618      	mov	r0, r3
 8008be0:	f000 fdd8 	bl	8009794 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8008be4:	68bb      	ldr	r3, [r7, #8]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	2b02      	cmp	r3, #2
 8008bea:	d104      	bne.n	8008bf6 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	2205      	movs	r2, #5
 8008bf0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8008bf4:	e006      	b.n	8008c04 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	2201      	movs	r2, #1
 8008bfa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8008bfe:	e001      	b.n	8008c04 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8008c00:	2301      	movs	r3, #1
 8008c02:	e000      	b.n	8008c06 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8008c04:	2300      	movs	r3, #0
}
 8008c06:	4618      	mov	r0, r3
 8008c08:	3718      	adds	r7, #24
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	bd80      	pop	{r7, pc}

08008c0e <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8008c0e:	b580      	push	{r7, lr}
 8008c10:	b082      	sub	sp, #8
 8008c12:	af00      	add	r7, sp, #0
 8008c14:	6078      	str	r0, [r7, #4]
 8008c16:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008c1e:	b2db      	uxtb	r3, r3
 8008c20:	2b02      	cmp	r3, #2
 8008c22:	d101      	bne.n	8008c28 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8008c24:	2302      	movs	r3, #2
 8008c26:	e016      	b.n	8008c56 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008c2e:	b2db      	uxtb	r3, r3
 8008c30:	2b01      	cmp	r3, #1
 8008c32:	d10f      	bne.n	8008c54 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2202      	movs	r2, #2
 8008c38:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	6839      	ldr	r1, [r7, #0]
 8008c42:	4618      	mov	r0, r3
 8008c44:	f000 fdca 	bl	80097dc <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2201      	movs	r2, #1
 8008c4c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8008c50:	2300      	movs	r3, #0
 8008c52:	e000      	b.n	8008c56 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8008c54:	2301      	movs	r3, #1
}
 8008c56:	4618      	mov	r0, r3
 8008c58:	3708      	adds	r7, #8
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	bd80      	pop	{r7, pc}

08008c5e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008c5e:	b580      	push	{r7, lr}
 8008c60:	b082      	sub	sp, #8
 8008c62:	af00      	add	r7, sp, #0
 8008c64:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d101      	bne.n	8008c70 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008c6c:	2301      	movs	r3, #1
 8008c6e:	e040      	b.n	8008cf2 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d106      	bne.n	8008c86 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008c80:	6878      	ldr	r0, [r7, #4]
 8008c82:	f7f8 fb29 	bl	80012d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	2224      	movs	r2, #36	; 0x24
 8008c8a:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	681a      	ldr	r2, [r3, #0]
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	f022 0201 	bic.w	r2, r2, #1
 8008c9a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008c9c:	6878      	ldr	r0, [r7, #4]
 8008c9e:	f000 f8af 	bl	8008e00 <UART_SetConfig>
 8008ca2:	4603      	mov	r3, r0
 8008ca4:	2b01      	cmp	r3, #1
 8008ca6:	d101      	bne.n	8008cac <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008ca8:	2301      	movs	r3, #1
 8008caa:	e022      	b.n	8008cf2 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d002      	beq.n	8008cba <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008cb4:	6878      	ldr	r0, [r7, #4]
 8008cb6:	f000 fb07 	bl	80092c8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	685a      	ldr	r2, [r3, #4]
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008cc8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	689a      	ldr	r2, [r3, #8]
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008cd8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	681a      	ldr	r2, [r3, #0]
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	f042 0201 	orr.w	r2, r2, #1
 8008ce8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	f000 fb8e 	bl	800940c <UART_CheckIdleState>
 8008cf0:	4603      	mov	r3, r0
}
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	3708      	adds	r7, #8
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	bd80      	pop	{r7, pc}

08008cfa <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008cfa:	b580      	push	{r7, lr}
 8008cfc:	b08a      	sub	sp, #40	; 0x28
 8008cfe:	af02      	add	r7, sp, #8
 8008d00:	60f8      	str	r0, [r7, #12]
 8008d02:	60b9      	str	r1, [r7, #8]
 8008d04:	603b      	str	r3, [r7, #0]
 8008d06:	4613      	mov	r3, r2
 8008d08:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008d0e:	2b20      	cmp	r3, #32
 8008d10:	d171      	bne.n	8008df6 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8008d12:	68bb      	ldr	r3, [r7, #8]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d002      	beq.n	8008d1e <HAL_UART_Transmit+0x24>
 8008d18:	88fb      	ldrh	r3, [r7, #6]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d101      	bne.n	8008d22 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8008d1e:	2301      	movs	r3, #1
 8008d20:	e06a      	b.n	8008df8 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	2200      	movs	r2, #0
 8008d26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	2221      	movs	r2, #33	; 0x21
 8008d2e:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008d30:	f7fa feb6 	bl	8003aa0 <HAL_GetTick>
 8008d34:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	88fa      	ldrh	r2, [r7, #6]
 8008d3a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	88fa      	ldrh	r2, [r7, #6]
 8008d42:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	689b      	ldr	r3, [r3, #8]
 8008d4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d4e:	d108      	bne.n	8008d62 <HAL_UART_Transmit+0x68>
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	691b      	ldr	r3, [r3, #16]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d104      	bne.n	8008d62 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8008d58:	2300      	movs	r3, #0
 8008d5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008d5c:	68bb      	ldr	r3, [r7, #8]
 8008d5e:	61bb      	str	r3, [r7, #24]
 8008d60:	e003      	b.n	8008d6a <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8008d62:	68bb      	ldr	r3, [r7, #8]
 8008d64:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008d66:	2300      	movs	r3, #0
 8008d68:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008d6a:	e02c      	b.n	8008dc6 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	9300      	str	r3, [sp, #0]
 8008d70:	697b      	ldr	r3, [r7, #20]
 8008d72:	2200      	movs	r2, #0
 8008d74:	2180      	movs	r1, #128	; 0x80
 8008d76:	68f8      	ldr	r0, [r7, #12]
 8008d78:	f000 fb7f 	bl	800947a <UART_WaitOnFlagUntilTimeout>
 8008d7c:	4603      	mov	r3, r0
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d001      	beq.n	8008d86 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8008d82:	2303      	movs	r3, #3
 8008d84:	e038      	b.n	8008df8 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8008d86:	69fb      	ldr	r3, [r7, #28]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d10b      	bne.n	8008da4 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008d8c:	69bb      	ldr	r3, [r7, #24]
 8008d8e:	881b      	ldrh	r3, [r3, #0]
 8008d90:	461a      	mov	r2, r3
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008d9a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008d9c:	69bb      	ldr	r3, [r7, #24]
 8008d9e:	3302      	adds	r3, #2
 8008da0:	61bb      	str	r3, [r7, #24]
 8008da2:	e007      	b.n	8008db4 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008da4:	69fb      	ldr	r3, [r7, #28]
 8008da6:	781a      	ldrb	r2, [r3, #0]
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008dae:	69fb      	ldr	r3, [r7, #28]
 8008db0:	3301      	adds	r3, #1
 8008db2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008dba:	b29b      	uxth	r3, r3
 8008dbc:	3b01      	subs	r3, #1
 8008dbe:	b29a      	uxth	r2, r3
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008dcc:	b29b      	uxth	r3, r3
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d1cc      	bne.n	8008d6c <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	9300      	str	r3, [sp, #0]
 8008dd6:	697b      	ldr	r3, [r7, #20]
 8008dd8:	2200      	movs	r2, #0
 8008dda:	2140      	movs	r1, #64	; 0x40
 8008ddc:	68f8      	ldr	r0, [r7, #12]
 8008dde:	f000 fb4c 	bl	800947a <UART_WaitOnFlagUntilTimeout>
 8008de2:	4603      	mov	r3, r0
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d001      	beq.n	8008dec <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8008de8:	2303      	movs	r3, #3
 8008dea:	e005      	b.n	8008df8 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	2220      	movs	r2, #32
 8008df0:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8008df2:	2300      	movs	r3, #0
 8008df4:	e000      	b.n	8008df8 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8008df6:	2302      	movs	r3, #2
  }
}
 8008df8:	4618      	mov	r0, r3
 8008dfa:	3720      	adds	r7, #32
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	bd80      	pop	{r7, pc}

08008e00 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b088      	sub	sp, #32
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008e08:	2300      	movs	r3, #0
 8008e0a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	689a      	ldr	r2, [r3, #8]
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	691b      	ldr	r3, [r3, #16]
 8008e14:	431a      	orrs	r2, r3
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	695b      	ldr	r3, [r3, #20]
 8008e1a:	431a      	orrs	r2, r3
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	69db      	ldr	r3, [r3, #28]
 8008e20:	4313      	orrs	r3, r2
 8008e22:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	681a      	ldr	r2, [r3, #0]
 8008e2a:	4ba6      	ldr	r3, [pc, #664]	; (80090c4 <UART_SetConfig+0x2c4>)
 8008e2c:	4013      	ands	r3, r2
 8008e2e:	687a      	ldr	r2, [r7, #4]
 8008e30:	6812      	ldr	r2, [r2, #0]
 8008e32:	6979      	ldr	r1, [r7, #20]
 8008e34:	430b      	orrs	r3, r1
 8008e36:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	685b      	ldr	r3, [r3, #4]
 8008e3e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	68da      	ldr	r2, [r3, #12]
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	430a      	orrs	r2, r1
 8008e4c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	699b      	ldr	r3, [r3, #24]
 8008e52:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	6a1b      	ldr	r3, [r3, #32]
 8008e58:	697a      	ldr	r2, [r7, #20]
 8008e5a:	4313      	orrs	r3, r2
 8008e5c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	689b      	ldr	r3, [r3, #8]
 8008e64:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	697a      	ldr	r2, [r7, #20]
 8008e6e:	430a      	orrs	r2, r1
 8008e70:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	4a94      	ldr	r2, [pc, #592]	; (80090c8 <UART_SetConfig+0x2c8>)
 8008e78:	4293      	cmp	r3, r2
 8008e7a:	d120      	bne.n	8008ebe <UART_SetConfig+0xbe>
 8008e7c:	4b93      	ldr	r3, [pc, #588]	; (80090cc <UART_SetConfig+0x2cc>)
 8008e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e82:	f003 0303 	and.w	r3, r3, #3
 8008e86:	2b03      	cmp	r3, #3
 8008e88:	d816      	bhi.n	8008eb8 <UART_SetConfig+0xb8>
 8008e8a:	a201      	add	r2, pc, #4	; (adr r2, 8008e90 <UART_SetConfig+0x90>)
 8008e8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e90:	08008ea1 	.word	0x08008ea1
 8008e94:	08008ead 	.word	0x08008ead
 8008e98:	08008ea7 	.word	0x08008ea7
 8008e9c:	08008eb3 	.word	0x08008eb3
 8008ea0:	2301      	movs	r3, #1
 8008ea2:	77fb      	strb	r3, [r7, #31]
 8008ea4:	e150      	b.n	8009148 <UART_SetConfig+0x348>
 8008ea6:	2302      	movs	r3, #2
 8008ea8:	77fb      	strb	r3, [r7, #31]
 8008eaa:	e14d      	b.n	8009148 <UART_SetConfig+0x348>
 8008eac:	2304      	movs	r3, #4
 8008eae:	77fb      	strb	r3, [r7, #31]
 8008eb0:	e14a      	b.n	8009148 <UART_SetConfig+0x348>
 8008eb2:	2308      	movs	r3, #8
 8008eb4:	77fb      	strb	r3, [r7, #31]
 8008eb6:	e147      	b.n	8009148 <UART_SetConfig+0x348>
 8008eb8:	2310      	movs	r3, #16
 8008eba:	77fb      	strb	r3, [r7, #31]
 8008ebc:	e144      	b.n	8009148 <UART_SetConfig+0x348>
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	4a83      	ldr	r2, [pc, #524]	; (80090d0 <UART_SetConfig+0x2d0>)
 8008ec4:	4293      	cmp	r3, r2
 8008ec6:	d132      	bne.n	8008f2e <UART_SetConfig+0x12e>
 8008ec8:	4b80      	ldr	r3, [pc, #512]	; (80090cc <UART_SetConfig+0x2cc>)
 8008eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ece:	f003 030c 	and.w	r3, r3, #12
 8008ed2:	2b0c      	cmp	r3, #12
 8008ed4:	d828      	bhi.n	8008f28 <UART_SetConfig+0x128>
 8008ed6:	a201      	add	r2, pc, #4	; (adr r2, 8008edc <UART_SetConfig+0xdc>)
 8008ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008edc:	08008f11 	.word	0x08008f11
 8008ee0:	08008f29 	.word	0x08008f29
 8008ee4:	08008f29 	.word	0x08008f29
 8008ee8:	08008f29 	.word	0x08008f29
 8008eec:	08008f1d 	.word	0x08008f1d
 8008ef0:	08008f29 	.word	0x08008f29
 8008ef4:	08008f29 	.word	0x08008f29
 8008ef8:	08008f29 	.word	0x08008f29
 8008efc:	08008f17 	.word	0x08008f17
 8008f00:	08008f29 	.word	0x08008f29
 8008f04:	08008f29 	.word	0x08008f29
 8008f08:	08008f29 	.word	0x08008f29
 8008f0c:	08008f23 	.word	0x08008f23
 8008f10:	2300      	movs	r3, #0
 8008f12:	77fb      	strb	r3, [r7, #31]
 8008f14:	e118      	b.n	8009148 <UART_SetConfig+0x348>
 8008f16:	2302      	movs	r3, #2
 8008f18:	77fb      	strb	r3, [r7, #31]
 8008f1a:	e115      	b.n	8009148 <UART_SetConfig+0x348>
 8008f1c:	2304      	movs	r3, #4
 8008f1e:	77fb      	strb	r3, [r7, #31]
 8008f20:	e112      	b.n	8009148 <UART_SetConfig+0x348>
 8008f22:	2308      	movs	r3, #8
 8008f24:	77fb      	strb	r3, [r7, #31]
 8008f26:	e10f      	b.n	8009148 <UART_SetConfig+0x348>
 8008f28:	2310      	movs	r3, #16
 8008f2a:	77fb      	strb	r3, [r7, #31]
 8008f2c:	e10c      	b.n	8009148 <UART_SetConfig+0x348>
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	4a68      	ldr	r2, [pc, #416]	; (80090d4 <UART_SetConfig+0x2d4>)
 8008f34:	4293      	cmp	r3, r2
 8008f36:	d120      	bne.n	8008f7a <UART_SetConfig+0x17a>
 8008f38:	4b64      	ldr	r3, [pc, #400]	; (80090cc <UART_SetConfig+0x2cc>)
 8008f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f3e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008f42:	2b30      	cmp	r3, #48	; 0x30
 8008f44:	d013      	beq.n	8008f6e <UART_SetConfig+0x16e>
 8008f46:	2b30      	cmp	r3, #48	; 0x30
 8008f48:	d814      	bhi.n	8008f74 <UART_SetConfig+0x174>
 8008f4a:	2b20      	cmp	r3, #32
 8008f4c:	d009      	beq.n	8008f62 <UART_SetConfig+0x162>
 8008f4e:	2b20      	cmp	r3, #32
 8008f50:	d810      	bhi.n	8008f74 <UART_SetConfig+0x174>
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d002      	beq.n	8008f5c <UART_SetConfig+0x15c>
 8008f56:	2b10      	cmp	r3, #16
 8008f58:	d006      	beq.n	8008f68 <UART_SetConfig+0x168>
 8008f5a:	e00b      	b.n	8008f74 <UART_SetConfig+0x174>
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	77fb      	strb	r3, [r7, #31]
 8008f60:	e0f2      	b.n	8009148 <UART_SetConfig+0x348>
 8008f62:	2302      	movs	r3, #2
 8008f64:	77fb      	strb	r3, [r7, #31]
 8008f66:	e0ef      	b.n	8009148 <UART_SetConfig+0x348>
 8008f68:	2304      	movs	r3, #4
 8008f6a:	77fb      	strb	r3, [r7, #31]
 8008f6c:	e0ec      	b.n	8009148 <UART_SetConfig+0x348>
 8008f6e:	2308      	movs	r3, #8
 8008f70:	77fb      	strb	r3, [r7, #31]
 8008f72:	e0e9      	b.n	8009148 <UART_SetConfig+0x348>
 8008f74:	2310      	movs	r3, #16
 8008f76:	77fb      	strb	r3, [r7, #31]
 8008f78:	e0e6      	b.n	8009148 <UART_SetConfig+0x348>
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	4a56      	ldr	r2, [pc, #344]	; (80090d8 <UART_SetConfig+0x2d8>)
 8008f80:	4293      	cmp	r3, r2
 8008f82:	d120      	bne.n	8008fc6 <UART_SetConfig+0x1c6>
 8008f84:	4b51      	ldr	r3, [pc, #324]	; (80090cc <UART_SetConfig+0x2cc>)
 8008f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f8a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008f8e:	2bc0      	cmp	r3, #192	; 0xc0
 8008f90:	d013      	beq.n	8008fba <UART_SetConfig+0x1ba>
 8008f92:	2bc0      	cmp	r3, #192	; 0xc0
 8008f94:	d814      	bhi.n	8008fc0 <UART_SetConfig+0x1c0>
 8008f96:	2b80      	cmp	r3, #128	; 0x80
 8008f98:	d009      	beq.n	8008fae <UART_SetConfig+0x1ae>
 8008f9a:	2b80      	cmp	r3, #128	; 0x80
 8008f9c:	d810      	bhi.n	8008fc0 <UART_SetConfig+0x1c0>
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d002      	beq.n	8008fa8 <UART_SetConfig+0x1a8>
 8008fa2:	2b40      	cmp	r3, #64	; 0x40
 8008fa4:	d006      	beq.n	8008fb4 <UART_SetConfig+0x1b4>
 8008fa6:	e00b      	b.n	8008fc0 <UART_SetConfig+0x1c0>
 8008fa8:	2300      	movs	r3, #0
 8008faa:	77fb      	strb	r3, [r7, #31]
 8008fac:	e0cc      	b.n	8009148 <UART_SetConfig+0x348>
 8008fae:	2302      	movs	r3, #2
 8008fb0:	77fb      	strb	r3, [r7, #31]
 8008fb2:	e0c9      	b.n	8009148 <UART_SetConfig+0x348>
 8008fb4:	2304      	movs	r3, #4
 8008fb6:	77fb      	strb	r3, [r7, #31]
 8008fb8:	e0c6      	b.n	8009148 <UART_SetConfig+0x348>
 8008fba:	2308      	movs	r3, #8
 8008fbc:	77fb      	strb	r3, [r7, #31]
 8008fbe:	e0c3      	b.n	8009148 <UART_SetConfig+0x348>
 8008fc0:	2310      	movs	r3, #16
 8008fc2:	77fb      	strb	r3, [r7, #31]
 8008fc4:	e0c0      	b.n	8009148 <UART_SetConfig+0x348>
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	4a44      	ldr	r2, [pc, #272]	; (80090dc <UART_SetConfig+0x2dc>)
 8008fcc:	4293      	cmp	r3, r2
 8008fce:	d125      	bne.n	800901c <UART_SetConfig+0x21c>
 8008fd0:	4b3e      	ldr	r3, [pc, #248]	; (80090cc <UART_SetConfig+0x2cc>)
 8008fd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008fd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008fda:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008fde:	d017      	beq.n	8009010 <UART_SetConfig+0x210>
 8008fe0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008fe4:	d817      	bhi.n	8009016 <UART_SetConfig+0x216>
 8008fe6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008fea:	d00b      	beq.n	8009004 <UART_SetConfig+0x204>
 8008fec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ff0:	d811      	bhi.n	8009016 <UART_SetConfig+0x216>
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d003      	beq.n	8008ffe <UART_SetConfig+0x1fe>
 8008ff6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ffa:	d006      	beq.n	800900a <UART_SetConfig+0x20a>
 8008ffc:	e00b      	b.n	8009016 <UART_SetConfig+0x216>
 8008ffe:	2300      	movs	r3, #0
 8009000:	77fb      	strb	r3, [r7, #31]
 8009002:	e0a1      	b.n	8009148 <UART_SetConfig+0x348>
 8009004:	2302      	movs	r3, #2
 8009006:	77fb      	strb	r3, [r7, #31]
 8009008:	e09e      	b.n	8009148 <UART_SetConfig+0x348>
 800900a:	2304      	movs	r3, #4
 800900c:	77fb      	strb	r3, [r7, #31]
 800900e:	e09b      	b.n	8009148 <UART_SetConfig+0x348>
 8009010:	2308      	movs	r3, #8
 8009012:	77fb      	strb	r3, [r7, #31]
 8009014:	e098      	b.n	8009148 <UART_SetConfig+0x348>
 8009016:	2310      	movs	r3, #16
 8009018:	77fb      	strb	r3, [r7, #31]
 800901a:	e095      	b.n	8009148 <UART_SetConfig+0x348>
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	4a2f      	ldr	r2, [pc, #188]	; (80090e0 <UART_SetConfig+0x2e0>)
 8009022:	4293      	cmp	r3, r2
 8009024:	d125      	bne.n	8009072 <UART_SetConfig+0x272>
 8009026:	4b29      	ldr	r3, [pc, #164]	; (80090cc <UART_SetConfig+0x2cc>)
 8009028:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800902c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009030:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009034:	d017      	beq.n	8009066 <UART_SetConfig+0x266>
 8009036:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800903a:	d817      	bhi.n	800906c <UART_SetConfig+0x26c>
 800903c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009040:	d00b      	beq.n	800905a <UART_SetConfig+0x25a>
 8009042:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009046:	d811      	bhi.n	800906c <UART_SetConfig+0x26c>
 8009048:	2b00      	cmp	r3, #0
 800904a:	d003      	beq.n	8009054 <UART_SetConfig+0x254>
 800904c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009050:	d006      	beq.n	8009060 <UART_SetConfig+0x260>
 8009052:	e00b      	b.n	800906c <UART_SetConfig+0x26c>
 8009054:	2301      	movs	r3, #1
 8009056:	77fb      	strb	r3, [r7, #31]
 8009058:	e076      	b.n	8009148 <UART_SetConfig+0x348>
 800905a:	2302      	movs	r3, #2
 800905c:	77fb      	strb	r3, [r7, #31]
 800905e:	e073      	b.n	8009148 <UART_SetConfig+0x348>
 8009060:	2304      	movs	r3, #4
 8009062:	77fb      	strb	r3, [r7, #31]
 8009064:	e070      	b.n	8009148 <UART_SetConfig+0x348>
 8009066:	2308      	movs	r3, #8
 8009068:	77fb      	strb	r3, [r7, #31]
 800906a:	e06d      	b.n	8009148 <UART_SetConfig+0x348>
 800906c:	2310      	movs	r3, #16
 800906e:	77fb      	strb	r3, [r7, #31]
 8009070:	e06a      	b.n	8009148 <UART_SetConfig+0x348>
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	4a1b      	ldr	r2, [pc, #108]	; (80090e4 <UART_SetConfig+0x2e4>)
 8009078:	4293      	cmp	r3, r2
 800907a:	d138      	bne.n	80090ee <UART_SetConfig+0x2ee>
 800907c:	4b13      	ldr	r3, [pc, #76]	; (80090cc <UART_SetConfig+0x2cc>)
 800907e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009082:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8009086:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800908a:	d017      	beq.n	80090bc <UART_SetConfig+0x2bc>
 800908c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009090:	d82a      	bhi.n	80090e8 <UART_SetConfig+0x2e8>
 8009092:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009096:	d00b      	beq.n	80090b0 <UART_SetConfig+0x2b0>
 8009098:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800909c:	d824      	bhi.n	80090e8 <UART_SetConfig+0x2e8>
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d003      	beq.n	80090aa <UART_SetConfig+0x2aa>
 80090a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80090a6:	d006      	beq.n	80090b6 <UART_SetConfig+0x2b6>
 80090a8:	e01e      	b.n	80090e8 <UART_SetConfig+0x2e8>
 80090aa:	2300      	movs	r3, #0
 80090ac:	77fb      	strb	r3, [r7, #31]
 80090ae:	e04b      	b.n	8009148 <UART_SetConfig+0x348>
 80090b0:	2302      	movs	r3, #2
 80090b2:	77fb      	strb	r3, [r7, #31]
 80090b4:	e048      	b.n	8009148 <UART_SetConfig+0x348>
 80090b6:	2304      	movs	r3, #4
 80090b8:	77fb      	strb	r3, [r7, #31]
 80090ba:	e045      	b.n	8009148 <UART_SetConfig+0x348>
 80090bc:	2308      	movs	r3, #8
 80090be:	77fb      	strb	r3, [r7, #31]
 80090c0:	e042      	b.n	8009148 <UART_SetConfig+0x348>
 80090c2:	bf00      	nop
 80090c4:	efff69f3 	.word	0xefff69f3
 80090c8:	40011000 	.word	0x40011000
 80090cc:	40023800 	.word	0x40023800
 80090d0:	40004400 	.word	0x40004400
 80090d4:	40004800 	.word	0x40004800
 80090d8:	40004c00 	.word	0x40004c00
 80090dc:	40005000 	.word	0x40005000
 80090e0:	40011400 	.word	0x40011400
 80090e4:	40007800 	.word	0x40007800
 80090e8:	2310      	movs	r3, #16
 80090ea:	77fb      	strb	r3, [r7, #31]
 80090ec:	e02c      	b.n	8009148 <UART_SetConfig+0x348>
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	4a72      	ldr	r2, [pc, #456]	; (80092bc <UART_SetConfig+0x4bc>)
 80090f4:	4293      	cmp	r3, r2
 80090f6:	d125      	bne.n	8009144 <UART_SetConfig+0x344>
 80090f8:	4b71      	ldr	r3, [pc, #452]	; (80092c0 <UART_SetConfig+0x4c0>)
 80090fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80090fe:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009102:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009106:	d017      	beq.n	8009138 <UART_SetConfig+0x338>
 8009108:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800910c:	d817      	bhi.n	800913e <UART_SetConfig+0x33e>
 800910e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009112:	d00b      	beq.n	800912c <UART_SetConfig+0x32c>
 8009114:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009118:	d811      	bhi.n	800913e <UART_SetConfig+0x33e>
 800911a:	2b00      	cmp	r3, #0
 800911c:	d003      	beq.n	8009126 <UART_SetConfig+0x326>
 800911e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009122:	d006      	beq.n	8009132 <UART_SetConfig+0x332>
 8009124:	e00b      	b.n	800913e <UART_SetConfig+0x33e>
 8009126:	2300      	movs	r3, #0
 8009128:	77fb      	strb	r3, [r7, #31]
 800912a:	e00d      	b.n	8009148 <UART_SetConfig+0x348>
 800912c:	2302      	movs	r3, #2
 800912e:	77fb      	strb	r3, [r7, #31]
 8009130:	e00a      	b.n	8009148 <UART_SetConfig+0x348>
 8009132:	2304      	movs	r3, #4
 8009134:	77fb      	strb	r3, [r7, #31]
 8009136:	e007      	b.n	8009148 <UART_SetConfig+0x348>
 8009138:	2308      	movs	r3, #8
 800913a:	77fb      	strb	r3, [r7, #31]
 800913c:	e004      	b.n	8009148 <UART_SetConfig+0x348>
 800913e:	2310      	movs	r3, #16
 8009140:	77fb      	strb	r3, [r7, #31]
 8009142:	e001      	b.n	8009148 <UART_SetConfig+0x348>
 8009144:	2310      	movs	r3, #16
 8009146:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	69db      	ldr	r3, [r3, #28]
 800914c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009150:	d15b      	bne.n	800920a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8009152:	7ffb      	ldrb	r3, [r7, #31]
 8009154:	2b08      	cmp	r3, #8
 8009156:	d828      	bhi.n	80091aa <UART_SetConfig+0x3aa>
 8009158:	a201      	add	r2, pc, #4	; (adr r2, 8009160 <UART_SetConfig+0x360>)
 800915a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800915e:	bf00      	nop
 8009160:	08009185 	.word	0x08009185
 8009164:	0800918d 	.word	0x0800918d
 8009168:	08009195 	.word	0x08009195
 800916c:	080091ab 	.word	0x080091ab
 8009170:	0800919b 	.word	0x0800919b
 8009174:	080091ab 	.word	0x080091ab
 8009178:	080091ab 	.word	0x080091ab
 800917c:	080091ab 	.word	0x080091ab
 8009180:	080091a3 	.word	0x080091a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009184:	f7ff f8c2 	bl	800830c <HAL_RCC_GetPCLK1Freq>
 8009188:	61b8      	str	r0, [r7, #24]
        break;
 800918a:	e013      	b.n	80091b4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800918c:	f7ff f8d2 	bl	8008334 <HAL_RCC_GetPCLK2Freq>
 8009190:	61b8      	str	r0, [r7, #24]
        break;
 8009192:	e00f      	b.n	80091b4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009194:	4b4b      	ldr	r3, [pc, #300]	; (80092c4 <UART_SetConfig+0x4c4>)
 8009196:	61bb      	str	r3, [r7, #24]
        break;
 8009198:	e00c      	b.n	80091b4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800919a:	f7fe ffe5 	bl	8008168 <HAL_RCC_GetSysClockFreq>
 800919e:	61b8      	str	r0, [r7, #24]
        break;
 80091a0:	e008      	b.n	80091b4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80091a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80091a6:	61bb      	str	r3, [r7, #24]
        break;
 80091a8:	e004      	b.n	80091b4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80091aa:	2300      	movs	r3, #0
 80091ac:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80091ae:	2301      	movs	r3, #1
 80091b0:	77bb      	strb	r3, [r7, #30]
        break;
 80091b2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80091b4:	69bb      	ldr	r3, [r7, #24]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d074      	beq.n	80092a4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80091ba:	69bb      	ldr	r3, [r7, #24]
 80091bc:	005a      	lsls	r2, r3, #1
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	685b      	ldr	r3, [r3, #4]
 80091c2:	085b      	lsrs	r3, r3, #1
 80091c4:	441a      	add	r2, r3
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	685b      	ldr	r3, [r3, #4]
 80091ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80091ce:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80091d0:	693b      	ldr	r3, [r7, #16]
 80091d2:	2b0f      	cmp	r3, #15
 80091d4:	d916      	bls.n	8009204 <UART_SetConfig+0x404>
 80091d6:	693b      	ldr	r3, [r7, #16]
 80091d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80091dc:	d212      	bcs.n	8009204 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80091de:	693b      	ldr	r3, [r7, #16]
 80091e0:	b29b      	uxth	r3, r3
 80091e2:	f023 030f 	bic.w	r3, r3, #15
 80091e6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80091e8:	693b      	ldr	r3, [r7, #16]
 80091ea:	085b      	lsrs	r3, r3, #1
 80091ec:	b29b      	uxth	r3, r3
 80091ee:	f003 0307 	and.w	r3, r3, #7
 80091f2:	b29a      	uxth	r2, r3
 80091f4:	89fb      	ldrh	r3, [r7, #14]
 80091f6:	4313      	orrs	r3, r2
 80091f8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	89fa      	ldrh	r2, [r7, #14]
 8009200:	60da      	str	r2, [r3, #12]
 8009202:	e04f      	b.n	80092a4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8009204:	2301      	movs	r3, #1
 8009206:	77bb      	strb	r3, [r7, #30]
 8009208:	e04c      	b.n	80092a4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800920a:	7ffb      	ldrb	r3, [r7, #31]
 800920c:	2b08      	cmp	r3, #8
 800920e:	d828      	bhi.n	8009262 <UART_SetConfig+0x462>
 8009210:	a201      	add	r2, pc, #4	; (adr r2, 8009218 <UART_SetConfig+0x418>)
 8009212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009216:	bf00      	nop
 8009218:	0800923d 	.word	0x0800923d
 800921c:	08009245 	.word	0x08009245
 8009220:	0800924d 	.word	0x0800924d
 8009224:	08009263 	.word	0x08009263
 8009228:	08009253 	.word	0x08009253
 800922c:	08009263 	.word	0x08009263
 8009230:	08009263 	.word	0x08009263
 8009234:	08009263 	.word	0x08009263
 8009238:	0800925b 	.word	0x0800925b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800923c:	f7ff f866 	bl	800830c <HAL_RCC_GetPCLK1Freq>
 8009240:	61b8      	str	r0, [r7, #24]
        break;
 8009242:	e013      	b.n	800926c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009244:	f7ff f876 	bl	8008334 <HAL_RCC_GetPCLK2Freq>
 8009248:	61b8      	str	r0, [r7, #24]
        break;
 800924a:	e00f      	b.n	800926c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800924c:	4b1d      	ldr	r3, [pc, #116]	; (80092c4 <UART_SetConfig+0x4c4>)
 800924e:	61bb      	str	r3, [r7, #24]
        break;
 8009250:	e00c      	b.n	800926c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009252:	f7fe ff89 	bl	8008168 <HAL_RCC_GetSysClockFreq>
 8009256:	61b8      	str	r0, [r7, #24]
        break;
 8009258:	e008      	b.n	800926c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800925a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800925e:	61bb      	str	r3, [r7, #24]
        break;
 8009260:	e004      	b.n	800926c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8009262:	2300      	movs	r3, #0
 8009264:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009266:	2301      	movs	r3, #1
 8009268:	77bb      	strb	r3, [r7, #30]
        break;
 800926a:	bf00      	nop
    }

    if (pclk != 0U)
 800926c:	69bb      	ldr	r3, [r7, #24]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d018      	beq.n	80092a4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	685b      	ldr	r3, [r3, #4]
 8009276:	085a      	lsrs	r2, r3, #1
 8009278:	69bb      	ldr	r3, [r7, #24]
 800927a:	441a      	add	r2, r3
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	685b      	ldr	r3, [r3, #4]
 8009280:	fbb2 f3f3 	udiv	r3, r2, r3
 8009284:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009286:	693b      	ldr	r3, [r7, #16]
 8009288:	2b0f      	cmp	r3, #15
 800928a:	d909      	bls.n	80092a0 <UART_SetConfig+0x4a0>
 800928c:	693b      	ldr	r3, [r7, #16]
 800928e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009292:	d205      	bcs.n	80092a0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009294:	693b      	ldr	r3, [r7, #16]
 8009296:	b29a      	uxth	r2, r3
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	60da      	str	r2, [r3, #12]
 800929e:	e001      	b.n	80092a4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80092a0:	2301      	movs	r3, #1
 80092a2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2200      	movs	r2, #0
 80092a8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	2200      	movs	r2, #0
 80092ae:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80092b0:	7fbb      	ldrb	r3, [r7, #30]
}
 80092b2:	4618      	mov	r0, r3
 80092b4:	3720      	adds	r7, #32
 80092b6:	46bd      	mov	sp, r7
 80092b8:	bd80      	pop	{r7, pc}
 80092ba:	bf00      	nop
 80092bc:	40007c00 	.word	0x40007c00
 80092c0:	40023800 	.word	0x40023800
 80092c4:	00f42400 	.word	0x00f42400

080092c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80092c8:	b480      	push	{r7}
 80092ca:	b083      	sub	sp, #12
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092d4:	f003 0301 	and.w	r3, r3, #1
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d00a      	beq.n	80092f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	685b      	ldr	r3, [r3, #4]
 80092e2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	430a      	orrs	r2, r1
 80092f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092f6:	f003 0302 	and.w	r3, r3, #2
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d00a      	beq.n	8009314 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	685b      	ldr	r3, [r3, #4]
 8009304:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	430a      	orrs	r2, r1
 8009312:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009318:	f003 0304 	and.w	r3, r3, #4
 800931c:	2b00      	cmp	r3, #0
 800931e:	d00a      	beq.n	8009336 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	685b      	ldr	r3, [r3, #4]
 8009326:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	430a      	orrs	r2, r1
 8009334:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800933a:	f003 0308 	and.w	r3, r3, #8
 800933e:	2b00      	cmp	r3, #0
 8009340:	d00a      	beq.n	8009358 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	685b      	ldr	r3, [r3, #4]
 8009348:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	430a      	orrs	r2, r1
 8009356:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800935c:	f003 0310 	and.w	r3, r3, #16
 8009360:	2b00      	cmp	r3, #0
 8009362:	d00a      	beq.n	800937a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	689b      	ldr	r3, [r3, #8]
 800936a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	430a      	orrs	r2, r1
 8009378:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800937e:	f003 0320 	and.w	r3, r3, #32
 8009382:	2b00      	cmp	r3, #0
 8009384:	d00a      	beq.n	800939c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	689b      	ldr	r3, [r3, #8]
 800938c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	430a      	orrs	r2, r1
 800939a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d01a      	beq.n	80093de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	685b      	ldr	r3, [r3, #4]
 80093ae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	430a      	orrs	r2, r1
 80093bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80093c6:	d10a      	bne.n	80093de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	685b      	ldr	r3, [r3, #4]
 80093ce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	430a      	orrs	r2, r1
 80093dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d00a      	beq.n	8009400 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	685b      	ldr	r3, [r3, #4]
 80093f0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	430a      	orrs	r2, r1
 80093fe:	605a      	str	r2, [r3, #4]
  }
}
 8009400:	bf00      	nop
 8009402:	370c      	adds	r7, #12
 8009404:	46bd      	mov	sp, r7
 8009406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940a:	4770      	bx	lr

0800940c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b086      	sub	sp, #24
 8009410:	af02      	add	r7, sp, #8
 8009412:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2200      	movs	r2, #0
 8009418:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800941c:	f7fa fb40 	bl	8003aa0 <HAL_GetTick>
 8009420:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	f003 0308 	and.w	r3, r3, #8
 800942c:	2b08      	cmp	r3, #8
 800942e:	d10e      	bne.n	800944e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009430:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009434:	9300      	str	r3, [sp, #0]
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	2200      	movs	r2, #0
 800943a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800943e:	6878      	ldr	r0, [r7, #4]
 8009440:	f000 f81b 	bl	800947a <UART_WaitOnFlagUntilTimeout>
 8009444:	4603      	mov	r3, r0
 8009446:	2b00      	cmp	r3, #0
 8009448:	d001      	beq.n	800944e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800944a:	2303      	movs	r3, #3
 800944c:	e011      	b.n	8009472 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	2220      	movs	r2, #32
 8009452:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2220      	movs	r2, #32
 8009458:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	2200      	movs	r2, #0
 8009460:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	2200      	movs	r2, #0
 8009466:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2200      	movs	r2, #0
 800946c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8009470:	2300      	movs	r3, #0
}
 8009472:	4618      	mov	r0, r3
 8009474:	3710      	adds	r7, #16
 8009476:	46bd      	mov	sp, r7
 8009478:	bd80      	pop	{r7, pc}

0800947a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800947a:	b580      	push	{r7, lr}
 800947c:	b09c      	sub	sp, #112	; 0x70
 800947e:	af00      	add	r7, sp, #0
 8009480:	60f8      	str	r0, [r7, #12]
 8009482:	60b9      	str	r1, [r7, #8]
 8009484:	603b      	str	r3, [r7, #0]
 8009486:	4613      	mov	r3, r2
 8009488:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800948a:	e0a7      	b.n	80095dc <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800948c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800948e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009492:	f000 80a3 	beq.w	80095dc <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009496:	f7fa fb03 	bl	8003aa0 <HAL_GetTick>
 800949a:	4602      	mov	r2, r0
 800949c:	683b      	ldr	r3, [r7, #0]
 800949e:	1ad3      	subs	r3, r2, r3
 80094a0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80094a2:	429a      	cmp	r2, r3
 80094a4:	d302      	bcc.n	80094ac <UART_WaitOnFlagUntilTimeout+0x32>
 80094a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d13f      	bne.n	800952c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80094b4:	e853 3f00 	ldrex	r3, [r3]
 80094b8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80094ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094bc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80094c0:	667b      	str	r3, [r7, #100]	; 0x64
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	461a      	mov	r2, r3
 80094c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80094ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80094cc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094ce:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80094d0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80094d2:	e841 2300 	strex	r3, r2, [r1]
 80094d6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80094d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d1e6      	bne.n	80094ac <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	3308      	adds	r3, #8
 80094e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094e8:	e853 3f00 	ldrex	r3, [r3]
 80094ec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80094ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094f0:	f023 0301 	bic.w	r3, r3, #1
 80094f4:	663b      	str	r3, [r7, #96]	; 0x60
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	3308      	adds	r3, #8
 80094fc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80094fe:	64ba      	str	r2, [r7, #72]	; 0x48
 8009500:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009502:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009504:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009506:	e841 2300 	strex	r3, r2, [r1]
 800950a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800950c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800950e:	2b00      	cmp	r3, #0
 8009510:	d1e5      	bne.n	80094de <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	2220      	movs	r2, #32
 8009516:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	2220      	movs	r2, #32
 800951c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	2200      	movs	r2, #0
 8009524:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8009528:	2303      	movs	r3, #3
 800952a:	e068      	b.n	80095fe <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	f003 0304 	and.w	r3, r3, #4
 8009536:	2b00      	cmp	r3, #0
 8009538:	d050      	beq.n	80095dc <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	69db      	ldr	r3, [r3, #28]
 8009540:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009544:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009548:	d148      	bne.n	80095dc <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009552:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800955a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800955c:	e853 3f00 	ldrex	r3, [r3]
 8009560:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009564:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009568:	66fb      	str	r3, [r7, #108]	; 0x6c
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	461a      	mov	r2, r3
 8009570:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009572:	637b      	str	r3, [r7, #52]	; 0x34
 8009574:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009576:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009578:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800957a:	e841 2300 	strex	r3, r2, [r1]
 800957e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009582:	2b00      	cmp	r3, #0
 8009584:	d1e6      	bne.n	8009554 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	3308      	adds	r3, #8
 800958c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800958e:	697b      	ldr	r3, [r7, #20]
 8009590:	e853 3f00 	ldrex	r3, [r3]
 8009594:	613b      	str	r3, [r7, #16]
   return(result);
 8009596:	693b      	ldr	r3, [r7, #16]
 8009598:	f023 0301 	bic.w	r3, r3, #1
 800959c:	66bb      	str	r3, [r7, #104]	; 0x68
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	3308      	adds	r3, #8
 80095a4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80095a6:	623a      	str	r2, [r7, #32]
 80095a8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095aa:	69f9      	ldr	r1, [r7, #28]
 80095ac:	6a3a      	ldr	r2, [r7, #32]
 80095ae:	e841 2300 	strex	r3, r2, [r1]
 80095b2:	61bb      	str	r3, [r7, #24]
   return(result);
 80095b4:	69bb      	ldr	r3, [r7, #24]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d1e5      	bne.n	8009586 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	2220      	movs	r2, #32
 80095be:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	2220      	movs	r2, #32
 80095c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	2220      	movs	r2, #32
 80095cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	2200      	movs	r2, #0
 80095d4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80095d8:	2303      	movs	r3, #3
 80095da:	e010      	b.n	80095fe <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	69da      	ldr	r2, [r3, #28]
 80095e2:	68bb      	ldr	r3, [r7, #8]
 80095e4:	4013      	ands	r3, r2
 80095e6:	68ba      	ldr	r2, [r7, #8]
 80095e8:	429a      	cmp	r2, r3
 80095ea:	bf0c      	ite	eq
 80095ec:	2301      	moveq	r3, #1
 80095ee:	2300      	movne	r3, #0
 80095f0:	b2db      	uxtb	r3, r3
 80095f2:	461a      	mov	r2, r3
 80095f4:	79fb      	ldrb	r3, [r7, #7]
 80095f6:	429a      	cmp	r2, r3
 80095f8:	f43f af48 	beq.w	800948c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80095fc:	2300      	movs	r3, #0
}
 80095fe:	4618      	mov	r0, r3
 8009600:	3770      	adds	r7, #112	; 0x70
 8009602:	46bd      	mov	sp, r7
 8009604:	bd80      	pop	{r7, pc}
	...

08009608 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8009608:	b480      	push	{r7}
 800960a:	b083      	sub	sp, #12
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
 8009610:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8009612:	683b      	ldr	r3, [r7, #0]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d121      	bne.n	800965e <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681a      	ldr	r2, [r3, #0]
 800961e:	4b27      	ldr	r3, [pc, #156]	; (80096bc <FMC_SDRAM_Init+0xb4>)
 8009620:	4013      	ands	r3, r2
 8009622:	683a      	ldr	r2, [r7, #0]
 8009624:	6851      	ldr	r1, [r2, #4]
 8009626:	683a      	ldr	r2, [r7, #0]
 8009628:	6892      	ldr	r2, [r2, #8]
 800962a:	4311      	orrs	r1, r2
 800962c:	683a      	ldr	r2, [r7, #0]
 800962e:	68d2      	ldr	r2, [r2, #12]
 8009630:	4311      	orrs	r1, r2
 8009632:	683a      	ldr	r2, [r7, #0]
 8009634:	6912      	ldr	r2, [r2, #16]
 8009636:	4311      	orrs	r1, r2
 8009638:	683a      	ldr	r2, [r7, #0]
 800963a:	6952      	ldr	r2, [r2, #20]
 800963c:	4311      	orrs	r1, r2
 800963e:	683a      	ldr	r2, [r7, #0]
 8009640:	6992      	ldr	r2, [r2, #24]
 8009642:	4311      	orrs	r1, r2
 8009644:	683a      	ldr	r2, [r7, #0]
 8009646:	69d2      	ldr	r2, [r2, #28]
 8009648:	4311      	orrs	r1, r2
 800964a:	683a      	ldr	r2, [r7, #0]
 800964c:	6a12      	ldr	r2, [r2, #32]
 800964e:	4311      	orrs	r1, r2
 8009650:	683a      	ldr	r2, [r7, #0]
 8009652:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009654:	430a      	orrs	r2, r1
 8009656:	431a      	orrs	r2, r3
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	601a      	str	r2, [r3, #0]
 800965c:	e026      	b.n	80096ac <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8009666:	683b      	ldr	r3, [r7, #0]
 8009668:	69d9      	ldr	r1, [r3, #28]
 800966a:	683b      	ldr	r3, [r7, #0]
 800966c:	6a1b      	ldr	r3, [r3, #32]
 800966e:	4319      	orrs	r1, r3
 8009670:	683b      	ldr	r3, [r7, #0]
 8009672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009674:	430b      	orrs	r3, r1
 8009676:	431a      	orrs	r2, r3
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	685a      	ldr	r2, [r3, #4]
 8009680:	4b0e      	ldr	r3, [pc, #56]	; (80096bc <FMC_SDRAM_Init+0xb4>)
 8009682:	4013      	ands	r3, r2
 8009684:	683a      	ldr	r2, [r7, #0]
 8009686:	6851      	ldr	r1, [r2, #4]
 8009688:	683a      	ldr	r2, [r7, #0]
 800968a:	6892      	ldr	r2, [r2, #8]
 800968c:	4311      	orrs	r1, r2
 800968e:	683a      	ldr	r2, [r7, #0]
 8009690:	68d2      	ldr	r2, [r2, #12]
 8009692:	4311      	orrs	r1, r2
 8009694:	683a      	ldr	r2, [r7, #0]
 8009696:	6912      	ldr	r2, [r2, #16]
 8009698:	4311      	orrs	r1, r2
 800969a:	683a      	ldr	r2, [r7, #0]
 800969c:	6952      	ldr	r2, [r2, #20]
 800969e:	4311      	orrs	r1, r2
 80096a0:	683a      	ldr	r2, [r7, #0]
 80096a2:	6992      	ldr	r2, [r2, #24]
 80096a4:	430a      	orrs	r2, r1
 80096a6:	431a      	orrs	r2, r3
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 80096ac:	2300      	movs	r3, #0
}
 80096ae:	4618      	mov	r0, r3
 80096b0:	370c      	adds	r7, #12
 80096b2:	46bd      	mov	sp, r7
 80096b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b8:	4770      	bx	lr
 80096ba:	bf00      	nop
 80096bc:	ffff8000 	.word	0xffff8000

080096c0 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80096c0:	b480      	push	{r7}
 80096c2:	b085      	sub	sp, #20
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	60f8      	str	r0, [r7, #12]
 80096c8:	60b9      	str	r1, [r7, #8]
 80096ca:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d128      	bne.n	8009724 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	689b      	ldr	r3, [r3, #8]
 80096d6:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80096da:	68bb      	ldr	r3, [r7, #8]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	1e59      	subs	r1, r3, #1
 80096e0:	68bb      	ldr	r3, [r7, #8]
 80096e2:	685b      	ldr	r3, [r3, #4]
 80096e4:	3b01      	subs	r3, #1
 80096e6:	011b      	lsls	r3, r3, #4
 80096e8:	4319      	orrs	r1, r3
 80096ea:	68bb      	ldr	r3, [r7, #8]
 80096ec:	689b      	ldr	r3, [r3, #8]
 80096ee:	3b01      	subs	r3, #1
 80096f0:	021b      	lsls	r3, r3, #8
 80096f2:	4319      	orrs	r1, r3
 80096f4:	68bb      	ldr	r3, [r7, #8]
 80096f6:	68db      	ldr	r3, [r3, #12]
 80096f8:	3b01      	subs	r3, #1
 80096fa:	031b      	lsls	r3, r3, #12
 80096fc:	4319      	orrs	r1, r3
 80096fe:	68bb      	ldr	r3, [r7, #8]
 8009700:	691b      	ldr	r3, [r3, #16]
 8009702:	3b01      	subs	r3, #1
 8009704:	041b      	lsls	r3, r3, #16
 8009706:	4319      	orrs	r1, r3
 8009708:	68bb      	ldr	r3, [r7, #8]
 800970a:	695b      	ldr	r3, [r3, #20]
 800970c:	3b01      	subs	r3, #1
 800970e:	051b      	lsls	r3, r3, #20
 8009710:	4319      	orrs	r1, r3
 8009712:	68bb      	ldr	r3, [r7, #8]
 8009714:	699b      	ldr	r3, [r3, #24]
 8009716:	3b01      	subs	r3, #1
 8009718:	061b      	lsls	r3, r3, #24
 800971a:	430b      	orrs	r3, r1
 800971c:	431a      	orrs	r2, r3
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	609a      	str	r2, [r3, #8]
 8009722:	e02d      	b.n	8009780 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	689a      	ldr	r2, [r3, #8]
 8009728:	4b19      	ldr	r3, [pc, #100]	; (8009790 <FMC_SDRAM_Timing_Init+0xd0>)
 800972a:	4013      	ands	r3, r2
 800972c:	68ba      	ldr	r2, [r7, #8]
 800972e:	68d2      	ldr	r2, [r2, #12]
 8009730:	3a01      	subs	r2, #1
 8009732:	0311      	lsls	r1, r2, #12
 8009734:	68ba      	ldr	r2, [r7, #8]
 8009736:	6952      	ldr	r2, [r2, #20]
 8009738:	3a01      	subs	r2, #1
 800973a:	0512      	lsls	r2, r2, #20
 800973c:	430a      	orrs	r2, r1
 800973e:	431a      	orrs	r2, r3
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	68db      	ldr	r3, [r3, #12]
 8009748:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800974c:	68bb      	ldr	r3, [r7, #8]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	1e59      	subs	r1, r3, #1
 8009752:	68bb      	ldr	r3, [r7, #8]
 8009754:	685b      	ldr	r3, [r3, #4]
 8009756:	3b01      	subs	r3, #1
 8009758:	011b      	lsls	r3, r3, #4
 800975a:	4319      	orrs	r1, r3
 800975c:	68bb      	ldr	r3, [r7, #8]
 800975e:	689b      	ldr	r3, [r3, #8]
 8009760:	3b01      	subs	r3, #1
 8009762:	021b      	lsls	r3, r3, #8
 8009764:	4319      	orrs	r1, r3
 8009766:	68bb      	ldr	r3, [r7, #8]
 8009768:	691b      	ldr	r3, [r3, #16]
 800976a:	3b01      	subs	r3, #1
 800976c:	041b      	lsls	r3, r3, #16
 800976e:	4319      	orrs	r1, r3
 8009770:	68bb      	ldr	r3, [r7, #8]
 8009772:	699b      	ldr	r3, [r3, #24]
 8009774:	3b01      	subs	r3, #1
 8009776:	061b      	lsls	r3, r3, #24
 8009778:	430b      	orrs	r3, r1
 800977a:	431a      	orrs	r2, r3
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8009780:	2300      	movs	r3, #0
}
 8009782:	4618      	mov	r0, r3
 8009784:	3714      	adds	r7, #20
 8009786:	46bd      	mov	sp, r7
 8009788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978c:	4770      	bx	lr
 800978e:	bf00      	nop
 8009790:	ff0f0fff 	.word	0xff0f0fff

08009794 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8009794:	b480      	push	{r7}
 8009796:	b085      	sub	sp, #20
 8009798:	af00      	add	r7, sp, #0
 800979a:	60f8      	str	r0, [r7, #12]
 800979c:	60b9      	str	r1, [r7, #8]
 800979e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	691a      	ldr	r2, [r3, #16]
 80097a4:	4b0c      	ldr	r3, [pc, #48]	; (80097d8 <FMC_SDRAM_SendCommand+0x44>)
 80097a6:	4013      	ands	r3, r2
 80097a8:	68ba      	ldr	r2, [r7, #8]
 80097aa:	6811      	ldr	r1, [r2, #0]
 80097ac:	68ba      	ldr	r2, [r7, #8]
 80097ae:	6852      	ldr	r2, [r2, #4]
 80097b0:	4311      	orrs	r1, r2
 80097b2:	68ba      	ldr	r2, [r7, #8]
 80097b4:	6892      	ldr	r2, [r2, #8]
 80097b6:	3a01      	subs	r2, #1
 80097b8:	0152      	lsls	r2, r2, #5
 80097ba:	4311      	orrs	r1, r2
 80097bc:	68ba      	ldr	r2, [r7, #8]
 80097be:	68d2      	ldr	r2, [r2, #12]
 80097c0:	0252      	lsls	r2, r2, #9
 80097c2:	430a      	orrs	r2, r1
 80097c4:	431a      	orrs	r2, r3
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 80097ca:	2300      	movs	r3, #0
}
 80097cc:	4618      	mov	r0, r3
 80097ce:	3714      	adds	r7, #20
 80097d0:	46bd      	mov	sp, r7
 80097d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d6:	4770      	bx	lr
 80097d8:	ffc00000 	.word	0xffc00000

080097dc <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 80097dc:	b480      	push	{r7}
 80097de:	b083      	sub	sp, #12
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
 80097e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	695a      	ldr	r2, [r3, #20]
 80097ea:	4b07      	ldr	r3, [pc, #28]	; (8009808 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 80097ec:	4013      	ands	r3, r2
 80097ee:	683a      	ldr	r2, [r7, #0]
 80097f0:	0052      	lsls	r2, r2, #1
 80097f2:	431a      	orrs	r2, r3
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 80097f8:	2300      	movs	r3, #0
}
 80097fa:	4618      	mov	r0, r3
 80097fc:	370c      	adds	r7, #12
 80097fe:	46bd      	mov	sp, r7
 8009800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009804:	4770      	bx	lr
 8009806:	bf00      	nop
 8009808:	ffffc001 	.word	0xffffc001

0800980c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b084      	sub	sp, #16
 8009810:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8009812:	4b8d      	ldr	r3, [pc, #564]	; (8009a48 <MX_LWIP_Init+0x23c>)
 8009814:	22c0      	movs	r2, #192	; 0xc0
 8009816:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8009818:	4b8b      	ldr	r3, [pc, #556]	; (8009a48 <MX_LWIP_Init+0x23c>)
 800981a:	22a8      	movs	r2, #168	; 0xa8
 800981c:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 800981e:	4b8a      	ldr	r3, [pc, #552]	; (8009a48 <MX_LWIP_Init+0x23c>)
 8009820:	2200      	movs	r2, #0
 8009822:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 10;
 8009824:	4b88      	ldr	r3, [pc, #544]	; (8009a48 <MX_LWIP_Init+0x23c>)
 8009826:	220a      	movs	r2, #10
 8009828:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800982a:	4b88      	ldr	r3, [pc, #544]	; (8009a4c <MX_LWIP_Init+0x240>)
 800982c:	22ff      	movs	r2, #255	; 0xff
 800982e:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8009830:	4b86      	ldr	r3, [pc, #536]	; (8009a4c <MX_LWIP_Init+0x240>)
 8009832:	22ff      	movs	r2, #255	; 0xff
 8009834:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8009836:	4b85      	ldr	r3, [pc, #532]	; (8009a4c <MX_LWIP_Init+0x240>)
 8009838:	22ff      	movs	r2, #255	; 0xff
 800983a:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800983c:	4b83      	ldr	r3, [pc, #524]	; (8009a4c <MX_LWIP_Init+0x240>)
 800983e:	2200      	movs	r2, #0
 8009840:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 8009842:	4b83      	ldr	r3, [pc, #524]	; (8009a50 <MX_LWIP_Init+0x244>)
 8009844:	2200      	movs	r2, #0
 8009846:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 8009848:	4b81      	ldr	r3, [pc, #516]	; (8009a50 <MX_LWIP_Init+0x244>)
 800984a:	2200      	movs	r2, #0
 800984c:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 800984e:	4b80      	ldr	r3, [pc, #512]	; (8009a50 <MX_LWIP_Init+0x244>)
 8009850:	2200      	movs	r2, #0
 8009852:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 8009854:	4b7e      	ldr	r3, [pc, #504]	; (8009a50 <MX_LWIP_Init+0x244>)
 8009856:	2200      	movs	r2, #0
 8009858:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 800985a:	f000 fd1d 	bl	800a298 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800985e:	4b7a      	ldr	r3, [pc, #488]	; (8009a48 <MX_LWIP_Init+0x23c>)
 8009860:	781b      	ldrb	r3, [r3, #0]
 8009862:	061a      	lsls	r2, r3, #24
 8009864:	4b78      	ldr	r3, [pc, #480]	; (8009a48 <MX_LWIP_Init+0x23c>)
 8009866:	785b      	ldrb	r3, [r3, #1]
 8009868:	041b      	lsls	r3, r3, #16
 800986a:	431a      	orrs	r2, r3
 800986c:	4b76      	ldr	r3, [pc, #472]	; (8009a48 <MX_LWIP_Init+0x23c>)
 800986e:	789b      	ldrb	r3, [r3, #2]
 8009870:	021b      	lsls	r3, r3, #8
 8009872:	4313      	orrs	r3, r2
 8009874:	4a74      	ldr	r2, [pc, #464]	; (8009a48 <MX_LWIP_Init+0x23c>)
 8009876:	78d2      	ldrb	r2, [r2, #3]
 8009878:	4313      	orrs	r3, r2
 800987a:	061a      	lsls	r2, r3, #24
 800987c:	4b72      	ldr	r3, [pc, #456]	; (8009a48 <MX_LWIP_Init+0x23c>)
 800987e:	781b      	ldrb	r3, [r3, #0]
 8009880:	0619      	lsls	r1, r3, #24
 8009882:	4b71      	ldr	r3, [pc, #452]	; (8009a48 <MX_LWIP_Init+0x23c>)
 8009884:	785b      	ldrb	r3, [r3, #1]
 8009886:	041b      	lsls	r3, r3, #16
 8009888:	4319      	orrs	r1, r3
 800988a:	4b6f      	ldr	r3, [pc, #444]	; (8009a48 <MX_LWIP_Init+0x23c>)
 800988c:	789b      	ldrb	r3, [r3, #2]
 800988e:	021b      	lsls	r3, r3, #8
 8009890:	430b      	orrs	r3, r1
 8009892:	496d      	ldr	r1, [pc, #436]	; (8009a48 <MX_LWIP_Init+0x23c>)
 8009894:	78c9      	ldrb	r1, [r1, #3]
 8009896:	430b      	orrs	r3, r1
 8009898:	021b      	lsls	r3, r3, #8
 800989a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800989e:	431a      	orrs	r2, r3
 80098a0:	4b69      	ldr	r3, [pc, #420]	; (8009a48 <MX_LWIP_Init+0x23c>)
 80098a2:	781b      	ldrb	r3, [r3, #0]
 80098a4:	0619      	lsls	r1, r3, #24
 80098a6:	4b68      	ldr	r3, [pc, #416]	; (8009a48 <MX_LWIP_Init+0x23c>)
 80098a8:	785b      	ldrb	r3, [r3, #1]
 80098aa:	041b      	lsls	r3, r3, #16
 80098ac:	4319      	orrs	r1, r3
 80098ae:	4b66      	ldr	r3, [pc, #408]	; (8009a48 <MX_LWIP_Init+0x23c>)
 80098b0:	789b      	ldrb	r3, [r3, #2]
 80098b2:	021b      	lsls	r3, r3, #8
 80098b4:	430b      	orrs	r3, r1
 80098b6:	4964      	ldr	r1, [pc, #400]	; (8009a48 <MX_LWIP_Init+0x23c>)
 80098b8:	78c9      	ldrb	r1, [r1, #3]
 80098ba:	430b      	orrs	r3, r1
 80098bc:	0a1b      	lsrs	r3, r3, #8
 80098be:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80098c2:	431a      	orrs	r2, r3
 80098c4:	4b60      	ldr	r3, [pc, #384]	; (8009a48 <MX_LWIP_Init+0x23c>)
 80098c6:	781b      	ldrb	r3, [r3, #0]
 80098c8:	0619      	lsls	r1, r3, #24
 80098ca:	4b5f      	ldr	r3, [pc, #380]	; (8009a48 <MX_LWIP_Init+0x23c>)
 80098cc:	785b      	ldrb	r3, [r3, #1]
 80098ce:	041b      	lsls	r3, r3, #16
 80098d0:	4319      	orrs	r1, r3
 80098d2:	4b5d      	ldr	r3, [pc, #372]	; (8009a48 <MX_LWIP_Init+0x23c>)
 80098d4:	789b      	ldrb	r3, [r3, #2]
 80098d6:	021b      	lsls	r3, r3, #8
 80098d8:	430b      	orrs	r3, r1
 80098da:	495b      	ldr	r1, [pc, #364]	; (8009a48 <MX_LWIP_Init+0x23c>)
 80098dc:	78c9      	ldrb	r1, [r1, #3]
 80098de:	430b      	orrs	r3, r1
 80098e0:	0e1b      	lsrs	r3, r3, #24
 80098e2:	4313      	orrs	r3, r2
 80098e4:	4a5b      	ldr	r2, [pc, #364]	; (8009a54 <MX_LWIP_Init+0x248>)
 80098e6:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80098e8:	4b58      	ldr	r3, [pc, #352]	; (8009a4c <MX_LWIP_Init+0x240>)
 80098ea:	781b      	ldrb	r3, [r3, #0]
 80098ec:	061a      	lsls	r2, r3, #24
 80098ee:	4b57      	ldr	r3, [pc, #348]	; (8009a4c <MX_LWIP_Init+0x240>)
 80098f0:	785b      	ldrb	r3, [r3, #1]
 80098f2:	041b      	lsls	r3, r3, #16
 80098f4:	431a      	orrs	r2, r3
 80098f6:	4b55      	ldr	r3, [pc, #340]	; (8009a4c <MX_LWIP_Init+0x240>)
 80098f8:	789b      	ldrb	r3, [r3, #2]
 80098fa:	021b      	lsls	r3, r3, #8
 80098fc:	4313      	orrs	r3, r2
 80098fe:	4a53      	ldr	r2, [pc, #332]	; (8009a4c <MX_LWIP_Init+0x240>)
 8009900:	78d2      	ldrb	r2, [r2, #3]
 8009902:	4313      	orrs	r3, r2
 8009904:	061a      	lsls	r2, r3, #24
 8009906:	4b51      	ldr	r3, [pc, #324]	; (8009a4c <MX_LWIP_Init+0x240>)
 8009908:	781b      	ldrb	r3, [r3, #0]
 800990a:	0619      	lsls	r1, r3, #24
 800990c:	4b4f      	ldr	r3, [pc, #316]	; (8009a4c <MX_LWIP_Init+0x240>)
 800990e:	785b      	ldrb	r3, [r3, #1]
 8009910:	041b      	lsls	r3, r3, #16
 8009912:	4319      	orrs	r1, r3
 8009914:	4b4d      	ldr	r3, [pc, #308]	; (8009a4c <MX_LWIP_Init+0x240>)
 8009916:	789b      	ldrb	r3, [r3, #2]
 8009918:	021b      	lsls	r3, r3, #8
 800991a:	430b      	orrs	r3, r1
 800991c:	494b      	ldr	r1, [pc, #300]	; (8009a4c <MX_LWIP_Init+0x240>)
 800991e:	78c9      	ldrb	r1, [r1, #3]
 8009920:	430b      	orrs	r3, r1
 8009922:	021b      	lsls	r3, r3, #8
 8009924:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009928:	431a      	orrs	r2, r3
 800992a:	4b48      	ldr	r3, [pc, #288]	; (8009a4c <MX_LWIP_Init+0x240>)
 800992c:	781b      	ldrb	r3, [r3, #0]
 800992e:	0619      	lsls	r1, r3, #24
 8009930:	4b46      	ldr	r3, [pc, #280]	; (8009a4c <MX_LWIP_Init+0x240>)
 8009932:	785b      	ldrb	r3, [r3, #1]
 8009934:	041b      	lsls	r3, r3, #16
 8009936:	4319      	orrs	r1, r3
 8009938:	4b44      	ldr	r3, [pc, #272]	; (8009a4c <MX_LWIP_Init+0x240>)
 800993a:	789b      	ldrb	r3, [r3, #2]
 800993c:	021b      	lsls	r3, r3, #8
 800993e:	430b      	orrs	r3, r1
 8009940:	4942      	ldr	r1, [pc, #264]	; (8009a4c <MX_LWIP_Init+0x240>)
 8009942:	78c9      	ldrb	r1, [r1, #3]
 8009944:	430b      	orrs	r3, r1
 8009946:	0a1b      	lsrs	r3, r3, #8
 8009948:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800994c:	431a      	orrs	r2, r3
 800994e:	4b3f      	ldr	r3, [pc, #252]	; (8009a4c <MX_LWIP_Init+0x240>)
 8009950:	781b      	ldrb	r3, [r3, #0]
 8009952:	0619      	lsls	r1, r3, #24
 8009954:	4b3d      	ldr	r3, [pc, #244]	; (8009a4c <MX_LWIP_Init+0x240>)
 8009956:	785b      	ldrb	r3, [r3, #1]
 8009958:	041b      	lsls	r3, r3, #16
 800995a:	4319      	orrs	r1, r3
 800995c:	4b3b      	ldr	r3, [pc, #236]	; (8009a4c <MX_LWIP_Init+0x240>)
 800995e:	789b      	ldrb	r3, [r3, #2]
 8009960:	021b      	lsls	r3, r3, #8
 8009962:	430b      	orrs	r3, r1
 8009964:	4939      	ldr	r1, [pc, #228]	; (8009a4c <MX_LWIP_Init+0x240>)
 8009966:	78c9      	ldrb	r1, [r1, #3]
 8009968:	430b      	orrs	r3, r1
 800996a:	0e1b      	lsrs	r3, r3, #24
 800996c:	4313      	orrs	r3, r2
 800996e:	4a3a      	ldr	r2, [pc, #232]	; (8009a58 <MX_LWIP_Init+0x24c>)
 8009970:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8009972:	4b37      	ldr	r3, [pc, #220]	; (8009a50 <MX_LWIP_Init+0x244>)
 8009974:	781b      	ldrb	r3, [r3, #0]
 8009976:	061a      	lsls	r2, r3, #24
 8009978:	4b35      	ldr	r3, [pc, #212]	; (8009a50 <MX_LWIP_Init+0x244>)
 800997a:	785b      	ldrb	r3, [r3, #1]
 800997c:	041b      	lsls	r3, r3, #16
 800997e:	431a      	orrs	r2, r3
 8009980:	4b33      	ldr	r3, [pc, #204]	; (8009a50 <MX_LWIP_Init+0x244>)
 8009982:	789b      	ldrb	r3, [r3, #2]
 8009984:	021b      	lsls	r3, r3, #8
 8009986:	4313      	orrs	r3, r2
 8009988:	4a31      	ldr	r2, [pc, #196]	; (8009a50 <MX_LWIP_Init+0x244>)
 800998a:	78d2      	ldrb	r2, [r2, #3]
 800998c:	4313      	orrs	r3, r2
 800998e:	061a      	lsls	r2, r3, #24
 8009990:	4b2f      	ldr	r3, [pc, #188]	; (8009a50 <MX_LWIP_Init+0x244>)
 8009992:	781b      	ldrb	r3, [r3, #0]
 8009994:	0619      	lsls	r1, r3, #24
 8009996:	4b2e      	ldr	r3, [pc, #184]	; (8009a50 <MX_LWIP_Init+0x244>)
 8009998:	785b      	ldrb	r3, [r3, #1]
 800999a:	041b      	lsls	r3, r3, #16
 800999c:	4319      	orrs	r1, r3
 800999e:	4b2c      	ldr	r3, [pc, #176]	; (8009a50 <MX_LWIP_Init+0x244>)
 80099a0:	789b      	ldrb	r3, [r3, #2]
 80099a2:	021b      	lsls	r3, r3, #8
 80099a4:	430b      	orrs	r3, r1
 80099a6:	492a      	ldr	r1, [pc, #168]	; (8009a50 <MX_LWIP_Init+0x244>)
 80099a8:	78c9      	ldrb	r1, [r1, #3]
 80099aa:	430b      	orrs	r3, r1
 80099ac:	021b      	lsls	r3, r3, #8
 80099ae:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80099b2:	431a      	orrs	r2, r3
 80099b4:	4b26      	ldr	r3, [pc, #152]	; (8009a50 <MX_LWIP_Init+0x244>)
 80099b6:	781b      	ldrb	r3, [r3, #0]
 80099b8:	0619      	lsls	r1, r3, #24
 80099ba:	4b25      	ldr	r3, [pc, #148]	; (8009a50 <MX_LWIP_Init+0x244>)
 80099bc:	785b      	ldrb	r3, [r3, #1]
 80099be:	041b      	lsls	r3, r3, #16
 80099c0:	4319      	orrs	r1, r3
 80099c2:	4b23      	ldr	r3, [pc, #140]	; (8009a50 <MX_LWIP_Init+0x244>)
 80099c4:	789b      	ldrb	r3, [r3, #2]
 80099c6:	021b      	lsls	r3, r3, #8
 80099c8:	430b      	orrs	r3, r1
 80099ca:	4921      	ldr	r1, [pc, #132]	; (8009a50 <MX_LWIP_Init+0x244>)
 80099cc:	78c9      	ldrb	r1, [r1, #3]
 80099ce:	430b      	orrs	r3, r1
 80099d0:	0a1b      	lsrs	r3, r3, #8
 80099d2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80099d6:	431a      	orrs	r2, r3
 80099d8:	4b1d      	ldr	r3, [pc, #116]	; (8009a50 <MX_LWIP_Init+0x244>)
 80099da:	781b      	ldrb	r3, [r3, #0]
 80099dc:	0619      	lsls	r1, r3, #24
 80099de:	4b1c      	ldr	r3, [pc, #112]	; (8009a50 <MX_LWIP_Init+0x244>)
 80099e0:	785b      	ldrb	r3, [r3, #1]
 80099e2:	041b      	lsls	r3, r3, #16
 80099e4:	4319      	orrs	r1, r3
 80099e6:	4b1a      	ldr	r3, [pc, #104]	; (8009a50 <MX_LWIP_Init+0x244>)
 80099e8:	789b      	ldrb	r3, [r3, #2]
 80099ea:	021b      	lsls	r3, r3, #8
 80099ec:	430b      	orrs	r3, r1
 80099ee:	4918      	ldr	r1, [pc, #96]	; (8009a50 <MX_LWIP_Init+0x244>)
 80099f0:	78c9      	ldrb	r1, [r1, #3]
 80099f2:	430b      	orrs	r3, r1
 80099f4:	0e1b      	lsrs	r3, r3, #24
 80099f6:	4313      	orrs	r3, r2
 80099f8:	4a18      	ldr	r2, [pc, #96]	; (8009a5c <MX_LWIP_Init+0x250>)
 80099fa:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 80099fc:	4b18      	ldr	r3, [pc, #96]	; (8009a60 <MX_LWIP_Init+0x254>)
 80099fe:	9302      	str	r3, [sp, #8]
 8009a00:	4b18      	ldr	r3, [pc, #96]	; (8009a64 <MX_LWIP_Init+0x258>)
 8009a02:	9301      	str	r3, [sp, #4]
 8009a04:	2300      	movs	r3, #0
 8009a06:	9300      	str	r3, [sp, #0]
 8009a08:	4b14      	ldr	r3, [pc, #80]	; (8009a5c <MX_LWIP_Init+0x250>)
 8009a0a:	4a13      	ldr	r2, [pc, #76]	; (8009a58 <MX_LWIP_Init+0x24c>)
 8009a0c:	4911      	ldr	r1, [pc, #68]	; (8009a54 <MX_LWIP_Init+0x248>)
 8009a0e:	4816      	ldr	r0, [pc, #88]	; (8009a68 <MX_LWIP_Init+0x25c>)
 8009a10:	f001 f92e 	bl	800ac70 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8009a14:	4814      	ldr	r0, [pc, #80]	; (8009a68 <MX_LWIP_Init+0x25c>)
 8009a16:	f001 fadd 	bl	800afd4 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8009a1a:	4b13      	ldr	r3, [pc, #76]	; (8009a68 <MX_LWIP_Init+0x25c>)
 8009a1c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009a20:	089b      	lsrs	r3, r3, #2
 8009a22:	f003 0301 	and.w	r3, r3, #1
 8009a26:	b2db      	uxtb	r3, r3
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d003      	beq.n	8009a34 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8009a2c:	480e      	ldr	r0, [pc, #56]	; (8009a68 <MX_LWIP_Init+0x25c>)
 8009a2e:	f001 fae1 	bl	800aff4 <netif_set_up>
 8009a32:	e002      	b.n	8009a3a <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8009a34:	480c      	ldr	r0, [pc, #48]	; (8009a68 <MX_LWIP_Init+0x25c>)
 8009a36:	f001 fb49 	bl	800b0cc <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8009a3a:	490c      	ldr	r1, [pc, #48]	; (8009a6c <MX_LWIP_Init+0x260>)
 8009a3c:	480a      	ldr	r0, [pc, #40]	; (8009a68 <MX_LWIP_Init+0x25c>)
 8009a3e:	f001 fbdb 	bl	800b1f8 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8009a42:	bf00      	nop
 8009a44:	46bd      	mov	sp, r7
 8009a46:	bd80      	pop	{r7, pc}
 8009a48:	20000b94 	.word	0x20000b94
 8009a4c:	20000b98 	.word	0x20000b98
 8009a50:	20000b9c 	.word	0x20000b9c
 8009a54:	20000b88 	.word	0x20000b88
 8009a58:	20000b8c 	.word	0x20000b8c
 8009a5c:	20000b90 	.word	0x20000b90
 8009a60:	080148a5 	.word	0x080148a5
 8009a64:	08009dd5 	.word	0x08009dd5
 8009a68:	20000b54 	.word	0x20000b54
 8009a6c:	08009ac1 	.word	0x08009ac1

08009a70 <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b082      	sub	sp, #8
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 8009a78:	f7fa f812 	bl	8003aa0 <HAL_GetTick>
 8009a7c:	4602      	mov	r2, r0
 8009a7e:	4b08      	ldr	r3, [pc, #32]	; (8009aa0 <Ethernet_Link_Periodic_Handle+0x30>)
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	1ad3      	subs	r3, r2, r3
 8009a84:	2b63      	cmp	r3, #99	; 0x63
 8009a86:	d907      	bls.n	8009a98 <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 8009a88:	f7fa f80a 	bl	8003aa0 <HAL_GetTick>
 8009a8c:	4603      	mov	r3, r0
 8009a8e:	4a04      	ldr	r2, [pc, #16]	; (8009aa0 <Ethernet_Link_Periodic_Handle+0x30>)
 8009a90:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 8009a92:	6878      	ldr	r0, [r7, #4]
 8009a94:	f000 fad4 	bl	800a040 <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 8009a98:	bf00      	nop
 8009a9a:	3708      	adds	r7, #8
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	bd80      	pop	{r7, pc}
 8009aa0:	20000b50 	.word	0x20000b50

08009aa4 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8009aa8:	4804      	ldr	r0, [pc, #16]	; (8009abc <MX_LWIP_Process+0x18>)
 8009aaa:	f000 f973 	bl	8009d94 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 8009aae:	f008 fb0d 	bl	80120cc <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 8009ab2:	4802      	ldr	r0, [pc, #8]	; (8009abc <MX_LWIP_Process+0x18>)
 8009ab4:	f7ff ffdc 	bl	8009a70 <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8009ab8:	bf00      	nop
 8009aba:	bd80      	pop	{r7, pc}
 8009abc:	20000b54 	.word	0x20000b54

08009ac0 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8009ac0:	b480      	push	{r7}
 8009ac2:	b083      	sub	sp, #12
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8009ac8:	bf00      	nop
 8009aca:	370c      	adds	r7, #12
 8009acc:	46bd      	mov	sp, r7
 8009ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad2:	4770      	bx	lr

08009ad4 <SCB_InvalidateDCache_by_Addr>:
{
 8009ad4:	b480      	push	{r7}
 8009ad6:	b087      	sub	sp, #28
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
 8009adc:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 8009ade:	683b      	ldr	r3, [r7, #0]
 8009ae0:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8009ae6:	2320      	movs	r3, #32
 8009ae8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8009aea:	f3bf 8f4f 	dsb	sy
}
 8009aee:	bf00      	nop
    while (op_size > 0) {
 8009af0:	e00b      	b.n	8009b0a <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 8009af2:	4a0d      	ldr	r2, [pc, #52]	; (8009b28 <SCB_InvalidateDCache_by_Addr+0x54>)
 8009af4:	693b      	ldr	r3, [r7, #16]
 8009af6:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	693a      	ldr	r2, [r7, #16]
 8009afe:	4413      	add	r3, r2
 8009b00:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8009b02:	697a      	ldr	r2, [r7, #20]
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	1ad3      	subs	r3, r2, r3
 8009b08:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8009b0a:	697b      	ldr	r3, [r7, #20]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	dcf0      	bgt.n	8009af2 <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8009b10:	f3bf 8f4f 	dsb	sy
}
 8009b14:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8009b16:	f3bf 8f6f 	isb	sy
}
 8009b1a:	bf00      	nop
}
 8009b1c:	bf00      	nop
 8009b1e:	371c      	adds	r7, #28
 8009b20:	46bd      	mov	sp, r7
 8009b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b26:	4770      	bx	lr
 8009b28:	e000ed00 	.word	0xe000ed00

08009b2c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b084      	sub	sp, #16
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8009b34:	2300      	movs	r3, #0
 8009b36:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8009b38:	4b40      	ldr	r3, [pc, #256]	; (8009c3c <low_level_init+0x110>)
 8009b3a:	4a41      	ldr	r2, [pc, #260]	; (8009c40 <low_level_init+0x114>)
 8009b3c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8009b3e:	2300      	movs	r3, #0
 8009b40:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8009b42:	2380      	movs	r3, #128	; 0x80
 8009b44:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8009b46:	23e1      	movs	r3, #225	; 0xe1
 8009b48:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8009b4e:	2300      	movs	r3, #0
 8009b50:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x44;
 8009b52:	2344      	movs	r3, #68	; 0x44
 8009b54:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8009b56:	4a39      	ldr	r2, [pc, #228]	; (8009c3c <low_level_init+0x110>)
 8009b58:	f107 0308 	add.w	r3, r7, #8
 8009b5c:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8009b5e:	4b37      	ldr	r3, [pc, #220]	; (8009c3c <low_level_init+0x110>)
 8009b60:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8009b64:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8009b66:	4b35      	ldr	r3, [pc, #212]	; (8009c3c <low_level_init+0x110>)
 8009b68:	4a36      	ldr	r2, [pc, #216]	; (8009c44 <low_level_init+0x118>)
 8009b6a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8009b6c:	4b33      	ldr	r3, [pc, #204]	; (8009c3c <low_level_init+0x110>)
 8009b6e:	4a36      	ldr	r2, [pc, #216]	; (8009c48 <low_level_init+0x11c>)
 8009b70:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8009b72:	4b32      	ldr	r3, [pc, #200]	; (8009c3c <low_level_init+0x110>)
 8009b74:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8009b78:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8009b7a:	4830      	ldr	r0, [pc, #192]	; (8009c3c <low_level_init+0x110>)
 8009b7c:	f7fa fd8c 	bl	8004698 <HAL_ETH_Init>
 8009b80:	4603      	mov	r3, r0
 8009b82:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8009b84:	2238      	movs	r2, #56	; 0x38
 8009b86:	2100      	movs	r1, #0
 8009b88:	4830      	ldr	r0, [pc, #192]	; (8009c4c <low_level_init+0x120>)
 8009b8a:	f00a ffbd 	bl	8014b08 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8009b8e:	4b2f      	ldr	r3, [pc, #188]	; (8009c4c <low_level_init+0x120>)
 8009b90:	2221      	movs	r2, #33	; 0x21
 8009b92:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8009b94:	4b2d      	ldr	r3, [pc, #180]	; (8009c4c <low_level_init+0x120>)
 8009b96:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8009b9a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8009b9c:	4b2b      	ldr	r3, [pc, #172]	; (8009c4c <low_level_init+0x120>)
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8009ba2:	482b      	ldr	r0, [pc, #172]	; (8009c50 <low_level_init+0x124>)
 8009ba4:	f000 ff2c 	bl	800aa00 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	2206      	movs	r2, #6
 8009bac:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8009bb0:	4b22      	ldr	r3, [pc, #136]	; (8009c3c <low_level_init+0x110>)
 8009bb2:	685b      	ldr	r3, [r3, #4]
 8009bb4:	781a      	ldrb	r2, [r3, #0]
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8009bbc:	4b1f      	ldr	r3, [pc, #124]	; (8009c3c <low_level_init+0x110>)
 8009bbe:	685b      	ldr	r3, [r3, #4]
 8009bc0:	785a      	ldrb	r2, [r3, #1]
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8009bc8:	4b1c      	ldr	r3, [pc, #112]	; (8009c3c <low_level_init+0x110>)
 8009bca:	685b      	ldr	r3, [r3, #4]
 8009bcc:	789a      	ldrb	r2, [r3, #2]
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8009bd4:	4b19      	ldr	r3, [pc, #100]	; (8009c3c <low_level_init+0x110>)
 8009bd6:	685b      	ldr	r3, [r3, #4]
 8009bd8:	78da      	ldrb	r2, [r3, #3]
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8009be0:	4b16      	ldr	r3, [pc, #88]	; (8009c3c <low_level_init+0x110>)
 8009be2:	685b      	ldr	r3, [r3, #4]
 8009be4:	791a      	ldrb	r2, [r3, #4]
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8009bec:	4b13      	ldr	r3, [pc, #76]	; (8009c3c <low_level_init+0x110>)
 8009bee:	685b      	ldr	r3, [r3, #4]
 8009bf0:	795a      	ldrb	r2, [r3, #5]
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8009bfe:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009c06:	f043 030a 	orr.w	r3, r3, #10
 8009c0a:	b2da      	uxtb	r2, r3
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8009c12:	4910      	ldr	r1, [pc, #64]	; (8009c54 <low_level_init+0x128>)
 8009c14:	4810      	ldr	r0, [pc, #64]	; (8009c58 <low_level_init+0x12c>)
 8009c16:	f7f7 fd68 	bl	80016ea <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8009c1a:	480f      	ldr	r0, [pc, #60]	; (8009c58 <low_level_init+0x12c>)
 8009c1c:	f7f7 fd97 	bl	800174e <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8009c20:	7bfb      	ldrb	r3, [r7, #15]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d103      	bne.n	8009c2e <low_level_init+0x102>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 8009c26:	6878      	ldr	r0, [r7, #4]
 8009c28:	f000 fa0a 	bl	800a040 <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8009c2c:	e001      	b.n	8009c32 <low_level_init+0x106>
    Error_Handler();
 8009c2e:	f7f7 f957 	bl	8000ee0 <Error_Handler>
}
 8009c32:	bf00      	nop
 8009c34:	3710      	adds	r7, #16
 8009c36:	46bd      	mov	sp, r7
 8009c38:	bd80      	pop	{r7, pc}
 8009c3a:	bf00      	nop
 8009c3c:	2000552c 	.word	0x2000552c
 8009c40:	40028000 	.word	0x40028000
 8009c44:	20000170 	.word	0x20000170
 8009c48:	200000d0 	.word	0x200000d0
 8009c4c:	200055dc 	.word	0x200055dc
 8009c50:	0801aa50 	.word	0x0801aa50
 8009c54:	2000004c 	.word	0x2000004c
 8009c58:	20005614 	.word	0x20005614

08009c5c <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	b092      	sub	sp, #72	; 0x48
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]
 8009c64:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8009c66:	2300      	movs	r3, #0
 8009c68:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8009c6e:	2300      	movs	r3, #0
 8009c70:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8009c74:	f107 030c 	add.w	r3, r7, #12
 8009c78:	2230      	movs	r2, #48	; 0x30
 8009c7a:	2100      	movs	r1, #0
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	f00a ff43 	bl	8014b08 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8009c82:	f107 030c 	add.w	r3, r7, #12
 8009c86:	2230      	movs	r2, #48	; 0x30
 8009c88:	2100      	movs	r1, #0
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	f00a ff3c 	bl	8014b08 <memset>

  for(q = p; q != NULL; q = q->next)
 8009c90:	683b      	ldr	r3, [r7, #0]
 8009c92:	643b      	str	r3, [r7, #64]	; 0x40
 8009c94:	e045      	b.n	8009d22 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8009c96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009c98:	2b03      	cmp	r3, #3
 8009c9a:	d902      	bls.n	8009ca2 <low_level_output+0x46>
      return ERR_IF;
 8009c9c:	f06f 030b 	mvn.w	r3, #11
 8009ca0:	e055      	b.n	8009d4e <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 8009ca2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ca4:	6859      	ldr	r1, [r3, #4]
 8009ca6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009ca8:	4613      	mov	r3, r2
 8009caa:	005b      	lsls	r3, r3, #1
 8009cac:	4413      	add	r3, r2
 8009cae:	009b      	lsls	r3, r3, #2
 8009cb0:	3348      	adds	r3, #72	; 0x48
 8009cb2:	443b      	add	r3, r7
 8009cb4:	3b3c      	subs	r3, #60	; 0x3c
 8009cb6:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8009cb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009cba:	895b      	ldrh	r3, [r3, #10]
 8009cbc:	4619      	mov	r1, r3
 8009cbe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009cc0:	4613      	mov	r3, r2
 8009cc2:	005b      	lsls	r3, r3, #1
 8009cc4:	4413      	add	r3, r2
 8009cc6:	009b      	lsls	r3, r3, #2
 8009cc8:	3348      	adds	r3, #72	; 0x48
 8009cca:	443b      	add	r3, r7
 8009ccc:	3b38      	subs	r3, #56	; 0x38
 8009cce:	6019      	str	r1, [r3, #0]

    if(i>0)
 8009cd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d011      	beq.n	8009cfa <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8009cd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009cd8:	1e5a      	subs	r2, r3, #1
 8009cda:	f107 000c 	add.w	r0, r7, #12
 8009cde:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009ce0:	460b      	mov	r3, r1
 8009ce2:	005b      	lsls	r3, r3, #1
 8009ce4:	440b      	add	r3, r1
 8009ce6:	009b      	lsls	r3, r3, #2
 8009ce8:	18c1      	adds	r1, r0, r3
 8009cea:	4613      	mov	r3, r2
 8009cec:	005b      	lsls	r3, r3, #1
 8009cee:	4413      	add	r3, r2
 8009cf0:	009b      	lsls	r3, r3, #2
 8009cf2:	3348      	adds	r3, #72	; 0x48
 8009cf4:	443b      	add	r3, r7
 8009cf6:	3b34      	subs	r3, #52	; 0x34
 8009cf8:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8009cfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d109      	bne.n	8009d16 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8009d02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009d04:	4613      	mov	r3, r2
 8009d06:	005b      	lsls	r3, r3, #1
 8009d08:	4413      	add	r3, r2
 8009d0a:	009b      	lsls	r3, r3, #2
 8009d0c:	3348      	adds	r3, #72	; 0x48
 8009d0e:	443b      	add	r3, r7
 8009d10:	3b34      	subs	r3, #52	; 0x34
 8009d12:	2200      	movs	r2, #0
 8009d14:	601a      	str	r2, [r3, #0]
    }

    i++;
 8009d16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009d18:	3301      	adds	r3, #1
 8009d1a:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8009d1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	643b      	str	r3, [r7, #64]	; 0x40
 8009d22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d1b6      	bne.n	8009c96 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8009d28:	683b      	ldr	r3, [r7, #0]
 8009d2a:	891b      	ldrh	r3, [r3, #8]
 8009d2c:	461a      	mov	r2, r3
 8009d2e:	4b0a      	ldr	r3, [pc, #40]	; (8009d58 <low_level_output+0xfc>)
 8009d30:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8009d32:	4a09      	ldr	r2, [pc, #36]	; (8009d58 <low_level_output+0xfc>)
 8009d34:	f107 030c 	add.w	r3, r7, #12
 8009d38:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8009d3a:	4a07      	ldr	r2, [pc, #28]	; (8009d58 <low_level_output+0xfc>)
 8009d3c:	683b      	ldr	r3, [r7, #0]
 8009d3e:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8009d40:	2214      	movs	r2, #20
 8009d42:	4905      	ldr	r1, [pc, #20]	; (8009d58 <low_level_output+0xfc>)
 8009d44:	4805      	ldr	r0, [pc, #20]	; (8009d5c <low_level_output+0x100>)
 8009d46:	f7fa fddb 	bl	8004900 <HAL_ETH_Transmit>

  return errval;
 8009d4a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8009d4e:	4618      	mov	r0, r3
 8009d50:	3748      	adds	r7, #72	; 0x48
 8009d52:	46bd      	mov	sp, r7
 8009d54:	bd80      	pop	{r7, pc}
 8009d56:	bf00      	nop
 8009d58:	200055dc 	.word	0x200055dc
 8009d5c:	2000552c 	.word	0x2000552c

08009d60 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8009d60:	b580      	push	{r7, lr}
 8009d62:	b084      	sub	sp, #16
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8009d68:	2300      	movs	r3, #0
 8009d6a:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8009d6c:	4b07      	ldr	r3, [pc, #28]	; (8009d8c <low_level_input+0x2c>)
 8009d6e:	781b      	ldrb	r3, [r3, #0]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d105      	bne.n	8009d80 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8009d74:	f107 030c 	add.w	r3, r7, #12
 8009d78:	4619      	mov	r1, r3
 8009d7a:	4805      	ldr	r0, [pc, #20]	; (8009d90 <low_level_input+0x30>)
 8009d7c:	f7fa fe54 	bl	8004a28 <HAL_ETH_ReadData>
  }

  return p;
 8009d80:	68fb      	ldr	r3, [r7, #12]
}
 8009d82:	4618      	mov	r0, r3
 8009d84:	3710      	adds	r7, #16
 8009d86:	46bd      	mov	sp, r7
 8009d88:	bd80      	pop	{r7, pc}
 8009d8a:	bf00      	nop
 8009d8c:	20005528 	.word	0x20005528
 8009d90:	2000552c 	.word	0x2000552c

08009d94 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8009d94:	b580      	push	{r7, lr}
 8009d96:	b084      	sub	sp, #16
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 8009da0:	6878      	ldr	r0, [r7, #4]
 8009da2:	f7ff ffdd 	bl	8009d60 <low_level_input>
 8009da6:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d00a      	beq.n	8009dc4 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	691b      	ldr	r3, [r3, #16]
 8009db2:	6879      	ldr	r1, [r7, #4]
 8009db4:	68f8      	ldr	r0, [r7, #12]
 8009db6:	4798      	blx	r3
 8009db8:	4603      	mov	r3, r0
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d002      	beq.n	8009dc4 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 8009dbe:	68f8      	ldr	r0, [r7, #12]
 8009dc0:	f001 fd9a 	bl	800b8f8 <pbuf_free>
      }
    }
  } while(p!=NULL);
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d1ea      	bne.n	8009da0 <ethernetif_input+0xc>
}
 8009dca:	bf00      	nop
 8009dcc:	bf00      	nop
 8009dce:	3710      	adds	r7, #16
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	bd80      	pop	{r7, pc}

08009dd4 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b082      	sub	sp, #8
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d106      	bne.n	8009df0 <ethernetif_init+0x1c>
 8009de2:	4b0e      	ldr	r3, [pc, #56]	; (8009e1c <ethernetif_init+0x48>)
 8009de4:	f240 127b 	movw	r2, #379	; 0x17b
 8009de8:	490d      	ldr	r1, [pc, #52]	; (8009e20 <ethernetif_init+0x4c>)
 8009dea:	480e      	ldr	r0, [pc, #56]	; (8009e24 <ethernetif_init+0x50>)
 8009dec:	f00a fe94 	bl	8014b18 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	2273      	movs	r2, #115	; 0x73
 8009df4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	2274      	movs	r2, #116	; 0x74
 8009dfc:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	4a09      	ldr	r2, [pc, #36]	; (8009e28 <ethernetif_init+0x54>)
 8009e04:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	4a08      	ldr	r2, [pc, #32]	; (8009e2c <ethernetif_init+0x58>)
 8009e0a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8009e0c:	6878      	ldr	r0, [r7, #4]
 8009e0e:	f7ff fe8d 	bl	8009b2c <low_level_init>

  return ERR_OK;
 8009e12:	2300      	movs	r3, #0
}
 8009e14:	4618      	mov	r0, r3
 8009e16:	3708      	adds	r7, #8
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	bd80      	pop	{r7, pc}
 8009e1c:	08016124 	.word	0x08016124
 8009e20:	08016140 	.word	0x08016140
 8009e24:	08016150 	.word	0x08016150
 8009e28:	08012d5d 	.word	0x08012d5d
 8009e2c:	08009c5d 	.word	0x08009c5d

08009e30 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8009e30:	b580      	push	{r7, lr}
 8009e32:	b084      	sub	sp, #16
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8009e3c:	68f9      	ldr	r1, [r7, #12]
 8009e3e:	4807      	ldr	r0, [pc, #28]	; (8009e5c <pbuf_free_custom+0x2c>)
 8009e40:	f000 fec0 	bl	800abc4 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8009e44:	4b06      	ldr	r3, [pc, #24]	; (8009e60 <pbuf_free_custom+0x30>)
 8009e46:	781b      	ldrb	r3, [r3, #0]
 8009e48:	2b01      	cmp	r3, #1
 8009e4a:	d102      	bne.n	8009e52 <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8009e4c:	4b04      	ldr	r3, [pc, #16]	; (8009e60 <pbuf_free_custom+0x30>)
 8009e4e:	2200      	movs	r2, #0
 8009e50:	701a      	strb	r2, [r3, #0]
  }
}
 8009e52:	bf00      	nop
 8009e54:	3710      	adds	r7, #16
 8009e56:	46bd      	mov	sp, r7
 8009e58:	bd80      	pop	{r7, pc}
 8009e5a:	bf00      	nop
 8009e5c:	0801aa50 	.word	0x0801aa50
 8009e60:	20005528 	.word	0x20005528

08009e64 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8009e64:	b580      	push	{r7, lr}
 8009e66:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8009e68:	f7f9 fe1a 	bl	8003aa0 <HAL_GetTick>
 8009e6c:	4603      	mov	r3, r0
}
 8009e6e:	4618      	mov	r0, r3
 8009e70:	bd80      	pop	{r7, pc}
	...

08009e74 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8009e74:	b580      	push	{r7, lr}
 8009e76:	b08e      	sub	sp, #56	; 0x38
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009e7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009e80:	2200      	movs	r2, #0
 8009e82:	601a      	str	r2, [r3, #0]
 8009e84:	605a      	str	r2, [r3, #4]
 8009e86:	609a      	str	r2, [r3, #8]
 8009e88:	60da      	str	r2, [r3, #12]
 8009e8a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	4a3f      	ldr	r2, [pc, #252]	; (8009f90 <HAL_ETH_MspInit+0x11c>)
 8009e92:	4293      	cmp	r3, r2
 8009e94:	d178      	bne.n	8009f88 <HAL_ETH_MspInit+0x114>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8009e96:	4b3f      	ldr	r3, [pc, #252]	; (8009f94 <HAL_ETH_MspInit+0x120>)
 8009e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e9a:	4a3e      	ldr	r2, [pc, #248]	; (8009f94 <HAL_ETH_MspInit+0x120>)
 8009e9c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009ea0:	6313      	str	r3, [r2, #48]	; 0x30
 8009ea2:	4b3c      	ldr	r3, [pc, #240]	; (8009f94 <HAL_ETH_MspInit+0x120>)
 8009ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ea6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009eaa:	623b      	str	r3, [r7, #32]
 8009eac:	6a3b      	ldr	r3, [r7, #32]
 8009eae:	4b39      	ldr	r3, [pc, #228]	; (8009f94 <HAL_ETH_MspInit+0x120>)
 8009eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009eb2:	4a38      	ldr	r2, [pc, #224]	; (8009f94 <HAL_ETH_MspInit+0x120>)
 8009eb4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009eb8:	6313      	str	r3, [r2, #48]	; 0x30
 8009eba:	4b36      	ldr	r3, [pc, #216]	; (8009f94 <HAL_ETH_MspInit+0x120>)
 8009ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ebe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009ec2:	61fb      	str	r3, [r7, #28]
 8009ec4:	69fb      	ldr	r3, [r7, #28]
 8009ec6:	4b33      	ldr	r3, [pc, #204]	; (8009f94 <HAL_ETH_MspInit+0x120>)
 8009ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009eca:	4a32      	ldr	r2, [pc, #200]	; (8009f94 <HAL_ETH_MspInit+0x120>)
 8009ecc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8009ed2:	4b30      	ldr	r3, [pc, #192]	; (8009f94 <HAL_ETH_MspInit+0x120>)
 8009ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ed6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009eda:	61bb      	str	r3, [r7, #24]
 8009edc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8009ede:	4b2d      	ldr	r3, [pc, #180]	; (8009f94 <HAL_ETH_MspInit+0x120>)
 8009ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ee2:	4a2c      	ldr	r2, [pc, #176]	; (8009f94 <HAL_ETH_MspInit+0x120>)
 8009ee4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ee8:	6313      	str	r3, [r2, #48]	; 0x30
 8009eea:	4b2a      	ldr	r3, [pc, #168]	; (8009f94 <HAL_ETH_MspInit+0x120>)
 8009eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009eee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ef2:	617b      	str	r3, [r7, #20]
 8009ef4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009ef6:	4b27      	ldr	r3, [pc, #156]	; (8009f94 <HAL_ETH_MspInit+0x120>)
 8009ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009efa:	4a26      	ldr	r2, [pc, #152]	; (8009f94 <HAL_ETH_MspInit+0x120>)
 8009efc:	f043 0304 	orr.w	r3, r3, #4
 8009f00:	6313      	str	r3, [r2, #48]	; 0x30
 8009f02:	4b24      	ldr	r3, [pc, #144]	; (8009f94 <HAL_ETH_MspInit+0x120>)
 8009f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f06:	f003 0304 	and.w	r3, r3, #4
 8009f0a:	613b      	str	r3, [r7, #16]
 8009f0c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009f0e:	4b21      	ldr	r3, [pc, #132]	; (8009f94 <HAL_ETH_MspInit+0x120>)
 8009f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f12:	4a20      	ldr	r2, [pc, #128]	; (8009f94 <HAL_ETH_MspInit+0x120>)
 8009f14:	f043 0301 	orr.w	r3, r3, #1
 8009f18:	6313      	str	r3, [r2, #48]	; 0x30
 8009f1a:	4b1e      	ldr	r3, [pc, #120]	; (8009f94 <HAL_ETH_MspInit+0x120>)
 8009f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f1e:	f003 0301 	and.w	r3, r3, #1
 8009f22:	60fb      	str	r3, [r7, #12]
 8009f24:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PA2     ------> ETH_MDIO
    PC5     ------> ETH_RXD1
    PA7     ------> ETH_CRS_DV
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_11;
 8009f26:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8009f2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009f2c:	2302      	movs	r3, #2
 8009f2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f30:	2300      	movs	r3, #0
 8009f32:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009f34:	2303      	movs	r3, #3
 8009f36:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009f38:	230b      	movs	r3, #11
 8009f3a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8009f3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009f40:	4619      	mov	r1, r3
 8009f42:	4815      	ldr	r0, [pc, #84]	; (8009f98 <HAL_ETH_MspInit+0x124>)
 8009f44:	f7fb fc9a 	bl	800587c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8009f48:	2332      	movs	r3, #50	; 0x32
 8009f4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009f4c:	2302      	movs	r3, #2
 8009f4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f50:	2300      	movs	r3, #0
 8009f52:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009f54:	2303      	movs	r3, #3
 8009f56:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009f58:	230b      	movs	r3, #11
 8009f5a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009f5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009f60:	4619      	mov	r1, r3
 8009f62:	480e      	ldr	r0, [pc, #56]	; (8009f9c <HAL_ETH_MspInit+0x128>)
 8009f64:	f7fb fc8a 	bl	800587c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8009f68:	2386      	movs	r3, #134	; 0x86
 8009f6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009f6c:	2302      	movs	r3, #2
 8009f6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f70:	2300      	movs	r3, #0
 8009f72:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009f74:	2303      	movs	r3, #3
 8009f76:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009f78:	230b      	movs	r3, #11
 8009f7a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009f7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009f80:	4619      	mov	r1, r3
 8009f82:	4807      	ldr	r0, [pc, #28]	; (8009fa0 <HAL_ETH_MspInit+0x12c>)
 8009f84:	f7fb fc7a 	bl	800587c <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8009f88:	bf00      	nop
 8009f8a:	3738      	adds	r7, #56	; 0x38
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	bd80      	pop	{r7, pc}
 8009f90:	40028000 	.word	0x40028000
 8009f94:	40023800 	.word	0x40023800
 8009f98:	40021800 	.word	0x40021800
 8009f9c:	40020800 	.word	0x40020800
 8009fa0:	40020000 	.word	0x40020000

08009fa4 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8009fa4:	b580      	push	{r7, lr}
 8009fa6:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8009fa8:	4802      	ldr	r0, [pc, #8]	; (8009fb4 <ETH_PHY_IO_Init+0x10>)
 8009faa:	f7fb f80d 	bl	8004fc8 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8009fae:	2300      	movs	r3, #0
}
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	bd80      	pop	{r7, pc}
 8009fb4:	2000552c 	.word	0x2000552c

08009fb8 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8009fb8:	b480      	push	{r7}
 8009fba:	af00      	add	r7, sp, #0
  return 0;
 8009fbc:	2300      	movs	r3, #0
}
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc6:	4770      	bx	lr

08009fc8 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	b084      	sub	sp, #16
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	60f8      	str	r0, [r7, #12]
 8009fd0:	60b9      	str	r1, [r7, #8]
 8009fd2:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	68ba      	ldr	r2, [r7, #8]
 8009fd8:	68f9      	ldr	r1, [r7, #12]
 8009fda:	4807      	ldr	r0, [pc, #28]	; (8009ff8 <ETH_PHY_IO_ReadReg+0x30>)
 8009fdc:	f7fa fe5c 	bl	8004c98 <HAL_ETH_ReadPHYRegister>
 8009fe0:	4603      	mov	r3, r0
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d002      	beq.n	8009fec <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8009fe6:	f04f 33ff 	mov.w	r3, #4294967295
 8009fea:	e000      	b.n	8009fee <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8009fec:	2300      	movs	r3, #0
}
 8009fee:	4618      	mov	r0, r3
 8009ff0:	3710      	adds	r7, #16
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	bd80      	pop	{r7, pc}
 8009ff6:	bf00      	nop
 8009ff8:	2000552c 	.word	0x2000552c

08009ffc <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8009ffc:	b580      	push	{r7, lr}
 8009ffe:	b084      	sub	sp, #16
 800a000:	af00      	add	r7, sp, #0
 800a002:	60f8      	str	r0, [r7, #12]
 800a004:	60b9      	str	r1, [r7, #8]
 800a006:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	68ba      	ldr	r2, [r7, #8]
 800a00c:	68f9      	ldr	r1, [r7, #12]
 800a00e:	4807      	ldr	r0, [pc, #28]	; (800a02c <ETH_PHY_IO_WriteReg+0x30>)
 800a010:	f7fa fe8d 	bl	8004d2e <HAL_ETH_WritePHYRegister>
 800a014:	4603      	mov	r3, r0
 800a016:	2b00      	cmp	r3, #0
 800a018:	d002      	beq.n	800a020 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800a01a:	f04f 33ff 	mov.w	r3, #4294967295
 800a01e:	e000      	b.n	800a022 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800a020:	2300      	movs	r3, #0
}
 800a022:	4618      	mov	r0, r3
 800a024:	3710      	adds	r7, #16
 800a026:	46bd      	mov	sp, r7
 800a028:	bd80      	pop	{r7, pc}
 800a02a:	bf00      	nop
 800a02c:	2000552c 	.word	0x2000552c

0800a030 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800a030:	b580      	push	{r7, lr}
 800a032:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800a034:	f7f9 fd34 	bl	8003aa0 <HAL_GetTick>
 800a038:	4603      	mov	r3, r0
}
 800a03a:	4618      	mov	r0, r3
 800a03c:	bd80      	pop	{r7, pc}
	...

0800a040 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b0a0      	sub	sp, #128	; 0x80
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800a048:	f107 030c 	add.w	r3, r7, #12
 800a04c:	2264      	movs	r2, #100	; 0x64
 800a04e:	2100      	movs	r1, #0
 800a050:	4618      	mov	r0, r3
 800a052:	f00a fd59 	bl	8014b08 <memset>
  int32_t PHYLinkState = 0;
 800a056:	2300      	movs	r3, #0
 800a058:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800a05a:	2300      	movs	r3, #0
 800a05c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a05e:	2300      	movs	r3, #0
 800a060:	67bb      	str	r3, [r7, #120]	; 0x78
 800a062:	2300      	movs	r3, #0
 800a064:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800a066:	483a      	ldr	r0, [pc, #232]	; (800a150 <ethernet_link_check_state+0x110>)
 800a068:	f7f7 fc19 	bl	800189e <LAN8742_GetLinkState>
 800a06c:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a074:	089b      	lsrs	r3, r3, #2
 800a076:	f003 0301 	and.w	r3, r3, #1
 800a07a:	b2db      	uxtb	r3, r3
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d00c      	beq.n	800a09a <ethernet_link_check_state+0x5a>
 800a080:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a082:	2b01      	cmp	r3, #1
 800a084:	dc09      	bgt.n	800a09a <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 800a086:	4833      	ldr	r0, [pc, #204]	; (800a154 <ethernet_link_check_state+0x114>)
 800a088:	f7fa fbe1 	bl	800484e <HAL_ETH_Stop>
    netif_set_down(netif);
 800a08c:	6878      	ldr	r0, [r7, #4]
 800a08e:	f001 f81d 	bl	800b0cc <netif_set_down>
    netif_set_link_down(netif);
 800a092:	6878      	ldr	r0, [r7, #4]
 800a094:	f001 f880 	bl	800b198 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 800a098:	e055      	b.n	800a146 <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a0a0:	f003 0304 	and.w	r3, r3, #4
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d14e      	bne.n	800a146 <ethernet_link_check_state+0x106>
 800a0a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a0aa:	2b01      	cmp	r3, #1
 800a0ac:	dd4b      	ble.n	800a146 <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 800a0ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a0b0:	3b02      	subs	r3, #2
 800a0b2:	2b03      	cmp	r3, #3
 800a0b4:	d82a      	bhi.n	800a10c <ethernet_link_check_state+0xcc>
 800a0b6:	a201      	add	r2, pc, #4	; (adr r2, 800a0bc <ethernet_link_check_state+0x7c>)
 800a0b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0bc:	0800a0cd 	.word	0x0800a0cd
 800a0c0:	0800a0df 	.word	0x0800a0df
 800a0c4:	0800a0ef 	.word	0x0800a0ef
 800a0c8:	0800a0ff 	.word	0x0800a0ff
      duplex = ETH_FULLDUPLEX_MODE;
 800a0cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a0d0:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800a0d2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a0d6:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800a0d8:	2301      	movs	r3, #1
 800a0da:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800a0dc:	e017      	b.n	800a10e <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800a0de:	2300      	movs	r3, #0
 800a0e0:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800a0e2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a0e6:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800a0e8:	2301      	movs	r3, #1
 800a0ea:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800a0ec:	e00f      	b.n	800a10e <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 800a0ee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a0f2:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800a0f8:	2301      	movs	r3, #1
 800a0fa:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800a0fc:	e007      	b.n	800a10e <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800a0fe:	2300      	movs	r3, #0
 800a100:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800a102:	2300      	movs	r3, #0
 800a104:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800a106:	2301      	movs	r3, #1
 800a108:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800a10a:	e000      	b.n	800a10e <ethernet_link_check_state+0xce>
      break;
 800a10c:	bf00      	nop
    if(linkchanged)
 800a10e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a110:	2b00      	cmp	r3, #0
 800a112:	d018      	beq.n	800a146 <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800a114:	f107 030c 	add.w	r3, r7, #12
 800a118:	4619      	mov	r1, r3
 800a11a:	480e      	ldr	r0, [pc, #56]	; (800a154 <ethernet_link_check_state+0x114>)
 800a11c:	f7fa fe50 	bl	8004dc0 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800a120:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a122:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 800a124:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a126:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800a128:	f107 030c 	add.w	r3, r7, #12
 800a12c:	4619      	mov	r1, r3
 800a12e:	4809      	ldr	r0, [pc, #36]	; (800a154 <ethernet_link_check_state+0x114>)
 800a130:	f7fa ff30 	bl	8004f94 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 800a134:	4807      	ldr	r0, [pc, #28]	; (800a154 <ethernet_link_check_state+0x114>)
 800a136:	f7fa fb2b 	bl	8004790 <HAL_ETH_Start>
      netif_set_up(netif);
 800a13a:	6878      	ldr	r0, [r7, #4]
 800a13c:	f000 ff5a 	bl	800aff4 <netif_set_up>
      netif_set_link_up(netif);
 800a140:	6878      	ldr	r0, [r7, #4]
 800a142:	f000 fff5 	bl	800b130 <netif_set_link_up>
}
 800a146:	bf00      	nop
 800a148:	3780      	adds	r7, #128	; 0x80
 800a14a:	46bd      	mov	sp, r7
 800a14c:	bd80      	pop	{r7, pc}
 800a14e:	bf00      	nop
 800a150:	20005614 	.word	0x20005614
 800a154:	2000552c 	.word	0x2000552c

0800a158 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800a158:	b580      	push	{r7, lr}
 800a15a:	b086      	sub	sp, #24
 800a15c:	af02      	add	r7, sp, #8
 800a15e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800a160:	4812      	ldr	r0, [pc, #72]	; (800a1ac <HAL_ETH_RxAllocateCallback+0x54>)
 800a162:	f000 fcc1 	bl	800aae8 <memp_malloc_pool>
 800a166:	60f8      	str	r0, [r7, #12]
  if (p)
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d014      	beq.n	800a198 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	f103 0220 	add.w	r2, r3, #32
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	4a0d      	ldr	r2, [pc, #52]	; (800a1b0 <HAL_ETH_RxAllocateCallback+0x58>)
 800a17c:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800a186:	9201      	str	r2, [sp, #4]
 800a188:	9300      	str	r3, [sp, #0]
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	2241      	movs	r2, #65	; 0x41
 800a18e:	2100      	movs	r1, #0
 800a190:	2000      	movs	r0, #0
 800a192:	f001 f9f7 	bl	800b584 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800a196:	e005      	b.n	800a1a4 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800a198:	4b06      	ldr	r3, [pc, #24]	; (800a1b4 <HAL_ETH_RxAllocateCallback+0x5c>)
 800a19a:	2201      	movs	r2, #1
 800a19c:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	601a      	str	r2, [r3, #0]
}
 800a1a4:	bf00      	nop
 800a1a6:	3710      	adds	r7, #16
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	bd80      	pop	{r7, pc}
 800a1ac:	0801aa50 	.word	0x0801aa50
 800a1b0:	08009e31 	.word	0x08009e31
 800a1b4:	20005528 	.word	0x20005528

0800a1b8 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b088      	sub	sp, #32
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	60f8      	str	r0, [r7, #12]
 800a1c0:	60b9      	str	r1, [r7, #8]
 800a1c2:	607a      	str	r2, [r7, #4]
 800a1c4:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800a1ca:	68bb      	ldr	r3, [r7, #8]
 800a1cc:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	3b20      	subs	r3, #32
 800a1d6:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 800a1d8:	69fb      	ldr	r3, [r7, #28]
 800a1da:	2200      	movs	r2, #0
 800a1dc:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800a1de:	69fb      	ldr	r3, [r7, #28]
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800a1e4:	69fb      	ldr	r3, [r7, #28]
 800a1e6:	887a      	ldrh	r2, [r7, #2]
 800a1e8:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800a1ea:	69bb      	ldr	r3, [r7, #24]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d103      	bne.n	800a1fa <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800a1f2:	69bb      	ldr	r3, [r7, #24]
 800a1f4:	69fa      	ldr	r2, [r7, #28]
 800a1f6:	601a      	str	r2, [r3, #0]
 800a1f8:	e003      	b.n	800a202 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800a1fa:	697b      	ldr	r3, [r7, #20]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	69fa      	ldr	r2, [r7, #28]
 800a200:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800a202:	697b      	ldr	r3, [r7, #20]
 800a204:	69fa      	ldr	r2, [r7, #28]
 800a206:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800a208:	69bb      	ldr	r3, [r7, #24]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	61fb      	str	r3, [r7, #28]
 800a20e:	e009      	b.n	800a224 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800a210:	69fb      	ldr	r3, [r7, #28]
 800a212:	891a      	ldrh	r2, [r3, #8]
 800a214:	887b      	ldrh	r3, [r7, #2]
 800a216:	4413      	add	r3, r2
 800a218:	b29a      	uxth	r2, r3
 800a21a:	69fb      	ldr	r3, [r7, #28]
 800a21c:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800a21e:	69fb      	ldr	r3, [r7, #28]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	61fb      	str	r3, [r7, #28]
 800a224:	69fb      	ldr	r3, [r7, #28]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d1f2      	bne.n	800a210 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 800a22a:	887b      	ldrh	r3, [r7, #2]
 800a22c:	4619      	mov	r1, r3
 800a22e:	6878      	ldr	r0, [r7, #4]
 800a230:	f7ff fc50 	bl	8009ad4 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 800a234:	bf00      	nop
 800a236:	3720      	adds	r7, #32
 800a238:	46bd      	mov	sp, r7
 800a23a:	bd80      	pop	{r7, pc}

0800a23c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800a23c:	b480      	push	{r7}
 800a23e:	b083      	sub	sp, #12
 800a240:	af00      	add	r7, sp, #0
 800a242:	4603      	mov	r3, r0
 800a244:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800a246:	88fb      	ldrh	r3, [r7, #6]
 800a248:	021b      	lsls	r3, r3, #8
 800a24a:	b21a      	sxth	r2, r3
 800a24c:	88fb      	ldrh	r3, [r7, #6]
 800a24e:	0a1b      	lsrs	r3, r3, #8
 800a250:	b29b      	uxth	r3, r3
 800a252:	b21b      	sxth	r3, r3
 800a254:	4313      	orrs	r3, r2
 800a256:	b21b      	sxth	r3, r3
 800a258:	b29b      	uxth	r3, r3
}
 800a25a:	4618      	mov	r0, r3
 800a25c:	370c      	adds	r7, #12
 800a25e:	46bd      	mov	sp, r7
 800a260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a264:	4770      	bx	lr

0800a266 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800a266:	b480      	push	{r7}
 800a268:	b083      	sub	sp, #12
 800a26a:	af00      	add	r7, sp, #0
 800a26c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	061a      	lsls	r2, r3, #24
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	021b      	lsls	r3, r3, #8
 800a276:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a27a:	431a      	orrs	r2, r3
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	0a1b      	lsrs	r3, r3, #8
 800a280:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a284:	431a      	orrs	r2, r3
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	0e1b      	lsrs	r3, r3, #24
 800a28a:	4313      	orrs	r3, r2
}
 800a28c:	4618      	mov	r0, r3
 800a28e:	370c      	adds	r7, #12
 800a290:	46bd      	mov	sp, r7
 800a292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a296:	4770      	bx	lr

0800a298 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800a298:	b580      	push	{r7, lr}
 800a29a:	b082      	sub	sp, #8
 800a29c:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800a29e:	2300      	movs	r3, #0
 800a2a0:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800a2a2:	f000 f8d5 	bl	800a450 <mem_init>
  memp_init();
 800a2a6:	f000 fbdb 	bl	800aa60 <memp_init>
  pbuf_init();
  netif_init();
 800a2aa:	f000 fcd9 	bl	800ac60 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800a2ae:	f007 ff4f 	bl	8012150 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800a2b2:	f001 fdaf 	bl	800be14 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800a2b6:	f007 fec1 	bl	801203c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800a2ba:	bf00      	nop
 800a2bc:	3708      	adds	r7, #8
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	bd80      	pop	{r7, pc}
	...

0800a2c4 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800a2c4:	b480      	push	{r7}
 800a2c6:	b083      	sub	sp, #12
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	4603      	mov	r3, r0
 800a2cc:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800a2ce:	4b05      	ldr	r3, [pc, #20]	; (800a2e4 <ptr_to_mem+0x20>)
 800a2d0:	681a      	ldr	r2, [r3, #0]
 800a2d2:	88fb      	ldrh	r3, [r7, #6]
 800a2d4:	4413      	add	r3, r2
}
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	370c      	adds	r7, #12
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e0:	4770      	bx	lr
 800a2e2:	bf00      	nop
 800a2e4:	20005ca0 	.word	0x20005ca0

0800a2e8 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800a2e8:	b480      	push	{r7}
 800a2ea:	b083      	sub	sp, #12
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800a2f0:	4b05      	ldr	r3, [pc, #20]	; (800a308 <mem_to_ptr+0x20>)
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	687a      	ldr	r2, [r7, #4]
 800a2f6:	1ad3      	subs	r3, r2, r3
 800a2f8:	b29b      	uxth	r3, r3
}
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	370c      	adds	r7, #12
 800a2fe:	46bd      	mov	sp, r7
 800a300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a304:	4770      	bx	lr
 800a306:	bf00      	nop
 800a308:	20005ca0 	.word	0x20005ca0

0800a30c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800a30c:	b590      	push	{r4, r7, lr}
 800a30e:	b085      	sub	sp, #20
 800a310:	af00      	add	r7, sp, #0
 800a312:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800a314:	4b45      	ldr	r3, [pc, #276]	; (800a42c <plug_holes+0x120>)
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	687a      	ldr	r2, [r7, #4]
 800a31a:	429a      	cmp	r2, r3
 800a31c:	d206      	bcs.n	800a32c <plug_holes+0x20>
 800a31e:	4b44      	ldr	r3, [pc, #272]	; (800a430 <plug_holes+0x124>)
 800a320:	f240 12df 	movw	r2, #479	; 0x1df
 800a324:	4943      	ldr	r1, [pc, #268]	; (800a434 <plug_holes+0x128>)
 800a326:	4844      	ldr	r0, [pc, #272]	; (800a438 <plug_holes+0x12c>)
 800a328:	f00a fbf6 	bl	8014b18 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800a32c:	4b43      	ldr	r3, [pc, #268]	; (800a43c <plug_holes+0x130>)
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	687a      	ldr	r2, [r7, #4]
 800a332:	429a      	cmp	r2, r3
 800a334:	d306      	bcc.n	800a344 <plug_holes+0x38>
 800a336:	4b3e      	ldr	r3, [pc, #248]	; (800a430 <plug_holes+0x124>)
 800a338:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800a33c:	4940      	ldr	r1, [pc, #256]	; (800a440 <plug_holes+0x134>)
 800a33e:	483e      	ldr	r0, [pc, #248]	; (800a438 <plug_holes+0x12c>)
 800a340:	f00a fbea 	bl	8014b18 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	791b      	ldrb	r3, [r3, #4]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d006      	beq.n	800a35a <plug_holes+0x4e>
 800a34c:	4b38      	ldr	r3, [pc, #224]	; (800a430 <plug_holes+0x124>)
 800a34e:	f240 12e1 	movw	r2, #481	; 0x1e1
 800a352:	493c      	ldr	r1, [pc, #240]	; (800a444 <plug_holes+0x138>)
 800a354:	4838      	ldr	r0, [pc, #224]	; (800a438 <plug_holes+0x12c>)
 800a356:	f00a fbdf 	bl	8014b18 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	881b      	ldrh	r3, [r3, #0]
 800a35e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a362:	d906      	bls.n	800a372 <plug_holes+0x66>
 800a364:	4b32      	ldr	r3, [pc, #200]	; (800a430 <plug_holes+0x124>)
 800a366:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800a36a:	4937      	ldr	r1, [pc, #220]	; (800a448 <plug_holes+0x13c>)
 800a36c:	4832      	ldr	r0, [pc, #200]	; (800a438 <plug_holes+0x12c>)
 800a36e:	f00a fbd3 	bl	8014b18 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	881b      	ldrh	r3, [r3, #0]
 800a376:	4618      	mov	r0, r3
 800a378:	f7ff ffa4 	bl	800a2c4 <ptr_to_mem>
 800a37c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800a37e:	687a      	ldr	r2, [r7, #4]
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	429a      	cmp	r2, r3
 800a384:	d024      	beq.n	800a3d0 <plug_holes+0xc4>
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	791b      	ldrb	r3, [r3, #4]
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d120      	bne.n	800a3d0 <plug_holes+0xc4>
 800a38e:	4b2b      	ldr	r3, [pc, #172]	; (800a43c <plug_holes+0x130>)
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	68fa      	ldr	r2, [r7, #12]
 800a394:	429a      	cmp	r2, r3
 800a396:	d01b      	beq.n	800a3d0 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800a398:	4b2c      	ldr	r3, [pc, #176]	; (800a44c <plug_holes+0x140>)
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	68fa      	ldr	r2, [r7, #12]
 800a39e:	429a      	cmp	r2, r3
 800a3a0:	d102      	bne.n	800a3a8 <plug_holes+0x9c>
      lfree = mem;
 800a3a2:	4a2a      	ldr	r2, [pc, #168]	; (800a44c <plug_holes+0x140>)
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	881a      	ldrh	r2, [r3, #0]
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	881b      	ldrh	r3, [r3, #0]
 800a3b4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a3b8:	d00a      	beq.n	800a3d0 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	881b      	ldrh	r3, [r3, #0]
 800a3be:	4618      	mov	r0, r3
 800a3c0:	f7ff ff80 	bl	800a2c4 <ptr_to_mem>
 800a3c4:	4604      	mov	r4, r0
 800a3c6:	6878      	ldr	r0, [r7, #4]
 800a3c8:	f7ff ff8e 	bl	800a2e8 <mem_to_ptr>
 800a3cc:	4603      	mov	r3, r0
 800a3ce:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	885b      	ldrh	r3, [r3, #2]
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	f7ff ff75 	bl	800a2c4 <ptr_to_mem>
 800a3da:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800a3dc:	68ba      	ldr	r2, [r7, #8]
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	429a      	cmp	r2, r3
 800a3e2:	d01f      	beq.n	800a424 <plug_holes+0x118>
 800a3e4:	68bb      	ldr	r3, [r7, #8]
 800a3e6:	791b      	ldrb	r3, [r3, #4]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d11b      	bne.n	800a424 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800a3ec:	4b17      	ldr	r3, [pc, #92]	; (800a44c <plug_holes+0x140>)
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	687a      	ldr	r2, [r7, #4]
 800a3f2:	429a      	cmp	r2, r3
 800a3f4:	d102      	bne.n	800a3fc <plug_holes+0xf0>
      lfree = pmem;
 800a3f6:	4a15      	ldr	r2, [pc, #84]	; (800a44c <plug_holes+0x140>)
 800a3f8:	68bb      	ldr	r3, [r7, #8]
 800a3fa:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	881a      	ldrh	r2, [r3, #0]
 800a400:	68bb      	ldr	r3, [r7, #8]
 800a402:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	881b      	ldrh	r3, [r3, #0]
 800a408:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a40c:	d00a      	beq.n	800a424 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	881b      	ldrh	r3, [r3, #0]
 800a412:	4618      	mov	r0, r3
 800a414:	f7ff ff56 	bl	800a2c4 <ptr_to_mem>
 800a418:	4604      	mov	r4, r0
 800a41a:	68b8      	ldr	r0, [r7, #8]
 800a41c:	f7ff ff64 	bl	800a2e8 <mem_to_ptr>
 800a420:	4603      	mov	r3, r0
 800a422:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800a424:	bf00      	nop
 800a426:	3714      	adds	r7, #20
 800a428:	46bd      	mov	sp, r7
 800a42a:	bd90      	pop	{r4, r7, pc}
 800a42c:	20005ca0 	.word	0x20005ca0
 800a430:	08016178 	.word	0x08016178
 800a434:	080161a8 	.word	0x080161a8
 800a438:	080161c0 	.word	0x080161c0
 800a43c:	20005ca4 	.word	0x20005ca4
 800a440:	080161e8 	.word	0x080161e8
 800a444:	08016204 	.word	0x08016204
 800a448:	08016220 	.word	0x08016220
 800a44c:	20005ca8 	.word	0x20005ca8

0800a450 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800a450:	b580      	push	{r7, lr}
 800a452:	b082      	sub	sp, #8
 800a454:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800a456:	4b18      	ldr	r3, [pc, #96]	; (800a4b8 <mem_init+0x68>)
 800a458:	3303      	adds	r3, #3
 800a45a:	f023 0303 	bic.w	r3, r3, #3
 800a45e:	461a      	mov	r2, r3
 800a460:	4b16      	ldr	r3, [pc, #88]	; (800a4bc <mem_init+0x6c>)
 800a462:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800a464:	4b15      	ldr	r3, [pc, #84]	; (800a4bc <mem_init+0x6c>)
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800a470:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	2200      	movs	r2, #0
 800a476:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	2200      	movs	r2, #0
 800a47c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800a47e:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800a482:	f7ff ff1f 	bl	800a2c4 <ptr_to_mem>
 800a486:	4603      	mov	r3, r0
 800a488:	4a0d      	ldr	r2, [pc, #52]	; (800a4c0 <mem_init+0x70>)
 800a48a:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800a48c:	4b0c      	ldr	r3, [pc, #48]	; (800a4c0 <mem_init+0x70>)
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	2201      	movs	r2, #1
 800a492:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800a494:	4b0a      	ldr	r3, [pc, #40]	; (800a4c0 <mem_init+0x70>)
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800a49c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800a49e:	4b08      	ldr	r3, [pc, #32]	; (800a4c0 <mem_init+0x70>)
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800a4a6:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800a4a8:	4b04      	ldr	r3, [pc, #16]	; (800a4bc <mem_init+0x6c>)
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	4a05      	ldr	r2, [pc, #20]	; (800a4c4 <mem_init+0x74>)
 800a4ae:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800a4b0:	bf00      	nop
 800a4b2:	3708      	adds	r7, #8
 800a4b4:	46bd      	mov	sp, r7
 800a4b6:	bd80      	pop	{r7, pc}
 800a4b8:	2000564c 	.word	0x2000564c
 800a4bc:	20005ca0 	.word	0x20005ca0
 800a4c0:	20005ca4 	.word	0x20005ca4
 800a4c4:	20005ca8 	.word	0x20005ca8

0800a4c8 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	b086      	sub	sp, #24
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800a4d0:	6878      	ldr	r0, [r7, #4]
 800a4d2:	f7ff ff09 	bl	800a2e8 <mem_to_ptr>
 800a4d6:	4603      	mov	r3, r0
 800a4d8:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	881b      	ldrh	r3, [r3, #0]
 800a4de:	4618      	mov	r0, r3
 800a4e0:	f7ff fef0 	bl	800a2c4 <ptr_to_mem>
 800a4e4:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	885b      	ldrh	r3, [r3, #2]
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	f7ff feea 	bl	800a2c4 <ptr_to_mem>
 800a4f0:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	881b      	ldrh	r3, [r3, #0]
 800a4f6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a4fa:	d818      	bhi.n	800a52e <mem_link_valid+0x66>
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	885b      	ldrh	r3, [r3, #2]
 800a500:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a504:	d813      	bhi.n	800a52e <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a50a:	8afa      	ldrh	r2, [r7, #22]
 800a50c:	429a      	cmp	r2, r3
 800a50e:	d004      	beq.n	800a51a <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	881b      	ldrh	r3, [r3, #0]
 800a514:	8afa      	ldrh	r2, [r7, #22]
 800a516:	429a      	cmp	r2, r3
 800a518:	d109      	bne.n	800a52e <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800a51a:	4b08      	ldr	r3, [pc, #32]	; (800a53c <mem_link_valid+0x74>)
 800a51c:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a51e:	693a      	ldr	r2, [r7, #16]
 800a520:	429a      	cmp	r2, r3
 800a522:	d006      	beq.n	800a532 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800a524:	693b      	ldr	r3, [r7, #16]
 800a526:	885b      	ldrh	r3, [r3, #2]
 800a528:	8afa      	ldrh	r2, [r7, #22]
 800a52a:	429a      	cmp	r2, r3
 800a52c:	d001      	beq.n	800a532 <mem_link_valid+0x6a>
    return 0;
 800a52e:	2300      	movs	r3, #0
 800a530:	e000      	b.n	800a534 <mem_link_valid+0x6c>
  }
  return 1;
 800a532:	2301      	movs	r3, #1
}
 800a534:	4618      	mov	r0, r3
 800a536:	3718      	adds	r7, #24
 800a538:	46bd      	mov	sp, r7
 800a53a:	bd80      	pop	{r7, pc}
 800a53c:	20005ca4 	.word	0x20005ca4

0800a540 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800a540:	b580      	push	{r7, lr}
 800a542:	b084      	sub	sp, #16
 800a544:	af00      	add	r7, sp, #0
 800a546:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d04c      	beq.n	800a5e8 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	f003 0303 	and.w	r3, r3, #3
 800a554:	2b00      	cmp	r3, #0
 800a556:	d007      	beq.n	800a568 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800a558:	4b25      	ldr	r3, [pc, #148]	; (800a5f0 <mem_free+0xb0>)
 800a55a:	f240 2273 	movw	r2, #627	; 0x273
 800a55e:	4925      	ldr	r1, [pc, #148]	; (800a5f4 <mem_free+0xb4>)
 800a560:	4825      	ldr	r0, [pc, #148]	; (800a5f8 <mem_free+0xb8>)
 800a562:	f00a fad9 	bl	8014b18 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800a566:	e040      	b.n	800a5ea <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	3b08      	subs	r3, #8
 800a56c:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800a56e:	4b23      	ldr	r3, [pc, #140]	; (800a5fc <mem_free+0xbc>)
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	68fa      	ldr	r2, [r7, #12]
 800a574:	429a      	cmp	r2, r3
 800a576:	d306      	bcc.n	800a586 <mem_free+0x46>
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	f103 020c 	add.w	r2, r3, #12
 800a57e:	4b20      	ldr	r3, [pc, #128]	; (800a600 <mem_free+0xc0>)
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	429a      	cmp	r2, r3
 800a584:	d907      	bls.n	800a596 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800a586:	4b1a      	ldr	r3, [pc, #104]	; (800a5f0 <mem_free+0xb0>)
 800a588:	f240 227f 	movw	r2, #639	; 0x27f
 800a58c:	491d      	ldr	r1, [pc, #116]	; (800a604 <mem_free+0xc4>)
 800a58e:	481a      	ldr	r0, [pc, #104]	; (800a5f8 <mem_free+0xb8>)
 800a590:	f00a fac2 	bl	8014b18 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800a594:	e029      	b.n	800a5ea <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	791b      	ldrb	r3, [r3, #4]
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d107      	bne.n	800a5ae <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800a59e:	4b14      	ldr	r3, [pc, #80]	; (800a5f0 <mem_free+0xb0>)
 800a5a0:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800a5a4:	4918      	ldr	r1, [pc, #96]	; (800a608 <mem_free+0xc8>)
 800a5a6:	4814      	ldr	r0, [pc, #80]	; (800a5f8 <mem_free+0xb8>)
 800a5a8:	f00a fab6 	bl	8014b18 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800a5ac:	e01d      	b.n	800a5ea <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800a5ae:	68f8      	ldr	r0, [r7, #12]
 800a5b0:	f7ff ff8a 	bl	800a4c8 <mem_link_valid>
 800a5b4:	4603      	mov	r3, r0
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d107      	bne.n	800a5ca <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800a5ba:	4b0d      	ldr	r3, [pc, #52]	; (800a5f0 <mem_free+0xb0>)
 800a5bc:	f240 2295 	movw	r2, #661	; 0x295
 800a5c0:	4912      	ldr	r1, [pc, #72]	; (800a60c <mem_free+0xcc>)
 800a5c2:	480d      	ldr	r0, [pc, #52]	; (800a5f8 <mem_free+0xb8>)
 800a5c4:	f00a faa8 	bl	8014b18 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800a5c8:	e00f      	b.n	800a5ea <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	2200      	movs	r2, #0
 800a5ce:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800a5d0:	4b0f      	ldr	r3, [pc, #60]	; (800a610 <mem_free+0xd0>)
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	68fa      	ldr	r2, [r7, #12]
 800a5d6:	429a      	cmp	r2, r3
 800a5d8:	d202      	bcs.n	800a5e0 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800a5da:	4a0d      	ldr	r2, [pc, #52]	; (800a610 <mem_free+0xd0>)
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800a5e0:	68f8      	ldr	r0, [r7, #12]
 800a5e2:	f7ff fe93 	bl	800a30c <plug_holes>
 800a5e6:	e000      	b.n	800a5ea <mem_free+0xaa>
    return;
 800a5e8:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800a5ea:	3710      	adds	r7, #16
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	bd80      	pop	{r7, pc}
 800a5f0:	08016178 	.word	0x08016178
 800a5f4:	0801624c 	.word	0x0801624c
 800a5f8:	080161c0 	.word	0x080161c0
 800a5fc:	20005ca0 	.word	0x20005ca0
 800a600:	20005ca4 	.word	0x20005ca4
 800a604:	08016270 	.word	0x08016270
 800a608:	0801628c 	.word	0x0801628c
 800a60c:	080162b4 	.word	0x080162b4
 800a610:	20005ca8 	.word	0x20005ca8

0800a614 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800a614:	b580      	push	{r7, lr}
 800a616:	b088      	sub	sp, #32
 800a618:	af00      	add	r7, sp, #0
 800a61a:	6078      	str	r0, [r7, #4]
 800a61c:	460b      	mov	r3, r1
 800a61e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800a620:	887b      	ldrh	r3, [r7, #2]
 800a622:	3303      	adds	r3, #3
 800a624:	b29b      	uxth	r3, r3
 800a626:	f023 0303 	bic.w	r3, r3, #3
 800a62a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800a62c:	8bfb      	ldrh	r3, [r7, #30]
 800a62e:	2b0b      	cmp	r3, #11
 800a630:	d801      	bhi.n	800a636 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800a632:	230c      	movs	r3, #12
 800a634:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800a636:	8bfb      	ldrh	r3, [r7, #30]
 800a638:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a63c:	d803      	bhi.n	800a646 <mem_trim+0x32>
 800a63e:	8bfa      	ldrh	r2, [r7, #30]
 800a640:	887b      	ldrh	r3, [r7, #2]
 800a642:	429a      	cmp	r2, r3
 800a644:	d201      	bcs.n	800a64a <mem_trim+0x36>
    return NULL;
 800a646:	2300      	movs	r3, #0
 800a648:	e0cc      	b.n	800a7e4 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800a64a:	4b68      	ldr	r3, [pc, #416]	; (800a7ec <mem_trim+0x1d8>)
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	687a      	ldr	r2, [r7, #4]
 800a650:	429a      	cmp	r2, r3
 800a652:	d304      	bcc.n	800a65e <mem_trim+0x4a>
 800a654:	4b66      	ldr	r3, [pc, #408]	; (800a7f0 <mem_trim+0x1dc>)
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	687a      	ldr	r2, [r7, #4]
 800a65a:	429a      	cmp	r2, r3
 800a65c:	d306      	bcc.n	800a66c <mem_trim+0x58>
 800a65e:	4b65      	ldr	r3, [pc, #404]	; (800a7f4 <mem_trim+0x1e0>)
 800a660:	f240 22d1 	movw	r2, #721	; 0x2d1
 800a664:	4964      	ldr	r1, [pc, #400]	; (800a7f8 <mem_trim+0x1e4>)
 800a666:	4865      	ldr	r0, [pc, #404]	; (800a7fc <mem_trim+0x1e8>)
 800a668:	f00a fa56 	bl	8014b18 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800a66c:	4b5f      	ldr	r3, [pc, #380]	; (800a7ec <mem_trim+0x1d8>)
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	687a      	ldr	r2, [r7, #4]
 800a672:	429a      	cmp	r2, r3
 800a674:	d304      	bcc.n	800a680 <mem_trim+0x6c>
 800a676:	4b5e      	ldr	r3, [pc, #376]	; (800a7f0 <mem_trim+0x1dc>)
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	687a      	ldr	r2, [r7, #4]
 800a67c:	429a      	cmp	r2, r3
 800a67e:	d301      	bcc.n	800a684 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	e0af      	b.n	800a7e4 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	3b08      	subs	r3, #8
 800a688:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800a68a:	69b8      	ldr	r0, [r7, #24]
 800a68c:	f7ff fe2c 	bl	800a2e8 <mem_to_ptr>
 800a690:	4603      	mov	r3, r0
 800a692:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800a694:	69bb      	ldr	r3, [r7, #24]
 800a696:	881a      	ldrh	r2, [r3, #0]
 800a698:	8afb      	ldrh	r3, [r7, #22]
 800a69a:	1ad3      	subs	r3, r2, r3
 800a69c:	b29b      	uxth	r3, r3
 800a69e:	3b08      	subs	r3, #8
 800a6a0:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800a6a2:	8bfa      	ldrh	r2, [r7, #30]
 800a6a4:	8abb      	ldrh	r3, [r7, #20]
 800a6a6:	429a      	cmp	r2, r3
 800a6a8:	d906      	bls.n	800a6b8 <mem_trim+0xa4>
 800a6aa:	4b52      	ldr	r3, [pc, #328]	; (800a7f4 <mem_trim+0x1e0>)
 800a6ac:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800a6b0:	4953      	ldr	r1, [pc, #332]	; (800a800 <mem_trim+0x1ec>)
 800a6b2:	4852      	ldr	r0, [pc, #328]	; (800a7fc <mem_trim+0x1e8>)
 800a6b4:	f00a fa30 	bl	8014b18 <iprintf>
  if (newsize > size) {
 800a6b8:	8bfa      	ldrh	r2, [r7, #30]
 800a6ba:	8abb      	ldrh	r3, [r7, #20]
 800a6bc:	429a      	cmp	r2, r3
 800a6be:	d901      	bls.n	800a6c4 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 800a6c0:	2300      	movs	r3, #0
 800a6c2:	e08f      	b.n	800a7e4 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 800a6c4:	8bfa      	ldrh	r2, [r7, #30]
 800a6c6:	8abb      	ldrh	r3, [r7, #20]
 800a6c8:	429a      	cmp	r2, r3
 800a6ca:	d101      	bne.n	800a6d0 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	e089      	b.n	800a7e4 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800a6d0:	69bb      	ldr	r3, [r7, #24]
 800a6d2:	881b      	ldrh	r3, [r3, #0]
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	f7ff fdf5 	bl	800a2c4 <ptr_to_mem>
 800a6da:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800a6dc:	693b      	ldr	r3, [r7, #16]
 800a6de:	791b      	ldrb	r3, [r3, #4]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d13f      	bne.n	800a764 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800a6e4:	69bb      	ldr	r3, [r7, #24]
 800a6e6:	881b      	ldrh	r3, [r3, #0]
 800a6e8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a6ec:	d106      	bne.n	800a6fc <mem_trim+0xe8>
 800a6ee:	4b41      	ldr	r3, [pc, #260]	; (800a7f4 <mem_trim+0x1e0>)
 800a6f0:	f240 22f5 	movw	r2, #757	; 0x2f5
 800a6f4:	4943      	ldr	r1, [pc, #268]	; (800a804 <mem_trim+0x1f0>)
 800a6f6:	4841      	ldr	r0, [pc, #260]	; (800a7fc <mem_trim+0x1e8>)
 800a6f8:	f00a fa0e 	bl	8014b18 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800a6fc:	693b      	ldr	r3, [r7, #16]
 800a6fe:	881b      	ldrh	r3, [r3, #0]
 800a700:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800a702:	8afa      	ldrh	r2, [r7, #22]
 800a704:	8bfb      	ldrh	r3, [r7, #30]
 800a706:	4413      	add	r3, r2
 800a708:	b29b      	uxth	r3, r3
 800a70a:	3308      	adds	r3, #8
 800a70c:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800a70e:	4b3e      	ldr	r3, [pc, #248]	; (800a808 <mem_trim+0x1f4>)
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	693a      	ldr	r2, [r7, #16]
 800a714:	429a      	cmp	r2, r3
 800a716:	d106      	bne.n	800a726 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 800a718:	89fb      	ldrh	r3, [r7, #14]
 800a71a:	4618      	mov	r0, r3
 800a71c:	f7ff fdd2 	bl	800a2c4 <ptr_to_mem>
 800a720:	4603      	mov	r3, r0
 800a722:	4a39      	ldr	r2, [pc, #228]	; (800a808 <mem_trim+0x1f4>)
 800a724:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800a726:	89fb      	ldrh	r3, [r7, #14]
 800a728:	4618      	mov	r0, r3
 800a72a:	f7ff fdcb 	bl	800a2c4 <ptr_to_mem>
 800a72e:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800a730:	693b      	ldr	r3, [r7, #16]
 800a732:	2200      	movs	r2, #0
 800a734:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800a736:	693b      	ldr	r3, [r7, #16]
 800a738:	89ba      	ldrh	r2, [r7, #12]
 800a73a:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800a73c:	693b      	ldr	r3, [r7, #16]
 800a73e:	8afa      	ldrh	r2, [r7, #22]
 800a740:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800a742:	69bb      	ldr	r3, [r7, #24]
 800a744:	89fa      	ldrh	r2, [r7, #14]
 800a746:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800a748:	693b      	ldr	r3, [r7, #16]
 800a74a:	881b      	ldrh	r3, [r3, #0]
 800a74c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a750:	d047      	beq.n	800a7e2 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800a752:	693b      	ldr	r3, [r7, #16]
 800a754:	881b      	ldrh	r3, [r3, #0]
 800a756:	4618      	mov	r0, r3
 800a758:	f7ff fdb4 	bl	800a2c4 <ptr_to_mem>
 800a75c:	4602      	mov	r2, r0
 800a75e:	89fb      	ldrh	r3, [r7, #14]
 800a760:	8053      	strh	r3, [r2, #2]
 800a762:	e03e      	b.n	800a7e2 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800a764:	8bfb      	ldrh	r3, [r7, #30]
 800a766:	f103 0214 	add.w	r2, r3, #20
 800a76a:	8abb      	ldrh	r3, [r7, #20]
 800a76c:	429a      	cmp	r2, r3
 800a76e:	d838      	bhi.n	800a7e2 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800a770:	8afa      	ldrh	r2, [r7, #22]
 800a772:	8bfb      	ldrh	r3, [r7, #30]
 800a774:	4413      	add	r3, r2
 800a776:	b29b      	uxth	r3, r3
 800a778:	3308      	adds	r3, #8
 800a77a:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800a77c:	69bb      	ldr	r3, [r7, #24]
 800a77e:	881b      	ldrh	r3, [r3, #0]
 800a780:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a784:	d106      	bne.n	800a794 <mem_trim+0x180>
 800a786:	4b1b      	ldr	r3, [pc, #108]	; (800a7f4 <mem_trim+0x1e0>)
 800a788:	f240 3216 	movw	r2, #790	; 0x316
 800a78c:	491d      	ldr	r1, [pc, #116]	; (800a804 <mem_trim+0x1f0>)
 800a78e:	481b      	ldr	r0, [pc, #108]	; (800a7fc <mem_trim+0x1e8>)
 800a790:	f00a f9c2 	bl	8014b18 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800a794:	89fb      	ldrh	r3, [r7, #14]
 800a796:	4618      	mov	r0, r3
 800a798:	f7ff fd94 	bl	800a2c4 <ptr_to_mem>
 800a79c:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800a79e:	4b1a      	ldr	r3, [pc, #104]	; (800a808 <mem_trim+0x1f4>)
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	693a      	ldr	r2, [r7, #16]
 800a7a4:	429a      	cmp	r2, r3
 800a7a6:	d202      	bcs.n	800a7ae <mem_trim+0x19a>
      lfree = mem2;
 800a7a8:	4a17      	ldr	r2, [pc, #92]	; (800a808 <mem_trim+0x1f4>)
 800a7aa:	693b      	ldr	r3, [r7, #16]
 800a7ac:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800a7ae:	693b      	ldr	r3, [r7, #16]
 800a7b0:	2200      	movs	r2, #0
 800a7b2:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800a7b4:	69bb      	ldr	r3, [r7, #24]
 800a7b6:	881a      	ldrh	r2, [r3, #0]
 800a7b8:	693b      	ldr	r3, [r7, #16]
 800a7ba:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800a7bc:	693b      	ldr	r3, [r7, #16]
 800a7be:	8afa      	ldrh	r2, [r7, #22]
 800a7c0:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800a7c2:	69bb      	ldr	r3, [r7, #24]
 800a7c4:	89fa      	ldrh	r2, [r7, #14]
 800a7c6:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800a7c8:	693b      	ldr	r3, [r7, #16]
 800a7ca:	881b      	ldrh	r3, [r3, #0]
 800a7cc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a7d0:	d007      	beq.n	800a7e2 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800a7d2:	693b      	ldr	r3, [r7, #16]
 800a7d4:	881b      	ldrh	r3, [r3, #0]
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	f7ff fd74 	bl	800a2c4 <ptr_to_mem>
 800a7dc:	4602      	mov	r2, r0
 800a7de:	89fb      	ldrh	r3, [r7, #14]
 800a7e0:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800a7e2:	687b      	ldr	r3, [r7, #4]
}
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	3720      	adds	r7, #32
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	bd80      	pop	{r7, pc}
 800a7ec:	20005ca0 	.word	0x20005ca0
 800a7f0:	20005ca4 	.word	0x20005ca4
 800a7f4:	08016178 	.word	0x08016178
 800a7f8:	080162e8 	.word	0x080162e8
 800a7fc:	080161c0 	.word	0x080161c0
 800a800:	08016300 	.word	0x08016300
 800a804:	08016320 	.word	0x08016320
 800a808:	20005ca8 	.word	0x20005ca8

0800a80c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b088      	sub	sp, #32
 800a810:	af00      	add	r7, sp, #0
 800a812:	4603      	mov	r3, r0
 800a814:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800a816:	88fb      	ldrh	r3, [r7, #6]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d101      	bne.n	800a820 <mem_malloc+0x14>
    return NULL;
 800a81c:	2300      	movs	r3, #0
 800a81e:	e0d9      	b.n	800a9d4 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800a820:	88fb      	ldrh	r3, [r7, #6]
 800a822:	3303      	adds	r3, #3
 800a824:	b29b      	uxth	r3, r3
 800a826:	f023 0303 	bic.w	r3, r3, #3
 800a82a:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800a82c:	8bbb      	ldrh	r3, [r7, #28]
 800a82e:	2b0b      	cmp	r3, #11
 800a830:	d801      	bhi.n	800a836 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800a832:	230c      	movs	r3, #12
 800a834:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800a836:	8bbb      	ldrh	r3, [r7, #28]
 800a838:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a83c:	d803      	bhi.n	800a846 <mem_malloc+0x3a>
 800a83e:	8bba      	ldrh	r2, [r7, #28]
 800a840:	88fb      	ldrh	r3, [r7, #6]
 800a842:	429a      	cmp	r2, r3
 800a844:	d201      	bcs.n	800a84a <mem_malloc+0x3e>
    return NULL;
 800a846:	2300      	movs	r3, #0
 800a848:	e0c4      	b.n	800a9d4 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800a84a:	4b64      	ldr	r3, [pc, #400]	; (800a9dc <mem_malloc+0x1d0>)
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	4618      	mov	r0, r3
 800a850:	f7ff fd4a 	bl	800a2e8 <mem_to_ptr>
 800a854:	4603      	mov	r3, r0
 800a856:	83fb      	strh	r3, [r7, #30]
 800a858:	e0b4      	b.n	800a9c4 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800a85a:	8bfb      	ldrh	r3, [r7, #30]
 800a85c:	4618      	mov	r0, r3
 800a85e:	f7ff fd31 	bl	800a2c4 <ptr_to_mem>
 800a862:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800a864:	697b      	ldr	r3, [r7, #20]
 800a866:	791b      	ldrb	r3, [r3, #4]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	f040 80a4 	bne.w	800a9b6 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800a86e:	697b      	ldr	r3, [r7, #20]
 800a870:	881b      	ldrh	r3, [r3, #0]
 800a872:	461a      	mov	r2, r3
 800a874:	8bfb      	ldrh	r3, [r7, #30]
 800a876:	1ad3      	subs	r3, r2, r3
 800a878:	f1a3 0208 	sub.w	r2, r3, #8
 800a87c:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800a87e:	429a      	cmp	r2, r3
 800a880:	f0c0 8099 	bcc.w	800a9b6 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800a884:	697b      	ldr	r3, [r7, #20]
 800a886:	881b      	ldrh	r3, [r3, #0]
 800a888:	461a      	mov	r2, r3
 800a88a:	8bfb      	ldrh	r3, [r7, #30]
 800a88c:	1ad3      	subs	r3, r2, r3
 800a88e:	f1a3 0208 	sub.w	r2, r3, #8
 800a892:	8bbb      	ldrh	r3, [r7, #28]
 800a894:	3314      	adds	r3, #20
 800a896:	429a      	cmp	r2, r3
 800a898:	d333      	bcc.n	800a902 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800a89a:	8bfa      	ldrh	r2, [r7, #30]
 800a89c:	8bbb      	ldrh	r3, [r7, #28]
 800a89e:	4413      	add	r3, r2
 800a8a0:	b29b      	uxth	r3, r3
 800a8a2:	3308      	adds	r3, #8
 800a8a4:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800a8a6:	8a7b      	ldrh	r3, [r7, #18]
 800a8a8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a8ac:	d106      	bne.n	800a8bc <mem_malloc+0xb0>
 800a8ae:	4b4c      	ldr	r3, [pc, #304]	; (800a9e0 <mem_malloc+0x1d4>)
 800a8b0:	f240 3287 	movw	r2, #903	; 0x387
 800a8b4:	494b      	ldr	r1, [pc, #300]	; (800a9e4 <mem_malloc+0x1d8>)
 800a8b6:	484c      	ldr	r0, [pc, #304]	; (800a9e8 <mem_malloc+0x1dc>)
 800a8b8:	f00a f92e 	bl	8014b18 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800a8bc:	8a7b      	ldrh	r3, [r7, #18]
 800a8be:	4618      	mov	r0, r3
 800a8c0:	f7ff fd00 	bl	800a2c4 <ptr_to_mem>
 800a8c4:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800a8cc:	697b      	ldr	r3, [r7, #20]
 800a8ce:	881a      	ldrh	r2, [r3, #0]
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	8bfa      	ldrh	r2, [r7, #30]
 800a8d8:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800a8da:	697b      	ldr	r3, [r7, #20]
 800a8dc:	8a7a      	ldrh	r2, [r7, #18]
 800a8de:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800a8e0:	697b      	ldr	r3, [r7, #20]
 800a8e2:	2201      	movs	r2, #1
 800a8e4:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	881b      	ldrh	r3, [r3, #0]
 800a8ea:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a8ee:	d00b      	beq.n	800a908 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	881b      	ldrh	r3, [r3, #0]
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	f7ff fce5 	bl	800a2c4 <ptr_to_mem>
 800a8fa:	4602      	mov	r2, r0
 800a8fc:	8a7b      	ldrh	r3, [r7, #18]
 800a8fe:	8053      	strh	r3, [r2, #2]
 800a900:	e002      	b.n	800a908 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800a902:	697b      	ldr	r3, [r7, #20]
 800a904:	2201      	movs	r2, #1
 800a906:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800a908:	4b34      	ldr	r3, [pc, #208]	; (800a9dc <mem_malloc+0x1d0>)
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	697a      	ldr	r2, [r7, #20]
 800a90e:	429a      	cmp	r2, r3
 800a910:	d127      	bne.n	800a962 <mem_malloc+0x156>
          struct mem *cur = lfree;
 800a912:	4b32      	ldr	r3, [pc, #200]	; (800a9dc <mem_malloc+0x1d0>)
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800a918:	e005      	b.n	800a926 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800a91a:	69bb      	ldr	r3, [r7, #24]
 800a91c:	881b      	ldrh	r3, [r3, #0]
 800a91e:	4618      	mov	r0, r3
 800a920:	f7ff fcd0 	bl	800a2c4 <ptr_to_mem>
 800a924:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800a926:	69bb      	ldr	r3, [r7, #24]
 800a928:	791b      	ldrb	r3, [r3, #4]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d004      	beq.n	800a938 <mem_malloc+0x12c>
 800a92e:	4b2f      	ldr	r3, [pc, #188]	; (800a9ec <mem_malloc+0x1e0>)
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	69ba      	ldr	r2, [r7, #24]
 800a934:	429a      	cmp	r2, r3
 800a936:	d1f0      	bne.n	800a91a <mem_malloc+0x10e>
          }
          lfree = cur;
 800a938:	4a28      	ldr	r2, [pc, #160]	; (800a9dc <mem_malloc+0x1d0>)
 800a93a:	69bb      	ldr	r3, [r7, #24]
 800a93c:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800a93e:	4b27      	ldr	r3, [pc, #156]	; (800a9dc <mem_malloc+0x1d0>)
 800a940:	681a      	ldr	r2, [r3, #0]
 800a942:	4b2a      	ldr	r3, [pc, #168]	; (800a9ec <mem_malloc+0x1e0>)
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	429a      	cmp	r2, r3
 800a948:	d00b      	beq.n	800a962 <mem_malloc+0x156>
 800a94a:	4b24      	ldr	r3, [pc, #144]	; (800a9dc <mem_malloc+0x1d0>)
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	791b      	ldrb	r3, [r3, #4]
 800a950:	2b00      	cmp	r3, #0
 800a952:	d006      	beq.n	800a962 <mem_malloc+0x156>
 800a954:	4b22      	ldr	r3, [pc, #136]	; (800a9e0 <mem_malloc+0x1d4>)
 800a956:	f240 32b5 	movw	r2, #949	; 0x3b5
 800a95a:	4925      	ldr	r1, [pc, #148]	; (800a9f0 <mem_malloc+0x1e4>)
 800a95c:	4822      	ldr	r0, [pc, #136]	; (800a9e8 <mem_malloc+0x1dc>)
 800a95e:	f00a f8db 	bl	8014b18 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800a962:	8bba      	ldrh	r2, [r7, #28]
 800a964:	697b      	ldr	r3, [r7, #20]
 800a966:	4413      	add	r3, r2
 800a968:	3308      	adds	r3, #8
 800a96a:	4a20      	ldr	r2, [pc, #128]	; (800a9ec <mem_malloc+0x1e0>)
 800a96c:	6812      	ldr	r2, [r2, #0]
 800a96e:	4293      	cmp	r3, r2
 800a970:	d906      	bls.n	800a980 <mem_malloc+0x174>
 800a972:	4b1b      	ldr	r3, [pc, #108]	; (800a9e0 <mem_malloc+0x1d4>)
 800a974:	f240 32b9 	movw	r2, #953	; 0x3b9
 800a978:	491e      	ldr	r1, [pc, #120]	; (800a9f4 <mem_malloc+0x1e8>)
 800a97a:	481b      	ldr	r0, [pc, #108]	; (800a9e8 <mem_malloc+0x1dc>)
 800a97c:	f00a f8cc 	bl	8014b18 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800a980:	697b      	ldr	r3, [r7, #20]
 800a982:	f003 0303 	and.w	r3, r3, #3
 800a986:	2b00      	cmp	r3, #0
 800a988:	d006      	beq.n	800a998 <mem_malloc+0x18c>
 800a98a:	4b15      	ldr	r3, [pc, #84]	; (800a9e0 <mem_malloc+0x1d4>)
 800a98c:	f240 32bb 	movw	r2, #955	; 0x3bb
 800a990:	4919      	ldr	r1, [pc, #100]	; (800a9f8 <mem_malloc+0x1ec>)
 800a992:	4815      	ldr	r0, [pc, #84]	; (800a9e8 <mem_malloc+0x1dc>)
 800a994:	f00a f8c0 	bl	8014b18 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800a998:	697b      	ldr	r3, [r7, #20]
 800a99a:	f003 0303 	and.w	r3, r3, #3
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d006      	beq.n	800a9b0 <mem_malloc+0x1a4>
 800a9a2:	4b0f      	ldr	r3, [pc, #60]	; (800a9e0 <mem_malloc+0x1d4>)
 800a9a4:	f240 32bd 	movw	r2, #957	; 0x3bd
 800a9a8:	4914      	ldr	r1, [pc, #80]	; (800a9fc <mem_malloc+0x1f0>)
 800a9aa:	480f      	ldr	r0, [pc, #60]	; (800a9e8 <mem_malloc+0x1dc>)
 800a9ac:	f00a f8b4 	bl	8014b18 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800a9b0:	697b      	ldr	r3, [r7, #20]
 800a9b2:	3308      	adds	r3, #8
 800a9b4:	e00e      	b.n	800a9d4 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800a9b6:	8bfb      	ldrh	r3, [r7, #30]
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	f7ff fc83 	bl	800a2c4 <ptr_to_mem>
 800a9be:	4603      	mov	r3, r0
 800a9c0:	881b      	ldrh	r3, [r3, #0]
 800a9c2:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800a9c4:	8bfa      	ldrh	r2, [r7, #30]
 800a9c6:	8bbb      	ldrh	r3, [r7, #28]
 800a9c8:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800a9cc:	429a      	cmp	r2, r3
 800a9ce:	f4ff af44 	bcc.w	800a85a <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800a9d2:	2300      	movs	r3, #0
}
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	3720      	adds	r7, #32
 800a9d8:	46bd      	mov	sp, r7
 800a9da:	bd80      	pop	{r7, pc}
 800a9dc:	20005ca8 	.word	0x20005ca8
 800a9e0:	08016178 	.word	0x08016178
 800a9e4:	08016320 	.word	0x08016320
 800a9e8:	080161c0 	.word	0x080161c0
 800a9ec:	20005ca4 	.word	0x20005ca4
 800a9f0:	08016334 	.word	0x08016334
 800a9f4:	08016350 	.word	0x08016350
 800a9f8:	08016380 	.word	0x08016380
 800a9fc:	080163b0 	.word	0x080163b0

0800aa00 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800aa00:	b480      	push	{r7}
 800aa02:	b085      	sub	sp, #20
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	689b      	ldr	r3, [r3, #8]
 800aa0c:	2200      	movs	r2, #0
 800aa0e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	685b      	ldr	r3, [r3, #4]
 800aa14:	3303      	adds	r3, #3
 800aa16:	f023 0303 	bic.w	r3, r3, #3
 800aa1a:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800aa1c:	2300      	movs	r3, #0
 800aa1e:	60fb      	str	r3, [r7, #12]
 800aa20:	e011      	b.n	800aa46 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	689b      	ldr	r3, [r3, #8]
 800aa26:	681a      	ldr	r2, [r3, #0]
 800aa28:	68bb      	ldr	r3, [r7, #8]
 800aa2a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	689b      	ldr	r3, [r3, #8]
 800aa30:	68ba      	ldr	r2, [r7, #8]
 800aa32:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	881b      	ldrh	r3, [r3, #0]
 800aa38:	461a      	mov	r2, r3
 800aa3a:	68bb      	ldr	r3, [r7, #8]
 800aa3c:	4413      	add	r3, r2
 800aa3e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	3301      	adds	r3, #1
 800aa44:	60fb      	str	r3, [r7, #12]
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	885b      	ldrh	r3, [r3, #2]
 800aa4a:	461a      	mov	r2, r3
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	4293      	cmp	r3, r2
 800aa50:	dbe7      	blt.n	800aa22 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800aa52:	bf00      	nop
 800aa54:	bf00      	nop
 800aa56:	3714      	adds	r7, #20
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5e:	4770      	bx	lr

0800aa60 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800aa60:	b580      	push	{r7, lr}
 800aa62:	b082      	sub	sp, #8
 800aa64:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800aa66:	2300      	movs	r3, #0
 800aa68:	80fb      	strh	r3, [r7, #6]
 800aa6a:	e009      	b.n	800aa80 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800aa6c:	88fb      	ldrh	r3, [r7, #6]
 800aa6e:	4a08      	ldr	r2, [pc, #32]	; (800aa90 <memp_init+0x30>)
 800aa70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aa74:	4618      	mov	r0, r3
 800aa76:	f7ff ffc3 	bl	800aa00 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800aa7a:	88fb      	ldrh	r3, [r7, #6]
 800aa7c:	3301      	adds	r3, #1
 800aa7e:	80fb      	strh	r3, [r7, #6]
 800aa80:	88fb      	ldrh	r3, [r7, #6]
 800aa82:	2b08      	cmp	r3, #8
 800aa84:	d9f2      	bls.n	800aa6c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800aa86:	bf00      	nop
 800aa88:	bf00      	nop
 800aa8a:	3708      	adds	r7, #8
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	bd80      	pop	{r7, pc}
 800aa90:	0801aac8 	.word	0x0801aac8

0800aa94 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800aa94:	b580      	push	{r7, lr}
 800aa96:	b084      	sub	sp, #16
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	689b      	ldr	r3, [r3, #8]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d012      	beq.n	800aad0 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	689b      	ldr	r3, [r3, #8]
 800aaae:	68fa      	ldr	r2, [r7, #12]
 800aab0:	6812      	ldr	r2, [r2, #0]
 800aab2:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	f003 0303 	and.w	r3, r3, #3
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d006      	beq.n	800aacc <do_memp_malloc_pool+0x38>
 800aabe:	4b07      	ldr	r3, [pc, #28]	; (800aadc <do_memp_malloc_pool+0x48>)
 800aac0:	f44f 728c 	mov.w	r2, #280	; 0x118
 800aac4:	4906      	ldr	r1, [pc, #24]	; (800aae0 <do_memp_malloc_pool+0x4c>)
 800aac6:	4807      	ldr	r0, [pc, #28]	; (800aae4 <do_memp_malloc_pool+0x50>)
 800aac8:	f00a f826 	bl	8014b18 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	e000      	b.n	800aad2 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800aad0:	2300      	movs	r3, #0
}
 800aad2:	4618      	mov	r0, r3
 800aad4:	3710      	adds	r7, #16
 800aad6:	46bd      	mov	sp, r7
 800aad8:	bd80      	pop	{r7, pc}
 800aada:	bf00      	nop
 800aadc:	080163d4 	.word	0x080163d4
 800aae0:	08016404 	.word	0x08016404
 800aae4:	08016428 	.word	0x08016428

0800aae8 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800aae8:	b580      	push	{r7, lr}
 800aaea:	b082      	sub	sp, #8
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d106      	bne.n	800ab04 <memp_malloc_pool+0x1c>
 800aaf6:	4b0a      	ldr	r3, [pc, #40]	; (800ab20 <memp_malloc_pool+0x38>)
 800aaf8:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800aafc:	4909      	ldr	r1, [pc, #36]	; (800ab24 <memp_malloc_pool+0x3c>)
 800aafe:	480a      	ldr	r0, [pc, #40]	; (800ab28 <memp_malloc_pool+0x40>)
 800ab00:	f00a f80a 	bl	8014b18 <iprintf>
  if (desc == NULL) {
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d101      	bne.n	800ab0e <memp_malloc_pool+0x26>
    return NULL;
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	e003      	b.n	800ab16 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800ab0e:	6878      	ldr	r0, [r7, #4]
 800ab10:	f7ff ffc0 	bl	800aa94 <do_memp_malloc_pool>
 800ab14:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800ab16:	4618      	mov	r0, r3
 800ab18:	3708      	adds	r7, #8
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	bd80      	pop	{r7, pc}
 800ab1e:	bf00      	nop
 800ab20:	080163d4 	.word	0x080163d4
 800ab24:	08016450 	.word	0x08016450
 800ab28:	08016428 	.word	0x08016428

0800ab2c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800ab2c:	b580      	push	{r7, lr}
 800ab2e:	b084      	sub	sp, #16
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	4603      	mov	r3, r0
 800ab34:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800ab36:	79fb      	ldrb	r3, [r7, #7]
 800ab38:	2b08      	cmp	r3, #8
 800ab3a:	d908      	bls.n	800ab4e <memp_malloc+0x22>
 800ab3c:	4b0a      	ldr	r3, [pc, #40]	; (800ab68 <memp_malloc+0x3c>)
 800ab3e:	f240 1257 	movw	r2, #343	; 0x157
 800ab42:	490a      	ldr	r1, [pc, #40]	; (800ab6c <memp_malloc+0x40>)
 800ab44:	480a      	ldr	r0, [pc, #40]	; (800ab70 <memp_malloc+0x44>)
 800ab46:	f009 ffe7 	bl	8014b18 <iprintf>
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	e008      	b.n	800ab60 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800ab4e:	79fb      	ldrb	r3, [r7, #7]
 800ab50:	4a08      	ldr	r2, [pc, #32]	; (800ab74 <memp_malloc+0x48>)
 800ab52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ab56:	4618      	mov	r0, r3
 800ab58:	f7ff ff9c 	bl	800aa94 <do_memp_malloc_pool>
 800ab5c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800ab5e:	68fb      	ldr	r3, [r7, #12]
}
 800ab60:	4618      	mov	r0, r3
 800ab62:	3710      	adds	r7, #16
 800ab64:	46bd      	mov	sp, r7
 800ab66:	bd80      	pop	{r7, pc}
 800ab68:	080163d4 	.word	0x080163d4
 800ab6c:	08016464 	.word	0x08016464
 800ab70:	08016428 	.word	0x08016428
 800ab74:	0801aac8 	.word	0x0801aac8

0800ab78 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	b084      	sub	sp, #16
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]
 800ab80:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800ab82:	683b      	ldr	r3, [r7, #0]
 800ab84:	f003 0303 	and.w	r3, r3, #3
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d006      	beq.n	800ab9a <do_memp_free_pool+0x22>
 800ab8c:	4b0a      	ldr	r3, [pc, #40]	; (800abb8 <do_memp_free_pool+0x40>)
 800ab8e:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800ab92:	490a      	ldr	r1, [pc, #40]	; (800abbc <do_memp_free_pool+0x44>)
 800ab94:	480a      	ldr	r0, [pc, #40]	; (800abc0 <do_memp_free_pool+0x48>)
 800ab96:	f009 ffbf 	bl	8014b18 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800ab9a:	683b      	ldr	r3, [r7, #0]
 800ab9c:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	689b      	ldr	r3, [r3, #8]
 800aba2:	681a      	ldr	r2, [r3, #0]
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	689b      	ldr	r3, [r3, #8]
 800abac:	68fa      	ldr	r2, [r7, #12]
 800abae:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800abb0:	bf00      	nop
 800abb2:	3710      	adds	r7, #16
 800abb4:	46bd      	mov	sp, r7
 800abb6:	bd80      	pop	{r7, pc}
 800abb8:	080163d4 	.word	0x080163d4
 800abbc:	08016484 	.word	0x08016484
 800abc0:	08016428 	.word	0x08016428

0800abc4 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800abc4:	b580      	push	{r7, lr}
 800abc6:	b082      	sub	sp, #8
 800abc8:	af00      	add	r7, sp, #0
 800abca:	6078      	str	r0, [r7, #4]
 800abcc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d106      	bne.n	800abe2 <memp_free_pool+0x1e>
 800abd4:	4b0a      	ldr	r3, [pc, #40]	; (800ac00 <memp_free_pool+0x3c>)
 800abd6:	f240 1295 	movw	r2, #405	; 0x195
 800abda:	490a      	ldr	r1, [pc, #40]	; (800ac04 <memp_free_pool+0x40>)
 800abdc:	480a      	ldr	r0, [pc, #40]	; (800ac08 <memp_free_pool+0x44>)
 800abde:	f009 ff9b 	bl	8014b18 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d007      	beq.n	800abf8 <memp_free_pool+0x34>
 800abe8:	683b      	ldr	r3, [r7, #0]
 800abea:	2b00      	cmp	r3, #0
 800abec:	d004      	beq.n	800abf8 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800abee:	6839      	ldr	r1, [r7, #0]
 800abf0:	6878      	ldr	r0, [r7, #4]
 800abf2:	f7ff ffc1 	bl	800ab78 <do_memp_free_pool>
 800abf6:	e000      	b.n	800abfa <memp_free_pool+0x36>
    return;
 800abf8:	bf00      	nop
}
 800abfa:	3708      	adds	r7, #8
 800abfc:	46bd      	mov	sp, r7
 800abfe:	bd80      	pop	{r7, pc}
 800ac00:	080163d4 	.word	0x080163d4
 800ac04:	08016450 	.word	0x08016450
 800ac08:	08016428 	.word	0x08016428

0800ac0c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800ac0c:	b580      	push	{r7, lr}
 800ac0e:	b082      	sub	sp, #8
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	4603      	mov	r3, r0
 800ac14:	6039      	str	r1, [r7, #0]
 800ac16:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800ac18:	79fb      	ldrb	r3, [r7, #7]
 800ac1a:	2b08      	cmp	r3, #8
 800ac1c:	d907      	bls.n	800ac2e <memp_free+0x22>
 800ac1e:	4b0c      	ldr	r3, [pc, #48]	; (800ac50 <memp_free+0x44>)
 800ac20:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800ac24:	490b      	ldr	r1, [pc, #44]	; (800ac54 <memp_free+0x48>)
 800ac26:	480c      	ldr	r0, [pc, #48]	; (800ac58 <memp_free+0x4c>)
 800ac28:	f009 ff76 	bl	8014b18 <iprintf>
 800ac2c:	e00c      	b.n	800ac48 <memp_free+0x3c>

  if (mem == NULL) {
 800ac2e:	683b      	ldr	r3, [r7, #0]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d008      	beq.n	800ac46 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800ac34:	79fb      	ldrb	r3, [r7, #7]
 800ac36:	4a09      	ldr	r2, [pc, #36]	; (800ac5c <memp_free+0x50>)
 800ac38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ac3c:	6839      	ldr	r1, [r7, #0]
 800ac3e:	4618      	mov	r0, r3
 800ac40:	f7ff ff9a 	bl	800ab78 <do_memp_free_pool>
 800ac44:	e000      	b.n	800ac48 <memp_free+0x3c>
    return;
 800ac46:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800ac48:	3708      	adds	r7, #8
 800ac4a:	46bd      	mov	sp, r7
 800ac4c:	bd80      	pop	{r7, pc}
 800ac4e:	bf00      	nop
 800ac50:	080163d4 	.word	0x080163d4
 800ac54:	080164a4 	.word	0x080164a4
 800ac58:	08016428 	.word	0x08016428
 800ac5c:	0801aac8 	.word	0x0801aac8

0800ac60 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800ac60:	b480      	push	{r7}
 800ac62:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800ac64:	bf00      	nop
 800ac66:	46bd      	mov	sp, r7
 800ac68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6c:	4770      	bx	lr
	...

0800ac70 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800ac70:	b580      	push	{r7, lr}
 800ac72:	b086      	sub	sp, #24
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	60f8      	str	r0, [r7, #12]
 800ac78:	60b9      	str	r1, [r7, #8]
 800ac7a:	607a      	str	r2, [r7, #4]
 800ac7c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d108      	bne.n	800ac96 <netif_add+0x26>
 800ac84:	4b57      	ldr	r3, [pc, #348]	; (800ade4 <netif_add+0x174>)
 800ac86:	f240 1227 	movw	r2, #295	; 0x127
 800ac8a:	4957      	ldr	r1, [pc, #348]	; (800ade8 <netif_add+0x178>)
 800ac8c:	4857      	ldr	r0, [pc, #348]	; (800adec <netif_add+0x17c>)
 800ac8e:	f009 ff43 	bl	8014b18 <iprintf>
 800ac92:	2300      	movs	r3, #0
 800ac94:	e0a2      	b.n	800addc <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800ac96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d108      	bne.n	800acae <netif_add+0x3e>
 800ac9c:	4b51      	ldr	r3, [pc, #324]	; (800ade4 <netif_add+0x174>)
 800ac9e:	f44f 7294 	mov.w	r2, #296	; 0x128
 800aca2:	4953      	ldr	r1, [pc, #332]	; (800adf0 <netif_add+0x180>)
 800aca4:	4851      	ldr	r0, [pc, #324]	; (800adec <netif_add+0x17c>)
 800aca6:	f009 ff37 	bl	8014b18 <iprintf>
 800acaa:	2300      	movs	r3, #0
 800acac:	e096      	b.n	800addc <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800acae:	68bb      	ldr	r3, [r7, #8]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d101      	bne.n	800acb8 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800acb4:	4b4f      	ldr	r3, [pc, #316]	; (800adf4 <netif_add+0x184>)
 800acb6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d101      	bne.n	800acc2 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800acbe:	4b4d      	ldr	r3, [pc, #308]	; (800adf4 <netif_add+0x184>)
 800acc0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800acc2:	683b      	ldr	r3, [r7, #0]
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d101      	bne.n	800accc <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800acc8:	4b4a      	ldr	r3, [pc, #296]	; (800adf4 <netif_add+0x184>)
 800acca:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	2200      	movs	r2, #0
 800acd0:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	2200      	movs	r2, #0
 800acd6:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	2200      	movs	r2, #0
 800acdc:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	4a45      	ldr	r2, [pc, #276]	; (800adf8 <netif_add+0x188>)
 800ace2:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	2200      	movs	r2, #0
 800ace8:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	2200      	movs	r2, #0
 800acee:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	2200      	movs	r2, #0
 800acf6:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	6a3a      	ldr	r2, [r7, #32]
 800acfc:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800acfe:	4b3f      	ldr	r3, [pc, #252]	; (800adfc <netif_add+0x18c>)
 800ad00:	781a      	ldrb	r2, [r3, #0]
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ad0c:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800ad0e:	683b      	ldr	r3, [r7, #0]
 800ad10:	687a      	ldr	r2, [r7, #4]
 800ad12:	68b9      	ldr	r1, [r7, #8]
 800ad14:	68f8      	ldr	r0, [r7, #12]
 800ad16:	f000 f913 	bl	800af40 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800ad1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad1c:	68f8      	ldr	r0, [r7, #12]
 800ad1e:	4798      	blx	r3
 800ad20:	4603      	mov	r3, r0
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d001      	beq.n	800ad2a <netif_add+0xba>
    return NULL;
 800ad26:	2300      	movs	r3, #0
 800ad28:	e058      	b.n	800addc <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ad30:	2bff      	cmp	r3, #255	; 0xff
 800ad32:	d103      	bne.n	800ad3c <netif_add+0xcc>
        netif->num = 0;
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	2200      	movs	r2, #0
 800ad38:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800ad40:	4b2f      	ldr	r3, [pc, #188]	; (800ae00 <netif_add+0x190>)
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	617b      	str	r3, [r7, #20]
 800ad46:	e02b      	b.n	800ada0 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800ad48:	697a      	ldr	r2, [r7, #20]
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	429a      	cmp	r2, r3
 800ad4e:	d106      	bne.n	800ad5e <netif_add+0xee>
 800ad50:	4b24      	ldr	r3, [pc, #144]	; (800ade4 <netif_add+0x174>)
 800ad52:	f240 128b 	movw	r2, #395	; 0x18b
 800ad56:	492b      	ldr	r1, [pc, #172]	; (800ae04 <netif_add+0x194>)
 800ad58:	4824      	ldr	r0, [pc, #144]	; (800adec <netif_add+0x17c>)
 800ad5a:	f009 fedd 	bl	8014b18 <iprintf>
        num_netifs++;
 800ad5e:	693b      	ldr	r3, [r7, #16]
 800ad60:	3301      	adds	r3, #1
 800ad62:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800ad64:	693b      	ldr	r3, [r7, #16]
 800ad66:	2bff      	cmp	r3, #255	; 0xff
 800ad68:	dd06      	ble.n	800ad78 <netif_add+0x108>
 800ad6a:	4b1e      	ldr	r3, [pc, #120]	; (800ade4 <netif_add+0x174>)
 800ad6c:	f240 128d 	movw	r2, #397	; 0x18d
 800ad70:	4925      	ldr	r1, [pc, #148]	; (800ae08 <netif_add+0x198>)
 800ad72:	481e      	ldr	r0, [pc, #120]	; (800adec <netif_add+0x17c>)
 800ad74:	f009 fed0 	bl	8014b18 <iprintf>
        if (netif2->num == netif->num) {
 800ad78:	697b      	ldr	r3, [r7, #20]
 800ad7a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ad84:	429a      	cmp	r2, r3
 800ad86:	d108      	bne.n	800ad9a <netif_add+0x12a>
          netif->num++;
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ad8e:	3301      	adds	r3, #1
 800ad90:	b2da      	uxtb	r2, r3
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800ad98:	e005      	b.n	800ada6 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800ad9a:	697b      	ldr	r3, [r7, #20]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	617b      	str	r3, [r7, #20]
 800ada0:	697b      	ldr	r3, [r7, #20]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d1d0      	bne.n	800ad48 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800ada6:	697b      	ldr	r3, [r7, #20]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d1be      	bne.n	800ad2a <netif_add+0xba>
  }
  if (netif->num == 254) {
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800adb2:	2bfe      	cmp	r3, #254	; 0xfe
 800adb4:	d103      	bne.n	800adbe <netif_add+0x14e>
    netif_num = 0;
 800adb6:	4b11      	ldr	r3, [pc, #68]	; (800adfc <netif_add+0x18c>)
 800adb8:	2200      	movs	r2, #0
 800adba:	701a      	strb	r2, [r3, #0]
 800adbc:	e006      	b.n	800adcc <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800adc4:	3301      	adds	r3, #1
 800adc6:	b2da      	uxtb	r2, r3
 800adc8:	4b0c      	ldr	r3, [pc, #48]	; (800adfc <netif_add+0x18c>)
 800adca:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800adcc:	4b0c      	ldr	r3, [pc, #48]	; (800ae00 <netif_add+0x190>)
 800adce:	681a      	ldr	r2, [r3, #0]
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800add4:	4a0a      	ldr	r2, [pc, #40]	; (800ae00 <netif_add+0x190>)
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800adda:	68fb      	ldr	r3, [r7, #12]
}
 800addc:	4618      	mov	r0, r3
 800adde:	3718      	adds	r7, #24
 800ade0:	46bd      	mov	sp, r7
 800ade2:	bd80      	pop	{r7, pc}
 800ade4:	080164c0 	.word	0x080164c0
 800ade8:	08016554 	.word	0x08016554
 800adec:	08016510 	.word	0x08016510
 800adf0:	08016570 	.word	0x08016570
 800adf4:	0801ab2c 	.word	0x0801ab2c
 800adf8:	0800b21b 	.word	0x0800b21b
 800adfc:	20008ba0 	.word	0x20008ba0
 800ae00:	20008b98 	.word	0x20008b98
 800ae04:	08016594 	.word	0x08016594
 800ae08:	080165a8 	.word	0x080165a8

0800ae0c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800ae0c:	b580      	push	{r7, lr}
 800ae0e:	b082      	sub	sp, #8
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	6078      	str	r0, [r7, #4]
 800ae14:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800ae16:	6839      	ldr	r1, [r7, #0]
 800ae18:	6878      	ldr	r0, [r7, #4]
 800ae1a:	f002 fde3 	bl	800d9e4 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800ae1e:	6839      	ldr	r1, [r7, #0]
 800ae20:	6878      	ldr	r0, [r7, #4]
 800ae22:	f007 fb1f 	bl	8012464 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800ae26:	bf00      	nop
 800ae28:	3708      	adds	r7, #8
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	bd80      	pop	{r7, pc}
	...

0800ae30 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800ae30:	b580      	push	{r7, lr}
 800ae32:	b086      	sub	sp, #24
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	60f8      	str	r0, [r7, #12]
 800ae38:	60b9      	str	r1, [r7, #8]
 800ae3a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800ae3c:	68bb      	ldr	r3, [r7, #8]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d106      	bne.n	800ae50 <netif_do_set_ipaddr+0x20>
 800ae42:	4b1d      	ldr	r3, [pc, #116]	; (800aeb8 <netif_do_set_ipaddr+0x88>)
 800ae44:	f240 12cb 	movw	r2, #459	; 0x1cb
 800ae48:	491c      	ldr	r1, [pc, #112]	; (800aebc <netif_do_set_ipaddr+0x8c>)
 800ae4a:	481d      	ldr	r0, [pc, #116]	; (800aec0 <netif_do_set_ipaddr+0x90>)
 800ae4c:	f009 fe64 	bl	8014b18 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d106      	bne.n	800ae64 <netif_do_set_ipaddr+0x34>
 800ae56:	4b18      	ldr	r3, [pc, #96]	; (800aeb8 <netif_do_set_ipaddr+0x88>)
 800ae58:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800ae5c:	4917      	ldr	r1, [pc, #92]	; (800aebc <netif_do_set_ipaddr+0x8c>)
 800ae5e:	4818      	ldr	r0, [pc, #96]	; (800aec0 <netif_do_set_ipaddr+0x90>)
 800ae60:	f009 fe5a 	bl	8014b18 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800ae64:	68bb      	ldr	r3, [r7, #8]
 800ae66:	681a      	ldr	r2, [r3, #0]
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	3304      	adds	r3, #4
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	429a      	cmp	r2, r3
 800ae70:	d01c      	beq.n	800aeac <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800ae72:	68bb      	ldr	r3, [r7, #8]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	3304      	adds	r3, #4
 800ae7c:	681a      	ldr	r2, [r3, #0]
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800ae82:	f107 0314 	add.w	r3, r7, #20
 800ae86:	4619      	mov	r1, r3
 800ae88:	6878      	ldr	r0, [r7, #4]
 800ae8a:	f7ff ffbf 	bl	800ae0c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800ae8e:	68bb      	ldr	r3, [r7, #8]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d002      	beq.n	800ae9a <netif_do_set_ipaddr+0x6a>
 800ae94:	68bb      	ldr	r3, [r7, #8]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	e000      	b.n	800ae9c <netif_do_set_ipaddr+0x6c>
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	68fa      	ldr	r2, [r7, #12]
 800ae9e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800aea0:	2101      	movs	r1, #1
 800aea2:	68f8      	ldr	r0, [r7, #12]
 800aea4:	f000 f8d2 	bl	800b04c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800aea8:	2301      	movs	r3, #1
 800aeaa:	e000      	b.n	800aeae <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800aeac:	2300      	movs	r3, #0
}
 800aeae:	4618      	mov	r0, r3
 800aeb0:	3718      	adds	r7, #24
 800aeb2:	46bd      	mov	sp, r7
 800aeb4:	bd80      	pop	{r7, pc}
 800aeb6:	bf00      	nop
 800aeb8:	080164c0 	.word	0x080164c0
 800aebc:	080165d8 	.word	0x080165d8
 800aec0:	08016510 	.word	0x08016510

0800aec4 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800aec4:	b480      	push	{r7}
 800aec6:	b085      	sub	sp, #20
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	60f8      	str	r0, [r7, #12]
 800aecc:	60b9      	str	r1, [r7, #8]
 800aece:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800aed0:	68bb      	ldr	r3, [r7, #8]
 800aed2:	681a      	ldr	r2, [r3, #0]
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	3308      	adds	r3, #8
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	429a      	cmp	r2, r3
 800aedc:	d00a      	beq.n	800aef4 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800aede:	68bb      	ldr	r3, [r7, #8]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d002      	beq.n	800aeea <netif_do_set_netmask+0x26>
 800aee4:	68bb      	ldr	r3, [r7, #8]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	e000      	b.n	800aeec <netif_do_set_netmask+0x28>
 800aeea:	2300      	movs	r3, #0
 800aeec:	68fa      	ldr	r2, [r7, #12]
 800aeee:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800aef0:	2301      	movs	r3, #1
 800aef2:	e000      	b.n	800aef6 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800aef4:	2300      	movs	r3, #0
}
 800aef6:	4618      	mov	r0, r3
 800aef8:	3714      	adds	r7, #20
 800aefa:	46bd      	mov	sp, r7
 800aefc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af00:	4770      	bx	lr

0800af02 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800af02:	b480      	push	{r7}
 800af04:	b085      	sub	sp, #20
 800af06:	af00      	add	r7, sp, #0
 800af08:	60f8      	str	r0, [r7, #12]
 800af0a:	60b9      	str	r1, [r7, #8]
 800af0c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800af0e:	68bb      	ldr	r3, [r7, #8]
 800af10:	681a      	ldr	r2, [r3, #0]
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	330c      	adds	r3, #12
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	429a      	cmp	r2, r3
 800af1a:	d00a      	beq.n	800af32 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800af1c:	68bb      	ldr	r3, [r7, #8]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d002      	beq.n	800af28 <netif_do_set_gw+0x26>
 800af22:	68bb      	ldr	r3, [r7, #8]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	e000      	b.n	800af2a <netif_do_set_gw+0x28>
 800af28:	2300      	movs	r3, #0
 800af2a:	68fa      	ldr	r2, [r7, #12]
 800af2c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800af2e:	2301      	movs	r3, #1
 800af30:	e000      	b.n	800af34 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800af32:	2300      	movs	r3, #0
}
 800af34:	4618      	mov	r0, r3
 800af36:	3714      	adds	r7, #20
 800af38:	46bd      	mov	sp, r7
 800af3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af3e:	4770      	bx	lr

0800af40 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800af40:	b580      	push	{r7, lr}
 800af42:	b088      	sub	sp, #32
 800af44:	af00      	add	r7, sp, #0
 800af46:	60f8      	str	r0, [r7, #12]
 800af48:	60b9      	str	r1, [r7, #8]
 800af4a:	607a      	str	r2, [r7, #4]
 800af4c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800af4e:	2300      	movs	r3, #0
 800af50:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800af52:	2300      	movs	r3, #0
 800af54:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800af56:	68bb      	ldr	r3, [r7, #8]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d101      	bne.n	800af60 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800af5c:	4b1c      	ldr	r3, [pc, #112]	; (800afd0 <netif_set_addr+0x90>)
 800af5e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	2b00      	cmp	r3, #0
 800af64:	d101      	bne.n	800af6a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800af66:	4b1a      	ldr	r3, [pc, #104]	; (800afd0 <netif_set_addr+0x90>)
 800af68:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800af6a:	683b      	ldr	r3, [r7, #0]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d101      	bne.n	800af74 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800af70:	4b17      	ldr	r3, [pc, #92]	; (800afd0 <netif_set_addr+0x90>)
 800af72:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800af74:	68bb      	ldr	r3, [r7, #8]
 800af76:	2b00      	cmp	r3, #0
 800af78:	d003      	beq.n	800af82 <netif_set_addr+0x42>
 800af7a:	68bb      	ldr	r3, [r7, #8]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d101      	bne.n	800af86 <netif_set_addr+0x46>
 800af82:	2301      	movs	r3, #1
 800af84:	e000      	b.n	800af88 <netif_set_addr+0x48>
 800af86:	2300      	movs	r3, #0
 800af88:	617b      	str	r3, [r7, #20]
  if (remove) {
 800af8a:	697b      	ldr	r3, [r7, #20]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d006      	beq.n	800af9e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800af90:	f107 0310 	add.w	r3, r7, #16
 800af94:	461a      	mov	r2, r3
 800af96:	68b9      	ldr	r1, [r7, #8]
 800af98:	68f8      	ldr	r0, [r7, #12]
 800af9a:	f7ff ff49 	bl	800ae30 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800af9e:	69fa      	ldr	r2, [r7, #28]
 800afa0:	6879      	ldr	r1, [r7, #4]
 800afa2:	68f8      	ldr	r0, [r7, #12]
 800afa4:	f7ff ff8e 	bl	800aec4 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800afa8:	69ba      	ldr	r2, [r7, #24]
 800afaa:	6839      	ldr	r1, [r7, #0]
 800afac:	68f8      	ldr	r0, [r7, #12]
 800afae:	f7ff ffa8 	bl	800af02 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800afb2:	697b      	ldr	r3, [r7, #20]
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d106      	bne.n	800afc6 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800afb8:	f107 0310 	add.w	r3, r7, #16
 800afbc:	461a      	mov	r2, r3
 800afbe:	68b9      	ldr	r1, [r7, #8]
 800afc0:	68f8      	ldr	r0, [r7, #12]
 800afc2:	f7ff ff35 	bl	800ae30 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800afc6:	bf00      	nop
 800afc8:	3720      	adds	r7, #32
 800afca:	46bd      	mov	sp, r7
 800afcc:	bd80      	pop	{r7, pc}
 800afce:	bf00      	nop
 800afd0:	0801ab2c 	.word	0x0801ab2c

0800afd4 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800afd4:	b480      	push	{r7}
 800afd6:	b083      	sub	sp, #12
 800afd8:	af00      	add	r7, sp, #0
 800afda:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800afdc:	4a04      	ldr	r2, [pc, #16]	; (800aff0 <netif_set_default+0x1c>)
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800afe2:	bf00      	nop
 800afe4:	370c      	adds	r7, #12
 800afe6:	46bd      	mov	sp, r7
 800afe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afec:	4770      	bx	lr
 800afee:	bf00      	nop
 800aff0:	20008b9c 	.word	0x20008b9c

0800aff4 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800aff4:	b580      	push	{r7, lr}
 800aff6:	b082      	sub	sp, #8
 800aff8:	af00      	add	r7, sp, #0
 800affa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	2b00      	cmp	r3, #0
 800b000:	d107      	bne.n	800b012 <netif_set_up+0x1e>
 800b002:	4b0f      	ldr	r3, [pc, #60]	; (800b040 <netif_set_up+0x4c>)
 800b004:	f44f 7254 	mov.w	r2, #848	; 0x350
 800b008:	490e      	ldr	r1, [pc, #56]	; (800b044 <netif_set_up+0x50>)
 800b00a:	480f      	ldr	r0, [pc, #60]	; (800b048 <netif_set_up+0x54>)
 800b00c:	f009 fd84 	bl	8014b18 <iprintf>
 800b010:	e013      	b.n	800b03a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b018:	f003 0301 	and.w	r3, r3, #1
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d10c      	bne.n	800b03a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b026:	f043 0301 	orr.w	r3, r3, #1
 800b02a:	b2da      	uxtb	r2, r3
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800b032:	2103      	movs	r1, #3
 800b034:	6878      	ldr	r0, [r7, #4]
 800b036:	f000 f809 	bl	800b04c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800b03a:	3708      	adds	r7, #8
 800b03c:	46bd      	mov	sp, r7
 800b03e:	bd80      	pop	{r7, pc}
 800b040:	080164c0 	.word	0x080164c0
 800b044:	08016648 	.word	0x08016648
 800b048:	08016510 	.word	0x08016510

0800b04c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800b04c:	b580      	push	{r7, lr}
 800b04e:	b082      	sub	sp, #8
 800b050:	af00      	add	r7, sp, #0
 800b052:	6078      	str	r0, [r7, #4]
 800b054:	460b      	mov	r3, r1
 800b056:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d106      	bne.n	800b06c <netif_issue_reports+0x20>
 800b05e:	4b18      	ldr	r3, [pc, #96]	; (800b0c0 <netif_issue_reports+0x74>)
 800b060:	f240 326d 	movw	r2, #877	; 0x36d
 800b064:	4917      	ldr	r1, [pc, #92]	; (800b0c4 <netif_issue_reports+0x78>)
 800b066:	4818      	ldr	r0, [pc, #96]	; (800b0c8 <netif_issue_reports+0x7c>)
 800b068:	f009 fd56 	bl	8014b18 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b072:	f003 0304 	and.w	r3, r3, #4
 800b076:	2b00      	cmp	r3, #0
 800b078:	d01e      	beq.n	800b0b8 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b080:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800b084:	2b00      	cmp	r3, #0
 800b086:	d017      	beq.n	800b0b8 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800b088:	78fb      	ldrb	r3, [r7, #3]
 800b08a:	f003 0301 	and.w	r3, r3, #1
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d013      	beq.n	800b0ba <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	3304      	adds	r3, #4
 800b096:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d00e      	beq.n	800b0ba <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b0a2:	f003 0308 	and.w	r3, r3, #8
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d007      	beq.n	800b0ba <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	3304      	adds	r3, #4
 800b0ae:	4619      	mov	r1, r3
 800b0b0:	6878      	ldr	r0, [r7, #4]
 800b0b2:	f008 f941 	bl	8013338 <etharp_request>
 800b0b6:	e000      	b.n	800b0ba <netif_issue_reports+0x6e>
    return;
 800b0b8:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800b0ba:	3708      	adds	r7, #8
 800b0bc:	46bd      	mov	sp, r7
 800b0be:	bd80      	pop	{r7, pc}
 800b0c0:	080164c0 	.word	0x080164c0
 800b0c4:	08016664 	.word	0x08016664
 800b0c8:	08016510 	.word	0x08016510

0800b0cc <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800b0cc:	b580      	push	{r7, lr}
 800b0ce:	b082      	sub	sp, #8
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d107      	bne.n	800b0ea <netif_set_down+0x1e>
 800b0da:	4b12      	ldr	r3, [pc, #72]	; (800b124 <netif_set_down+0x58>)
 800b0dc:	f240 329b 	movw	r2, #923	; 0x39b
 800b0e0:	4911      	ldr	r1, [pc, #68]	; (800b128 <netif_set_down+0x5c>)
 800b0e2:	4812      	ldr	r0, [pc, #72]	; (800b12c <netif_set_down+0x60>)
 800b0e4:	f009 fd18 	bl	8014b18 <iprintf>
 800b0e8:	e019      	b.n	800b11e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b0f0:	f003 0301 	and.w	r3, r3, #1
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d012      	beq.n	800b11e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b0fe:	f023 0301 	bic.w	r3, r3, #1
 800b102:	b2da      	uxtb	r2, r3
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b110:	f003 0308 	and.w	r3, r3, #8
 800b114:	2b00      	cmp	r3, #0
 800b116:	d002      	beq.n	800b11e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800b118:	6878      	ldr	r0, [r7, #4]
 800b11a:	f007 fccb 	bl	8012ab4 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800b11e:	3708      	adds	r7, #8
 800b120:	46bd      	mov	sp, r7
 800b122:	bd80      	pop	{r7, pc}
 800b124:	080164c0 	.word	0x080164c0
 800b128:	08016688 	.word	0x08016688
 800b12c:	08016510 	.word	0x08016510

0800b130 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800b130:	b580      	push	{r7, lr}
 800b132:	b082      	sub	sp, #8
 800b134:	af00      	add	r7, sp, #0
 800b136:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d107      	bne.n	800b14e <netif_set_link_up+0x1e>
 800b13e:	4b13      	ldr	r3, [pc, #76]	; (800b18c <netif_set_link_up+0x5c>)
 800b140:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800b144:	4912      	ldr	r1, [pc, #72]	; (800b190 <netif_set_link_up+0x60>)
 800b146:	4813      	ldr	r0, [pc, #76]	; (800b194 <netif_set_link_up+0x64>)
 800b148:	f009 fce6 	bl	8014b18 <iprintf>
 800b14c:	e01b      	b.n	800b186 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b154:	f003 0304 	and.w	r3, r3, #4
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d114      	bne.n	800b186 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b162:	f043 0304 	orr.w	r3, r3, #4
 800b166:	b2da      	uxtb	r2, r3
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800b16e:	2103      	movs	r1, #3
 800b170:	6878      	ldr	r0, [r7, #4]
 800b172:	f7ff ff6b 	bl	800b04c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	69db      	ldr	r3, [r3, #28]
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d003      	beq.n	800b186 <netif_set_link_up+0x56>
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	69db      	ldr	r3, [r3, #28]
 800b182:	6878      	ldr	r0, [r7, #4]
 800b184:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800b186:	3708      	adds	r7, #8
 800b188:	46bd      	mov	sp, r7
 800b18a:	bd80      	pop	{r7, pc}
 800b18c:	080164c0 	.word	0x080164c0
 800b190:	080166a8 	.word	0x080166a8
 800b194:	08016510 	.word	0x08016510

0800b198 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800b198:	b580      	push	{r7, lr}
 800b19a:	b082      	sub	sp, #8
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d107      	bne.n	800b1b6 <netif_set_link_down+0x1e>
 800b1a6:	4b11      	ldr	r3, [pc, #68]	; (800b1ec <netif_set_link_down+0x54>)
 800b1a8:	f240 4206 	movw	r2, #1030	; 0x406
 800b1ac:	4910      	ldr	r1, [pc, #64]	; (800b1f0 <netif_set_link_down+0x58>)
 800b1ae:	4811      	ldr	r0, [pc, #68]	; (800b1f4 <netif_set_link_down+0x5c>)
 800b1b0:	f009 fcb2 	bl	8014b18 <iprintf>
 800b1b4:	e017      	b.n	800b1e6 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b1bc:	f003 0304 	and.w	r3, r3, #4
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d010      	beq.n	800b1e6 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b1ca:	f023 0304 	bic.w	r3, r3, #4
 800b1ce:	b2da      	uxtb	r2, r3
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	69db      	ldr	r3, [r3, #28]
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d003      	beq.n	800b1e6 <netif_set_link_down+0x4e>
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	69db      	ldr	r3, [r3, #28]
 800b1e2:	6878      	ldr	r0, [r7, #4]
 800b1e4:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800b1e6:	3708      	adds	r7, #8
 800b1e8:	46bd      	mov	sp, r7
 800b1ea:	bd80      	pop	{r7, pc}
 800b1ec:	080164c0 	.word	0x080164c0
 800b1f0:	080166cc 	.word	0x080166cc
 800b1f4:	08016510 	.word	0x08016510

0800b1f8 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800b1f8:	b480      	push	{r7}
 800b1fa:	b083      	sub	sp, #12
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	6078      	str	r0, [r7, #4]
 800b200:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d002      	beq.n	800b20e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	683a      	ldr	r2, [r7, #0]
 800b20c:	61da      	str	r2, [r3, #28]
  }
}
 800b20e:	bf00      	nop
 800b210:	370c      	adds	r7, #12
 800b212:	46bd      	mov	sp, r7
 800b214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b218:	4770      	bx	lr

0800b21a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800b21a:	b480      	push	{r7}
 800b21c:	b085      	sub	sp, #20
 800b21e:	af00      	add	r7, sp, #0
 800b220:	60f8      	str	r0, [r7, #12]
 800b222:	60b9      	str	r1, [r7, #8]
 800b224:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800b226:	f06f 030b 	mvn.w	r3, #11
}
 800b22a:	4618      	mov	r0, r3
 800b22c:	3714      	adds	r7, #20
 800b22e:	46bd      	mov	sp, r7
 800b230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b234:	4770      	bx	lr
	...

0800b238 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800b238:	b480      	push	{r7}
 800b23a:	b085      	sub	sp, #20
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	4603      	mov	r3, r0
 800b240:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800b242:	79fb      	ldrb	r3, [r7, #7]
 800b244:	2b00      	cmp	r3, #0
 800b246:	d013      	beq.n	800b270 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800b248:	4b0d      	ldr	r3, [pc, #52]	; (800b280 <netif_get_by_index+0x48>)
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	60fb      	str	r3, [r7, #12]
 800b24e:	e00c      	b.n	800b26a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b256:	3301      	adds	r3, #1
 800b258:	b2db      	uxtb	r3, r3
 800b25a:	79fa      	ldrb	r2, [r7, #7]
 800b25c:	429a      	cmp	r2, r3
 800b25e:	d101      	bne.n	800b264 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	e006      	b.n	800b272 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	60fb      	str	r3, [r7, #12]
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d1ef      	bne.n	800b250 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800b270:	2300      	movs	r3, #0
}
 800b272:	4618      	mov	r0, r3
 800b274:	3714      	adds	r7, #20
 800b276:	46bd      	mov	sp, r7
 800b278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27c:	4770      	bx	lr
 800b27e:	bf00      	nop
 800b280:	20008b98 	.word	0x20008b98

0800b284 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800b284:	b580      	push	{r7, lr}
 800b286:	b082      	sub	sp, #8
 800b288:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800b28a:	4b0c      	ldr	r3, [pc, #48]	; (800b2bc <pbuf_free_ooseq+0x38>)
 800b28c:	2200      	movs	r2, #0
 800b28e:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800b290:	4b0b      	ldr	r3, [pc, #44]	; (800b2c0 <pbuf_free_ooseq+0x3c>)
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	607b      	str	r3, [r7, #4]
 800b296:	e00a      	b.n	800b2ae <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d003      	beq.n	800b2a8 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800b2a0:	6878      	ldr	r0, [r7, #4]
 800b2a2:	f002 fbdd 	bl	800da60 <tcp_free_ooseq>
      return;
 800b2a6:	e005      	b.n	800b2b4 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	68db      	ldr	r3, [r3, #12]
 800b2ac:	607b      	str	r3, [r7, #4]
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d1f1      	bne.n	800b298 <pbuf_free_ooseq+0x14>
    }
  }
}
 800b2b4:	3708      	adds	r7, #8
 800b2b6:	46bd      	mov	sp, r7
 800b2b8:	bd80      	pop	{r7, pc}
 800b2ba:	bf00      	nop
 800b2bc:	20008ba1 	.word	0x20008ba1
 800b2c0:	20008bb0 	.word	0x20008bb0

0800b2c4 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800b2c4:	b480      	push	{r7}
 800b2c6:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800b2c8:	4b03      	ldr	r3, [pc, #12]	; (800b2d8 <pbuf_pool_is_empty+0x14>)
 800b2ca:	2201      	movs	r2, #1
 800b2cc:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800b2ce:	bf00      	nop
 800b2d0:	46bd      	mov	sp, r7
 800b2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d6:	4770      	bx	lr
 800b2d8:	20008ba1 	.word	0x20008ba1

0800b2dc <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800b2dc:	b480      	push	{r7}
 800b2de:	b085      	sub	sp, #20
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	60f8      	str	r0, [r7, #12]
 800b2e4:	60b9      	str	r1, [r7, #8]
 800b2e6:	4611      	mov	r1, r2
 800b2e8:	461a      	mov	r2, r3
 800b2ea:	460b      	mov	r3, r1
 800b2ec:	80fb      	strh	r3, [r7, #6]
 800b2ee:	4613      	mov	r3, r2
 800b2f0:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	2200      	movs	r2, #0
 800b2f6:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	68ba      	ldr	r2, [r7, #8]
 800b2fc:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	88fa      	ldrh	r2, [r7, #6]
 800b302:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	88ba      	ldrh	r2, [r7, #4]
 800b308:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800b30a:	8b3b      	ldrh	r3, [r7, #24]
 800b30c:	b2da      	uxtb	r2, r3
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	7f3a      	ldrb	r2, [r7, #28]
 800b316:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	2201      	movs	r2, #1
 800b31c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	2200      	movs	r2, #0
 800b322:	73da      	strb	r2, [r3, #15]
}
 800b324:	bf00      	nop
 800b326:	3714      	adds	r7, #20
 800b328:	46bd      	mov	sp, r7
 800b32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32e:	4770      	bx	lr

0800b330 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800b330:	b580      	push	{r7, lr}
 800b332:	b08c      	sub	sp, #48	; 0x30
 800b334:	af02      	add	r7, sp, #8
 800b336:	4603      	mov	r3, r0
 800b338:	71fb      	strb	r3, [r7, #7]
 800b33a:	460b      	mov	r3, r1
 800b33c:	80bb      	strh	r3, [r7, #4]
 800b33e:	4613      	mov	r3, r2
 800b340:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800b342:	79fb      	ldrb	r3, [r7, #7]
 800b344:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800b346:	887b      	ldrh	r3, [r7, #2]
 800b348:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800b34c:	d07f      	beq.n	800b44e <pbuf_alloc+0x11e>
 800b34e:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800b352:	f300 80c8 	bgt.w	800b4e6 <pbuf_alloc+0x1b6>
 800b356:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800b35a:	d010      	beq.n	800b37e <pbuf_alloc+0x4e>
 800b35c:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800b360:	f300 80c1 	bgt.w	800b4e6 <pbuf_alloc+0x1b6>
 800b364:	2b01      	cmp	r3, #1
 800b366:	d002      	beq.n	800b36e <pbuf_alloc+0x3e>
 800b368:	2b41      	cmp	r3, #65	; 0x41
 800b36a:	f040 80bc 	bne.w	800b4e6 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800b36e:	887a      	ldrh	r2, [r7, #2]
 800b370:	88bb      	ldrh	r3, [r7, #4]
 800b372:	4619      	mov	r1, r3
 800b374:	2000      	movs	r0, #0
 800b376:	f000 f8d1 	bl	800b51c <pbuf_alloc_reference>
 800b37a:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800b37c:	e0bd      	b.n	800b4fa <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800b37e:	2300      	movs	r3, #0
 800b380:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800b382:	2300      	movs	r3, #0
 800b384:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800b386:	88bb      	ldrh	r3, [r7, #4]
 800b388:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800b38a:	2008      	movs	r0, #8
 800b38c:	f7ff fbce 	bl	800ab2c <memp_malloc>
 800b390:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800b392:	693b      	ldr	r3, [r7, #16]
 800b394:	2b00      	cmp	r3, #0
 800b396:	d109      	bne.n	800b3ac <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800b398:	f7ff ff94 	bl	800b2c4 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800b39c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d002      	beq.n	800b3a8 <pbuf_alloc+0x78>
            pbuf_free(p);
 800b3a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b3a4:	f000 faa8 	bl	800b8f8 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800b3a8:	2300      	movs	r3, #0
 800b3aa:	e0a7      	b.n	800b4fc <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800b3ac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b3ae:	3303      	adds	r3, #3
 800b3b0:	b29b      	uxth	r3, r3
 800b3b2:	f023 0303 	bic.w	r3, r3, #3
 800b3b6:	b29b      	uxth	r3, r3
 800b3b8:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800b3bc:	b29b      	uxth	r3, r3
 800b3be:	8b7a      	ldrh	r2, [r7, #26]
 800b3c0:	4293      	cmp	r3, r2
 800b3c2:	bf28      	it	cs
 800b3c4:	4613      	movcs	r3, r2
 800b3c6:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800b3c8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b3ca:	3310      	adds	r3, #16
 800b3cc:	693a      	ldr	r2, [r7, #16]
 800b3ce:	4413      	add	r3, r2
 800b3d0:	3303      	adds	r3, #3
 800b3d2:	f023 0303 	bic.w	r3, r3, #3
 800b3d6:	4618      	mov	r0, r3
 800b3d8:	89f9      	ldrh	r1, [r7, #14]
 800b3da:	8b7a      	ldrh	r2, [r7, #26]
 800b3dc:	2300      	movs	r3, #0
 800b3de:	9301      	str	r3, [sp, #4]
 800b3e0:	887b      	ldrh	r3, [r7, #2]
 800b3e2:	9300      	str	r3, [sp, #0]
 800b3e4:	460b      	mov	r3, r1
 800b3e6:	4601      	mov	r1, r0
 800b3e8:	6938      	ldr	r0, [r7, #16]
 800b3ea:	f7ff ff77 	bl	800b2dc <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800b3ee:	693b      	ldr	r3, [r7, #16]
 800b3f0:	685b      	ldr	r3, [r3, #4]
 800b3f2:	f003 0303 	and.w	r3, r3, #3
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d006      	beq.n	800b408 <pbuf_alloc+0xd8>
 800b3fa:	4b42      	ldr	r3, [pc, #264]	; (800b504 <pbuf_alloc+0x1d4>)
 800b3fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b400:	4941      	ldr	r1, [pc, #260]	; (800b508 <pbuf_alloc+0x1d8>)
 800b402:	4842      	ldr	r0, [pc, #264]	; (800b50c <pbuf_alloc+0x1dc>)
 800b404:	f009 fb88 	bl	8014b18 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800b408:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b40a:	3303      	adds	r3, #3
 800b40c:	f023 0303 	bic.w	r3, r3, #3
 800b410:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800b414:	d106      	bne.n	800b424 <pbuf_alloc+0xf4>
 800b416:	4b3b      	ldr	r3, [pc, #236]	; (800b504 <pbuf_alloc+0x1d4>)
 800b418:	f44f 7281 	mov.w	r2, #258	; 0x102
 800b41c:	493c      	ldr	r1, [pc, #240]	; (800b510 <pbuf_alloc+0x1e0>)
 800b41e:	483b      	ldr	r0, [pc, #236]	; (800b50c <pbuf_alloc+0x1dc>)
 800b420:	f009 fb7a 	bl	8014b18 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800b424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b426:	2b00      	cmp	r3, #0
 800b428:	d102      	bne.n	800b430 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800b42a:	693b      	ldr	r3, [r7, #16]
 800b42c:	627b      	str	r3, [r7, #36]	; 0x24
 800b42e:	e002      	b.n	800b436 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800b430:	69fb      	ldr	r3, [r7, #28]
 800b432:	693a      	ldr	r2, [r7, #16]
 800b434:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800b436:	693b      	ldr	r3, [r7, #16]
 800b438:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800b43a:	8b7a      	ldrh	r2, [r7, #26]
 800b43c:	89fb      	ldrh	r3, [r7, #14]
 800b43e:	1ad3      	subs	r3, r2, r3
 800b440:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800b442:	2300      	movs	r3, #0
 800b444:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800b446:	8b7b      	ldrh	r3, [r7, #26]
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d19e      	bne.n	800b38a <pbuf_alloc+0x5a>
      break;
 800b44c:	e055      	b.n	800b4fa <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800b44e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b450:	3303      	adds	r3, #3
 800b452:	b29b      	uxth	r3, r3
 800b454:	f023 0303 	bic.w	r3, r3, #3
 800b458:	b29a      	uxth	r2, r3
 800b45a:	88bb      	ldrh	r3, [r7, #4]
 800b45c:	3303      	adds	r3, #3
 800b45e:	b29b      	uxth	r3, r3
 800b460:	f023 0303 	bic.w	r3, r3, #3
 800b464:	b29b      	uxth	r3, r3
 800b466:	4413      	add	r3, r2
 800b468:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800b46a:	8b3b      	ldrh	r3, [r7, #24]
 800b46c:	3310      	adds	r3, #16
 800b46e:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800b470:	8b3a      	ldrh	r2, [r7, #24]
 800b472:	88bb      	ldrh	r3, [r7, #4]
 800b474:	3303      	adds	r3, #3
 800b476:	f023 0303 	bic.w	r3, r3, #3
 800b47a:	429a      	cmp	r2, r3
 800b47c:	d306      	bcc.n	800b48c <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800b47e:	8afa      	ldrh	r2, [r7, #22]
 800b480:	88bb      	ldrh	r3, [r7, #4]
 800b482:	3303      	adds	r3, #3
 800b484:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800b488:	429a      	cmp	r2, r3
 800b48a:	d201      	bcs.n	800b490 <pbuf_alloc+0x160>
        return NULL;
 800b48c:	2300      	movs	r3, #0
 800b48e:	e035      	b.n	800b4fc <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800b490:	8afb      	ldrh	r3, [r7, #22]
 800b492:	4618      	mov	r0, r3
 800b494:	f7ff f9ba 	bl	800a80c <mem_malloc>
 800b498:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800b49a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d101      	bne.n	800b4a4 <pbuf_alloc+0x174>
        return NULL;
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	e02b      	b.n	800b4fc <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800b4a4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b4a6:	3310      	adds	r3, #16
 800b4a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b4aa:	4413      	add	r3, r2
 800b4ac:	3303      	adds	r3, #3
 800b4ae:	f023 0303 	bic.w	r3, r3, #3
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	88b9      	ldrh	r1, [r7, #4]
 800b4b6:	88ba      	ldrh	r2, [r7, #4]
 800b4b8:	2300      	movs	r3, #0
 800b4ba:	9301      	str	r3, [sp, #4]
 800b4bc:	887b      	ldrh	r3, [r7, #2]
 800b4be:	9300      	str	r3, [sp, #0]
 800b4c0:	460b      	mov	r3, r1
 800b4c2:	4601      	mov	r1, r0
 800b4c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b4c6:	f7ff ff09 	bl	800b2dc <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800b4ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4cc:	685b      	ldr	r3, [r3, #4]
 800b4ce:	f003 0303 	and.w	r3, r3, #3
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d010      	beq.n	800b4f8 <pbuf_alloc+0x1c8>
 800b4d6:	4b0b      	ldr	r3, [pc, #44]	; (800b504 <pbuf_alloc+0x1d4>)
 800b4d8:	f44f 7291 	mov.w	r2, #290	; 0x122
 800b4dc:	490d      	ldr	r1, [pc, #52]	; (800b514 <pbuf_alloc+0x1e4>)
 800b4de:	480b      	ldr	r0, [pc, #44]	; (800b50c <pbuf_alloc+0x1dc>)
 800b4e0:	f009 fb1a 	bl	8014b18 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800b4e4:	e008      	b.n	800b4f8 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800b4e6:	4b07      	ldr	r3, [pc, #28]	; (800b504 <pbuf_alloc+0x1d4>)
 800b4e8:	f240 1227 	movw	r2, #295	; 0x127
 800b4ec:	490a      	ldr	r1, [pc, #40]	; (800b518 <pbuf_alloc+0x1e8>)
 800b4ee:	4807      	ldr	r0, [pc, #28]	; (800b50c <pbuf_alloc+0x1dc>)
 800b4f0:	f009 fb12 	bl	8014b18 <iprintf>
      return NULL;
 800b4f4:	2300      	movs	r3, #0
 800b4f6:	e001      	b.n	800b4fc <pbuf_alloc+0x1cc>
      break;
 800b4f8:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800b4fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	3728      	adds	r7, #40	; 0x28
 800b500:	46bd      	mov	sp, r7
 800b502:	bd80      	pop	{r7, pc}
 800b504:	080166f0 	.word	0x080166f0
 800b508:	08016720 	.word	0x08016720
 800b50c:	08016750 	.word	0x08016750
 800b510:	08016778 	.word	0x08016778
 800b514:	080167ac 	.word	0x080167ac
 800b518:	080167d8 	.word	0x080167d8

0800b51c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800b51c:	b580      	push	{r7, lr}
 800b51e:	b086      	sub	sp, #24
 800b520:	af02      	add	r7, sp, #8
 800b522:	6078      	str	r0, [r7, #4]
 800b524:	460b      	mov	r3, r1
 800b526:	807b      	strh	r3, [r7, #2]
 800b528:	4613      	mov	r3, r2
 800b52a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800b52c:	883b      	ldrh	r3, [r7, #0]
 800b52e:	2b41      	cmp	r3, #65	; 0x41
 800b530:	d009      	beq.n	800b546 <pbuf_alloc_reference+0x2a>
 800b532:	883b      	ldrh	r3, [r7, #0]
 800b534:	2b01      	cmp	r3, #1
 800b536:	d006      	beq.n	800b546 <pbuf_alloc_reference+0x2a>
 800b538:	4b0f      	ldr	r3, [pc, #60]	; (800b578 <pbuf_alloc_reference+0x5c>)
 800b53a:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800b53e:	490f      	ldr	r1, [pc, #60]	; (800b57c <pbuf_alloc_reference+0x60>)
 800b540:	480f      	ldr	r0, [pc, #60]	; (800b580 <pbuf_alloc_reference+0x64>)
 800b542:	f009 fae9 	bl	8014b18 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800b546:	2007      	movs	r0, #7
 800b548:	f7ff faf0 	bl	800ab2c <memp_malloc>
 800b54c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	2b00      	cmp	r3, #0
 800b552:	d101      	bne.n	800b558 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800b554:	2300      	movs	r3, #0
 800b556:	e00b      	b.n	800b570 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800b558:	8879      	ldrh	r1, [r7, #2]
 800b55a:	887a      	ldrh	r2, [r7, #2]
 800b55c:	2300      	movs	r3, #0
 800b55e:	9301      	str	r3, [sp, #4]
 800b560:	883b      	ldrh	r3, [r7, #0]
 800b562:	9300      	str	r3, [sp, #0]
 800b564:	460b      	mov	r3, r1
 800b566:	6879      	ldr	r1, [r7, #4]
 800b568:	68f8      	ldr	r0, [r7, #12]
 800b56a:	f7ff feb7 	bl	800b2dc <pbuf_init_alloced_pbuf>
  return p;
 800b56e:	68fb      	ldr	r3, [r7, #12]
}
 800b570:	4618      	mov	r0, r3
 800b572:	3710      	adds	r7, #16
 800b574:	46bd      	mov	sp, r7
 800b576:	bd80      	pop	{r7, pc}
 800b578:	080166f0 	.word	0x080166f0
 800b57c:	080167f4 	.word	0x080167f4
 800b580:	08016750 	.word	0x08016750

0800b584 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800b584:	b580      	push	{r7, lr}
 800b586:	b088      	sub	sp, #32
 800b588:	af02      	add	r7, sp, #8
 800b58a:	607b      	str	r3, [r7, #4]
 800b58c:	4603      	mov	r3, r0
 800b58e:	73fb      	strb	r3, [r7, #15]
 800b590:	460b      	mov	r3, r1
 800b592:	81bb      	strh	r3, [r7, #12]
 800b594:	4613      	mov	r3, r2
 800b596:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800b598:	7bfb      	ldrb	r3, [r7, #15]
 800b59a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800b59c:	8a7b      	ldrh	r3, [r7, #18]
 800b59e:	3303      	adds	r3, #3
 800b5a0:	f023 0203 	bic.w	r2, r3, #3
 800b5a4:	89bb      	ldrh	r3, [r7, #12]
 800b5a6:	441a      	add	r2, r3
 800b5a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b5aa:	429a      	cmp	r2, r3
 800b5ac:	d901      	bls.n	800b5b2 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	e018      	b.n	800b5e4 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800b5b2:	6a3b      	ldr	r3, [r7, #32]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d007      	beq.n	800b5c8 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800b5b8:	8a7b      	ldrh	r3, [r7, #18]
 800b5ba:	3303      	adds	r3, #3
 800b5bc:	f023 0303 	bic.w	r3, r3, #3
 800b5c0:	6a3a      	ldr	r2, [r7, #32]
 800b5c2:	4413      	add	r3, r2
 800b5c4:	617b      	str	r3, [r7, #20]
 800b5c6:	e001      	b.n	800b5cc <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800b5c8:	2300      	movs	r3, #0
 800b5ca:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800b5cc:	6878      	ldr	r0, [r7, #4]
 800b5ce:	89b9      	ldrh	r1, [r7, #12]
 800b5d0:	89ba      	ldrh	r2, [r7, #12]
 800b5d2:	2302      	movs	r3, #2
 800b5d4:	9301      	str	r3, [sp, #4]
 800b5d6:	897b      	ldrh	r3, [r7, #10]
 800b5d8:	9300      	str	r3, [sp, #0]
 800b5da:	460b      	mov	r3, r1
 800b5dc:	6979      	ldr	r1, [r7, #20]
 800b5de:	f7ff fe7d 	bl	800b2dc <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800b5e2:	687b      	ldr	r3, [r7, #4]
}
 800b5e4:	4618      	mov	r0, r3
 800b5e6:	3718      	adds	r7, #24
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	bd80      	pop	{r7, pc}

0800b5ec <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	b084      	sub	sp, #16
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	6078      	str	r0, [r7, #4]
 800b5f4:	460b      	mov	r3, r1
 800b5f6:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d106      	bne.n	800b60c <pbuf_realloc+0x20>
 800b5fe:	4b3a      	ldr	r3, [pc, #232]	; (800b6e8 <pbuf_realloc+0xfc>)
 800b600:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800b604:	4939      	ldr	r1, [pc, #228]	; (800b6ec <pbuf_realloc+0x100>)
 800b606:	483a      	ldr	r0, [pc, #232]	; (800b6f0 <pbuf_realloc+0x104>)
 800b608:	f009 fa86 	bl	8014b18 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	891b      	ldrh	r3, [r3, #8]
 800b610:	887a      	ldrh	r2, [r7, #2]
 800b612:	429a      	cmp	r2, r3
 800b614:	d263      	bcs.n	800b6de <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	891a      	ldrh	r2, [r3, #8]
 800b61a:	887b      	ldrh	r3, [r7, #2]
 800b61c:	1ad3      	subs	r3, r2, r3
 800b61e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800b620:	887b      	ldrh	r3, [r7, #2]
 800b622:	817b      	strh	r3, [r7, #10]
  q = p;
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800b628:	e018      	b.n	800b65c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	895b      	ldrh	r3, [r3, #10]
 800b62e:	897a      	ldrh	r2, [r7, #10]
 800b630:	1ad3      	subs	r3, r2, r3
 800b632:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	891a      	ldrh	r2, [r3, #8]
 800b638:	893b      	ldrh	r3, [r7, #8]
 800b63a:	1ad3      	subs	r3, r2, r3
 800b63c:	b29a      	uxth	r2, r3
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d106      	bne.n	800b65c <pbuf_realloc+0x70>
 800b64e:	4b26      	ldr	r3, [pc, #152]	; (800b6e8 <pbuf_realloc+0xfc>)
 800b650:	f240 12af 	movw	r2, #431	; 0x1af
 800b654:	4927      	ldr	r1, [pc, #156]	; (800b6f4 <pbuf_realloc+0x108>)
 800b656:	4826      	ldr	r0, [pc, #152]	; (800b6f0 <pbuf_realloc+0x104>)
 800b658:	f009 fa5e 	bl	8014b18 <iprintf>
  while (rem_len > q->len) {
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	895b      	ldrh	r3, [r3, #10]
 800b660:	897a      	ldrh	r2, [r7, #10]
 800b662:	429a      	cmp	r2, r3
 800b664:	d8e1      	bhi.n	800b62a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	7b1b      	ldrb	r3, [r3, #12]
 800b66a:	f003 030f 	and.w	r3, r3, #15
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d121      	bne.n	800b6b6 <pbuf_realloc+0xca>
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	895b      	ldrh	r3, [r3, #10]
 800b676:	897a      	ldrh	r2, [r7, #10]
 800b678:	429a      	cmp	r2, r3
 800b67a:	d01c      	beq.n	800b6b6 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	7b5b      	ldrb	r3, [r3, #13]
 800b680:	f003 0302 	and.w	r3, r3, #2
 800b684:	2b00      	cmp	r3, #0
 800b686:	d116      	bne.n	800b6b6 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	685a      	ldr	r2, [r3, #4]
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	1ad3      	subs	r3, r2, r3
 800b690:	b29a      	uxth	r2, r3
 800b692:	897b      	ldrh	r3, [r7, #10]
 800b694:	4413      	add	r3, r2
 800b696:	b29b      	uxth	r3, r3
 800b698:	4619      	mov	r1, r3
 800b69a:	68f8      	ldr	r0, [r7, #12]
 800b69c:	f7fe ffba 	bl	800a614 <mem_trim>
 800b6a0:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d106      	bne.n	800b6b6 <pbuf_realloc+0xca>
 800b6a8:	4b0f      	ldr	r3, [pc, #60]	; (800b6e8 <pbuf_realloc+0xfc>)
 800b6aa:	f240 12bd 	movw	r2, #445	; 0x1bd
 800b6ae:	4912      	ldr	r1, [pc, #72]	; (800b6f8 <pbuf_realloc+0x10c>)
 800b6b0:	480f      	ldr	r0, [pc, #60]	; (800b6f0 <pbuf_realloc+0x104>)
 800b6b2:	f009 fa31 	bl	8014b18 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	897a      	ldrh	r2, [r7, #10]
 800b6ba:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	895a      	ldrh	r2, [r3, #10]
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d004      	beq.n	800b6d6 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	4618      	mov	r0, r3
 800b6d2:	f000 f911 	bl	800b8f8 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	2200      	movs	r2, #0
 800b6da:	601a      	str	r2, [r3, #0]
 800b6dc:	e000      	b.n	800b6e0 <pbuf_realloc+0xf4>
    return;
 800b6de:	bf00      	nop

}
 800b6e0:	3710      	adds	r7, #16
 800b6e2:	46bd      	mov	sp, r7
 800b6e4:	bd80      	pop	{r7, pc}
 800b6e6:	bf00      	nop
 800b6e8:	080166f0 	.word	0x080166f0
 800b6ec:	08016808 	.word	0x08016808
 800b6f0:	08016750 	.word	0x08016750
 800b6f4:	08016820 	.word	0x08016820
 800b6f8:	08016838 	.word	0x08016838

0800b6fc <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800b6fc:	b580      	push	{r7, lr}
 800b6fe:	b086      	sub	sp, #24
 800b700:	af00      	add	r7, sp, #0
 800b702:	60f8      	str	r0, [r7, #12]
 800b704:	60b9      	str	r1, [r7, #8]
 800b706:	4613      	mov	r3, r2
 800b708:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d106      	bne.n	800b71e <pbuf_add_header_impl+0x22>
 800b710:	4b2b      	ldr	r3, [pc, #172]	; (800b7c0 <pbuf_add_header_impl+0xc4>)
 800b712:	f240 12df 	movw	r2, #479	; 0x1df
 800b716:	492b      	ldr	r1, [pc, #172]	; (800b7c4 <pbuf_add_header_impl+0xc8>)
 800b718:	482b      	ldr	r0, [pc, #172]	; (800b7c8 <pbuf_add_header_impl+0xcc>)
 800b71a:	f009 f9fd 	bl	8014b18 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	2b00      	cmp	r3, #0
 800b722:	d003      	beq.n	800b72c <pbuf_add_header_impl+0x30>
 800b724:	68bb      	ldr	r3, [r7, #8]
 800b726:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b72a:	d301      	bcc.n	800b730 <pbuf_add_header_impl+0x34>
    return 1;
 800b72c:	2301      	movs	r3, #1
 800b72e:	e043      	b.n	800b7b8 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800b730:	68bb      	ldr	r3, [r7, #8]
 800b732:	2b00      	cmp	r3, #0
 800b734:	d101      	bne.n	800b73a <pbuf_add_header_impl+0x3e>
    return 0;
 800b736:	2300      	movs	r3, #0
 800b738:	e03e      	b.n	800b7b8 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800b73a:	68bb      	ldr	r3, [r7, #8]
 800b73c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	891a      	ldrh	r2, [r3, #8]
 800b742:	8a7b      	ldrh	r3, [r7, #18]
 800b744:	4413      	add	r3, r2
 800b746:	b29b      	uxth	r3, r3
 800b748:	8a7a      	ldrh	r2, [r7, #18]
 800b74a:	429a      	cmp	r2, r3
 800b74c:	d901      	bls.n	800b752 <pbuf_add_header_impl+0x56>
    return 1;
 800b74e:	2301      	movs	r3, #1
 800b750:	e032      	b.n	800b7b8 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	7b1b      	ldrb	r3, [r3, #12]
 800b756:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800b758:	8a3b      	ldrh	r3, [r7, #16]
 800b75a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d00c      	beq.n	800b77c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	685a      	ldr	r2, [r3, #4]
 800b766:	68bb      	ldr	r3, [r7, #8]
 800b768:	425b      	negs	r3, r3
 800b76a:	4413      	add	r3, r2
 800b76c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	3310      	adds	r3, #16
 800b772:	697a      	ldr	r2, [r7, #20]
 800b774:	429a      	cmp	r2, r3
 800b776:	d20d      	bcs.n	800b794 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800b778:	2301      	movs	r3, #1
 800b77a:	e01d      	b.n	800b7b8 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800b77c:	79fb      	ldrb	r3, [r7, #7]
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d006      	beq.n	800b790 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	685a      	ldr	r2, [r3, #4]
 800b786:	68bb      	ldr	r3, [r7, #8]
 800b788:	425b      	negs	r3, r3
 800b78a:	4413      	add	r3, r2
 800b78c:	617b      	str	r3, [r7, #20]
 800b78e:	e001      	b.n	800b794 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800b790:	2301      	movs	r3, #1
 800b792:	e011      	b.n	800b7b8 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	697a      	ldr	r2, [r7, #20]
 800b798:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	895a      	ldrh	r2, [r3, #10]
 800b79e:	8a7b      	ldrh	r3, [r7, #18]
 800b7a0:	4413      	add	r3, r2
 800b7a2:	b29a      	uxth	r2, r3
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	891a      	ldrh	r2, [r3, #8]
 800b7ac:	8a7b      	ldrh	r3, [r7, #18]
 800b7ae:	4413      	add	r3, r2
 800b7b0:	b29a      	uxth	r2, r3
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	811a      	strh	r2, [r3, #8]


  return 0;
 800b7b6:	2300      	movs	r3, #0
}
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	3718      	adds	r7, #24
 800b7bc:	46bd      	mov	sp, r7
 800b7be:	bd80      	pop	{r7, pc}
 800b7c0:	080166f0 	.word	0x080166f0
 800b7c4:	08016854 	.word	0x08016854
 800b7c8:	08016750 	.word	0x08016750

0800b7cc <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800b7cc:	b580      	push	{r7, lr}
 800b7ce:	b082      	sub	sp, #8
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	6078      	str	r0, [r7, #4]
 800b7d4:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800b7d6:	2200      	movs	r2, #0
 800b7d8:	6839      	ldr	r1, [r7, #0]
 800b7da:	6878      	ldr	r0, [r7, #4]
 800b7dc:	f7ff ff8e 	bl	800b6fc <pbuf_add_header_impl>
 800b7e0:	4603      	mov	r3, r0
}
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	3708      	adds	r7, #8
 800b7e6:	46bd      	mov	sp, r7
 800b7e8:	bd80      	pop	{r7, pc}
	...

0800b7ec <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800b7ec:	b580      	push	{r7, lr}
 800b7ee:	b084      	sub	sp, #16
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	6078      	str	r0, [r7, #4]
 800b7f4:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d106      	bne.n	800b80a <pbuf_remove_header+0x1e>
 800b7fc:	4b20      	ldr	r3, [pc, #128]	; (800b880 <pbuf_remove_header+0x94>)
 800b7fe:	f240 224b 	movw	r2, #587	; 0x24b
 800b802:	4920      	ldr	r1, [pc, #128]	; (800b884 <pbuf_remove_header+0x98>)
 800b804:	4820      	ldr	r0, [pc, #128]	; (800b888 <pbuf_remove_header+0x9c>)
 800b806:	f009 f987 	bl	8014b18 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d003      	beq.n	800b818 <pbuf_remove_header+0x2c>
 800b810:	683b      	ldr	r3, [r7, #0]
 800b812:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b816:	d301      	bcc.n	800b81c <pbuf_remove_header+0x30>
    return 1;
 800b818:	2301      	movs	r3, #1
 800b81a:	e02c      	b.n	800b876 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800b81c:	683b      	ldr	r3, [r7, #0]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d101      	bne.n	800b826 <pbuf_remove_header+0x3a>
    return 0;
 800b822:	2300      	movs	r3, #0
 800b824:	e027      	b.n	800b876 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800b826:	683b      	ldr	r3, [r7, #0]
 800b828:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	895b      	ldrh	r3, [r3, #10]
 800b82e:	89fa      	ldrh	r2, [r7, #14]
 800b830:	429a      	cmp	r2, r3
 800b832:	d908      	bls.n	800b846 <pbuf_remove_header+0x5a>
 800b834:	4b12      	ldr	r3, [pc, #72]	; (800b880 <pbuf_remove_header+0x94>)
 800b836:	f240 2255 	movw	r2, #597	; 0x255
 800b83a:	4914      	ldr	r1, [pc, #80]	; (800b88c <pbuf_remove_header+0xa0>)
 800b83c:	4812      	ldr	r0, [pc, #72]	; (800b888 <pbuf_remove_header+0x9c>)
 800b83e:	f009 f96b 	bl	8014b18 <iprintf>
 800b842:	2301      	movs	r3, #1
 800b844:	e017      	b.n	800b876 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	685b      	ldr	r3, [r3, #4]
 800b84a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	685a      	ldr	r2, [r3, #4]
 800b850:	683b      	ldr	r3, [r7, #0]
 800b852:	441a      	add	r2, r3
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	895a      	ldrh	r2, [r3, #10]
 800b85c:	89fb      	ldrh	r3, [r7, #14]
 800b85e:	1ad3      	subs	r3, r2, r3
 800b860:	b29a      	uxth	r2, r3
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	891a      	ldrh	r2, [r3, #8]
 800b86a:	89fb      	ldrh	r3, [r7, #14]
 800b86c:	1ad3      	subs	r3, r2, r3
 800b86e:	b29a      	uxth	r2, r3
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800b874:	2300      	movs	r3, #0
}
 800b876:	4618      	mov	r0, r3
 800b878:	3710      	adds	r7, #16
 800b87a:	46bd      	mov	sp, r7
 800b87c:	bd80      	pop	{r7, pc}
 800b87e:	bf00      	nop
 800b880:	080166f0 	.word	0x080166f0
 800b884:	08016854 	.word	0x08016854
 800b888:	08016750 	.word	0x08016750
 800b88c:	08016860 	.word	0x08016860

0800b890 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800b890:	b580      	push	{r7, lr}
 800b892:	b082      	sub	sp, #8
 800b894:	af00      	add	r7, sp, #0
 800b896:	6078      	str	r0, [r7, #4]
 800b898:	460b      	mov	r3, r1
 800b89a:	807b      	strh	r3, [r7, #2]
 800b89c:	4613      	mov	r3, r2
 800b89e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800b8a0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	da08      	bge.n	800b8ba <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800b8a8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b8ac:	425b      	negs	r3, r3
 800b8ae:	4619      	mov	r1, r3
 800b8b0:	6878      	ldr	r0, [r7, #4]
 800b8b2:	f7ff ff9b 	bl	800b7ec <pbuf_remove_header>
 800b8b6:	4603      	mov	r3, r0
 800b8b8:	e007      	b.n	800b8ca <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800b8ba:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b8be:	787a      	ldrb	r2, [r7, #1]
 800b8c0:	4619      	mov	r1, r3
 800b8c2:	6878      	ldr	r0, [r7, #4]
 800b8c4:	f7ff ff1a 	bl	800b6fc <pbuf_add_header_impl>
 800b8c8:	4603      	mov	r3, r0
  }
}
 800b8ca:	4618      	mov	r0, r3
 800b8cc:	3708      	adds	r7, #8
 800b8ce:	46bd      	mov	sp, r7
 800b8d0:	bd80      	pop	{r7, pc}

0800b8d2 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800b8d2:	b580      	push	{r7, lr}
 800b8d4:	b082      	sub	sp, #8
 800b8d6:	af00      	add	r7, sp, #0
 800b8d8:	6078      	str	r0, [r7, #4]
 800b8da:	460b      	mov	r3, r1
 800b8dc:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800b8de:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b8e2:	2201      	movs	r2, #1
 800b8e4:	4619      	mov	r1, r3
 800b8e6:	6878      	ldr	r0, [r7, #4]
 800b8e8:	f7ff ffd2 	bl	800b890 <pbuf_header_impl>
 800b8ec:	4603      	mov	r3, r0
}
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	3708      	adds	r7, #8
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	bd80      	pop	{r7, pc}
	...

0800b8f8 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800b8f8:	b580      	push	{r7, lr}
 800b8fa:	b086      	sub	sp, #24
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	2b00      	cmp	r3, #0
 800b904:	d10b      	bne.n	800b91e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d106      	bne.n	800b91a <pbuf_free+0x22>
 800b90c:	4b38      	ldr	r3, [pc, #224]	; (800b9f0 <pbuf_free+0xf8>)
 800b90e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800b912:	4938      	ldr	r1, [pc, #224]	; (800b9f4 <pbuf_free+0xfc>)
 800b914:	4838      	ldr	r0, [pc, #224]	; (800b9f8 <pbuf_free+0x100>)
 800b916:	f009 f8ff 	bl	8014b18 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800b91a:	2300      	movs	r3, #0
 800b91c:	e063      	b.n	800b9e6 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800b91e:	2300      	movs	r3, #0
 800b920:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800b922:	e05c      	b.n	800b9de <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	7b9b      	ldrb	r3, [r3, #14]
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d106      	bne.n	800b93a <pbuf_free+0x42>
 800b92c:	4b30      	ldr	r3, [pc, #192]	; (800b9f0 <pbuf_free+0xf8>)
 800b92e:	f240 22f1 	movw	r2, #753	; 0x2f1
 800b932:	4932      	ldr	r1, [pc, #200]	; (800b9fc <pbuf_free+0x104>)
 800b934:	4830      	ldr	r0, [pc, #192]	; (800b9f8 <pbuf_free+0x100>)
 800b936:	f009 f8ef 	bl	8014b18 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	7b9b      	ldrb	r3, [r3, #14]
 800b93e:	3b01      	subs	r3, #1
 800b940:	b2da      	uxtb	r2, r3
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	739a      	strb	r2, [r3, #14]
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	7b9b      	ldrb	r3, [r3, #14]
 800b94a:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800b94c:	7dbb      	ldrb	r3, [r7, #22]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d143      	bne.n	800b9da <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	7b1b      	ldrb	r3, [r3, #12]
 800b95c:	f003 030f 	and.w	r3, r3, #15
 800b960:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	7b5b      	ldrb	r3, [r3, #13]
 800b966:	f003 0302 	and.w	r3, r3, #2
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d011      	beq.n	800b992 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800b972:	68bb      	ldr	r3, [r7, #8]
 800b974:	691b      	ldr	r3, [r3, #16]
 800b976:	2b00      	cmp	r3, #0
 800b978:	d106      	bne.n	800b988 <pbuf_free+0x90>
 800b97a:	4b1d      	ldr	r3, [pc, #116]	; (800b9f0 <pbuf_free+0xf8>)
 800b97c:	f240 22ff 	movw	r2, #767	; 0x2ff
 800b980:	491f      	ldr	r1, [pc, #124]	; (800ba00 <pbuf_free+0x108>)
 800b982:	481d      	ldr	r0, [pc, #116]	; (800b9f8 <pbuf_free+0x100>)
 800b984:	f009 f8c8 	bl	8014b18 <iprintf>
        pc->custom_free_function(p);
 800b988:	68bb      	ldr	r3, [r7, #8]
 800b98a:	691b      	ldr	r3, [r3, #16]
 800b98c:	6878      	ldr	r0, [r7, #4]
 800b98e:	4798      	blx	r3
 800b990:	e01d      	b.n	800b9ce <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800b992:	7bfb      	ldrb	r3, [r7, #15]
 800b994:	2b02      	cmp	r3, #2
 800b996:	d104      	bne.n	800b9a2 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800b998:	6879      	ldr	r1, [r7, #4]
 800b99a:	2008      	movs	r0, #8
 800b99c:	f7ff f936 	bl	800ac0c <memp_free>
 800b9a0:	e015      	b.n	800b9ce <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800b9a2:	7bfb      	ldrb	r3, [r7, #15]
 800b9a4:	2b01      	cmp	r3, #1
 800b9a6:	d104      	bne.n	800b9b2 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800b9a8:	6879      	ldr	r1, [r7, #4]
 800b9aa:	2007      	movs	r0, #7
 800b9ac:	f7ff f92e 	bl	800ac0c <memp_free>
 800b9b0:	e00d      	b.n	800b9ce <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800b9b2:	7bfb      	ldrb	r3, [r7, #15]
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d103      	bne.n	800b9c0 <pbuf_free+0xc8>
          mem_free(p);
 800b9b8:	6878      	ldr	r0, [r7, #4]
 800b9ba:	f7fe fdc1 	bl	800a540 <mem_free>
 800b9be:	e006      	b.n	800b9ce <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800b9c0:	4b0b      	ldr	r3, [pc, #44]	; (800b9f0 <pbuf_free+0xf8>)
 800b9c2:	f240 320f 	movw	r2, #783	; 0x30f
 800b9c6:	490f      	ldr	r1, [pc, #60]	; (800ba04 <pbuf_free+0x10c>)
 800b9c8:	480b      	ldr	r0, [pc, #44]	; (800b9f8 <pbuf_free+0x100>)
 800b9ca:	f009 f8a5 	bl	8014b18 <iprintf>
        }
      }
      count++;
 800b9ce:	7dfb      	ldrb	r3, [r7, #23]
 800b9d0:	3301      	adds	r3, #1
 800b9d2:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800b9d4:	693b      	ldr	r3, [r7, #16]
 800b9d6:	607b      	str	r3, [r7, #4]
 800b9d8:	e001      	b.n	800b9de <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800b9da:	2300      	movs	r3, #0
 800b9dc:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d19f      	bne.n	800b924 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800b9e4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	3718      	adds	r7, #24
 800b9ea:	46bd      	mov	sp, r7
 800b9ec:	bd80      	pop	{r7, pc}
 800b9ee:	bf00      	nop
 800b9f0:	080166f0 	.word	0x080166f0
 800b9f4:	08016854 	.word	0x08016854
 800b9f8:	08016750 	.word	0x08016750
 800b9fc:	08016880 	.word	0x08016880
 800ba00:	08016898 	.word	0x08016898
 800ba04:	080168bc 	.word	0x080168bc

0800ba08 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800ba08:	b480      	push	{r7}
 800ba0a:	b085      	sub	sp, #20
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800ba10:	2300      	movs	r3, #0
 800ba12:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800ba14:	e005      	b.n	800ba22 <pbuf_clen+0x1a>
    ++len;
 800ba16:	89fb      	ldrh	r3, [r7, #14]
 800ba18:	3301      	adds	r3, #1
 800ba1a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d1f6      	bne.n	800ba16 <pbuf_clen+0xe>
  }
  return len;
 800ba28:	89fb      	ldrh	r3, [r7, #14]
}
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	3714      	adds	r7, #20
 800ba2e:	46bd      	mov	sp, r7
 800ba30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba34:	4770      	bx	lr
	...

0800ba38 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800ba38:	b580      	push	{r7, lr}
 800ba3a:	b082      	sub	sp, #8
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d010      	beq.n	800ba68 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	7b9b      	ldrb	r3, [r3, #14]
 800ba4a:	3301      	adds	r3, #1
 800ba4c:	b2da      	uxtb	r2, r3
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	7b9b      	ldrb	r3, [r3, #14]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d106      	bne.n	800ba68 <pbuf_ref+0x30>
 800ba5a:	4b05      	ldr	r3, [pc, #20]	; (800ba70 <pbuf_ref+0x38>)
 800ba5c:	f240 3242 	movw	r2, #834	; 0x342
 800ba60:	4904      	ldr	r1, [pc, #16]	; (800ba74 <pbuf_ref+0x3c>)
 800ba62:	4805      	ldr	r0, [pc, #20]	; (800ba78 <pbuf_ref+0x40>)
 800ba64:	f009 f858 	bl	8014b18 <iprintf>
  }
}
 800ba68:	bf00      	nop
 800ba6a:	3708      	adds	r7, #8
 800ba6c:	46bd      	mov	sp, r7
 800ba6e:	bd80      	pop	{r7, pc}
 800ba70:	080166f0 	.word	0x080166f0
 800ba74:	080168d0 	.word	0x080168d0
 800ba78:	08016750 	.word	0x08016750

0800ba7c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800ba7c:	b580      	push	{r7, lr}
 800ba7e:	b084      	sub	sp, #16
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	6078      	str	r0, [r7, #4]
 800ba84:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d002      	beq.n	800ba92 <pbuf_cat+0x16>
 800ba8c:	683b      	ldr	r3, [r7, #0]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d107      	bne.n	800baa2 <pbuf_cat+0x26>
 800ba92:	4b20      	ldr	r3, [pc, #128]	; (800bb14 <pbuf_cat+0x98>)
 800ba94:	f240 3259 	movw	r2, #857	; 0x359
 800ba98:	491f      	ldr	r1, [pc, #124]	; (800bb18 <pbuf_cat+0x9c>)
 800ba9a:	4820      	ldr	r0, [pc, #128]	; (800bb1c <pbuf_cat+0xa0>)
 800ba9c:	f009 f83c 	bl	8014b18 <iprintf>
 800baa0:	e034      	b.n	800bb0c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	60fb      	str	r3, [r7, #12]
 800baa6:	e00a      	b.n	800babe <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	891a      	ldrh	r2, [r3, #8]
 800baac:	683b      	ldr	r3, [r7, #0]
 800baae:	891b      	ldrh	r3, [r3, #8]
 800bab0:	4413      	add	r3, r2
 800bab2:	b29a      	uxth	r2, r3
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	60fb      	str	r3, [r7, #12]
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d1f0      	bne.n	800baa8 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	891a      	ldrh	r2, [r3, #8]
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	895b      	ldrh	r3, [r3, #10]
 800bace:	429a      	cmp	r2, r3
 800bad0:	d006      	beq.n	800bae0 <pbuf_cat+0x64>
 800bad2:	4b10      	ldr	r3, [pc, #64]	; (800bb14 <pbuf_cat+0x98>)
 800bad4:	f240 3262 	movw	r2, #866	; 0x362
 800bad8:	4911      	ldr	r1, [pc, #68]	; (800bb20 <pbuf_cat+0xa4>)
 800bada:	4810      	ldr	r0, [pc, #64]	; (800bb1c <pbuf_cat+0xa0>)
 800badc:	f009 f81c 	bl	8014b18 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d006      	beq.n	800baf6 <pbuf_cat+0x7a>
 800bae8:	4b0a      	ldr	r3, [pc, #40]	; (800bb14 <pbuf_cat+0x98>)
 800baea:	f240 3263 	movw	r2, #867	; 0x363
 800baee:	490d      	ldr	r1, [pc, #52]	; (800bb24 <pbuf_cat+0xa8>)
 800baf0:	480a      	ldr	r0, [pc, #40]	; (800bb1c <pbuf_cat+0xa0>)
 800baf2:	f009 f811 	bl	8014b18 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	891a      	ldrh	r2, [r3, #8]
 800bafa:	683b      	ldr	r3, [r7, #0]
 800bafc:	891b      	ldrh	r3, [r3, #8]
 800bafe:	4413      	add	r3, r2
 800bb00:	b29a      	uxth	r2, r3
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	683a      	ldr	r2, [r7, #0]
 800bb0a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800bb0c:	3710      	adds	r7, #16
 800bb0e:	46bd      	mov	sp, r7
 800bb10:	bd80      	pop	{r7, pc}
 800bb12:	bf00      	nop
 800bb14:	080166f0 	.word	0x080166f0
 800bb18:	080168e4 	.word	0x080168e4
 800bb1c:	08016750 	.word	0x08016750
 800bb20:	0801691c 	.word	0x0801691c
 800bb24:	0801694c 	.word	0x0801694c

0800bb28 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800bb28:	b580      	push	{r7, lr}
 800bb2a:	b086      	sub	sp, #24
 800bb2c:	af00      	add	r7, sp, #0
 800bb2e:	6078      	str	r0, [r7, #4]
 800bb30:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800bb32:	2300      	movs	r3, #0
 800bb34:	617b      	str	r3, [r7, #20]
 800bb36:	2300      	movs	r3, #0
 800bb38:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d008      	beq.n	800bb52 <pbuf_copy+0x2a>
 800bb40:	683b      	ldr	r3, [r7, #0]
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d005      	beq.n	800bb52 <pbuf_copy+0x2a>
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	891a      	ldrh	r2, [r3, #8]
 800bb4a:	683b      	ldr	r3, [r7, #0]
 800bb4c:	891b      	ldrh	r3, [r3, #8]
 800bb4e:	429a      	cmp	r2, r3
 800bb50:	d209      	bcs.n	800bb66 <pbuf_copy+0x3e>
 800bb52:	4b57      	ldr	r3, [pc, #348]	; (800bcb0 <pbuf_copy+0x188>)
 800bb54:	f240 32c9 	movw	r2, #969	; 0x3c9
 800bb58:	4956      	ldr	r1, [pc, #344]	; (800bcb4 <pbuf_copy+0x18c>)
 800bb5a:	4857      	ldr	r0, [pc, #348]	; (800bcb8 <pbuf_copy+0x190>)
 800bb5c:	f008 ffdc 	bl	8014b18 <iprintf>
 800bb60:	f06f 030f 	mvn.w	r3, #15
 800bb64:	e09f      	b.n	800bca6 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	895b      	ldrh	r3, [r3, #10]
 800bb6a:	461a      	mov	r2, r3
 800bb6c:	697b      	ldr	r3, [r7, #20]
 800bb6e:	1ad2      	subs	r2, r2, r3
 800bb70:	683b      	ldr	r3, [r7, #0]
 800bb72:	895b      	ldrh	r3, [r3, #10]
 800bb74:	4619      	mov	r1, r3
 800bb76:	693b      	ldr	r3, [r7, #16]
 800bb78:	1acb      	subs	r3, r1, r3
 800bb7a:	429a      	cmp	r2, r3
 800bb7c:	d306      	bcc.n	800bb8c <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800bb7e:	683b      	ldr	r3, [r7, #0]
 800bb80:	895b      	ldrh	r3, [r3, #10]
 800bb82:	461a      	mov	r2, r3
 800bb84:	693b      	ldr	r3, [r7, #16]
 800bb86:	1ad3      	subs	r3, r2, r3
 800bb88:	60fb      	str	r3, [r7, #12]
 800bb8a:	e005      	b.n	800bb98 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	895b      	ldrh	r3, [r3, #10]
 800bb90:	461a      	mov	r2, r3
 800bb92:	697b      	ldr	r3, [r7, #20]
 800bb94:	1ad3      	subs	r3, r2, r3
 800bb96:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	685a      	ldr	r2, [r3, #4]
 800bb9c:	697b      	ldr	r3, [r7, #20]
 800bb9e:	18d0      	adds	r0, r2, r3
 800bba0:	683b      	ldr	r3, [r7, #0]
 800bba2:	685a      	ldr	r2, [r3, #4]
 800bba4:	693b      	ldr	r3, [r7, #16]
 800bba6:	4413      	add	r3, r2
 800bba8:	68fa      	ldr	r2, [r7, #12]
 800bbaa:	4619      	mov	r1, r3
 800bbac:	f008 ff84 	bl	8014ab8 <memcpy>
    offset_to += len;
 800bbb0:	697a      	ldr	r2, [r7, #20]
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	4413      	add	r3, r2
 800bbb6:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800bbb8:	693a      	ldr	r2, [r7, #16]
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	4413      	add	r3, r2
 800bbbe:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	895b      	ldrh	r3, [r3, #10]
 800bbc4:	461a      	mov	r2, r3
 800bbc6:	697b      	ldr	r3, [r7, #20]
 800bbc8:	4293      	cmp	r3, r2
 800bbca:	d906      	bls.n	800bbda <pbuf_copy+0xb2>
 800bbcc:	4b38      	ldr	r3, [pc, #224]	; (800bcb0 <pbuf_copy+0x188>)
 800bbce:	f240 32d9 	movw	r2, #985	; 0x3d9
 800bbd2:	493a      	ldr	r1, [pc, #232]	; (800bcbc <pbuf_copy+0x194>)
 800bbd4:	4838      	ldr	r0, [pc, #224]	; (800bcb8 <pbuf_copy+0x190>)
 800bbd6:	f008 ff9f 	bl	8014b18 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800bbda:	683b      	ldr	r3, [r7, #0]
 800bbdc:	895b      	ldrh	r3, [r3, #10]
 800bbde:	461a      	mov	r2, r3
 800bbe0:	693b      	ldr	r3, [r7, #16]
 800bbe2:	4293      	cmp	r3, r2
 800bbe4:	d906      	bls.n	800bbf4 <pbuf_copy+0xcc>
 800bbe6:	4b32      	ldr	r3, [pc, #200]	; (800bcb0 <pbuf_copy+0x188>)
 800bbe8:	f240 32da 	movw	r2, #986	; 0x3da
 800bbec:	4934      	ldr	r1, [pc, #208]	; (800bcc0 <pbuf_copy+0x198>)
 800bbee:	4832      	ldr	r0, [pc, #200]	; (800bcb8 <pbuf_copy+0x190>)
 800bbf0:	f008 ff92 	bl	8014b18 <iprintf>
    if (offset_from >= p_from->len) {
 800bbf4:	683b      	ldr	r3, [r7, #0]
 800bbf6:	895b      	ldrh	r3, [r3, #10]
 800bbf8:	461a      	mov	r2, r3
 800bbfa:	693b      	ldr	r3, [r7, #16]
 800bbfc:	4293      	cmp	r3, r2
 800bbfe:	d304      	bcc.n	800bc0a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800bc00:	2300      	movs	r3, #0
 800bc02:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800bc04:	683b      	ldr	r3, [r7, #0]
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	895b      	ldrh	r3, [r3, #10]
 800bc0e:	461a      	mov	r2, r3
 800bc10:	697b      	ldr	r3, [r7, #20]
 800bc12:	4293      	cmp	r3, r2
 800bc14:	d114      	bne.n	800bc40 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800bc16:	2300      	movs	r3, #0
 800bc18:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d10c      	bne.n	800bc40 <pbuf_copy+0x118>
 800bc26:	683b      	ldr	r3, [r7, #0]
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d009      	beq.n	800bc40 <pbuf_copy+0x118>
 800bc2c:	4b20      	ldr	r3, [pc, #128]	; (800bcb0 <pbuf_copy+0x188>)
 800bc2e:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800bc32:	4924      	ldr	r1, [pc, #144]	; (800bcc4 <pbuf_copy+0x19c>)
 800bc34:	4820      	ldr	r0, [pc, #128]	; (800bcb8 <pbuf_copy+0x190>)
 800bc36:	f008 ff6f 	bl	8014b18 <iprintf>
 800bc3a:	f06f 030f 	mvn.w	r3, #15
 800bc3e:	e032      	b.n	800bca6 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800bc40:	683b      	ldr	r3, [r7, #0]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d013      	beq.n	800bc6e <pbuf_copy+0x146>
 800bc46:	683b      	ldr	r3, [r7, #0]
 800bc48:	895a      	ldrh	r2, [r3, #10]
 800bc4a:	683b      	ldr	r3, [r7, #0]
 800bc4c:	891b      	ldrh	r3, [r3, #8]
 800bc4e:	429a      	cmp	r2, r3
 800bc50:	d10d      	bne.n	800bc6e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800bc52:	683b      	ldr	r3, [r7, #0]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d009      	beq.n	800bc6e <pbuf_copy+0x146>
 800bc5a:	4b15      	ldr	r3, [pc, #84]	; (800bcb0 <pbuf_copy+0x188>)
 800bc5c:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800bc60:	4919      	ldr	r1, [pc, #100]	; (800bcc8 <pbuf_copy+0x1a0>)
 800bc62:	4815      	ldr	r0, [pc, #84]	; (800bcb8 <pbuf_copy+0x190>)
 800bc64:	f008 ff58 	bl	8014b18 <iprintf>
 800bc68:	f06f 0305 	mvn.w	r3, #5
 800bc6c:	e01b      	b.n	800bca6 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d013      	beq.n	800bc9c <pbuf_copy+0x174>
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	895a      	ldrh	r2, [r3, #10]
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	891b      	ldrh	r3, [r3, #8]
 800bc7c:	429a      	cmp	r2, r3
 800bc7e:	d10d      	bne.n	800bc9c <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d009      	beq.n	800bc9c <pbuf_copy+0x174>
 800bc88:	4b09      	ldr	r3, [pc, #36]	; (800bcb0 <pbuf_copy+0x188>)
 800bc8a:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800bc8e:	490e      	ldr	r1, [pc, #56]	; (800bcc8 <pbuf_copy+0x1a0>)
 800bc90:	4809      	ldr	r0, [pc, #36]	; (800bcb8 <pbuf_copy+0x190>)
 800bc92:	f008 ff41 	bl	8014b18 <iprintf>
 800bc96:	f06f 0305 	mvn.w	r3, #5
 800bc9a:	e004      	b.n	800bca6 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800bc9c:	683b      	ldr	r3, [r7, #0]
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	f47f af61 	bne.w	800bb66 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800bca4:	2300      	movs	r3, #0
}
 800bca6:	4618      	mov	r0, r3
 800bca8:	3718      	adds	r7, #24
 800bcaa:	46bd      	mov	sp, r7
 800bcac:	bd80      	pop	{r7, pc}
 800bcae:	bf00      	nop
 800bcb0:	080166f0 	.word	0x080166f0
 800bcb4:	08016998 	.word	0x08016998
 800bcb8:	08016750 	.word	0x08016750
 800bcbc:	080169c8 	.word	0x080169c8
 800bcc0:	080169e0 	.word	0x080169e0
 800bcc4:	080169fc 	.word	0x080169fc
 800bcc8:	08016a0c 	.word	0x08016a0c

0800bccc <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800bccc:	b580      	push	{r7, lr}
 800bcce:	b088      	sub	sp, #32
 800bcd0:	af00      	add	r7, sp, #0
 800bcd2:	60f8      	str	r0, [r7, #12]
 800bcd4:	60b9      	str	r1, [r7, #8]
 800bcd6:	4611      	mov	r1, r2
 800bcd8:	461a      	mov	r2, r3
 800bcda:	460b      	mov	r3, r1
 800bcdc:	80fb      	strh	r3, [r7, #6]
 800bcde:	4613      	mov	r3, r2
 800bce0:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800bce2:	2300      	movs	r3, #0
 800bce4:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800bce6:	2300      	movs	r3, #0
 800bce8:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d108      	bne.n	800bd02 <pbuf_copy_partial+0x36>
 800bcf0:	4b2b      	ldr	r3, [pc, #172]	; (800bda0 <pbuf_copy_partial+0xd4>)
 800bcf2:	f240 420a 	movw	r2, #1034	; 0x40a
 800bcf6:	492b      	ldr	r1, [pc, #172]	; (800bda4 <pbuf_copy_partial+0xd8>)
 800bcf8:	482b      	ldr	r0, [pc, #172]	; (800bda8 <pbuf_copy_partial+0xdc>)
 800bcfa:	f008 ff0d 	bl	8014b18 <iprintf>
 800bcfe:	2300      	movs	r3, #0
 800bd00:	e04a      	b.n	800bd98 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800bd02:	68bb      	ldr	r3, [r7, #8]
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d108      	bne.n	800bd1a <pbuf_copy_partial+0x4e>
 800bd08:	4b25      	ldr	r3, [pc, #148]	; (800bda0 <pbuf_copy_partial+0xd4>)
 800bd0a:	f240 420b 	movw	r2, #1035	; 0x40b
 800bd0e:	4927      	ldr	r1, [pc, #156]	; (800bdac <pbuf_copy_partial+0xe0>)
 800bd10:	4825      	ldr	r0, [pc, #148]	; (800bda8 <pbuf_copy_partial+0xdc>)
 800bd12:	f008 ff01 	bl	8014b18 <iprintf>
 800bd16:	2300      	movs	r3, #0
 800bd18:	e03e      	b.n	800bd98 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	61fb      	str	r3, [r7, #28]
 800bd1e:	e034      	b.n	800bd8a <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800bd20:	88bb      	ldrh	r3, [r7, #4]
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d00a      	beq.n	800bd3c <pbuf_copy_partial+0x70>
 800bd26:	69fb      	ldr	r3, [r7, #28]
 800bd28:	895b      	ldrh	r3, [r3, #10]
 800bd2a:	88ba      	ldrh	r2, [r7, #4]
 800bd2c:	429a      	cmp	r2, r3
 800bd2e:	d305      	bcc.n	800bd3c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800bd30:	69fb      	ldr	r3, [r7, #28]
 800bd32:	895b      	ldrh	r3, [r3, #10]
 800bd34:	88ba      	ldrh	r2, [r7, #4]
 800bd36:	1ad3      	subs	r3, r2, r3
 800bd38:	80bb      	strh	r3, [r7, #4]
 800bd3a:	e023      	b.n	800bd84 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800bd3c:	69fb      	ldr	r3, [r7, #28]
 800bd3e:	895a      	ldrh	r2, [r3, #10]
 800bd40:	88bb      	ldrh	r3, [r7, #4]
 800bd42:	1ad3      	subs	r3, r2, r3
 800bd44:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800bd46:	8b3a      	ldrh	r2, [r7, #24]
 800bd48:	88fb      	ldrh	r3, [r7, #6]
 800bd4a:	429a      	cmp	r2, r3
 800bd4c:	d901      	bls.n	800bd52 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800bd4e:	88fb      	ldrh	r3, [r7, #6]
 800bd50:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800bd52:	8b7b      	ldrh	r3, [r7, #26]
 800bd54:	68ba      	ldr	r2, [r7, #8]
 800bd56:	18d0      	adds	r0, r2, r3
 800bd58:	69fb      	ldr	r3, [r7, #28]
 800bd5a:	685a      	ldr	r2, [r3, #4]
 800bd5c:	88bb      	ldrh	r3, [r7, #4]
 800bd5e:	4413      	add	r3, r2
 800bd60:	8b3a      	ldrh	r2, [r7, #24]
 800bd62:	4619      	mov	r1, r3
 800bd64:	f008 fea8 	bl	8014ab8 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800bd68:	8afa      	ldrh	r2, [r7, #22]
 800bd6a:	8b3b      	ldrh	r3, [r7, #24]
 800bd6c:	4413      	add	r3, r2
 800bd6e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800bd70:	8b7a      	ldrh	r2, [r7, #26]
 800bd72:	8b3b      	ldrh	r3, [r7, #24]
 800bd74:	4413      	add	r3, r2
 800bd76:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800bd78:	88fa      	ldrh	r2, [r7, #6]
 800bd7a:	8b3b      	ldrh	r3, [r7, #24]
 800bd7c:	1ad3      	subs	r3, r2, r3
 800bd7e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800bd80:	2300      	movs	r3, #0
 800bd82:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800bd84:	69fb      	ldr	r3, [r7, #28]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	61fb      	str	r3, [r7, #28]
 800bd8a:	88fb      	ldrh	r3, [r7, #6]
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d002      	beq.n	800bd96 <pbuf_copy_partial+0xca>
 800bd90:	69fb      	ldr	r3, [r7, #28]
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d1c4      	bne.n	800bd20 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800bd96:	8afb      	ldrh	r3, [r7, #22]
}
 800bd98:	4618      	mov	r0, r3
 800bd9a:	3720      	adds	r7, #32
 800bd9c:	46bd      	mov	sp, r7
 800bd9e:	bd80      	pop	{r7, pc}
 800bda0:	080166f0 	.word	0x080166f0
 800bda4:	08016a38 	.word	0x08016a38
 800bda8:	08016750 	.word	0x08016750
 800bdac:	08016a58 	.word	0x08016a58

0800bdb0 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800bdb0:	b580      	push	{r7, lr}
 800bdb2:	b084      	sub	sp, #16
 800bdb4:	af00      	add	r7, sp, #0
 800bdb6:	4603      	mov	r3, r0
 800bdb8:	603a      	str	r2, [r7, #0]
 800bdba:	71fb      	strb	r3, [r7, #7]
 800bdbc:	460b      	mov	r3, r1
 800bdbe:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800bdc0:	683b      	ldr	r3, [r7, #0]
 800bdc2:	8919      	ldrh	r1, [r3, #8]
 800bdc4:	88ba      	ldrh	r2, [r7, #4]
 800bdc6:	79fb      	ldrb	r3, [r7, #7]
 800bdc8:	4618      	mov	r0, r3
 800bdca:	f7ff fab1 	bl	800b330 <pbuf_alloc>
 800bdce:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d101      	bne.n	800bdda <pbuf_clone+0x2a>
    return NULL;
 800bdd6:	2300      	movs	r3, #0
 800bdd8:	e011      	b.n	800bdfe <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800bdda:	6839      	ldr	r1, [r7, #0]
 800bddc:	68f8      	ldr	r0, [r7, #12]
 800bdde:	f7ff fea3 	bl	800bb28 <pbuf_copy>
 800bde2:	4603      	mov	r3, r0
 800bde4:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800bde6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d006      	beq.n	800bdfc <pbuf_clone+0x4c>
 800bdee:	4b06      	ldr	r3, [pc, #24]	; (800be08 <pbuf_clone+0x58>)
 800bdf0:	f240 5224 	movw	r2, #1316	; 0x524
 800bdf4:	4905      	ldr	r1, [pc, #20]	; (800be0c <pbuf_clone+0x5c>)
 800bdf6:	4806      	ldr	r0, [pc, #24]	; (800be10 <pbuf_clone+0x60>)
 800bdf8:	f008 fe8e 	bl	8014b18 <iprintf>
  return q;
 800bdfc:	68fb      	ldr	r3, [r7, #12]
}
 800bdfe:	4618      	mov	r0, r3
 800be00:	3710      	adds	r7, #16
 800be02:	46bd      	mov	sp, r7
 800be04:	bd80      	pop	{r7, pc}
 800be06:	bf00      	nop
 800be08:	080166f0 	.word	0x080166f0
 800be0c:	08016b64 	.word	0x08016b64
 800be10:	08016750 	.word	0x08016750

0800be14 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800be14:	b580      	push	{r7, lr}
 800be16:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800be18:	f008 ff0c 	bl	8014c34 <rand>
 800be1c:	4603      	mov	r3, r0
 800be1e:	b29b      	uxth	r3, r3
 800be20:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800be24:	b29b      	uxth	r3, r3
 800be26:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800be2a:	b29a      	uxth	r2, r3
 800be2c:	4b01      	ldr	r3, [pc, #4]	; (800be34 <tcp_init+0x20>)
 800be2e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800be30:	bf00      	nop
 800be32:	bd80      	pop	{r7, pc}
 800be34:	20000060 	.word	0x20000060

0800be38 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800be38:	b580      	push	{r7, lr}
 800be3a:	b082      	sub	sp, #8
 800be3c:	af00      	add	r7, sp, #0
 800be3e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	7d1b      	ldrb	r3, [r3, #20]
 800be44:	2b01      	cmp	r3, #1
 800be46:	d105      	bne.n	800be54 <tcp_free+0x1c>
 800be48:	4b06      	ldr	r3, [pc, #24]	; (800be64 <tcp_free+0x2c>)
 800be4a:	22d4      	movs	r2, #212	; 0xd4
 800be4c:	4906      	ldr	r1, [pc, #24]	; (800be68 <tcp_free+0x30>)
 800be4e:	4807      	ldr	r0, [pc, #28]	; (800be6c <tcp_free+0x34>)
 800be50:	f008 fe62 	bl	8014b18 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800be54:	6879      	ldr	r1, [r7, #4]
 800be56:	2001      	movs	r0, #1
 800be58:	f7fe fed8 	bl	800ac0c <memp_free>
}
 800be5c:	bf00      	nop
 800be5e:	3708      	adds	r7, #8
 800be60:	46bd      	mov	sp, r7
 800be62:	bd80      	pop	{r7, pc}
 800be64:	08016bf0 	.word	0x08016bf0
 800be68:	08016c20 	.word	0x08016c20
 800be6c:	08016c34 	.word	0x08016c34

0800be70 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800be70:	b580      	push	{r7, lr}
 800be72:	b082      	sub	sp, #8
 800be74:	af00      	add	r7, sp, #0
 800be76:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	7d1b      	ldrb	r3, [r3, #20]
 800be7c:	2b01      	cmp	r3, #1
 800be7e:	d105      	bne.n	800be8c <tcp_free_listen+0x1c>
 800be80:	4b06      	ldr	r3, [pc, #24]	; (800be9c <tcp_free_listen+0x2c>)
 800be82:	22df      	movs	r2, #223	; 0xdf
 800be84:	4906      	ldr	r1, [pc, #24]	; (800bea0 <tcp_free_listen+0x30>)
 800be86:	4807      	ldr	r0, [pc, #28]	; (800bea4 <tcp_free_listen+0x34>)
 800be88:	f008 fe46 	bl	8014b18 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800be8c:	6879      	ldr	r1, [r7, #4]
 800be8e:	2002      	movs	r0, #2
 800be90:	f7fe febc 	bl	800ac0c <memp_free>
}
 800be94:	bf00      	nop
 800be96:	3708      	adds	r7, #8
 800be98:	46bd      	mov	sp, r7
 800be9a:	bd80      	pop	{r7, pc}
 800be9c:	08016bf0 	.word	0x08016bf0
 800bea0:	08016c5c 	.word	0x08016c5c
 800bea4:	08016c34 	.word	0x08016c34

0800bea8 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800bea8:	b580      	push	{r7, lr}
 800beaa:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800beac:	f001 f85c 	bl	800cf68 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800beb0:	4b07      	ldr	r3, [pc, #28]	; (800bed0 <tcp_tmr+0x28>)
 800beb2:	781b      	ldrb	r3, [r3, #0]
 800beb4:	3301      	adds	r3, #1
 800beb6:	b2da      	uxtb	r2, r3
 800beb8:	4b05      	ldr	r3, [pc, #20]	; (800bed0 <tcp_tmr+0x28>)
 800beba:	701a      	strb	r2, [r3, #0]
 800bebc:	4b04      	ldr	r3, [pc, #16]	; (800bed0 <tcp_tmr+0x28>)
 800bebe:	781b      	ldrb	r3, [r3, #0]
 800bec0:	f003 0301 	and.w	r3, r3, #1
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d001      	beq.n	800becc <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800bec8:	f000 fd0e 	bl	800c8e8 <tcp_slowtmr>
  }
}
 800becc:	bf00      	nop
 800bece:	bd80      	pop	{r7, pc}
 800bed0:	20008bb9 	.word	0x20008bb9

0800bed4 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800bed4:	b580      	push	{r7, lr}
 800bed6:	b084      	sub	sp, #16
 800bed8:	af00      	add	r7, sp, #0
 800beda:	6078      	str	r0, [r7, #4]
 800bedc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800bede:	683b      	ldr	r3, [r7, #0]
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d105      	bne.n	800bef0 <tcp_remove_listener+0x1c>
 800bee4:	4b0d      	ldr	r3, [pc, #52]	; (800bf1c <tcp_remove_listener+0x48>)
 800bee6:	22ff      	movs	r2, #255	; 0xff
 800bee8:	490d      	ldr	r1, [pc, #52]	; (800bf20 <tcp_remove_listener+0x4c>)
 800beea:	480e      	ldr	r0, [pc, #56]	; (800bf24 <tcp_remove_listener+0x50>)
 800beec:	f008 fe14 	bl	8014b18 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	60fb      	str	r3, [r7, #12]
 800bef4:	e00a      	b.n	800bf0c <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800befa:	683a      	ldr	r2, [r7, #0]
 800befc:	429a      	cmp	r2, r3
 800befe:	d102      	bne.n	800bf06 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	2200      	movs	r2, #0
 800bf04:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	68db      	ldr	r3, [r3, #12]
 800bf0a:	60fb      	str	r3, [r7, #12]
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d1f1      	bne.n	800bef6 <tcp_remove_listener+0x22>
    }
  }
}
 800bf12:	bf00      	nop
 800bf14:	bf00      	nop
 800bf16:	3710      	adds	r7, #16
 800bf18:	46bd      	mov	sp, r7
 800bf1a:	bd80      	pop	{r7, pc}
 800bf1c:	08016bf0 	.word	0x08016bf0
 800bf20:	08016c78 	.word	0x08016c78
 800bf24:	08016c34 	.word	0x08016c34

0800bf28 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800bf28:	b580      	push	{r7, lr}
 800bf2a:	b084      	sub	sp, #16
 800bf2c:	af00      	add	r7, sp, #0
 800bf2e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d106      	bne.n	800bf44 <tcp_listen_closed+0x1c>
 800bf36:	4b14      	ldr	r3, [pc, #80]	; (800bf88 <tcp_listen_closed+0x60>)
 800bf38:	f240 1211 	movw	r2, #273	; 0x111
 800bf3c:	4913      	ldr	r1, [pc, #76]	; (800bf8c <tcp_listen_closed+0x64>)
 800bf3e:	4814      	ldr	r0, [pc, #80]	; (800bf90 <tcp_listen_closed+0x68>)
 800bf40:	f008 fdea 	bl	8014b18 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	7d1b      	ldrb	r3, [r3, #20]
 800bf48:	2b01      	cmp	r3, #1
 800bf4a:	d006      	beq.n	800bf5a <tcp_listen_closed+0x32>
 800bf4c:	4b0e      	ldr	r3, [pc, #56]	; (800bf88 <tcp_listen_closed+0x60>)
 800bf4e:	f44f 7289 	mov.w	r2, #274	; 0x112
 800bf52:	4910      	ldr	r1, [pc, #64]	; (800bf94 <tcp_listen_closed+0x6c>)
 800bf54:	480e      	ldr	r0, [pc, #56]	; (800bf90 <tcp_listen_closed+0x68>)
 800bf56:	f008 fddf 	bl	8014b18 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800bf5a:	2301      	movs	r3, #1
 800bf5c:	60fb      	str	r3, [r7, #12]
 800bf5e:	e00b      	b.n	800bf78 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800bf60:	4a0d      	ldr	r2, [pc, #52]	; (800bf98 <tcp_listen_closed+0x70>)
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	6879      	ldr	r1, [r7, #4]
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	f7ff ffb1 	bl	800bed4 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	3301      	adds	r3, #1
 800bf76:	60fb      	str	r3, [r7, #12]
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	2b03      	cmp	r3, #3
 800bf7c:	d9f0      	bls.n	800bf60 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800bf7e:	bf00      	nop
 800bf80:	bf00      	nop
 800bf82:	3710      	adds	r7, #16
 800bf84:	46bd      	mov	sp, r7
 800bf86:	bd80      	pop	{r7, pc}
 800bf88:	08016bf0 	.word	0x08016bf0
 800bf8c:	08016ca0 	.word	0x08016ca0
 800bf90:	08016c34 	.word	0x08016c34
 800bf94:	08016cac 	.word	0x08016cac
 800bf98:	0801ab04 	.word	0x0801ab04

0800bf9c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800bf9c:	b5b0      	push	{r4, r5, r7, lr}
 800bf9e:	b088      	sub	sp, #32
 800bfa0:	af04      	add	r7, sp, #16
 800bfa2:	6078      	str	r0, [r7, #4]
 800bfa4:	460b      	mov	r3, r1
 800bfa6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d106      	bne.n	800bfbc <tcp_close_shutdown+0x20>
 800bfae:	4b63      	ldr	r3, [pc, #396]	; (800c13c <tcp_close_shutdown+0x1a0>)
 800bfb0:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800bfb4:	4962      	ldr	r1, [pc, #392]	; (800c140 <tcp_close_shutdown+0x1a4>)
 800bfb6:	4863      	ldr	r0, [pc, #396]	; (800c144 <tcp_close_shutdown+0x1a8>)
 800bfb8:	f008 fdae 	bl	8014b18 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800bfbc:	78fb      	ldrb	r3, [r7, #3]
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d066      	beq.n	800c090 <tcp_close_shutdown+0xf4>
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	7d1b      	ldrb	r3, [r3, #20]
 800bfc6:	2b04      	cmp	r3, #4
 800bfc8:	d003      	beq.n	800bfd2 <tcp_close_shutdown+0x36>
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	7d1b      	ldrb	r3, [r3, #20]
 800bfce:	2b07      	cmp	r3, #7
 800bfd0:	d15e      	bne.n	800c090 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d104      	bne.n	800bfe4 <tcp_close_shutdown+0x48>
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bfde:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800bfe2:	d055      	beq.n	800c090 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	8b5b      	ldrh	r3, [r3, #26]
 800bfe8:	f003 0310 	and.w	r3, r3, #16
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d106      	bne.n	800bffe <tcp_close_shutdown+0x62>
 800bff0:	4b52      	ldr	r3, [pc, #328]	; (800c13c <tcp_close_shutdown+0x1a0>)
 800bff2:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800bff6:	4954      	ldr	r1, [pc, #336]	; (800c148 <tcp_close_shutdown+0x1ac>)
 800bff8:	4852      	ldr	r0, [pc, #328]	; (800c144 <tcp_close_shutdown+0x1a8>)
 800bffa:	f008 fd8d 	bl	8014b18 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800c006:	687d      	ldr	r5, [r7, #4]
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	3304      	adds	r3, #4
 800c00c:	687a      	ldr	r2, [r7, #4]
 800c00e:	8ad2      	ldrh	r2, [r2, #22]
 800c010:	6879      	ldr	r1, [r7, #4]
 800c012:	8b09      	ldrh	r1, [r1, #24]
 800c014:	9102      	str	r1, [sp, #8]
 800c016:	9201      	str	r2, [sp, #4]
 800c018:	9300      	str	r3, [sp, #0]
 800c01a:	462b      	mov	r3, r5
 800c01c:	4622      	mov	r2, r4
 800c01e:	4601      	mov	r1, r0
 800c020:	6878      	ldr	r0, [r7, #4]
 800c022:	f005 fd89 	bl	8011b38 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800c026:	6878      	ldr	r0, [r7, #4]
 800c028:	f001 fb66 	bl	800d6f8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800c02c:	4b47      	ldr	r3, [pc, #284]	; (800c14c <tcp_close_shutdown+0x1b0>)
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	687a      	ldr	r2, [r7, #4]
 800c032:	429a      	cmp	r2, r3
 800c034:	d105      	bne.n	800c042 <tcp_close_shutdown+0xa6>
 800c036:	4b45      	ldr	r3, [pc, #276]	; (800c14c <tcp_close_shutdown+0x1b0>)
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	68db      	ldr	r3, [r3, #12]
 800c03c:	4a43      	ldr	r2, [pc, #268]	; (800c14c <tcp_close_shutdown+0x1b0>)
 800c03e:	6013      	str	r3, [r2, #0]
 800c040:	e013      	b.n	800c06a <tcp_close_shutdown+0xce>
 800c042:	4b42      	ldr	r3, [pc, #264]	; (800c14c <tcp_close_shutdown+0x1b0>)
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	60fb      	str	r3, [r7, #12]
 800c048:	e00c      	b.n	800c064 <tcp_close_shutdown+0xc8>
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	68db      	ldr	r3, [r3, #12]
 800c04e:	687a      	ldr	r2, [r7, #4]
 800c050:	429a      	cmp	r2, r3
 800c052:	d104      	bne.n	800c05e <tcp_close_shutdown+0xc2>
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	68da      	ldr	r2, [r3, #12]
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	60da      	str	r2, [r3, #12]
 800c05c:	e005      	b.n	800c06a <tcp_close_shutdown+0xce>
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	68db      	ldr	r3, [r3, #12]
 800c062:	60fb      	str	r3, [r7, #12]
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	2b00      	cmp	r3, #0
 800c068:	d1ef      	bne.n	800c04a <tcp_close_shutdown+0xae>
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	2200      	movs	r2, #0
 800c06e:	60da      	str	r2, [r3, #12]
 800c070:	4b37      	ldr	r3, [pc, #220]	; (800c150 <tcp_close_shutdown+0x1b4>)
 800c072:	2201      	movs	r2, #1
 800c074:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800c076:	4b37      	ldr	r3, [pc, #220]	; (800c154 <tcp_close_shutdown+0x1b8>)
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	687a      	ldr	r2, [r7, #4]
 800c07c:	429a      	cmp	r2, r3
 800c07e:	d102      	bne.n	800c086 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800c080:	f003 fffe 	bl	8010080 <tcp_trigger_input_pcb_close>
 800c084:	e002      	b.n	800c08c <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800c086:	6878      	ldr	r0, [r7, #4]
 800c088:	f7ff fed6 	bl	800be38 <tcp_free>
      }
      return ERR_OK;
 800c08c:	2300      	movs	r3, #0
 800c08e:	e050      	b.n	800c132 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	7d1b      	ldrb	r3, [r3, #20]
 800c094:	2b02      	cmp	r3, #2
 800c096:	d03b      	beq.n	800c110 <tcp_close_shutdown+0x174>
 800c098:	2b02      	cmp	r3, #2
 800c09a:	dc44      	bgt.n	800c126 <tcp_close_shutdown+0x18a>
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d002      	beq.n	800c0a6 <tcp_close_shutdown+0x10a>
 800c0a0:	2b01      	cmp	r3, #1
 800c0a2:	d02a      	beq.n	800c0fa <tcp_close_shutdown+0x15e>
 800c0a4:	e03f      	b.n	800c126 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	8adb      	ldrh	r3, [r3, #22]
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d021      	beq.n	800c0f2 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800c0ae:	4b2a      	ldr	r3, [pc, #168]	; (800c158 <tcp_close_shutdown+0x1bc>)
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	687a      	ldr	r2, [r7, #4]
 800c0b4:	429a      	cmp	r2, r3
 800c0b6:	d105      	bne.n	800c0c4 <tcp_close_shutdown+0x128>
 800c0b8:	4b27      	ldr	r3, [pc, #156]	; (800c158 <tcp_close_shutdown+0x1bc>)
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	68db      	ldr	r3, [r3, #12]
 800c0be:	4a26      	ldr	r2, [pc, #152]	; (800c158 <tcp_close_shutdown+0x1bc>)
 800c0c0:	6013      	str	r3, [r2, #0]
 800c0c2:	e013      	b.n	800c0ec <tcp_close_shutdown+0x150>
 800c0c4:	4b24      	ldr	r3, [pc, #144]	; (800c158 <tcp_close_shutdown+0x1bc>)
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	60bb      	str	r3, [r7, #8]
 800c0ca:	e00c      	b.n	800c0e6 <tcp_close_shutdown+0x14a>
 800c0cc:	68bb      	ldr	r3, [r7, #8]
 800c0ce:	68db      	ldr	r3, [r3, #12]
 800c0d0:	687a      	ldr	r2, [r7, #4]
 800c0d2:	429a      	cmp	r2, r3
 800c0d4:	d104      	bne.n	800c0e0 <tcp_close_shutdown+0x144>
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	68da      	ldr	r2, [r3, #12]
 800c0da:	68bb      	ldr	r3, [r7, #8]
 800c0dc:	60da      	str	r2, [r3, #12]
 800c0de:	e005      	b.n	800c0ec <tcp_close_shutdown+0x150>
 800c0e0:	68bb      	ldr	r3, [r7, #8]
 800c0e2:	68db      	ldr	r3, [r3, #12]
 800c0e4:	60bb      	str	r3, [r7, #8]
 800c0e6:	68bb      	ldr	r3, [r7, #8]
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d1ef      	bne.n	800c0cc <tcp_close_shutdown+0x130>
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	2200      	movs	r2, #0
 800c0f0:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800c0f2:	6878      	ldr	r0, [r7, #4]
 800c0f4:	f7ff fea0 	bl	800be38 <tcp_free>
      break;
 800c0f8:	e01a      	b.n	800c130 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800c0fa:	6878      	ldr	r0, [r7, #4]
 800c0fc:	f7ff ff14 	bl	800bf28 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800c100:	6879      	ldr	r1, [r7, #4]
 800c102:	4816      	ldr	r0, [pc, #88]	; (800c15c <tcp_close_shutdown+0x1c0>)
 800c104:	f001 fb48 	bl	800d798 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800c108:	6878      	ldr	r0, [r7, #4]
 800c10a:	f7ff feb1 	bl	800be70 <tcp_free_listen>
      break;
 800c10e:	e00f      	b.n	800c130 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800c110:	6879      	ldr	r1, [r7, #4]
 800c112:	480e      	ldr	r0, [pc, #56]	; (800c14c <tcp_close_shutdown+0x1b0>)
 800c114:	f001 fb40 	bl	800d798 <tcp_pcb_remove>
 800c118:	4b0d      	ldr	r3, [pc, #52]	; (800c150 <tcp_close_shutdown+0x1b4>)
 800c11a:	2201      	movs	r2, #1
 800c11c:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800c11e:	6878      	ldr	r0, [r7, #4]
 800c120:	f7ff fe8a 	bl	800be38 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800c124:	e004      	b.n	800c130 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800c126:	6878      	ldr	r0, [r7, #4]
 800c128:	f000 f81a 	bl	800c160 <tcp_close_shutdown_fin>
 800c12c:	4603      	mov	r3, r0
 800c12e:	e000      	b.n	800c132 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800c130:	2300      	movs	r3, #0
}
 800c132:	4618      	mov	r0, r3
 800c134:	3710      	adds	r7, #16
 800c136:	46bd      	mov	sp, r7
 800c138:	bdb0      	pop	{r4, r5, r7, pc}
 800c13a:	bf00      	nop
 800c13c:	08016bf0 	.word	0x08016bf0
 800c140:	08016cc4 	.word	0x08016cc4
 800c144:	08016c34 	.word	0x08016c34
 800c148:	08016ce4 	.word	0x08016ce4
 800c14c:	20008bb0 	.word	0x20008bb0
 800c150:	20008bb8 	.word	0x20008bb8
 800c154:	20008bf0 	.word	0x20008bf0
 800c158:	20008ba8 	.word	0x20008ba8
 800c15c:	20008bac 	.word	0x20008bac

0800c160 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800c160:	b580      	push	{r7, lr}
 800c162:	b084      	sub	sp, #16
 800c164:	af00      	add	r7, sp, #0
 800c166:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d106      	bne.n	800c17c <tcp_close_shutdown_fin+0x1c>
 800c16e:	4b2e      	ldr	r3, [pc, #184]	; (800c228 <tcp_close_shutdown_fin+0xc8>)
 800c170:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800c174:	492d      	ldr	r1, [pc, #180]	; (800c22c <tcp_close_shutdown_fin+0xcc>)
 800c176:	482e      	ldr	r0, [pc, #184]	; (800c230 <tcp_close_shutdown_fin+0xd0>)
 800c178:	f008 fcce 	bl	8014b18 <iprintf>

  switch (pcb->state) {
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	7d1b      	ldrb	r3, [r3, #20]
 800c180:	2b07      	cmp	r3, #7
 800c182:	d020      	beq.n	800c1c6 <tcp_close_shutdown_fin+0x66>
 800c184:	2b07      	cmp	r3, #7
 800c186:	dc2b      	bgt.n	800c1e0 <tcp_close_shutdown_fin+0x80>
 800c188:	2b03      	cmp	r3, #3
 800c18a:	d002      	beq.n	800c192 <tcp_close_shutdown_fin+0x32>
 800c18c:	2b04      	cmp	r3, #4
 800c18e:	d00d      	beq.n	800c1ac <tcp_close_shutdown_fin+0x4c>
 800c190:	e026      	b.n	800c1e0 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800c192:	6878      	ldr	r0, [r7, #4]
 800c194:	f004 fdde 	bl	8010d54 <tcp_send_fin>
 800c198:	4603      	mov	r3, r0
 800c19a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c19c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d11f      	bne.n	800c1e4 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	2205      	movs	r2, #5
 800c1a8:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c1aa:	e01b      	b.n	800c1e4 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800c1ac:	6878      	ldr	r0, [r7, #4]
 800c1ae:	f004 fdd1 	bl	8010d54 <tcp_send_fin>
 800c1b2:	4603      	mov	r3, r0
 800c1b4:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c1b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d114      	bne.n	800c1e8 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	2205      	movs	r2, #5
 800c1c2:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c1c4:	e010      	b.n	800c1e8 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800c1c6:	6878      	ldr	r0, [r7, #4]
 800c1c8:	f004 fdc4 	bl	8010d54 <tcp_send_fin>
 800c1cc:	4603      	mov	r3, r0
 800c1ce:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c1d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d109      	bne.n	800c1ec <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	2209      	movs	r2, #9
 800c1dc:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c1de:	e005      	b.n	800c1ec <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800c1e0:	2300      	movs	r3, #0
 800c1e2:	e01c      	b.n	800c21e <tcp_close_shutdown_fin+0xbe>
      break;
 800c1e4:	bf00      	nop
 800c1e6:	e002      	b.n	800c1ee <tcp_close_shutdown_fin+0x8e>
      break;
 800c1e8:	bf00      	nop
 800c1ea:	e000      	b.n	800c1ee <tcp_close_shutdown_fin+0x8e>
      break;
 800c1ec:	bf00      	nop
  }

  if (err == ERR_OK) {
 800c1ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d103      	bne.n	800c1fe <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800c1f6:	6878      	ldr	r0, [r7, #4]
 800c1f8:	f004 feea 	bl	8010fd0 <tcp_output>
 800c1fc:	e00d      	b.n	800c21a <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800c1fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c202:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c206:	d108      	bne.n	800c21a <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	8b5b      	ldrh	r3, [r3, #26]
 800c20c:	f043 0308 	orr.w	r3, r3, #8
 800c210:	b29a      	uxth	r2, r3
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800c216:	2300      	movs	r3, #0
 800c218:	e001      	b.n	800c21e <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800c21a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c21e:	4618      	mov	r0, r3
 800c220:	3710      	adds	r7, #16
 800c222:	46bd      	mov	sp, r7
 800c224:	bd80      	pop	{r7, pc}
 800c226:	bf00      	nop
 800c228:	08016bf0 	.word	0x08016bf0
 800c22c:	08016ca0 	.word	0x08016ca0
 800c230:	08016c34 	.word	0x08016c34

0800c234 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800c234:	b580      	push	{r7, lr}
 800c236:	b082      	sub	sp, #8
 800c238:	af00      	add	r7, sp, #0
 800c23a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d109      	bne.n	800c256 <tcp_close+0x22>
 800c242:	4b0f      	ldr	r3, [pc, #60]	; (800c280 <tcp_close+0x4c>)
 800c244:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800c248:	490e      	ldr	r1, [pc, #56]	; (800c284 <tcp_close+0x50>)
 800c24a:	480f      	ldr	r0, [pc, #60]	; (800c288 <tcp_close+0x54>)
 800c24c:	f008 fc64 	bl	8014b18 <iprintf>
 800c250:	f06f 030f 	mvn.w	r3, #15
 800c254:	e00f      	b.n	800c276 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	7d1b      	ldrb	r3, [r3, #20]
 800c25a:	2b01      	cmp	r3, #1
 800c25c:	d006      	beq.n	800c26c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	8b5b      	ldrh	r3, [r3, #26]
 800c262:	f043 0310 	orr.w	r3, r3, #16
 800c266:	b29a      	uxth	r2, r3
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800c26c:	2101      	movs	r1, #1
 800c26e:	6878      	ldr	r0, [r7, #4]
 800c270:	f7ff fe94 	bl	800bf9c <tcp_close_shutdown>
 800c274:	4603      	mov	r3, r0
}
 800c276:	4618      	mov	r0, r3
 800c278:	3708      	adds	r7, #8
 800c27a:	46bd      	mov	sp, r7
 800c27c:	bd80      	pop	{r7, pc}
 800c27e:	bf00      	nop
 800c280:	08016bf0 	.word	0x08016bf0
 800c284:	08016d00 	.word	0x08016d00
 800c288:	08016c34 	.word	0x08016c34

0800c28c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800c28c:	b580      	push	{r7, lr}
 800c28e:	b08e      	sub	sp, #56	; 0x38
 800c290:	af04      	add	r7, sp, #16
 800c292:	6078      	str	r0, [r7, #4]
 800c294:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d107      	bne.n	800c2ac <tcp_abandon+0x20>
 800c29c:	4b52      	ldr	r3, [pc, #328]	; (800c3e8 <tcp_abandon+0x15c>)
 800c29e:	f240 223d 	movw	r2, #573	; 0x23d
 800c2a2:	4952      	ldr	r1, [pc, #328]	; (800c3ec <tcp_abandon+0x160>)
 800c2a4:	4852      	ldr	r0, [pc, #328]	; (800c3f0 <tcp_abandon+0x164>)
 800c2a6:	f008 fc37 	bl	8014b18 <iprintf>
 800c2aa:	e099      	b.n	800c3e0 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	7d1b      	ldrb	r3, [r3, #20]
 800c2b0:	2b01      	cmp	r3, #1
 800c2b2:	d106      	bne.n	800c2c2 <tcp_abandon+0x36>
 800c2b4:	4b4c      	ldr	r3, [pc, #304]	; (800c3e8 <tcp_abandon+0x15c>)
 800c2b6:	f44f 7210 	mov.w	r2, #576	; 0x240
 800c2ba:	494e      	ldr	r1, [pc, #312]	; (800c3f4 <tcp_abandon+0x168>)
 800c2bc:	484c      	ldr	r0, [pc, #304]	; (800c3f0 <tcp_abandon+0x164>)
 800c2be:	f008 fc2b 	bl	8014b18 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	7d1b      	ldrb	r3, [r3, #20]
 800c2c6:	2b0a      	cmp	r3, #10
 800c2c8:	d107      	bne.n	800c2da <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800c2ca:	6879      	ldr	r1, [r7, #4]
 800c2cc:	484a      	ldr	r0, [pc, #296]	; (800c3f8 <tcp_abandon+0x16c>)
 800c2ce:	f001 fa63 	bl	800d798 <tcp_pcb_remove>
    tcp_free(pcb);
 800c2d2:	6878      	ldr	r0, [r7, #4]
 800c2d4:	f7ff fdb0 	bl	800be38 <tcp_free>
 800c2d8:	e082      	b.n	800c3e0 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800c2da:	2300      	movs	r3, #0
 800c2dc:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800c2de:	2300      	movs	r3, #0
 800c2e0:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c2e6:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2ec:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c2f4:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	691b      	ldr	r3, [r3, #16]
 800c2fa:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	7d1b      	ldrb	r3, [r3, #20]
 800c300:	2b00      	cmp	r3, #0
 800c302:	d126      	bne.n	800c352 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	8adb      	ldrh	r3, [r3, #22]
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d02e      	beq.n	800c36a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800c30c:	4b3b      	ldr	r3, [pc, #236]	; (800c3fc <tcp_abandon+0x170>)
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	687a      	ldr	r2, [r7, #4]
 800c312:	429a      	cmp	r2, r3
 800c314:	d105      	bne.n	800c322 <tcp_abandon+0x96>
 800c316:	4b39      	ldr	r3, [pc, #228]	; (800c3fc <tcp_abandon+0x170>)
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	68db      	ldr	r3, [r3, #12]
 800c31c:	4a37      	ldr	r2, [pc, #220]	; (800c3fc <tcp_abandon+0x170>)
 800c31e:	6013      	str	r3, [r2, #0]
 800c320:	e013      	b.n	800c34a <tcp_abandon+0xbe>
 800c322:	4b36      	ldr	r3, [pc, #216]	; (800c3fc <tcp_abandon+0x170>)
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	61fb      	str	r3, [r7, #28]
 800c328:	e00c      	b.n	800c344 <tcp_abandon+0xb8>
 800c32a:	69fb      	ldr	r3, [r7, #28]
 800c32c:	68db      	ldr	r3, [r3, #12]
 800c32e:	687a      	ldr	r2, [r7, #4]
 800c330:	429a      	cmp	r2, r3
 800c332:	d104      	bne.n	800c33e <tcp_abandon+0xb2>
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	68da      	ldr	r2, [r3, #12]
 800c338:	69fb      	ldr	r3, [r7, #28]
 800c33a:	60da      	str	r2, [r3, #12]
 800c33c:	e005      	b.n	800c34a <tcp_abandon+0xbe>
 800c33e:	69fb      	ldr	r3, [r7, #28]
 800c340:	68db      	ldr	r3, [r3, #12]
 800c342:	61fb      	str	r3, [r7, #28]
 800c344:	69fb      	ldr	r3, [r7, #28]
 800c346:	2b00      	cmp	r3, #0
 800c348:	d1ef      	bne.n	800c32a <tcp_abandon+0x9e>
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	2200      	movs	r2, #0
 800c34e:	60da      	str	r2, [r3, #12]
 800c350:	e00b      	b.n	800c36a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800c352:	683b      	ldr	r3, [r7, #0]
 800c354:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	8adb      	ldrh	r3, [r3, #22]
 800c35a:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800c35c:	6879      	ldr	r1, [r7, #4]
 800c35e:	4828      	ldr	r0, [pc, #160]	; (800c400 <tcp_abandon+0x174>)
 800c360:	f001 fa1a 	bl	800d798 <tcp_pcb_remove>
 800c364:	4b27      	ldr	r3, [pc, #156]	; (800c404 <tcp_abandon+0x178>)
 800c366:	2201      	movs	r2, #1
 800c368:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d004      	beq.n	800c37c <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c376:	4618      	mov	r0, r3
 800c378:	f000 fed6 	bl	800d128 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c380:	2b00      	cmp	r3, #0
 800c382:	d004      	beq.n	800c38e <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c388:	4618      	mov	r0, r3
 800c38a:	f000 fecd 	bl	800d128 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c392:	2b00      	cmp	r3, #0
 800c394:	d004      	beq.n	800c3a0 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c39a:	4618      	mov	r0, r3
 800c39c:	f000 fec4 	bl	800d128 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800c3a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d00e      	beq.n	800c3c4 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800c3a6:	6879      	ldr	r1, [r7, #4]
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	3304      	adds	r3, #4
 800c3ac:	687a      	ldr	r2, [r7, #4]
 800c3ae:	8b12      	ldrh	r2, [r2, #24]
 800c3b0:	9202      	str	r2, [sp, #8]
 800c3b2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800c3b4:	9201      	str	r2, [sp, #4]
 800c3b6:	9300      	str	r3, [sp, #0]
 800c3b8:	460b      	mov	r3, r1
 800c3ba:	697a      	ldr	r2, [r7, #20]
 800c3bc:	69b9      	ldr	r1, [r7, #24]
 800c3be:	6878      	ldr	r0, [r7, #4]
 800c3c0:	f005 fbba 	bl	8011b38 <tcp_rst>
    }
    last_state = pcb->state;
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	7d1b      	ldrb	r3, [r3, #20]
 800c3c8:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800c3ca:	6878      	ldr	r0, [r7, #4]
 800c3cc:	f7ff fd34 	bl	800be38 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800c3d0:	693b      	ldr	r3, [r7, #16]
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d004      	beq.n	800c3e0 <tcp_abandon+0x154>
 800c3d6:	693b      	ldr	r3, [r7, #16]
 800c3d8:	f06f 010c 	mvn.w	r1, #12
 800c3dc:	68f8      	ldr	r0, [r7, #12]
 800c3de:	4798      	blx	r3
  }
}
 800c3e0:	3728      	adds	r7, #40	; 0x28
 800c3e2:	46bd      	mov	sp, r7
 800c3e4:	bd80      	pop	{r7, pc}
 800c3e6:	bf00      	nop
 800c3e8:	08016bf0 	.word	0x08016bf0
 800c3ec:	08016d34 	.word	0x08016d34
 800c3f0:	08016c34 	.word	0x08016c34
 800c3f4:	08016d50 	.word	0x08016d50
 800c3f8:	20008bb4 	.word	0x20008bb4
 800c3fc:	20008ba8 	.word	0x20008ba8
 800c400:	20008bb0 	.word	0x20008bb0
 800c404:	20008bb8 	.word	0x20008bb8

0800c408 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800c408:	b580      	push	{r7, lr}
 800c40a:	b082      	sub	sp, #8
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800c410:	2101      	movs	r1, #1
 800c412:	6878      	ldr	r0, [r7, #4]
 800c414:	f7ff ff3a 	bl	800c28c <tcp_abandon>
}
 800c418:	bf00      	nop
 800c41a:	3708      	adds	r7, #8
 800c41c:	46bd      	mov	sp, r7
 800c41e:	bd80      	pop	{r7, pc}

0800c420 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800c420:	b580      	push	{r7, lr}
 800c422:	b088      	sub	sp, #32
 800c424:	af00      	add	r7, sp, #0
 800c426:	60f8      	str	r0, [r7, #12]
 800c428:	60b9      	str	r1, [r7, #8]
 800c42a:	4613      	mov	r3, r2
 800c42c:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800c42e:	2304      	movs	r3, #4
 800c430:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800c432:	68bb      	ldr	r3, [r7, #8]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d101      	bne.n	800c43c <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800c438:	4b3e      	ldr	r3, [pc, #248]	; (800c534 <tcp_bind+0x114>)
 800c43a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d109      	bne.n	800c456 <tcp_bind+0x36>
 800c442:	4b3d      	ldr	r3, [pc, #244]	; (800c538 <tcp_bind+0x118>)
 800c444:	f240 22a9 	movw	r2, #681	; 0x2a9
 800c448:	493c      	ldr	r1, [pc, #240]	; (800c53c <tcp_bind+0x11c>)
 800c44a:	483d      	ldr	r0, [pc, #244]	; (800c540 <tcp_bind+0x120>)
 800c44c:	f008 fb64 	bl	8014b18 <iprintf>
 800c450:	f06f 030f 	mvn.w	r3, #15
 800c454:	e06a      	b.n	800c52c <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	7d1b      	ldrb	r3, [r3, #20]
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d009      	beq.n	800c472 <tcp_bind+0x52>
 800c45e:	4b36      	ldr	r3, [pc, #216]	; (800c538 <tcp_bind+0x118>)
 800c460:	f240 22ab 	movw	r2, #683	; 0x2ab
 800c464:	4937      	ldr	r1, [pc, #220]	; (800c544 <tcp_bind+0x124>)
 800c466:	4836      	ldr	r0, [pc, #216]	; (800c540 <tcp_bind+0x120>)
 800c468:	f008 fb56 	bl	8014b18 <iprintf>
 800c46c:	f06f 0305 	mvn.w	r3, #5
 800c470:	e05c      	b.n	800c52c <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800c472:	88fb      	ldrh	r3, [r7, #6]
 800c474:	2b00      	cmp	r3, #0
 800c476:	d109      	bne.n	800c48c <tcp_bind+0x6c>
    port = tcp_new_port();
 800c478:	f000 f9f0 	bl	800c85c <tcp_new_port>
 800c47c:	4603      	mov	r3, r0
 800c47e:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800c480:	88fb      	ldrh	r3, [r7, #6]
 800c482:	2b00      	cmp	r3, #0
 800c484:	d135      	bne.n	800c4f2 <tcp_bind+0xd2>
      return ERR_BUF;
 800c486:	f06f 0301 	mvn.w	r3, #1
 800c48a:	e04f      	b.n	800c52c <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800c48c:	2300      	movs	r3, #0
 800c48e:	61fb      	str	r3, [r7, #28]
 800c490:	e02b      	b.n	800c4ea <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800c492:	4a2d      	ldr	r2, [pc, #180]	; (800c548 <tcp_bind+0x128>)
 800c494:	69fb      	ldr	r3, [r7, #28]
 800c496:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	61bb      	str	r3, [r7, #24]
 800c49e:	e01e      	b.n	800c4de <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800c4a0:	69bb      	ldr	r3, [r7, #24]
 800c4a2:	8adb      	ldrh	r3, [r3, #22]
 800c4a4:	88fa      	ldrh	r2, [r7, #6]
 800c4a6:	429a      	cmp	r2, r3
 800c4a8:	d116      	bne.n	800c4d8 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800c4aa:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d010      	beq.n	800c4d2 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800c4b0:	69bb      	ldr	r3, [r7, #24]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d00c      	beq.n	800c4d2 <tcp_bind+0xb2>
 800c4b8:	68bb      	ldr	r3, [r7, #8]
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d009      	beq.n	800c4d2 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800c4be:	68bb      	ldr	r3, [r7, #8]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d005      	beq.n	800c4d2 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800c4c6:	69bb      	ldr	r3, [r7, #24]
 800c4c8:	681a      	ldr	r2, [r3, #0]
 800c4ca:	68bb      	ldr	r3, [r7, #8]
 800c4cc:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800c4ce:	429a      	cmp	r2, r3
 800c4d0:	d102      	bne.n	800c4d8 <tcp_bind+0xb8>
              return ERR_USE;
 800c4d2:	f06f 0307 	mvn.w	r3, #7
 800c4d6:	e029      	b.n	800c52c <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800c4d8:	69bb      	ldr	r3, [r7, #24]
 800c4da:	68db      	ldr	r3, [r3, #12]
 800c4dc:	61bb      	str	r3, [r7, #24]
 800c4de:	69bb      	ldr	r3, [r7, #24]
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d1dd      	bne.n	800c4a0 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800c4e4:	69fb      	ldr	r3, [r7, #28]
 800c4e6:	3301      	adds	r3, #1
 800c4e8:	61fb      	str	r3, [r7, #28]
 800c4ea:	69fa      	ldr	r2, [r7, #28]
 800c4ec:	697b      	ldr	r3, [r7, #20]
 800c4ee:	429a      	cmp	r2, r3
 800c4f0:	dbcf      	blt.n	800c492 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800c4f2:	68bb      	ldr	r3, [r7, #8]
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d00c      	beq.n	800c512 <tcp_bind+0xf2>
 800c4f8:	68bb      	ldr	r3, [r7, #8]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d008      	beq.n	800c512 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800c500:	68bb      	ldr	r3, [r7, #8]
 800c502:	2b00      	cmp	r3, #0
 800c504:	d002      	beq.n	800c50c <tcp_bind+0xec>
 800c506:	68bb      	ldr	r3, [r7, #8]
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	e000      	b.n	800c50e <tcp_bind+0xee>
 800c50c:	2300      	movs	r3, #0
 800c50e:	68fa      	ldr	r2, [r7, #12]
 800c510:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	88fa      	ldrh	r2, [r7, #6]
 800c516:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800c518:	4b0c      	ldr	r3, [pc, #48]	; (800c54c <tcp_bind+0x12c>)
 800c51a:	681a      	ldr	r2, [r3, #0]
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	60da      	str	r2, [r3, #12]
 800c520:	4a0a      	ldr	r2, [pc, #40]	; (800c54c <tcp_bind+0x12c>)
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	6013      	str	r3, [r2, #0]
 800c526:	f005 fcc9 	bl	8011ebc <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800c52a:	2300      	movs	r3, #0
}
 800c52c:	4618      	mov	r0, r3
 800c52e:	3720      	adds	r7, #32
 800c530:	46bd      	mov	sp, r7
 800c532:	bd80      	pop	{r7, pc}
 800c534:	0801ab2c 	.word	0x0801ab2c
 800c538:	08016bf0 	.word	0x08016bf0
 800c53c:	08016d84 	.word	0x08016d84
 800c540:	08016c34 	.word	0x08016c34
 800c544:	08016d9c 	.word	0x08016d9c
 800c548:	0801ab04 	.word	0x0801ab04
 800c54c:	20008ba8 	.word	0x20008ba8

0800c550 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800c550:	b580      	push	{r7, lr}
 800c552:	b084      	sub	sp, #16
 800c554:	af00      	add	r7, sp, #0
 800c556:	60f8      	str	r0, [r7, #12]
 800c558:	60b9      	str	r1, [r7, #8]
 800c55a:	4613      	mov	r3, r2
 800c55c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800c55e:	68bb      	ldr	r3, [r7, #8]
 800c560:	2b00      	cmp	r3, #0
 800c562:	d106      	bne.n	800c572 <tcp_accept_null+0x22>
 800c564:	4b07      	ldr	r3, [pc, #28]	; (800c584 <tcp_accept_null+0x34>)
 800c566:	f240 320f 	movw	r2, #783	; 0x30f
 800c56a:	4907      	ldr	r1, [pc, #28]	; (800c588 <tcp_accept_null+0x38>)
 800c56c:	4807      	ldr	r0, [pc, #28]	; (800c58c <tcp_accept_null+0x3c>)
 800c56e:	f008 fad3 	bl	8014b18 <iprintf>

  tcp_abort(pcb);
 800c572:	68b8      	ldr	r0, [r7, #8]
 800c574:	f7ff ff48 	bl	800c408 <tcp_abort>

  return ERR_ABRT;
 800c578:	f06f 030c 	mvn.w	r3, #12
}
 800c57c:	4618      	mov	r0, r3
 800c57e:	3710      	adds	r7, #16
 800c580:	46bd      	mov	sp, r7
 800c582:	bd80      	pop	{r7, pc}
 800c584:	08016bf0 	.word	0x08016bf0
 800c588:	08016dc4 	.word	0x08016dc4
 800c58c:	08016c34 	.word	0x08016c34

0800c590 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 800c590:	b580      	push	{r7, lr}
 800c592:	b082      	sub	sp, #8
 800c594:	af00      	add	r7, sp, #0
 800c596:	6078      	str	r0, [r7, #4]
 800c598:	460b      	mov	r3, r1
 800c59a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 800c59c:	78fb      	ldrb	r3, [r7, #3]
 800c59e:	2200      	movs	r2, #0
 800c5a0:	4619      	mov	r1, r3
 800c5a2:	6878      	ldr	r0, [r7, #4]
 800c5a4:	f000 f806 	bl	800c5b4 <tcp_listen_with_backlog_and_err>
 800c5a8:	4603      	mov	r3, r0
}
 800c5aa:	4618      	mov	r0, r3
 800c5ac:	3708      	adds	r7, #8
 800c5ae:	46bd      	mov	sp, r7
 800c5b0:	bd80      	pop	{r7, pc}
	...

0800c5b4 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800c5b4:	b580      	push	{r7, lr}
 800c5b6:	b088      	sub	sp, #32
 800c5b8:	af00      	add	r7, sp, #0
 800c5ba:	60f8      	str	r0, [r7, #12]
 800c5bc:	460b      	mov	r3, r1
 800c5be:	607a      	str	r2, [r7, #4]
 800c5c0:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800c5c2:	2300      	movs	r3, #0
 800c5c4:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d109      	bne.n	800c5e0 <tcp_listen_with_backlog_and_err+0x2c>
 800c5cc:	4b47      	ldr	r3, [pc, #284]	; (800c6ec <tcp_listen_with_backlog_and_err+0x138>)
 800c5ce:	f240 3259 	movw	r2, #857	; 0x359
 800c5d2:	4947      	ldr	r1, [pc, #284]	; (800c6f0 <tcp_listen_with_backlog_and_err+0x13c>)
 800c5d4:	4847      	ldr	r0, [pc, #284]	; (800c6f4 <tcp_listen_with_backlog_and_err+0x140>)
 800c5d6:	f008 fa9f 	bl	8014b18 <iprintf>
 800c5da:	23f0      	movs	r3, #240	; 0xf0
 800c5dc:	76fb      	strb	r3, [r7, #27]
 800c5de:	e079      	b.n	800c6d4 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	7d1b      	ldrb	r3, [r3, #20]
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d009      	beq.n	800c5fc <tcp_listen_with_backlog_and_err+0x48>
 800c5e8:	4b40      	ldr	r3, [pc, #256]	; (800c6ec <tcp_listen_with_backlog_and_err+0x138>)
 800c5ea:	f240 325a 	movw	r2, #858	; 0x35a
 800c5ee:	4942      	ldr	r1, [pc, #264]	; (800c6f8 <tcp_listen_with_backlog_and_err+0x144>)
 800c5f0:	4840      	ldr	r0, [pc, #256]	; (800c6f4 <tcp_listen_with_backlog_and_err+0x140>)
 800c5f2:	f008 fa91 	bl	8014b18 <iprintf>
 800c5f6:	23f1      	movs	r3, #241	; 0xf1
 800c5f8:	76fb      	strb	r3, [r7, #27]
 800c5fa:	e06b      	b.n	800c6d4 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	7d1b      	ldrb	r3, [r3, #20]
 800c600:	2b01      	cmp	r3, #1
 800c602:	d104      	bne.n	800c60e <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800c608:	23f7      	movs	r3, #247	; 0xf7
 800c60a:	76fb      	strb	r3, [r7, #27]
    goto done;
 800c60c:	e062      	b.n	800c6d4 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800c60e:	2002      	movs	r0, #2
 800c610:	f7fe fa8c 	bl	800ab2c <memp_malloc>
 800c614:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800c616:	69fb      	ldr	r3, [r7, #28]
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d102      	bne.n	800c622 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800c61c:	23ff      	movs	r3, #255	; 0xff
 800c61e:	76fb      	strb	r3, [r7, #27]
    goto done;
 800c620:	e058      	b.n	800c6d4 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	691a      	ldr	r2, [r3, #16]
 800c626:	69fb      	ldr	r3, [r7, #28]
 800c628:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	8ada      	ldrh	r2, [r3, #22]
 800c62e:	69fb      	ldr	r3, [r7, #28]
 800c630:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800c632:	69fb      	ldr	r3, [r7, #28]
 800c634:	2201      	movs	r2, #1
 800c636:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	7d5a      	ldrb	r2, [r3, #21]
 800c63c:	69fb      	ldr	r3, [r7, #28]
 800c63e:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	7a5a      	ldrb	r2, [r3, #9]
 800c644:	69fb      	ldr	r3, [r7, #28]
 800c646:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800c648:	69fb      	ldr	r3, [r7, #28]
 800c64a:	2200      	movs	r2, #0
 800c64c:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	7ada      	ldrb	r2, [r3, #11]
 800c652:	69fb      	ldr	r3, [r7, #28]
 800c654:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	7a9a      	ldrb	r2, [r3, #10]
 800c65a:	69fb      	ldr	r3, [r7, #28]
 800c65c:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	681a      	ldr	r2, [r3, #0]
 800c662:	69fb      	ldr	r3, [r7, #28]
 800c664:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	8adb      	ldrh	r3, [r3, #22]
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d021      	beq.n	800c6b2 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800c66e:	4b23      	ldr	r3, [pc, #140]	; (800c6fc <tcp_listen_with_backlog_and_err+0x148>)
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	68fa      	ldr	r2, [r7, #12]
 800c674:	429a      	cmp	r2, r3
 800c676:	d105      	bne.n	800c684 <tcp_listen_with_backlog_and_err+0xd0>
 800c678:	4b20      	ldr	r3, [pc, #128]	; (800c6fc <tcp_listen_with_backlog_and_err+0x148>)
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	68db      	ldr	r3, [r3, #12]
 800c67e:	4a1f      	ldr	r2, [pc, #124]	; (800c6fc <tcp_listen_with_backlog_and_err+0x148>)
 800c680:	6013      	str	r3, [r2, #0]
 800c682:	e013      	b.n	800c6ac <tcp_listen_with_backlog_and_err+0xf8>
 800c684:	4b1d      	ldr	r3, [pc, #116]	; (800c6fc <tcp_listen_with_backlog_and_err+0x148>)
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	617b      	str	r3, [r7, #20]
 800c68a:	e00c      	b.n	800c6a6 <tcp_listen_with_backlog_and_err+0xf2>
 800c68c:	697b      	ldr	r3, [r7, #20]
 800c68e:	68db      	ldr	r3, [r3, #12]
 800c690:	68fa      	ldr	r2, [r7, #12]
 800c692:	429a      	cmp	r2, r3
 800c694:	d104      	bne.n	800c6a0 <tcp_listen_with_backlog_and_err+0xec>
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	68da      	ldr	r2, [r3, #12]
 800c69a:	697b      	ldr	r3, [r7, #20]
 800c69c:	60da      	str	r2, [r3, #12]
 800c69e:	e005      	b.n	800c6ac <tcp_listen_with_backlog_and_err+0xf8>
 800c6a0:	697b      	ldr	r3, [r7, #20]
 800c6a2:	68db      	ldr	r3, [r3, #12]
 800c6a4:	617b      	str	r3, [r7, #20]
 800c6a6:	697b      	ldr	r3, [r7, #20]
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d1ef      	bne.n	800c68c <tcp_listen_with_backlog_and_err+0xd8>
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	2200      	movs	r2, #0
 800c6b0:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800c6b2:	68f8      	ldr	r0, [r7, #12]
 800c6b4:	f7ff fbc0 	bl	800be38 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800c6b8:	69fb      	ldr	r3, [r7, #28]
 800c6ba:	4a11      	ldr	r2, [pc, #68]	; (800c700 <tcp_listen_with_backlog_and_err+0x14c>)
 800c6bc:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800c6be:	4b11      	ldr	r3, [pc, #68]	; (800c704 <tcp_listen_with_backlog_and_err+0x150>)
 800c6c0:	681a      	ldr	r2, [r3, #0]
 800c6c2:	69fb      	ldr	r3, [r7, #28]
 800c6c4:	60da      	str	r2, [r3, #12]
 800c6c6:	4a0f      	ldr	r2, [pc, #60]	; (800c704 <tcp_listen_with_backlog_and_err+0x150>)
 800c6c8:	69fb      	ldr	r3, [r7, #28]
 800c6ca:	6013      	str	r3, [r2, #0]
 800c6cc:	f005 fbf6 	bl	8011ebc <tcp_timer_needed>
  res = ERR_OK;
 800c6d0:	2300      	movs	r3, #0
 800c6d2:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d002      	beq.n	800c6e0 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	7efa      	ldrb	r2, [r7, #27]
 800c6de:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800c6e0:	69fb      	ldr	r3, [r7, #28]
}
 800c6e2:	4618      	mov	r0, r3
 800c6e4:	3720      	adds	r7, #32
 800c6e6:	46bd      	mov	sp, r7
 800c6e8:	bd80      	pop	{r7, pc}
 800c6ea:	bf00      	nop
 800c6ec:	08016bf0 	.word	0x08016bf0
 800c6f0:	08016de4 	.word	0x08016de4
 800c6f4:	08016c34 	.word	0x08016c34
 800c6f8:	08016e14 	.word	0x08016e14
 800c6fc:	20008ba8 	.word	0x20008ba8
 800c700:	0800c551 	.word	0x0800c551
 800c704:	20008bac 	.word	0x20008bac

0800c708 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800c708:	b580      	push	{r7, lr}
 800c70a:	b084      	sub	sp, #16
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	2b00      	cmp	r3, #0
 800c714:	d106      	bne.n	800c724 <tcp_update_rcv_ann_wnd+0x1c>
 800c716:	4b25      	ldr	r3, [pc, #148]	; (800c7ac <tcp_update_rcv_ann_wnd+0xa4>)
 800c718:	f240 32a6 	movw	r2, #934	; 0x3a6
 800c71c:	4924      	ldr	r1, [pc, #144]	; (800c7b0 <tcp_update_rcv_ann_wnd+0xa8>)
 800c71e:	4825      	ldr	r0, [pc, #148]	; (800c7b4 <tcp_update_rcv_ann_wnd+0xac>)
 800c720:	f008 f9fa 	bl	8014b18 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c728:	687a      	ldr	r2, [r7, #4]
 800c72a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800c72c:	4413      	add	r3, r2
 800c72e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c734:	687a      	ldr	r2, [r7, #4]
 800c736:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800c738:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800c73c:	bf28      	it	cs
 800c73e:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800c742:	b292      	uxth	r2, r2
 800c744:	4413      	add	r3, r2
 800c746:	68fa      	ldr	r2, [r7, #12]
 800c748:	1ad3      	subs	r3, r2, r3
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	db08      	blt.n	800c760 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c75a:	68fa      	ldr	r2, [r7, #12]
 800c75c:	1ad3      	subs	r3, r2, r3
 800c75e:	e020      	b.n	800c7a2 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c768:	1ad3      	subs	r3, r2, r3
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	dd03      	ble.n	800c776 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	2200      	movs	r2, #0
 800c772:	855a      	strh	r2, [r3, #42]	; 0x2a
 800c774:	e014      	b.n	800c7a0 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c77e:	1ad3      	subs	r3, r2, r3
 800c780:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800c782:	68bb      	ldr	r3, [r7, #8]
 800c784:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c788:	d306      	bcc.n	800c798 <tcp_update_rcv_ann_wnd+0x90>
 800c78a:	4b08      	ldr	r3, [pc, #32]	; (800c7ac <tcp_update_rcv_ann_wnd+0xa4>)
 800c78c:	f240 32b6 	movw	r2, #950	; 0x3b6
 800c790:	4909      	ldr	r1, [pc, #36]	; (800c7b8 <tcp_update_rcv_ann_wnd+0xb0>)
 800c792:	4808      	ldr	r0, [pc, #32]	; (800c7b4 <tcp_update_rcv_ann_wnd+0xac>)
 800c794:	f008 f9c0 	bl	8014b18 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800c798:	68bb      	ldr	r3, [r7, #8]
 800c79a:	b29a      	uxth	r2, r3
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800c7a0:	2300      	movs	r3, #0
  }
}
 800c7a2:	4618      	mov	r0, r3
 800c7a4:	3710      	adds	r7, #16
 800c7a6:	46bd      	mov	sp, r7
 800c7a8:	bd80      	pop	{r7, pc}
 800c7aa:	bf00      	nop
 800c7ac:	08016bf0 	.word	0x08016bf0
 800c7b0:	08016e4c 	.word	0x08016e4c
 800c7b4:	08016c34 	.word	0x08016c34
 800c7b8:	08016e70 	.word	0x08016e70

0800c7bc <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800c7bc:	b580      	push	{r7, lr}
 800c7be:	b084      	sub	sp, #16
 800c7c0:	af00      	add	r7, sp, #0
 800c7c2:	6078      	str	r0, [r7, #4]
 800c7c4:	460b      	mov	r3, r1
 800c7c6:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d107      	bne.n	800c7de <tcp_recved+0x22>
 800c7ce:	4b1f      	ldr	r3, [pc, #124]	; (800c84c <tcp_recved+0x90>)
 800c7d0:	f240 32cf 	movw	r2, #975	; 0x3cf
 800c7d4:	491e      	ldr	r1, [pc, #120]	; (800c850 <tcp_recved+0x94>)
 800c7d6:	481f      	ldr	r0, [pc, #124]	; (800c854 <tcp_recved+0x98>)
 800c7d8:	f008 f99e 	bl	8014b18 <iprintf>
 800c7dc:	e032      	b.n	800c844 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	7d1b      	ldrb	r3, [r3, #20]
 800c7e2:	2b01      	cmp	r3, #1
 800c7e4:	d106      	bne.n	800c7f4 <tcp_recved+0x38>
 800c7e6:	4b19      	ldr	r3, [pc, #100]	; (800c84c <tcp_recved+0x90>)
 800c7e8:	f240 32d2 	movw	r2, #978	; 0x3d2
 800c7ec:	491a      	ldr	r1, [pc, #104]	; (800c858 <tcp_recved+0x9c>)
 800c7ee:	4819      	ldr	r0, [pc, #100]	; (800c854 <tcp_recved+0x98>)
 800c7f0:	f008 f992 	bl	8014b18 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c7f8:	887b      	ldrh	r3, [r7, #2]
 800c7fa:	4413      	add	r3, r2
 800c7fc:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800c7fe:	89fb      	ldrh	r3, [r7, #14]
 800c800:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800c804:	d804      	bhi.n	800c810 <tcp_recved+0x54>
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c80a:	89fa      	ldrh	r2, [r7, #14]
 800c80c:	429a      	cmp	r2, r3
 800c80e:	d204      	bcs.n	800c81a <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800c816:	851a      	strh	r2, [r3, #40]	; 0x28
 800c818:	e002      	b.n	800c820 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	89fa      	ldrh	r2, [r7, #14]
 800c81e:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800c820:	6878      	ldr	r0, [r7, #4]
 800c822:	f7ff ff71 	bl	800c708 <tcp_update_rcv_ann_wnd>
 800c826:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800c828:	68bb      	ldr	r3, [r7, #8]
 800c82a:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800c82e:	d309      	bcc.n	800c844 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	8b5b      	ldrh	r3, [r3, #26]
 800c834:	f043 0302 	orr.w	r3, r3, #2
 800c838:	b29a      	uxth	r2, r3
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800c83e:	6878      	ldr	r0, [r7, #4]
 800c840:	f004 fbc6 	bl	8010fd0 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800c844:	3710      	adds	r7, #16
 800c846:	46bd      	mov	sp, r7
 800c848:	bd80      	pop	{r7, pc}
 800c84a:	bf00      	nop
 800c84c:	08016bf0 	.word	0x08016bf0
 800c850:	08016e8c 	.word	0x08016e8c
 800c854:	08016c34 	.word	0x08016c34
 800c858:	08016ea4 	.word	0x08016ea4

0800c85c <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800c85c:	b480      	push	{r7}
 800c85e:	b083      	sub	sp, #12
 800c860:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800c862:	2300      	movs	r3, #0
 800c864:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800c866:	4b1e      	ldr	r3, [pc, #120]	; (800c8e0 <tcp_new_port+0x84>)
 800c868:	881b      	ldrh	r3, [r3, #0]
 800c86a:	3301      	adds	r3, #1
 800c86c:	b29a      	uxth	r2, r3
 800c86e:	4b1c      	ldr	r3, [pc, #112]	; (800c8e0 <tcp_new_port+0x84>)
 800c870:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800c872:	4b1b      	ldr	r3, [pc, #108]	; (800c8e0 <tcp_new_port+0x84>)
 800c874:	881b      	ldrh	r3, [r3, #0]
 800c876:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c87a:	4293      	cmp	r3, r2
 800c87c:	d103      	bne.n	800c886 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800c87e:	4b18      	ldr	r3, [pc, #96]	; (800c8e0 <tcp_new_port+0x84>)
 800c880:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800c884:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800c886:	2300      	movs	r3, #0
 800c888:	71fb      	strb	r3, [r7, #7]
 800c88a:	e01e      	b.n	800c8ca <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800c88c:	79fb      	ldrb	r3, [r7, #7]
 800c88e:	4a15      	ldr	r2, [pc, #84]	; (800c8e4 <tcp_new_port+0x88>)
 800c890:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	603b      	str	r3, [r7, #0]
 800c898:	e011      	b.n	800c8be <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800c89a:	683b      	ldr	r3, [r7, #0]
 800c89c:	8ada      	ldrh	r2, [r3, #22]
 800c89e:	4b10      	ldr	r3, [pc, #64]	; (800c8e0 <tcp_new_port+0x84>)
 800c8a0:	881b      	ldrh	r3, [r3, #0]
 800c8a2:	429a      	cmp	r2, r3
 800c8a4:	d108      	bne.n	800c8b8 <tcp_new_port+0x5c>
        n++;
 800c8a6:	88bb      	ldrh	r3, [r7, #4]
 800c8a8:	3301      	adds	r3, #1
 800c8aa:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800c8ac:	88bb      	ldrh	r3, [r7, #4]
 800c8ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c8b2:	d3d8      	bcc.n	800c866 <tcp_new_port+0xa>
          return 0;
 800c8b4:	2300      	movs	r3, #0
 800c8b6:	e00d      	b.n	800c8d4 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800c8b8:	683b      	ldr	r3, [r7, #0]
 800c8ba:	68db      	ldr	r3, [r3, #12]
 800c8bc:	603b      	str	r3, [r7, #0]
 800c8be:	683b      	ldr	r3, [r7, #0]
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d1ea      	bne.n	800c89a <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800c8c4:	79fb      	ldrb	r3, [r7, #7]
 800c8c6:	3301      	adds	r3, #1
 800c8c8:	71fb      	strb	r3, [r7, #7]
 800c8ca:	79fb      	ldrb	r3, [r7, #7]
 800c8cc:	2b03      	cmp	r3, #3
 800c8ce:	d9dd      	bls.n	800c88c <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800c8d0:	4b03      	ldr	r3, [pc, #12]	; (800c8e0 <tcp_new_port+0x84>)
 800c8d2:	881b      	ldrh	r3, [r3, #0]
}
 800c8d4:	4618      	mov	r0, r3
 800c8d6:	370c      	adds	r7, #12
 800c8d8:	46bd      	mov	sp, r7
 800c8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8de:	4770      	bx	lr
 800c8e0:	20000060 	.word	0x20000060
 800c8e4:	0801ab04 	.word	0x0801ab04

0800c8e8 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800c8e8:	b5b0      	push	{r4, r5, r7, lr}
 800c8ea:	b090      	sub	sp, #64	; 0x40
 800c8ec:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800c8ee:	2300      	movs	r3, #0
 800c8f0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800c8f4:	4b94      	ldr	r3, [pc, #592]	; (800cb48 <tcp_slowtmr+0x260>)
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	3301      	adds	r3, #1
 800c8fa:	4a93      	ldr	r2, [pc, #588]	; (800cb48 <tcp_slowtmr+0x260>)
 800c8fc:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800c8fe:	4b93      	ldr	r3, [pc, #588]	; (800cb4c <tcp_slowtmr+0x264>)
 800c900:	781b      	ldrb	r3, [r3, #0]
 800c902:	3301      	adds	r3, #1
 800c904:	b2da      	uxtb	r2, r3
 800c906:	4b91      	ldr	r3, [pc, #580]	; (800cb4c <tcp_slowtmr+0x264>)
 800c908:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800c90a:	2300      	movs	r3, #0
 800c90c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800c90e:	4b90      	ldr	r3, [pc, #576]	; (800cb50 <tcp_slowtmr+0x268>)
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800c914:	e29d      	b.n	800ce52 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800c916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c918:	7d1b      	ldrb	r3, [r3, #20]
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d106      	bne.n	800c92c <tcp_slowtmr+0x44>
 800c91e:	4b8d      	ldr	r3, [pc, #564]	; (800cb54 <tcp_slowtmr+0x26c>)
 800c920:	f240 42be 	movw	r2, #1214	; 0x4be
 800c924:	498c      	ldr	r1, [pc, #560]	; (800cb58 <tcp_slowtmr+0x270>)
 800c926:	488d      	ldr	r0, [pc, #564]	; (800cb5c <tcp_slowtmr+0x274>)
 800c928:	f008 f8f6 	bl	8014b18 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800c92c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c92e:	7d1b      	ldrb	r3, [r3, #20]
 800c930:	2b01      	cmp	r3, #1
 800c932:	d106      	bne.n	800c942 <tcp_slowtmr+0x5a>
 800c934:	4b87      	ldr	r3, [pc, #540]	; (800cb54 <tcp_slowtmr+0x26c>)
 800c936:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800c93a:	4989      	ldr	r1, [pc, #548]	; (800cb60 <tcp_slowtmr+0x278>)
 800c93c:	4887      	ldr	r0, [pc, #540]	; (800cb5c <tcp_slowtmr+0x274>)
 800c93e:	f008 f8eb 	bl	8014b18 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800c942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c944:	7d1b      	ldrb	r3, [r3, #20]
 800c946:	2b0a      	cmp	r3, #10
 800c948:	d106      	bne.n	800c958 <tcp_slowtmr+0x70>
 800c94a:	4b82      	ldr	r3, [pc, #520]	; (800cb54 <tcp_slowtmr+0x26c>)
 800c94c:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800c950:	4984      	ldr	r1, [pc, #528]	; (800cb64 <tcp_slowtmr+0x27c>)
 800c952:	4882      	ldr	r0, [pc, #520]	; (800cb5c <tcp_slowtmr+0x274>)
 800c954:	f008 f8e0 	bl	8014b18 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800c958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c95a:	7f9a      	ldrb	r2, [r3, #30]
 800c95c:	4b7b      	ldr	r3, [pc, #492]	; (800cb4c <tcp_slowtmr+0x264>)
 800c95e:	781b      	ldrb	r3, [r3, #0]
 800c960:	429a      	cmp	r2, r3
 800c962:	d105      	bne.n	800c970 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800c964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c966:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800c968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c96a:	68db      	ldr	r3, [r3, #12]
 800c96c:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800c96e:	e270      	b.n	800ce52 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800c970:	4b76      	ldr	r3, [pc, #472]	; (800cb4c <tcp_slowtmr+0x264>)
 800c972:	781a      	ldrb	r2, [r3, #0]
 800c974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c976:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800c978:	2300      	movs	r3, #0
 800c97a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800c97e:	2300      	movs	r3, #0
 800c980:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800c984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c986:	7d1b      	ldrb	r3, [r3, #20]
 800c988:	2b02      	cmp	r3, #2
 800c98a:	d10a      	bne.n	800c9a2 <tcp_slowtmr+0xba>
 800c98c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c98e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c992:	2b05      	cmp	r3, #5
 800c994:	d905      	bls.n	800c9a2 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800c996:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c99a:	3301      	adds	r3, #1
 800c99c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c9a0:	e11e      	b.n	800cbe0 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800c9a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9a4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c9a8:	2b0b      	cmp	r3, #11
 800c9aa:	d905      	bls.n	800c9b8 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800c9ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c9b0:	3301      	adds	r3, #1
 800c9b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c9b6:	e113      	b.n	800cbe0 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800c9b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9ba:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d075      	beq.n	800caae <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800c9c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d006      	beq.n	800c9d8 <tcp_slowtmr+0xf0>
 800c9ca:	4b62      	ldr	r3, [pc, #392]	; (800cb54 <tcp_slowtmr+0x26c>)
 800c9cc:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800c9d0:	4965      	ldr	r1, [pc, #404]	; (800cb68 <tcp_slowtmr+0x280>)
 800c9d2:	4862      	ldr	r0, [pc, #392]	; (800cb5c <tcp_slowtmr+0x274>)
 800c9d4:	f008 f8a0 	bl	8014b18 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800c9d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d106      	bne.n	800c9ee <tcp_slowtmr+0x106>
 800c9e0:	4b5c      	ldr	r3, [pc, #368]	; (800cb54 <tcp_slowtmr+0x26c>)
 800c9e2:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800c9e6:	4961      	ldr	r1, [pc, #388]	; (800cb6c <tcp_slowtmr+0x284>)
 800c9e8:	485c      	ldr	r0, [pc, #368]	; (800cb5c <tcp_slowtmr+0x274>)
 800c9ea:	f008 f895 	bl	8014b18 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800c9ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9f0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800c9f4:	2b0b      	cmp	r3, #11
 800c9f6:	d905      	bls.n	800ca04 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800c9f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c9fc:	3301      	adds	r3, #1
 800c9fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ca02:	e0ed      	b.n	800cbe0 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800ca04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca06:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800ca0a:	3b01      	subs	r3, #1
 800ca0c:	4a58      	ldr	r2, [pc, #352]	; (800cb70 <tcp_slowtmr+0x288>)
 800ca0e:	5cd3      	ldrb	r3, [r2, r3]
 800ca10:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800ca12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca14:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800ca18:	7c7a      	ldrb	r2, [r7, #17]
 800ca1a:	429a      	cmp	r2, r3
 800ca1c:	d907      	bls.n	800ca2e <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800ca1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca20:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800ca24:	3301      	adds	r3, #1
 800ca26:	b2da      	uxtb	r2, r3
 800ca28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca2a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800ca2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca30:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800ca34:	7c7a      	ldrb	r2, [r7, #17]
 800ca36:	429a      	cmp	r2, r3
 800ca38:	f200 80d2 	bhi.w	800cbe0 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800ca3c:	2301      	movs	r3, #1
 800ca3e:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800ca40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca42:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d108      	bne.n	800ca5c <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800ca4a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ca4c:	f005 f968 	bl	8011d20 <tcp_zero_window_probe>
 800ca50:	4603      	mov	r3, r0
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d014      	beq.n	800ca80 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800ca56:	2300      	movs	r3, #0
 800ca58:	623b      	str	r3, [r7, #32]
 800ca5a:	e011      	b.n	800ca80 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800ca5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca5e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ca62:	4619      	mov	r1, r3
 800ca64:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ca66:	f004 f82d 	bl	8010ac4 <tcp_split_unsent_seg>
 800ca6a:	4603      	mov	r3, r0
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d107      	bne.n	800ca80 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800ca70:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ca72:	f004 faad 	bl	8010fd0 <tcp_output>
 800ca76:	4603      	mov	r3, r0
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d101      	bne.n	800ca80 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800ca7c:	2300      	movs	r3, #0
 800ca7e:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800ca80:	6a3b      	ldr	r3, [r7, #32]
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	f000 80ac 	beq.w	800cbe0 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800ca88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca8a:	2200      	movs	r2, #0
 800ca8c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800ca90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca92:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800ca96:	2b06      	cmp	r3, #6
 800ca98:	f200 80a2 	bhi.w	800cbe0 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800ca9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca9e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800caa2:	3301      	adds	r3, #1
 800caa4:	b2da      	uxtb	r2, r3
 800caa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caa8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800caac:	e098      	b.n	800cbe0 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800caae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cab0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	db0f      	blt.n	800cad8 <tcp_slowtmr+0x1f0>
 800cab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caba:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800cabe:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800cac2:	4293      	cmp	r3, r2
 800cac4:	d008      	beq.n	800cad8 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800cac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cac8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800cacc:	b29b      	uxth	r3, r3
 800cace:	3301      	adds	r3, #1
 800cad0:	b29b      	uxth	r3, r3
 800cad2:	b21a      	sxth	r2, r3
 800cad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cad6:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800cad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cada:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800cade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cae0:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800cae4:	429a      	cmp	r2, r3
 800cae6:	db7b      	blt.n	800cbe0 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800cae8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800caea:	f004 fd63 	bl	80115b4 <tcp_rexmit_rto_prepare>
 800caee:	4603      	mov	r3, r0
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d007      	beq.n	800cb04 <tcp_slowtmr+0x21c>
 800caf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d171      	bne.n	800cbe0 <tcp_slowtmr+0x2f8>
 800cafc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cafe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d06d      	beq.n	800cbe0 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800cb04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb06:	7d1b      	ldrb	r3, [r3, #20]
 800cb08:	2b02      	cmp	r3, #2
 800cb0a:	d03a      	beq.n	800cb82 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800cb0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb0e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cb12:	2b0c      	cmp	r3, #12
 800cb14:	bf28      	it	cs
 800cb16:	230c      	movcs	r3, #12
 800cb18:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800cb1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb1c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800cb20:	10db      	asrs	r3, r3, #3
 800cb22:	b21b      	sxth	r3, r3
 800cb24:	461a      	mov	r2, r3
 800cb26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb28:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800cb2c:	4413      	add	r3, r2
 800cb2e:	7efa      	ldrb	r2, [r7, #27]
 800cb30:	4910      	ldr	r1, [pc, #64]	; (800cb74 <tcp_slowtmr+0x28c>)
 800cb32:	5c8a      	ldrb	r2, [r1, r2]
 800cb34:	4093      	lsls	r3, r2
 800cb36:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800cb38:	697b      	ldr	r3, [r7, #20]
 800cb3a:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800cb3e:	4293      	cmp	r3, r2
 800cb40:	dc1a      	bgt.n	800cb78 <tcp_slowtmr+0x290>
 800cb42:	697b      	ldr	r3, [r7, #20]
 800cb44:	b21a      	sxth	r2, r3
 800cb46:	e019      	b.n	800cb7c <tcp_slowtmr+0x294>
 800cb48:	20008ba4 	.word	0x20008ba4
 800cb4c:	20008bba 	.word	0x20008bba
 800cb50:	20008bb0 	.word	0x20008bb0
 800cb54:	08016bf0 	.word	0x08016bf0
 800cb58:	08016f34 	.word	0x08016f34
 800cb5c:	08016c34 	.word	0x08016c34
 800cb60:	08016f60 	.word	0x08016f60
 800cb64:	08016f8c 	.word	0x08016f8c
 800cb68:	08016fbc 	.word	0x08016fbc
 800cb6c:	08016ff0 	.word	0x08016ff0
 800cb70:	0801aafc 	.word	0x0801aafc
 800cb74:	0801aaec 	.word	0x0801aaec
 800cb78:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800cb7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb7e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800cb82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb84:	2200      	movs	r2, #0
 800cb86:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800cb88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb8a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800cb8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb90:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800cb94:	4293      	cmp	r3, r2
 800cb96:	bf28      	it	cs
 800cb98:	4613      	movcs	r3, r2
 800cb9a:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800cb9c:	8a7b      	ldrh	r3, [r7, #18]
 800cb9e:	085b      	lsrs	r3, r3, #1
 800cba0:	b29a      	uxth	r2, r3
 800cba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cba4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800cba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbaa:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800cbae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbb0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cbb2:	005b      	lsls	r3, r3, #1
 800cbb4:	b29b      	uxth	r3, r3
 800cbb6:	429a      	cmp	r2, r3
 800cbb8:	d206      	bcs.n	800cbc8 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800cbba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbbc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cbbe:	005b      	lsls	r3, r3, #1
 800cbc0:	b29a      	uxth	r2, r3
 800cbc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbc4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800cbc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbca:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800cbcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbce:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800cbd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbd4:	2200      	movs	r2, #0
 800cbd6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800cbda:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cbdc:	f004 fd5a 	bl	8011694 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800cbe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbe2:	7d1b      	ldrb	r3, [r3, #20]
 800cbe4:	2b06      	cmp	r3, #6
 800cbe6:	d111      	bne.n	800cc0c <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800cbe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbea:	8b5b      	ldrh	r3, [r3, #26]
 800cbec:	f003 0310 	and.w	r3, r3, #16
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d00b      	beq.n	800cc0c <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cbf4:	4b9c      	ldr	r3, [pc, #624]	; (800ce68 <tcp_slowtmr+0x580>)
 800cbf6:	681a      	ldr	r2, [r3, #0]
 800cbf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbfa:	6a1b      	ldr	r3, [r3, #32]
 800cbfc:	1ad3      	subs	r3, r2, r3
 800cbfe:	2b28      	cmp	r3, #40	; 0x28
 800cc00:	d904      	bls.n	800cc0c <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800cc02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc06:	3301      	adds	r3, #1
 800cc08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800cc0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc0e:	7a5b      	ldrb	r3, [r3, #9]
 800cc10:	f003 0308 	and.w	r3, r3, #8
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d04a      	beq.n	800ccae <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800cc18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc1a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800cc1c:	2b04      	cmp	r3, #4
 800cc1e:	d003      	beq.n	800cc28 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800cc20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc22:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800cc24:	2b07      	cmp	r3, #7
 800cc26:	d142      	bne.n	800ccae <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cc28:	4b8f      	ldr	r3, [pc, #572]	; (800ce68 <tcp_slowtmr+0x580>)
 800cc2a:	681a      	ldr	r2, [r3, #0]
 800cc2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc2e:	6a1b      	ldr	r3, [r3, #32]
 800cc30:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800cc32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc34:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800cc38:	4b8c      	ldr	r3, [pc, #560]	; (800ce6c <tcp_slowtmr+0x584>)
 800cc3a:	440b      	add	r3, r1
 800cc3c:	498c      	ldr	r1, [pc, #560]	; (800ce70 <tcp_slowtmr+0x588>)
 800cc3e:	fba1 1303 	umull	r1, r3, r1, r3
 800cc42:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cc44:	429a      	cmp	r2, r3
 800cc46:	d90a      	bls.n	800cc5e <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800cc48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc4c:	3301      	adds	r3, #1
 800cc4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800cc52:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cc56:	3301      	adds	r3, #1
 800cc58:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800cc5c:	e027      	b.n	800ccae <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cc5e:	4b82      	ldr	r3, [pc, #520]	; (800ce68 <tcp_slowtmr+0x580>)
 800cc60:	681a      	ldr	r2, [r3, #0]
 800cc62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc64:	6a1b      	ldr	r3, [r3, #32]
 800cc66:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800cc68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc6a:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800cc6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc70:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800cc74:	4618      	mov	r0, r3
 800cc76:	4b7f      	ldr	r3, [pc, #508]	; (800ce74 <tcp_slowtmr+0x58c>)
 800cc78:	fb00 f303 	mul.w	r3, r0, r3
 800cc7c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800cc7e:	497c      	ldr	r1, [pc, #496]	; (800ce70 <tcp_slowtmr+0x588>)
 800cc80:	fba1 1303 	umull	r1, r3, r1, r3
 800cc84:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cc86:	429a      	cmp	r2, r3
 800cc88:	d911      	bls.n	800ccae <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800cc8a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cc8c:	f005 f808 	bl	8011ca0 <tcp_keepalive>
 800cc90:	4603      	mov	r3, r0
 800cc92:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800cc96:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d107      	bne.n	800ccae <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800cc9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cca0:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800cca4:	3301      	adds	r3, #1
 800cca6:	b2da      	uxtb	r2, r3
 800cca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccaa:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800ccae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d011      	beq.n	800ccda <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800ccb6:	4b6c      	ldr	r3, [pc, #432]	; (800ce68 <tcp_slowtmr+0x580>)
 800ccb8:	681a      	ldr	r2, [r3, #0]
 800ccba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccbc:	6a1b      	ldr	r3, [r3, #32]
 800ccbe:	1ad2      	subs	r2, r2, r3
 800ccc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccc2:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800ccc6:	4619      	mov	r1, r3
 800ccc8:	460b      	mov	r3, r1
 800ccca:	005b      	lsls	r3, r3, #1
 800cccc:	440b      	add	r3, r1
 800ccce:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800ccd0:	429a      	cmp	r2, r3
 800ccd2:	d302      	bcc.n	800ccda <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800ccd4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ccd6:	f000 fec3 	bl	800da60 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800ccda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccdc:	7d1b      	ldrb	r3, [r3, #20]
 800ccde:	2b03      	cmp	r3, #3
 800cce0:	d10b      	bne.n	800ccfa <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cce2:	4b61      	ldr	r3, [pc, #388]	; (800ce68 <tcp_slowtmr+0x580>)
 800cce4:	681a      	ldr	r2, [r3, #0]
 800cce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cce8:	6a1b      	ldr	r3, [r3, #32]
 800ccea:	1ad3      	subs	r3, r2, r3
 800ccec:	2b28      	cmp	r3, #40	; 0x28
 800ccee:	d904      	bls.n	800ccfa <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800ccf0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ccf4:	3301      	adds	r3, #1
 800ccf6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800ccfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccfc:	7d1b      	ldrb	r3, [r3, #20]
 800ccfe:	2b09      	cmp	r3, #9
 800cd00:	d10b      	bne.n	800cd1a <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800cd02:	4b59      	ldr	r3, [pc, #356]	; (800ce68 <tcp_slowtmr+0x580>)
 800cd04:	681a      	ldr	r2, [r3, #0]
 800cd06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd08:	6a1b      	ldr	r3, [r3, #32]
 800cd0a:	1ad3      	subs	r3, r2, r3
 800cd0c:	2bf0      	cmp	r3, #240	; 0xf0
 800cd0e:	d904      	bls.n	800cd1a <tcp_slowtmr+0x432>
        ++pcb_remove;
 800cd10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cd14:	3301      	adds	r3, #1
 800cd16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800cd1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d060      	beq.n	800cde4 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800cd22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cd28:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800cd2a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cd2c:	f000 fce4 	bl	800d6f8 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800cd30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d010      	beq.n	800cd58 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800cd36:	4b50      	ldr	r3, [pc, #320]	; (800ce78 <tcp_slowtmr+0x590>)
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cd3c:	429a      	cmp	r2, r3
 800cd3e:	d106      	bne.n	800cd4e <tcp_slowtmr+0x466>
 800cd40:	4b4e      	ldr	r3, [pc, #312]	; (800ce7c <tcp_slowtmr+0x594>)
 800cd42:	f240 526d 	movw	r2, #1389	; 0x56d
 800cd46:	494e      	ldr	r1, [pc, #312]	; (800ce80 <tcp_slowtmr+0x598>)
 800cd48:	484e      	ldr	r0, [pc, #312]	; (800ce84 <tcp_slowtmr+0x59c>)
 800cd4a:	f007 fee5 	bl	8014b18 <iprintf>
        prev->next = pcb->next;
 800cd4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd50:	68da      	ldr	r2, [r3, #12]
 800cd52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd54:	60da      	str	r2, [r3, #12]
 800cd56:	e00f      	b.n	800cd78 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800cd58:	4b47      	ldr	r3, [pc, #284]	; (800ce78 <tcp_slowtmr+0x590>)
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cd5e:	429a      	cmp	r2, r3
 800cd60:	d006      	beq.n	800cd70 <tcp_slowtmr+0x488>
 800cd62:	4b46      	ldr	r3, [pc, #280]	; (800ce7c <tcp_slowtmr+0x594>)
 800cd64:	f240 5271 	movw	r2, #1393	; 0x571
 800cd68:	4947      	ldr	r1, [pc, #284]	; (800ce88 <tcp_slowtmr+0x5a0>)
 800cd6a:	4846      	ldr	r0, [pc, #280]	; (800ce84 <tcp_slowtmr+0x59c>)
 800cd6c:	f007 fed4 	bl	8014b18 <iprintf>
        tcp_active_pcbs = pcb->next;
 800cd70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd72:	68db      	ldr	r3, [r3, #12]
 800cd74:	4a40      	ldr	r2, [pc, #256]	; (800ce78 <tcp_slowtmr+0x590>)
 800cd76:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800cd78:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d013      	beq.n	800cda8 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800cd80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd82:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800cd84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd86:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800cd88:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800cd8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd8c:	3304      	adds	r3, #4
 800cd8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cd90:	8ad2      	ldrh	r2, [r2, #22]
 800cd92:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cd94:	8b09      	ldrh	r1, [r1, #24]
 800cd96:	9102      	str	r1, [sp, #8]
 800cd98:	9201      	str	r2, [sp, #4]
 800cd9a:	9300      	str	r3, [sp, #0]
 800cd9c:	462b      	mov	r3, r5
 800cd9e:	4622      	mov	r2, r4
 800cda0:	4601      	mov	r1, r0
 800cda2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cda4:	f004 fec8 	bl	8011b38 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800cda8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdaa:	691b      	ldr	r3, [r3, #16]
 800cdac:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800cdae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdb0:	7d1b      	ldrb	r3, [r3, #20]
 800cdb2:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800cdb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdb6:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800cdb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdba:	68db      	ldr	r3, [r3, #12]
 800cdbc:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800cdbe:	6838      	ldr	r0, [r7, #0]
 800cdc0:	f7ff f83a 	bl	800be38 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800cdc4:	4b31      	ldr	r3, [pc, #196]	; (800ce8c <tcp_slowtmr+0x5a4>)
 800cdc6:	2200      	movs	r2, #0
 800cdc8:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d004      	beq.n	800cdda <tcp_slowtmr+0x4f2>
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	f06f 010c 	mvn.w	r1, #12
 800cdd6:	68b8      	ldr	r0, [r7, #8]
 800cdd8:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800cdda:	4b2c      	ldr	r3, [pc, #176]	; (800ce8c <tcp_slowtmr+0x5a4>)
 800cddc:	781b      	ldrb	r3, [r3, #0]
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d037      	beq.n	800ce52 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800cde2:	e592      	b.n	800c90a <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800cde4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cde6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800cde8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdea:	68db      	ldr	r3, [r3, #12]
 800cdec:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800cdee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdf0:	7f1b      	ldrb	r3, [r3, #28]
 800cdf2:	3301      	adds	r3, #1
 800cdf4:	b2da      	uxtb	r2, r3
 800cdf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdf8:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800cdfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdfc:	7f1a      	ldrb	r2, [r3, #28]
 800cdfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce00:	7f5b      	ldrb	r3, [r3, #29]
 800ce02:	429a      	cmp	r2, r3
 800ce04:	d325      	bcc.n	800ce52 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800ce06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce08:	2200      	movs	r2, #0
 800ce0a:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800ce0c:	4b1f      	ldr	r3, [pc, #124]	; (800ce8c <tcp_slowtmr+0x5a4>)
 800ce0e:	2200      	movs	r2, #0
 800ce10:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800ce12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d00b      	beq.n	800ce34 <tcp_slowtmr+0x54c>
 800ce1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ce22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ce24:	6912      	ldr	r2, [r2, #16]
 800ce26:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ce28:	4610      	mov	r0, r2
 800ce2a:	4798      	blx	r3
 800ce2c:	4603      	mov	r3, r0
 800ce2e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800ce32:	e002      	b.n	800ce3a <tcp_slowtmr+0x552>
 800ce34:	2300      	movs	r3, #0
 800ce36:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800ce3a:	4b14      	ldr	r3, [pc, #80]	; (800ce8c <tcp_slowtmr+0x5a4>)
 800ce3c:	781b      	ldrb	r3, [r3, #0]
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d000      	beq.n	800ce44 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800ce42:	e562      	b.n	800c90a <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800ce44:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d102      	bne.n	800ce52 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800ce4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ce4e:	f004 f8bf 	bl	8010fd0 <tcp_output>
  while (pcb != NULL) {
 800ce52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	f47f ad5e 	bne.w	800c916 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800ce5a:	2300      	movs	r3, #0
 800ce5c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800ce5e:	4b0c      	ldr	r3, [pc, #48]	; (800ce90 <tcp_slowtmr+0x5a8>)
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800ce64:	e069      	b.n	800cf3a <tcp_slowtmr+0x652>
 800ce66:	bf00      	nop
 800ce68:	20008ba4 	.word	0x20008ba4
 800ce6c:	000a4cb8 	.word	0x000a4cb8
 800ce70:	10624dd3 	.word	0x10624dd3
 800ce74:	000124f8 	.word	0x000124f8
 800ce78:	20008bb0 	.word	0x20008bb0
 800ce7c:	08016bf0 	.word	0x08016bf0
 800ce80:	08017028 	.word	0x08017028
 800ce84:	08016c34 	.word	0x08016c34
 800ce88:	08017054 	.word	0x08017054
 800ce8c:	20008bb8 	.word	0x20008bb8
 800ce90:	20008bb4 	.word	0x20008bb4
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800ce94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce96:	7d1b      	ldrb	r3, [r3, #20]
 800ce98:	2b0a      	cmp	r3, #10
 800ce9a:	d006      	beq.n	800ceaa <tcp_slowtmr+0x5c2>
 800ce9c:	4b2b      	ldr	r3, [pc, #172]	; (800cf4c <tcp_slowtmr+0x664>)
 800ce9e:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800cea2:	492b      	ldr	r1, [pc, #172]	; (800cf50 <tcp_slowtmr+0x668>)
 800cea4:	482b      	ldr	r0, [pc, #172]	; (800cf54 <tcp_slowtmr+0x66c>)
 800cea6:	f007 fe37 	bl	8014b18 <iprintf>
    pcb_remove = 0;
 800ceaa:	2300      	movs	r3, #0
 800ceac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800ceb0:	4b29      	ldr	r3, [pc, #164]	; (800cf58 <tcp_slowtmr+0x670>)
 800ceb2:	681a      	ldr	r2, [r3, #0]
 800ceb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ceb6:	6a1b      	ldr	r3, [r3, #32]
 800ceb8:	1ad3      	subs	r3, r2, r3
 800ceba:	2bf0      	cmp	r3, #240	; 0xf0
 800cebc:	d904      	bls.n	800cec8 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800cebe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cec2:	3301      	adds	r3, #1
 800cec4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800cec8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d02f      	beq.n	800cf30 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800ced0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ced2:	f000 fc11 	bl	800d6f8 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800ced6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d010      	beq.n	800cefe <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800cedc:	4b1f      	ldr	r3, [pc, #124]	; (800cf5c <tcp_slowtmr+0x674>)
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cee2:	429a      	cmp	r2, r3
 800cee4:	d106      	bne.n	800cef4 <tcp_slowtmr+0x60c>
 800cee6:	4b19      	ldr	r3, [pc, #100]	; (800cf4c <tcp_slowtmr+0x664>)
 800cee8:	f240 52af 	movw	r2, #1455	; 0x5af
 800ceec:	491c      	ldr	r1, [pc, #112]	; (800cf60 <tcp_slowtmr+0x678>)
 800ceee:	4819      	ldr	r0, [pc, #100]	; (800cf54 <tcp_slowtmr+0x66c>)
 800cef0:	f007 fe12 	bl	8014b18 <iprintf>
        prev->next = pcb->next;
 800cef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cef6:	68da      	ldr	r2, [r3, #12]
 800cef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cefa:	60da      	str	r2, [r3, #12]
 800cefc:	e00f      	b.n	800cf1e <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800cefe:	4b17      	ldr	r3, [pc, #92]	; (800cf5c <tcp_slowtmr+0x674>)
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cf04:	429a      	cmp	r2, r3
 800cf06:	d006      	beq.n	800cf16 <tcp_slowtmr+0x62e>
 800cf08:	4b10      	ldr	r3, [pc, #64]	; (800cf4c <tcp_slowtmr+0x664>)
 800cf0a:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800cf0e:	4915      	ldr	r1, [pc, #84]	; (800cf64 <tcp_slowtmr+0x67c>)
 800cf10:	4810      	ldr	r0, [pc, #64]	; (800cf54 <tcp_slowtmr+0x66c>)
 800cf12:	f007 fe01 	bl	8014b18 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800cf16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf18:	68db      	ldr	r3, [r3, #12]
 800cf1a:	4a10      	ldr	r2, [pc, #64]	; (800cf5c <tcp_slowtmr+0x674>)
 800cf1c:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800cf1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf20:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800cf22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf24:	68db      	ldr	r3, [r3, #12]
 800cf26:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800cf28:	69f8      	ldr	r0, [r7, #28]
 800cf2a:	f7fe ff85 	bl	800be38 <tcp_free>
 800cf2e:	e004      	b.n	800cf3a <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800cf30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf32:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800cf34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf36:	68db      	ldr	r3, [r3, #12]
 800cf38:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800cf3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d1a9      	bne.n	800ce94 <tcp_slowtmr+0x5ac>
    }
  }
}
 800cf40:	bf00      	nop
 800cf42:	bf00      	nop
 800cf44:	3730      	adds	r7, #48	; 0x30
 800cf46:	46bd      	mov	sp, r7
 800cf48:	bdb0      	pop	{r4, r5, r7, pc}
 800cf4a:	bf00      	nop
 800cf4c:	08016bf0 	.word	0x08016bf0
 800cf50:	08017080 	.word	0x08017080
 800cf54:	08016c34 	.word	0x08016c34
 800cf58:	20008ba4 	.word	0x20008ba4
 800cf5c:	20008bb4 	.word	0x20008bb4
 800cf60:	080170b0 	.word	0x080170b0
 800cf64:	080170d8 	.word	0x080170d8

0800cf68 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800cf68:	b580      	push	{r7, lr}
 800cf6a:	b082      	sub	sp, #8
 800cf6c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800cf6e:	4b2d      	ldr	r3, [pc, #180]	; (800d024 <tcp_fasttmr+0xbc>)
 800cf70:	781b      	ldrb	r3, [r3, #0]
 800cf72:	3301      	adds	r3, #1
 800cf74:	b2da      	uxtb	r2, r3
 800cf76:	4b2b      	ldr	r3, [pc, #172]	; (800d024 <tcp_fasttmr+0xbc>)
 800cf78:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800cf7a:	4b2b      	ldr	r3, [pc, #172]	; (800d028 <tcp_fasttmr+0xc0>)
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800cf80:	e048      	b.n	800d014 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	7f9a      	ldrb	r2, [r3, #30]
 800cf86:	4b27      	ldr	r3, [pc, #156]	; (800d024 <tcp_fasttmr+0xbc>)
 800cf88:	781b      	ldrb	r3, [r3, #0]
 800cf8a:	429a      	cmp	r2, r3
 800cf8c:	d03f      	beq.n	800d00e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800cf8e:	4b25      	ldr	r3, [pc, #148]	; (800d024 <tcp_fasttmr+0xbc>)
 800cf90:	781a      	ldrb	r2, [r3, #0]
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	8b5b      	ldrh	r3, [r3, #26]
 800cf9a:	f003 0301 	and.w	r3, r3, #1
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d010      	beq.n	800cfc4 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	8b5b      	ldrh	r3, [r3, #26]
 800cfa6:	f043 0302 	orr.w	r3, r3, #2
 800cfaa:	b29a      	uxth	r2, r3
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800cfb0:	6878      	ldr	r0, [r7, #4]
 800cfb2:	f004 f80d 	bl	8010fd0 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	8b5b      	ldrh	r3, [r3, #26]
 800cfba:	f023 0303 	bic.w	r3, r3, #3
 800cfbe:	b29a      	uxth	r2, r3
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	8b5b      	ldrh	r3, [r3, #26]
 800cfc8:	f003 0308 	and.w	r3, r3, #8
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d009      	beq.n	800cfe4 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	8b5b      	ldrh	r3, [r3, #26]
 800cfd4:	f023 0308 	bic.w	r3, r3, #8
 800cfd8:	b29a      	uxth	r2, r3
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800cfde:	6878      	ldr	r0, [r7, #4]
 800cfe0:	f7ff f8be 	bl	800c160 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	68db      	ldr	r3, [r3, #12]
 800cfe8:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d00a      	beq.n	800d008 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800cff2:	4b0e      	ldr	r3, [pc, #56]	; (800d02c <tcp_fasttmr+0xc4>)
 800cff4:	2200      	movs	r2, #0
 800cff6:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800cff8:	6878      	ldr	r0, [r7, #4]
 800cffa:	f000 f819 	bl	800d030 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800cffe:	4b0b      	ldr	r3, [pc, #44]	; (800d02c <tcp_fasttmr+0xc4>)
 800d000:	781b      	ldrb	r3, [r3, #0]
 800d002:	2b00      	cmp	r3, #0
 800d004:	d000      	beq.n	800d008 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800d006:	e7b8      	b.n	800cf7a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800d008:	683b      	ldr	r3, [r7, #0]
 800d00a:	607b      	str	r3, [r7, #4]
 800d00c:	e002      	b.n	800d014 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	68db      	ldr	r3, [r3, #12]
 800d012:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	2b00      	cmp	r3, #0
 800d018:	d1b3      	bne.n	800cf82 <tcp_fasttmr+0x1a>
    }
  }
}
 800d01a:	bf00      	nop
 800d01c:	bf00      	nop
 800d01e:	3708      	adds	r7, #8
 800d020:	46bd      	mov	sp, r7
 800d022:	bd80      	pop	{r7, pc}
 800d024:	20008bba 	.word	0x20008bba
 800d028:	20008bb0 	.word	0x20008bb0
 800d02c:	20008bb8 	.word	0x20008bb8

0800d030 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800d030:	b590      	push	{r4, r7, lr}
 800d032:	b085      	sub	sp, #20
 800d034:	af00      	add	r7, sp, #0
 800d036:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d109      	bne.n	800d052 <tcp_process_refused_data+0x22>
 800d03e:	4b37      	ldr	r3, [pc, #220]	; (800d11c <tcp_process_refused_data+0xec>)
 800d040:	f240 6209 	movw	r2, #1545	; 0x609
 800d044:	4936      	ldr	r1, [pc, #216]	; (800d120 <tcp_process_refused_data+0xf0>)
 800d046:	4837      	ldr	r0, [pc, #220]	; (800d124 <tcp_process_refused_data+0xf4>)
 800d048:	f007 fd66 	bl	8014b18 <iprintf>
 800d04c:	f06f 030f 	mvn.w	r3, #15
 800d050:	e060      	b.n	800d114 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d056:	7b5b      	ldrb	r3, [r3, #13]
 800d058:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d05e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	2200      	movs	r2, #0
 800d064:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d00b      	beq.n	800d088 <tcp_process_refused_data+0x58>
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	6918      	ldr	r0, [r3, #16]
 800d07a:	2300      	movs	r3, #0
 800d07c:	68ba      	ldr	r2, [r7, #8]
 800d07e:	6879      	ldr	r1, [r7, #4]
 800d080:	47a0      	blx	r4
 800d082:	4603      	mov	r3, r0
 800d084:	73fb      	strb	r3, [r7, #15]
 800d086:	e007      	b.n	800d098 <tcp_process_refused_data+0x68>
 800d088:	2300      	movs	r3, #0
 800d08a:	68ba      	ldr	r2, [r7, #8]
 800d08c:	6879      	ldr	r1, [r7, #4]
 800d08e:	2000      	movs	r0, #0
 800d090:	f000 f8c2 	bl	800d218 <tcp_recv_null>
 800d094:	4603      	mov	r3, r0
 800d096:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800d098:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d12a      	bne.n	800d0f6 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800d0a0:	7bbb      	ldrb	r3, [r7, #14]
 800d0a2:	f003 0320 	and.w	r3, r3, #32
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d033      	beq.n	800d112 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d0ae:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d0b2:	d005      	beq.n	800d0c0 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d0b8:	3301      	adds	r3, #1
 800d0ba:	b29a      	uxth	r2, r3
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d00b      	beq.n	800d0e2 <tcp_process_refused_data+0xb2>
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	6918      	ldr	r0, [r3, #16]
 800d0d4:	2300      	movs	r3, #0
 800d0d6:	2200      	movs	r2, #0
 800d0d8:	6879      	ldr	r1, [r7, #4]
 800d0da:	47a0      	blx	r4
 800d0dc:	4603      	mov	r3, r0
 800d0de:	73fb      	strb	r3, [r7, #15]
 800d0e0:	e001      	b.n	800d0e6 <tcp_process_refused_data+0xb6>
 800d0e2:	2300      	movs	r3, #0
 800d0e4:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800d0e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d0ea:	f113 0f0d 	cmn.w	r3, #13
 800d0ee:	d110      	bne.n	800d112 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800d0f0:	f06f 030c 	mvn.w	r3, #12
 800d0f4:	e00e      	b.n	800d114 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800d0f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d0fa:	f113 0f0d 	cmn.w	r3, #13
 800d0fe:	d102      	bne.n	800d106 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800d100:	f06f 030c 	mvn.w	r3, #12
 800d104:	e006      	b.n	800d114 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	68ba      	ldr	r2, [r7, #8]
 800d10a:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800d10c:	f06f 0304 	mvn.w	r3, #4
 800d110:	e000      	b.n	800d114 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800d112:	2300      	movs	r3, #0
}
 800d114:	4618      	mov	r0, r3
 800d116:	3714      	adds	r7, #20
 800d118:	46bd      	mov	sp, r7
 800d11a:	bd90      	pop	{r4, r7, pc}
 800d11c:	08016bf0 	.word	0x08016bf0
 800d120:	08017100 	.word	0x08017100
 800d124:	08016c34 	.word	0x08016c34

0800d128 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800d128:	b580      	push	{r7, lr}
 800d12a:	b084      	sub	sp, #16
 800d12c:	af00      	add	r7, sp, #0
 800d12e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800d130:	e007      	b.n	800d142 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800d138:	6878      	ldr	r0, [r7, #4]
 800d13a:	f000 f80a 	bl	800d152 <tcp_seg_free>
    seg = next;
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	2b00      	cmp	r3, #0
 800d146:	d1f4      	bne.n	800d132 <tcp_segs_free+0xa>
  }
}
 800d148:	bf00      	nop
 800d14a:	bf00      	nop
 800d14c:	3710      	adds	r7, #16
 800d14e:	46bd      	mov	sp, r7
 800d150:	bd80      	pop	{r7, pc}

0800d152 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800d152:	b580      	push	{r7, lr}
 800d154:	b082      	sub	sp, #8
 800d156:	af00      	add	r7, sp, #0
 800d158:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d00c      	beq.n	800d17a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	685b      	ldr	r3, [r3, #4]
 800d164:	2b00      	cmp	r3, #0
 800d166:	d004      	beq.n	800d172 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	685b      	ldr	r3, [r3, #4]
 800d16c:	4618      	mov	r0, r3
 800d16e:	f7fe fbc3 	bl	800b8f8 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800d172:	6879      	ldr	r1, [r7, #4]
 800d174:	2003      	movs	r0, #3
 800d176:	f7fd fd49 	bl	800ac0c <memp_free>
  }
}
 800d17a:	bf00      	nop
 800d17c:	3708      	adds	r7, #8
 800d17e:	46bd      	mov	sp, r7
 800d180:	bd80      	pop	{r7, pc}
	...

0800d184 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 800d184:	b580      	push	{r7, lr}
 800d186:	b082      	sub	sp, #8
 800d188:	af00      	add	r7, sp, #0
 800d18a:	6078      	str	r0, [r7, #4]
 800d18c:	460b      	mov	r3, r1
 800d18e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	2b00      	cmp	r3, #0
 800d194:	d107      	bne.n	800d1a6 <tcp_setprio+0x22>
 800d196:	4b07      	ldr	r3, [pc, #28]	; (800d1b4 <tcp_setprio+0x30>)
 800d198:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 800d19c:	4906      	ldr	r1, [pc, #24]	; (800d1b8 <tcp_setprio+0x34>)
 800d19e:	4807      	ldr	r0, [pc, #28]	; (800d1bc <tcp_setprio+0x38>)
 800d1a0:	f007 fcba 	bl	8014b18 <iprintf>
 800d1a4:	e002      	b.n	800d1ac <tcp_setprio+0x28>

  pcb->prio = prio;
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	78fa      	ldrb	r2, [r7, #3]
 800d1aa:	755a      	strb	r2, [r3, #21]
}
 800d1ac:	3708      	adds	r7, #8
 800d1ae:	46bd      	mov	sp, r7
 800d1b0:	bd80      	pop	{r7, pc}
 800d1b2:	bf00      	nop
 800d1b4:	08016bf0 	.word	0x08016bf0
 800d1b8:	08017128 	.word	0x08017128
 800d1bc:	08016c34 	.word	0x08016c34

0800d1c0 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800d1c0:	b580      	push	{r7, lr}
 800d1c2:	b084      	sub	sp, #16
 800d1c4:	af00      	add	r7, sp, #0
 800d1c6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d106      	bne.n	800d1dc <tcp_seg_copy+0x1c>
 800d1ce:	4b0f      	ldr	r3, [pc, #60]	; (800d20c <tcp_seg_copy+0x4c>)
 800d1d0:	f240 6282 	movw	r2, #1666	; 0x682
 800d1d4:	490e      	ldr	r1, [pc, #56]	; (800d210 <tcp_seg_copy+0x50>)
 800d1d6:	480f      	ldr	r0, [pc, #60]	; (800d214 <tcp_seg_copy+0x54>)
 800d1d8:	f007 fc9e 	bl	8014b18 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800d1dc:	2003      	movs	r0, #3
 800d1de:	f7fd fca5 	bl	800ab2c <memp_malloc>
 800d1e2:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d101      	bne.n	800d1ee <tcp_seg_copy+0x2e>
    return NULL;
 800d1ea:	2300      	movs	r3, #0
 800d1ec:	e00a      	b.n	800d204 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800d1ee:	2210      	movs	r2, #16
 800d1f0:	6879      	ldr	r1, [r7, #4]
 800d1f2:	68f8      	ldr	r0, [r7, #12]
 800d1f4:	f007 fc60 	bl	8014ab8 <memcpy>
  pbuf_ref(cseg->p);
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	685b      	ldr	r3, [r3, #4]
 800d1fc:	4618      	mov	r0, r3
 800d1fe:	f7fe fc1b 	bl	800ba38 <pbuf_ref>
  return cseg;
 800d202:	68fb      	ldr	r3, [r7, #12]
}
 800d204:	4618      	mov	r0, r3
 800d206:	3710      	adds	r7, #16
 800d208:	46bd      	mov	sp, r7
 800d20a:	bd80      	pop	{r7, pc}
 800d20c:	08016bf0 	.word	0x08016bf0
 800d210:	08017144 	.word	0x08017144
 800d214:	08016c34 	.word	0x08016c34

0800d218 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800d218:	b580      	push	{r7, lr}
 800d21a:	b084      	sub	sp, #16
 800d21c:	af00      	add	r7, sp, #0
 800d21e:	60f8      	str	r0, [r7, #12]
 800d220:	60b9      	str	r1, [r7, #8]
 800d222:	607a      	str	r2, [r7, #4]
 800d224:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800d226:	68bb      	ldr	r3, [r7, #8]
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d109      	bne.n	800d240 <tcp_recv_null+0x28>
 800d22c:	4b12      	ldr	r3, [pc, #72]	; (800d278 <tcp_recv_null+0x60>)
 800d22e:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800d232:	4912      	ldr	r1, [pc, #72]	; (800d27c <tcp_recv_null+0x64>)
 800d234:	4812      	ldr	r0, [pc, #72]	; (800d280 <tcp_recv_null+0x68>)
 800d236:	f007 fc6f 	bl	8014b18 <iprintf>
 800d23a:	f06f 030f 	mvn.w	r3, #15
 800d23e:	e016      	b.n	800d26e <tcp_recv_null+0x56>

  if (p != NULL) {
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	2b00      	cmp	r3, #0
 800d244:	d009      	beq.n	800d25a <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	891b      	ldrh	r3, [r3, #8]
 800d24a:	4619      	mov	r1, r3
 800d24c:	68b8      	ldr	r0, [r7, #8]
 800d24e:	f7ff fab5 	bl	800c7bc <tcp_recved>
    pbuf_free(p);
 800d252:	6878      	ldr	r0, [r7, #4]
 800d254:	f7fe fb50 	bl	800b8f8 <pbuf_free>
 800d258:	e008      	b.n	800d26c <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800d25a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d104      	bne.n	800d26c <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800d262:	68b8      	ldr	r0, [r7, #8]
 800d264:	f7fe ffe6 	bl	800c234 <tcp_close>
 800d268:	4603      	mov	r3, r0
 800d26a:	e000      	b.n	800d26e <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800d26c:	2300      	movs	r3, #0
}
 800d26e:	4618      	mov	r0, r3
 800d270:	3710      	adds	r7, #16
 800d272:	46bd      	mov	sp, r7
 800d274:	bd80      	pop	{r7, pc}
 800d276:	bf00      	nop
 800d278:	08016bf0 	.word	0x08016bf0
 800d27c:	08017160 	.word	0x08017160
 800d280:	08016c34 	.word	0x08016c34

0800d284 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800d284:	b580      	push	{r7, lr}
 800d286:	b086      	sub	sp, #24
 800d288:	af00      	add	r7, sp, #0
 800d28a:	4603      	mov	r3, r0
 800d28c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800d28e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d292:	2b00      	cmp	r3, #0
 800d294:	db01      	blt.n	800d29a <tcp_kill_prio+0x16>
 800d296:	79fb      	ldrb	r3, [r7, #7]
 800d298:	e000      	b.n	800d29c <tcp_kill_prio+0x18>
 800d29a:	237f      	movs	r3, #127	; 0x7f
 800d29c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800d29e:	7afb      	ldrb	r3, [r7, #11]
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d034      	beq.n	800d30e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800d2a4:	7afb      	ldrb	r3, [r7, #11]
 800d2a6:	3b01      	subs	r3, #1
 800d2a8:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800d2aa:	2300      	movs	r3, #0
 800d2ac:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800d2ae:	2300      	movs	r3, #0
 800d2b0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d2b2:	4b19      	ldr	r3, [pc, #100]	; (800d318 <tcp_kill_prio+0x94>)
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	617b      	str	r3, [r7, #20]
 800d2b8:	e01f      	b.n	800d2fa <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800d2ba:	697b      	ldr	r3, [r7, #20]
 800d2bc:	7d5b      	ldrb	r3, [r3, #21]
 800d2be:	7afa      	ldrb	r2, [r7, #11]
 800d2c0:	429a      	cmp	r2, r3
 800d2c2:	d80c      	bhi.n	800d2de <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800d2c4:	697b      	ldr	r3, [r7, #20]
 800d2c6:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800d2c8:	7afa      	ldrb	r2, [r7, #11]
 800d2ca:	429a      	cmp	r2, r3
 800d2cc:	d112      	bne.n	800d2f4 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800d2ce:	4b13      	ldr	r3, [pc, #76]	; (800d31c <tcp_kill_prio+0x98>)
 800d2d0:	681a      	ldr	r2, [r3, #0]
 800d2d2:	697b      	ldr	r3, [r7, #20]
 800d2d4:	6a1b      	ldr	r3, [r3, #32]
 800d2d6:	1ad3      	subs	r3, r2, r3
 800d2d8:	68fa      	ldr	r2, [r7, #12]
 800d2da:	429a      	cmp	r2, r3
 800d2dc:	d80a      	bhi.n	800d2f4 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800d2de:	4b0f      	ldr	r3, [pc, #60]	; (800d31c <tcp_kill_prio+0x98>)
 800d2e0:	681a      	ldr	r2, [r3, #0]
 800d2e2:	697b      	ldr	r3, [r7, #20]
 800d2e4:	6a1b      	ldr	r3, [r3, #32]
 800d2e6:	1ad3      	subs	r3, r2, r3
 800d2e8:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800d2ea:	697b      	ldr	r3, [r7, #20]
 800d2ec:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800d2ee:	697b      	ldr	r3, [r7, #20]
 800d2f0:	7d5b      	ldrb	r3, [r3, #21]
 800d2f2:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d2f4:	697b      	ldr	r3, [r7, #20]
 800d2f6:	68db      	ldr	r3, [r3, #12]
 800d2f8:	617b      	str	r3, [r7, #20]
 800d2fa:	697b      	ldr	r3, [r7, #20]
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d1dc      	bne.n	800d2ba <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800d300:	693b      	ldr	r3, [r7, #16]
 800d302:	2b00      	cmp	r3, #0
 800d304:	d004      	beq.n	800d310 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800d306:	6938      	ldr	r0, [r7, #16]
 800d308:	f7ff f87e 	bl	800c408 <tcp_abort>
 800d30c:	e000      	b.n	800d310 <tcp_kill_prio+0x8c>
    return;
 800d30e:	bf00      	nop
  }
}
 800d310:	3718      	adds	r7, #24
 800d312:	46bd      	mov	sp, r7
 800d314:	bd80      	pop	{r7, pc}
 800d316:	bf00      	nop
 800d318:	20008bb0 	.word	0x20008bb0
 800d31c:	20008ba4 	.word	0x20008ba4

0800d320 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800d320:	b580      	push	{r7, lr}
 800d322:	b086      	sub	sp, #24
 800d324:	af00      	add	r7, sp, #0
 800d326:	4603      	mov	r3, r0
 800d328:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800d32a:	79fb      	ldrb	r3, [r7, #7]
 800d32c:	2b08      	cmp	r3, #8
 800d32e:	d009      	beq.n	800d344 <tcp_kill_state+0x24>
 800d330:	79fb      	ldrb	r3, [r7, #7]
 800d332:	2b09      	cmp	r3, #9
 800d334:	d006      	beq.n	800d344 <tcp_kill_state+0x24>
 800d336:	4b1a      	ldr	r3, [pc, #104]	; (800d3a0 <tcp_kill_state+0x80>)
 800d338:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800d33c:	4919      	ldr	r1, [pc, #100]	; (800d3a4 <tcp_kill_state+0x84>)
 800d33e:	481a      	ldr	r0, [pc, #104]	; (800d3a8 <tcp_kill_state+0x88>)
 800d340:	f007 fbea 	bl	8014b18 <iprintf>

  inactivity = 0;
 800d344:	2300      	movs	r3, #0
 800d346:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800d348:	2300      	movs	r3, #0
 800d34a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d34c:	4b17      	ldr	r3, [pc, #92]	; (800d3ac <tcp_kill_state+0x8c>)
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	617b      	str	r3, [r7, #20]
 800d352:	e017      	b.n	800d384 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800d354:	697b      	ldr	r3, [r7, #20]
 800d356:	7d1b      	ldrb	r3, [r3, #20]
 800d358:	79fa      	ldrb	r2, [r7, #7]
 800d35a:	429a      	cmp	r2, r3
 800d35c:	d10f      	bne.n	800d37e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d35e:	4b14      	ldr	r3, [pc, #80]	; (800d3b0 <tcp_kill_state+0x90>)
 800d360:	681a      	ldr	r2, [r3, #0]
 800d362:	697b      	ldr	r3, [r7, #20]
 800d364:	6a1b      	ldr	r3, [r3, #32]
 800d366:	1ad3      	subs	r3, r2, r3
 800d368:	68fa      	ldr	r2, [r7, #12]
 800d36a:	429a      	cmp	r2, r3
 800d36c:	d807      	bhi.n	800d37e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800d36e:	4b10      	ldr	r3, [pc, #64]	; (800d3b0 <tcp_kill_state+0x90>)
 800d370:	681a      	ldr	r2, [r3, #0]
 800d372:	697b      	ldr	r3, [r7, #20]
 800d374:	6a1b      	ldr	r3, [r3, #32]
 800d376:	1ad3      	subs	r3, r2, r3
 800d378:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800d37a:	697b      	ldr	r3, [r7, #20]
 800d37c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d37e:	697b      	ldr	r3, [r7, #20]
 800d380:	68db      	ldr	r3, [r3, #12]
 800d382:	617b      	str	r3, [r7, #20]
 800d384:	697b      	ldr	r3, [r7, #20]
 800d386:	2b00      	cmp	r3, #0
 800d388:	d1e4      	bne.n	800d354 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800d38a:	693b      	ldr	r3, [r7, #16]
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d003      	beq.n	800d398 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800d390:	2100      	movs	r1, #0
 800d392:	6938      	ldr	r0, [r7, #16]
 800d394:	f7fe ff7a 	bl	800c28c <tcp_abandon>
  }
}
 800d398:	bf00      	nop
 800d39a:	3718      	adds	r7, #24
 800d39c:	46bd      	mov	sp, r7
 800d39e:	bd80      	pop	{r7, pc}
 800d3a0:	08016bf0 	.word	0x08016bf0
 800d3a4:	0801717c 	.word	0x0801717c
 800d3a8:	08016c34 	.word	0x08016c34
 800d3ac:	20008bb0 	.word	0x20008bb0
 800d3b0:	20008ba4 	.word	0x20008ba4

0800d3b4 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800d3b4:	b580      	push	{r7, lr}
 800d3b6:	b084      	sub	sp, #16
 800d3b8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800d3ba:	2300      	movs	r3, #0
 800d3bc:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800d3be:	2300      	movs	r3, #0
 800d3c0:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d3c2:	4b12      	ldr	r3, [pc, #72]	; (800d40c <tcp_kill_timewait+0x58>)
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	60fb      	str	r3, [r7, #12]
 800d3c8:	e012      	b.n	800d3f0 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d3ca:	4b11      	ldr	r3, [pc, #68]	; (800d410 <tcp_kill_timewait+0x5c>)
 800d3cc:	681a      	ldr	r2, [r3, #0]
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	6a1b      	ldr	r3, [r3, #32]
 800d3d2:	1ad3      	subs	r3, r2, r3
 800d3d4:	687a      	ldr	r2, [r7, #4]
 800d3d6:	429a      	cmp	r2, r3
 800d3d8:	d807      	bhi.n	800d3ea <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800d3da:	4b0d      	ldr	r3, [pc, #52]	; (800d410 <tcp_kill_timewait+0x5c>)
 800d3dc:	681a      	ldr	r2, [r3, #0]
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	6a1b      	ldr	r3, [r3, #32]
 800d3e2:	1ad3      	subs	r3, r2, r3
 800d3e4:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	68db      	ldr	r3, [r3, #12]
 800d3ee:	60fb      	str	r3, [r7, #12]
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d1e9      	bne.n	800d3ca <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800d3f6:	68bb      	ldr	r3, [r7, #8]
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d002      	beq.n	800d402 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800d3fc:	68b8      	ldr	r0, [r7, #8]
 800d3fe:	f7ff f803 	bl	800c408 <tcp_abort>
  }
}
 800d402:	bf00      	nop
 800d404:	3710      	adds	r7, #16
 800d406:	46bd      	mov	sp, r7
 800d408:	bd80      	pop	{r7, pc}
 800d40a:	bf00      	nop
 800d40c:	20008bb4 	.word	0x20008bb4
 800d410:	20008ba4 	.word	0x20008ba4

0800d414 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800d414:	b580      	push	{r7, lr}
 800d416:	b082      	sub	sp, #8
 800d418:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800d41a:	4b10      	ldr	r3, [pc, #64]	; (800d45c <tcp_handle_closepend+0x48>)
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800d420:	e014      	b.n	800d44c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	68db      	ldr	r3, [r3, #12]
 800d426:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	8b5b      	ldrh	r3, [r3, #26]
 800d42c:	f003 0308 	and.w	r3, r3, #8
 800d430:	2b00      	cmp	r3, #0
 800d432:	d009      	beq.n	800d448 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	8b5b      	ldrh	r3, [r3, #26]
 800d438:	f023 0308 	bic.w	r3, r3, #8
 800d43c:	b29a      	uxth	r2, r3
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800d442:	6878      	ldr	r0, [r7, #4]
 800d444:	f7fe fe8c 	bl	800c160 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800d448:	683b      	ldr	r3, [r7, #0]
 800d44a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d1e7      	bne.n	800d422 <tcp_handle_closepend+0xe>
  }
}
 800d452:	bf00      	nop
 800d454:	bf00      	nop
 800d456:	3708      	adds	r7, #8
 800d458:	46bd      	mov	sp, r7
 800d45a:	bd80      	pop	{r7, pc}
 800d45c:	20008bb0 	.word	0x20008bb0

0800d460 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800d460:	b580      	push	{r7, lr}
 800d462:	b084      	sub	sp, #16
 800d464:	af00      	add	r7, sp, #0
 800d466:	4603      	mov	r3, r0
 800d468:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d46a:	2001      	movs	r0, #1
 800d46c:	f7fd fb5e 	bl	800ab2c <memp_malloc>
 800d470:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	2b00      	cmp	r3, #0
 800d476:	d126      	bne.n	800d4c6 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800d478:	f7ff ffcc 	bl	800d414 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800d47c:	f7ff ff9a 	bl	800d3b4 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d480:	2001      	movs	r0, #1
 800d482:	f7fd fb53 	bl	800ab2c <memp_malloc>
 800d486:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d11b      	bne.n	800d4c6 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800d48e:	2009      	movs	r0, #9
 800d490:	f7ff ff46 	bl	800d320 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d494:	2001      	movs	r0, #1
 800d496:	f7fd fb49 	bl	800ab2c <memp_malloc>
 800d49a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d111      	bne.n	800d4c6 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800d4a2:	2008      	movs	r0, #8
 800d4a4:	f7ff ff3c 	bl	800d320 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d4a8:	2001      	movs	r0, #1
 800d4aa:	f7fd fb3f 	bl	800ab2c <memp_malloc>
 800d4ae:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d107      	bne.n	800d4c6 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800d4b6:	79fb      	ldrb	r3, [r7, #7]
 800d4b8:	4618      	mov	r0, r3
 800d4ba:	f7ff fee3 	bl	800d284 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d4be:	2001      	movs	r0, #1
 800d4c0:	f7fd fb34 	bl	800ab2c <memp_malloc>
 800d4c4:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d03f      	beq.n	800d54c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800d4cc:	229c      	movs	r2, #156	; 0x9c
 800d4ce:	2100      	movs	r1, #0
 800d4d0:	68f8      	ldr	r0, [r7, #12]
 800d4d2:	f007 fb19 	bl	8014b08 <memset>
    pcb->prio = prio;
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	79fa      	ldrb	r2, [r7, #7]
 800d4da:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800d4e2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800d4ec:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	22ff      	movs	r2, #255	; 0xff
 800d4fa:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	f44f 7206 	mov.w	r2, #536	; 0x218
 800d502:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	2206      	movs	r2, #6
 800d508:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	2206      	movs	r2, #6
 800d510:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d518:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	2201      	movs	r2, #1
 800d51e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800d522:	4b0d      	ldr	r3, [pc, #52]	; (800d558 <tcp_alloc+0xf8>)
 800d524:	681a      	ldr	r2, [r3, #0]
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800d52a:	4b0c      	ldr	r3, [pc, #48]	; (800d55c <tcp_alloc+0xfc>)
 800d52c:	781a      	ldrb	r2, [r3, #0]
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800d538:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	4a08      	ldr	r2, [pc, #32]	; (800d560 <tcp_alloc+0x100>)
 800d540:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	4a07      	ldr	r2, [pc, #28]	; (800d564 <tcp_alloc+0x104>)
 800d548:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800d54c:	68fb      	ldr	r3, [r7, #12]
}
 800d54e:	4618      	mov	r0, r3
 800d550:	3710      	adds	r7, #16
 800d552:	46bd      	mov	sp, r7
 800d554:	bd80      	pop	{r7, pc}
 800d556:	bf00      	nop
 800d558:	20008ba4 	.word	0x20008ba4
 800d55c:	20008bba 	.word	0x20008bba
 800d560:	0800d219 	.word	0x0800d219
 800d564:	006ddd00 	.word	0x006ddd00

0800d568 <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 800d568:	b580      	push	{r7, lr}
 800d56a:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 800d56c:	2040      	movs	r0, #64	; 0x40
 800d56e:	f7ff ff77 	bl	800d460 <tcp_alloc>
 800d572:	4603      	mov	r3, r0
}
 800d574:	4618      	mov	r0, r3
 800d576:	bd80      	pop	{r7, pc}

0800d578 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800d578:	b480      	push	{r7}
 800d57a:	b083      	sub	sp, #12
 800d57c:	af00      	add	r7, sp, #0
 800d57e:	6078      	str	r0, [r7, #4]
 800d580:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	2b00      	cmp	r3, #0
 800d586:	d002      	beq.n	800d58e <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	683a      	ldr	r2, [r7, #0]
 800d58c:	611a      	str	r2, [r3, #16]
  }
}
 800d58e:	bf00      	nop
 800d590:	370c      	adds	r7, #12
 800d592:	46bd      	mov	sp, r7
 800d594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d598:	4770      	bx	lr
	...

0800d59c <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800d59c:	b580      	push	{r7, lr}
 800d59e:	b082      	sub	sp, #8
 800d5a0:	af00      	add	r7, sp, #0
 800d5a2:	6078      	str	r0, [r7, #4]
 800d5a4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d00e      	beq.n	800d5ca <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	7d1b      	ldrb	r3, [r3, #20]
 800d5b0:	2b01      	cmp	r3, #1
 800d5b2:	d106      	bne.n	800d5c2 <tcp_recv+0x26>
 800d5b4:	4b07      	ldr	r3, [pc, #28]	; (800d5d4 <tcp_recv+0x38>)
 800d5b6:	f240 72df 	movw	r2, #2015	; 0x7df
 800d5ba:	4907      	ldr	r1, [pc, #28]	; (800d5d8 <tcp_recv+0x3c>)
 800d5bc:	4807      	ldr	r0, [pc, #28]	; (800d5dc <tcp_recv+0x40>)
 800d5be:	f007 faab 	bl	8014b18 <iprintf>
    pcb->recv = recv;
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	683a      	ldr	r2, [r7, #0]
 800d5c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800d5ca:	bf00      	nop
 800d5cc:	3708      	adds	r7, #8
 800d5ce:	46bd      	mov	sp, r7
 800d5d0:	bd80      	pop	{r7, pc}
 800d5d2:	bf00      	nop
 800d5d4:	08016bf0 	.word	0x08016bf0
 800d5d8:	0801718c 	.word	0x0801718c
 800d5dc:	08016c34 	.word	0x08016c34

0800d5e0 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800d5e0:	b580      	push	{r7, lr}
 800d5e2:	b082      	sub	sp, #8
 800d5e4:	af00      	add	r7, sp, #0
 800d5e6:	6078      	str	r0, [r7, #4]
 800d5e8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d00e      	beq.n	800d60e <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	7d1b      	ldrb	r3, [r3, #20]
 800d5f4:	2b01      	cmp	r3, #1
 800d5f6:	d106      	bne.n	800d606 <tcp_sent+0x26>
 800d5f8:	4b07      	ldr	r3, [pc, #28]	; (800d618 <tcp_sent+0x38>)
 800d5fa:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800d5fe:	4907      	ldr	r1, [pc, #28]	; (800d61c <tcp_sent+0x3c>)
 800d600:	4807      	ldr	r0, [pc, #28]	; (800d620 <tcp_sent+0x40>)
 800d602:	f007 fa89 	bl	8014b18 <iprintf>
    pcb->sent = sent;
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	683a      	ldr	r2, [r7, #0]
 800d60a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800d60e:	bf00      	nop
 800d610:	3708      	adds	r7, #8
 800d612:	46bd      	mov	sp, r7
 800d614:	bd80      	pop	{r7, pc}
 800d616:	bf00      	nop
 800d618:	08016bf0 	.word	0x08016bf0
 800d61c:	080171b4 	.word	0x080171b4
 800d620:	08016c34 	.word	0x08016c34

0800d624 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800d624:	b580      	push	{r7, lr}
 800d626:	b082      	sub	sp, #8
 800d628:	af00      	add	r7, sp, #0
 800d62a:	6078      	str	r0, [r7, #4]
 800d62c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	2b00      	cmp	r3, #0
 800d632:	d00e      	beq.n	800d652 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	7d1b      	ldrb	r3, [r3, #20]
 800d638:	2b01      	cmp	r3, #1
 800d63a:	d106      	bne.n	800d64a <tcp_err+0x26>
 800d63c:	4b07      	ldr	r3, [pc, #28]	; (800d65c <tcp_err+0x38>)
 800d63e:	f640 020d 	movw	r2, #2061	; 0x80d
 800d642:	4907      	ldr	r1, [pc, #28]	; (800d660 <tcp_err+0x3c>)
 800d644:	4807      	ldr	r0, [pc, #28]	; (800d664 <tcp_err+0x40>)
 800d646:	f007 fa67 	bl	8014b18 <iprintf>
    pcb->errf = err;
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	683a      	ldr	r2, [r7, #0]
 800d64e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800d652:	bf00      	nop
 800d654:	3708      	adds	r7, #8
 800d656:	46bd      	mov	sp, r7
 800d658:	bd80      	pop	{r7, pc}
 800d65a:	bf00      	nop
 800d65c:	08016bf0 	.word	0x08016bf0
 800d660:	080171dc 	.word	0x080171dc
 800d664:	08016c34 	.word	0x08016c34

0800d668 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800d668:	b480      	push	{r7}
 800d66a:	b085      	sub	sp, #20
 800d66c:	af00      	add	r7, sp, #0
 800d66e:	6078      	str	r0, [r7, #4]
 800d670:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	2b00      	cmp	r3, #0
 800d676:	d008      	beq.n	800d68a <tcp_accept+0x22>
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	7d1b      	ldrb	r3, [r3, #20]
 800d67c:	2b01      	cmp	r3, #1
 800d67e:	d104      	bne.n	800d68a <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	683a      	ldr	r2, [r7, #0]
 800d688:	619a      	str	r2, [r3, #24]
  }
}
 800d68a:	bf00      	nop
 800d68c:	3714      	adds	r7, #20
 800d68e:	46bd      	mov	sp, r7
 800d690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d694:	4770      	bx	lr
	...

0800d698 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800d698:	b580      	push	{r7, lr}
 800d69a:	b084      	sub	sp, #16
 800d69c:	af00      	add	r7, sp, #0
 800d69e:	60f8      	str	r0, [r7, #12]
 800d6a0:	60b9      	str	r1, [r7, #8]
 800d6a2:	4613      	mov	r3, r2
 800d6a4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d107      	bne.n	800d6bc <tcp_poll+0x24>
 800d6ac:	4b0e      	ldr	r3, [pc, #56]	; (800d6e8 <tcp_poll+0x50>)
 800d6ae:	f640 023d 	movw	r2, #2109	; 0x83d
 800d6b2:	490e      	ldr	r1, [pc, #56]	; (800d6ec <tcp_poll+0x54>)
 800d6b4:	480e      	ldr	r0, [pc, #56]	; (800d6f0 <tcp_poll+0x58>)
 800d6b6:	f007 fa2f 	bl	8014b18 <iprintf>
 800d6ba:	e011      	b.n	800d6e0 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	7d1b      	ldrb	r3, [r3, #20]
 800d6c0:	2b01      	cmp	r3, #1
 800d6c2:	d106      	bne.n	800d6d2 <tcp_poll+0x3a>
 800d6c4:	4b08      	ldr	r3, [pc, #32]	; (800d6e8 <tcp_poll+0x50>)
 800d6c6:	f640 023e 	movw	r2, #2110	; 0x83e
 800d6ca:	490a      	ldr	r1, [pc, #40]	; (800d6f4 <tcp_poll+0x5c>)
 800d6cc:	4808      	ldr	r0, [pc, #32]	; (800d6f0 <tcp_poll+0x58>)
 800d6ce:	f007 fa23 	bl	8014b18 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	68ba      	ldr	r2, [r7, #8]
 800d6d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	79fa      	ldrb	r2, [r7, #7]
 800d6de:	775a      	strb	r2, [r3, #29]
}
 800d6e0:	3710      	adds	r7, #16
 800d6e2:	46bd      	mov	sp, r7
 800d6e4:	bd80      	pop	{r7, pc}
 800d6e6:	bf00      	nop
 800d6e8:	08016bf0 	.word	0x08016bf0
 800d6ec:	08017204 	.word	0x08017204
 800d6f0:	08016c34 	.word	0x08016c34
 800d6f4:	0801721c 	.word	0x0801721c

0800d6f8 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800d6f8:	b580      	push	{r7, lr}
 800d6fa:	b082      	sub	sp, #8
 800d6fc:	af00      	add	r7, sp, #0
 800d6fe:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	2b00      	cmp	r3, #0
 800d704:	d107      	bne.n	800d716 <tcp_pcb_purge+0x1e>
 800d706:	4b21      	ldr	r3, [pc, #132]	; (800d78c <tcp_pcb_purge+0x94>)
 800d708:	f640 0251 	movw	r2, #2129	; 0x851
 800d70c:	4920      	ldr	r1, [pc, #128]	; (800d790 <tcp_pcb_purge+0x98>)
 800d70e:	4821      	ldr	r0, [pc, #132]	; (800d794 <tcp_pcb_purge+0x9c>)
 800d710:	f007 fa02 	bl	8014b18 <iprintf>
 800d714:	e037      	b.n	800d786 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	7d1b      	ldrb	r3, [r3, #20]
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d033      	beq.n	800d786 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800d722:	2b0a      	cmp	r3, #10
 800d724:	d02f      	beq.n	800d786 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800d72a:	2b01      	cmp	r3, #1
 800d72c:	d02b      	beq.n	800d786 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d732:	2b00      	cmp	r3, #0
 800d734:	d007      	beq.n	800d746 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d73a:	4618      	mov	r0, r3
 800d73c:	f7fe f8dc 	bl	800b8f8 <pbuf_free>
      pcb->refused_data = NULL;
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	2200      	movs	r2, #0
 800d744:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d002      	beq.n	800d754 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800d74e:	6878      	ldr	r0, [r7, #4]
 800d750:	f000 f986 	bl	800da60 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d75a:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d760:	4618      	mov	r0, r3
 800d762:	f7ff fce1 	bl	800d128 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d76a:	4618      	mov	r0, r3
 800d76c:	f7ff fcdc 	bl	800d128 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	2200      	movs	r2, #0
 800d774:	66da      	str	r2, [r3, #108]	; 0x6c
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	2200      	movs	r2, #0
 800d782:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800d786:	3708      	adds	r7, #8
 800d788:	46bd      	mov	sp, r7
 800d78a:	bd80      	pop	{r7, pc}
 800d78c:	08016bf0 	.word	0x08016bf0
 800d790:	0801723c 	.word	0x0801723c
 800d794:	08016c34 	.word	0x08016c34

0800d798 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800d798:	b580      	push	{r7, lr}
 800d79a:	b084      	sub	sp, #16
 800d79c:	af00      	add	r7, sp, #0
 800d79e:	6078      	str	r0, [r7, #4]
 800d7a0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800d7a2:	683b      	ldr	r3, [r7, #0]
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d106      	bne.n	800d7b6 <tcp_pcb_remove+0x1e>
 800d7a8:	4b3e      	ldr	r3, [pc, #248]	; (800d8a4 <tcp_pcb_remove+0x10c>)
 800d7aa:	f640 0283 	movw	r2, #2179	; 0x883
 800d7ae:	493e      	ldr	r1, [pc, #248]	; (800d8a8 <tcp_pcb_remove+0x110>)
 800d7b0:	483e      	ldr	r0, [pc, #248]	; (800d8ac <tcp_pcb_remove+0x114>)
 800d7b2:	f007 f9b1 	bl	8014b18 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d106      	bne.n	800d7ca <tcp_pcb_remove+0x32>
 800d7bc:	4b39      	ldr	r3, [pc, #228]	; (800d8a4 <tcp_pcb_remove+0x10c>)
 800d7be:	f640 0284 	movw	r2, #2180	; 0x884
 800d7c2:	493b      	ldr	r1, [pc, #236]	; (800d8b0 <tcp_pcb_remove+0x118>)
 800d7c4:	4839      	ldr	r0, [pc, #228]	; (800d8ac <tcp_pcb_remove+0x114>)
 800d7c6:	f007 f9a7 	bl	8014b18 <iprintf>

  TCP_RMV(pcblist, pcb);
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	683a      	ldr	r2, [r7, #0]
 800d7d0:	429a      	cmp	r2, r3
 800d7d2:	d105      	bne.n	800d7e0 <tcp_pcb_remove+0x48>
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	68da      	ldr	r2, [r3, #12]
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	601a      	str	r2, [r3, #0]
 800d7de:	e013      	b.n	800d808 <tcp_pcb_remove+0x70>
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	60fb      	str	r3, [r7, #12]
 800d7e6:	e00c      	b.n	800d802 <tcp_pcb_remove+0x6a>
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	68db      	ldr	r3, [r3, #12]
 800d7ec:	683a      	ldr	r2, [r7, #0]
 800d7ee:	429a      	cmp	r2, r3
 800d7f0:	d104      	bne.n	800d7fc <tcp_pcb_remove+0x64>
 800d7f2:	683b      	ldr	r3, [r7, #0]
 800d7f4:	68da      	ldr	r2, [r3, #12]
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	60da      	str	r2, [r3, #12]
 800d7fa:	e005      	b.n	800d808 <tcp_pcb_remove+0x70>
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	68db      	ldr	r3, [r3, #12]
 800d800:	60fb      	str	r3, [r7, #12]
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	2b00      	cmp	r3, #0
 800d806:	d1ef      	bne.n	800d7e8 <tcp_pcb_remove+0x50>
 800d808:	683b      	ldr	r3, [r7, #0]
 800d80a:	2200      	movs	r2, #0
 800d80c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800d80e:	6838      	ldr	r0, [r7, #0]
 800d810:	f7ff ff72 	bl	800d6f8 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800d814:	683b      	ldr	r3, [r7, #0]
 800d816:	7d1b      	ldrb	r3, [r3, #20]
 800d818:	2b0a      	cmp	r3, #10
 800d81a:	d013      	beq.n	800d844 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800d81c:	683b      	ldr	r3, [r7, #0]
 800d81e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800d820:	2b01      	cmp	r3, #1
 800d822:	d00f      	beq.n	800d844 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800d824:	683b      	ldr	r3, [r7, #0]
 800d826:	8b5b      	ldrh	r3, [r3, #26]
 800d828:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d009      	beq.n	800d844 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800d830:	683b      	ldr	r3, [r7, #0]
 800d832:	8b5b      	ldrh	r3, [r3, #26]
 800d834:	f043 0302 	orr.w	r3, r3, #2
 800d838:	b29a      	uxth	r2, r3
 800d83a:	683b      	ldr	r3, [r7, #0]
 800d83c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800d83e:	6838      	ldr	r0, [r7, #0]
 800d840:	f003 fbc6 	bl	8010fd0 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800d844:	683b      	ldr	r3, [r7, #0]
 800d846:	7d1b      	ldrb	r3, [r3, #20]
 800d848:	2b01      	cmp	r3, #1
 800d84a:	d020      	beq.n	800d88e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800d84c:	683b      	ldr	r3, [r7, #0]
 800d84e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d850:	2b00      	cmp	r3, #0
 800d852:	d006      	beq.n	800d862 <tcp_pcb_remove+0xca>
 800d854:	4b13      	ldr	r3, [pc, #76]	; (800d8a4 <tcp_pcb_remove+0x10c>)
 800d856:	f640 0293 	movw	r2, #2195	; 0x893
 800d85a:	4916      	ldr	r1, [pc, #88]	; (800d8b4 <tcp_pcb_remove+0x11c>)
 800d85c:	4813      	ldr	r0, [pc, #76]	; (800d8ac <tcp_pcb_remove+0x114>)
 800d85e:	f007 f95b 	bl	8014b18 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800d862:	683b      	ldr	r3, [r7, #0]
 800d864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d866:	2b00      	cmp	r3, #0
 800d868:	d006      	beq.n	800d878 <tcp_pcb_remove+0xe0>
 800d86a:	4b0e      	ldr	r3, [pc, #56]	; (800d8a4 <tcp_pcb_remove+0x10c>)
 800d86c:	f640 0294 	movw	r2, #2196	; 0x894
 800d870:	4911      	ldr	r1, [pc, #68]	; (800d8b8 <tcp_pcb_remove+0x120>)
 800d872:	480e      	ldr	r0, [pc, #56]	; (800d8ac <tcp_pcb_remove+0x114>)
 800d874:	f007 f950 	bl	8014b18 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800d878:	683b      	ldr	r3, [r7, #0]
 800d87a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d006      	beq.n	800d88e <tcp_pcb_remove+0xf6>
 800d880:	4b08      	ldr	r3, [pc, #32]	; (800d8a4 <tcp_pcb_remove+0x10c>)
 800d882:	f640 0296 	movw	r2, #2198	; 0x896
 800d886:	490d      	ldr	r1, [pc, #52]	; (800d8bc <tcp_pcb_remove+0x124>)
 800d888:	4808      	ldr	r0, [pc, #32]	; (800d8ac <tcp_pcb_remove+0x114>)
 800d88a:	f007 f945 	bl	8014b18 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800d88e:	683b      	ldr	r3, [r7, #0]
 800d890:	2200      	movs	r2, #0
 800d892:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800d894:	683b      	ldr	r3, [r7, #0]
 800d896:	2200      	movs	r2, #0
 800d898:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800d89a:	bf00      	nop
 800d89c:	3710      	adds	r7, #16
 800d89e:	46bd      	mov	sp, r7
 800d8a0:	bd80      	pop	{r7, pc}
 800d8a2:	bf00      	nop
 800d8a4:	08016bf0 	.word	0x08016bf0
 800d8a8:	08017258 	.word	0x08017258
 800d8ac:	08016c34 	.word	0x08016c34
 800d8b0:	08017274 	.word	0x08017274
 800d8b4:	08017294 	.word	0x08017294
 800d8b8:	080172ac 	.word	0x080172ac
 800d8bc:	080172c8 	.word	0x080172c8

0800d8c0 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800d8c0:	b580      	push	{r7, lr}
 800d8c2:	b082      	sub	sp, #8
 800d8c4:	af00      	add	r7, sp, #0
 800d8c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d106      	bne.n	800d8dc <tcp_next_iss+0x1c>
 800d8ce:	4b0a      	ldr	r3, [pc, #40]	; (800d8f8 <tcp_next_iss+0x38>)
 800d8d0:	f640 02af 	movw	r2, #2223	; 0x8af
 800d8d4:	4909      	ldr	r1, [pc, #36]	; (800d8fc <tcp_next_iss+0x3c>)
 800d8d6:	480a      	ldr	r0, [pc, #40]	; (800d900 <tcp_next_iss+0x40>)
 800d8d8:	f007 f91e 	bl	8014b18 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800d8dc:	4b09      	ldr	r3, [pc, #36]	; (800d904 <tcp_next_iss+0x44>)
 800d8de:	681a      	ldr	r2, [r3, #0]
 800d8e0:	4b09      	ldr	r3, [pc, #36]	; (800d908 <tcp_next_iss+0x48>)
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	4413      	add	r3, r2
 800d8e6:	4a07      	ldr	r2, [pc, #28]	; (800d904 <tcp_next_iss+0x44>)
 800d8e8:	6013      	str	r3, [r2, #0]
  return iss;
 800d8ea:	4b06      	ldr	r3, [pc, #24]	; (800d904 <tcp_next_iss+0x44>)
 800d8ec:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800d8ee:	4618      	mov	r0, r3
 800d8f0:	3708      	adds	r7, #8
 800d8f2:	46bd      	mov	sp, r7
 800d8f4:	bd80      	pop	{r7, pc}
 800d8f6:	bf00      	nop
 800d8f8:	08016bf0 	.word	0x08016bf0
 800d8fc:	080172e0 	.word	0x080172e0
 800d900:	08016c34 	.word	0x08016c34
 800d904:	20000064 	.word	0x20000064
 800d908:	20008ba4 	.word	0x20008ba4

0800d90c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800d90c:	b580      	push	{r7, lr}
 800d90e:	b086      	sub	sp, #24
 800d910:	af00      	add	r7, sp, #0
 800d912:	4603      	mov	r3, r0
 800d914:	60b9      	str	r1, [r7, #8]
 800d916:	607a      	str	r2, [r7, #4]
 800d918:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d106      	bne.n	800d92e <tcp_eff_send_mss_netif+0x22>
 800d920:	4b14      	ldr	r3, [pc, #80]	; (800d974 <tcp_eff_send_mss_netif+0x68>)
 800d922:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800d926:	4914      	ldr	r1, [pc, #80]	; (800d978 <tcp_eff_send_mss_netif+0x6c>)
 800d928:	4814      	ldr	r0, [pc, #80]	; (800d97c <tcp_eff_send_mss_netif+0x70>)
 800d92a:	f007 f8f5 	bl	8014b18 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800d92e:	68bb      	ldr	r3, [r7, #8]
 800d930:	2b00      	cmp	r3, #0
 800d932:	d101      	bne.n	800d938 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800d934:	89fb      	ldrh	r3, [r7, #14]
 800d936:	e019      	b.n	800d96c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800d938:	68bb      	ldr	r3, [r7, #8]
 800d93a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d93c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800d93e:	8afb      	ldrh	r3, [r7, #22]
 800d940:	2b00      	cmp	r3, #0
 800d942:	d012      	beq.n	800d96a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800d944:	2328      	movs	r3, #40	; 0x28
 800d946:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800d948:	8afa      	ldrh	r2, [r7, #22]
 800d94a:	8abb      	ldrh	r3, [r7, #20]
 800d94c:	429a      	cmp	r2, r3
 800d94e:	d904      	bls.n	800d95a <tcp_eff_send_mss_netif+0x4e>
 800d950:	8afa      	ldrh	r2, [r7, #22]
 800d952:	8abb      	ldrh	r3, [r7, #20]
 800d954:	1ad3      	subs	r3, r2, r3
 800d956:	b29b      	uxth	r3, r3
 800d958:	e000      	b.n	800d95c <tcp_eff_send_mss_netif+0x50>
 800d95a:	2300      	movs	r3, #0
 800d95c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800d95e:	8a7a      	ldrh	r2, [r7, #18]
 800d960:	89fb      	ldrh	r3, [r7, #14]
 800d962:	4293      	cmp	r3, r2
 800d964:	bf28      	it	cs
 800d966:	4613      	movcs	r3, r2
 800d968:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800d96a:	89fb      	ldrh	r3, [r7, #14]
}
 800d96c:	4618      	mov	r0, r3
 800d96e:	3718      	adds	r7, #24
 800d970:	46bd      	mov	sp, r7
 800d972:	bd80      	pop	{r7, pc}
 800d974:	08016bf0 	.word	0x08016bf0
 800d978:	080172fc 	.word	0x080172fc
 800d97c:	08016c34 	.word	0x08016c34

0800d980 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800d980:	b580      	push	{r7, lr}
 800d982:	b084      	sub	sp, #16
 800d984:	af00      	add	r7, sp, #0
 800d986:	6078      	str	r0, [r7, #4]
 800d988:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800d98a:	683b      	ldr	r3, [r7, #0]
 800d98c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	2b00      	cmp	r3, #0
 800d992:	d119      	bne.n	800d9c8 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800d994:	4b10      	ldr	r3, [pc, #64]	; (800d9d8 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800d996:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800d99a:	4910      	ldr	r1, [pc, #64]	; (800d9dc <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800d99c:	4810      	ldr	r0, [pc, #64]	; (800d9e0 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800d99e:	f007 f8bb 	bl	8014b18 <iprintf>

  while (pcb != NULL) {
 800d9a2:	e011      	b.n	800d9c8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	681a      	ldr	r2, [r3, #0]
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	429a      	cmp	r2, r3
 800d9ae:	d108      	bne.n	800d9c2 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	68db      	ldr	r3, [r3, #12]
 800d9b4:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800d9b6:	68f8      	ldr	r0, [r7, #12]
 800d9b8:	f7fe fd26 	bl	800c408 <tcp_abort>
      pcb = next;
 800d9bc:	68bb      	ldr	r3, [r7, #8]
 800d9be:	60fb      	str	r3, [r7, #12]
 800d9c0:	e002      	b.n	800d9c8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	68db      	ldr	r3, [r3, #12]
 800d9c6:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d1ea      	bne.n	800d9a4 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800d9ce:	bf00      	nop
 800d9d0:	bf00      	nop
 800d9d2:	3710      	adds	r7, #16
 800d9d4:	46bd      	mov	sp, r7
 800d9d6:	bd80      	pop	{r7, pc}
 800d9d8:	08016bf0 	.word	0x08016bf0
 800d9dc:	08017324 	.word	0x08017324
 800d9e0:	08016c34 	.word	0x08016c34

0800d9e4 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800d9e4:	b580      	push	{r7, lr}
 800d9e6:	b084      	sub	sp, #16
 800d9e8:	af00      	add	r7, sp, #0
 800d9ea:	6078      	str	r0, [r7, #4]
 800d9ec:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d02a      	beq.n	800da4a <tcp_netif_ip_addr_changed+0x66>
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d026      	beq.n	800da4a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800d9fc:	4b15      	ldr	r3, [pc, #84]	; (800da54 <tcp_netif_ip_addr_changed+0x70>)
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	4619      	mov	r1, r3
 800da02:	6878      	ldr	r0, [r7, #4]
 800da04:	f7ff ffbc 	bl	800d980 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800da08:	4b13      	ldr	r3, [pc, #76]	; (800da58 <tcp_netif_ip_addr_changed+0x74>)
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	4619      	mov	r1, r3
 800da0e:	6878      	ldr	r0, [r7, #4]
 800da10:	f7ff ffb6 	bl	800d980 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800da14:	683b      	ldr	r3, [r7, #0]
 800da16:	2b00      	cmp	r3, #0
 800da18:	d017      	beq.n	800da4a <tcp_netif_ip_addr_changed+0x66>
 800da1a:	683b      	ldr	r3, [r7, #0]
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d013      	beq.n	800da4a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800da22:	4b0e      	ldr	r3, [pc, #56]	; (800da5c <tcp_netif_ip_addr_changed+0x78>)
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	60fb      	str	r3, [r7, #12]
 800da28:	e00c      	b.n	800da44 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	681a      	ldr	r2, [r3, #0]
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	429a      	cmp	r2, r3
 800da34:	d103      	bne.n	800da3e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800da36:	683b      	ldr	r3, [r7, #0]
 800da38:	681a      	ldr	r2, [r3, #0]
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	68db      	ldr	r3, [r3, #12]
 800da42:	60fb      	str	r3, [r7, #12]
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	2b00      	cmp	r3, #0
 800da48:	d1ef      	bne.n	800da2a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800da4a:	bf00      	nop
 800da4c:	3710      	adds	r7, #16
 800da4e:	46bd      	mov	sp, r7
 800da50:	bd80      	pop	{r7, pc}
 800da52:	bf00      	nop
 800da54:	20008bb0 	.word	0x20008bb0
 800da58:	20008ba8 	.word	0x20008ba8
 800da5c:	20008bac 	.word	0x20008bac

0800da60 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800da60:	b580      	push	{r7, lr}
 800da62:	b082      	sub	sp, #8
 800da64:	af00      	add	r7, sp, #0
 800da66:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d007      	beq.n	800da80 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800da74:	4618      	mov	r0, r3
 800da76:	f7ff fb57 	bl	800d128 <tcp_segs_free>
    pcb->ooseq = NULL;
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	2200      	movs	r2, #0
 800da7e:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800da80:	bf00      	nop
 800da82:	3708      	adds	r7, #8
 800da84:	46bd      	mov	sp, r7
 800da86:	bd80      	pop	{r7, pc}

0800da88 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800da88:	b590      	push	{r4, r7, lr}
 800da8a:	b08d      	sub	sp, #52	; 0x34
 800da8c:	af04      	add	r7, sp, #16
 800da8e:	6078      	str	r0, [r7, #4]
 800da90:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	2b00      	cmp	r3, #0
 800da96:	d105      	bne.n	800daa4 <tcp_input+0x1c>
 800da98:	4b9b      	ldr	r3, [pc, #620]	; (800dd08 <tcp_input+0x280>)
 800da9a:	2283      	movs	r2, #131	; 0x83
 800da9c:	499b      	ldr	r1, [pc, #620]	; (800dd0c <tcp_input+0x284>)
 800da9e:	489c      	ldr	r0, [pc, #624]	; (800dd10 <tcp_input+0x288>)
 800daa0:	f007 f83a 	bl	8014b18 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	685b      	ldr	r3, [r3, #4]
 800daa8:	4a9a      	ldr	r2, [pc, #616]	; (800dd14 <tcp_input+0x28c>)
 800daaa:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	895b      	ldrh	r3, [r3, #10]
 800dab0:	2b13      	cmp	r3, #19
 800dab2:	f240 83d1 	bls.w	800e258 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800dab6:	4b98      	ldr	r3, [pc, #608]	; (800dd18 <tcp_input+0x290>)
 800dab8:	695b      	ldr	r3, [r3, #20]
 800daba:	4a97      	ldr	r2, [pc, #604]	; (800dd18 <tcp_input+0x290>)
 800dabc:	6812      	ldr	r2, [r2, #0]
 800dabe:	4611      	mov	r1, r2
 800dac0:	4618      	mov	r0, r3
 800dac2:	f006 f86f 	bl	8013ba4 <ip4_addr_isbroadcast_u32>
 800dac6:	4603      	mov	r3, r0
 800dac8:	2b00      	cmp	r3, #0
 800daca:	f040 83c7 	bne.w	800e25c <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800dace:	4b92      	ldr	r3, [pc, #584]	; (800dd18 <tcp_input+0x290>)
 800dad0:	695b      	ldr	r3, [r3, #20]
 800dad2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800dad6:	2be0      	cmp	r3, #224	; 0xe0
 800dad8:	f000 83c0 	beq.w	800e25c <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800dadc:	4b8d      	ldr	r3, [pc, #564]	; (800dd14 <tcp_input+0x28c>)
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	899b      	ldrh	r3, [r3, #12]
 800dae2:	b29b      	uxth	r3, r3
 800dae4:	4618      	mov	r0, r3
 800dae6:	f7fc fba9 	bl	800a23c <lwip_htons>
 800daea:	4603      	mov	r3, r0
 800daec:	0b1b      	lsrs	r3, r3, #12
 800daee:	b29b      	uxth	r3, r3
 800daf0:	b2db      	uxtb	r3, r3
 800daf2:	009b      	lsls	r3, r3, #2
 800daf4:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800daf6:	7cbb      	ldrb	r3, [r7, #18]
 800daf8:	2b13      	cmp	r3, #19
 800dafa:	f240 83b1 	bls.w	800e260 <tcp_input+0x7d8>
 800dafe:	7cbb      	ldrb	r3, [r7, #18]
 800db00:	b29a      	uxth	r2, r3
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	891b      	ldrh	r3, [r3, #8]
 800db06:	429a      	cmp	r2, r3
 800db08:	f200 83aa 	bhi.w	800e260 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800db0c:	7cbb      	ldrb	r3, [r7, #18]
 800db0e:	b29b      	uxth	r3, r3
 800db10:	3b14      	subs	r3, #20
 800db12:	b29a      	uxth	r2, r3
 800db14:	4b81      	ldr	r3, [pc, #516]	; (800dd1c <tcp_input+0x294>)
 800db16:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800db18:	4b81      	ldr	r3, [pc, #516]	; (800dd20 <tcp_input+0x298>)
 800db1a:	2200      	movs	r2, #0
 800db1c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	895a      	ldrh	r2, [r3, #10]
 800db22:	7cbb      	ldrb	r3, [r7, #18]
 800db24:	b29b      	uxth	r3, r3
 800db26:	429a      	cmp	r2, r3
 800db28:	d309      	bcc.n	800db3e <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800db2a:	4b7c      	ldr	r3, [pc, #496]	; (800dd1c <tcp_input+0x294>)
 800db2c:	881a      	ldrh	r2, [r3, #0]
 800db2e:	4b7d      	ldr	r3, [pc, #500]	; (800dd24 <tcp_input+0x29c>)
 800db30:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800db32:	7cbb      	ldrb	r3, [r7, #18]
 800db34:	4619      	mov	r1, r3
 800db36:	6878      	ldr	r0, [r7, #4]
 800db38:	f7fd fe58 	bl	800b7ec <pbuf_remove_header>
 800db3c:	e04e      	b.n	800dbdc <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	2b00      	cmp	r3, #0
 800db44:	d105      	bne.n	800db52 <tcp_input+0xca>
 800db46:	4b70      	ldr	r3, [pc, #448]	; (800dd08 <tcp_input+0x280>)
 800db48:	22c2      	movs	r2, #194	; 0xc2
 800db4a:	4977      	ldr	r1, [pc, #476]	; (800dd28 <tcp_input+0x2a0>)
 800db4c:	4870      	ldr	r0, [pc, #448]	; (800dd10 <tcp_input+0x288>)
 800db4e:	f006 ffe3 	bl	8014b18 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800db52:	2114      	movs	r1, #20
 800db54:	6878      	ldr	r0, [r7, #4]
 800db56:	f7fd fe49 	bl	800b7ec <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	895a      	ldrh	r2, [r3, #10]
 800db5e:	4b71      	ldr	r3, [pc, #452]	; (800dd24 <tcp_input+0x29c>)
 800db60:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800db62:	4b6e      	ldr	r3, [pc, #440]	; (800dd1c <tcp_input+0x294>)
 800db64:	881a      	ldrh	r2, [r3, #0]
 800db66:	4b6f      	ldr	r3, [pc, #444]	; (800dd24 <tcp_input+0x29c>)
 800db68:	881b      	ldrh	r3, [r3, #0]
 800db6a:	1ad3      	subs	r3, r2, r3
 800db6c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800db6e:	4b6d      	ldr	r3, [pc, #436]	; (800dd24 <tcp_input+0x29c>)
 800db70:	881b      	ldrh	r3, [r3, #0]
 800db72:	4619      	mov	r1, r3
 800db74:	6878      	ldr	r0, [r7, #4]
 800db76:	f7fd fe39 	bl	800b7ec <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	895b      	ldrh	r3, [r3, #10]
 800db80:	8a3a      	ldrh	r2, [r7, #16]
 800db82:	429a      	cmp	r2, r3
 800db84:	f200 836e 	bhi.w	800e264 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	685b      	ldr	r3, [r3, #4]
 800db8e:	4a64      	ldr	r2, [pc, #400]	; (800dd20 <tcp_input+0x298>)
 800db90:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	8a3a      	ldrh	r2, [r7, #16]
 800db98:	4611      	mov	r1, r2
 800db9a:	4618      	mov	r0, r3
 800db9c:	f7fd fe26 	bl	800b7ec <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	891a      	ldrh	r2, [r3, #8]
 800dba4:	8a3b      	ldrh	r3, [r7, #16]
 800dba6:	1ad3      	subs	r3, r2, r3
 800dba8:	b29a      	uxth	r2, r3
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	895b      	ldrh	r3, [r3, #10]
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d005      	beq.n	800dbc2 <tcp_input+0x13a>
 800dbb6:	4b54      	ldr	r3, [pc, #336]	; (800dd08 <tcp_input+0x280>)
 800dbb8:	22df      	movs	r2, #223	; 0xdf
 800dbba:	495c      	ldr	r1, [pc, #368]	; (800dd2c <tcp_input+0x2a4>)
 800dbbc:	4854      	ldr	r0, [pc, #336]	; (800dd10 <tcp_input+0x288>)
 800dbbe:	f006 ffab 	bl	8014b18 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	891a      	ldrh	r2, [r3, #8]
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	891b      	ldrh	r3, [r3, #8]
 800dbcc:	429a      	cmp	r2, r3
 800dbce:	d005      	beq.n	800dbdc <tcp_input+0x154>
 800dbd0:	4b4d      	ldr	r3, [pc, #308]	; (800dd08 <tcp_input+0x280>)
 800dbd2:	22e0      	movs	r2, #224	; 0xe0
 800dbd4:	4956      	ldr	r1, [pc, #344]	; (800dd30 <tcp_input+0x2a8>)
 800dbd6:	484e      	ldr	r0, [pc, #312]	; (800dd10 <tcp_input+0x288>)
 800dbd8:	f006 ff9e 	bl	8014b18 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800dbdc:	4b4d      	ldr	r3, [pc, #308]	; (800dd14 <tcp_input+0x28c>)
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	881b      	ldrh	r3, [r3, #0]
 800dbe2:	b29b      	uxth	r3, r3
 800dbe4:	4a4b      	ldr	r2, [pc, #300]	; (800dd14 <tcp_input+0x28c>)
 800dbe6:	6814      	ldr	r4, [r2, #0]
 800dbe8:	4618      	mov	r0, r3
 800dbea:	f7fc fb27 	bl	800a23c <lwip_htons>
 800dbee:	4603      	mov	r3, r0
 800dbf0:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800dbf2:	4b48      	ldr	r3, [pc, #288]	; (800dd14 <tcp_input+0x28c>)
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	885b      	ldrh	r3, [r3, #2]
 800dbf8:	b29b      	uxth	r3, r3
 800dbfa:	4a46      	ldr	r2, [pc, #280]	; (800dd14 <tcp_input+0x28c>)
 800dbfc:	6814      	ldr	r4, [r2, #0]
 800dbfe:	4618      	mov	r0, r3
 800dc00:	f7fc fb1c 	bl	800a23c <lwip_htons>
 800dc04:	4603      	mov	r3, r0
 800dc06:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800dc08:	4b42      	ldr	r3, [pc, #264]	; (800dd14 <tcp_input+0x28c>)
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	685b      	ldr	r3, [r3, #4]
 800dc0e:	4a41      	ldr	r2, [pc, #260]	; (800dd14 <tcp_input+0x28c>)
 800dc10:	6814      	ldr	r4, [r2, #0]
 800dc12:	4618      	mov	r0, r3
 800dc14:	f7fc fb27 	bl	800a266 <lwip_htonl>
 800dc18:	4603      	mov	r3, r0
 800dc1a:	6063      	str	r3, [r4, #4]
 800dc1c:	6863      	ldr	r3, [r4, #4]
 800dc1e:	4a45      	ldr	r2, [pc, #276]	; (800dd34 <tcp_input+0x2ac>)
 800dc20:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800dc22:	4b3c      	ldr	r3, [pc, #240]	; (800dd14 <tcp_input+0x28c>)
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	689b      	ldr	r3, [r3, #8]
 800dc28:	4a3a      	ldr	r2, [pc, #232]	; (800dd14 <tcp_input+0x28c>)
 800dc2a:	6814      	ldr	r4, [r2, #0]
 800dc2c:	4618      	mov	r0, r3
 800dc2e:	f7fc fb1a 	bl	800a266 <lwip_htonl>
 800dc32:	4603      	mov	r3, r0
 800dc34:	60a3      	str	r3, [r4, #8]
 800dc36:	68a3      	ldr	r3, [r4, #8]
 800dc38:	4a3f      	ldr	r2, [pc, #252]	; (800dd38 <tcp_input+0x2b0>)
 800dc3a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800dc3c:	4b35      	ldr	r3, [pc, #212]	; (800dd14 <tcp_input+0x28c>)
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	89db      	ldrh	r3, [r3, #14]
 800dc42:	b29b      	uxth	r3, r3
 800dc44:	4a33      	ldr	r2, [pc, #204]	; (800dd14 <tcp_input+0x28c>)
 800dc46:	6814      	ldr	r4, [r2, #0]
 800dc48:	4618      	mov	r0, r3
 800dc4a:	f7fc faf7 	bl	800a23c <lwip_htons>
 800dc4e:	4603      	mov	r3, r0
 800dc50:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800dc52:	4b30      	ldr	r3, [pc, #192]	; (800dd14 <tcp_input+0x28c>)
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	899b      	ldrh	r3, [r3, #12]
 800dc58:	b29b      	uxth	r3, r3
 800dc5a:	4618      	mov	r0, r3
 800dc5c:	f7fc faee 	bl	800a23c <lwip_htons>
 800dc60:	4603      	mov	r3, r0
 800dc62:	b2db      	uxtb	r3, r3
 800dc64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dc68:	b2da      	uxtb	r2, r3
 800dc6a:	4b34      	ldr	r3, [pc, #208]	; (800dd3c <tcp_input+0x2b4>)
 800dc6c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	891a      	ldrh	r2, [r3, #8]
 800dc72:	4b33      	ldr	r3, [pc, #204]	; (800dd40 <tcp_input+0x2b8>)
 800dc74:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800dc76:	4b31      	ldr	r3, [pc, #196]	; (800dd3c <tcp_input+0x2b4>)
 800dc78:	781b      	ldrb	r3, [r3, #0]
 800dc7a:	f003 0303 	and.w	r3, r3, #3
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d00c      	beq.n	800dc9c <tcp_input+0x214>
    tcplen++;
 800dc82:	4b2f      	ldr	r3, [pc, #188]	; (800dd40 <tcp_input+0x2b8>)
 800dc84:	881b      	ldrh	r3, [r3, #0]
 800dc86:	3301      	adds	r3, #1
 800dc88:	b29a      	uxth	r2, r3
 800dc8a:	4b2d      	ldr	r3, [pc, #180]	; (800dd40 <tcp_input+0x2b8>)
 800dc8c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	891a      	ldrh	r2, [r3, #8]
 800dc92:	4b2b      	ldr	r3, [pc, #172]	; (800dd40 <tcp_input+0x2b8>)
 800dc94:	881b      	ldrh	r3, [r3, #0]
 800dc96:	429a      	cmp	r2, r3
 800dc98:	f200 82e6 	bhi.w	800e268 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800dc9c:	2300      	movs	r3, #0
 800dc9e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800dca0:	4b28      	ldr	r3, [pc, #160]	; (800dd44 <tcp_input+0x2bc>)
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	61fb      	str	r3, [r7, #28]
 800dca6:	e09d      	b.n	800dde4 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800dca8:	69fb      	ldr	r3, [r7, #28]
 800dcaa:	7d1b      	ldrb	r3, [r3, #20]
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d105      	bne.n	800dcbc <tcp_input+0x234>
 800dcb0:	4b15      	ldr	r3, [pc, #84]	; (800dd08 <tcp_input+0x280>)
 800dcb2:	22fb      	movs	r2, #251	; 0xfb
 800dcb4:	4924      	ldr	r1, [pc, #144]	; (800dd48 <tcp_input+0x2c0>)
 800dcb6:	4816      	ldr	r0, [pc, #88]	; (800dd10 <tcp_input+0x288>)
 800dcb8:	f006 ff2e 	bl	8014b18 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800dcbc:	69fb      	ldr	r3, [r7, #28]
 800dcbe:	7d1b      	ldrb	r3, [r3, #20]
 800dcc0:	2b0a      	cmp	r3, #10
 800dcc2:	d105      	bne.n	800dcd0 <tcp_input+0x248>
 800dcc4:	4b10      	ldr	r3, [pc, #64]	; (800dd08 <tcp_input+0x280>)
 800dcc6:	22fc      	movs	r2, #252	; 0xfc
 800dcc8:	4920      	ldr	r1, [pc, #128]	; (800dd4c <tcp_input+0x2c4>)
 800dcca:	4811      	ldr	r0, [pc, #68]	; (800dd10 <tcp_input+0x288>)
 800dccc:	f006 ff24 	bl	8014b18 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800dcd0:	69fb      	ldr	r3, [r7, #28]
 800dcd2:	7d1b      	ldrb	r3, [r3, #20]
 800dcd4:	2b01      	cmp	r3, #1
 800dcd6:	d105      	bne.n	800dce4 <tcp_input+0x25c>
 800dcd8:	4b0b      	ldr	r3, [pc, #44]	; (800dd08 <tcp_input+0x280>)
 800dcda:	22fd      	movs	r2, #253	; 0xfd
 800dcdc:	491c      	ldr	r1, [pc, #112]	; (800dd50 <tcp_input+0x2c8>)
 800dcde:	480c      	ldr	r0, [pc, #48]	; (800dd10 <tcp_input+0x288>)
 800dce0:	f006 ff1a 	bl	8014b18 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800dce4:	69fb      	ldr	r3, [r7, #28]
 800dce6:	7a1b      	ldrb	r3, [r3, #8]
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d033      	beq.n	800dd54 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800dcec:	69fb      	ldr	r3, [r7, #28]
 800dcee:	7a1a      	ldrb	r2, [r3, #8]
 800dcf0:	4b09      	ldr	r3, [pc, #36]	; (800dd18 <tcp_input+0x290>)
 800dcf2:	685b      	ldr	r3, [r3, #4]
 800dcf4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dcf8:	3301      	adds	r3, #1
 800dcfa:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800dcfc:	429a      	cmp	r2, r3
 800dcfe:	d029      	beq.n	800dd54 <tcp_input+0x2cc>
      prev = pcb;
 800dd00:	69fb      	ldr	r3, [r7, #28]
 800dd02:	61bb      	str	r3, [r7, #24]
      continue;
 800dd04:	e06b      	b.n	800ddde <tcp_input+0x356>
 800dd06:	bf00      	nop
 800dd08:	08017358 	.word	0x08017358
 800dd0c:	0801738c 	.word	0x0801738c
 800dd10:	080173a4 	.word	0x080173a4
 800dd14:	20008bcc 	.word	0x20008bcc
 800dd18:	20005634 	.word	0x20005634
 800dd1c:	20008bd0 	.word	0x20008bd0
 800dd20:	20008bd4 	.word	0x20008bd4
 800dd24:	20008bd2 	.word	0x20008bd2
 800dd28:	080173cc 	.word	0x080173cc
 800dd2c:	080173dc 	.word	0x080173dc
 800dd30:	080173e8 	.word	0x080173e8
 800dd34:	20008bdc 	.word	0x20008bdc
 800dd38:	20008be0 	.word	0x20008be0
 800dd3c:	20008be8 	.word	0x20008be8
 800dd40:	20008be6 	.word	0x20008be6
 800dd44:	20008bb0 	.word	0x20008bb0
 800dd48:	08017408 	.word	0x08017408
 800dd4c:	08017430 	.word	0x08017430
 800dd50:	0801745c 	.word	0x0801745c
    }

    if (pcb->remote_port == tcphdr->src &&
 800dd54:	69fb      	ldr	r3, [r7, #28]
 800dd56:	8b1a      	ldrh	r2, [r3, #24]
 800dd58:	4b72      	ldr	r3, [pc, #456]	; (800df24 <tcp_input+0x49c>)
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	881b      	ldrh	r3, [r3, #0]
 800dd5e:	b29b      	uxth	r3, r3
 800dd60:	429a      	cmp	r2, r3
 800dd62:	d13a      	bne.n	800ddda <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800dd64:	69fb      	ldr	r3, [r7, #28]
 800dd66:	8ada      	ldrh	r2, [r3, #22]
 800dd68:	4b6e      	ldr	r3, [pc, #440]	; (800df24 <tcp_input+0x49c>)
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	885b      	ldrh	r3, [r3, #2]
 800dd6e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800dd70:	429a      	cmp	r2, r3
 800dd72:	d132      	bne.n	800ddda <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800dd74:	69fb      	ldr	r3, [r7, #28]
 800dd76:	685a      	ldr	r2, [r3, #4]
 800dd78:	4b6b      	ldr	r3, [pc, #428]	; (800df28 <tcp_input+0x4a0>)
 800dd7a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800dd7c:	429a      	cmp	r2, r3
 800dd7e:	d12c      	bne.n	800ddda <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800dd80:	69fb      	ldr	r3, [r7, #28]
 800dd82:	681a      	ldr	r2, [r3, #0]
 800dd84:	4b68      	ldr	r3, [pc, #416]	; (800df28 <tcp_input+0x4a0>)
 800dd86:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800dd88:	429a      	cmp	r2, r3
 800dd8a:	d126      	bne.n	800ddda <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800dd8c:	69fb      	ldr	r3, [r7, #28]
 800dd8e:	68db      	ldr	r3, [r3, #12]
 800dd90:	69fa      	ldr	r2, [r7, #28]
 800dd92:	429a      	cmp	r2, r3
 800dd94:	d106      	bne.n	800dda4 <tcp_input+0x31c>
 800dd96:	4b65      	ldr	r3, [pc, #404]	; (800df2c <tcp_input+0x4a4>)
 800dd98:	f240 120d 	movw	r2, #269	; 0x10d
 800dd9c:	4964      	ldr	r1, [pc, #400]	; (800df30 <tcp_input+0x4a8>)
 800dd9e:	4865      	ldr	r0, [pc, #404]	; (800df34 <tcp_input+0x4ac>)
 800dda0:	f006 feba 	bl	8014b18 <iprintf>
      if (prev != NULL) {
 800dda4:	69bb      	ldr	r3, [r7, #24]
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d00a      	beq.n	800ddc0 <tcp_input+0x338>
        prev->next = pcb->next;
 800ddaa:	69fb      	ldr	r3, [r7, #28]
 800ddac:	68da      	ldr	r2, [r3, #12]
 800ddae:	69bb      	ldr	r3, [r7, #24]
 800ddb0:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800ddb2:	4b61      	ldr	r3, [pc, #388]	; (800df38 <tcp_input+0x4b0>)
 800ddb4:	681a      	ldr	r2, [r3, #0]
 800ddb6:	69fb      	ldr	r3, [r7, #28]
 800ddb8:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800ddba:	4a5f      	ldr	r2, [pc, #380]	; (800df38 <tcp_input+0x4b0>)
 800ddbc:	69fb      	ldr	r3, [r7, #28]
 800ddbe:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800ddc0:	69fb      	ldr	r3, [r7, #28]
 800ddc2:	68db      	ldr	r3, [r3, #12]
 800ddc4:	69fa      	ldr	r2, [r7, #28]
 800ddc6:	429a      	cmp	r2, r3
 800ddc8:	d111      	bne.n	800ddee <tcp_input+0x366>
 800ddca:	4b58      	ldr	r3, [pc, #352]	; (800df2c <tcp_input+0x4a4>)
 800ddcc:	f240 1215 	movw	r2, #277	; 0x115
 800ddd0:	495a      	ldr	r1, [pc, #360]	; (800df3c <tcp_input+0x4b4>)
 800ddd2:	4858      	ldr	r0, [pc, #352]	; (800df34 <tcp_input+0x4ac>)
 800ddd4:	f006 fea0 	bl	8014b18 <iprintf>
      break;
 800ddd8:	e009      	b.n	800ddee <tcp_input+0x366>
    }
    prev = pcb;
 800ddda:	69fb      	ldr	r3, [r7, #28]
 800dddc:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ddde:	69fb      	ldr	r3, [r7, #28]
 800dde0:	68db      	ldr	r3, [r3, #12]
 800dde2:	61fb      	str	r3, [r7, #28]
 800dde4:	69fb      	ldr	r3, [r7, #28]
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	f47f af5e 	bne.w	800dca8 <tcp_input+0x220>
 800ddec:	e000      	b.n	800ddf0 <tcp_input+0x368>
      break;
 800ddee:	bf00      	nop
  }

  if (pcb == NULL) {
 800ddf0:	69fb      	ldr	r3, [r7, #28]
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	f040 80aa 	bne.w	800df4c <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ddf8:	4b51      	ldr	r3, [pc, #324]	; (800df40 <tcp_input+0x4b8>)
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	61fb      	str	r3, [r7, #28]
 800ddfe:	e03f      	b.n	800de80 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800de00:	69fb      	ldr	r3, [r7, #28]
 800de02:	7d1b      	ldrb	r3, [r3, #20]
 800de04:	2b0a      	cmp	r3, #10
 800de06:	d006      	beq.n	800de16 <tcp_input+0x38e>
 800de08:	4b48      	ldr	r3, [pc, #288]	; (800df2c <tcp_input+0x4a4>)
 800de0a:	f240 121f 	movw	r2, #287	; 0x11f
 800de0e:	494d      	ldr	r1, [pc, #308]	; (800df44 <tcp_input+0x4bc>)
 800de10:	4848      	ldr	r0, [pc, #288]	; (800df34 <tcp_input+0x4ac>)
 800de12:	f006 fe81 	bl	8014b18 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800de16:	69fb      	ldr	r3, [r7, #28]
 800de18:	7a1b      	ldrb	r3, [r3, #8]
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d009      	beq.n	800de32 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800de1e:	69fb      	ldr	r3, [r7, #28]
 800de20:	7a1a      	ldrb	r2, [r3, #8]
 800de22:	4b41      	ldr	r3, [pc, #260]	; (800df28 <tcp_input+0x4a0>)
 800de24:	685b      	ldr	r3, [r3, #4]
 800de26:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800de2a:	3301      	adds	r3, #1
 800de2c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800de2e:	429a      	cmp	r2, r3
 800de30:	d122      	bne.n	800de78 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800de32:	69fb      	ldr	r3, [r7, #28]
 800de34:	8b1a      	ldrh	r2, [r3, #24]
 800de36:	4b3b      	ldr	r3, [pc, #236]	; (800df24 <tcp_input+0x49c>)
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	881b      	ldrh	r3, [r3, #0]
 800de3c:	b29b      	uxth	r3, r3
 800de3e:	429a      	cmp	r2, r3
 800de40:	d11b      	bne.n	800de7a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800de42:	69fb      	ldr	r3, [r7, #28]
 800de44:	8ada      	ldrh	r2, [r3, #22]
 800de46:	4b37      	ldr	r3, [pc, #220]	; (800df24 <tcp_input+0x49c>)
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	885b      	ldrh	r3, [r3, #2]
 800de4c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800de4e:	429a      	cmp	r2, r3
 800de50:	d113      	bne.n	800de7a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800de52:	69fb      	ldr	r3, [r7, #28]
 800de54:	685a      	ldr	r2, [r3, #4]
 800de56:	4b34      	ldr	r3, [pc, #208]	; (800df28 <tcp_input+0x4a0>)
 800de58:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800de5a:	429a      	cmp	r2, r3
 800de5c:	d10d      	bne.n	800de7a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800de5e:	69fb      	ldr	r3, [r7, #28]
 800de60:	681a      	ldr	r2, [r3, #0]
 800de62:	4b31      	ldr	r3, [pc, #196]	; (800df28 <tcp_input+0x4a0>)
 800de64:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800de66:	429a      	cmp	r2, r3
 800de68:	d107      	bne.n	800de7a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800de6a:	69f8      	ldr	r0, [r7, #28]
 800de6c:	f000 fb56 	bl	800e51c <tcp_timewait_input>
        }
        pbuf_free(p);
 800de70:	6878      	ldr	r0, [r7, #4]
 800de72:	f7fd fd41 	bl	800b8f8 <pbuf_free>
        return;
 800de76:	e1fd      	b.n	800e274 <tcp_input+0x7ec>
        continue;
 800de78:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800de7a:	69fb      	ldr	r3, [r7, #28]
 800de7c:	68db      	ldr	r3, [r3, #12]
 800de7e:	61fb      	str	r3, [r7, #28]
 800de80:	69fb      	ldr	r3, [r7, #28]
 800de82:	2b00      	cmp	r3, #0
 800de84:	d1bc      	bne.n	800de00 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800de86:	2300      	movs	r3, #0
 800de88:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800de8a:	4b2f      	ldr	r3, [pc, #188]	; (800df48 <tcp_input+0x4c0>)
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	617b      	str	r3, [r7, #20]
 800de90:	e02a      	b.n	800dee8 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800de92:	697b      	ldr	r3, [r7, #20]
 800de94:	7a1b      	ldrb	r3, [r3, #8]
 800de96:	2b00      	cmp	r3, #0
 800de98:	d00c      	beq.n	800deb4 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800de9a:	697b      	ldr	r3, [r7, #20]
 800de9c:	7a1a      	ldrb	r2, [r3, #8]
 800de9e:	4b22      	ldr	r3, [pc, #136]	; (800df28 <tcp_input+0x4a0>)
 800dea0:	685b      	ldr	r3, [r3, #4]
 800dea2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dea6:	3301      	adds	r3, #1
 800dea8:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800deaa:	429a      	cmp	r2, r3
 800deac:	d002      	beq.n	800deb4 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800deae:	697b      	ldr	r3, [r7, #20]
 800deb0:	61bb      	str	r3, [r7, #24]
        continue;
 800deb2:	e016      	b.n	800dee2 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800deb4:	697b      	ldr	r3, [r7, #20]
 800deb6:	8ada      	ldrh	r2, [r3, #22]
 800deb8:	4b1a      	ldr	r3, [pc, #104]	; (800df24 <tcp_input+0x49c>)
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	885b      	ldrh	r3, [r3, #2]
 800debe:	b29b      	uxth	r3, r3
 800dec0:	429a      	cmp	r2, r3
 800dec2:	d10c      	bne.n	800dede <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800dec4:	697b      	ldr	r3, [r7, #20]
 800dec6:	681a      	ldr	r2, [r3, #0]
 800dec8:	4b17      	ldr	r3, [pc, #92]	; (800df28 <tcp_input+0x4a0>)
 800deca:	695b      	ldr	r3, [r3, #20]
 800decc:	429a      	cmp	r2, r3
 800dece:	d00f      	beq.n	800def0 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800ded0:	697b      	ldr	r3, [r7, #20]
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d00d      	beq.n	800def2 <tcp_input+0x46a>
 800ded6:	697b      	ldr	r3, [r7, #20]
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d009      	beq.n	800def2 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800dede:	697b      	ldr	r3, [r7, #20]
 800dee0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800dee2:	697b      	ldr	r3, [r7, #20]
 800dee4:	68db      	ldr	r3, [r3, #12]
 800dee6:	617b      	str	r3, [r7, #20]
 800dee8:	697b      	ldr	r3, [r7, #20]
 800deea:	2b00      	cmp	r3, #0
 800deec:	d1d1      	bne.n	800de92 <tcp_input+0x40a>
 800deee:	e000      	b.n	800def2 <tcp_input+0x46a>
            break;
 800def0:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800def2:	697b      	ldr	r3, [r7, #20]
 800def4:	2b00      	cmp	r3, #0
 800def6:	d029      	beq.n	800df4c <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800def8:	69bb      	ldr	r3, [r7, #24]
 800defa:	2b00      	cmp	r3, #0
 800defc:	d00a      	beq.n	800df14 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800defe:	697b      	ldr	r3, [r7, #20]
 800df00:	68da      	ldr	r2, [r3, #12]
 800df02:	69bb      	ldr	r3, [r7, #24]
 800df04:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800df06:	4b10      	ldr	r3, [pc, #64]	; (800df48 <tcp_input+0x4c0>)
 800df08:	681a      	ldr	r2, [r3, #0]
 800df0a:	697b      	ldr	r3, [r7, #20]
 800df0c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800df0e:	4a0e      	ldr	r2, [pc, #56]	; (800df48 <tcp_input+0x4c0>)
 800df10:	697b      	ldr	r3, [r7, #20]
 800df12:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800df14:	6978      	ldr	r0, [r7, #20]
 800df16:	f000 fa03 	bl	800e320 <tcp_listen_input>
      }
      pbuf_free(p);
 800df1a:	6878      	ldr	r0, [r7, #4]
 800df1c:	f7fd fcec 	bl	800b8f8 <pbuf_free>
      return;
 800df20:	e1a8      	b.n	800e274 <tcp_input+0x7ec>
 800df22:	bf00      	nop
 800df24:	20008bcc 	.word	0x20008bcc
 800df28:	20005634 	.word	0x20005634
 800df2c:	08017358 	.word	0x08017358
 800df30:	08017484 	.word	0x08017484
 800df34:	080173a4 	.word	0x080173a4
 800df38:	20008bb0 	.word	0x20008bb0
 800df3c:	080174b0 	.word	0x080174b0
 800df40:	20008bb4 	.word	0x20008bb4
 800df44:	080174dc 	.word	0x080174dc
 800df48:	20008bac 	.word	0x20008bac
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800df4c:	69fb      	ldr	r3, [r7, #28]
 800df4e:	2b00      	cmp	r3, #0
 800df50:	f000 8158 	beq.w	800e204 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800df54:	4b95      	ldr	r3, [pc, #596]	; (800e1ac <tcp_input+0x724>)
 800df56:	2200      	movs	r2, #0
 800df58:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	891a      	ldrh	r2, [r3, #8]
 800df5e:	4b93      	ldr	r3, [pc, #588]	; (800e1ac <tcp_input+0x724>)
 800df60:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800df62:	4a92      	ldr	r2, [pc, #584]	; (800e1ac <tcp_input+0x724>)
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800df68:	4b91      	ldr	r3, [pc, #580]	; (800e1b0 <tcp_input+0x728>)
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	4a8f      	ldr	r2, [pc, #572]	; (800e1ac <tcp_input+0x724>)
 800df6e:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800df70:	4b90      	ldr	r3, [pc, #576]	; (800e1b4 <tcp_input+0x72c>)
 800df72:	2200      	movs	r2, #0
 800df74:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800df76:	4b90      	ldr	r3, [pc, #576]	; (800e1b8 <tcp_input+0x730>)
 800df78:	2200      	movs	r2, #0
 800df7a:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800df7c:	4b8f      	ldr	r3, [pc, #572]	; (800e1bc <tcp_input+0x734>)
 800df7e:	2200      	movs	r2, #0
 800df80:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800df82:	4b8f      	ldr	r3, [pc, #572]	; (800e1c0 <tcp_input+0x738>)
 800df84:	781b      	ldrb	r3, [r3, #0]
 800df86:	f003 0308 	and.w	r3, r3, #8
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d006      	beq.n	800df9c <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	7b5b      	ldrb	r3, [r3, #13]
 800df92:	f043 0301 	orr.w	r3, r3, #1
 800df96:	b2da      	uxtb	r2, r3
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800df9c:	69fb      	ldr	r3, [r7, #28]
 800df9e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d017      	beq.n	800dfd4 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800dfa4:	69f8      	ldr	r0, [r7, #28]
 800dfa6:	f7ff f843 	bl	800d030 <tcp_process_refused_data>
 800dfaa:	4603      	mov	r3, r0
 800dfac:	f113 0f0d 	cmn.w	r3, #13
 800dfb0:	d007      	beq.n	800dfc2 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800dfb2:	69fb      	ldr	r3, [r7, #28]
 800dfb4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d00c      	beq.n	800dfd4 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800dfba:	4b82      	ldr	r3, [pc, #520]	; (800e1c4 <tcp_input+0x73c>)
 800dfbc:	881b      	ldrh	r3, [r3, #0]
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d008      	beq.n	800dfd4 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800dfc2:	69fb      	ldr	r3, [r7, #28]
 800dfc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	f040 80e3 	bne.w	800e192 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800dfcc:	69f8      	ldr	r0, [r7, #28]
 800dfce:	f003 fe05 	bl	8011bdc <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800dfd2:	e0de      	b.n	800e192 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800dfd4:	4a7c      	ldr	r2, [pc, #496]	; (800e1c8 <tcp_input+0x740>)
 800dfd6:	69fb      	ldr	r3, [r7, #28]
 800dfd8:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800dfda:	69f8      	ldr	r0, [r7, #28]
 800dfdc:	f000 fb18 	bl	800e610 <tcp_process>
 800dfe0:	4603      	mov	r3, r0
 800dfe2:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800dfe4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800dfe8:	f113 0f0d 	cmn.w	r3, #13
 800dfec:	f000 80d3 	beq.w	800e196 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800dff0:	4b71      	ldr	r3, [pc, #452]	; (800e1b8 <tcp_input+0x730>)
 800dff2:	781b      	ldrb	r3, [r3, #0]
 800dff4:	f003 0308 	and.w	r3, r3, #8
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	d015      	beq.n	800e028 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800dffc:	69fb      	ldr	r3, [r7, #28]
 800dffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e002:	2b00      	cmp	r3, #0
 800e004:	d008      	beq.n	800e018 <tcp_input+0x590>
 800e006:	69fb      	ldr	r3, [r7, #28]
 800e008:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e00c:	69fa      	ldr	r2, [r7, #28]
 800e00e:	6912      	ldr	r2, [r2, #16]
 800e010:	f06f 010d 	mvn.w	r1, #13
 800e014:	4610      	mov	r0, r2
 800e016:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800e018:	69f9      	ldr	r1, [r7, #28]
 800e01a:	486c      	ldr	r0, [pc, #432]	; (800e1cc <tcp_input+0x744>)
 800e01c:	f7ff fbbc 	bl	800d798 <tcp_pcb_remove>
        tcp_free(pcb);
 800e020:	69f8      	ldr	r0, [r7, #28]
 800e022:	f7fd ff09 	bl	800be38 <tcp_free>
 800e026:	e0da      	b.n	800e1de <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800e028:	2300      	movs	r3, #0
 800e02a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800e02c:	4b63      	ldr	r3, [pc, #396]	; (800e1bc <tcp_input+0x734>)
 800e02e:	881b      	ldrh	r3, [r3, #0]
 800e030:	2b00      	cmp	r3, #0
 800e032:	d01d      	beq.n	800e070 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800e034:	4b61      	ldr	r3, [pc, #388]	; (800e1bc <tcp_input+0x734>)
 800e036:	881b      	ldrh	r3, [r3, #0]
 800e038:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800e03a:	69fb      	ldr	r3, [r7, #28]
 800e03c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e040:	2b00      	cmp	r3, #0
 800e042:	d00a      	beq.n	800e05a <tcp_input+0x5d2>
 800e044:	69fb      	ldr	r3, [r7, #28]
 800e046:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e04a:	69fa      	ldr	r2, [r7, #28]
 800e04c:	6910      	ldr	r0, [r2, #16]
 800e04e:	89fa      	ldrh	r2, [r7, #14]
 800e050:	69f9      	ldr	r1, [r7, #28]
 800e052:	4798      	blx	r3
 800e054:	4603      	mov	r3, r0
 800e056:	74fb      	strb	r3, [r7, #19]
 800e058:	e001      	b.n	800e05e <tcp_input+0x5d6>
 800e05a:	2300      	movs	r3, #0
 800e05c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800e05e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e062:	f113 0f0d 	cmn.w	r3, #13
 800e066:	f000 8098 	beq.w	800e19a <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800e06a:	4b54      	ldr	r3, [pc, #336]	; (800e1bc <tcp_input+0x734>)
 800e06c:	2200      	movs	r2, #0
 800e06e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800e070:	69f8      	ldr	r0, [r7, #28]
 800e072:	f000 f915 	bl	800e2a0 <tcp_input_delayed_close>
 800e076:	4603      	mov	r3, r0
 800e078:	2b00      	cmp	r3, #0
 800e07a:	f040 8090 	bne.w	800e19e <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800e07e:	4b4d      	ldr	r3, [pc, #308]	; (800e1b4 <tcp_input+0x72c>)
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	2b00      	cmp	r3, #0
 800e084:	d041      	beq.n	800e10a <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800e086:	69fb      	ldr	r3, [r7, #28]
 800e088:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d006      	beq.n	800e09c <tcp_input+0x614>
 800e08e:	4b50      	ldr	r3, [pc, #320]	; (800e1d0 <tcp_input+0x748>)
 800e090:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800e094:	494f      	ldr	r1, [pc, #316]	; (800e1d4 <tcp_input+0x74c>)
 800e096:	4850      	ldr	r0, [pc, #320]	; (800e1d8 <tcp_input+0x750>)
 800e098:	f006 fd3e 	bl	8014b18 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800e09c:	69fb      	ldr	r3, [r7, #28]
 800e09e:	8b5b      	ldrh	r3, [r3, #26]
 800e0a0:	f003 0310 	and.w	r3, r3, #16
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d008      	beq.n	800e0ba <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800e0a8:	4b42      	ldr	r3, [pc, #264]	; (800e1b4 <tcp_input+0x72c>)
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	4618      	mov	r0, r3
 800e0ae:	f7fd fc23 	bl	800b8f8 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800e0b2:	69f8      	ldr	r0, [r7, #28]
 800e0b4:	f7fe f9a8 	bl	800c408 <tcp_abort>
            goto aborted;
 800e0b8:	e091      	b.n	800e1de <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800e0ba:	69fb      	ldr	r3, [r7, #28]
 800e0bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d00c      	beq.n	800e0de <tcp_input+0x656>
 800e0c4:	69fb      	ldr	r3, [r7, #28]
 800e0c6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e0ca:	69fb      	ldr	r3, [r7, #28]
 800e0cc:	6918      	ldr	r0, [r3, #16]
 800e0ce:	4b39      	ldr	r3, [pc, #228]	; (800e1b4 <tcp_input+0x72c>)
 800e0d0:	681a      	ldr	r2, [r3, #0]
 800e0d2:	2300      	movs	r3, #0
 800e0d4:	69f9      	ldr	r1, [r7, #28]
 800e0d6:	47a0      	blx	r4
 800e0d8:	4603      	mov	r3, r0
 800e0da:	74fb      	strb	r3, [r7, #19]
 800e0dc:	e008      	b.n	800e0f0 <tcp_input+0x668>
 800e0de:	4b35      	ldr	r3, [pc, #212]	; (800e1b4 <tcp_input+0x72c>)
 800e0e0:	681a      	ldr	r2, [r3, #0]
 800e0e2:	2300      	movs	r3, #0
 800e0e4:	69f9      	ldr	r1, [r7, #28]
 800e0e6:	2000      	movs	r0, #0
 800e0e8:	f7ff f896 	bl	800d218 <tcp_recv_null>
 800e0ec:	4603      	mov	r3, r0
 800e0ee:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800e0f0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e0f4:	f113 0f0d 	cmn.w	r3, #13
 800e0f8:	d053      	beq.n	800e1a2 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800e0fa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d003      	beq.n	800e10a <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800e102:	4b2c      	ldr	r3, [pc, #176]	; (800e1b4 <tcp_input+0x72c>)
 800e104:	681a      	ldr	r2, [r3, #0]
 800e106:	69fb      	ldr	r3, [r7, #28]
 800e108:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800e10a:	4b2b      	ldr	r3, [pc, #172]	; (800e1b8 <tcp_input+0x730>)
 800e10c:	781b      	ldrb	r3, [r3, #0]
 800e10e:	f003 0320 	and.w	r3, r3, #32
 800e112:	2b00      	cmp	r3, #0
 800e114:	d030      	beq.n	800e178 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800e116:	69fb      	ldr	r3, [r7, #28]
 800e118:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d009      	beq.n	800e132 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800e11e:	69fb      	ldr	r3, [r7, #28]
 800e120:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e122:	7b5a      	ldrb	r2, [r3, #13]
 800e124:	69fb      	ldr	r3, [r7, #28]
 800e126:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e128:	f042 0220 	orr.w	r2, r2, #32
 800e12c:	b2d2      	uxtb	r2, r2
 800e12e:	735a      	strb	r2, [r3, #13]
 800e130:	e022      	b.n	800e178 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800e132:	69fb      	ldr	r3, [r7, #28]
 800e134:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e136:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e13a:	d005      	beq.n	800e148 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800e13c:	69fb      	ldr	r3, [r7, #28]
 800e13e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e140:	3301      	adds	r3, #1
 800e142:	b29a      	uxth	r2, r3
 800e144:	69fb      	ldr	r3, [r7, #28]
 800e146:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800e148:	69fb      	ldr	r3, [r7, #28]
 800e14a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d00b      	beq.n	800e16a <tcp_input+0x6e2>
 800e152:	69fb      	ldr	r3, [r7, #28]
 800e154:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e158:	69fb      	ldr	r3, [r7, #28]
 800e15a:	6918      	ldr	r0, [r3, #16]
 800e15c:	2300      	movs	r3, #0
 800e15e:	2200      	movs	r2, #0
 800e160:	69f9      	ldr	r1, [r7, #28]
 800e162:	47a0      	blx	r4
 800e164:	4603      	mov	r3, r0
 800e166:	74fb      	strb	r3, [r7, #19]
 800e168:	e001      	b.n	800e16e <tcp_input+0x6e6>
 800e16a:	2300      	movs	r3, #0
 800e16c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800e16e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e172:	f113 0f0d 	cmn.w	r3, #13
 800e176:	d016      	beq.n	800e1a6 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800e178:	4b13      	ldr	r3, [pc, #76]	; (800e1c8 <tcp_input+0x740>)
 800e17a:	2200      	movs	r2, #0
 800e17c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800e17e:	69f8      	ldr	r0, [r7, #28]
 800e180:	f000 f88e 	bl	800e2a0 <tcp_input_delayed_close>
 800e184:	4603      	mov	r3, r0
 800e186:	2b00      	cmp	r3, #0
 800e188:	d128      	bne.n	800e1dc <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800e18a:	69f8      	ldr	r0, [r7, #28]
 800e18c:	f002 ff20 	bl	8010fd0 <tcp_output>
 800e190:	e025      	b.n	800e1de <tcp_input+0x756>
        goto aborted;
 800e192:	bf00      	nop
 800e194:	e023      	b.n	800e1de <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800e196:	bf00      	nop
 800e198:	e021      	b.n	800e1de <tcp_input+0x756>
              goto aborted;
 800e19a:	bf00      	nop
 800e19c:	e01f      	b.n	800e1de <tcp_input+0x756>
          goto aborted;
 800e19e:	bf00      	nop
 800e1a0:	e01d      	b.n	800e1de <tcp_input+0x756>
            goto aborted;
 800e1a2:	bf00      	nop
 800e1a4:	e01b      	b.n	800e1de <tcp_input+0x756>
              goto aborted;
 800e1a6:	bf00      	nop
 800e1a8:	e019      	b.n	800e1de <tcp_input+0x756>
 800e1aa:	bf00      	nop
 800e1ac:	20008bbc 	.word	0x20008bbc
 800e1b0:	20008bcc 	.word	0x20008bcc
 800e1b4:	20008bec 	.word	0x20008bec
 800e1b8:	20008be9 	.word	0x20008be9
 800e1bc:	20008be4 	.word	0x20008be4
 800e1c0:	20008be8 	.word	0x20008be8
 800e1c4:	20008be6 	.word	0x20008be6
 800e1c8:	20008bf0 	.word	0x20008bf0
 800e1cc:	20008bb0 	.word	0x20008bb0
 800e1d0:	08017358 	.word	0x08017358
 800e1d4:	0801750c 	.word	0x0801750c
 800e1d8:	080173a4 	.word	0x080173a4
          goto aborted;
 800e1dc:	bf00      	nop
    tcp_input_pcb = NULL;
 800e1de:	4b27      	ldr	r3, [pc, #156]	; (800e27c <tcp_input+0x7f4>)
 800e1e0:	2200      	movs	r2, #0
 800e1e2:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800e1e4:	4b26      	ldr	r3, [pc, #152]	; (800e280 <tcp_input+0x7f8>)
 800e1e6:	2200      	movs	r2, #0
 800e1e8:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800e1ea:	4b26      	ldr	r3, [pc, #152]	; (800e284 <tcp_input+0x7fc>)
 800e1ec:	685b      	ldr	r3, [r3, #4]
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d03f      	beq.n	800e272 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800e1f2:	4b24      	ldr	r3, [pc, #144]	; (800e284 <tcp_input+0x7fc>)
 800e1f4:	685b      	ldr	r3, [r3, #4]
 800e1f6:	4618      	mov	r0, r3
 800e1f8:	f7fd fb7e 	bl	800b8f8 <pbuf_free>
      inseg.p = NULL;
 800e1fc:	4b21      	ldr	r3, [pc, #132]	; (800e284 <tcp_input+0x7fc>)
 800e1fe:	2200      	movs	r2, #0
 800e200:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800e202:	e036      	b.n	800e272 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800e204:	4b20      	ldr	r3, [pc, #128]	; (800e288 <tcp_input+0x800>)
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	899b      	ldrh	r3, [r3, #12]
 800e20a:	b29b      	uxth	r3, r3
 800e20c:	4618      	mov	r0, r3
 800e20e:	f7fc f815 	bl	800a23c <lwip_htons>
 800e212:	4603      	mov	r3, r0
 800e214:	b2db      	uxtb	r3, r3
 800e216:	f003 0304 	and.w	r3, r3, #4
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d118      	bne.n	800e250 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e21e:	4b1b      	ldr	r3, [pc, #108]	; (800e28c <tcp_input+0x804>)
 800e220:	6819      	ldr	r1, [r3, #0]
 800e222:	4b1b      	ldr	r3, [pc, #108]	; (800e290 <tcp_input+0x808>)
 800e224:	881b      	ldrh	r3, [r3, #0]
 800e226:	461a      	mov	r2, r3
 800e228:	4b1a      	ldr	r3, [pc, #104]	; (800e294 <tcp_input+0x80c>)
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e22e:	4b16      	ldr	r3, [pc, #88]	; (800e288 <tcp_input+0x800>)
 800e230:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e232:	885b      	ldrh	r3, [r3, #2]
 800e234:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e236:	4a14      	ldr	r2, [pc, #80]	; (800e288 <tcp_input+0x800>)
 800e238:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e23a:	8812      	ldrh	r2, [r2, #0]
 800e23c:	b292      	uxth	r2, r2
 800e23e:	9202      	str	r2, [sp, #8]
 800e240:	9301      	str	r3, [sp, #4]
 800e242:	4b15      	ldr	r3, [pc, #84]	; (800e298 <tcp_input+0x810>)
 800e244:	9300      	str	r3, [sp, #0]
 800e246:	4b15      	ldr	r3, [pc, #84]	; (800e29c <tcp_input+0x814>)
 800e248:	4602      	mov	r2, r0
 800e24a:	2000      	movs	r0, #0
 800e24c:	f003 fc74 	bl	8011b38 <tcp_rst>
    pbuf_free(p);
 800e250:	6878      	ldr	r0, [r7, #4]
 800e252:	f7fd fb51 	bl	800b8f8 <pbuf_free>
  return;
 800e256:	e00c      	b.n	800e272 <tcp_input+0x7ea>
    goto dropped;
 800e258:	bf00      	nop
 800e25a:	e006      	b.n	800e26a <tcp_input+0x7e2>
    goto dropped;
 800e25c:	bf00      	nop
 800e25e:	e004      	b.n	800e26a <tcp_input+0x7e2>
    goto dropped;
 800e260:	bf00      	nop
 800e262:	e002      	b.n	800e26a <tcp_input+0x7e2>
      goto dropped;
 800e264:	bf00      	nop
 800e266:	e000      	b.n	800e26a <tcp_input+0x7e2>
      goto dropped;
 800e268:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800e26a:	6878      	ldr	r0, [r7, #4]
 800e26c:	f7fd fb44 	bl	800b8f8 <pbuf_free>
 800e270:	e000      	b.n	800e274 <tcp_input+0x7ec>
  return;
 800e272:	bf00      	nop
}
 800e274:	3724      	adds	r7, #36	; 0x24
 800e276:	46bd      	mov	sp, r7
 800e278:	bd90      	pop	{r4, r7, pc}
 800e27a:	bf00      	nop
 800e27c:	20008bf0 	.word	0x20008bf0
 800e280:	20008bec 	.word	0x20008bec
 800e284:	20008bbc 	.word	0x20008bbc
 800e288:	20008bcc 	.word	0x20008bcc
 800e28c:	20008be0 	.word	0x20008be0
 800e290:	20008be6 	.word	0x20008be6
 800e294:	20008bdc 	.word	0x20008bdc
 800e298:	20005644 	.word	0x20005644
 800e29c:	20005648 	.word	0x20005648

0800e2a0 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800e2a0:	b580      	push	{r7, lr}
 800e2a2:	b082      	sub	sp, #8
 800e2a4:	af00      	add	r7, sp, #0
 800e2a6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d106      	bne.n	800e2bc <tcp_input_delayed_close+0x1c>
 800e2ae:	4b17      	ldr	r3, [pc, #92]	; (800e30c <tcp_input_delayed_close+0x6c>)
 800e2b0:	f240 225a 	movw	r2, #602	; 0x25a
 800e2b4:	4916      	ldr	r1, [pc, #88]	; (800e310 <tcp_input_delayed_close+0x70>)
 800e2b6:	4817      	ldr	r0, [pc, #92]	; (800e314 <tcp_input_delayed_close+0x74>)
 800e2b8:	f006 fc2e 	bl	8014b18 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800e2bc:	4b16      	ldr	r3, [pc, #88]	; (800e318 <tcp_input_delayed_close+0x78>)
 800e2be:	781b      	ldrb	r3, [r3, #0]
 800e2c0:	f003 0310 	and.w	r3, r3, #16
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d01c      	beq.n	800e302 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	8b5b      	ldrh	r3, [r3, #26]
 800e2cc:	f003 0310 	and.w	r3, r3, #16
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d10d      	bne.n	800e2f0 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d008      	beq.n	800e2f0 <tcp_input_delayed_close+0x50>
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e2e4:	687a      	ldr	r2, [r7, #4]
 800e2e6:	6912      	ldr	r2, [r2, #16]
 800e2e8:	f06f 010e 	mvn.w	r1, #14
 800e2ec:	4610      	mov	r0, r2
 800e2ee:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800e2f0:	6879      	ldr	r1, [r7, #4]
 800e2f2:	480a      	ldr	r0, [pc, #40]	; (800e31c <tcp_input_delayed_close+0x7c>)
 800e2f4:	f7ff fa50 	bl	800d798 <tcp_pcb_remove>
    tcp_free(pcb);
 800e2f8:	6878      	ldr	r0, [r7, #4]
 800e2fa:	f7fd fd9d 	bl	800be38 <tcp_free>
    return 1;
 800e2fe:	2301      	movs	r3, #1
 800e300:	e000      	b.n	800e304 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800e302:	2300      	movs	r3, #0
}
 800e304:	4618      	mov	r0, r3
 800e306:	3708      	adds	r7, #8
 800e308:	46bd      	mov	sp, r7
 800e30a:	bd80      	pop	{r7, pc}
 800e30c:	08017358 	.word	0x08017358
 800e310:	08017528 	.word	0x08017528
 800e314:	080173a4 	.word	0x080173a4
 800e318:	20008be9 	.word	0x20008be9
 800e31c:	20008bb0 	.word	0x20008bb0

0800e320 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800e320:	b590      	push	{r4, r7, lr}
 800e322:	b08b      	sub	sp, #44	; 0x2c
 800e324:	af04      	add	r7, sp, #16
 800e326:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800e328:	4b6f      	ldr	r3, [pc, #444]	; (800e4e8 <tcp_listen_input+0x1c8>)
 800e32a:	781b      	ldrb	r3, [r3, #0]
 800e32c:	f003 0304 	and.w	r3, r3, #4
 800e330:	2b00      	cmp	r3, #0
 800e332:	f040 80d2 	bne.w	800e4da <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d106      	bne.n	800e34a <tcp_listen_input+0x2a>
 800e33c:	4b6b      	ldr	r3, [pc, #428]	; (800e4ec <tcp_listen_input+0x1cc>)
 800e33e:	f240 2281 	movw	r2, #641	; 0x281
 800e342:	496b      	ldr	r1, [pc, #428]	; (800e4f0 <tcp_listen_input+0x1d0>)
 800e344:	486b      	ldr	r0, [pc, #428]	; (800e4f4 <tcp_listen_input+0x1d4>)
 800e346:	f006 fbe7 	bl	8014b18 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800e34a:	4b67      	ldr	r3, [pc, #412]	; (800e4e8 <tcp_listen_input+0x1c8>)
 800e34c:	781b      	ldrb	r3, [r3, #0]
 800e34e:	f003 0310 	and.w	r3, r3, #16
 800e352:	2b00      	cmp	r3, #0
 800e354:	d019      	beq.n	800e38a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e356:	4b68      	ldr	r3, [pc, #416]	; (800e4f8 <tcp_listen_input+0x1d8>)
 800e358:	6819      	ldr	r1, [r3, #0]
 800e35a:	4b68      	ldr	r3, [pc, #416]	; (800e4fc <tcp_listen_input+0x1dc>)
 800e35c:	881b      	ldrh	r3, [r3, #0]
 800e35e:	461a      	mov	r2, r3
 800e360:	4b67      	ldr	r3, [pc, #412]	; (800e500 <tcp_listen_input+0x1e0>)
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e366:	4b67      	ldr	r3, [pc, #412]	; (800e504 <tcp_listen_input+0x1e4>)
 800e368:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e36a:	885b      	ldrh	r3, [r3, #2]
 800e36c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e36e:	4a65      	ldr	r2, [pc, #404]	; (800e504 <tcp_listen_input+0x1e4>)
 800e370:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e372:	8812      	ldrh	r2, [r2, #0]
 800e374:	b292      	uxth	r2, r2
 800e376:	9202      	str	r2, [sp, #8]
 800e378:	9301      	str	r3, [sp, #4]
 800e37a:	4b63      	ldr	r3, [pc, #396]	; (800e508 <tcp_listen_input+0x1e8>)
 800e37c:	9300      	str	r3, [sp, #0]
 800e37e:	4b63      	ldr	r3, [pc, #396]	; (800e50c <tcp_listen_input+0x1ec>)
 800e380:	4602      	mov	r2, r0
 800e382:	6878      	ldr	r0, [r7, #4]
 800e384:	f003 fbd8 	bl	8011b38 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800e388:	e0a9      	b.n	800e4de <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800e38a:	4b57      	ldr	r3, [pc, #348]	; (800e4e8 <tcp_listen_input+0x1c8>)
 800e38c:	781b      	ldrb	r3, [r3, #0]
 800e38e:	f003 0302 	and.w	r3, r3, #2
 800e392:	2b00      	cmp	r3, #0
 800e394:	f000 80a3 	beq.w	800e4de <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	7d5b      	ldrb	r3, [r3, #21]
 800e39c:	4618      	mov	r0, r3
 800e39e:	f7ff f85f 	bl	800d460 <tcp_alloc>
 800e3a2:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800e3a4:	697b      	ldr	r3, [r7, #20]
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d111      	bne.n	800e3ce <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	699b      	ldr	r3, [r3, #24]
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d00a      	beq.n	800e3c8 <tcp_listen_input+0xa8>
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	699b      	ldr	r3, [r3, #24]
 800e3b6:	687a      	ldr	r2, [r7, #4]
 800e3b8:	6910      	ldr	r0, [r2, #16]
 800e3ba:	f04f 32ff 	mov.w	r2, #4294967295
 800e3be:	2100      	movs	r1, #0
 800e3c0:	4798      	blx	r3
 800e3c2:	4603      	mov	r3, r0
 800e3c4:	73bb      	strb	r3, [r7, #14]
      return;
 800e3c6:	e08b      	b.n	800e4e0 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800e3c8:	23f0      	movs	r3, #240	; 0xf0
 800e3ca:	73bb      	strb	r3, [r7, #14]
      return;
 800e3cc:	e088      	b.n	800e4e0 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800e3ce:	4b50      	ldr	r3, [pc, #320]	; (800e510 <tcp_listen_input+0x1f0>)
 800e3d0:	695a      	ldr	r2, [r3, #20]
 800e3d2:	697b      	ldr	r3, [r7, #20]
 800e3d4:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800e3d6:	4b4e      	ldr	r3, [pc, #312]	; (800e510 <tcp_listen_input+0x1f0>)
 800e3d8:	691a      	ldr	r2, [r3, #16]
 800e3da:	697b      	ldr	r3, [r7, #20]
 800e3dc:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	8ada      	ldrh	r2, [r3, #22]
 800e3e2:	697b      	ldr	r3, [r7, #20]
 800e3e4:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800e3e6:	4b47      	ldr	r3, [pc, #284]	; (800e504 <tcp_listen_input+0x1e4>)
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	881b      	ldrh	r3, [r3, #0]
 800e3ec:	b29a      	uxth	r2, r3
 800e3ee:	697b      	ldr	r3, [r7, #20]
 800e3f0:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800e3f2:	697b      	ldr	r3, [r7, #20]
 800e3f4:	2203      	movs	r2, #3
 800e3f6:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800e3f8:	4b41      	ldr	r3, [pc, #260]	; (800e500 <tcp_listen_input+0x1e0>)
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	1c5a      	adds	r2, r3, #1
 800e3fe:	697b      	ldr	r3, [r7, #20]
 800e400:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800e402:	697b      	ldr	r3, [r7, #20]
 800e404:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e406:	697b      	ldr	r3, [r7, #20]
 800e408:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800e40a:	6978      	ldr	r0, [r7, #20]
 800e40c:	f7ff fa58 	bl	800d8c0 <tcp_next_iss>
 800e410:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800e412:	697b      	ldr	r3, [r7, #20]
 800e414:	693a      	ldr	r2, [r7, #16]
 800e416:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800e418:	697b      	ldr	r3, [r7, #20]
 800e41a:	693a      	ldr	r2, [r7, #16]
 800e41c:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800e41e:	697b      	ldr	r3, [r7, #20]
 800e420:	693a      	ldr	r2, [r7, #16]
 800e422:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800e424:	697b      	ldr	r3, [r7, #20]
 800e426:	693a      	ldr	r2, [r7, #16]
 800e428:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800e42a:	4b35      	ldr	r3, [pc, #212]	; (800e500 <tcp_listen_input+0x1e0>)
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	1e5a      	subs	r2, r3, #1
 800e430:	697b      	ldr	r3, [r7, #20]
 800e432:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	691a      	ldr	r2, [r3, #16]
 800e438:	697b      	ldr	r3, [r7, #20]
 800e43a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800e43c:	697b      	ldr	r3, [r7, #20]
 800e43e:	687a      	ldr	r2, [r7, #4]
 800e440:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	7a5b      	ldrb	r3, [r3, #9]
 800e446:	f003 030c 	and.w	r3, r3, #12
 800e44a:	b2da      	uxtb	r2, r3
 800e44c:	697b      	ldr	r3, [r7, #20]
 800e44e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	7a1a      	ldrb	r2, [r3, #8]
 800e454:	697b      	ldr	r3, [r7, #20]
 800e456:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800e458:	4b2e      	ldr	r3, [pc, #184]	; (800e514 <tcp_listen_input+0x1f4>)
 800e45a:	681a      	ldr	r2, [r3, #0]
 800e45c:	697b      	ldr	r3, [r7, #20]
 800e45e:	60da      	str	r2, [r3, #12]
 800e460:	4a2c      	ldr	r2, [pc, #176]	; (800e514 <tcp_listen_input+0x1f4>)
 800e462:	697b      	ldr	r3, [r7, #20]
 800e464:	6013      	str	r3, [r2, #0]
 800e466:	f003 fd29 	bl	8011ebc <tcp_timer_needed>
 800e46a:	4b2b      	ldr	r3, [pc, #172]	; (800e518 <tcp_listen_input+0x1f8>)
 800e46c:	2201      	movs	r2, #1
 800e46e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800e470:	6978      	ldr	r0, [r7, #20]
 800e472:	f001 fd8f 	bl	800ff94 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800e476:	4b23      	ldr	r3, [pc, #140]	; (800e504 <tcp_listen_input+0x1e4>)
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	89db      	ldrh	r3, [r3, #14]
 800e47c:	b29a      	uxth	r2, r3
 800e47e:	697b      	ldr	r3, [r7, #20]
 800e480:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800e484:	697b      	ldr	r3, [r7, #20]
 800e486:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e48a:	697b      	ldr	r3, [r7, #20]
 800e48c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800e490:	697b      	ldr	r3, [r7, #20]
 800e492:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800e494:	697b      	ldr	r3, [r7, #20]
 800e496:	3304      	adds	r3, #4
 800e498:	4618      	mov	r0, r3
 800e49a:	f005 f8ed 	bl	8013678 <ip4_route>
 800e49e:	4601      	mov	r1, r0
 800e4a0:	697b      	ldr	r3, [r7, #20]
 800e4a2:	3304      	adds	r3, #4
 800e4a4:	461a      	mov	r2, r3
 800e4a6:	4620      	mov	r0, r4
 800e4a8:	f7ff fa30 	bl	800d90c <tcp_eff_send_mss_netif>
 800e4ac:	4603      	mov	r3, r0
 800e4ae:	461a      	mov	r2, r3
 800e4b0:	697b      	ldr	r3, [r7, #20]
 800e4b2:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800e4b4:	2112      	movs	r1, #18
 800e4b6:	6978      	ldr	r0, [r7, #20]
 800e4b8:	f002 fc9c 	bl	8010df4 <tcp_enqueue_flags>
 800e4bc:	4603      	mov	r3, r0
 800e4be:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800e4c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d004      	beq.n	800e4d2 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800e4c8:	2100      	movs	r1, #0
 800e4ca:	6978      	ldr	r0, [r7, #20]
 800e4cc:	f7fd fede 	bl	800c28c <tcp_abandon>
      return;
 800e4d0:	e006      	b.n	800e4e0 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800e4d2:	6978      	ldr	r0, [r7, #20]
 800e4d4:	f002 fd7c 	bl	8010fd0 <tcp_output>
  return;
 800e4d8:	e001      	b.n	800e4de <tcp_listen_input+0x1be>
    return;
 800e4da:	bf00      	nop
 800e4dc:	e000      	b.n	800e4e0 <tcp_listen_input+0x1c0>
  return;
 800e4de:	bf00      	nop
}
 800e4e0:	371c      	adds	r7, #28
 800e4e2:	46bd      	mov	sp, r7
 800e4e4:	bd90      	pop	{r4, r7, pc}
 800e4e6:	bf00      	nop
 800e4e8:	20008be8 	.word	0x20008be8
 800e4ec:	08017358 	.word	0x08017358
 800e4f0:	08017550 	.word	0x08017550
 800e4f4:	080173a4 	.word	0x080173a4
 800e4f8:	20008be0 	.word	0x20008be0
 800e4fc:	20008be6 	.word	0x20008be6
 800e500:	20008bdc 	.word	0x20008bdc
 800e504:	20008bcc 	.word	0x20008bcc
 800e508:	20005644 	.word	0x20005644
 800e50c:	20005648 	.word	0x20005648
 800e510:	20005634 	.word	0x20005634
 800e514:	20008bb0 	.word	0x20008bb0
 800e518:	20008bb8 	.word	0x20008bb8

0800e51c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800e51c:	b580      	push	{r7, lr}
 800e51e:	b086      	sub	sp, #24
 800e520:	af04      	add	r7, sp, #16
 800e522:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800e524:	4b2f      	ldr	r3, [pc, #188]	; (800e5e4 <tcp_timewait_input+0xc8>)
 800e526:	781b      	ldrb	r3, [r3, #0]
 800e528:	f003 0304 	and.w	r3, r3, #4
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d153      	bne.n	800e5d8 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	2b00      	cmp	r3, #0
 800e534:	d106      	bne.n	800e544 <tcp_timewait_input+0x28>
 800e536:	4b2c      	ldr	r3, [pc, #176]	; (800e5e8 <tcp_timewait_input+0xcc>)
 800e538:	f240 22ee 	movw	r2, #750	; 0x2ee
 800e53c:	492b      	ldr	r1, [pc, #172]	; (800e5ec <tcp_timewait_input+0xd0>)
 800e53e:	482c      	ldr	r0, [pc, #176]	; (800e5f0 <tcp_timewait_input+0xd4>)
 800e540:	f006 faea 	bl	8014b18 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800e544:	4b27      	ldr	r3, [pc, #156]	; (800e5e4 <tcp_timewait_input+0xc8>)
 800e546:	781b      	ldrb	r3, [r3, #0]
 800e548:	f003 0302 	and.w	r3, r3, #2
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d02a      	beq.n	800e5a6 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800e550:	4b28      	ldr	r3, [pc, #160]	; (800e5f4 <tcp_timewait_input+0xd8>)
 800e552:	681a      	ldr	r2, [r3, #0]
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e558:	1ad3      	subs	r3, r2, r3
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	db2d      	blt.n	800e5ba <tcp_timewait_input+0x9e>
 800e55e:	4b25      	ldr	r3, [pc, #148]	; (800e5f4 <tcp_timewait_input+0xd8>)
 800e560:	681a      	ldr	r2, [r3, #0]
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e566:	6879      	ldr	r1, [r7, #4]
 800e568:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e56a:	440b      	add	r3, r1
 800e56c:	1ad3      	subs	r3, r2, r3
 800e56e:	2b00      	cmp	r3, #0
 800e570:	dc23      	bgt.n	800e5ba <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e572:	4b21      	ldr	r3, [pc, #132]	; (800e5f8 <tcp_timewait_input+0xdc>)
 800e574:	6819      	ldr	r1, [r3, #0]
 800e576:	4b21      	ldr	r3, [pc, #132]	; (800e5fc <tcp_timewait_input+0xe0>)
 800e578:	881b      	ldrh	r3, [r3, #0]
 800e57a:	461a      	mov	r2, r3
 800e57c:	4b1d      	ldr	r3, [pc, #116]	; (800e5f4 <tcp_timewait_input+0xd8>)
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e582:	4b1f      	ldr	r3, [pc, #124]	; (800e600 <tcp_timewait_input+0xe4>)
 800e584:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e586:	885b      	ldrh	r3, [r3, #2]
 800e588:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e58a:	4a1d      	ldr	r2, [pc, #116]	; (800e600 <tcp_timewait_input+0xe4>)
 800e58c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e58e:	8812      	ldrh	r2, [r2, #0]
 800e590:	b292      	uxth	r2, r2
 800e592:	9202      	str	r2, [sp, #8]
 800e594:	9301      	str	r3, [sp, #4]
 800e596:	4b1b      	ldr	r3, [pc, #108]	; (800e604 <tcp_timewait_input+0xe8>)
 800e598:	9300      	str	r3, [sp, #0]
 800e59a:	4b1b      	ldr	r3, [pc, #108]	; (800e608 <tcp_timewait_input+0xec>)
 800e59c:	4602      	mov	r2, r0
 800e59e:	6878      	ldr	r0, [r7, #4]
 800e5a0:	f003 faca 	bl	8011b38 <tcp_rst>
      return;
 800e5a4:	e01b      	b.n	800e5de <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800e5a6:	4b0f      	ldr	r3, [pc, #60]	; (800e5e4 <tcp_timewait_input+0xc8>)
 800e5a8:	781b      	ldrb	r3, [r3, #0]
 800e5aa:	f003 0301 	and.w	r3, r3, #1
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d003      	beq.n	800e5ba <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800e5b2:	4b16      	ldr	r3, [pc, #88]	; (800e60c <tcp_timewait_input+0xf0>)
 800e5b4:	681a      	ldr	r2, [r3, #0]
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800e5ba:	4b10      	ldr	r3, [pc, #64]	; (800e5fc <tcp_timewait_input+0xe0>)
 800e5bc:	881b      	ldrh	r3, [r3, #0]
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d00c      	beq.n	800e5dc <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	8b5b      	ldrh	r3, [r3, #26]
 800e5c6:	f043 0302 	orr.w	r3, r3, #2
 800e5ca:	b29a      	uxth	r2, r3
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e5d0:	6878      	ldr	r0, [r7, #4]
 800e5d2:	f002 fcfd 	bl	8010fd0 <tcp_output>
  }
  return;
 800e5d6:	e001      	b.n	800e5dc <tcp_timewait_input+0xc0>
    return;
 800e5d8:	bf00      	nop
 800e5da:	e000      	b.n	800e5de <tcp_timewait_input+0xc2>
  return;
 800e5dc:	bf00      	nop
}
 800e5de:	3708      	adds	r7, #8
 800e5e0:	46bd      	mov	sp, r7
 800e5e2:	bd80      	pop	{r7, pc}
 800e5e4:	20008be8 	.word	0x20008be8
 800e5e8:	08017358 	.word	0x08017358
 800e5ec:	08017570 	.word	0x08017570
 800e5f0:	080173a4 	.word	0x080173a4
 800e5f4:	20008bdc 	.word	0x20008bdc
 800e5f8:	20008be0 	.word	0x20008be0
 800e5fc:	20008be6 	.word	0x20008be6
 800e600:	20008bcc 	.word	0x20008bcc
 800e604:	20005644 	.word	0x20005644
 800e608:	20005648 	.word	0x20005648
 800e60c:	20008ba4 	.word	0x20008ba4

0800e610 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800e610:	b590      	push	{r4, r7, lr}
 800e612:	b08d      	sub	sp, #52	; 0x34
 800e614:	af04      	add	r7, sp, #16
 800e616:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800e618:	2300      	movs	r3, #0
 800e61a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800e61c:	2300      	movs	r3, #0
 800e61e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	2b00      	cmp	r3, #0
 800e624:	d106      	bne.n	800e634 <tcp_process+0x24>
 800e626:	4b9d      	ldr	r3, [pc, #628]	; (800e89c <tcp_process+0x28c>)
 800e628:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800e62c:	499c      	ldr	r1, [pc, #624]	; (800e8a0 <tcp_process+0x290>)
 800e62e:	489d      	ldr	r0, [pc, #628]	; (800e8a4 <tcp_process+0x294>)
 800e630:	f006 fa72 	bl	8014b18 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800e634:	4b9c      	ldr	r3, [pc, #624]	; (800e8a8 <tcp_process+0x298>)
 800e636:	781b      	ldrb	r3, [r3, #0]
 800e638:	f003 0304 	and.w	r3, r3, #4
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d04e      	beq.n	800e6de <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	7d1b      	ldrb	r3, [r3, #20]
 800e644:	2b02      	cmp	r3, #2
 800e646:	d108      	bne.n	800e65a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e64c:	4b97      	ldr	r3, [pc, #604]	; (800e8ac <tcp_process+0x29c>)
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	429a      	cmp	r2, r3
 800e652:	d123      	bne.n	800e69c <tcp_process+0x8c>
        acceptable = 1;
 800e654:	2301      	movs	r3, #1
 800e656:	76fb      	strb	r3, [r7, #27]
 800e658:	e020      	b.n	800e69c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e65e:	4b94      	ldr	r3, [pc, #592]	; (800e8b0 <tcp_process+0x2a0>)
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	429a      	cmp	r2, r3
 800e664:	d102      	bne.n	800e66c <tcp_process+0x5c>
        acceptable = 1;
 800e666:	2301      	movs	r3, #1
 800e668:	76fb      	strb	r3, [r7, #27]
 800e66a:	e017      	b.n	800e69c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e66c:	4b90      	ldr	r3, [pc, #576]	; (800e8b0 <tcp_process+0x2a0>)
 800e66e:	681a      	ldr	r2, [r3, #0]
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e674:	1ad3      	subs	r3, r2, r3
 800e676:	2b00      	cmp	r3, #0
 800e678:	db10      	blt.n	800e69c <tcp_process+0x8c>
 800e67a:	4b8d      	ldr	r3, [pc, #564]	; (800e8b0 <tcp_process+0x2a0>)
 800e67c:	681a      	ldr	r2, [r3, #0]
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e682:	6879      	ldr	r1, [r7, #4]
 800e684:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e686:	440b      	add	r3, r1
 800e688:	1ad3      	subs	r3, r2, r3
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	dc06      	bgt.n	800e69c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	8b5b      	ldrh	r3, [r3, #26]
 800e692:	f043 0302 	orr.w	r3, r3, #2
 800e696:	b29a      	uxth	r2, r3
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800e69c:	7efb      	ldrb	r3, [r7, #27]
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d01b      	beq.n	800e6da <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	7d1b      	ldrb	r3, [r3, #20]
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d106      	bne.n	800e6b8 <tcp_process+0xa8>
 800e6aa:	4b7c      	ldr	r3, [pc, #496]	; (800e89c <tcp_process+0x28c>)
 800e6ac:	f44f 724e 	mov.w	r2, #824	; 0x338
 800e6b0:	4980      	ldr	r1, [pc, #512]	; (800e8b4 <tcp_process+0x2a4>)
 800e6b2:	487c      	ldr	r0, [pc, #496]	; (800e8a4 <tcp_process+0x294>)
 800e6b4:	f006 fa30 	bl	8014b18 <iprintf>
      recv_flags |= TF_RESET;
 800e6b8:	4b7f      	ldr	r3, [pc, #508]	; (800e8b8 <tcp_process+0x2a8>)
 800e6ba:	781b      	ldrb	r3, [r3, #0]
 800e6bc:	f043 0308 	orr.w	r3, r3, #8
 800e6c0:	b2da      	uxtb	r2, r3
 800e6c2:	4b7d      	ldr	r3, [pc, #500]	; (800e8b8 <tcp_process+0x2a8>)
 800e6c4:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	8b5b      	ldrh	r3, [r3, #26]
 800e6ca:	f023 0301 	bic.w	r3, r3, #1
 800e6ce:	b29a      	uxth	r2, r3
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800e6d4:	f06f 030d 	mvn.w	r3, #13
 800e6d8:	e37a      	b.n	800edd0 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800e6da:	2300      	movs	r3, #0
 800e6dc:	e378      	b.n	800edd0 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800e6de:	4b72      	ldr	r3, [pc, #456]	; (800e8a8 <tcp_process+0x298>)
 800e6e0:	781b      	ldrb	r3, [r3, #0]
 800e6e2:	f003 0302 	and.w	r3, r3, #2
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d010      	beq.n	800e70c <tcp_process+0xfc>
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	7d1b      	ldrb	r3, [r3, #20]
 800e6ee:	2b02      	cmp	r3, #2
 800e6f0:	d00c      	beq.n	800e70c <tcp_process+0xfc>
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	7d1b      	ldrb	r3, [r3, #20]
 800e6f6:	2b03      	cmp	r3, #3
 800e6f8:	d008      	beq.n	800e70c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	8b5b      	ldrh	r3, [r3, #26]
 800e6fe:	f043 0302 	orr.w	r3, r3, #2
 800e702:	b29a      	uxth	r2, r3
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800e708:	2300      	movs	r3, #0
 800e70a:	e361      	b.n	800edd0 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	8b5b      	ldrh	r3, [r3, #26]
 800e710:	f003 0310 	and.w	r3, r3, #16
 800e714:	2b00      	cmp	r3, #0
 800e716:	d103      	bne.n	800e720 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800e718:	4b68      	ldr	r3, [pc, #416]	; (800e8bc <tcp_process+0x2ac>)
 800e71a:	681a      	ldr	r2, [r3, #0]
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	2200      	movs	r2, #0
 800e724:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	2200      	movs	r2, #0
 800e72c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800e730:	6878      	ldr	r0, [r7, #4]
 800e732:	f001 fc2f 	bl	800ff94 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	7d1b      	ldrb	r3, [r3, #20]
 800e73a:	3b02      	subs	r3, #2
 800e73c:	2b07      	cmp	r3, #7
 800e73e:	f200 8337 	bhi.w	800edb0 <tcp_process+0x7a0>
 800e742:	a201      	add	r2, pc, #4	; (adr r2, 800e748 <tcp_process+0x138>)
 800e744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e748:	0800e769 	.word	0x0800e769
 800e74c:	0800e999 	.word	0x0800e999
 800e750:	0800eb11 	.word	0x0800eb11
 800e754:	0800eb3b 	.word	0x0800eb3b
 800e758:	0800ec5f 	.word	0x0800ec5f
 800e75c:	0800eb11 	.word	0x0800eb11
 800e760:	0800eceb 	.word	0x0800eceb
 800e764:	0800ed7b 	.word	0x0800ed7b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800e768:	4b4f      	ldr	r3, [pc, #316]	; (800e8a8 <tcp_process+0x298>)
 800e76a:	781b      	ldrb	r3, [r3, #0]
 800e76c:	f003 0310 	and.w	r3, r3, #16
 800e770:	2b00      	cmp	r3, #0
 800e772:	f000 80e4 	beq.w	800e93e <tcp_process+0x32e>
 800e776:	4b4c      	ldr	r3, [pc, #304]	; (800e8a8 <tcp_process+0x298>)
 800e778:	781b      	ldrb	r3, [r3, #0]
 800e77a:	f003 0302 	and.w	r3, r3, #2
 800e77e:	2b00      	cmp	r3, #0
 800e780:	f000 80dd 	beq.w	800e93e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e788:	1c5a      	adds	r2, r3, #1
 800e78a:	4b48      	ldr	r3, [pc, #288]	; (800e8ac <tcp_process+0x29c>)
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	429a      	cmp	r2, r3
 800e790:	f040 80d5 	bne.w	800e93e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800e794:	4b46      	ldr	r3, [pc, #280]	; (800e8b0 <tcp_process+0x2a0>)
 800e796:	681b      	ldr	r3, [r3, #0]
 800e798:	1c5a      	adds	r2, r3, #1
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800e7a6:	4b41      	ldr	r3, [pc, #260]	; (800e8ac <tcp_process+0x29c>)
 800e7a8:	681a      	ldr	r2, [r3, #0]
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800e7ae:	4b44      	ldr	r3, [pc, #272]	; (800e8c0 <tcp_process+0x2b0>)
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	89db      	ldrh	r3, [r3, #14]
 800e7b4:	b29a      	uxth	r2, r3
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800e7c8:	4b39      	ldr	r3, [pc, #228]	; (800e8b0 <tcp_process+0x2a0>)
 800e7ca:	681b      	ldr	r3, [r3, #0]
 800e7cc:	1e5a      	subs	r2, r3, #1
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	2204      	movs	r2, #4
 800e7d6:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	3304      	adds	r3, #4
 800e7e0:	4618      	mov	r0, r3
 800e7e2:	f004 ff49 	bl	8013678 <ip4_route>
 800e7e6:	4601      	mov	r1, r0
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	3304      	adds	r3, #4
 800e7ec:	461a      	mov	r2, r3
 800e7ee:	4620      	mov	r0, r4
 800e7f0:	f7ff f88c 	bl	800d90c <tcp_eff_send_mss_netif>
 800e7f4:	4603      	mov	r3, r0
 800e7f6:	461a      	mov	r2, r3
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e800:	009a      	lsls	r2, r3, #2
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e806:	005b      	lsls	r3, r3, #1
 800e808:	f241 111c 	movw	r1, #4380	; 0x111c
 800e80c:	428b      	cmp	r3, r1
 800e80e:	bf38      	it	cc
 800e810:	460b      	movcc	r3, r1
 800e812:	429a      	cmp	r2, r3
 800e814:	d204      	bcs.n	800e820 <tcp_process+0x210>
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e81a:	009b      	lsls	r3, r3, #2
 800e81c:	b29b      	uxth	r3, r3
 800e81e:	e00d      	b.n	800e83c <tcp_process+0x22c>
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e824:	005b      	lsls	r3, r3, #1
 800e826:	f241 121c 	movw	r2, #4380	; 0x111c
 800e82a:	4293      	cmp	r3, r2
 800e82c:	d904      	bls.n	800e838 <tcp_process+0x228>
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e832:	005b      	lsls	r3, r3, #1
 800e834:	b29b      	uxth	r3, r3
 800e836:	e001      	b.n	800e83c <tcp_process+0x22c>
 800e838:	f241 131c 	movw	r3, #4380	; 0x111c
 800e83c:	687a      	ldr	r2, [r7, #4]
 800e83e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d106      	bne.n	800e85a <tcp_process+0x24a>
 800e84c:	4b13      	ldr	r3, [pc, #76]	; (800e89c <tcp_process+0x28c>)
 800e84e:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800e852:	491c      	ldr	r1, [pc, #112]	; (800e8c4 <tcp_process+0x2b4>)
 800e854:	4813      	ldr	r0, [pc, #76]	; (800e8a4 <tcp_process+0x294>)
 800e856:	f006 f95f 	bl	8014b18 <iprintf>
        --pcb->snd_queuelen;
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e860:	3b01      	subs	r3, #1
 800e862:	b29a      	uxth	r2, r3
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e86e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800e870:	69fb      	ldr	r3, [r7, #28]
 800e872:	2b00      	cmp	r3, #0
 800e874:	d12a      	bne.n	800e8cc <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e87a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800e87c:	69fb      	ldr	r3, [r7, #28]
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d106      	bne.n	800e890 <tcp_process+0x280>
 800e882:	4b06      	ldr	r3, [pc, #24]	; (800e89c <tcp_process+0x28c>)
 800e884:	f44f 725d 	mov.w	r2, #884	; 0x374
 800e888:	490f      	ldr	r1, [pc, #60]	; (800e8c8 <tcp_process+0x2b8>)
 800e88a:	4806      	ldr	r0, [pc, #24]	; (800e8a4 <tcp_process+0x294>)
 800e88c:	f006 f944 	bl	8014b18 <iprintf>
          pcb->unsent = rseg->next;
 800e890:	69fb      	ldr	r3, [r7, #28]
 800e892:	681a      	ldr	r2, [r3, #0]
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	66da      	str	r2, [r3, #108]	; 0x6c
 800e898:	e01c      	b.n	800e8d4 <tcp_process+0x2c4>
 800e89a:	bf00      	nop
 800e89c:	08017358 	.word	0x08017358
 800e8a0:	08017590 	.word	0x08017590
 800e8a4:	080173a4 	.word	0x080173a4
 800e8a8:	20008be8 	.word	0x20008be8
 800e8ac:	20008be0 	.word	0x20008be0
 800e8b0:	20008bdc 	.word	0x20008bdc
 800e8b4:	080175ac 	.word	0x080175ac
 800e8b8:	20008be9 	.word	0x20008be9
 800e8bc:	20008ba4 	.word	0x20008ba4
 800e8c0:	20008bcc 	.word	0x20008bcc
 800e8c4:	080175cc 	.word	0x080175cc
 800e8c8:	080175e4 	.word	0x080175e4
        } else {
          pcb->unacked = rseg->next;
 800e8cc:	69fb      	ldr	r3, [r7, #28]
 800e8ce:	681a      	ldr	r2, [r3, #0]
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800e8d4:	69f8      	ldr	r0, [r7, #28]
 800e8d6:	f7fe fc3c 	bl	800d152 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	d104      	bne.n	800e8ec <tcp_process+0x2dc>
          pcb->rtime = -1;
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e8e8:	861a      	strh	r2, [r3, #48]	; 0x30
 800e8ea:	e006      	b.n	800e8fa <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	2200      	movs	r2, #0
 800e8f0:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	2200      	movs	r2, #0
 800e8f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e900:	2b00      	cmp	r3, #0
 800e902:	d00a      	beq.n	800e91a <tcp_process+0x30a>
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e90a:	687a      	ldr	r2, [r7, #4]
 800e90c:	6910      	ldr	r0, [r2, #16]
 800e90e:	2200      	movs	r2, #0
 800e910:	6879      	ldr	r1, [r7, #4]
 800e912:	4798      	blx	r3
 800e914:	4603      	mov	r3, r0
 800e916:	76bb      	strb	r3, [r7, #26]
 800e918:	e001      	b.n	800e91e <tcp_process+0x30e>
 800e91a:	2300      	movs	r3, #0
 800e91c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800e91e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e922:	f113 0f0d 	cmn.w	r3, #13
 800e926:	d102      	bne.n	800e92e <tcp_process+0x31e>
          return ERR_ABRT;
 800e928:	f06f 030c 	mvn.w	r3, #12
 800e92c:	e250      	b.n	800edd0 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	8b5b      	ldrh	r3, [r3, #26]
 800e932:	f043 0302 	orr.w	r3, r3, #2
 800e936:	b29a      	uxth	r2, r3
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800e93c:	e23a      	b.n	800edb4 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800e93e:	4b98      	ldr	r3, [pc, #608]	; (800eba0 <tcp_process+0x590>)
 800e940:	781b      	ldrb	r3, [r3, #0]
 800e942:	f003 0310 	and.w	r3, r3, #16
 800e946:	2b00      	cmp	r3, #0
 800e948:	f000 8234 	beq.w	800edb4 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e94c:	4b95      	ldr	r3, [pc, #596]	; (800eba4 <tcp_process+0x594>)
 800e94e:	6819      	ldr	r1, [r3, #0]
 800e950:	4b95      	ldr	r3, [pc, #596]	; (800eba8 <tcp_process+0x598>)
 800e952:	881b      	ldrh	r3, [r3, #0]
 800e954:	461a      	mov	r2, r3
 800e956:	4b95      	ldr	r3, [pc, #596]	; (800ebac <tcp_process+0x59c>)
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e95c:	4b94      	ldr	r3, [pc, #592]	; (800ebb0 <tcp_process+0x5a0>)
 800e95e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e960:	885b      	ldrh	r3, [r3, #2]
 800e962:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e964:	4a92      	ldr	r2, [pc, #584]	; (800ebb0 <tcp_process+0x5a0>)
 800e966:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e968:	8812      	ldrh	r2, [r2, #0]
 800e96a:	b292      	uxth	r2, r2
 800e96c:	9202      	str	r2, [sp, #8]
 800e96e:	9301      	str	r3, [sp, #4]
 800e970:	4b90      	ldr	r3, [pc, #576]	; (800ebb4 <tcp_process+0x5a4>)
 800e972:	9300      	str	r3, [sp, #0]
 800e974:	4b90      	ldr	r3, [pc, #576]	; (800ebb8 <tcp_process+0x5a8>)
 800e976:	4602      	mov	r2, r0
 800e978:	6878      	ldr	r0, [r7, #4]
 800e97a:	f003 f8dd 	bl	8011b38 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e984:	2b05      	cmp	r3, #5
 800e986:	f200 8215 	bhi.w	800edb4 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	2200      	movs	r2, #0
 800e98e:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800e990:	6878      	ldr	r0, [r7, #4]
 800e992:	f002 fea7 	bl	80116e4 <tcp_rexmit_rto>
      break;
 800e996:	e20d      	b.n	800edb4 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800e998:	4b81      	ldr	r3, [pc, #516]	; (800eba0 <tcp_process+0x590>)
 800e99a:	781b      	ldrb	r3, [r3, #0]
 800e99c:	f003 0310 	and.w	r3, r3, #16
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	f000 80a1 	beq.w	800eae8 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e9a6:	4b7f      	ldr	r3, [pc, #508]	; (800eba4 <tcp_process+0x594>)
 800e9a8:	681a      	ldr	r2, [r3, #0]
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e9ae:	1ad3      	subs	r3, r2, r3
 800e9b0:	3b01      	subs	r3, #1
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	db7e      	blt.n	800eab4 <tcp_process+0x4a4>
 800e9b6:	4b7b      	ldr	r3, [pc, #492]	; (800eba4 <tcp_process+0x594>)
 800e9b8:	681a      	ldr	r2, [r3, #0]
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e9be:	1ad3      	subs	r3, r2, r3
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	dc77      	bgt.n	800eab4 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	2204      	movs	r2, #4
 800e9c8:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	d102      	bne.n	800e9d8 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800e9d2:	23fa      	movs	r3, #250	; 0xfa
 800e9d4:	76bb      	strb	r3, [r7, #26]
 800e9d6:	e01d      	b.n	800ea14 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e9dc:	699b      	ldr	r3, [r3, #24]
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d106      	bne.n	800e9f0 <tcp_process+0x3e0>
 800e9e2:	4b76      	ldr	r3, [pc, #472]	; (800ebbc <tcp_process+0x5ac>)
 800e9e4:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800e9e8:	4975      	ldr	r1, [pc, #468]	; (800ebc0 <tcp_process+0x5b0>)
 800e9ea:	4876      	ldr	r0, [pc, #472]	; (800ebc4 <tcp_process+0x5b4>)
 800e9ec:	f006 f894 	bl	8014b18 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e9f4:	699b      	ldr	r3, [r3, #24]
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d00a      	beq.n	800ea10 <tcp_process+0x400>
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e9fe:	699b      	ldr	r3, [r3, #24]
 800ea00:	687a      	ldr	r2, [r7, #4]
 800ea02:	6910      	ldr	r0, [r2, #16]
 800ea04:	2200      	movs	r2, #0
 800ea06:	6879      	ldr	r1, [r7, #4]
 800ea08:	4798      	blx	r3
 800ea0a:	4603      	mov	r3, r0
 800ea0c:	76bb      	strb	r3, [r7, #26]
 800ea0e:	e001      	b.n	800ea14 <tcp_process+0x404>
 800ea10:	23f0      	movs	r3, #240	; 0xf0
 800ea12:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800ea14:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d00a      	beq.n	800ea32 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800ea1c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ea20:	f113 0f0d 	cmn.w	r3, #13
 800ea24:	d002      	beq.n	800ea2c <tcp_process+0x41c>
              tcp_abort(pcb);
 800ea26:	6878      	ldr	r0, [r7, #4]
 800ea28:	f7fd fcee 	bl	800c408 <tcp_abort>
            }
            return ERR_ABRT;
 800ea2c:	f06f 030c 	mvn.w	r3, #12
 800ea30:	e1ce      	b.n	800edd0 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800ea32:	6878      	ldr	r0, [r7, #4]
 800ea34:	f000 fae0 	bl	800eff8 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800ea38:	4b63      	ldr	r3, [pc, #396]	; (800ebc8 <tcp_process+0x5b8>)
 800ea3a:	881b      	ldrh	r3, [r3, #0]
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d005      	beq.n	800ea4c <tcp_process+0x43c>
            recv_acked--;
 800ea40:	4b61      	ldr	r3, [pc, #388]	; (800ebc8 <tcp_process+0x5b8>)
 800ea42:	881b      	ldrh	r3, [r3, #0]
 800ea44:	3b01      	subs	r3, #1
 800ea46:	b29a      	uxth	r2, r3
 800ea48:	4b5f      	ldr	r3, [pc, #380]	; (800ebc8 <tcp_process+0x5b8>)
 800ea4a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ea50:	009a      	lsls	r2, r3, #2
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ea56:	005b      	lsls	r3, r3, #1
 800ea58:	f241 111c 	movw	r1, #4380	; 0x111c
 800ea5c:	428b      	cmp	r3, r1
 800ea5e:	bf38      	it	cc
 800ea60:	460b      	movcc	r3, r1
 800ea62:	429a      	cmp	r2, r3
 800ea64:	d204      	bcs.n	800ea70 <tcp_process+0x460>
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ea6a:	009b      	lsls	r3, r3, #2
 800ea6c:	b29b      	uxth	r3, r3
 800ea6e:	e00d      	b.n	800ea8c <tcp_process+0x47c>
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ea74:	005b      	lsls	r3, r3, #1
 800ea76:	f241 121c 	movw	r2, #4380	; 0x111c
 800ea7a:	4293      	cmp	r3, r2
 800ea7c:	d904      	bls.n	800ea88 <tcp_process+0x478>
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ea82:	005b      	lsls	r3, r3, #1
 800ea84:	b29b      	uxth	r3, r3
 800ea86:	e001      	b.n	800ea8c <tcp_process+0x47c>
 800ea88:	f241 131c 	movw	r3, #4380	; 0x111c
 800ea8c:	687a      	ldr	r2, [r7, #4]
 800ea8e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800ea92:	4b4e      	ldr	r3, [pc, #312]	; (800ebcc <tcp_process+0x5bc>)
 800ea94:	781b      	ldrb	r3, [r3, #0]
 800ea96:	f003 0320 	and.w	r3, r3, #32
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	d037      	beq.n	800eb0e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	8b5b      	ldrh	r3, [r3, #26]
 800eaa2:	f043 0302 	orr.w	r3, r3, #2
 800eaa6:	b29a      	uxth	r2, r3
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	2207      	movs	r2, #7
 800eab0:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800eab2:	e02c      	b.n	800eb0e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800eab4:	4b3b      	ldr	r3, [pc, #236]	; (800eba4 <tcp_process+0x594>)
 800eab6:	6819      	ldr	r1, [r3, #0]
 800eab8:	4b3b      	ldr	r3, [pc, #236]	; (800eba8 <tcp_process+0x598>)
 800eaba:	881b      	ldrh	r3, [r3, #0]
 800eabc:	461a      	mov	r2, r3
 800eabe:	4b3b      	ldr	r3, [pc, #236]	; (800ebac <tcp_process+0x59c>)
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800eac4:	4b3a      	ldr	r3, [pc, #232]	; (800ebb0 <tcp_process+0x5a0>)
 800eac6:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800eac8:	885b      	ldrh	r3, [r3, #2]
 800eaca:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800eacc:	4a38      	ldr	r2, [pc, #224]	; (800ebb0 <tcp_process+0x5a0>)
 800eace:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ead0:	8812      	ldrh	r2, [r2, #0]
 800ead2:	b292      	uxth	r2, r2
 800ead4:	9202      	str	r2, [sp, #8]
 800ead6:	9301      	str	r3, [sp, #4]
 800ead8:	4b36      	ldr	r3, [pc, #216]	; (800ebb4 <tcp_process+0x5a4>)
 800eada:	9300      	str	r3, [sp, #0]
 800eadc:	4b36      	ldr	r3, [pc, #216]	; (800ebb8 <tcp_process+0x5a8>)
 800eade:	4602      	mov	r2, r0
 800eae0:	6878      	ldr	r0, [r7, #4]
 800eae2:	f003 f829 	bl	8011b38 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800eae6:	e167      	b.n	800edb8 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800eae8:	4b2d      	ldr	r3, [pc, #180]	; (800eba0 <tcp_process+0x590>)
 800eaea:	781b      	ldrb	r3, [r3, #0]
 800eaec:	f003 0302 	and.w	r3, r3, #2
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	f000 8161 	beq.w	800edb8 <tcp_process+0x7a8>
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eafa:	1e5a      	subs	r2, r3, #1
 800eafc:	4b2b      	ldr	r3, [pc, #172]	; (800ebac <tcp_process+0x59c>)
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	429a      	cmp	r2, r3
 800eb02:	f040 8159 	bne.w	800edb8 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800eb06:	6878      	ldr	r0, [r7, #4]
 800eb08:	f002 fe0e 	bl	8011728 <tcp_rexmit>
      break;
 800eb0c:	e154      	b.n	800edb8 <tcp_process+0x7a8>
 800eb0e:	e153      	b.n	800edb8 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800eb10:	6878      	ldr	r0, [r7, #4]
 800eb12:	f000 fa71 	bl	800eff8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800eb16:	4b2d      	ldr	r3, [pc, #180]	; (800ebcc <tcp_process+0x5bc>)
 800eb18:	781b      	ldrb	r3, [r3, #0]
 800eb1a:	f003 0320 	and.w	r3, r3, #32
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	f000 814c 	beq.w	800edbc <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	8b5b      	ldrh	r3, [r3, #26]
 800eb28:	f043 0302 	orr.w	r3, r3, #2
 800eb2c:	b29a      	uxth	r2, r3
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	2207      	movs	r2, #7
 800eb36:	751a      	strb	r2, [r3, #20]
      }
      break;
 800eb38:	e140      	b.n	800edbc <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800eb3a:	6878      	ldr	r0, [r7, #4]
 800eb3c:	f000 fa5c 	bl	800eff8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800eb40:	4b22      	ldr	r3, [pc, #136]	; (800ebcc <tcp_process+0x5bc>)
 800eb42:	781b      	ldrb	r3, [r3, #0]
 800eb44:	f003 0320 	and.w	r3, r3, #32
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	d071      	beq.n	800ec30 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800eb4c:	4b14      	ldr	r3, [pc, #80]	; (800eba0 <tcp_process+0x590>)
 800eb4e:	781b      	ldrb	r3, [r3, #0]
 800eb50:	f003 0310 	and.w	r3, r3, #16
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d060      	beq.n	800ec1a <tcp_process+0x60a>
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800eb5c:	4b11      	ldr	r3, [pc, #68]	; (800eba4 <tcp_process+0x594>)
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	429a      	cmp	r2, r3
 800eb62:	d15a      	bne.n	800ec1a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d156      	bne.n	800ec1a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	8b5b      	ldrh	r3, [r3, #26]
 800eb70:	f043 0302 	orr.w	r3, r3, #2
 800eb74:	b29a      	uxth	r2, r3
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800eb7a:	6878      	ldr	r0, [r7, #4]
 800eb7c:	f7fe fdbc 	bl	800d6f8 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800eb80:	4b13      	ldr	r3, [pc, #76]	; (800ebd0 <tcp_process+0x5c0>)
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	687a      	ldr	r2, [r7, #4]
 800eb86:	429a      	cmp	r2, r3
 800eb88:	d105      	bne.n	800eb96 <tcp_process+0x586>
 800eb8a:	4b11      	ldr	r3, [pc, #68]	; (800ebd0 <tcp_process+0x5c0>)
 800eb8c:	681b      	ldr	r3, [r3, #0]
 800eb8e:	68db      	ldr	r3, [r3, #12]
 800eb90:	4a0f      	ldr	r2, [pc, #60]	; (800ebd0 <tcp_process+0x5c0>)
 800eb92:	6013      	str	r3, [r2, #0]
 800eb94:	e02e      	b.n	800ebf4 <tcp_process+0x5e4>
 800eb96:	4b0e      	ldr	r3, [pc, #56]	; (800ebd0 <tcp_process+0x5c0>)
 800eb98:	681b      	ldr	r3, [r3, #0]
 800eb9a:	617b      	str	r3, [r7, #20]
 800eb9c:	e027      	b.n	800ebee <tcp_process+0x5de>
 800eb9e:	bf00      	nop
 800eba0:	20008be8 	.word	0x20008be8
 800eba4:	20008be0 	.word	0x20008be0
 800eba8:	20008be6 	.word	0x20008be6
 800ebac:	20008bdc 	.word	0x20008bdc
 800ebb0:	20008bcc 	.word	0x20008bcc
 800ebb4:	20005644 	.word	0x20005644
 800ebb8:	20005648 	.word	0x20005648
 800ebbc:	08017358 	.word	0x08017358
 800ebc0:	080175f8 	.word	0x080175f8
 800ebc4:	080173a4 	.word	0x080173a4
 800ebc8:	20008be4 	.word	0x20008be4
 800ebcc:	20008be9 	.word	0x20008be9
 800ebd0:	20008bb0 	.word	0x20008bb0
 800ebd4:	697b      	ldr	r3, [r7, #20]
 800ebd6:	68db      	ldr	r3, [r3, #12]
 800ebd8:	687a      	ldr	r2, [r7, #4]
 800ebda:	429a      	cmp	r2, r3
 800ebdc:	d104      	bne.n	800ebe8 <tcp_process+0x5d8>
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	68da      	ldr	r2, [r3, #12]
 800ebe2:	697b      	ldr	r3, [r7, #20]
 800ebe4:	60da      	str	r2, [r3, #12]
 800ebe6:	e005      	b.n	800ebf4 <tcp_process+0x5e4>
 800ebe8:	697b      	ldr	r3, [r7, #20]
 800ebea:	68db      	ldr	r3, [r3, #12]
 800ebec:	617b      	str	r3, [r7, #20]
 800ebee:	697b      	ldr	r3, [r7, #20]
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	d1ef      	bne.n	800ebd4 <tcp_process+0x5c4>
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	2200      	movs	r2, #0
 800ebf8:	60da      	str	r2, [r3, #12]
 800ebfa:	4b77      	ldr	r3, [pc, #476]	; (800edd8 <tcp_process+0x7c8>)
 800ebfc:	2201      	movs	r2, #1
 800ebfe:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	220a      	movs	r2, #10
 800ec04:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800ec06:	4b75      	ldr	r3, [pc, #468]	; (800eddc <tcp_process+0x7cc>)
 800ec08:	681a      	ldr	r2, [r3, #0]
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	60da      	str	r2, [r3, #12]
 800ec0e:	4a73      	ldr	r2, [pc, #460]	; (800eddc <tcp_process+0x7cc>)
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	6013      	str	r3, [r2, #0]
 800ec14:	f003 f952 	bl	8011ebc <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800ec18:	e0d2      	b.n	800edc0 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	8b5b      	ldrh	r3, [r3, #26]
 800ec1e:	f043 0302 	orr.w	r3, r3, #2
 800ec22:	b29a      	uxth	r2, r3
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	2208      	movs	r2, #8
 800ec2c:	751a      	strb	r2, [r3, #20]
      break;
 800ec2e:	e0c7      	b.n	800edc0 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ec30:	4b6b      	ldr	r3, [pc, #428]	; (800ede0 <tcp_process+0x7d0>)
 800ec32:	781b      	ldrb	r3, [r3, #0]
 800ec34:	f003 0310 	and.w	r3, r3, #16
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	f000 80c1 	beq.w	800edc0 <tcp_process+0x7b0>
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ec42:	4b68      	ldr	r3, [pc, #416]	; (800ede4 <tcp_process+0x7d4>)
 800ec44:	681b      	ldr	r3, [r3, #0]
 800ec46:	429a      	cmp	r2, r3
 800ec48:	f040 80ba 	bne.w	800edc0 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	f040 80b5 	bne.w	800edc0 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	2206      	movs	r2, #6
 800ec5a:	751a      	strb	r2, [r3, #20]
      break;
 800ec5c:	e0b0      	b.n	800edc0 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800ec5e:	6878      	ldr	r0, [r7, #4]
 800ec60:	f000 f9ca 	bl	800eff8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800ec64:	4b60      	ldr	r3, [pc, #384]	; (800ede8 <tcp_process+0x7d8>)
 800ec66:	781b      	ldrb	r3, [r3, #0]
 800ec68:	f003 0320 	and.w	r3, r3, #32
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	f000 80a9 	beq.w	800edc4 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	8b5b      	ldrh	r3, [r3, #26]
 800ec76:	f043 0302 	orr.w	r3, r3, #2
 800ec7a:	b29a      	uxth	r2, r3
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800ec80:	6878      	ldr	r0, [r7, #4]
 800ec82:	f7fe fd39 	bl	800d6f8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800ec86:	4b59      	ldr	r3, [pc, #356]	; (800edec <tcp_process+0x7dc>)
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	687a      	ldr	r2, [r7, #4]
 800ec8c:	429a      	cmp	r2, r3
 800ec8e:	d105      	bne.n	800ec9c <tcp_process+0x68c>
 800ec90:	4b56      	ldr	r3, [pc, #344]	; (800edec <tcp_process+0x7dc>)
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	68db      	ldr	r3, [r3, #12]
 800ec96:	4a55      	ldr	r2, [pc, #340]	; (800edec <tcp_process+0x7dc>)
 800ec98:	6013      	str	r3, [r2, #0]
 800ec9a:	e013      	b.n	800ecc4 <tcp_process+0x6b4>
 800ec9c:	4b53      	ldr	r3, [pc, #332]	; (800edec <tcp_process+0x7dc>)
 800ec9e:	681b      	ldr	r3, [r3, #0]
 800eca0:	613b      	str	r3, [r7, #16]
 800eca2:	e00c      	b.n	800ecbe <tcp_process+0x6ae>
 800eca4:	693b      	ldr	r3, [r7, #16]
 800eca6:	68db      	ldr	r3, [r3, #12]
 800eca8:	687a      	ldr	r2, [r7, #4]
 800ecaa:	429a      	cmp	r2, r3
 800ecac:	d104      	bne.n	800ecb8 <tcp_process+0x6a8>
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	68da      	ldr	r2, [r3, #12]
 800ecb2:	693b      	ldr	r3, [r7, #16]
 800ecb4:	60da      	str	r2, [r3, #12]
 800ecb6:	e005      	b.n	800ecc4 <tcp_process+0x6b4>
 800ecb8:	693b      	ldr	r3, [r7, #16]
 800ecba:	68db      	ldr	r3, [r3, #12]
 800ecbc:	613b      	str	r3, [r7, #16]
 800ecbe:	693b      	ldr	r3, [r7, #16]
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	d1ef      	bne.n	800eca4 <tcp_process+0x694>
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	2200      	movs	r2, #0
 800ecc8:	60da      	str	r2, [r3, #12]
 800ecca:	4b43      	ldr	r3, [pc, #268]	; (800edd8 <tcp_process+0x7c8>)
 800eccc:	2201      	movs	r2, #1
 800ecce:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	220a      	movs	r2, #10
 800ecd4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800ecd6:	4b41      	ldr	r3, [pc, #260]	; (800eddc <tcp_process+0x7cc>)
 800ecd8:	681a      	ldr	r2, [r3, #0]
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	60da      	str	r2, [r3, #12]
 800ecde:	4a3f      	ldr	r2, [pc, #252]	; (800eddc <tcp_process+0x7cc>)
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	6013      	str	r3, [r2, #0]
 800ece4:	f003 f8ea 	bl	8011ebc <tcp_timer_needed>
      }
      break;
 800ece8:	e06c      	b.n	800edc4 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800ecea:	6878      	ldr	r0, [r7, #4]
 800ecec:	f000 f984 	bl	800eff8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800ecf0:	4b3b      	ldr	r3, [pc, #236]	; (800ede0 <tcp_process+0x7d0>)
 800ecf2:	781b      	ldrb	r3, [r3, #0]
 800ecf4:	f003 0310 	and.w	r3, r3, #16
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d065      	beq.n	800edc8 <tcp_process+0x7b8>
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ed00:	4b38      	ldr	r3, [pc, #224]	; (800ede4 <tcp_process+0x7d4>)
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	429a      	cmp	r2, r3
 800ed06:	d15f      	bne.n	800edc8 <tcp_process+0x7b8>
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	d15b      	bne.n	800edc8 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800ed10:	6878      	ldr	r0, [r7, #4]
 800ed12:	f7fe fcf1 	bl	800d6f8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800ed16:	4b35      	ldr	r3, [pc, #212]	; (800edec <tcp_process+0x7dc>)
 800ed18:	681b      	ldr	r3, [r3, #0]
 800ed1a:	687a      	ldr	r2, [r7, #4]
 800ed1c:	429a      	cmp	r2, r3
 800ed1e:	d105      	bne.n	800ed2c <tcp_process+0x71c>
 800ed20:	4b32      	ldr	r3, [pc, #200]	; (800edec <tcp_process+0x7dc>)
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	68db      	ldr	r3, [r3, #12]
 800ed26:	4a31      	ldr	r2, [pc, #196]	; (800edec <tcp_process+0x7dc>)
 800ed28:	6013      	str	r3, [r2, #0]
 800ed2a:	e013      	b.n	800ed54 <tcp_process+0x744>
 800ed2c:	4b2f      	ldr	r3, [pc, #188]	; (800edec <tcp_process+0x7dc>)
 800ed2e:	681b      	ldr	r3, [r3, #0]
 800ed30:	60fb      	str	r3, [r7, #12]
 800ed32:	e00c      	b.n	800ed4e <tcp_process+0x73e>
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	68db      	ldr	r3, [r3, #12]
 800ed38:	687a      	ldr	r2, [r7, #4]
 800ed3a:	429a      	cmp	r2, r3
 800ed3c:	d104      	bne.n	800ed48 <tcp_process+0x738>
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	68da      	ldr	r2, [r3, #12]
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	60da      	str	r2, [r3, #12]
 800ed46:	e005      	b.n	800ed54 <tcp_process+0x744>
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	68db      	ldr	r3, [r3, #12]
 800ed4c:	60fb      	str	r3, [r7, #12]
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d1ef      	bne.n	800ed34 <tcp_process+0x724>
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	2200      	movs	r2, #0
 800ed58:	60da      	str	r2, [r3, #12]
 800ed5a:	4b1f      	ldr	r3, [pc, #124]	; (800edd8 <tcp_process+0x7c8>)
 800ed5c:	2201      	movs	r2, #1
 800ed5e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	220a      	movs	r2, #10
 800ed64:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800ed66:	4b1d      	ldr	r3, [pc, #116]	; (800eddc <tcp_process+0x7cc>)
 800ed68:	681a      	ldr	r2, [r3, #0]
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	60da      	str	r2, [r3, #12]
 800ed6e:	4a1b      	ldr	r2, [pc, #108]	; (800eddc <tcp_process+0x7cc>)
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	6013      	str	r3, [r2, #0]
 800ed74:	f003 f8a2 	bl	8011ebc <tcp_timer_needed>
      }
      break;
 800ed78:	e026      	b.n	800edc8 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800ed7a:	6878      	ldr	r0, [r7, #4]
 800ed7c:	f000 f93c 	bl	800eff8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800ed80:	4b17      	ldr	r3, [pc, #92]	; (800ede0 <tcp_process+0x7d0>)
 800ed82:	781b      	ldrb	r3, [r3, #0]
 800ed84:	f003 0310 	and.w	r3, r3, #16
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d01f      	beq.n	800edcc <tcp_process+0x7bc>
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ed90:	4b14      	ldr	r3, [pc, #80]	; (800ede4 <tcp_process+0x7d4>)
 800ed92:	681b      	ldr	r3, [r3, #0]
 800ed94:	429a      	cmp	r2, r3
 800ed96:	d119      	bne.n	800edcc <tcp_process+0x7bc>
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d115      	bne.n	800edcc <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800eda0:	4b11      	ldr	r3, [pc, #68]	; (800ede8 <tcp_process+0x7d8>)
 800eda2:	781b      	ldrb	r3, [r3, #0]
 800eda4:	f043 0310 	orr.w	r3, r3, #16
 800eda8:	b2da      	uxtb	r2, r3
 800edaa:	4b0f      	ldr	r3, [pc, #60]	; (800ede8 <tcp_process+0x7d8>)
 800edac:	701a      	strb	r2, [r3, #0]
      }
      break;
 800edae:	e00d      	b.n	800edcc <tcp_process+0x7bc>
    default:
      break;
 800edb0:	bf00      	nop
 800edb2:	e00c      	b.n	800edce <tcp_process+0x7be>
      break;
 800edb4:	bf00      	nop
 800edb6:	e00a      	b.n	800edce <tcp_process+0x7be>
      break;
 800edb8:	bf00      	nop
 800edba:	e008      	b.n	800edce <tcp_process+0x7be>
      break;
 800edbc:	bf00      	nop
 800edbe:	e006      	b.n	800edce <tcp_process+0x7be>
      break;
 800edc0:	bf00      	nop
 800edc2:	e004      	b.n	800edce <tcp_process+0x7be>
      break;
 800edc4:	bf00      	nop
 800edc6:	e002      	b.n	800edce <tcp_process+0x7be>
      break;
 800edc8:	bf00      	nop
 800edca:	e000      	b.n	800edce <tcp_process+0x7be>
      break;
 800edcc:	bf00      	nop
  }
  return ERR_OK;
 800edce:	2300      	movs	r3, #0
}
 800edd0:	4618      	mov	r0, r3
 800edd2:	3724      	adds	r7, #36	; 0x24
 800edd4:	46bd      	mov	sp, r7
 800edd6:	bd90      	pop	{r4, r7, pc}
 800edd8:	20008bb8 	.word	0x20008bb8
 800eddc:	20008bb4 	.word	0x20008bb4
 800ede0:	20008be8 	.word	0x20008be8
 800ede4:	20008be0 	.word	0x20008be0
 800ede8:	20008be9 	.word	0x20008be9
 800edec:	20008bb0 	.word	0x20008bb0

0800edf0 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800edf0:	b590      	push	{r4, r7, lr}
 800edf2:	b085      	sub	sp, #20
 800edf4:	af00      	add	r7, sp, #0
 800edf6:	6078      	str	r0, [r7, #4]
 800edf8:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	d106      	bne.n	800ee0e <tcp_oos_insert_segment+0x1e>
 800ee00:	4b3b      	ldr	r3, [pc, #236]	; (800eef0 <tcp_oos_insert_segment+0x100>)
 800ee02:	f240 421f 	movw	r2, #1055	; 0x41f
 800ee06:	493b      	ldr	r1, [pc, #236]	; (800eef4 <tcp_oos_insert_segment+0x104>)
 800ee08:	483b      	ldr	r0, [pc, #236]	; (800eef8 <tcp_oos_insert_segment+0x108>)
 800ee0a:	f005 fe85 	bl	8014b18 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	68db      	ldr	r3, [r3, #12]
 800ee12:	899b      	ldrh	r3, [r3, #12]
 800ee14:	b29b      	uxth	r3, r3
 800ee16:	4618      	mov	r0, r3
 800ee18:	f7fb fa10 	bl	800a23c <lwip_htons>
 800ee1c:	4603      	mov	r3, r0
 800ee1e:	b2db      	uxtb	r3, r3
 800ee20:	f003 0301 	and.w	r3, r3, #1
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d028      	beq.n	800ee7a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800ee28:	6838      	ldr	r0, [r7, #0]
 800ee2a:	f7fe f97d 	bl	800d128 <tcp_segs_free>
    next = NULL;
 800ee2e:	2300      	movs	r3, #0
 800ee30:	603b      	str	r3, [r7, #0]
 800ee32:	e056      	b.n	800eee2 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800ee34:	683b      	ldr	r3, [r7, #0]
 800ee36:	68db      	ldr	r3, [r3, #12]
 800ee38:	899b      	ldrh	r3, [r3, #12]
 800ee3a:	b29b      	uxth	r3, r3
 800ee3c:	4618      	mov	r0, r3
 800ee3e:	f7fb f9fd 	bl	800a23c <lwip_htons>
 800ee42:	4603      	mov	r3, r0
 800ee44:	b2db      	uxtb	r3, r3
 800ee46:	f003 0301 	and.w	r3, r3, #1
 800ee4a:	2b00      	cmp	r3, #0
 800ee4c:	d00d      	beq.n	800ee6a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	68db      	ldr	r3, [r3, #12]
 800ee52:	899b      	ldrh	r3, [r3, #12]
 800ee54:	b29c      	uxth	r4, r3
 800ee56:	2001      	movs	r0, #1
 800ee58:	f7fb f9f0 	bl	800a23c <lwip_htons>
 800ee5c:	4603      	mov	r3, r0
 800ee5e:	461a      	mov	r2, r3
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	68db      	ldr	r3, [r3, #12]
 800ee64:	4322      	orrs	r2, r4
 800ee66:	b292      	uxth	r2, r2
 800ee68:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800ee6a:	683b      	ldr	r3, [r7, #0]
 800ee6c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800ee6e:	683b      	ldr	r3, [r7, #0]
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800ee74:	68f8      	ldr	r0, [r7, #12]
 800ee76:	f7fe f96c 	bl	800d152 <tcp_seg_free>
    while (next &&
 800ee7a:	683b      	ldr	r3, [r7, #0]
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d00e      	beq.n	800ee9e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	891b      	ldrh	r3, [r3, #8]
 800ee84:	461a      	mov	r2, r3
 800ee86:	4b1d      	ldr	r3, [pc, #116]	; (800eefc <tcp_oos_insert_segment+0x10c>)
 800ee88:	681b      	ldr	r3, [r3, #0]
 800ee8a:	441a      	add	r2, r3
 800ee8c:	683b      	ldr	r3, [r7, #0]
 800ee8e:	68db      	ldr	r3, [r3, #12]
 800ee90:	685b      	ldr	r3, [r3, #4]
 800ee92:	6839      	ldr	r1, [r7, #0]
 800ee94:	8909      	ldrh	r1, [r1, #8]
 800ee96:	440b      	add	r3, r1
 800ee98:	1ad3      	subs	r3, r2, r3
    while (next &&
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	daca      	bge.n	800ee34 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800ee9e:	683b      	ldr	r3, [r7, #0]
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	d01e      	beq.n	800eee2 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	891b      	ldrh	r3, [r3, #8]
 800eea8:	461a      	mov	r2, r3
 800eeaa:	4b14      	ldr	r3, [pc, #80]	; (800eefc <tcp_oos_insert_segment+0x10c>)
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	441a      	add	r2, r3
 800eeb0:	683b      	ldr	r3, [r7, #0]
 800eeb2:	68db      	ldr	r3, [r3, #12]
 800eeb4:	685b      	ldr	r3, [r3, #4]
 800eeb6:	1ad3      	subs	r3, r2, r3
    if (next &&
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	dd12      	ble.n	800eee2 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800eebc:	683b      	ldr	r3, [r7, #0]
 800eebe:	68db      	ldr	r3, [r3, #12]
 800eec0:	685b      	ldr	r3, [r3, #4]
 800eec2:	b29a      	uxth	r2, r3
 800eec4:	4b0d      	ldr	r3, [pc, #52]	; (800eefc <tcp_oos_insert_segment+0x10c>)
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	b29b      	uxth	r3, r3
 800eeca:	1ad3      	subs	r3, r2, r3
 800eecc:	b29a      	uxth	r2, r3
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	685a      	ldr	r2, [r3, #4]
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	891b      	ldrh	r3, [r3, #8]
 800eeda:	4619      	mov	r1, r3
 800eedc:	4610      	mov	r0, r2
 800eede:	f7fc fb85 	bl	800b5ec <pbuf_realloc>
    }
  }
  cseg->next = next;
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	683a      	ldr	r2, [r7, #0]
 800eee6:	601a      	str	r2, [r3, #0]
}
 800eee8:	bf00      	nop
 800eeea:	3714      	adds	r7, #20
 800eeec:	46bd      	mov	sp, r7
 800eeee:	bd90      	pop	{r4, r7, pc}
 800eef0:	08017358 	.word	0x08017358
 800eef4:	08017618 	.word	0x08017618
 800eef8:	080173a4 	.word	0x080173a4
 800eefc:	20008bdc 	.word	0x20008bdc

0800ef00 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800ef00:	b5b0      	push	{r4, r5, r7, lr}
 800ef02:	b086      	sub	sp, #24
 800ef04:	af00      	add	r7, sp, #0
 800ef06:	60f8      	str	r0, [r7, #12]
 800ef08:	60b9      	str	r1, [r7, #8]
 800ef0a:	607a      	str	r2, [r7, #4]
 800ef0c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800ef0e:	e03e      	b.n	800ef8e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800ef10:	68bb      	ldr	r3, [r7, #8]
 800ef12:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800ef14:	68bb      	ldr	r3, [r7, #8]
 800ef16:	681b      	ldr	r3, [r3, #0]
 800ef18:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800ef1a:	697b      	ldr	r3, [r7, #20]
 800ef1c:	685b      	ldr	r3, [r3, #4]
 800ef1e:	4618      	mov	r0, r3
 800ef20:	f7fc fd72 	bl	800ba08 <pbuf_clen>
 800ef24:	4603      	mov	r3, r0
 800ef26:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800ef28:	68fb      	ldr	r3, [r7, #12]
 800ef2a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ef2e:	8a7a      	ldrh	r2, [r7, #18]
 800ef30:	429a      	cmp	r2, r3
 800ef32:	d906      	bls.n	800ef42 <tcp_free_acked_segments+0x42>
 800ef34:	4b2a      	ldr	r3, [pc, #168]	; (800efe0 <tcp_free_acked_segments+0xe0>)
 800ef36:	f240 4257 	movw	r2, #1111	; 0x457
 800ef3a:	492a      	ldr	r1, [pc, #168]	; (800efe4 <tcp_free_acked_segments+0xe4>)
 800ef3c:	482a      	ldr	r0, [pc, #168]	; (800efe8 <tcp_free_acked_segments+0xe8>)
 800ef3e:	f005 fdeb 	bl	8014b18 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800ef42:	68fb      	ldr	r3, [r7, #12]
 800ef44:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800ef48:	8a7b      	ldrh	r3, [r7, #18]
 800ef4a:	1ad3      	subs	r3, r2, r3
 800ef4c:	b29a      	uxth	r2, r3
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800ef54:	697b      	ldr	r3, [r7, #20]
 800ef56:	891a      	ldrh	r2, [r3, #8]
 800ef58:	4b24      	ldr	r3, [pc, #144]	; (800efec <tcp_free_acked_segments+0xec>)
 800ef5a:	881b      	ldrh	r3, [r3, #0]
 800ef5c:	4413      	add	r3, r2
 800ef5e:	b29a      	uxth	r2, r3
 800ef60:	4b22      	ldr	r3, [pc, #136]	; (800efec <tcp_free_acked_segments+0xec>)
 800ef62:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800ef64:	6978      	ldr	r0, [r7, #20]
 800ef66:	f7fe f8f4 	bl	800d152 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800ef6a:	68fb      	ldr	r3, [r7, #12]
 800ef6c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d00c      	beq.n	800ef8e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800ef74:	68bb      	ldr	r3, [r7, #8]
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d109      	bne.n	800ef8e <tcp_free_acked_segments+0x8e>
 800ef7a:	683b      	ldr	r3, [r7, #0]
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d106      	bne.n	800ef8e <tcp_free_acked_segments+0x8e>
 800ef80:	4b17      	ldr	r3, [pc, #92]	; (800efe0 <tcp_free_acked_segments+0xe0>)
 800ef82:	f240 4261 	movw	r2, #1121	; 0x461
 800ef86:	491a      	ldr	r1, [pc, #104]	; (800eff0 <tcp_free_acked_segments+0xf0>)
 800ef88:	4817      	ldr	r0, [pc, #92]	; (800efe8 <tcp_free_acked_segments+0xe8>)
 800ef8a:	f005 fdc5 	bl	8014b18 <iprintf>
  while (seg_list != NULL &&
 800ef8e:	68bb      	ldr	r3, [r7, #8]
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d020      	beq.n	800efd6 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800ef94:	68bb      	ldr	r3, [r7, #8]
 800ef96:	68db      	ldr	r3, [r3, #12]
 800ef98:	685b      	ldr	r3, [r3, #4]
 800ef9a:	4618      	mov	r0, r3
 800ef9c:	f7fb f963 	bl	800a266 <lwip_htonl>
 800efa0:	4604      	mov	r4, r0
 800efa2:	68bb      	ldr	r3, [r7, #8]
 800efa4:	891b      	ldrh	r3, [r3, #8]
 800efa6:	461d      	mov	r5, r3
 800efa8:	68bb      	ldr	r3, [r7, #8]
 800efaa:	68db      	ldr	r3, [r3, #12]
 800efac:	899b      	ldrh	r3, [r3, #12]
 800efae:	b29b      	uxth	r3, r3
 800efb0:	4618      	mov	r0, r3
 800efb2:	f7fb f943 	bl	800a23c <lwip_htons>
 800efb6:	4603      	mov	r3, r0
 800efb8:	b2db      	uxtb	r3, r3
 800efba:	f003 0303 	and.w	r3, r3, #3
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	d001      	beq.n	800efc6 <tcp_free_acked_segments+0xc6>
 800efc2:	2301      	movs	r3, #1
 800efc4:	e000      	b.n	800efc8 <tcp_free_acked_segments+0xc8>
 800efc6:	2300      	movs	r3, #0
 800efc8:	442b      	add	r3, r5
 800efca:	18e2      	adds	r2, r4, r3
 800efcc:	4b09      	ldr	r3, [pc, #36]	; (800eff4 <tcp_free_acked_segments+0xf4>)
 800efce:	681b      	ldr	r3, [r3, #0]
 800efd0:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	dd9c      	ble.n	800ef10 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800efd6:	68bb      	ldr	r3, [r7, #8]
}
 800efd8:	4618      	mov	r0, r3
 800efda:	3718      	adds	r7, #24
 800efdc:	46bd      	mov	sp, r7
 800efde:	bdb0      	pop	{r4, r5, r7, pc}
 800efe0:	08017358 	.word	0x08017358
 800efe4:	08017640 	.word	0x08017640
 800efe8:	080173a4 	.word	0x080173a4
 800efec:	20008be4 	.word	0x20008be4
 800eff0:	08017668 	.word	0x08017668
 800eff4:	20008be0 	.word	0x20008be0

0800eff8 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800eff8:	b5b0      	push	{r4, r5, r7, lr}
 800effa:	b094      	sub	sp, #80	; 0x50
 800effc:	af00      	add	r7, sp, #0
 800effe:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800f000:	2300      	movs	r3, #0
 800f002:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	2b00      	cmp	r3, #0
 800f008:	d106      	bne.n	800f018 <tcp_receive+0x20>
 800f00a:	4b91      	ldr	r3, [pc, #580]	; (800f250 <tcp_receive+0x258>)
 800f00c:	f240 427b 	movw	r2, #1147	; 0x47b
 800f010:	4990      	ldr	r1, [pc, #576]	; (800f254 <tcp_receive+0x25c>)
 800f012:	4891      	ldr	r0, [pc, #580]	; (800f258 <tcp_receive+0x260>)
 800f014:	f005 fd80 	bl	8014b18 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	7d1b      	ldrb	r3, [r3, #20]
 800f01c:	2b03      	cmp	r3, #3
 800f01e:	d806      	bhi.n	800f02e <tcp_receive+0x36>
 800f020:	4b8b      	ldr	r3, [pc, #556]	; (800f250 <tcp_receive+0x258>)
 800f022:	f240 427c 	movw	r2, #1148	; 0x47c
 800f026:	498d      	ldr	r1, [pc, #564]	; (800f25c <tcp_receive+0x264>)
 800f028:	488b      	ldr	r0, [pc, #556]	; (800f258 <tcp_receive+0x260>)
 800f02a:	f005 fd75 	bl	8014b18 <iprintf>

  if (flags & TCP_ACK) {
 800f02e:	4b8c      	ldr	r3, [pc, #560]	; (800f260 <tcp_receive+0x268>)
 800f030:	781b      	ldrb	r3, [r3, #0]
 800f032:	f003 0310 	and.w	r3, r3, #16
 800f036:	2b00      	cmp	r3, #0
 800f038:	f000 8264 	beq.w	800f504 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f042:	461a      	mov	r2, r3
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f048:	4413      	add	r3, r2
 800f04a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f050:	4b84      	ldr	r3, [pc, #528]	; (800f264 <tcp_receive+0x26c>)
 800f052:	681b      	ldr	r3, [r3, #0]
 800f054:	1ad3      	subs	r3, r2, r3
 800f056:	2b00      	cmp	r3, #0
 800f058:	db1b      	blt.n	800f092 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f05e:	4b81      	ldr	r3, [pc, #516]	; (800f264 <tcp_receive+0x26c>)
 800f060:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f062:	429a      	cmp	r2, r3
 800f064:	d106      	bne.n	800f074 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f06a:	4b7f      	ldr	r3, [pc, #508]	; (800f268 <tcp_receive+0x270>)
 800f06c:	681b      	ldr	r3, [r3, #0]
 800f06e:	1ad3      	subs	r3, r2, r3
 800f070:	2b00      	cmp	r3, #0
 800f072:	db0e      	blt.n	800f092 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f078:	4b7b      	ldr	r3, [pc, #492]	; (800f268 <tcp_receive+0x270>)
 800f07a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f07c:	429a      	cmp	r2, r3
 800f07e:	d125      	bne.n	800f0cc <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f080:	4b7a      	ldr	r3, [pc, #488]	; (800f26c <tcp_receive+0x274>)
 800f082:	681b      	ldr	r3, [r3, #0]
 800f084:	89db      	ldrh	r3, [r3, #14]
 800f086:	b29a      	uxth	r2, r3
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f08e:	429a      	cmp	r2, r3
 800f090:	d91c      	bls.n	800f0cc <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800f092:	4b76      	ldr	r3, [pc, #472]	; (800f26c <tcp_receive+0x274>)
 800f094:	681b      	ldr	r3, [r3, #0]
 800f096:	89db      	ldrh	r3, [r3, #14]
 800f098:	b29a      	uxth	r2, r3
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f0ac:	429a      	cmp	r2, r3
 800f0ae:	d205      	bcs.n	800f0bc <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800f0bc:	4b69      	ldr	r3, [pc, #420]	; (800f264 <tcp_receive+0x26c>)
 800f0be:	681a      	ldr	r2, [r3, #0]
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800f0c4:	4b68      	ldr	r3, [pc, #416]	; (800f268 <tcp_receive+0x270>)
 800f0c6:	681a      	ldr	r2, [r3, #0]
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800f0cc:	4b66      	ldr	r3, [pc, #408]	; (800f268 <tcp_receive+0x270>)
 800f0ce:	681a      	ldr	r2, [r3, #0]
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f0d4:	1ad3      	subs	r3, r2, r3
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	dc58      	bgt.n	800f18c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800f0da:	4b65      	ldr	r3, [pc, #404]	; (800f270 <tcp_receive+0x278>)
 800f0dc:	881b      	ldrh	r3, [r3, #0]
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	d14b      	bne.n	800f17a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f0e6:	687a      	ldr	r2, [r7, #4]
 800f0e8:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800f0ec:	4413      	add	r3, r2
 800f0ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f0f0:	429a      	cmp	r2, r3
 800f0f2:	d142      	bne.n	800f17a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	db3d      	blt.n	800f17a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f102:	4b59      	ldr	r3, [pc, #356]	; (800f268 <tcp_receive+0x270>)
 800f104:	681b      	ldr	r3, [r3, #0]
 800f106:	429a      	cmp	r2, r3
 800f108:	d137      	bne.n	800f17a <tcp_receive+0x182>
              found_dupack = 1;
 800f10a:	2301      	movs	r3, #1
 800f10c:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f114:	2bff      	cmp	r3, #255	; 0xff
 800f116:	d007      	beq.n	800f128 <tcp_receive+0x130>
                ++pcb->dupacks;
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f11e:	3301      	adds	r3, #1
 800f120:	b2da      	uxtb	r2, r3
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f12e:	2b03      	cmp	r3, #3
 800f130:	d91b      	bls.n	800f16a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f13c:	4413      	add	r3, r2
 800f13e:	b29a      	uxth	r2, r3
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f146:	429a      	cmp	r2, r3
 800f148:	d30a      	bcc.n	800f160 <tcp_receive+0x168>
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f154:	4413      	add	r3, r2
 800f156:	b29a      	uxth	r2, r3
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f15e:	e004      	b.n	800f16a <tcp_receive+0x172>
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f166:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f170:	2b02      	cmp	r3, #2
 800f172:	d902      	bls.n	800f17a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800f174:	6878      	ldr	r0, [r7, #4]
 800f176:	f002 fb43 	bl	8011800 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800f17a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	f040 8161 	bne.w	800f444 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	2200      	movs	r2, #0
 800f186:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f18a:	e15b      	b.n	800f444 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f18c:	4b36      	ldr	r3, [pc, #216]	; (800f268 <tcp_receive+0x270>)
 800f18e:	681a      	ldr	r2, [r3, #0]
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f194:	1ad3      	subs	r3, r2, r3
 800f196:	3b01      	subs	r3, #1
 800f198:	2b00      	cmp	r3, #0
 800f19a:	f2c0 814e 	blt.w	800f43a <tcp_receive+0x442>
 800f19e:	4b32      	ldr	r3, [pc, #200]	; (800f268 <tcp_receive+0x270>)
 800f1a0:	681a      	ldr	r2, [r3, #0]
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f1a6:	1ad3      	subs	r3, r2, r3
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	f300 8146 	bgt.w	800f43a <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	8b5b      	ldrh	r3, [r3, #26]
 800f1b2:	f003 0304 	and.w	r3, r3, #4
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	d010      	beq.n	800f1dc <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	8b5b      	ldrh	r3, [r3, #26]
 800f1be:	f023 0304 	bic.w	r3, r3, #4
 800f1c2:	b29a      	uxth	r2, r3
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	2200      	movs	r2, #0
 800f1d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	2200      	movs	r2, #0
 800f1e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f1ea:	10db      	asrs	r3, r3, #3
 800f1ec:	b21b      	sxth	r3, r3
 800f1ee:	b29a      	uxth	r2, r3
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f1f6:	b29b      	uxth	r3, r3
 800f1f8:	4413      	add	r3, r2
 800f1fa:	b29b      	uxth	r3, r3
 800f1fc:	b21a      	sxth	r2, r3
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800f204:	4b18      	ldr	r3, [pc, #96]	; (800f268 <tcp_receive+0x270>)
 800f206:	681b      	ldr	r3, [r3, #0]
 800f208:	b29a      	uxth	r2, r3
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f20e:	b29b      	uxth	r3, r3
 800f210:	1ad3      	subs	r3, r2, r3
 800f212:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	2200      	movs	r2, #0
 800f218:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800f21c:	4b12      	ldr	r3, [pc, #72]	; (800f268 <tcp_receive+0x270>)
 800f21e:	681a      	ldr	r2, [r3, #0]
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	7d1b      	ldrb	r3, [r3, #20]
 800f228:	2b03      	cmp	r3, #3
 800f22a:	f240 8097 	bls.w	800f35c <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800f23a:	429a      	cmp	r2, r3
 800f23c:	d245      	bcs.n	800f2ca <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	8b5b      	ldrh	r3, [r3, #26]
 800f242:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f246:	2b00      	cmp	r3, #0
 800f248:	d014      	beq.n	800f274 <tcp_receive+0x27c>
 800f24a:	2301      	movs	r3, #1
 800f24c:	e013      	b.n	800f276 <tcp_receive+0x27e>
 800f24e:	bf00      	nop
 800f250:	08017358 	.word	0x08017358
 800f254:	08017688 	.word	0x08017688
 800f258:	080173a4 	.word	0x080173a4
 800f25c:	080176a4 	.word	0x080176a4
 800f260:	20008be8 	.word	0x20008be8
 800f264:	20008bdc 	.word	0x20008bdc
 800f268:	20008be0 	.word	0x20008be0
 800f26c:	20008bcc 	.word	0x20008bcc
 800f270:	20008be6 	.word	0x20008be6
 800f274:	2302      	movs	r3, #2
 800f276:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800f27a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800f27e:	b29a      	uxth	r2, r3
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f284:	fb12 f303 	smulbb	r3, r2, r3
 800f288:	b29b      	uxth	r3, r3
 800f28a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f28c:	4293      	cmp	r3, r2
 800f28e:	bf28      	it	cs
 800f290:	4613      	movcs	r3, r2
 800f292:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f29a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f29c:	4413      	add	r3, r2
 800f29e:	b29a      	uxth	r2, r3
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f2a6:	429a      	cmp	r2, r3
 800f2a8:	d309      	bcc.n	800f2be <tcp_receive+0x2c6>
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f2b0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f2b2:	4413      	add	r3, r2
 800f2b4:	b29a      	uxth	r2, r3
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f2bc:	e04e      	b.n	800f35c <tcp_receive+0x364>
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f2c4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f2c8:	e048      	b.n	800f35c <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f2d0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f2d2:	4413      	add	r3, r2
 800f2d4:	b29a      	uxth	r2, r3
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f2dc:	429a      	cmp	r2, r3
 800f2de:	d309      	bcc.n	800f2f4 <tcp_receive+0x2fc>
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f2e6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f2e8:	4413      	add	r3, r2
 800f2ea:	b29a      	uxth	r2, r3
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f2f2:	e004      	b.n	800f2fe <tcp_receive+0x306>
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f2fa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f30a:	429a      	cmp	r2, r3
 800f30c:	d326      	bcc.n	800f35c <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f31a:	1ad3      	subs	r3, r2, r3
 800f31c:	b29a      	uxth	r2, r3
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f32e:	4413      	add	r3, r2
 800f330:	b29a      	uxth	r2, r3
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f338:	429a      	cmp	r2, r3
 800f33a:	d30a      	bcc.n	800f352 <tcp_receive+0x35a>
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f346:	4413      	add	r3, r2
 800f348:	b29a      	uxth	r2, r3
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f350:	e004      	b.n	800f35c <tcp_receive+0x364>
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f358:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f364:	4a98      	ldr	r2, [pc, #608]	; (800f5c8 <tcp_receive+0x5d0>)
 800f366:	6878      	ldr	r0, [r7, #4]
 800f368:	f7ff fdca 	bl	800ef00 <tcp_free_acked_segments>
 800f36c:	4602      	mov	r2, r0
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f37a:	4a94      	ldr	r2, [pc, #592]	; (800f5cc <tcp_receive+0x5d4>)
 800f37c:	6878      	ldr	r0, [r7, #4]
 800f37e:	f7ff fdbf 	bl	800ef00 <tcp_free_acked_segments>
 800f382:	4602      	mov	r2, r0
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	d104      	bne.n	800f39a <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f396:	861a      	strh	r2, [r3, #48]	; 0x30
 800f398:	e002      	b.n	800f3a0 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	2200      	movs	r2, #0
 800f39e:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	2200      	movs	r2, #0
 800f3a4:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d103      	bne.n	800f3b6 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	2200      	movs	r2, #0
 800f3b2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800f3bc:	4b84      	ldr	r3, [pc, #528]	; (800f5d0 <tcp_receive+0x5d8>)
 800f3be:	881b      	ldrh	r3, [r3, #0]
 800f3c0:	4413      	add	r3, r2
 800f3c2:	b29a      	uxth	r2, r3
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	8b5b      	ldrh	r3, [r3, #26]
 800f3ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	d035      	beq.n	800f442 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d118      	bne.n	800f410 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	d00c      	beq.n	800f400 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f3ee:	68db      	ldr	r3, [r3, #12]
 800f3f0:	685b      	ldr	r3, [r3, #4]
 800f3f2:	4618      	mov	r0, r3
 800f3f4:	f7fa ff37 	bl	800a266 <lwip_htonl>
 800f3f8:	4603      	mov	r3, r0
 800f3fa:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	dc20      	bgt.n	800f442 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	8b5b      	ldrh	r3, [r3, #26]
 800f404:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f408:	b29a      	uxth	r2, r3
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f40e:	e018      	b.n	800f442 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f418:	68db      	ldr	r3, [r3, #12]
 800f41a:	685b      	ldr	r3, [r3, #4]
 800f41c:	4618      	mov	r0, r3
 800f41e:	f7fa ff22 	bl	800a266 <lwip_htonl>
 800f422:	4603      	mov	r3, r0
 800f424:	1ae3      	subs	r3, r4, r3
 800f426:	2b00      	cmp	r3, #0
 800f428:	dc0b      	bgt.n	800f442 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	8b5b      	ldrh	r3, [r3, #26]
 800f42e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f432:	b29a      	uxth	r2, r3
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f438:	e003      	b.n	800f442 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800f43a:	6878      	ldr	r0, [r7, #4]
 800f43c:	f002 fbce 	bl	8011bdc <tcp_send_empty_ack>
 800f440:	e000      	b.n	800f444 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f442:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d05b      	beq.n	800f504 <tcp_receive+0x50c>
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f450:	4b60      	ldr	r3, [pc, #384]	; (800f5d4 <tcp_receive+0x5dc>)
 800f452:	681b      	ldr	r3, [r3, #0]
 800f454:	1ad3      	subs	r3, r2, r3
 800f456:	2b00      	cmp	r3, #0
 800f458:	da54      	bge.n	800f504 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800f45a:	4b5f      	ldr	r3, [pc, #380]	; (800f5d8 <tcp_receive+0x5e0>)
 800f45c:	681b      	ldr	r3, [r3, #0]
 800f45e:	b29a      	uxth	r2, r3
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f464:	b29b      	uxth	r3, r3
 800f466:	1ad3      	subs	r3, r2, r3
 800f468:	b29b      	uxth	r3, r3
 800f46a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800f46e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f478:	10db      	asrs	r3, r3, #3
 800f47a:	b21b      	sxth	r3, r3
 800f47c:	b29b      	uxth	r3, r3
 800f47e:	1ad3      	subs	r3, r2, r3
 800f480:	b29b      	uxth	r3, r3
 800f482:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f48c:	b29a      	uxth	r2, r3
 800f48e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f492:	4413      	add	r3, r2
 800f494:	b29b      	uxth	r3, r3
 800f496:	b21a      	sxth	r2, r3
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800f49c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	da05      	bge.n	800f4b0 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800f4a4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f4a8:	425b      	negs	r3, r3
 800f4aa:	b29b      	uxth	r3, r3
 800f4ac:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800f4b0:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f4ba:	109b      	asrs	r3, r3, #2
 800f4bc:	b21b      	sxth	r3, r3
 800f4be:	b29b      	uxth	r3, r3
 800f4c0:	1ad3      	subs	r3, r2, r3
 800f4c2:	b29b      	uxth	r3, r3
 800f4c4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f4ce:	b29a      	uxth	r2, r3
 800f4d0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f4d4:	4413      	add	r3, r2
 800f4d6:	b29b      	uxth	r3, r3
 800f4d8:	b21a      	sxth	r2, r3
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f4e4:	10db      	asrs	r3, r3, #3
 800f4e6:	b21b      	sxth	r3, r3
 800f4e8:	b29a      	uxth	r2, r3
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f4f0:	b29b      	uxth	r3, r3
 800f4f2:	4413      	add	r3, r2
 800f4f4:	b29b      	uxth	r3, r3
 800f4f6:	b21a      	sxth	r2, r3
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	2200      	movs	r2, #0
 800f502:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800f504:	4b35      	ldr	r3, [pc, #212]	; (800f5dc <tcp_receive+0x5e4>)
 800f506:	881b      	ldrh	r3, [r3, #0]
 800f508:	2b00      	cmp	r3, #0
 800f50a:	f000 84e2 	beq.w	800fed2 <tcp_receive+0xeda>
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	7d1b      	ldrb	r3, [r3, #20]
 800f512:	2b06      	cmp	r3, #6
 800f514:	f200 84dd 	bhi.w	800fed2 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f51c:	4b30      	ldr	r3, [pc, #192]	; (800f5e0 <tcp_receive+0x5e8>)
 800f51e:	681b      	ldr	r3, [r3, #0]
 800f520:	1ad3      	subs	r3, r2, r3
 800f522:	3b01      	subs	r3, #1
 800f524:	2b00      	cmp	r3, #0
 800f526:	f2c0 808f 	blt.w	800f648 <tcp_receive+0x650>
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f52e:	4b2b      	ldr	r3, [pc, #172]	; (800f5dc <tcp_receive+0x5e4>)
 800f530:	881b      	ldrh	r3, [r3, #0]
 800f532:	4619      	mov	r1, r3
 800f534:	4b2a      	ldr	r3, [pc, #168]	; (800f5e0 <tcp_receive+0x5e8>)
 800f536:	681b      	ldr	r3, [r3, #0]
 800f538:	440b      	add	r3, r1
 800f53a:	1ad3      	subs	r3, r2, r3
 800f53c:	3301      	adds	r3, #1
 800f53e:	2b00      	cmp	r3, #0
 800f540:	f300 8082 	bgt.w	800f648 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800f544:	4b27      	ldr	r3, [pc, #156]	; (800f5e4 <tcp_receive+0x5ec>)
 800f546:	685b      	ldr	r3, [r3, #4]
 800f548:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f54e:	4b24      	ldr	r3, [pc, #144]	; (800f5e0 <tcp_receive+0x5e8>)
 800f550:	681b      	ldr	r3, [r3, #0]
 800f552:	1ad3      	subs	r3, r2, r3
 800f554:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800f556:	4b23      	ldr	r3, [pc, #140]	; (800f5e4 <tcp_receive+0x5ec>)
 800f558:	685b      	ldr	r3, [r3, #4]
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d106      	bne.n	800f56c <tcp_receive+0x574>
 800f55e:	4b22      	ldr	r3, [pc, #136]	; (800f5e8 <tcp_receive+0x5f0>)
 800f560:	f240 5294 	movw	r2, #1428	; 0x594
 800f564:	4921      	ldr	r1, [pc, #132]	; (800f5ec <tcp_receive+0x5f4>)
 800f566:	4822      	ldr	r0, [pc, #136]	; (800f5f0 <tcp_receive+0x5f8>)
 800f568:	f005 fad6 	bl	8014b18 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800f56c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f56e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800f572:	4293      	cmp	r3, r2
 800f574:	d906      	bls.n	800f584 <tcp_receive+0x58c>
 800f576:	4b1c      	ldr	r3, [pc, #112]	; (800f5e8 <tcp_receive+0x5f0>)
 800f578:	f240 5295 	movw	r2, #1429	; 0x595
 800f57c:	491d      	ldr	r1, [pc, #116]	; (800f5f4 <tcp_receive+0x5fc>)
 800f57e:	481c      	ldr	r0, [pc, #112]	; (800f5f0 <tcp_receive+0x5f8>)
 800f580:	f005 faca 	bl	8014b18 <iprintf>
      off = (u16_t)off32;
 800f584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f586:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800f58a:	4b16      	ldr	r3, [pc, #88]	; (800f5e4 <tcp_receive+0x5ec>)
 800f58c:	685b      	ldr	r3, [r3, #4]
 800f58e:	891b      	ldrh	r3, [r3, #8]
 800f590:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f594:	429a      	cmp	r2, r3
 800f596:	d906      	bls.n	800f5a6 <tcp_receive+0x5ae>
 800f598:	4b13      	ldr	r3, [pc, #76]	; (800f5e8 <tcp_receive+0x5f0>)
 800f59a:	f240 5297 	movw	r2, #1431	; 0x597
 800f59e:	4916      	ldr	r1, [pc, #88]	; (800f5f8 <tcp_receive+0x600>)
 800f5a0:	4813      	ldr	r0, [pc, #76]	; (800f5f0 <tcp_receive+0x5f8>)
 800f5a2:	f005 fab9 	bl	8014b18 <iprintf>
      inseg.len -= off;
 800f5a6:	4b0f      	ldr	r3, [pc, #60]	; (800f5e4 <tcp_receive+0x5ec>)
 800f5a8:	891a      	ldrh	r2, [r3, #8]
 800f5aa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f5ae:	1ad3      	subs	r3, r2, r3
 800f5b0:	b29a      	uxth	r2, r3
 800f5b2:	4b0c      	ldr	r3, [pc, #48]	; (800f5e4 <tcp_receive+0x5ec>)
 800f5b4:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800f5b6:	4b0b      	ldr	r3, [pc, #44]	; (800f5e4 <tcp_receive+0x5ec>)
 800f5b8:	685b      	ldr	r3, [r3, #4]
 800f5ba:	891a      	ldrh	r2, [r3, #8]
 800f5bc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f5c0:	1ad3      	subs	r3, r2, r3
 800f5c2:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800f5c4:	e02a      	b.n	800f61c <tcp_receive+0x624>
 800f5c6:	bf00      	nop
 800f5c8:	080176c0 	.word	0x080176c0
 800f5cc:	080176c8 	.word	0x080176c8
 800f5d0:	20008be4 	.word	0x20008be4
 800f5d4:	20008be0 	.word	0x20008be0
 800f5d8:	20008ba4 	.word	0x20008ba4
 800f5dc:	20008be6 	.word	0x20008be6
 800f5e0:	20008bdc 	.word	0x20008bdc
 800f5e4:	20008bbc 	.word	0x20008bbc
 800f5e8:	08017358 	.word	0x08017358
 800f5ec:	080176d0 	.word	0x080176d0
 800f5f0:	080173a4 	.word	0x080173a4
 800f5f4:	080176e0 	.word	0x080176e0
 800f5f8:	080176f0 	.word	0x080176f0
        off -= p->len;
 800f5fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f5fe:	895b      	ldrh	r3, [r3, #10]
 800f600:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f604:	1ad3      	subs	r3, r2, r3
 800f606:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800f60a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f60c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800f60e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800f610:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f612:	2200      	movs	r2, #0
 800f614:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800f616:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f618:	681b      	ldr	r3, [r3, #0]
 800f61a:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800f61c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f61e:	895b      	ldrh	r3, [r3, #10]
 800f620:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f624:	429a      	cmp	r2, r3
 800f626:	d8e9      	bhi.n	800f5fc <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800f628:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f62c:	4619      	mov	r1, r3
 800f62e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f630:	f7fc f8dc 	bl	800b7ec <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f638:	4a91      	ldr	r2, [pc, #580]	; (800f880 <tcp_receive+0x888>)
 800f63a:	6013      	str	r3, [r2, #0]
 800f63c:	4b91      	ldr	r3, [pc, #580]	; (800f884 <tcp_receive+0x88c>)
 800f63e:	68db      	ldr	r3, [r3, #12]
 800f640:	4a8f      	ldr	r2, [pc, #572]	; (800f880 <tcp_receive+0x888>)
 800f642:	6812      	ldr	r2, [r2, #0]
 800f644:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f646:	e00d      	b.n	800f664 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800f648:	4b8d      	ldr	r3, [pc, #564]	; (800f880 <tcp_receive+0x888>)
 800f64a:	681a      	ldr	r2, [r3, #0]
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f650:	1ad3      	subs	r3, r2, r3
 800f652:	2b00      	cmp	r3, #0
 800f654:	da06      	bge.n	800f664 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	8b5b      	ldrh	r3, [r3, #26]
 800f65a:	f043 0302 	orr.w	r3, r3, #2
 800f65e:	b29a      	uxth	r2, r3
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f664:	4b86      	ldr	r3, [pc, #536]	; (800f880 <tcp_receive+0x888>)
 800f666:	681a      	ldr	r2, [r3, #0]
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f66c:	1ad3      	subs	r3, r2, r3
 800f66e:	2b00      	cmp	r3, #0
 800f670:	f2c0 842a 	blt.w	800fec8 <tcp_receive+0xed0>
 800f674:	4b82      	ldr	r3, [pc, #520]	; (800f880 <tcp_receive+0x888>)
 800f676:	681a      	ldr	r2, [r3, #0]
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f67c:	6879      	ldr	r1, [r7, #4]
 800f67e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f680:	440b      	add	r3, r1
 800f682:	1ad3      	subs	r3, r2, r3
 800f684:	3301      	adds	r3, #1
 800f686:	2b00      	cmp	r3, #0
 800f688:	f300 841e 	bgt.w	800fec8 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f690:	4b7b      	ldr	r3, [pc, #492]	; (800f880 <tcp_receive+0x888>)
 800f692:	681b      	ldr	r3, [r3, #0]
 800f694:	429a      	cmp	r2, r3
 800f696:	f040 829a 	bne.w	800fbce <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800f69a:	4b7a      	ldr	r3, [pc, #488]	; (800f884 <tcp_receive+0x88c>)
 800f69c:	891c      	ldrh	r4, [r3, #8]
 800f69e:	4b79      	ldr	r3, [pc, #484]	; (800f884 <tcp_receive+0x88c>)
 800f6a0:	68db      	ldr	r3, [r3, #12]
 800f6a2:	899b      	ldrh	r3, [r3, #12]
 800f6a4:	b29b      	uxth	r3, r3
 800f6a6:	4618      	mov	r0, r3
 800f6a8:	f7fa fdc8 	bl	800a23c <lwip_htons>
 800f6ac:	4603      	mov	r3, r0
 800f6ae:	b2db      	uxtb	r3, r3
 800f6b0:	f003 0303 	and.w	r3, r3, #3
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	d001      	beq.n	800f6bc <tcp_receive+0x6c4>
 800f6b8:	2301      	movs	r3, #1
 800f6ba:	e000      	b.n	800f6be <tcp_receive+0x6c6>
 800f6bc:	2300      	movs	r3, #0
 800f6be:	4423      	add	r3, r4
 800f6c0:	b29a      	uxth	r2, r3
 800f6c2:	4b71      	ldr	r3, [pc, #452]	; (800f888 <tcp_receive+0x890>)
 800f6c4:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f6ca:	4b6f      	ldr	r3, [pc, #444]	; (800f888 <tcp_receive+0x890>)
 800f6cc:	881b      	ldrh	r3, [r3, #0]
 800f6ce:	429a      	cmp	r2, r3
 800f6d0:	d275      	bcs.n	800f7be <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f6d2:	4b6c      	ldr	r3, [pc, #432]	; (800f884 <tcp_receive+0x88c>)
 800f6d4:	68db      	ldr	r3, [r3, #12]
 800f6d6:	899b      	ldrh	r3, [r3, #12]
 800f6d8:	b29b      	uxth	r3, r3
 800f6da:	4618      	mov	r0, r3
 800f6dc:	f7fa fdae 	bl	800a23c <lwip_htons>
 800f6e0:	4603      	mov	r3, r0
 800f6e2:	b2db      	uxtb	r3, r3
 800f6e4:	f003 0301 	and.w	r3, r3, #1
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	d01f      	beq.n	800f72c <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800f6ec:	4b65      	ldr	r3, [pc, #404]	; (800f884 <tcp_receive+0x88c>)
 800f6ee:	68db      	ldr	r3, [r3, #12]
 800f6f0:	899b      	ldrh	r3, [r3, #12]
 800f6f2:	b29b      	uxth	r3, r3
 800f6f4:	b21b      	sxth	r3, r3
 800f6f6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800f6fa:	b21c      	sxth	r4, r3
 800f6fc:	4b61      	ldr	r3, [pc, #388]	; (800f884 <tcp_receive+0x88c>)
 800f6fe:	68db      	ldr	r3, [r3, #12]
 800f700:	899b      	ldrh	r3, [r3, #12]
 800f702:	b29b      	uxth	r3, r3
 800f704:	4618      	mov	r0, r3
 800f706:	f7fa fd99 	bl	800a23c <lwip_htons>
 800f70a:	4603      	mov	r3, r0
 800f70c:	b2db      	uxtb	r3, r3
 800f70e:	b29b      	uxth	r3, r3
 800f710:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800f714:	b29b      	uxth	r3, r3
 800f716:	4618      	mov	r0, r3
 800f718:	f7fa fd90 	bl	800a23c <lwip_htons>
 800f71c:	4603      	mov	r3, r0
 800f71e:	b21b      	sxth	r3, r3
 800f720:	4323      	orrs	r3, r4
 800f722:	b21a      	sxth	r2, r3
 800f724:	4b57      	ldr	r3, [pc, #348]	; (800f884 <tcp_receive+0x88c>)
 800f726:	68db      	ldr	r3, [r3, #12]
 800f728:	b292      	uxth	r2, r2
 800f72a:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f730:	4b54      	ldr	r3, [pc, #336]	; (800f884 <tcp_receive+0x88c>)
 800f732:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800f734:	4b53      	ldr	r3, [pc, #332]	; (800f884 <tcp_receive+0x88c>)
 800f736:	68db      	ldr	r3, [r3, #12]
 800f738:	899b      	ldrh	r3, [r3, #12]
 800f73a:	b29b      	uxth	r3, r3
 800f73c:	4618      	mov	r0, r3
 800f73e:	f7fa fd7d 	bl	800a23c <lwip_htons>
 800f742:	4603      	mov	r3, r0
 800f744:	b2db      	uxtb	r3, r3
 800f746:	f003 0302 	and.w	r3, r3, #2
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	d005      	beq.n	800f75a <tcp_receive+0x762>
            inseg.len -= 1;
 800f74e:	4b4d      	ldr	r3, [pc, #308]	; (800f884 <tcp_receive+0x88c>)
 800f750:	891b      	ldrh	r3, [r3, #8]
 800f752:	3b01      	subs	r3, #1
 800f754:	b29a      	uxth	r2, r3
 800f756:	4b4b      	ldr	r3, [pc, #300]	; (800f884 <tcp_receive+0x88c>)
 800f758:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800f75a:	4b4a      	ldr	r3, [pc, #296]	; (800f884 <tcp_receive+0x88c>)
 800f75c:	685b      	ldr	r3, [r3, #4]
 800f75e:	4a49      	ldr	r2, [pc, #292]	; (800f884 <tcp_receive+0x88c>)
 800f760:	8912      	ldrh	r2, [r2, #8]
 800f762:	4611      	mov	r1, r2
 800f764:	4618      	mov	r0, r3
 800f766:	f7fb ff41 	bl	800b5ec <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800f76a:	4b46      	ldr	r3, [pc, #280]	; (800f884 <tcp_receive+0x88c>)
 800f76c:	891c      	ldrh	r4, [r3, #8]
 800f76e:	4b45      	ldr	r3, [pc, #276]	; (800f884 <tcp_receive+0x88c>)
 800f770:	68db      	ldr	r3, [r3, #12]
 800f772:	899b      	ldrh	r3, [r3, #12]
 800f774:	b29b      	uxth	r3, r3
 800f776:	4618      	mov	r0, r3
 800f778:	f7fa fd60 	bl	800a23c <lwip_htons>
 800f77c:	4603      	mov	r3, r0
 800f77e:	b2db      	uxtb	r3, r3
 800f780:	f003 0303 	and.w	r3, r3, #3
 800f784:	2b00      	cmp	r3, #0
 800f786:	d001      	beq.n	800f78c <tcp_receive+0x794>
 800f788:	2301      	movs	r3, #1
 800f78a:	e000      	b.n	800f78e <tcp_receive+0x796>
 800f78c:	2300      	movs	r3, #0
 800f78e:	4423      	add	r3, r4
 800f790:	b29a      	uxth	r2, r3
 800f792:	4b3d      	ldr	r3, [pc, #244]	; (800f888 <tcp_receive+0x890>)
 800f794:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800f796:	4b3c      	ldr	r3, [pc, #240]	; (800f888 <tcp_receive+0x890>)
 800f798:	881b      	ldrh	r3, [r3, #0]
 800f79a:	461a      	mov	r2, r3
 800f79c:	4b38      	ldr	r3, [pc, #224]	; (800f880 <tcp_receive+0x888>)
 800f79e:	681b      	ldr	r3, [r3, #0]
 800f7a0:	441a      	add	r2, r3
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7a6:	6879      	ldr	r1, [r7, #4]
 800f7a8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f7aa:	440b      	add	r3, r1
 800f7ac:	429a      	cmp	r2, r3
 800f7ae:	d006      	beq.n	800f7be <tcp_receive+0x7c6>
 800f7b0:	4b36      	ldr	r3, [pc, #216]	; (800f88c <tcp_receive+0x894>)
 800f7b2:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800f7b6:	4936      	ldr	r1, [pc, #216]	; (800f890 <tcp_receive+0x898>)
 800f7b8:	4836      	ldr	r0, [pc, #216]	; (800f894 <tcp_receive+0x89c>)
 800f7ba:	f005 f9ad 	bl	8014b18 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	f000 80e7 	beq.w	800f996 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f7c8:	4b2e      	ldr	r3, [pc, #184]	; (800f884 <tcp_receive+0x88c>)
 800f7ca:	68db      	ldr	r3, [r3, #12]
 800f7cc:	899b      	ldrh	r3, [r3, #12]
 800f7ce:	b29b      	uxth	r3, r3
 800f7d0:	4618      	mov	r0, r3
 800f7d2:	f7fa fd33 	bl	800a23c <lwip_htons>
 800f7d6:	4603      	mov	r3, r0
 800f7d8:	b2db      	uxtb	r3, r3
 800f7da:	f003 0301 	and.w	r3, r3, #1
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	d010      	beq.n	800f804 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800f7e2:	e00a      	b.n	800f7fa <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f7e8:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f7ee:	681a      	ldr	r2, [r3, #0]
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800f7f4:	68f8      	ldr	r0, [r7, #12]
 800f7f6:	f7fd fcac 	bl	800d152 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	d1f0      	bne.n	800f7e4 <tcp_receive+0x7ec>
 800f802:	e0c8      	b.n	800f996 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f808:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800f80a:	e052      	b.n	800f8b2 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800f80c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f80e:	68db      	ldr	r3, [r3, #12]
 800f810:	899b      	ldrh	r3, [r3, #12]
 800f812:	b29b      	uxth	r3, r3
 800f814:	4618      	mov	r0, r3
 800f816:	f7fa fd11 	bl	800a23c <lwip_htons>
 800f81a:	4603      	mov	r3, r0
 800f81c:	b2db      	uxtb	r3, r3
 800f81e:	f003 0301 	and.w	r3, r3, #1
 800f822:	2b00      	cmp	r3, #0
 800f824:	d03d      	beq.n	800f8a2 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800f826:	4b17      	ldr	r3, [pc, #92]	; (800f884 <tcp_receive+0x88c>)
 800f828:	68db      	ldr	r3, [r3, #12]
 800f82a:	899b      	ldrh	r3, [r3, #12]
 800f82c:	b29b      	uxth	r3, r3
 800f82e:	4618      	mov	r0, r3
 800f830:	f7fa fd04 	bl	800a23c <lwip_htons>
 800f834:	4603      	mov	r3, r0
 800f836:	b2db      	uxtb	r3, r3
 800f838:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d130      	bne.n	800f8a2 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800f840:	4b10      	ldr	r3, [pc, #64]	; (800f884 <tcp_receive+0x88c>)
 800f842:	68db      	ldr	r3, [r3, #12]
 800f844:	899b      	ldrh	r3, [r3, #12]
 800f846:	b29c      	uxth	r4, r3
 800f848:	2001      	movs	r0, #1
 800f84a:	f7fa fcf7 	bl	800a23c <lwip_htons>
 800f84e:	4603      	mov	r3, r0
 800f850:	461a      	mov	r2, r3
 800f852:	4b0c      	ldr	r3, [pc, #48]	; (800f884 <tcp_receive+0x88c>)
 800f854:	68db      	ldr	r3, [r3, #12]
 800f856:	4322      	orrs	r2, r4
 800f858:	b292      	uxth	r2, r2
 800f85a:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800f85c:	4b09      	ldr	r3, [pc, #36]	; (800f884 <tcp_receive+0x88c>)
 800f85e:	891c      	ldrh	r4, [r3, #8]
 800f860:	4b08      	ldr	r3, [pc, #32]	; (800f884 <tcp_receive+0x88c>)
 800f862:	68db      	ldr	r3, [r3, #12]
 800f864:	899b      	ldrh	r3, [r3, #12]
 800f866:	b29b      	uxth	r3, r3
 800f868:	4618      	mov	r0, r3
 800f86a:	f7fa fce7 	bl	800a23c <lwip_htons>
 800f86e:	4603      	mov	r3, r0
 800f870:	b2db      	uxtb	r3, r3
 800f872:	f003 0303 	and.w	r3, r3, #3
 800f876:	2b00      	cmp	r3, #0
 800f878:	d00e      	beq.n	800f898 <tcp_receive+0x8a0>
 800f87a:	2301      	movs	r3, #1
 800f87c:	e00d      	b.n	800f89a <tcp_receive+0x8a2>
 800f87e:	bf00      	nop
 800f880:	20008bdc 	.word	0x20008bdc
 800f884:	20008bbc 	.word	0x20008bbc
 800f888:	20008be6 	.word	0x20008be6
 800f88c:	08017358 	.word	0x08017358
 800f890:	08017700 	.word	0x08017700
 800f894:	080173a4 	.word	0x080173a4
 800f898:	2300      	movs	r3, #0
 800f89a:	4423      	add	r3, r4
 800f89c:	b29a      	uxth	r2, r3
 800f89e:	4b98      	ldr	r3, [pc, #608]	; (800fb00 <tcp_receive+0xb08>)
 800f8a0:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800f8a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f8a4:	613b      	str	r3, [r7, #16]
              next = next->next;
 800f8a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f8a8:	681b      	ldr	r3, [r3, #0]
 800f8aa:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800f8ac:	6938      	ldr	r0, [r7, #16]
 800f8ae:	f7fd fc50 	bl	800d152 <tcp_seg_free>
            while (next &&
 800f8b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	d00e      	beq.n	800f8d6 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800f8b8:	4b91      	ldr	r3, [pc, #580]	; (800fb00 <tcp_receive+0xb08>)
 800f8ba:	881b      	ldrh	r3, [r3, #0]
 800f8bc:	461a      	mov	r2, r3
 800f8be:	4b91      	ldr	r3, [pc, #580]	; (800fb04 <tcp_receive+0xb0c>)
 800f8c0:	681b      	ldr	r3, [r3, #0]
 800f8c2:	441a      	add	r2, r3
 800f8c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f8c6:	68db      	ldr	r3, [r3, #12]
 800f8c8:	685b      	ldr	r3, [r3, #4]
 800f8ca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f8cc:	8909      	ldrh	r1, [r1, #8]
 800f8ce:	440b      	add	r3, r1
 800f8d0:	1ad3      	subs	r3, r2, r3
            while (next &&
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	da9a      	bge.n	800f80c <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800f8d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	d059      	beq.n	800f990 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 800f8dc:	4b88      	ldr	r3, [pc, #544]	; (800fb00 <tcp_receive+0xb08>)
 800f8de:	881b      	ldrh	r3, [r3, #0]
 800f8e0:	461a      	mov	r2, r3
 800f8e2:	4b88      	ldr	r3, [pc, #544]	; (800fb04 <tcp_receive+0xb0c>)
 800f8e4:	681b      	ldr	r3, [r3, #0]
 800f8e6:	441a      	add	r2, r3
 800f8e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f8ea:	68db      	ldr	r3, [r3, #12]
 800f8ec:	685b      	ldr	r3, [r3, #4]
 800f8ee:	1ad3      	subs	r3, r2, r3
            if (next &&
 800f8f0:	2b00      	cmp	r3, #0
 800f8f2:	dd4d      	ble.n	800f990 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800f8f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f8f6:	68db      	ldr	r3, [r3, #12]
 800f8f8:	685b      	ldr	r3, [r3, #4]
 800f8fa:	b29a      	uxth	r2, r3
 800f8fc:	4b81      	ldr	r3, [pc, #516]	; (800fb04 <tcp_receive+0xb0c>)
 800f8fe:	681b      	ldr	r3, [r3, #0]
 800f900:	b29b      	uxth	r3, r3
 800f902:	1ad3      	subs	r3, r2, r3
 800f904:	b29a      	uxth	r2, r3
 800f906:	4b80      	ldr	r3, [pc, #512]	; (800fb08 <tcp_receive+0xb10>)
 800f908:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800f90a:	4b7f      	ldr	r3, [pc, #508]	; (800fb08 <tcp_receive+0xb10>)
 800f90c:	68db      	ldr	r3, [r3, #12]
 800f90e:	899b      	ldrh	r3, [r3, #12]
 800f910:	b29b      	uxth	r3, r3
 800f912:	4618      	mov	r0, r3
 800f914:	f7fa fc92 	bl	800a23c <lwip_htons>
 800f918:	4603      	mov	r3, r0
 800f91a:	b2db      	uxtb	r3, r3
 800f91c:	f003 0302 	and.w	r3, r3, #2
 800f920:	2b00      	cmp	r3, #0
 800f922:	d005      	beq.n	800f930 <tcp_receive+0x938>
                inseg.len -= 1;
 800f924:	4b78      	ldr	r3, [pc, #480]	; (800fb08 <tcp_receive+0xb10>)
 800f926:	891b      	ldrh	r3, [r3, #8]
 800f928:	3b01      	subs	r3, #1
 800f92a:	b29a      	uxth	r2, r3
 800f92c:	4b76      	ldr	r3, [pc, #472]	; (800fb08 <tcp_receive+0xb10>)
 800f92e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800f930:	4b75      	ldr	r3, [pc, #468]	; (800fb08 <tcp_receive+0xb10>)
 800f932:	685b      	ldr	r3, [r3, #4]
 800f934:	4a74      	ldr	r2, [pc, #464]	; (800fb08 <tcp_receive+0xb10>)
 800f936:	8912      	ldrh	r2, [r2, #8]
 800f938:	4611      	mov	r1, r2
 800f93a:	4618      	mov	r0, r3
 800f93c:	f7fb fe56 	bl	800b5ec <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800f940:	4b71      	ldr	r3, [pc, #452]	; (800fb08 <tcp_receive+0xb10>)
 800f942:	891c      	ldrh	r4, [r3, #8]
 800f944:	4b70      	ldr	r3, [pc, #448]	; (800fb08 <tcp_receive+0xb10>)
 800f946:	68db      	ldr	r3, [r3, #12]
 800f948:	899b      	ldrh	r3, [r3, #12]
 800f94a:	b29b      	uxth	r3, r3
 800f94c:	4618      	mov	r0, r3
 800f94e:	f7fa fc75 	bl	800a23c <lwip_htons>
 800f952:	4603      	mov	r3, r0
 800f954:	b2db      	uxtb	r3, r3
 800f956:	f003 0303 	and.w	r3, r3, #3
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	d001      	beq.n	800f962 <tcp_receive+0x96a>
 800f95e:	2301      	movs	r3, #1
 800f960:	e000      	b.n	800f964 <tcp_receive+0x96c>
 800f962:	2300      	movs	r3, #0
 800f964:	4423      	add	r3, r4
 800f966:	b29a      	uxth	r2, r3
 800f968:	4b65      	ldr	r3, [pc, #404]	; (800fb00 <tcp_receive+0xb08>)
 800f96a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800f96c:	4b64      	ldr	r3, [pc, #400]	; (800fb00 <tcp_receive+0xb08>)
 800f96e:	881b      	ldrh	r3, [r3, #0]
 800f970:	461a      	mov	r2, r3
 800f972:	4b64      	ldr	r3, [pc, #400]	; (800fb04 <tcp_receive+0xb0c>)
 800f974:	681b      	ldr	r3, [r3, #0]
 800f976:	441a      	add	r2, r3
 800f978:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f97a:	68db      	ldr	r3, [r3, #12]
 800f97c:	685b      	ldr	r3, [r3, #4]
 800f97e:	429a      	cmp	r2, r3
 800f980:	d006      	beq.n	800f990 <tcp_receive+0x998>
 800f982:	4b62      	ldr	r3, [pc, #392]	; (800fb0c <tcp_receive+0xb14>)
 800f984:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800f988:	4961      	ldr	r1, [pc, #388]	; (800fb10 <tcp_receive+0xb18>)
 800f98a:	4862      	ldr	r0, [pc, #392]	; (800fb14 <tcp_receive+0xb1c>)
 800f98c:	f005 f8c4 	bl	8014b18 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f994:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800f996:	4b5a      	ldr	r3, [pc, #360]	; (800fb00 <tcp_receive+0xb08>)
 800f998:	881b      	ldrh	r3, [r3, #0]
 800f99a:	461a      	mov	r2, r3
 800f99c:	4b59      	ldr	r3, [pc, #356]	; (800fb04 <tcp_receive+0xb0c>)
 800f99e:	681b      	ldr	r3, [r3, #0]
 800f9a0:	441a      	add	r2, r3
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f9aa:	4b55      	ldr	r3, [pc, #340]	; (800fb00 <tcp_receive+0xb08>)
 800f9ac:	881b      	ldrh	r3, [r3, #0]
 800f9ae:	429a      	cmp	r2, r3
 800f9b0:	d206      	bcs.n	800f9c0 <tcp_receive+0x9c8>
 800f9b2:	4b56      	ldr	r3, [pc, #344]	; (800fb0c <tcp_receive+0xb14>)
 800f9b4:	f240 6207 	movw	r2, #1543	; 0x607
 800f9b8:	4957      	ldr	r1, [pc, #348]	; (800fb18 <tcp_receive+0xb20>)
 800f9ba:	4856      	ldr	r0, [pc, #344]	; (800fb14 <tcp_receive+0xb1c>)
 800f9bc:	f005 f8ac 	bl	8014b18 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f9c4:	4b4e      	ldr	r3, [pc, #312]	; (800fb00 <tcp_receive+0xb08>)
 800f9c6:	881b      	ldrh	r3, [r3, #0]
 800f9c8:	1ad3      	subs	r3, r2, r3
 800f9ca:	b29a      	uxth	r2, r3
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800f9d0:	6878      	ldr	r0, [r7, #4]
 800f9d2:	f7fc fe99 	bl	800c708 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800f9d6:	4b4c      	ldr	r3, [pc, #304]	; (800fb08 <tcp_receive+0xb10>)
 800f9d8:	685b      	ldr	r3, [r3, #4]
 800f9da:	891b      	ldrh	r3, [r3, #8]
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	d006      	beq.n	800f9ee <tcp_receive+0x9f6>
          recv_data = inseg.p;
 800f9e0:	4b49      	ldr	r3, [pc, #292]	; (800fb08 <tcp_receive+0xb10>)
 800f9e2:	685b      	ldr	r3, [r3, #4]
 800f9e4:	4a4d      	ldr	r2, [pc, #308]	; (800fb1c <tcp_receive+0xb24>)
 800f9e6:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800f9e8:	4b47      	ldr	r3, [pc, #284]	; (800fb08 <tcp_receive+0xb10>)
 800f9ea:	2200      	movs	r2, #0
 800f9ec:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f9ee:	4b46      	ldr	r3, [pc, #280]	; (800fb08 <tcp_receive+0xb10>)
 800f9f0:	68db      	ldr	r3, [r3, #12]
 800f9f2:	899b      	ldrh	r3, [r3, #12]
 800f9f4:	b29b      	uxth	r3, r3
 800f9f6:	4618      	mov	r0, r3
 800f9f8:	f7fa fc20 	bl	800a23c <lwip_htons>
 800f9fc:	4603      	mov	r3, r0
 800f9fe:	b2db      	uxtb	r3, r3
 800fa00:	f003 0301 	and.w	r3, r3, #1
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	f000 80b8 	beq.w	800fb7a <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800fa0a:	4b45      	ldr	r3, [pc, #276]	; (800fb20 <tcp_receive+0xb28>)
 800fa0c:	781b      	ldrb	r3, [r3, #0]
 800fa0e:	f043 0320 	orr.w	r3, r3, #32
 800fa12:	b2da      	uxtb	r2, r3
 800fa14:	4b42      	ldr	r3, [pc, #264]	; (800fb20 <tcp_receive+0xb28>)
 800fa16:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800fa18:	e0af      	b.n	800fb7a <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fa1e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fa24:	68db      	ldr	r3, [r3, #12]
 800fa26:	685b      	ldr	r3, [r3, #4]
 800fa28:	4a36      	ldr	r2, [pc, #216]	; (800fb04 <tcp_receive+0xb0c>)
 800fa2a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800fa2c:	68bb      	ldr	r3, [r7, #8]
 800fa2e:	891b      	ldrh	r3, [r3, #8]
 800fa30:	461c      	mov	r4, r3
 800fa32:	68bb      	ldr	r3, [r7, #8]
 800fa34:	68db      	ldr	r3, [r3, #12]
 800fa36:	899b      	ldrh	r3, [r3, #12]
 800fa38:	b29b      	uxth	r3, r3
 800fa3a:	4618      	mov	r0, r3
 800fa3c:	f7fa fbfe 	bl	800a23c <lwip_htons>
 800fa40:	4603      	mov	r3, r0
 800fa42:	b2db      	uxtb	r3, r3
 800fa44:	f003 0303 	and.w	r3, r3, #3
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	d001      	beq.n	800fa50 <tcp_receive+0xa58>
 800fa4c:	2301      	movs	r3, #1
 800fa4e:	e000      	b.n	800fa52 <tcp_receive+0xa5a>
 800fa50:	2300      	movs	r3, #0
 800fa52:	191a      	adds	r2, r3, r4
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa58:	441a      	add	r2, r3
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fa62:	461c      	mov	r4, r3
 800fa64:	68bb      	ldr	r3, [r7, #8]
 800fa66:	891b      	ldrh	r3, [r3, #8]
 800fa68:	461d      	mov	r5, r3
 800fa6a:	68bb      	ldr	r3, [r7, #8]
 800fa6c:	68db      	ldr	r3, [r3, #12]
 800fa6e:	899b      	ldrh	r3, [r3, #12]
 800fa70:	b29b      	uxth	r3, r3
 800fa72:	4618      	mov	r0, r3
 800fa74:	f7fa fbe2 	bl	800a23c <lwip_htons>
 800fa78:	4603      	mov	r3, r0
 800fa7a:	b2db      	uxtb	r3, r3
 800fa7c:	f003 0303 	and.w	r3, r3, #3
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	d001      	beq.n	800fa88 <tcp_receive+0xa90>
 800fa84:	2301      	movs	r3, #1
 800fa86:	e000      	b.n	800fa8a <tcp_receive+0xa92>
 800fa88:	2300      	movs	r3, #0
 800fa8a:	442b      	add	r3, r5
 800fa8c:	429c      	cmp	r4, r3
 800fa8e:	d206      	bcs.n	800fa9e <tcp_receive+0xaa6>
 800fa90:	4b1e      	ldr	r3, [pc, #120]	; (800fb0c <tcp_receive+0xb14>)
 800fa92:	f240 622b 	movw	r2, #1579	; 0x62b
 800fa96:	4923      	ldr	r1, [pc, #140]	; (800fb24 <tcp_receive+0xb2c>)
 800fa98:	481e      	ldr	r0, [pc, #120]	; (800fb14 <tcp_receive+0xb1c>)
 800fa9a:	f005 f83d 	bl	8014b18 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800fa9e:	68bb      	ldr	r3, [r7, #8]
 800faa0:	891b      	ldrh	r3, [r3, #8]
 800faa2:	461c      	mov	r4, r3
 800faa4:	68bb      	ldr	r3, [r7, #8]
 800faa6:	68db      	ldr	r3, [r3, #12]
 800faa8:	899b      	ldrh	r3, [r3, #12]
 800faaa:	b29b      	uxth	r3, r3
 800faac:	4618      	mov	r0, r3
 800faae:	f7fa fbc5 	bl	800a23c <lwip_htons>
 800fab2:	4603      	mov	r3, r0
 800fab4:	b2db      	uxtb	r3, r3
 800fab6:	f003 0303 	and.w	r3, r3, #3
 800faba:	2b00      	cmp	r3, #0
 800fabc:	d001      	beq.n	800fac2 <tcp_receive+0xaca>
 800fabe:	2301      	movs	r3, #1
 800fac0:	e000      	b.n	800fac4 <tcp_receive+0xacc>
 800fac2:	2300      	movs	r3, #0
 800fac4:	1919      	adds	r1, r3, r4
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800faca:	b28b      	uxth	r3, r1
 800facc:	1ad3      	subs	r3, r2, r3
 800face:	b29a      	uxth	r2, r3
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800fad4:	6878      	ldr	r0, [r7, #4]
 800fad6:	f7fc fe17 	bl	800c708 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800fada:	68bb      	ldr	r3, [r7, #8]
 800fadc:	685b      	ldr	r3, [r3, #4]
 800fade:	891b      	ldrh	r3, [r3, #8]
 800fae0:	2b00      	cmp	r3, #0
 800fae2:	d028      	beq.n	800fb36 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800fae4:	4b0d      	ldr	r3, [pc, #52]	; (800fb1c <tcp_receive+0xb24>)
 800fae6:	681b      	ldr	r3, [r3, #0]
 800fae8:	2b00      	cmp	r3, #0
 800faea:	d01d      	beq.n	800fb28 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 800faec:	4b0b      	ldr	r3, [pc, #44]	; (800fb1c <tcp_receive+0xb24>)
 800faee:	681a      	ldr	r2, [r3, #0]
 800faf0:	68bb      	ldr	r3, [r7, #8]
 800faf2:	685b      	ldr	r3, [r3, #4]
 800faf4:	4619      	mov	r1, r3
 800faf6:	4610      	mov	r0, r2
 800faf8:	f7fb ffc0 	bl	800ba7c <pbuf_cat>
 800fafc:	e018      	b.n	800fb30 <tcp_receive+0xb38>
 800fafe:	bf00      	nop
 800fb00:	20008be6 	.word	0x20008be6
 800fb04:	20008bdc 	.word	0x20008bdc
 800fb08:	20008bbc 	.word	0x20008bbc
 800fb0c:	08017358 	.word	0x08017358
 800fb10:	08017738 	.word	0x08017738
 800fb14:	080173a4 	.word	0x080173a4
 800fb18:	08017774 	.word	0x08017774
 800fb1c:	20008bec 	.word	0x20008bec
 800fb20:	20008be9 	.word	0x20008be9
 800fb24:	08017794 	.word	0x08017794
            } else {
              recv_data = cseg->p;
 800fb28:	68bb      	ldr	r3, [r7, #8]
 800fb2a:	685b      	ldr	r3, [r3, #4]
 800fb2c:	4a70      	ldr	r2, [pc, #448]	; (800fcf0 <tcp_receive+0xcf8>)
 800fb2e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800fb30:	68bb      	ldr	r3, [r7, #8]
 800fb32:	2200      	movs	r2, #0
 800fb34:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800fb36:	68bb      	ldr	r3, [r7, #8]
 800fb38:	68db      	ldr	r3, [r3, #12]
 800fb3a:	899b      	ldrh	r3, [r3, #12]
 800fb3c:	b29b      	uxth	r3, r3
 800fb3e:	4618      	mov	r0, r3
 800fb40:	f7fa fb7c 	bl	800a23c <lwip_htons>
 800fb44:	4603      	mov	r3, r0
 800fb46:	b2db      	uxtb	r3, r3
 800fb48:	f003 0301 	and.w	r3, r3, #1
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	d00d      	beq.n	800fb6c <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800fb50:	4b68      	ldr	r3, [pc, #416]	; (800fcf4 <tcp_receive+0xcfc>)
 800fb52:	781b      	ldrb	r3, [r3, #0]
 800fb54:	f043 0320 	orr.w	r3, r3, #32
 800fb58:	b2da      	uxtb	r2, r3
 800fb5a:	4b66      	ldr	r3, [pc, #408]	; (800fcf4 <tcp_receive+0xcfc>)
 800fb5c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	7d1b      	ldrb	r3, [r3, #20]
 800fb62:	2b04      	cmp	r3, #4
 800fb64:	d102      	bne.n	800fb6c <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	2207      	movs	r2, #7
 800fb6a:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800fb6c:	68bb      	ldr	r3, [r7, #8]
 800fb6e:	681a      	ldr	r2, [r3, #0]
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800fb74:	68b8      	ldr	r0, [r7, #8]
 800fb76:	f7fd faec 	bl	800d152 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	d008      	beq.n	800fb94 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fb86:	68db      	ldr	r3, [r3, #12]
 800fb88:	685a      	ldr	r2, [r3, #4]
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800fb8e:	429a      	cmp	r2, r3
 800fb90:	f43f af43 	beq.w	800fa1a <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	8b5b      	ldrh	r3, [r3, #26]
 800fb98:	f003 0301 	and.w	r3, r3, #1
 800fb9c:	2b00      	cmp	r3, #0
 800fb9e:	d00e      	beq.n	800fbbe <tcp_receive+0xbc6>
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	8b5b      	ldrh	r3, [r3, #26]
 800fba4:	f023 0301 	bic.w	r3, r3, #1
 800fba8:	b29a      	uxth	r2, r3
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	835a      	strh	r2, [r3, #26]
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	8b5b      	ldrh	r3, [r3, #26]
 800fbb2:	f043 0302 	orr.w	r3, r3, #2
 800fbb6:	b29a      	uxth	r2, r3
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800fbbc:	e188      	b.n	800fed0 <tcp_receive+0xed8>
        tcp_ack(pcb);
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	8b5b      	ldrh	r3, [r3, #26]
 800fbc2:	f043 0301 	orr.w	r3, r3, #1
 800fbc6:	b29a      	uxth	r2, r3
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800fbcc:	e180      	b.n	800fed0 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	d106      	bne.n	800fbe4 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800fbd6:	4848      	ldr	r0, [pc, #288]	; (800fcf8 <tcp_receive+0xd00>)
 800fbd8:	f7fd faf2 	bl	800d1c0 <tcp_seg_copy>
 800fbdc:	4602      	mov	r2, r0
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	675a      	str	r2, [r3, #116]	; 0x74
 800fbe2:	e16d      	b.n	800fec0 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800fbe4:	2300      	movs	r3, #0
 800fbe6:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fbec:	63bb      	str	r3, [r7, #56]	; 0x38
 800fbee:	e157      	b.n	800fea0 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 800fbf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbf2:	68db      	ldr	r3, [r3, #12]
 800fbf4:	685a      	ldr	r2, [r3, #4]
 800fbf6:	4b41      	ldr	r3, [pc, #260]	; (800fcfc <tcp_receive+0xd04>)
 800fbf8:	681b      	ldr	r3, [r3, #0]
 800fbfa:	429a      	cmp	r2, r3
 800fbfc:	d11d      	bne.n	800fc3a <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800fbfe:	4b3e      	ldr	r3, [pc, #248]	; (800fcf8 <tcp_receive+0xd00>)
 800fc00:	891a      	ldrh	r2, [r3, #8]
 800fc02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc04:	891b      	ldrh	r3, [r3, #8]
 800fc06:	429a      	cmp	r2, r3
 800fc08:	f240 814f 	bls.w	800feaa <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800fc0c:	483a      	ldr	r0, [pc, #232]	; (800fcf8 <tcp_receive+0xd00>)
 800fc0e:	f7fd fad7 	bl	800d1c0 <tcp_seg_copy>
 800fc12:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800fc14:	697b      	ldr	r3, [r7, #20]
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	f000 8149 	beq.w	800feae <tcp_receive+0xeb6>
                  if (prev != NULL) {
 800fc1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	d003      	beq.n	800fc2a <tcp_receive+0xc32>
                    prev->next = cseg;
 800fc22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc24:	697a      	ldr	r2, [r7, #20]
 800fc26:	601a      	str	r2, [r3, #0]
 800fc28:	e002      	b.n	800fc30 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	697a      	ldr	r2, [r7, #20]
 800fc2e:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800fc30:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fc32:	6978      	ldr	r0, [r7, #20]
 800fc34:	f7ff f8dc 	bl	800edf0 <tcp_oos_insert_segment>
                }
                break;
 800fc38:	e139      	b.n	800feae <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800fc3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	d117      	bne.n	800fc70 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800fc40:	4b2e      	ldr	r3, [pc, #184]	; (800fcfc <tcp_receive+0xd04>)
 800fc42:	681a      	ldr	r2, [r3, #0]
 800fc44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc46:	68db      	ldr	r3, [r3, #12]
 800fc48:	685b      	ldr	r3, [r3, #4]
 800fc4a:	1ad3      	subs	r3, r2, r3
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	da57      	bge.n	800fd00 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800fc50:	4829      	ldr	r0, [pc, #164]	; (800fcf8 <tcp_receive+0xd00>)
 800fc52:	f7fd fab5 	bl	800d1c0 <tcp_seg_copy>
 800fc56:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800fc58:	69bb      	ldr	r3, [r7, #24]
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	f000 8129 	beq.w	800feb2 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	69ba      	ldr	r2, [r7, #24]
 800fc64:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800fc66:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fc68:	69b8      	ldr	r0, [r7, #24]
 800fc6a:	f7ff f8c1 	bl	800edf0 <tcp_oos_insert_segment>
                  }
                  break;
 800fc6e:	e120      	b.n	800feb2 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800fc70:	4b22      	ldr	r3, [pc, #136]	; (800fcfc <tcp_receive+0xd04>)
 800fc72:	681a      	ldr	r2, [r3, #0]
 800fc74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc76:	68db      	ldr	r3, [r3, #12]
 800fc78:	685b      	ldr	r3, [r3, #4]
 800fc7a:	1ad3      	subs	r3, r2, r3
 800fc7c:	3b01      	subs	r3, #1
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	db3e      	blt.n	800fd00 <tcp_receive+0xd08>
 800fc82:	4b1e      	ldr	r3, [pc, #120]	; (800fcfc <tcp_receive+0xd04>)
 800fc84:	681a      	ldr	r2, [r3, #0]
 800fc86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc88:	68db      	ldr	r3, [r3, #12]
 800fc8a:	685b      	ldr	r3, [r3, #4]
 800fc8c:	1ad3      	subs	r3, r2, r3
 800fc8e:	3301      	adds	r3, #1
 800fc90:	2b00      	cmp	r3, #0
 800fc92:	dc35      	bgt.n	800fd00 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800fc94:	4818      	ldr	r0, [pc, #96]	; (800fcf8 <tcp_receive+0xd00>)
 800fc96:	f7fd fa93 	bl	800d1c0 <tcp_seg_copy>
 800fc9a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800fc9c:	69fb      	ldr	r3, [r7, #28]
 800fc9e:	2b00      	cmp	r3, #0
 800fca0:	f000 8109 	beq.w	800feb6 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800fca4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fca6:	68db      	ldr	r3, [r3, #12]
 800fca8:	685b      	ldr	r3, [r3, #4]
 800fcaa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fcac:	8912      	ldrh	r2, [r2, #8]
 800fcae:	441a      	add	r2, r3
 800fcb0:	4b12      	ldr	r3, [pc, #72]	; (800fcfc <tcp_receive+0xd04>)
 800fcb2:	681b      	ldr	r3, [r3, #0]
 800fcb4:	1ad3      	subs	r3, r2, r3
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	dd12      	ble.n	800fce0 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800fcba:	4b10      	ldr	r3, [pc, #64]	; (800fcfc <tcp_receive+0xd04>)
 800fcbc:	681b      	ldr	r3, [r3, #0]
 800fcbe:	b29a      	uxth	r2, r3
 800fcc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fcc2:	68db      	ldr	r3, [r3, #12]
 800fcc4:	685b      	ldr	r3, [r3, #4]
 800fcc6:	b29b      	uxth	r3, r3
 800fcc8:	1ad3      	subs	r3, r2, r3
 800fcca:	b29a      	uxth	r2, r3
 800fccc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fcce:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800fcd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fcd2:	685a      	ldr	r2, [r3, #4]
 800fcd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fcd6:	891b      	ldrh	r3, [r3, #8]
 800fcd8:	4619      	mov	r1, r3
 800fcda:	4610      	mov	r0, r2
 800fcdc:	f7fb fc86 	bl	800b5ec <pbuf_realloc>
                    }
                    prev->next = cseg;
 800fce0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fce2:	69fa      	ldr	r2, [r7, #28]
 800fce4:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800fce6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fce8:	69f8      	ldr	r0, [r7, #28]
 800fcea:	f7ff f881 	bl	800edf0 <tcp_oos_insert_segment>
                  }
                  break;
 800fcee:	e0e2      	b.n	800feb6 <tcp_receive+0xebe>
 800fcf0:	20008bec 	.word	0x20008bec
 800fcf4:	20008be9 	.word	0x20008be9
 800fcf8:	20008bbc 	.word	0x20008bbc
 800fcfc:	20008bdc 	.word	0x20008bdc
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800fd00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd02:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800fd04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd06:	681b      	ldr	r3, [r3, #0]
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	f040 80c6 	bne.w	800fe9a <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800fd0e:	4b80      	ldr	r3, [pc, #512]	; (800ff10 <tcp_receive+0xf18>)
 800fd10:	681a      	ldr	r2, [r3, #0]
 800fd12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd14:	68db      	ldr	r3, [r3, #12]
 800fd16:	685b      	ldr	r3, [r3, #4]
 800fd18:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800fd1a:	2b00      	cmp	r3, #0
 800fd1c:	f340 80bd 	ble.w	800fe9a <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800fd20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd22:	68db      	ldr	r3, [r3, #12]
 800fd24:	899b      	ldrh	r3, [r3, #12]
 800fd26:	b29b      	uxth	r3, r3
 800fd28:	4618      	mov	r0, r3
 800fd2a:	f7fa fa87 	bl	800a23c <lwip_htons>
 800fd2e:	4603      	mov	r3, r0
 800fd30:	b2db      	uxtb	r3, r3
 800fd32:	f003 0301 	and.w	r3, r3, #1
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	f040 80bf 	bne.w	800feba <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800fd3c:	4875      	ldr	r0, [pc, #468]	; (800ff14 <tcp_receive+0xf1c>)
 800fd3e:	f7fd fa3f 	bl	800d1c0 <tcp_seg_copy>
 800fd42:	4602      	mov	r2, r0
 800fd44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd46:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800fd48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd4a:	681b      	ldr	r3, [r3, #0]
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	f000 80b6 	beq.w	800febe <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800fd52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd54:	68db      	ldr	r3, [r3, #12]
 800fd56:	685b      	ldr	r3, [r3, #4]
 800fd58:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fd5a:	8912      	ldrh	r2, [r2, #8]
 800fd5c:	441a      	add	r2, r3
 800fd5e:	4b6c      	ldr	r3, [pc, #432]	; (800ff10 <tcp_receive+0xf18>)
 800fd60:	681b      	ldr	r3, [r3, #0]
 800fd62:	1ad3      	subs	r3, r2, r3
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	dd12      	ble.n	800fd8e <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800fd68:	4b69      	ldr	r3, [pc, #420]	; (800ff10 <tcp_receive+0xf18>)
 800fd6a:	681b      	ldr	r3, [r3, #0]
 800fd6c:	b29a      	uxth	r2, r3
 800fd6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd70:	68db      	ldr	r3, [r3, #12]
 800fd72:	685b      	ldr	r3, [r3, #4]
 800fd74:	b29b      	uxth	r3, r3
 800fd76:	1ad3      	subs	r3, r2, r3
 800fd78:	b29a      	uxth	r2, r3
 800fd7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd7c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800fd7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd80:	685a      	ldr	r2, [r3, #4]
 800fd82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd84:	891b      	ldrh	r3, [r3, #8]
 800fd86:	4619      	mov	r1, r3
 800fd88:	4610      	mov	r0, r2
 800fd8a:	f7fb fc2f 	bl	800b5ec <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800fd8e:	4b62      	ldr	r3, [pc, #392]	; (800ff18 <tcp_receive+0xf20>)
 800fd90:	881b      	ldrh	r3, [r3, #0]
 800fd92:	461a      	mov	r2, r3
 800fd94:	4b5e      	ldr	r3, [pc, #376]	; (800ff10 <tcp_receive+0xf18>)
 800fd96:	681b      	ldr	r3, [r3, #0]
 800fd98:	441a      	add	r2, r3
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd9e:	6879      	ldr	r1, [r7, #4]
 800fda0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fda2:	440b      	add	r3, r1
 800fda4:	1ad3      	subs	r3, r2, r3
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	f340 8089 	ble.w	800febe <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800fdac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	68db      	ldr	r3, [r3, #12]
 800fdb2:	899b      	ldrh	r3, [r3, #12]
 800fdb4:	b29b      	uxth	r3, r3
 800fdb6:	4618      	mov	r0, r3
 800fdb8:	f7fa fa40 	bl	800a23c <lwip_htons>
 800fdbc:	4603      	mov	r3, r0
 800fdbe:	b2db      	uxtb	r3, r3
 800fdc0:	f003 0301 	and.w	r3, r3, #1
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	d022      	beq.n	800fe0e <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800fdc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdca:	681b      	ldr	r3, [r3, #0]
 800fdcc:	68db      	ldr	r3, [r3, #12]
 800fdce:	899b      	ldrh	r3, [r3, #12]
 800fdd0:	b29b      	uxth	r3, r3
 800fdd2:	b21b      	sxth	r3, r3
 800fdd4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800fdd8:	b21c      	sxth	r4, r3
 800fdda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fddc:	681b      	ldr	r3, [r3, #0]
 800fdde:	68db      	ldr	r3, [r3, #12]
 800fde0:	899b      	ldrh	r3, [r3, #12]
 800fde2:	b29b      	uxth	r3, r3
 800fde4:	4618      	mov	r0, r3
 800fde6:	f7fa fa29 	bl	800a23c <lwip_htons>
 800fdea:	4603      	mov	r3, r0
 800fdec:	b2db      	uxtb	r3, r3
 800fdee:	b29b      	uxth	r3, r3
 800fdf0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800fdf4:	b29b      	uxth	r3, r3
 800fdf6:	4618      	mov	r0, r3
 800fdf8:	f7fa fa20 	bl	800a23c <lwip_htons>
 800fdfc:	4603      	mov	r3, r0
 800fdfe:	b21b      	sxth	r3, r3
 800fe00:	4323      	orrs	r3, r4
 800fe02:	b21a      	sxth	r2, r3
 800fe04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe06:	681b      	ldr	r3, [r3, #0]
 800fe08:	68db      	ldr	r3, [r3, #12]
 800fe0a:	b292      	uxth	r2, r2
 800fe0c:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe12:	b29a      	uxth	r2, r3
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fe18:	4413      	add	r3, r2
 800fe1a:	b299      	uxth	r1, r3
 800fe1c:	4b3c      	ldr	r3, [pc, #240]	; (800ff10 <tcp_receive+0xf18>)
 800fe1e:	681b      	ldr	r3, [r3, #0]
 800fe20:	b29a      	uxth	r2, r3
 800fe22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe24:	681b      	ldr	r3, [r3, #0]
 800fe26:	1a8a      	subs	r2, r1, r2
 800fe28:	b292      	uxth	r2, r2
 800fe2a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800fe2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe2e:	681b      	ldr	r3, [r3, #0]
 800fe30:	685a      	ldr	r2, [r3, #4]
 800fe32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe34:	681b      	ldr	r3, [r3, #0]
 800fe36:	891b      	ldrh	r3, [r3, #8]
 800fe38:	4619      	mov	r1, r3
 800fe3a:	4610      	mov	r0, r2
 800fe3c:	f7fb fbd6 	bl	800b5ec <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800fe40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe42:	681b      	ldr	r3, [r3, #0]
 800fe44:	891c      	ldrh	r4, [r3, #8]
 800fe46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe48:	681b      	ldr	r3, [r3, #0]
 800fe4a:	68db      	ldr	r3, [r3, #12]
 800fe4c:	899b      	ldrh	r3, [r3, #12]
 800fe4e:	b29b      	uxth	r3, r3
 800fe50:	4618      	mov	r0, r3
 800fe52:	f7fa f9f3 	bl	800a23c <lwip_htons>
 800fe56:	4603      	mov	r3, r0
 800fe58:	b2db      	uxtb	r3, r3
 800fe5a:	f003 0303 	and.w	r3, r3, #3
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	d001      	beq.n	800fe66 <tcp_receive+0xe6e>
 800fe62:	2301      	movs	r3, #1
 800fe64:	e000      	b.n	800fe68 <tcp_receive+0xe70>
 800fe66:	2300      	movs	r3, #0
 800fe68:	4423      	add	r3, r4
 800fe6a:	b29a      	uxth	r2, r3
 800fe6c:	4b2a      	ldr	r3, [pc, #168]	; (800ff18 <tcp_receive+0xf20>)
 800fe6e:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800fe70:	4b29      	ldr	r3, [pc, #164]	; (800ff18 <tcp_receive+0xf20>)
 800fe72:	881b      	ldrh	r3, [r3, #0]
 800fe74:	461a      	mov	r2, r3
 800fe76:	4b26      	ldr	r3, [pc, #152]	; (800ff10 <tcp_receive+0xf18>)
 800fe78:	681b      	ldr	r3, [r3, #0]
 800fe7a:	441a      	add	r2, r3
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe80:	6879      	ldr	r1, [r7, #4]
 800fe82:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fe84:	440b      	add	r3, r1
 800fe86:	429a      	cmp	r2, r3
 800fe88:	d019      	beq.n	800febe <tcp_receive+0xec6>
 800fe8a:	4b24      	ldr	r3, [pc, #144]	; (800ff1c <tcp_receive+0xf24>)
 800fe8c:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800fe90:	4923      	ldr	r1, [pc, #140]	; (800ff20 <tcp_receive+0xf28>)
 800fe92:	4824      	ldr	r0, [pc, #144]	; (800ff24 <tcp_receive+0xf2c>)
 800fe94:	f004 fe40 	bl	8014b18 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800fe98:	e011      	b.n	800febe <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800fe9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe9c:	681b      	ldr	r3, [r3, #0]
 800fe9e:	63bb      	str	r3, [r7, #56]	; 0x38
 800fea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fea2:	2b00      	cmp	r3, #0
 800fea4:	f47f aea4 	bne.w	800fbf0 <tcp_receive+0xbf8>
 800fea8:	e00a      	b.n	800fec0 <tcp_receive+0xec8>
                break;
 800feaa:	bf00      	nop
 800feac:	e008      	b.n	800fec0 <tcp_receive+0xec8>
                break;
 800feae:	bf00      	nop
 800feb0:	e006      	b.n	800fec0 <tcp_receive+0xec8>
                  break;
 800feb2:	bf00      	nop
 800feb4:	e004      	b.n	800fec0 <tcp_receive+0xec8>
                  break;
 800feb6:	bf00      	nop
 800feb8:	e002      	b.n	800fec0 <tcp_receive+0xec8>
                  break;
 800feba:	bf00      	nop
 800febc:	e000      	b.n	800fec0 <tcp_receive+0xec8>
                break;
 800febe:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800fec0:	6878      	ldr	r0, [r7, #4]
 800fec2:	f001 fe8b 	bl	8011bdc <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800fec6:	e003      	b.n	800fed0 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800fec8:	6878      	ldr	r0, [r7, #4]
 800feca:	f001 fe87 	bl	8011bdc <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800fece:	e01a      	b.n	800ff06 <tcp_receive+0xf0e>
 800fed0:	e019      	b.n	800ff06 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800fed2:	4b0f      	ldr	r3, [pc, #60]	; (800ff10 <tcp_receive+0xf18>)
 800fed4:	681a      	ldr	r2, [r3, #0]
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800feda:	1ad3      	subs	r3, r2, r3
 800fedc:	2b00      	cmp	r3, #0
 800fede:	db0a      	blt.n	800fef6 <tcp_receive+0xefe>
 800fee0:	4b0b      	ldr	r3, [pc, #44]	; (800ff10 <tcp_receive+0xf18>)
 800fee2:	681a      	ldr	r2, [r3, #0]
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fee8:	6879      	ldr	r1, [r7, #4]
 800feea:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800feec:	440b      	add	r3, r1
 800feee:	1ad3      	subs	r3, r2, r3
 800fef0:	3301      	adds	r3, #1
 800fef2:	2b00      	cmp	r3, #0
 800fef4:	dd07      	ble.n	800ff06 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	8b5b      	ldrh	r3, [r3, #26]
 800fefa:	f043 0302 	orr.w	r3, r3, #2
 800fefe:	b29a      	uxth	r2, r3
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800ff04:	e7ff      	b.n	800ff06 <tcp_receive+0xf0e>
 800ff06:	bf00      	nop
 800ff08:	3750      	adds	r7, #80	; 0x50
 800ff0a:	46bd      	mov	sp, r7
 800ff0c:	bdb0      	pop	{r4, r5, r7, pc}
 800ff0e:	bf00      	nop
 800ff10:	20008bdc 	.word	0x20008bdc
 800ff14:	20008bbc 	.word	0x20008bbc
 800ff18:	20008be6 	.word	0x20008be6
 800ff1c:	08017358 	.word	0x08017358
 800ff20:	08017700 	.word	0x08017700
 800ff24:	080173a4 	.word	0x080173a4

0800ff28 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800ff28:	b480      	push	{r7}
 800ff2a:	b083      	sub	sp, #12
 800ff2c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800ff2e:	4b15      	ldr	r3, [pc, #84]	; (800ff84 <tcp_get_next_optbyte+0x5c>)
 800ff30:	881b      	ldrh	r3, [r3, #0]
 800ff32:	1c5a      	adds	r2, r3, #1
 800ff34:	b291      	uxth	r1, r2
 800ff36:	4a13      	ldr	r2, [pc, #76]	; (800ff84 <tcp_get_next_optbyte+0x5c>)
 800ff38:	8011      	strh	r1, [r2, #0]
 800ff3a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800ff3c:	4b12      	ldr	r3, [pc, #72]	; (800ff88 <tcp_get_next_optbyte+0x60>)
 800ff3e:	681b      	ldr	r3, [r3, #0]
 800ff40:	2b00      	cmp	r3, #0
 800ff42:	d004      	beq.n	800ff4e <tcp_get_next_optbyte+0x26>
 800ff44:	4b11      	ldr	r3, [pc, #68]	; (800ff8c <tcp_get_next_optbyte+0x64>)
 800ff46:	881b      	ldrh	r3, [r3, #0]
 800ff48:	88fa      	ldrh	r2, [r7, #6]
 800ff4a:	429a      	cmp	r2, r3
 800ff4c:	d208      	bcs.n	800ff60 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800ff4e:	4b10      	ldr	r3, [pc, #64]	; (800ff90 <tcp_get_next_optbyte+0x68>)
 800ff50:	681b      	ldr	r3, [r3, #0]
 800ff52:	3314      	adds	r3, #20
 800ff54:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800ff56:	88fb      	ldrh	r3, [r7, #6]
 800ff58:	683a      	ldr	r2, [r7, #0]
 800ff5a:	4413      	add	r3, r2
 800ff5c:	781b      	ldrb	r3, [r3, #0]
 800ff5e:	e00b      	b.n	800ff78 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800ff60:	88fb      	ldrh	r3, [r7, #6]
 800ff62:	b2da      	uxtb	r2, r3
 800ff64:	4b09      	ldr	r3, [pc, #36]	; (800ff8c <tcp_get_next_optbyte+0x64>)
 800ff66:	881b      	ldrh	r3, [r3, #0]
 800ff68:	b2db      	uxtb	r3, r3
 800ff6a:	1ad3      	subs	r3, r2, r3
 800ff6c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800ff6e:	4b06      	ldr	r3, [pc, #24]	; (800ff88 <tcp_get_next_optbyte+0x60>)
 800ff70:	681a      	ldr	r2, [r3, #0]
 800ff72:	797b      	ldrb	r3, [r7, #5]
 800ff74:	4413      	add	r3, r2
 800ff76:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ff78:	4618      	mov	r0, r3
 800ff7a:	370c      	adds	r7, #12
 800ff7c:	46bd      	mov	sp, r7
 800ff7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff82:	4770      	bx	lr
 800ff84:	20008bd8 	.word	0x20008bd8
 800ff88:	20008bd4 	.word	0x20008bd4
 800ff8c:	20008bd2 	.word	0x20008bd2
 800ff90:	20008bcc 	.word	0x20008bcc

0800ff94 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800ff94:	b580      	push	{r7, lr}
 800ff96:	b084      	sub	sp, #16
 800ff98:	af00      	add	r7, sp, #0
 800ff9a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	2b00      	cmp	r3, #0
 800ffa0:	d106      	bne.n	800ffb0 <tcp_parseopt+0x1c>
 800ffa2:	4b32      	ldr	r3, [pc, #200]	; (801006c <tcp_parseopt+0xd8>)
 800ffa4:	f240 727d 	movw	r2, #1917	; 0x77d
 800ffa8:	4931      	ldr	r1, [pc, #196]	; (8010070 <tcp_parseopt+0xdc>)
 800ffaa:	4832      	ldr	r0, [pc, #200]	; (8010074 <tcp_parseopt+0xe0>)
 800ffac:	f004 fdb4 	bl	8014b18 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800ffb0:	4b31      	ldr	r3, [pc, #196]	; (8010078 <tcp_parseopt+0xe4>)
 800ffb2:	881b      	ldrh	r3, [r3, #0]
 800ffb4:	2b00      	cmp	r3, #0
 800ffb6:	d055      	beq.n	8010064 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800ffb8:	4b30      	ldr	r3, [pc, #192]	; (801007c <tcp_parseopt+0xe8>)
 800ffba:	2200      	movs	r2, #0
 800ffbc:	801a      	strh	r2, [r3, #0]
 800ffbe:	e045      	b.n	801004c <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800ffc0:	f7ff ffb2 	bl	800ff28 <tcp_get_next_optbyte>
 800ffc4:	4603      	mov	r3, r0
 800ffc6:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800ffc8:	7bfb      	ldrb	r3, [r7, #15]
 800ffca:	2b02      	cmp	r3, #2
 800ffcc:	d006      	beq.n	800ffdc <tcp_parseopt+0x48>
 800ffce:	2b02      	cmp	r3, #2
 800ffd0:	dc2b      	bgt.n	801002a <tcp_parseopt+0x96>
 800ffd2:	2b00      	cmp	r3, #0
 800ffd4:	d041      	beq.n	801005a <tcp_parseopt+0xc6>
 800ffd6:	2b01      	cmp	r3, #1
 800ffd8:	d127      	bne.n	801002a <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800ffda:	e037      	b.n	801004c <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800ffdc:	f7ff ffa4 	bl	800ff28 <tcp_get_next_optbyte>
 800ffe0:	4603      	mov	r3, r0
 800ffe2:	2b04      	cmp	r3, #4
 800ffe4:	d13b      	bne.n	801005e <tcp_parseopt+0xca>
 800ffe6:	4b25      	ldr	r3, [pc, #148]	; (801007c <tcp_parseopt+0xe8>)
 800ffe8:	881b      	ldrh	r3, [r3, #0]
 800ffea:	3301      	adds	r3, #1
 800ffec:	4a22      	ldr	r2, [pc, #136]	; (8010078 <tcp_parseopt+0xe4>)
 800ffee:	8812      	ldrh	r2, [r2, #0]
 800fff0:	4293      	cmp	r3, r2
 800fff2:	da34      	bge.n	801005e <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800fff4:	f7ff ff98 	bl	800ff28 <tcp_get_next_optbyte>
 800fff8:	4603      	mov	r3, r0
 800fffa:	b29b      	uxth	r3, r3
 800fffc:	021b      	lsls	r3, r3, #8
 800fffe:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8010000:	f7ff ff92 	bl	800ff28 <tcp_get_next_optbyte>
 8010004:	4603      	mov	r3, r0
 8010006:	b29a      	uxth	r2, r3
 8010008:	89bb      	ldrh	r3, [r7, #12]
 801000a:	4313      	orrs	r3, r2
 801000c:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801000e:	89bb      	ldrh	r3, [r7, #12]
 8010010:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8010014:	d804      	bhi.n	8010020 <tcp_parseopt+0x8c>
 8010016:	89bb      	ldrh	r3, [r7, #12]
 8010018:	2b00      	cmp	r3, #0
 801001a:	d001      	beq.n	8010020 <tcp_parseopt+0x8c>
 801001c:	89ba      	ldrh	r2, [r7, #12]
 801001e:	e001      	b.n	8010024 <tcp_parseopt+0x90>
 8010020:	f44f 7206 	mov.w	r2, #536	; 0x218
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8010028:	e010      	b.n	801004c <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 801002a:	f7ff ff7d 	bl	800ff28 <tcp_get_next_optbyte>
 801002e:	4603      	mov	r3, r0
 8010030:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8010032:	7afb      	ldrb	r3, [r7, #11]
 8010034:	2b01      	cmp	r3, #1
 8010036:	d914      	bls.n	8010062 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8010038:	7afb      	ldrb	r3, [r7, #11]
 801003a:	b29a      	uxth	r2, r3
 801003c:	4b0f      	ldr	r3, [pc, #60]	; (801007c <tcp_parseopt+0xe8>)
 801003e:	881b      	ldrh	r3, [r3, #0]
 8010040:	4413      	add	r3, r2
 8010042:	b29b      	uxth	r3, r3
 8010044:	3b02      	subs	r3, #2
 8010046:	b29a      	uxth	r2, r3
 8010048:	4b0c      	ldr	r3, [pc, #48]	; (801007c <tcp_parseopt+0xe8>)
 801004a:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801004c:	4b0b      	ldr	r3, [pc, #44]	; (801007c <tcp_parseopt+0xe8>)
 801004e:	881a      	ldrh	r2, [r3, #0]
 8010050:	4b09      	ldr	r3, [pc, #36]	; (8010078 <tcp_parseopt+0xe4>)
 8010052:	881b      	ldrh	r3, [r3, #0]
 8010054:	429a      	cmp	r2, r3
 8010056:	d3b3      	bcc.n	800ffc0 <tcp_parseopt+0x2c>
 8010058:	e004      	b.n	8010064 <tcp_parseopt+0xd0>
          return;
 801005a:	bf00      	nop
 801005c:	e002      	b.n	8010064 <tcp_parseopt+0xd0>
            return;
 801005e:	bf00      	nop
 8010060:	e000      	b.n	8010064 <tcp_parseopt+0xd0>
            return;
 8010062:	bf00      	nop
      }
    }
  }
}
 8010064:	3710      	adds	r7, #16
 8010066:	46bd      	mov	sp, r7
 8010068:	bd80      	pop	{r7, pc}
 801006a:	bf00      	nop
 801006c:	08017358 	.word	0x08017358
 8010070:	080177bc 	.word	0x080177bc
 8010074:	080173a4 	.word	0x080173a4
 8010078:	20008bd0 	.word	0x20008bd0
 801007c:	20008bd8 	.word	0x20008bd8

08010080 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8010080:	b480      	push	{r7}
 8010082:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8010084:	4b05      	ldr	r3, [pc, #20]	; (801009c <tcp_trigger_input_pcb_close+0x1c>)
 8010086:	781b      	ldrb	r3, [r3, #0]
 8010088:	f043 0310 	orr.w	r3, r3, #16
 801008c:	b2da      	uxtb	r2, r3
 801008e:	4b03      	ldr	r3, [pc, #12]	; (801009c <tcp_trigger_input_pcb_close+0x1c>)
 8010090:	701a      	strb	r2, [r3, #0]
}
 8010092:	bf00      	nop
 8010094:	46bd      	mov	sp, r7
 8010096:	f85d 7b04 	ldr.w	r7, [sp], #4
 801009a:	4770      	bx	lr
 801009c:	20008be9 	.word	0x20008be9

080100a0 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80100a0:	b580      	push	{r7, lr}
 80100a2:	b084      	sub	sp, #16
 80100a4:	af00      	add	r7, sp, #0
 80100a6:	60f8      	str	r0, [r7, #12]
 80100a8:	60b9      	str	r1, [r7, #8]
 80100aa:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80100ac:	68fb      	ldr	r3, [r7, #12]
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	d00a      	beq.n	80100c8 <tcp_route+0x28>
 80100b2:	68fb      	ldr	r3, [r7, #12]
 80100b4:	7a1b      	ldrb	r3, [r3, #8]
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	d006      	beq.n	80100c8 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 80100ba:	68fb      	ldr	r3, [r7, #12]
 80100bc:	7a1b      	ldrb	r3, [r3, #8]
 80100be:	4618      	mov	r0, r3
 80100c0:	f7fb f8ba 	bl	800b238 <netif_get_by_index>
 80100c4:	4603      	mov	r3, r0
 80100c6:	e003      	b.n	80100d0 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80100c8:	6878      	ldr	r0, [r7, #4]
 80100ca:	f003 fad5 	bl	8013678 <ip4_route>
 80100ce:	4603      	mov	r3, r0
  }
}
 80100d0:	4618      	mov	r0, r3
 80100d2:	3710      	adds	r7, #16
 80100d4:	46bd      	mov	sp, r7
 80100d6:	bd80      	pop	{r7, pc}

080100d8 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 80100d8:	b590      	push	{r4, r7, lr}
 80100da:	b087      	sub	sp, #28
 80100dc:	af00      	add	r7, sp, #0
 80100de:	60f8      	str	r0, [r7, #12]
 80100e0:	60b9      	str	r1, [r7, #8]
 80100e2:	603b      	str	r3, [r7, #0]
 80100e4:	4613      	mov	r3, r2
 80100e6:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80100e8:	68fb      	ldr	r3, [r7, #12]
 80100ea:	2b00      	cmp	r3, #0
 80100ec:	d105      	bne.n	80100fa <tcp_create_segment+0x22>
 80100ee:	4b44      	ldr	r3, [pc, #272]	; (8010200 <tcp_create_segment+0x128>)
 80100f0:	22a3      	movs	r2, #163	; 0xa3
 80100f2:	4944      	ldr	r1, [pc, #272]	; (8010204 <tcp_create_segment+0x12c>)
 80100f4:	4844      	ldr	r0, [pc, #272]	; (8010208 <tcp_create_segment+0x130>)
 80100f6:	f004 fd0f 	bl	8014b18 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80100fa:	68bb      	ldr	r3, [r7, #8]
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	d105      	bne.n	801010c <tcp_create_segment+0x34>
 8010100:	4b3f      	ldr	r3, [pc, #252]	; (8010200 <tcp_create_segment+0x128>)
 8010102:	22a4      	movs	r2, #164	; 0xa4
 8010104:	4941      	ldr	r1, [pc, #260]	; (801020c <tcp_create_segment+0x134>)
 8010106:	4840      	ldr	r0, [pc, #256]	; (8010208 <tcp_create_segment+0x130>)
 8010108:	f004 fd06 	bl	8014b18 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801010c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010110:	009b      	lsls	r3, r3, #2
 8010112:	b2db      	uxtb	r3, r3
 8010114:	f003 0304 	and.w	r3, r3, #4
 8010118:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801011a:	2003      	movs	r0, #3
 801011c:	f7fa fd06 	bl	800ab2c <memp_malloc>
 8010120:	6138      	str	r0, [r7, #16]
 8010122:	693b      	ldr	r3, [r7, #16]
 8010124:	2b00      	cmp	r3, #0
 8010126:	d104      	bne.n	8010132 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8010128:	68b8      	ldr	r0, [r7, #8]
 801012a:	f7fb fbe5 	bl	800b8f8 <pbuf_free>
    return NULL;
 801012e:	2300      	movs	r3, #0
 8010130:	e061      	b.n	80101f6 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8010132:	693b      	ldr	r3, [r7, #16]
 8010134:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8010138:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801013a:	693b      	ldr	r3, [r7, #16]
 801013c:	2200      	movs	r2, #0
 801013e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8010140:	693b      	ldr	r3, [r7, #16]
 8010142:	68ba      	ldr	r2, [r7, #8]
 8010144:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8010146:	68bb      	ldr	r3, [r7, #8]
 8010148:	891a      	ldrh	r2, [r3, #8]
 801014a:	7dfb      	ldrb	r3, [r7, #23]
 801014c:	b29b      	uxth	r3, r3
 801014e:	429a      	cmp	r2, r3
 8010150:	d205      	bcs.n	801015e <tcp_create_segment+0x86>
 8010152:	4b2b      	ldr	r3, [pc, #172]	; (8010200 <tcp_create_segment+0x128>)
 8010154:	22b0      	movs	r2, #176	; 0xb0
 8010156:	492e      	ldr	r1, [pc, #184]	; (8010210 <tcp_create_segment+0x138>)
 8010158:	482b      	ldr	r0, [pc, #172]	; (8010208 <tcp_create_segment+0x130>)
 801015a:	f004 fcdd 	bl	8014b18 <iprintf>
  seg->len = p->tot_len - optlen;
 801015e:	68bb      	ldr	r3, [r7, #8]
 8010160:	891a      	ldrh	r2, [r3, #8]
 8010162:	7dfb      	ldrb	r3, [r7, #23]
 8010164:	b29b      	uxth	r3, r3
 8010166:	1ad3      	subs	r3, r2, r3
 8010168:	b29a      	uxth	r2, r3
 801016a:	693b      	ldr	r3, [r7, #16]
 801016c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801016e:	2114      	movs	r1, #20
 8010170:	68b8      	ldr	r0, [r7, #8]
 8010172:	f7fb fb2b 	bl	800b7cc <pbuf_add_header>
 8010176:	4603      	mov	r3, r0
 8010178:	2b00      	cmp	r3, #0
 801017a:	d004      	beq.n	8010186 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 801017c:	6938      	ldr	r0, [r7, #16]
 801017e:	f7fc ffe8 	bl	800d152 <tcp_seg_free>
    return NULL;
 8010182:	2300      	movs	r3, #0
 8010184:	e037      	b.n	80101f6 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8010186:	693b      	ldr	r3, [r7, #16]
 8010188:	685b      	ldr	r3, [r3, #4]
 801018a:	685a      	ldr	r2, [r3, #4]
 801018c:	693b      	ldr	r3, [r7, #16]
 801018e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8010190:	68fb      	ldr	r3, [r7, #12]
 8010192:	8ada      	ldrh	r2, [r3, #22]
 8010194:	693b      	ldr	r3, [r7, #16]
 8010196:	68dc      	ldr	r4, [r3, #12]
 8010198:	4610      	mov	r0, r2
 801019a:	f7fa f84f 	bl	800a23c <lwip_htons>
 801019e:	4603      	mov	r3, r0
 80101a0:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80101a2:	68fb      	ldr	r3, [r7, #12]
 80101a4:	8b1a      	ldrh	r2, [r3, #24]
 80101a6:	693b      	ldr	r3, [r7, #16]
 80101a8:	68dc      	ldr	r4, [r3, #12]
 80101aa:	4610      	mov	r0, r2
 80101ac:	f7fa f846 	bl	800a23c <lwip_htons>
 80101b0:	4603      	mov	r3, r0
 80101b2:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80101b4:	693b      	ldr	r3, [r7, #16]
 80101b6:	68dc      	ldr	r4, [r3, #12]
 80101b8:	6838      	ldr	r0, [r7, #0]
 80101ba:	f7fa f854 	bl	800a266 <lwip_htonl>
 80101be:	4603      	mov	r3, r0
 80101c0:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80101c2:	7dfb      	ldrb	r3, [r7, #23]
 80101c4:	089b      	lsrs	r3, r3, #2
 80101c6:	b2db      	uxtb	r3, r3
 80101c8:	b29b      	uxth	r3, r3
 80101ca:	3305      	adds	r3, #5
 80101cc:	b29b      	uxth	r3, r3
 80101ce:	031b      	lsls	r3, r3, #12
 80101d0:	b29a      	uxth	r2, r3
 80101d2:	79fb      	ldrb	r3, [r7, #7]
 80101d4:	b29b      	uxth	r3, r3
 80101d6:	4313      	orrs	r3, r2
 80101d8:	b29a      	uxth	r2, r3
 80101da:	693b      	ldr	r3, [r7, #16]
 80101dc:	68dc      	ldr	r4, [r3, #12]
 80101de:	4610      	mov	r0, r2
 80101e0:	f7fa f82c 	bl	800a23c <lwip_htons>
 80101e4:	4603      	mov	r3, r0
 80101e6:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80101e8:	693b      	ldr	r3, [r7, #16]
 80101ea:	68db      	ldr	r3, [r3, #12]
 80101ec:	2200      	movs	r2, #0
 80101ee:	749a      	strb	r2, [r3, #18]
 80101f0:	2200      	movs	r2, #0
 80101f2:	74da      	strb	r2, [r3, #19]
  return seg;
 80101f4:	693b      	ldr	r3, [r7, #16]
}
 80101f6:	4618      	mov	r0, r3
 80101f8:	371c      	adds	r7, #28
 80101fa:	46bd      	mov	sp, r7
 80101fc:	bd90      	pop	{r4, r7, pc}
 80101fe:	bf00      	nop
 8010200:	080177d8 	.word	0x080177d8
 8010204:	0801780c 	.word	0x0801780c
 8010208:	0801782c 	.word	0x0801782c
 801020c:	08017854 	.word	0x08017854
 8010210:	08017878 	.word	0x08017878

08010214 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8010214:	b580      	push	{r7, lr}
 8010216:	b086      	sub	sp, #24
 8010218:	af00      	add	r7, sp, #0
 801021a:	607b      	str	r3, [r7, #4]
 801021c:	4603      	mov	r3, r0
 801021e:	73fb      	strb	r3, [r7, #15]
 8010220:	460b      	mov	r3, r1
 8010222:	81bb      	strh	r3, [r7, #12]
 8010224:	4613      	mov	r3, r2
 8010226:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8010228:	89bb      	ldrh	r3, [r7, #12]
 801022a:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	2b00      	cmp	r3, #0
 8010230:	d105      	bne.n	801023e <tcp_pbuf_prealloc+0x2a>
 8010232:	4b30      	ldr	r3, [pc, #192]	; (80102f4 <tcp_pbuf_prealloc+0xe0>)
 8010234:	22e8      	movs	r2, #232	; 0xe8
 8010236:	4930      	ldr	r1, [pc, #192]	; (80102f8 <tcp_pbuf_prealloc+0xe4>)
 8010238:	4830      	ldr	r0, [pc, #192]	; (80102fc <tcp_pbuf_prealloc+0xe8>)
 801023a:	f004 fc6d 	bl	8014b18 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801023e:	6a3b      	ldr	r3, [r7, #32]
 8010240:	2b00      	cmp	r3, #0
 8010242:	d105      	bne.n	8010250 <tcp_pbuf_prealloc+0x3c>
 8010244:	4b2b      	ldr	r3, [pc, #172]	; (80102f4 <tcp_pbuf_prealloc+0xe0>)
 8010246:	22e9      	movs	r2, #233	; 0xe9
 8010248:	492d      	ldr	r1, [pc, #180]	; (8010300 <tcp_pbuf_prealloc+0xec>)
 801024a:	482c      	ldr	r0, [pc, #176]	; (80102fc <tcp_pbuf_prealloc+0xe8>)
 801024c:	f004 fc64 	bl	8014b18 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8010250:	89ba      	ldrh	r2, [r7, #12]
 8010252:	897b      	ldrh	r3, [r7, #10]
 8010254:	429a      	cmp	r2, r3
 8010256:	d221      	bcs.n	801029c <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8010258:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801025c:	f003 0302 	and.w	r3, r3, #2
 8010260:	2b00      	cmp	r3, #0
 8010262:	d111      	bne.n	8010288 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8010264:	6a3b      	ldr	r3, [r7, #32]
 8010266:	8b5b      	ldrh	r3, [r3, #26]
 8010268:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801026c:	2b00      	cmp	r3, #0
 801026e:	d115      	bne.n	801029c <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8010270:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010274:	2b00      	cmp	r3, #0
 8010276:	d007      	beq.n	8010288 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8010278:	6a3b      	ldr	r3, [r7, #32]
 801027a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 801027c:	2b00      	cmp	r3, #0
 801027e:	d103      	bne.n	8010288 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8010280:	6a3b      	ldr	r3, [r7, #32]
 8010282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8010284:	2b00      	cmp	r3, #0
 8010286:	d009      	beq.n	801029c <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8010288:	89bb      	ldrh	r3, [r7, #12]
 801028a:	f203 231b 	addw	r3, r3, #539	; 0x21b
 801028e:	f023 0203 	bic.w	r2, r3, #3
 8010292:	897b      	ldrh	r3, [r7, #10]
 8010294:	4293      	cmp	r3, r2
 8010296:	bf28      	it	cs
 8010298:	4613      	movcs	r3, r2
 801029a:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 801029c:	8af9      	ldrh	r1, [r7, #22]
 801029e:	7bfb      	ldrb	r3, [r7, #15]
 80102a0:	f44f 7220 	mov.w	r2, #640	; 0x280
 80102a4:	4618      	mov	r0, r3
 80102a6:	f7fb f843 	bl	800b330 <pbuf_alloc>
 80102aa:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80102ac:	693b      	ldr	r3, [r7, #16]
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	d101      	bne.n	80102b6 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 80102b2:	2300      	movs	r3, #0
 80102b4:	e019      	b.n	80102ea <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 80102b6:	693b      	ldr	r3, [r7, #16]
 80102b8:	681b      	ldr	r3, [r3, #0]
 80102ba:	2b00      	cmp	r3, #0
 80102bc:	d006      	beq.n	80102cc <tcp_pbuf_prealloc+0xb8>
 80102be:	4b0d      	ldr	r3, [pc, #52]	; (80102f4 <tcp_pbuf_prealloc+0xe0>)
 80102c0:	f240 120b 	movw	r2, #267	; 0x10b
 80102c4:	490f      	ldr	r1, [pc, #60]	; (8010304 <tcp_pbuf_prealloc+0xf0>)
 80102c6:	480d      	ldr	r0, [pc, #52]	; (80102fc <tcp_pbuf_prealloc+0xe8>)
 80102c8:	f004 fc26 	bl	8014b18 <iprintf>
  *oversize = p->len - length;
 80102cc:	693b      	ldr	r3, [r7, #16]
 80102ce:	895a      	ldrh	r2, [r3, #10]
 80102d0:	89bb      	ldrh	r3, [r7, #12]
 80102d2:	1ad3      	subs	r3, r2, r3
 80102d4:	b29a      	uxth	r2, r3
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 80102da:	693b      	ldr	r3, [r7, #16]
 80102dc:	89ba      	ldrh	r2, [r7, #12]
 80102de:	811a      	strh	r2, [r3, #8]
 80102e0:	693b      	ldr	r3, [r7, #16]
 80102e2:	891a      	ldrh	r2, [r3, #8]
 80102e4:	693b      	ldr	r3, [r7, #16]
 80102e6:	815a      	strh	r2, [r3, #10]
  return p;
 80102e8:	693b      	ldr	r3, [r7, #16]
}
 80102ea:	4618      	mov	r0, r3
 80102ec:	3718      	adds	r7, #24
 80102ee:	46bd      	mov	sp, r7
 80102f0:	bd80      	pop	{r7, pc}
 80102f2:	bf00      	nop
 80102f4:	080177d8 	.word	0x080177d8
 80102f8:	08017890 	.word	0x08017890
 80102fc:	0801782c 	.word	0x0801782c
 8010300:	080178b4 	.word	0x080178b4
 8010304:	080178d4 	.word	0x080178d4

08010308 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8010308:	b580      	push	{r7, lr}
 801030a:	b082      	sub	sp, #8
 801030c:	af00      	add	r7, sp, #0
 801030e:	6078      	str	r0, [r7, #4]
 8010310:	460b      	mov	r3, r1
 8010312:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	2b00      	cmp	r3, #0
 8010318:	d106      	bne.n	8010328 <tcp_write_checks+0x20>
 801031a:	4b33      	ldr	r3, [pc, #204]	; (80103e8 <tcp_write_checks+0xe0>)
 801031c:	f240 1233 	movw	r2, #307	; 0x133
 8010320:	4932      	ldr	r1, [pc, #200]	; (80103ec <tcp_write_checks+0xe4>)
 8010322:	4833      	ldr	r0, [pc, #204]	; (80103f0 <tcp_write_checks+0xe8>)
 8010324:	f004 fbf8 	bl	8014b18 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	7d1b      	ldrb	r3, [r3, #20]
 801032c:	2b04      	cmp	r3, #4
 801032e:	d00e      	beq.n	801034e <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8010334:	2b07      	cmp	r3, #7
 8010336:	d00a      	beq.n	801034e <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 801033c:	2b02      	cmp	r3, #2
 801033e:	d006      	beq.n	801034e <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8010344:	2b03      	cmp	r3, #3
 8010346:	d002      	beq.n	801034e <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8010348:	f06f 030a 	mvn.w	r3, #10
 801034c:	e048      	b.n	80103e0 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 801034e:	887b      	ldrh	r3, [r7, #2]
 8010350:	2b00      	cmp	r3, #0
 8010352:	d101      	bne.n	8010358 <tcp_write_checks+0x50>
    return ERR_OK;
 8010354:	2300      	movs	r3, #0
 8010356:	e043      	b.n	80103e0 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801035e:	887a      	ldrh	r2, [r7, #2]
 8010360:	429a      	cmp	r2, r3
 8010362:	d909      	bls.n	8010378 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	8b5b      	ldrh	r3, [r3, #26]
 8010368:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801036c:	b29a      	uxth	r2, r3
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8010372:	f04f 33ff 	mov.w	r3, #4294967295
 8010376:	e033      	b.n	80103e0 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801037e:	2b08      	cmp	r3, #8
 8010380:	d909      	bls.n	8010396 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	8b5b      	ldrh	r3, [r3, #26]
 8010386:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801038a:	b29a      	uxth	r2, r3
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8010390:	f04f 33ff 	mov.w	r3, #4294967295
 8010394:	e024      	b.n	80103e0 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801039c:	2b00      	cmp	r3, #0
 801039e:	d00f      	beq.n	80103c0 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80103a4:	2b00      	cmp	r3, #0
 80103a6:	d11a      	bne.n	80103de <tcp_write_checks+0xd6>
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80103ac:	2b00      	cmp	r3, #0
 80103ae:	d116      	bne.n	80103de <tcp_write_checks+0xd6>
 80103b0:	4b0d      	ldr	r3, [pc, #52]	; (80103e8 <tcp_write_checks+0xe0>)
 80103b2:	f240 1255 	movw	r2, #341	; 0x155
 80103b6:	490f      	ldr	r1, [pc, #60]	; (80103f4 <tcp_write_checks+0xec>)
 80103b8:	480d      	ldr	r0, [pc, #52]	; (80103f0 <tcp_write_checks+0xe8>)
 80103ba:	f004 fbad 	bl	8014b18 <iprintf>
 80103be:	e00e      	b.n	80103de <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	d103      	bne.n	80103d0 <tcp_write_checks+0xc8>
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	d006      	beq.n	80103de <tcp_write_checks+0xd6>
 80103d0:	4b05      	ldr	r3, [pc, #20]	; (80103e8 <tcp_write_checks+0xe0>)
 80103d2:	f44f 72ac 	mov.w	r2, #344	; 0x158
 80103d6:	4908      	ldr	r1, [pc, #32]	; (80103f8 <tcp_write_checks+0xf0>)
 80103d8:	4805      	ldr	r0, [pc, #20]	; (80103f0 <tcp_write_checks+0xe8>)
 80103da:	f004 fb9d 	bl	8014b18 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 80103de:	2300      	movs	r3, #0
}
 80103e0:	4618      	mov	r0, r3
 80103e2:	3708      	adds	r7, #8
 80103e4:	46bd      	mov	sp, r7
 80103e6:	bd80      	pop	{r7, pc}
 80103e8:	080177d8 	.word	0x080177d8
 80103ec:	080178e8 	.word	0x080178e8
 80103f0:	0801782c 	.word	0x0801782c
 80103f4:	08017908 	.word	0x08017908
 80103f8:	08017944 	.word	0x08017944

080103fc <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 80103fc:	b590      	push	{r4, r7, lr}
 80103fe:	b09b      	sub	sp, #108	; 0x6c
 8010400:	af04      	add	r7, sp, #16
 8010402:	60f8      	str	r0, [r7, #12]
 8010404:	60b9      	str	r1, [r7, #8]
 8010406:	4611      	mov	r1, r2
 8010408:	461a      	mov	r2, r3
 801040a:	460b      	mov	r3, r1
 801040c:	80fb      	strh	r3, [r7, #6]
 801040e:	4613      	mov	r3, r2
 8010410:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8010412:	2300      	movs	r3, #0
 8010414:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8010416:	2300      	movs	r3, #0
 8010418:	653b      	str	r3, [r7, #80]	; 0x50
 801041a:	2300      	movs	r3, #0
 801041c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801041e:	2300      	movs	r3, #0
 8010420:	64bb      	str	r3, [r7, #72]	; 0x48
 8010422:	2300      	movs	r3, #0
 8010424:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8010426:	2300      	movs	r3, #0
 8010428:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 801042c:	2300      	movs	r3, #0
 801042e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8010432:	2300      	movs	r3, #0
 8010434:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8010436:	2300      	movs	r3, #0
 8010438:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 801043a:	2300      	movs	r3, #0
 801043c:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801043e:	68fb      	ldr	r3, [r7, #12]
 8010440:	2b00      	cmp	r3, #0
 8010442:	d109      	bne.n	8010458 <tcp_write+0x5c>
 8010444:	4ba4      	ldr	r3, [pc, #656]	; (80106d8 <tcp_write+0x2dc>)
 8010446:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 801044a:	49a4      	ldr	r1, [pc, #656]	; (80106dc <tcp_write+0x2e0>)
 801044c:	48a4      	ldr	r0, [pc, #656]	; (80106e0 <tcp_write+0x2e4>)
 801044e:	f004 fb63 	bl	8014b18 <iprintf>
 8010452:	f06f 030f 	mvn.w	r3, #15
 8010456:	e32a      	b.n	8010aae <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8010458:	68fb      	ldr	r3, [r7, #12]
 801045a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801045e:	085b      	lsrs	r3, r3, #1
 8010460:	b29a      	uxth	r2, r3
 8010462:	68fb      	ldr	r3, [r7, #12]
 8010464:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010466:	4293      	cmp	r3, r2
 8010468:	bf28      	it	cs
 801046a:	4613      	movcs	r3, r2
 801046c:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 801046e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010470:	2b00      	cmp	r3, #0
 8010472:	d102      	bne.n	801047a <tcp_write+0x7e>
 8010474:	68fb      	ldr	r3, [r7, #12]
 8010476:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010478:	e000      	b.n	801047c <tcp_write+0x80>
 801047a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801047c:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801047e:	68bb      	ldr	r3, [r7, #8]
 8010480:	2b00      	cmp	r3, #0
 8010482:	d109      	bne.n	8010498 <tcp_write+0x9c>
 8010484:	4b94      	ldr	r3, [pc, #592]	; (80106d8 <tcp_write+0x2dc>)
 8010486:	f240 12ad 	movw	r2, #429	; 0x1ad
 801048a:	4996      	ldr	r1, [pc, #600]	; (80106e4 <tcp_write+0x2e8>)
 801048c:	4894      	ldr	r0, [pc, #592]	; (80106e0 <tcp_write+0x2e4>)
 801048e:	f004 fb43 	bl	8014b18 <iprintf>
 8010492:	f06f 030f 	mvn.w	r3, #15
 8010496:	e30a      	b.n	8010aae <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8010498:	88fb      	ldrh	r3, [r7, #6]
 801049a:	4619      	mov	r1, r3
 801049c:	68f8      	ldr	r0, [r7, #12]
 801049e:	f7ff ff33 	bl	8010308 <tcp_write_checks>
 80104a2:	4603      	mov	r3, r0
 80104a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 80104a8:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	d002      	beq.n	80104b6 <tcp_write+0xba>
    return err;
 80104b0:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80104b4:	e2fb      	b.n	8010aae <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 80104b6:	68fb      	ldr	r3, [r7, #12]
 80104b8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80104bc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80104c0:	2300      	movs	r3, #0
 80104c2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 80104c6:	68fb      	ldr	r3, [r7, #12]
 80104c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	f000 80f6 	beq.w	80106bc <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80104d0:	68fb      	ldr	r3, [r7, #12]
 80104d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80104d4:	653b      	str	r3, [r7, #80]	; 0x50
 80104d6:	e002      	b.n	80104de <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 80104d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80104da:	681b      	ldr	r3, [r3, #0]
 80104dc:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80104de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80104e0:	681b      	ldr	r3, [r3, #0]
 80104e2:	2b00      	cmp	r3, #0
 80104e4:	d1f8      	bne.n	80104d8 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 80104e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80104e8:	7a9b      	ldrb	r3, [r3, #10]
 80104ea:	009b      	lsls	r3, r3, #2
 80104ec:	b29b      	uxth	r3, r3
 80104ee:	f003 0304 	and.w	r3, r3, #4
 80104f2:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 80104f4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80104f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80104f8:	891b      	ldrh	r3, [r3, #8]
 80104fa:	4619      	mov	r1, r3
 80104fc:	8c3b      	ldrh	r3, [r7, #32]
 80104fe:	440b      	add	r3, r1
 8010500:	429a      	cmp	r2, r3
 8010502:	da06      	bge.n	8010512 <tcp_write+0x116>
 8010504:	4b74      	ldr	r3, [pc, #464]	; (80106d8 <tcp_write+0x2dc>)
 8010506:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801050a:	4977      	ldr	r1, [pc, #476]	; (80106e8 <tcp_write+0x2ec>)
 801050c:	4874      	ldr	r0, [pc, #464]	; (80106e0 <tcp_write+0x2e4>)
 801050e:	f004 fb03 	bl	8014b18 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8010512:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010514:	891a      	ldrh	r2, [r3, #8]
 8010516:	8c3b      	ldrh	r3, [r7, #32]
 8010518:	4413      	add	r3, r2
 801051a:	b29b      	uxth	r3, r3
 801051c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801051e:	1ad3      	subs	r3, r2, r3
 8010520:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8010522:	68fb      	ldr	r3, [r7, #12]
 8010524:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010528:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 801052a:	8a7b      	ldrh	r3, [r7, #18]
 801052c:	2b00      	cmp	r3, #0
 801052e:	d026      	beq.n	801057e <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8010530:	8a7b      	ldrh	r3, [r7, #18]
 8010532:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010534:	429a      	cmp	r2, r3
 8010536:	d206      	bcs.n	8010546 <tcp_write+0x14a>
 8010538:	4b67      	ldr	r3, [pc, #412]	; (80106d8 <tcp_write+0x2dc>)
 801053a:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 801053e:	496b      	ldr	r1, [pc, #428]	; (80106ec <tcp_write+0x2f0>)
 8010540:	4867      	ldr	r0, [pc, #412]	; (80106e0 <tcp_write+0x2e4>)
 8010542:	f004 fae9 	bl	8014b18 <iprintf>
      seg = last_unsent;
 8010546:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010548:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801054a:	8a7b      	ldrh	r3, [r7, #18]
 801054c:	88fa      	ldrh	r2, [r7, #6]
 801054e:	4293      	cmp	r3, r2
 8010550:	bf28      	it	cs
 8010552:	4613      	movcs	r3, r2
 8010554:	b29b      	uxth	r3, r3
 8010556:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010558:	4293      	cmp	r3, r2
 801055a:	bf28      	it	cs
 801055c:	4613      	movcs	r3, r2
 801055e:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8010560:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010564:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010566:	4413      	add	r3, r2
 8010568:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 801056c:	8a7a      	ldrh	r2, [r7, #18]
 801056e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010570:	1ad3      	subs	r3, r2, r3
 8010572:	b29b      	uxth	r3, r3
 8010574:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8010576:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010578:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801057a:	1ad3      	subs	r3, r2, r3
 801057c:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801057e:	8a7b      	ldrh	r3, [r7, #18]
 8010580:	2b00      	cmp	r3, #0
 8010582:	d00b      	beq.n	801059c <tcp_write+0x1a0>
 8010584:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010588:	88fb      	ldrh	r3, [r7, #6]
 801058a:	429a      	cmp	r2, r3
 801058c:	d006      	beq.n	801059c <tcp_write+0x1a0>
 801058e:	4b52      	ldr	r3, [pc, #328]	; (80106d8 <tcp_write+0x2dc>)
 8010590:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010594:	4956      	ldr	r1, [pc, #344]	; (80106f0 <tcp_write+0x2f4>)
 8010596:	4852      	ldr	r0, [pc, #328]	; (80106e0 <tcp_write+0x2e4>)
 8010598:	f004 fabe 	bl	8014b18 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801059c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80105a0:	88fb      	ldrh	r3, [r7, #6]
 80105a2:	429a      	cmp	r2, r3
 80105a4:	f080 8167 	bcs.w	8010876 <tcp_write+0x47a>
 80105a8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80105aa:	2b00      	cmp	r3, #0
 80105ac:	f000 8163 	beq.w	8010876 <tcp_write+0x47a>
 80105b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80105b2:	891b      	ldrh	r3, [r3, #8]
 80105b4:	2b00      	cmp	r3, #0
 80105b6:	f000 815e 	beq.w	8010876 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 80105ba:	88fa      	ldrh	r2, [r7, #6]
 80105bc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80105c0:	1ad2      	subs	r2, r2, r3
 80105c2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80105c4:	4293      	cmp	r3, r2
 80105c6:	bfa8      	it	ge
 80105c8:	4613      	movge	r3, r2
 80105ca:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 80105cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80105ce:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 80105d0:	797b      	ldrb	r3, [r7, #5]
 80105d2:	f003 0301 	and.w	r3, r3, #1
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	d027      	beq.n	801062a <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 80105da:	f107 0012 	add.w	r0, r7, #18
 80105de:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80105e0:	8bf9      	ldrh	r1, [r7, #30]
 80105e2:	2301      	movs	r3, #1
 80105e4:	9302      	str	r3, [sp, #8]
 80105e6:	797b      	ldrb	r3, [r7, #5]
 80105e8:	9301      	str	r3, [sp, #4]
 80105ea:	68fb      	ldr	r3, [r7, #12]
 80105ec:	9300      	str	r3, [sp, #0]
 80105ee:	4603      	mov	r3, r0
 80105f0:	2000      	movs	r0, #0
 80105f2:	f7ff fe0f 	bl	8010214 <tcp_pbuf_prealloc>
 80105f6:	6578      	str	r0, [r7, #84]	; 0x54
 80105f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80105fa:	2b00      	cmp	r3, #0
 80105fc:	f000 8225 	beq.w	8010a4a <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8010600:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010602:	6858      	ldr	r0, [r3, #4]
 8010604:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010608:	68ba      	ldr	r2, [r7, #8]
 801060a:	4413      	add	r3, r2
 801060c:	8bfa      	ldrh	r2, [r7, #30]
 801060e:	4619      	mov	r1, r3
 8010610:	f004 fa52 	bl	8014ab8 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8010614:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8010616:	f7fb f9f7 	bl	800ba08 <pbuf_clen>
 801061a:	4603      	mov	r3, r0
 801061c:	461a      	mov	r2, r3
 801061e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010622:	4413      	add	r3, r2
 8010624:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8010628:	e041      	b.n	80106ae <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801062a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801062c:	685b      	ldr	r3, [r3, #4]
 801062e:	637b      	str	r3, [r7, #52]	; 0x34
 8010630:	e002      	b.n	8010638 <tcp_write+0x23c>
 8010632:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010634:	681b      	ldr	r3, [r3, #0]
 8010636:	637b      	str	r3, [r7, #52]	; 0x34
 8010638:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801063a:	681b      	ldr	r3, [r3, #0]
 801063c:	2b00      	cmp	r3, #0
 801063e:	d1f8      	bne.n	8010632 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8010640:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010642:	7b1b      	ldrb	r3, [r3, #12]
 8010644:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8010648:	2b00      	cmp	r3, #0
 801064a:	d115      	bne.n	8010678 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 801064c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801064e:	685b      	ldr	r3, [r3, #4]
 8010650:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010652:	8952      	ldrh	r2, [r2, #10]
 8010654:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8010656:	68ba      	ldr	r2, [r7, #8]
 8010658:	429a      	cmp	r2, r3
 801065a:	d10d      	bne.n	8010678 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801065c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010660:	2b00      	cmp	r3, #0
 8010662:	d006      	beq.n	8010672 <tcp_write+0x276>
 8010664:	4b1c      	ldr	r3, [pc, #112]	; (80106d8 <tcp_write+0x2dc>)
 8010666:	f240 2231 	movw	r2, #561	; 0x231
 801066a:	4922      	ldr	r1, [pc, #136]	; (80106f4 <tcp_write+0x2f8>)
 801066c:	481c      	ldr	r0, [pc, #112]	; (80106e0 <tcp_write+0x2e4>)
 801066e:	f004 fa53 	bl	8014b18 <iprintf>
          extendlen = seglen;
 8010672:	8bfb      	ldrh	r3, [r7, #30]
 8010674:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8010676:	e01a      	b.n	80106ae <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8010678:	8bfb      	ldrh	r3, [r7, #30]
 801067a:	2201      	movs	r2, #1
 801067c:	4619      	mov	r1, r3
 801067e:	2000      	movs	r0, #0
 8010680:	f7fa fe56 	bl	800b330 <pbuf_alloc>
 8010684:	6578      	str	r0, [r7, #84]	; 0x54
 8010686:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010688:	2b00      	cmp	r3, #0
 801068a:	f000 81e0 	beq.w	8010a4e <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801068e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010692:	68ba      	ldr	r2, [r7, #8]
 8010694:	441a      	add	r2, r3
 8010696:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010698:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 801069a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801069c:	f7fb f9b4 	bl	800ba08 <pbuf_clen>
 80106a0:	4603      	mov	r3, r0
 80106a2:	461a      	mov	r2, r3
 80106a4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80106a8:	4413      	add	r3, r2
 80106aa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 80106ae:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80106b2:	8bfb      	ldrh	r3, [r7, #30]
 80106b4:	4413      	add	r3, r2
 80106b6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80106ba:	e0dc      	b.n	8010876 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 80106bc:	68fb      	ldr	r3, [r7, #12]
 80106be:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80106c2:	2b00      	cmp	r3, #0
 80106c4:	f000 80d7 	beq.w	8010876 <tcp_write+0x47a>
 80106c8:	4b03      	ldr	r3, [pc, #12]	; (80106d8 <tcp_write+0x2dc>)
 80106ca:	f240 224a 	movw	r2, #586	; 0x24a
 80106ce:	490a      	ldr	r1, [pc, #40]	; (80106f8 <tcp_write+0x2fc>)
 80106d0:	4803      	ldr	r0, [pc, #12]	; (80106e0 <tcp_write+0x2e4>)
 80106d2:	f004 fa21 	bl	8014b18 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 80106d6:	e0ce      	b.n	8010876 <tcp_write+0x47a>
 80106d8:	080177d8 	.word	0x080177d8
 80106dc:	08017978 	.word	0x08017978
 80106e0:	0801782c 	.word	0x0801782c
 80106e4:	08017990 	.word	0x08017990
 80106e8:	080179c4 	.word	0x080179c4
 80106ec:	080179dc 	.word	0x080179dc
 80106f0:	080179fc 	.word	0x080179fc
 80106f4:	08017a1c 	.word	0x08017a1c
 80106f8:	08017a48 	.word	0x08017a48
    struct pbuf *p;
    u16_t left = len - pos;
 80106fc:	88fa      	ldrh	r2, [r7, #6]
 80106fe:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010702:	1ad3      	subs	r3, r2, r3
 8010704:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8010706:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801070a:	b29b      	uxth	r3, r3
 801070c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801070e:	1ad3      	subs	r3, r2, r3
 8010710:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8010712:	8b7a      	ldrh	r2, [r7, #26]
 8010714:	8bbb      	ldrh	r3, [r7, #28]
 8010716:	4293      	cmp	r3, r2
 8010718:	bf28      	it	cs
 801071a:	4613      	movcs	r3, r2
 801071c:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801071e:	797b      	ldrb	r3, [r7, #5]
 8010720:	f003 0301 	and.w	r3, r3, #1
 8010724:	2b00      	cmp	r3, #0
 8010726:	d036      	beq.n	8010796 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8010728:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801072c:	b29a      	uxth	r2, r3
 801072e:	8b3b      	ldrh	r3, [r7, #24]
 8010730:	4413      	add	r3, r2
 8010732:	b299      	uxth	r1, r3
 8010734:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010736:	2b00      	cmp	r3, #0
 8010738:	bf0c      	ite	eq
 801073a:	2301      	moveq	r3, #1
 801073c:	2300      	movne	r3, #0
 801073e:	b2db      	uxtb	r3, r3
 8010740:	f107 0012 	add.w	r0, r7, #18
 8010744:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010746:	9302      	str	r3, [sp, #8]
 8010748:	797b      	ldrb	r3, [r7, #5]
 801074a:	9301      	str	r3, [sp, #4]
 801074c:	68fb      	ldr	r3, [r7, #12]
 801074e:	9300      	str	r3, [sp, #0]
 8010750:	4603      	mov	r3, r0
 8010752:	2036      	movs	r0, #54	; 0x36
 8010754:	f7ff fd5e 	bl	8010214 <tcp_pbuf_prealloc>
 8010758:	6338      	str	r0, [r7, #48]	; 0x30
 801075a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801075c:	2b00      	cmp	r3, #0
 801075e:	f000 8178 	beq.w	8010a52 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8010762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010764:	895b      	ldrh	r3, [r3, #10]
 8010766:	8b3a      	ldrh	r2, [r7, #24]
 8010768:	429a      	cmp	r2, r3
 801076a:	d906      	bls.n	801077a <tcp_write+0x37e>
 801076c:	4b8c      	ldr	r3, [pc, #560]	; (80109a0 <tcp_write+0x5a4>)
 801076e:	f240 2266 	movw	r2, #614	; 0x266
 8010772:	498c      	ldr	r1, [pc, #560]	; (80109a4 <tcp_write+0x5a8>)
 8010774:	488c      	ldr	r0, [pc, #560]	; (80109a8 <tcp_write+0x5ac>)
 8010776:	f004 f9cf 	bl	8014b18 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 801077a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801077c:	685a      	ldr	r2, [r3, #4]
 801077e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8010782:	18d0      	adds	r0, r2, r3
 8010784:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010788:	68ba      	ldr	r2, [r7, #8]
 801078a:	4413      	add	r3, r2
 801078c:	8b3a      	ldrh	r2, [r7, #24]
 801078e:	4619      	mov	r1, r3
 8010790:	f004 f992 	bl	8014ab8 <memcpy>
 8010794:	e02f      	b.n	80107f6 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8010796:	8a7b      	ldrh	r3, [r7, #18]
 8010798:	2b00      	cmp	r3, #0
 801079a:	d006      	beq.n	80107aa <tcp_write+0x3ae>
 801079c:	4b80      	ldr	r3, [pc, #512]	; (80109a0 <tcp_write+0x5a4>)
 801079e:	f240 2271 	movw	r2, #625	; 0x271
 80107a2:	4982      	ldr	r1, [pc, #520]	; (80109ac <tcp_write+0x5b0>)
 80107a4:	4880      	ldr	r0, [pc, #512]	; (80109a8 <tcp_write+0x5ac>)
 80107a6:	f004 f9b7 	bl	8014b18 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 80107aa:	8b3b      	ldrh	r3, [r7, #24]
 80107ac:	2201      	movs	r2, #1
 80107ae:	4619      	mov	r1, r3
 80107b0:	2036      	movs	r0, #54	; 0x36
 80107b2:	f7fa fdbd 	bl	800b330 <pbuf_alloc>
 80107b6:	6178      	str	r0, [r7, #20]
 80107b8:	697b      	ldr	r3, [r7, #20]
 80107ba:	2b00      	cmp	r3, #0
 80107bc:	f000 814b 	beq.w	8010a56 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 80107c0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80107c4:	68ba      	ldr	r2, [r7, #8]
 80107c6:	441a      	add	r2, r3
 80107c8:	697b      	ldr	r3, [r7, #20]
 80107ca:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80107cc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80107d0:	b29b      	uxth	r3, r3
 80107d2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80107d6:	4619      	mov	r1, r3
 80107d8:	2036      	movs	r0, #54	; 0x36
 80107da:	f7fa fda9 	bl	800b330 <pbuf_alloc>
 80107de:	6338      	str	r0, [r7, #48]	; 0x30
 80107e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107e2:	2b00      	cmp	r3, #0
 80107e4:	d103      	bne.n	80107ee <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 80107e6:	6978      	ldr	r0, [r7, #20]
 80107e8:	f7fb f886 	bl	800b8f8 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 80107ec:	e136      	b.n	8010a5c <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 80107ee:	6979      	ldr	r1, [r7, #20]
 80107f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80107f2:	f7fb f943 	bl	800ba7c <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 80107f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80107f8:	f7fb f906 	bl	800ba08 <pbuf_clen>
 80107fc:	4603      	mov	r3, r0
 80107fe:	461a      	mov	r2, r3
 8010800:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010804:	4413      	add	r3, r2
 8010806:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801080a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801080e:	2b09      	cmp	r3, #9
 8010810:	d903      	bls.n	801081a <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8010812:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010814:	f7fb f870 	bl	800b8f8 <pbuf_free>
      goto memerr;
 8010818:	e120      	b.n	8010a5c <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801081a:	68fb      	ldr	r3, [r7, #12]
 801081c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801081e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010822:	441a      	add	r2, r3
 8010824:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010828:	9300      	str	r3, [sp, #0]
 801082a:	4613      	mov	r3, r2
 801082c:	2200      	movs	r2, #0
 801082e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010830:	68f8      	ldr	r0, [r7, #12]
 8010832:	f7ff fc51 	bl	80100d8 <tcp_create_segment>
 8010836:	64f8      	str	r0, [r7, #76]	; 0x4c
 8010838:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801083a:	2b00      	cmp	r3, #0
 801083c:	f000 810d 	beq.w	8010a5a <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8010840:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010842:	2b00      	cmp	r3, #0
 8010844:	d102      	bne.n	801084c <tcp_write+0x450>
      queue = seg;
 8010846:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010848:	647b      	str	r3, [r7, #68]	; 0x44
 801084a:	e00c      	b.n	8010866 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801084c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801084e:	2b00      	cmp	r3, #0
 8010850:	d106      	bne.n	8010860 <tcp_write+0x464>
 8010852:	4b53      	ldr	r3, [pc, #332]	; (80109a0 <tcp_write+0x5a4>)
 8010854:	f240 22ab 	movw	r2, #683	; 0x2ab
 8010858:	4955      	ldr	r1, [pc, #340]	; (80109b0 <tcp_write+0x5b4>)
 801085a:	4853      	ldr	r0, [pc, #332]	; (80109a8 <tcp_write+0x5ac>)
 801085c:	f004 f95c 	bl	8014b18 <iprintf>
      prev_seg->next = seg;
 8010860:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010862:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010864:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8010866:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010868:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 801086a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801086e:	8b3b      	ldrh	r3, [r7, #24]
 8010870:	4413      	add	r3, r2
 8010872:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8010876:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801087a:	88fb      	ldrh	r3, [r7, #6]
 801087c:	429a      	cmp	r2, r3
 801087e:	f4ff af3d 	bcc.w	80106fc <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8010882:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010884:	2b00      	cmp	r3, #0
 8010886:	d02c      	beq.n	80108e2 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8010888:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801088a:	685b      	ldr	r3, [r3, #4]
 801088c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801088e:	e01e      	b.n	80108ce <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8010890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010892:	891a      	ldrh	r2, [r3, #8]
 8010894:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010896:	4413      	add	r3, r2
 8010898:	b29a      	uxth	r2, r3
 801089a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801089c:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801089e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108a0:	681b      	ldr	r3, [r3, #0]
 80108a2:	2b00      	cmp	r3, #0
 80108a4:	d110      	bne.n	80108c8 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 80108a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108a8:	685b      	ldr	r3, [r3, #4]
 80108aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80108ac:	8952      	ldrh	r2, [r2, #10]
 80108ae:	4413      	add	r3, r2
 80108b0:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80108b2:	68b9      	ldr	r1, [r7, #8]
 80108b4:	4618      	mov	r0, r3
 80108b6:	f004 f8ff 	bl	8014ab8 <memcpy>
        p->len += oversize_used;
 80108ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108bc:	895a      	ldrh	r2, [r3, #10]
 80108be:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80108c0:	4413      	add	r3, r2
 80108c2:	b29a      	uxth	r2, r3
 80108c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108c6:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 80108c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108ca:	681b      	ldr	r3, [r3, #0]
 80108cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80108ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108d0:	2b00      	cmp	r3, #0
 80108d2:	d1dd      	bne.n	8010890 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 80108d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80108d6:	891a      	ldrh	r2, [r3, #8]
 80108d8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80108da:	4413      	add	r3, r2
 80108dc:	b29a      	uxth	r2, r3
 80108de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80108e0:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 80108e2:	8a7a      	ldrh	r2, [r7, #18]
 80108e4:	68fb      	ldr	r3, [r7, #12]
 80108e6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 80108ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	d018      	beq.n	8010922 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 80108f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80108f2:	2b00      	cmp	r3, #0
 80108f4:	d106      	bne.n	8010904 <tcp_write+0x508>
 80108f6:	4b2a      	ldr	r3, [pc, #168]	; (80109a0 <tcp_write+0x5a4>)
 80108f8:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 80108fc:	492d      	ldr	r1, [pc, #180]	; (80109b4 <tcp_write+0x5b8>)
 80108fe:	482a      	ldr	r0, [pc, #168]	; (80109a8 <tcp_write+0x5ac>)
 8010900:	f004 f90a 	bl	8014b18 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8010904:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010906:	685b      	ldr	r3, [r3, #4]
 8010908:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801090a:	4618      	mov	r0, r3
 801090c:	f7fb f8b6 	bl	800ba7c <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8010910:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010912:	891a      	ldrh	r2, [r3, #8]
 8010914:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010916:	891b      	ldrh	r3, [r3, #8]
 8010918:	4413      	add	r3, r2
 801091a:	b29a      	uxth	r2, r3
 801091c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801091e:	811a      	strh	r2, [r3, #8]
 8010920:	e037      	b.n	8010992 <tcp_write+0x596>
  } else if (extendlen > 0) {
 8010922:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010924:	2b00      	cmp	r3, #0
 8010926:	d034      	beq.n	8010992 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8010928:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801092a:	2b00      	cmp	r3, #0
 801092c:	d003      	beq.n	8010936 <tcp_write+0x53a>
 801092e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010930:	685b      	ldr	r3, [r3, #4]
 8010932:	2b00      	cmp	r3, #0
 8010934:	d106      	bne.n	8010944 <tcp_write+0x548>
 8010936:	4b1a      	ldr	r3, [pc, #104]	; (80109a0 <tcp_write+0x5a4>)
 8010938:	f240 22e6 	movw	r2, #742	; 0x2e6
 801093c:	491e      	ldr	r1, [pc, #120]	; (80109b8 <tcp_write+0x5bc>)
 801093e:	481a      	ldr	r0, [pc, #104]	; (80109a8 <tcp_write+0x5ac>)
 8010940:	f004 f8ea 	bl	8014b18 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8010944:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010946:	685b      	ldr	r3, [r3, #4]
 8010948:	62bb      	str	r3, [r7, #40]	; 0x28
 801094a:	e009      	b.n	8010960 <tcp_write+0x564>
      p->tot_len += extendlen;
 801094c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801094e:	891a      	ldrh	r2, [r3, #8]
 8010950:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010952:	4413      	add	r3, r2
 8010954:	b29a      	uxth	r2, r3
 8010956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010958:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801095a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801095c:	681b      	ldr	r3, [r3, #0]
 801095e:	62bb      	str	r3, [r7, #40]	; 0x28
 8010960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010962:	681b      	ldr	r3, [r3, #0]
 8010964:	2b00      	cmp	r3, #0
 8010966:	d1f1      	bne.n	801094c <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8010968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801096a:	891a      	ldrh	r2, [r3, #8]
 801096c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801096e:	4413      	add	r3, r2
 8010970:	b29a      	uxth	r2, r3
 8010972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010974:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8010976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010978:	895a      	ldrh	r2, [r3, #10]
 801097a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801097c:	4413      	add	r3, r2
 801097e:	b29a      	uxth	r2, r3
 8010980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010982:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8010984:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010986:	891a      	ldrh	r2, [r3, #8]
 8010988:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801098a:	4413      	add	r3, r2
 801098c:	b29a      	uxth	r2, r3
 801098e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010990:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8010992:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010994:	2b00      	cmp	r3, #0
 8010996:	d111      	bne.n	80109bc <tcp_write+0x5c0>
    pcb->unsent = queue;
 8010998:	68fb      	ldr	r3, [r7, #12]
 801099a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801099c:	66da      	str	r2, [r3, #108]	; 0x6c
 801099e:	e010      	b.n	80109c2 <tcp_write+0x5c6>
 80109a0:	080177d8 	.word	0x080177d8
 80109a4:	08017a78 	.word	0x08017a78
 80109a8:	0801782c 	.word	0x0801782c
 80109ac:	08017ab8 	.word	0x08017ab8
 80109b0:	08017ac8 	.word	0x08017ac8
 80109b4:	08017adc 	.word	0x08017adc
 80109b8:	08017b14 	.word	0x08017b14
  } else {
    last_unsent->next = queue;
 80109bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80109be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80109c0:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 80109c2:	68fb      	ldr	r3, [r7, #12]
 80109c4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80109c6:	88fb      	ldrh	r3, [r7, #6]
 80109c8:	441a      	add	r2, r3
 80109ca:	68fb      	ldr	r3, [r7, #12]
 80109cc:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 80109ce:	68fb      	ldr	r3, [r7, #12]
 80109d0:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80109d4:	88fb      	ldrh	r3, [r7, #6]
 80109d6:	1ad3      	subs	r3, r2, r3
 80109d8:	b29a      	uxth	r2, r3
 80109da:	68fb      	ldr	r3, [r7, #12]
 80109dc:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 80109e0:	68fb      	ldr	r3, [r7, #12]
 80109e2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80109e6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80109ea:	68fb      	ldr	r3, [r7, #12]
 80109ec:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80109f0:	2b00      	cmp	r3, #0
 80109f2:	d00e      	beq.n	8010a12 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 80109f4:	68fb      	ldr	r3, [r7, #12]
 80109f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80109f8:	2b00      	cmp	r3, #0
 80109fa:	d10a      	bne.n	8010a12 <tcp_write+0x616>
 80109fc:	68fb      	ldr	r3, [r7, #12]
 80109fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010a00:	2b00      	cmp	r3, #0
 8010a02:	d106      	bne.n	8010a12 <tcp_write+0x616>
 8010a04:	4b2c      	ldr	r3, [pc, #176]	; (8010ab8 <tcp_write+0x6bc>)
 8010a06:	f240 3212 	movw	r2, #786	; 0x312
 8010a0a:	492c      	ldr	r1, [pc, #176]	; (8010abc <tcp_write+0x6c0>)
 8010a0c:	482c      	ldr	r0, [pc, #176]	; (8010ac0 <tcp_write+0x6c4>)
 8010a0e:	f004 f883 	bl	8014b18 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8010a12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	d016      	beq.n	8010a46 <tcp_write+0x64a>
 8010a18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010a1a:	68db      	ldr	r3, [r3, #12]
 8010a1c:	2b00      	cmp	r3, #0
 8010a1e:	d012      	beq.n	8010a46 <tcp_write+0x64a>
 8010a20:	797b      	ldrb	r3, [r7, #5]
 8010a22:	f003 0302 	and.w	r3, r3, #2
 8010a26:	2b00      	cmp	r3, #0
 8010a28:	d10d      	bne.n	8010a46 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8010a2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010a2c:	68db      	ldr	r3, [r3, #12]
 8010a2e:	899b      	ldrh	r3, [r3, #12]
 8010a30:	b29c      	uxth	r4, r3
 8010a32:	2008      	movs	r0, #8
 8010a34:	f7f9 fc02 	bl	800a23c <lwip_htons>
 8010a38:	4603      	mov	r3, r0
 8010a3a:	461a      	mov	r2, r3
 8010a3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010a3e:	68db      	ldr	r3, [r3, #12]
 8010a40:	4322      	orrs	r2, r4
 8010a42:	b292      	uxth	r2, r2
 8010a44:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8010a46:	2300      	movs	r3, #0
 8010a48:	e031      	b.n	8010aae <tcp_write+0x6b2>
          goto memerr;
 8010a4a:	bf00      	nop
 8010a4c:	e006      	b.n	8010a5c <tcp_write+0x660>
            goto memerr;
 8010a4e:	bf00      	nop
 8010a50:	e004      	b.n	8010a5c <tcp_write+0x660>
        goto memerr;
 8010a52:	bf00      	nop
 8010a54:	e002      	b.n	8010a5c <tcp_write+0x660>
        goto memerr;
 8010a56:	bf00      	nop
 8010a58:	e000      	b.n	8010a5c <tcp_write+0x660>
      goto memerr;
 8010a5a:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010a5c:	68fb      	ldr	r3, [r7, #12]
 8010a5e:	8b5b      	ldrh	r3, [r3, #26]
 8010a60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010a64:	b29a      	uxth	r2, r3
 8010a66:	68fb      	ldr	r3, [r7, #12]
 8010a68:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8010a6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	d002      	beq.n	8010a76 <tcp_write+0x67a>
    pbuf_free(concat_p);
 8010a70:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8010a72:	f7fa ff41 	bl	800b8f8 <pbuf_free>
  }
  if (queue != NULL) {
 8010a76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010a78:	2b00      	cmp	r3, #0
 8010a7a:	d002      	beq.n	8010a82 <tcp_write+0x686>
    tcp_segs_free(queue);
 8010a7c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8010a7e:	f7fc fb53 	bl	800d128 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8010a82:	68fb      	ldr	r3, [r7, #12]
 8010a84:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	d00e      	beq.n	8010aaa <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8010a8c:	68fb      	ldr	r3, [r7, #12]
 8010a8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010a90:	2b00      	cmp	r3, #0
 8010a92:	d10a      	bne.n	8010aaa <tcp_write+0x6ae>
 8010a94:	68fb      	ldr	r3, [r7, #12]
 8010a96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010a98:	2b00      	cmp	r3, #0
 8010a9a:	d106      	bne.n	8010aaa <tcp_write+0x6ae>
 8010a9c:	4b06      	ldr	r3, [pc, #24]	; (8010ab8 <tcp_write+0x6bc>)
 8010a9e:	f240 3227 	movw	r2, #807	; 0x327
 8010aa2:	4906      	ldr	r1, [pc, #24]	; (8010abc <tcp_write+0x6c0>)
 8010aa4:	4806      	ldr	r0, [pc, #24]	; (8010ac0 <tcp_write+0x6c4>)
 8010aa6:	f004 f837 	bl	8014b18 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8010aaa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010aae:	4618      	mov	r0, r3
 8010ab0:	375c      	adds	r7, #92	; 0x5c
 8010ab2:	46bd      	mov	sp, r7
 8010ab4:	bd90      	pop	{r4, r7, pc}
 8010ab6:	bf00      	nop
 8010ab8:	080177d8 	.word	0x080177d8
 8010abc:	08017b4c 	.word	0x08017b4c
 8010ac0:	0801782c 	.word	0x0801782c

08010ac4 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8010ac4:	b590      	push	{r4, r7, lr}
 8010ac6:	b08b      	sub	sp, #44	; 0x2c
 8010ac8:	af02      	add	r7, sp, #8
 8010aca:	6078      	str	r0, [r7, #4]
 8010acc:	460b      	mov	r3, r1
 8010ace:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8010ad0:	2300      	movs	r3, #0
 8010ad2:	61fb      	str	r3, [r7, #28]
 8010ad4:	2300      	movs	r3, #0
 8010ad6:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8010ad8:	2300      	movs	r3, #0
 8010ada:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	2b00      	cmp	r3, #0
 8010ae0:	d106      	bne.n	8010af0 <tcp_split_unsent_seg+0x2c>
 8010ae2:	4b95      	ldr	r3, [pc, #596]	; (8010d38 <tcp_split_unsent_seg+0x274>)
 8010ae4:	f240 324b 	movw	r2, #843	; 0x34b
 8010ae8:	4994      	ldr	r1, [pc, #592]	; (8010d3c <tcp_split_unsent_seg+0x278>)
 8010aea:	4895      	ldr	r0, [pc, #596]	; (8010d40 <tcp_split_unsent_seg+0x27c>)
 8010aec:	f004 f814 	bl	8014b18 <iprintf>

  useg = pcb->unsent;
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010af4:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8010af6:	697b      	ldr	r3, [r7, #20]
 8010af8:	2b00      	cmp	r3, #0
 8010afa:	d102      	bne.n	8010b02 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8010afc:	f04f 33ff 	mov.w	r3, #4294967295
 8010b00:	e116      	b.n	8010d30 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8010b02:	887b      	ldrh	r3, [r7, #2]
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	d109      	bne.n	8010b1c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8010b08:	4b8b      	ldr	r3, [pc, #556]	; (8010d38 <tcp_split_unsent_seg+0x274>)
 8010b0a:	f240 3253 	movw	r2, #851	; 0x353
 8010b0e:	498d      	ldr	r1, [pc, #564]	; (8010d44 <tcp_split_unsent_seg+0x280>)
 8010b10:	488b      	ldr	r0, [pc, #556]	; (8010d40 <tcp_split_unsent_seg+0x27c>)
 8010b12:	f004 f801 	bl	8014b18 <iprintf>
    return ERR_VAL;
 8010b16:	f06f 0305 	mvn.w	r3, #5
 8010b1a:	e109      	b.n	8010d30 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8010b1c:	697b      	ldr	r3, [r7, #20]
 8010b1e:	891b      	ldrh	r3, [r3, #8]
 8010b20:	887a      	ldrh	r2, [r7, #2]
 8010b22:	429a      	cmp	r2, r3
 8010b24:	d301      	bcc.n	8010b2a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8010b26:	2300      	movs	r3, #0
 8010b28:	e102      	b.n	8010d30 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010b2e:	887a      	ldrh	r2, [r7, #2]
 8010b30:	429a      	cmp	r2, r3
 8010b32:	d906      	bls.n	8010b42 <tcp_split_unsent_seg+0x7e>
 8010b34:	4b80      	ldr	r3, [pc, #512]	; (8010d38 <tcp_split_unsent_seg+0x274>)
 8010b36:	f240 325b 	movw	r2, #859	; 0x35b
 8010b3a:	4983      	ldr	r1, [pc, #524]	; (8010d48 <tcp_split_unsent_seg+0x284>)
 8010b3c:	4880      	ldr	r0, [pc, #512]	; (8010d40 <tcp_split_unsent_seg+0x27c>)
 8010b3e:	f003 ffeb 	bl	8014b18 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8010b42:	697b      	ldr	r3, [r7, #20]
 8010b44:	891b      	ldrh	r3, [r3, #8]
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	d106      	bne.n	8010b58 <tcp_split_unsent_seg+0x94>
 8010b4a:	4b7b      	ldr	r3, [pc, #492]	; (8010d38 <tcp_split_unsent_seg+0x274>)
 8010b4c:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8010b50:	497e      	ldr	r1, [pc, #504]	; (8010d4c <tcp_split_unsent_seg+0x288>)
 8010b52:	487b      	ldr	r0, [pc, #492]	; (8010d40 <tcp_split_unsent_seg+0x27c>)
 8010b54:	f003 ffe0 	bl	8014b18 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8010b58:	697b      	ldr	r3, [r7, #20]
 8010b5a:	7a9b      	ldrb	r3, [r3, #10]
 8010b5c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8010b5e:	7bfb      	ldrb	r3, [r7, #15]
 8010b60:	009b      	lsls	r3, r3, #2
 8010b62:	b2db      	uxtb	r3, r3
 8010b64:	f003 0304 	and.w	r3, r3, #4
 8010b68:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8010b6a:	697b      	ldr	r3, [r7, #20]
 8010b6c:	891a      	ldrh	r2, [r3, #8]
 8010b6e:	887b      	ldrh	r3, [r7, #2]
 8010b70:	1ad3      	subs	r3, r2, r3
 8010b72:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8010b74:	7bbb      	ldrb	r3, [r7, #14]
 8010b76:	b29a      	uxth	r2, r3
 8010b78:	89bb      	ldrh	r3, [r7, #12]
 8010b7a:	4413      	add	r3, r2
 8010b7c:	b29b      	uxth	r3, r3
 8010b7e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010b82:	4619      	mov	r1, r3
 8010b84:	2036      	movs	r0, #54	; 0x36
 8010b86:	f7fa fbd3 	bl	800b330 <pbuf_alloc>
 8010b8a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010b8c:	693b      	ldr	r3, [r7, #16]
 8010b8e:	2b00      	cmp	r3, #0
 8010b90:	f000 80b7 	beq.w	8010d02 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8010b94:	697b      	ldr	r3, [r7, #20]
 8010b96:	685b      	ldr	r3, [r3, #4]
 8010b98:	891a      	ldrh	r2, [r3, #8]
 8010b9a:	697b      	ldr	r3, [r7, #20]
 8010b9c:	891b      	ldrh	r3, [r3, #8]
 8010b9e:	1ad3      	subs	r3, r2, r3
 8010ba0:	b29a      	uxth	r2, r3
 8010ba2:	887b      	ldrh	r3, [r7, #2]
 8010ba4:	4413      	add	r3, r2
 8010ba6:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8010ba8:	697b      	ldr	r3, [r7, #20]
 8010baa:	6858      	ldr	r0, [r3, #4]
 8010bac:	693b      	ldr	r3, [r7, #16]
 8010bae:	685a      	ldr	r2, [r3, #4]
 8010bb0:	7bbb      	ldrb	r3, [r7, #14]
 8010bb2:	18d1      	adds	r1, r2, r3
 8010bb4:	897b      	ldrh	r3, [r7, #10]
 8010bb6:	89ba      	ldrh	r2, [r7, #12]
 8010bb8:	f7fb f888 	bl	800bccc <pbuf_copy_partial>
 8010bbc:	4603      	mov	r3, r0
 8010bbe:	461a      	mov	r2, r3
 8010bc0:	89bb      	ldrh	r3, [r7, #12]
 8010bc2:	4293      	cmp	r3, r2
 8010bc4:	f040 809f 	bne.w	8010d06 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8010bc8:	697b      	ldr	r3, [r7, #20]
 8010bca:	68db      	ldr	r3, [r3, #12]
 8010bcc:	899b      	ldrh	r3, [r3, #12]
 8010bce:	b29b      	uxth	r3, r3
 8010bd0:	4618      	mov	r0, r3
 8010bd2:	f7f9 fb33 	bl	800a23c <lwip_htons>
 8010bd6:	4603      	mov	r3, r0
 8010bd8:	b2db      	uxtb	r3, r3
 8010bda:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010bde:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8010be0:	2300      	movs	r3, #0
 8010be2:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8010be4:	7efb      	ldrb	r3, [r7, #27]
 8010be6:	f003 0308 	and.w	r3, r3, #8
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	d007      	beq.n	8010bfe <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8010bee:	7efb      	ldrb	r3, [r7, #27]
 8010bf0:	f023 0308 	bic.w	r3, r3, #8
 8010bf4:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8010bf6:	7ebb      	ldrb	r3, [r7, #26]
 8010bf8:	f043 0308 	orr.w	r3, r3, #8
 8010bfc:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8010bfe:	7efb      	ldrb	r3, [r7, #27]
 8010c00:	f003 0301 	and.w	r3, r3, #1
 8010c04:	2b00      	cmp	r3, #0
 8010c06:	d007      	beq.n	8010c18 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8010c08:	7efb      	ldrb	r3, [r7, #27]
 8010c0a:	f023 0301 	bic.w	r3, r3, #1
 8010c0e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8010c10:	7ebb      	ldrb	r3, [r7, #26]
 8010c12:	f043 0301 	orr.w	r3, r3, #1
 8010c16:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8010c18:	697b      	ldr	r3, [r7, #20]
 8010c1a:	68db      	ldr	r3, [r3, #12]
 8010c1c:	685b      	ldr	r3, [r3, #4]
 8010c1e:	4618      	mov	r0, r3
 8010c20:	f7f9 fb21 	bl	800a266 <lwip_htonl>
 8010c24:	4602      	mov	r2, r0
 8010c26:	887b      	ldrh	r3, [r7, #2]
 8010c28:	18d1      	adds	r1, r2, r3
 8010c2a:	7eba      	ldrb	r2, [r7, #26]
 8010c2c:	7bfb      	ldrb	r3, [r7, #15]
 8010c2e:	9300      	str	r3, [sp, #0]
 8010c30:	460b      	mov	r3, r1
 8010c32:	6939      	ldr	r1, [r7, #16]
 8010c34:	6878      	ldr	r0, [r7, #4]
 8010c36:	f7ff fa4f 	bl	80100d8 <tcp_create_segment>
 8010c3a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8010c3c:	69fb      	ldr	r3, [r7, #28]
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	d063      	beq.n	8010d0a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8010c42:	697b      	ldr	r3, [r7, #20]
 8010c44:	685b      	ldr	r3, [r3, #4]
 8010c46:	4618      	mov	r0, r3
 8010c48:	f7fa fede 	bl	800ba08 <pbuf_clen>
 8010c4c:	4603      	mov	r3, r0
 8010c4e:	461a      	mov	r2, r3
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010c56:	1a9b      	subs	r3, r3, r2
 8010c58:	b29a      	uxth	r2, r3
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8010c60:	697b      	ldr	r3, [r7, #20]
 8010c62:	6858      	ldr	r0, [r3, #4]
 8010c64:	697b      	ldr	r3, [r7, #20]
 8010c66:	685b      	ldr	r3, [r3, #4]
 8010c68:	891a      	ldrh	r2, [r3, #8]
 8010c6a:	89bb      	ldrh	r3, [r7, #12]
 8010c6c:	1ad3      	subs	r3, r2, r3
 8010c6e:	b29b      	uxth	r3, r3
 8010c70:	4619      	mov	r1, r3
 8010c72:	f7fa fcbb 	bl	800b5ec <pbuf_realloc>
  useg->len -= remainder;
 8010c76:	697b      	ldr	r3, [r7, #20]
 8010c78:	891a      	ldrh	r2, [r3, #8]
 8010c7a:	89bb      	ldrh	r3, [r7, #12]
 8010c7c:	1ad3      	subs	r3, r2, r3
 8010c7e:	b29a      	uxth	r2, r3
 8010c80:	697b      	ldr	r3, [r7, #20]
 8010c82:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8010c84:	697b      	ldr	r3, [r7, #20]
 8010c86:	68db      	ldr	r3, [r3, #12]
 8010c88:	899b      	ldrh	r3, [r3, #12]
 8010c8a:	b29c      	uxth	r4, r3
 8010c8c:	7efb      	ldrb	r3, [r7, #27]
 8010c8e:	b29b      	uxth	r3, r3
 8010c90:	4618      	mov	r0, r3
 8010c92:	f7f9 fad3 	bl	800a23c <lwip_htons>
 8010c96:	4603      	mov	r3, r0
 8010c98:	461a      	mov	r2, r3
 8010c9a:	697b      	ldr	r3, [r7, #20]
 8010c9c:	68db      	ldr	r3, [r3, #12]
 8010c9e:	4322      	orrs	r2, r4
 8010ca0:	b292      	uxth	r2, r2
 8010ca2:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8010ca4:	697b      	ldr	r3, [r7, #20]
 8010ca6:	685b      	ldr	r3, [r3, #4]
 8010ca8:	4618      	mov	r0, r3
 8010caa:	f7fa fead 	bl	800ba08 <pbuf_clen>
 8010cae:	4603      	mov	r3, r0
 8010cb0:	461a      	mov	r2, r3
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010cb8:	4413      	add	r3, r2
 8010cba:	b29a      	uxth	r2, r3
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8010cc2:	69fb      	ldr	r3, [r7, #28]
 8010cc4:	685b      	ldr	r3, [r3, #4]
 8010cc6:	4618      	mov	r0, r3
 8010cc8:	f7fa fe9e 	bl	800ba08 <pbuf_clen>
 8010ccc:	4603      	mov	r3, r0
 8010cce:	461a      	mov	r2, r3
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010cd6:	4413      	add	r3, r2
 8010cd8:	b29a      	uxth	r2, r3
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8010ce0:	697b      	ldr	r3, [r7, #20]
 8010ce2:	681a      	ldr	r2, [r3, #0]
 8010ce4:	69fb      	ldr	r3, [r7, #28]
 8010ce6:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8010ce8:	697b      	ldr	r3, [r7, #20]
 8010cea:	69fa      	ldr	r2, [r7, #28]
 8010cec:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8010cee:	69fb      	ldr	r3, [r7, #28]
 8010cf0:	681b      	ldr	r3, [r3, #0]
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	d103      	bne.n	8010cfe <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	2200      	movs	r2, #0
 8010cfa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8010cfe:	2300      	movs	r3, #0
 8010d00:	e016      	b.n	8010d30 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8010d02:	bf00      	nop
 8010d04:	e002      	b.n	8010d0c <tcp_split_unsent_seg+0x248>
    goto memerr;
 8010d06:	bf00      	nop
 8010d08:	e000      	b.n	8010d0c <tcp_split_unsent_seg+0x248>
    goto memerr;
 8010d0a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8010d0c:	69fb      	ldr	r3, [r7, #28]
 8010d0e:	2b00      	cmp	r3, #0
 8010d10:	d006      	beq.n	8010d20 <tcp_split_unsent_seg+0x25c>
 8010d12:	4b09      	ldr	r3, [pc, #36]	; (8010d38 <tcp_split_unsent_seg+0x274>)
 8010d14:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8010d18:	490d      	ldr	r1, [pc, #52]	; (8010d50 <tcp_split_unsent_seg+0x28c>)
 8010d1a:	4809      	ldr	r0, [pc, #36]	; (8010d40 <tcp_split_unsent_seg+0x27c>)
 8010d1c:	f003 fefc 	bl	8014b18 <iprintf>
  if (p != NULL) {
 8010d20:	693b      	ldr	r3, [r7, #16]
 8010d22:	2b00      	cmp	r3, #0
 8010d24:	d002      	beq.n	8010d2c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8010d26:	6938      	ldr	r0, [r7, #16]
 8010d28:	f7fa fde6 	bl	800b8f8 <pbuf_free>
  }

  return ERR_MEM;
 8010d2c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010d30:	4618      	mov	r0, r3
 8010d32:	3724      	adds	r7, #36	; 0x24
 8010d34:	46bd      	mov	sp, r7
 8010d36:	bd90      	pop	{r4, r7, pc}
 8010d38:	080177d8 	.word	0x080177d8
 8010d3c:	08017b6c 	.word	0x08017b6c
 8010d40:	0801782c 	.word	0x0801782c
 8010d44:	08017b90 	.word	0x08017b90
 8010d48:	08017bb4 	.word	0x08017bb4
 8010d4c:	08017bc4 	.word	0x08017bc4
 8010d50:	08017bd4 	.word	0x08017bd4

08010d54 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8010d54:	b590      	push	{r4, r7, lr}
 8010d56:	b085      	sub	sp, #20
 8010d58:	af00      	add	r7, sp, #0
 8010d5a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	d106      	bne.n	8010d70 <tcp_send_fin+0x1c>
 8010d62:	4b21      	ldr	r3, [pc, #132]	; (8010de8 <tcp_send_fin+0x94>)
 8010d64:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8010d68:	4920      	ldr	r1, [pc, #128]	; (8010dec <tcp_send_fin+0x98>)
 8010d6a:	4821      	ldr	r0, [pc, #132]	; (8010df0 <tcp_send_fin+0x9c>)
 8010d6c:	f003 fed4 	bl	8014b18 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	d02e      	beq.n	8010dd6 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010d7c:	60fb      	str	r3, [r7, #12]
 8010d7e:	e002      	b.n	8010d86 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8010d80:	68fb      	ldr	r3, [r7, #12]
 8010d82:	681b      	ldr	r3, [r3, #0]
 8010d84:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010d86:	68fb      	ldr	r3, [r7, #12]
 8010d88:	681b      	ldr	r3, [r3, #0]
 8010d8a:	2b00      	cmp	r3, #0
 8010d8c:	d1f8      	bne.n	8010d80 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8010d8e:	68fb      	ldr	r3, [r7, #12]
 8010d90:	68db      	ldr	r3, [r3, #12]
 8010d92:	899b      	ldrh	r3, [r3, #12]
 8010d94:	b29b      	uxth	r3, r3
 8010d96:	4618      	mov	r0, r3
 8010d98:	f7f9 fa50 	bl	800a23c <lwip_htons>
 8010d9c:	4603      	mov	r3, r0
 8010d9e:	b2db      	uxtb	r3, r3
 8010da0:	f003 0307 	and.w	r3, r3, #7
 8010da4:	2b00      	cmp	r3, #0
 8010da6:	d116      	bne.n	8010dd6 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8010da8:	68fb      	ldr	r3, [r7, #12]
 8010daa:	68db      	ldr	r3, [r3, #12]
 8010dac:	899b      	ldrh	r3, [r3, #12]
 8010dae:	b29c      	uxth	r4, r3
 8010db0:	2001      	movs	r0, #1
 8010db2:	f7f9 fa43 	bl	800a23c <lwip_htons>
 8010db6:	4603      	mov	r3, r0
 8010db8:	461a      	mov	r2, r3
 8010dba:	68fb      	ldr	r3, [r7, #12]
 8010dbc:	68db      	ldr	r3, [r3, #12]
 8010dbe:	4322      	orrs	r2, r4
 8010dc0:	b292      	uxth	r2, r2
 8010dc2:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	8b5b      	ldrh	r3, [r3, #26]
 8010dc8:	f043 0320 	orr.w	r3, r3, #32
 8010dcc:	b29a      	uxth	r2, r3
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8010dd2:	2300      	movs	r3, #0
 8010dd4:	e004      	b.n	8010de0 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8010dd6:	2101      	movs	r1, #1
 8010dd8:	6878      	ldr	r0, [r7, #4]
 8010dda:	f000 f80b 	bl	8010df4 <tcp_enqueue_flags>
 8010dde:	4603      	mov	r3, r0
}
 8010de0:	4618      	mov	r0, r3
 8010de2:	3714      	adds	r7, #20
 8010de4:	46bd      	mov	sp, r7
 8010de6:	bd90      	pop	{r4, r7, pc}
 8010de8:	080177d8 	.word	0x080177d8
 8010dec:	08017be0 	.word	0x08017be0
 8010df0:	0801782c 	.word	0x0801782c

08010df4 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8010df4:	b580      	push	{r7, lr}
 8010df6:	b08a      	sub	sp, #40	; 0x28
 8010df8:	af02      	add	r7, sp, #8
 8010dfa:	6078      	str	r0, [r7, #4]
 8010dfc:	460b      	mov	r3, r1
 8010dfe:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8010e00:	2300      	movs	r3, #0
 8010e02:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8010e04:	2300      	movs	r3, #0
 8010e06:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8010e08:	78fb      	ldrb	r3, [r7, #3]
 8010e0a:	f003 0303 	and.w	r3, r3, #3
 8010e0e:	2b00      	cmp	r3, #0
 8010e10:	d106      	bne.n	8010e20 <tcp_enqueue_flags+0x2c>
 8010e12:	4b67      	ldr	r3, [pc, #412]	; (8010fb0 <tcp_enqueue_flags+0x1bc>)
 8010e14:	f240 4211 	movw	r2, #1041	; 0x411
 8010e18:	4966      	ldr	r1, [pc, #408]	; (8010fb4 <tcp_enqueue_flags+0x1c0>)
 8010e1a:	4867      	ldr	r0, [pc, #412]	; (8010fb8 <tcp_enqueue_flags+0x1c4>)
 8010e1c:	f003 fe7c 	bl	8014b18 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	d106      	bne.n	8010e34 <tcp_enqueue_flags+0x40>
 8010e26:	4b62      	ldr	r3, [pc, #392]	; (8010fb0 <tcp_enqueue_flags+0x1bc>)
 8010e28:	f240 4213 	movw	r2, #1043	; 0x413
 8010e2c:	4963      	ldr	r1, [pc, #396]	; (8010fbc <tcp_enqueue_flags+0x1c8>)
 8010e2e:	4862      	ldr	r0, [pc, #392]	; (8010fb8 <tcp_enqueue_flags+0x1c4>)
 8010e30:	f003 fe72 	bl	8014b18 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8010e34:	78fb      	ldrb	r3, [r7, #3]
 8010e36:	f003 0302 	and.w	r3, r3, #2
 8010e3a:	2b00      	cmp	r3, #0
 8010e3c:	d001      	beq.n	8010e42 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8010e3e:	2301      	movs	r3, #1
 8010e40:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010e42:	7ffb      	ldrb	r3, [r7, #31]
 8010e44:	009b      	lsls	r3, r3, #2
 8010e46:	b2db      	uxtb	r3, r3
 8010e48:	f003 0304 	and.w	r3, r3, #4
 8010e4c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8010e4e:	7dfb      	ldrb	r3, [r7, #23]
 8010e50:	b29b      	uxth	r3, r3
 8010e52:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010e56:	4619      	mov	r1, r3
 8010e58:	2036      	movs	r0, #54	; 0x36
 8010e5a:	f7fa fa69 	bl	800b330 <pbuf_alloc>
 8010e5e:	6138      	str	r0, [r7, #16]
 8010e60:	693b      	ldr	r3, [r7, #16]
 8010e62:	2b00      	cmp	r3, #0
 8010e64:	d109      	bne.n	8010e7a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	8b5b      	ldrh	r3, [r3, #26]
 8010e6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010e6e:	b29a      	uxth	r2, r3
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8010e74:	f04f 33ff 	mov.w	r3, #4294967295
 8010e78:	e095      	b.n	8010fa6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8010e7a:	693b      	ldr	r3, [r7, #16]
 8010e7c:	895a      	ldrh	r2, [r3, #10]
 8010e7e:	7dfb      	ldrb	r3, [r7, #23]
 8010e80:	b29b      	uxth	r3, r3
 8010e82:	429a      	cmp	r2, r3
 8010e84:	d206      	bcs.n	8010e94 <tcp_enqueue_flags+0xa0>
 8010e86:	4b4a      	ldr	r3, [pc, #296]	; (8010fb0 <tcp_enqueue_flags+0x1bc>)
 8010e88:	f240 4239 	movw	r2, #1081	; 0x439
 8010e8c:	494c      	ldr	r1, [pc, #304]	; (8010fc0 <tcp_enqueue_flags+0x1cc>)
 8010e8e:	484a      	ldr	r0, [pc, #296]	; (8010fb8 <tcp_enqueue_flags+0x1c4>)
 8010e90:	f003 fe42 	bl	8014b18 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8010e94:	687b      	ldr	r3, [r7, #4]
 8010e96:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8010e98:	78fa      	ldrb	r2, [r7, #3]
 8010e9a:	7ffb      	ldrb	r3, [r7, #31]
 8010e9c:	9300      	str	r3, [sp, #0]
 8010e9e:	460b      	mov	r3, r1
 8010ea0:	6939      	ldr	r1, [r7, #16]
 8010ea2:	6878      	ldr	r0, [r7, #4]
 8010ea4:	f7ff f918 	bl	80100d8 <tcp_create_segment>
 8010ea8:	60f8      	str	r0, [r7, #12]
 8010eaa:	68fb      	ldr	r3, [r7, #12]
 8010eac:	2b00      	cmp	r3, #0
 8010eae:	d109      	bne.n	8010ec4 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	8b5b      	ldrh	r3, [r3, #26]
 8010eb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010eb8:	b29a      	uxth	r2, r3
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8010ebe:	f04f 33ff 	mov.w	r3, #4294967295
 8010ec2:	e070      	b.n	8010fa6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8010ec4:	68fb      	ldr	r3, [r7, #12]
 8010ec6:	68db      	ldr	r3, [r3, #12]
 8010ec8:	f003 0303 	and.w	r3, r3, #3
 8010ecc:	2b00      	cmp	r3, #0
 8010ece:	d006      	beq.n	8010ede <tcp_enqueue_flags+0xea>
 8010ed0:	4b37      	ldr	r3, [pc, #220]	; (8010fb0 <tcp_enqueue_flags+0x1bc>)
 8010ed2:	f240 4242 	movw	r2, #1090	; 0x442
 8010ed6:	493b      	ldr	r1, [pc, #236]	; (8010fc4 <tcp_enqueue_flags+0x1d0>)
 8010ed8:	4837      	ldr	r0, [pc, #220]	; (8010fb8 <tcp_enqueue_flags+0x1c4>)
 8010eda:	f003 fe1d 	bl	8014b18 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8010ede:	68fb      	ldr	r3, [r7, #12]
 8010ee0:	891b      	ldrh	r3, [r3, #8]
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	d006      	beq.n	8010ef4 <tcp_enqueue_flags+0x100>
 8010ee6:	4b32      	ldr	r3, [pc, #200]	; (8010fb0 <tcp_enqueue_flags+0x1bc>)
 8010ee8:	f240 4243 	movw	r2, #1091	; 0x443
 8010eec:	4936      	ldr	r1, [pc, #216]	; (8010fc8 <tcp_enqueue_flags+0x1d4>)
 8010eee:	4832      	ldr	r0, [pc, #200]	; (8010fb8 <tcp_enqueue_flags+0x1c4>)
 8010ef0:	f003 fe12 	bl	8014b18 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010ef8:	2b00      	cmp	r3, #0
 8010efa:	d103      	bne.n	8010f04 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	68fa      	ldr	r2, [r7, #12]
 8010f00:	66da      	str	r2, [r3, #108]	; 0x6c
 8010f02:	e00d      	b.n	8010f20 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010f08:	61bb      	str	r3, [r7, #24]
 8010f0a:	e002      	b.n	8010f12 <tcp_enqueue_flags+0x11e>
 8010f0c:	69bb      	ldr	r3, [r7, #24]
 8010f0e:	681b      	ldr	r3, [r3, #0]
 8010f10:	61bb      	str	r3, [r7, #24]
 8010f12:	69bb      	ldr	r3, [r7, #24]
 8010f14:	681b      	ldr	r3, [r3, #0]
 8010f16:	2b00      	cmp	r3, #0
 8010f18:	d1f8      	bne.n	8010f0c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8010f1a:	69bb      	ldr	r3, [r7, #24]
 8010f1c:	68fa      	ldr	r2, [r7, #12]
 8010f1e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	2200      	movs	r2, #0
 8010f24:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8010f28:	78fb      	ldrb	r3, [r7, #3]
 8010f2a:	f003 0302 	and.w	r3, r3, #2
 8010f2e:	2b00      	cmp	r3, #0
 8010f30:	d104      	bne.n	8010f3c <tcp_enqueue_flags+0x148>
 8010f32:	78fb      	ldrb	r3, [r7, #3]
 8010f34:	f003 0301 	and.w	r3, r3, #1
 8010f38:	2b00      	cmp	r3, #0
 8010f3a:	d004      	beq.n	8010f46 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010f40:	1c5a      	adds	r2, r3, #1
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8010f46:	78fb      	ldrb	r3, [r7, #3]
 8010f48:	f003 0301 	and.w	r3, r3, #1
 8010f4c:	2b00      	cmp	r3, #0
 8010f4e:	d006      	beq.n	8010f5e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	8b5b      	ldrh	r3, [r3, #26]
 8010f54:	f043 0320 	orr.w	r3, r3, #32
 8010f58:	b29a      	uxth	r2, r3
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8010f5e:	68fb      	ldr	r3, [r7, #12]
 8010f60:	685b      	ldr	r3, [r3, #4]
 8010f62:	4618      	mov	r0, r3
 8010f64:	f7fa fd50 	bl	800ba08 <pbuf_clen>
 8010f68:	4603      	mov	r3, r0
 8010f6a:	461a      	mov	r2, r3
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010f72:	4413      	add	r3, r2
 8010f74:	b29a      	uxth	r2, r3
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	d00e      	beq.n	8010fa4 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010f8a:	2b00      	cmp	r3, #0
 8010f8c:	d10a      	bne.n	8010fa4 <tcp_enqueue_flags+0x1b0>
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010f92:	2b00      	cmp	r3, #0
 8010f94:	d106      	bne.n	8010fa4 <tcp_enqueue_flags+0x1b0>
 8010f96:	4b06      	ldr	r3, [pc, #24]	; (8010fb0 <tcp_enqueue_flags+0x1bc>)
 8010f98:	f240 4265 	movw	r2, #1125	; 0x465
 8010f9c:	490b      	ldr	r1, [pc, #44]	; (8010fcc <tcp_enqueue_flags+0x1d8>)
 8010f9e:	4806      	ldr	r0, [pc, #24]	; (8010fb8 <tcp_enqueue_flags+0x1c4>)
 8010fa0:	f003 fdba 	bl	8014b18 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8010fa4:	2300      	movs	r3, #0
}
 8010fa6:	4618      	mov	r0, r3
 8010fa8:	3720      	adds	r7, #32
 8010faa:	46bd      	mov	sp, r7
 8010fac:	bd80      	pop	{r7, pc}
 8010fae:	bf00      	nop
 8010fb0:	080177d8 	.word	0x080177d8
 8010fb4:	08017bfc 	.word	0x08017bfc
 8010fb8:	0801782c 	.word	0x0801782c
 8010fbc:	08017c54 	.word	0x08017c54
 8010fc0:	08017c74 	.word	0x08017c74
 8010fc4:	08017cb0 	.word	0x08017cb0
 8010fc8:	08017cc8 	.word	0x08017cc8
 8010fcc:	08017cf4 	.word	0x08017cf4

08010fd0 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8010fd0:	b5b0      	push	{r4, r5, r7, lr}
 8010fd2:	b08a      	sub	sp, #40	; 0x28
 8010fd4:	af00      	add	r7, sp, #0
 8010fd6:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	2b00      	cmp	r3, #0
 8010fdc:	d106      	bne.n	8010fec <tcp_output+0x1c>
 8010fde:	4b8a      	ldr	r3, [pc, #552]	; (8011208 <tcp_output+0x238>)
 8010fe0:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8010fe4:	4989      	ldr	r1, [pc, #548]	; (801120c <tcp_output+0x23c>)
 8010fe6:	488a      	ldr	r0, [pc, #552]	; (8011210 <tcp_output+0x240>)
 8010fe8:	f003 fd96 	bl	8014b18 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	7d1b      	ldrb	r3, [r3, #20]
 8010ff0:	2b01      	cmp	r3, #1
 8010ff2:	d106      	bne.n	8011002 <tcp_output+0x32>
 8010ff4:	4b84      	ldr	r3, [pc, #528]	; (8011208 <tcp_output+0x238>)
 8010ff6:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8010ffa:	4986      	ldr	r1, [pc, #536]	; (8011214 <tcp_output+0x244>)
 8010ffc:	4884      	ldr	r0, [pc, #528]	; (8011210 <tcp_output+0x240>)
 8010ffe:	f003 fd8b 	bl	8014b18 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8011002:	4b85      	ldr	r3, [pc, #532]	; (8011218 <tcp_output+0x248>)
 8011004:	681b      	ldr	r3, [r3, #0]
 8011006:	687a      	ldr	r2, [r7, #4]
 8011008:	429a      	cmp	r2, r3
 801100a:	d101      	bne.n	8011010 <tcp_output+0x40>
    return ERR_OK;
 801100c:	2300      	movs	r3, #0
 801100e:	e1ce      	b.n	80113ae <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801101c:	4293      	cmp	r3, r2
 801101e:	bf28      	it	cs
 8011020:	4613      	movcs	r3, r2
 8011022:	b29b      	uxth	r3, r3
 8011024:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801102a:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 801102c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801102e:	2b00      	cmp	r3, #0
 8011030:	d10b      	bne.n	801104a <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	8b5b      	ldrh	r3, [r3, #26]
 8011036:	f003 0302 	and.w	r3, r3, #2
 801103a:	2b00      	cmp	r3, #0
 801103c:	f000 81aa 	beq.w	8011394 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8011040:	6878      	ldr	r0, [r7, #4]
 8011042:	f000 fdcb 	bl	8011bdc <tcp_send_empty_ack>
 8011046:	4603      	mov	r3, r0
 8011048:	e1b1      	b.n	80113ae <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801104a:	6879      	ldr	r1, [r7, #4]
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	3304      	adds	r3, #4
 8011050:	461a      	mov	r2, r3
 8011052:	6878      	ldr	r0, [r7, #4]
 8011054:	f7ff f824 	bl	80100a0 <tcp_route>
 8011058:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801105a:	697b      	ldr	r3, [r7, #20]
 801105c:	2b00      	cmp	r3, #0
 801105e:	d102      	bne.n	8011066 <tcp_output+0x96>
    return ERR_RTE;
 8011060:	f06f 0303 	mvn.w	r3, #3
 8011064:	e1a3      	b.n	80113ae <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	2b00      	cmp	r3, #0
 801106a:	d003      	beq.n	8011074 <tcp_output+0xa4>
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	681b      	ldr	r3, [r3, #0]
 8011070:	2b00      	cmp	r3, #0
 8011072:	d111      	bne.n	8011098 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8011074:	697b      	ldr	r3, [r7, #20]
 8011076:	2b00      	cmp	r3, #0
 8011078:	d002      	beq.n	8011080 <tcp_output+0xb0>
 801107a:	697b      	ldr	r3, [r7, #20]
 801107c:	3304      	adds	r3, #4
 801107e:	e000      	b.n	8011082 <tcp_output+0xb2>
 8011080:	2300      	movs	r3, #0
 8011082:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8011084:	693b      	ldr	r3, [r7, #16]
 8011086:	2b00      	cmp	r3, #0
 8011088:	d102      	bne.n	8011090 <tcp_output+0xc0>
      return ERR_RTE;
 801108a:	f06f 0303 	mvn.w	r3, #3
 801108e:	e18e      	b.n	80113ae <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8011090:	693b      	ldr	r3, [r7, #16]
 8011092:	681a      	ldr	r2, [r3, #0]
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8011098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801109a:	68db      	ldr	r3, [r3, #12]
 801109c:	685b      	ldr	r3, [r3, #4]
 801109e:	4618      	mov	r0, r3
 80110a0:	f7f9 f8e1 	bl	800a266 <lwip_htonl>
 80110a4:	4602      	mov	r2, r0
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80110aa:	1ad3      	subs	r3, r2, r3
 80110ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80110ae:	8912      	ldrh	r2, [r2, #8]
 80110b0:	4413      	add	r3, r2
 80110b2:	69ba      	ldr	r2, [r7, #24]
 80110b4:	429a      	cmp	r2, r3
 80110b6:	d227      	bcs.n	8011108 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80110be:	461a      	mov	r2, r3
 80110c0:	69bb      	ldr	r3, [r7, #24]
 80110c2:	4293      	cmp	r3, r2
 80110c4:	d114      	bne.n	80110f0 <tcp_output+0x120>
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80110ca:	2b00      	cmp	r3, #0
 80110cc:	d110      	bne.n	80110f0 <tcp_output+0x120>
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80110d4:	2b00      	cmp	r3, #0
 80110d6:	d10b      	bne.n	80110f0 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	2200      	movs	r2, #0
 80110dc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	2201      	movs	r2, #1
 80110e4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	2200      	movs	r2, #0
 80110ec:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	8b5b      	ldrh	r3, [r3, #26]
 80110f4:	f003 0302 	and.w	r3, r3, #2
 80110f8:	2b00      	cmp	r3, #0
 80110fa:	f000 814d 	beq.w	8011398 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 80110fe:	6878      	ldr	r0, [r7, #4]
 8011100:	f000 fd6c 	bl	8011bdc <tcp_send_empty_ack>
 8011104:	4603      	mov	r3, r0
 8011106:	e152      	b.n	80113ae <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	2200      	movs	r2, #0
 801110c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011114:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8011116:	6a3b      	ldr	r3, [r7, #32]
 8011118:	2b00      	cmp	r3, #0
 801111a:	f000 811c 	beq.w	8011356 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801111e:	e002      	b.n	8011126 <tcp_output+0x156>
 8011120:	6a3b      	ldr	r3, [r7, #32]
 8011122:	681b      	ldr	r3, [r3, #0]
 8011124:	623b      	str	r3, [r7, #32]
 8011126:	6a3b      	ldr	r3, [r7, #32]
 8011128:	681b      	ldr	r3, [r3, #0]
 801112a:	2b00      	cmp	r3, #0
 801112c:	d1f8      	bne.n	8011120 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801112e:	e112      	b.n	8011356 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8011130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011132:	68db      	ldr	r3, [r3, #12]
 8011134:	899b      	ldrh	r3, [r3, #12]
 8011136:	b29b      	uxth	r3, r3
 8011138:	4618      	mov	r0, r3
 801113a:	f7f9 f87f 	bl	800a23c <lwip_htons>
 801113e:	4603      	mov	r3, r0
 8011140:	b2db      	uxtb	r3, r3
 8011142:	f003 0304 	and.w	r3, r3, #4
 8011146:	2b00      	cmp	r3, #0
 8011148:	d006      	beq.n	8011158 <tcp_output+0x188>
 801114a:	4b2f      	ldr	r3, [pc, #188]	; (8011208 <tcp_output+0x238>)
 801114c:	f240 5236 	movw	r2, #1334	; 0x536
 8011150:	4932      	ldr	r1, [pc, #200]	; (801121c <tcp_output+0x24c>)
 8011152:	482f      	ldr	r0, [pc, #188]	; (8011210 <tcp_output+0x240>)
 8011154:	f003 fce0 	bl	8014b18 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801115c:	2b00      	cmp	r3, #0
 801115e:	d01f      	beq.n	80111a0 <tcp_output+0x1d0>
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	8b5b      	ldrh	r3, [r3, #26]
 8011164:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8011168:	2b00      	cmp	r3, #0
 801116a:	d119      	bne.n	80111a0 <tcp_output+0x1d0>
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011170:	2b00      	cmp	r3, #0
 8011172:	d00b      	beq.n	801118c <tcp_output+0x1bc>
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011178:	681b      	ldr	r3, [r3, #0]
 801117a:	2b00      	cmp	r3, #0
 801117c:	d110      	bne.n	80111a0 <tcp_output+0x1d0>
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011182:	891a      	ldrh	r2, [r3, #8]
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011188:	429a      	cmp	r2, r3
 801118a:	d209      	bcs.n	80111a0 <tcp_output+0x1d0>
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8011192:	2b00      	cmp	r3, #0
 8011194:	d004      	beq.n	80111a0 <tcp_output+0x1d0>
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801119c:	2b08      	cmp	r3, #8
 801119e:	d901      	bls.n	80111a4 <tcp_output+0x1d4>
 80111a0:	2301      	movs	r3, #1
 80111a2:	e000      	b.n	80111a6 <tcp_output+0x1d6>
 80111a4:	2300      	movs	r3, #0
 80111a6:	2b00      	cmp	r3, #0
 80111a8:	d106      	bne.n	80111b8 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	8b5b      	ldrh	r3, [r3, #26]
 80111ae:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80111b2:	2b00      	cmp	r3, #0
 80111b4:	f000 80e4 	beq.w	8011380 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	7d1b      	ldrb	r3, [r3, #20]
 80111bc:	2b02      	cmp	r3, #2
 80111be:	d00d      	beq.n	80111dc <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80111c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111c2:	68db      	ldr	r3, [r3, #12]
 80111c4:	899b      	ldrh	r3, [r3, #12]
 80111c6:	b29c      	uxth	r4, r3
 80111c8:	2010      	movs	r0, #16
 80111ca:	f7f9 f837 	bl	800a23c <lwip_htons>
 80111ce:	4603      	mov	r3, r0
 80111d0:	461a      	mov	r2, r3
 80111d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111d4:	68db      	ldr	r3, [r3, #12]
 80111d6:	4322      	orrs	r2, r4
 80111d8:	b292      	uxth	r2, r2
 80111da:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 80111dc:	697a      	ldr	r2, [r7, #20]
 80111de:	6879      	ldr	r1, [r7, #4]
 80111e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80111e2:	f000 f909 	bl	80113f8 <tcp_output_segment>
 80111e6:	4603      	mov	r3, r0
 80111e8:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80111ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80111ee:	2b00      	cmp	r3, #0
 80111f0:	d016      	beq.n	8011220 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	8b5b      	ldrh	r3, [r3, #26]
 80111f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80111fa:	b29a      	uxth	r2, r3
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	835a      	strh	r2, [r3, #26]
      return err;
 8011200:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011204:	e0d3      	b.n	80113ae <tcp_output+0x3de>
 8011206:	bf00      	nop
 8011208:	080177d8 	.word	0x080177d8
 801120c:	08017d1c 	.word	0x08017d1c
 8011210:	0801782c 	.word	0x0801782c
 8011214:	08017d34 	.word	0x08017d34
 8011218:	20008bf0 	.word	0x20008bf0
 801121c:	08017d5c 	.word	0x08017d5c
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8011220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011222:	681a      	ldr	r2, [r3, #0]
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	7d1b      	ldrb	r3, [r3, #20]
 801122c:	2b02      	cmp	r3, #2
 801122e:	d006      	beq.n	801123e <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	8b5b      	ldrh	r3, [r3, #26]
 8011234:	f023 0303 	bic.w	r3, r3, #3
 8011238:	b29a      	uxth	r2, r3
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801123e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011240:	68db      	ldr	r3, [r3, #12]
 8011242:	685b      	ldr	r3, [r3, #4]
 8011244:	4618      	mov	r0, r3
 8011246:	f7f9 f80e 	bl	800a266 <lwip_htonl>
 801124a:	4604      	mov	r4, r0
 801124c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801124e:	891b      	ldrh	r3, [r3, #8]
 8011250:	461d      	mov	r5, r3
 8011252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011254:	68db      	ldr	r3, [r3, #12]
 8011256:	899b      	ldrh	r3, [r3, #12]
 8011258:	b29b      	uxth	r3, r3
 801125a:	4618      	mov	r0, r3
 801125c:	f7f8 ffee 	bl	800a23c <lwip_htons>
 8011260:	4603      	mov	r3, r0
 8011262:	b2db      	uxtb	r3, r3
 8011264:	f003 0303 	and.w	r3, r3, #3
 8011268:	2b00      	cmp	r3, #0
 801126a:	d001      	beq.n	8011270 <tcp_output+0x2a0>
 801126c:	2301      	movs	r3, #1
 801126e:	e000      	b.n	8011272 <tcp_output+0x2a2>
 8011270:	2300      	movs	r3, #0
 8011272:	442b      	add	r3, r5
 8011274:	4423      	add	r3, r4
 8011276:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801127c:	68bb      	ldr	r3, [r7, #8]
 801127e:	1ad3      	subs	r3, r2, r3
 8011280:	2b00      	cmp	r3, #0
 8011282:	da02      	bge.n	801128a <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	68ba      	ldr	r2, [r7, #8]
 8011288:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801128a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801128c:	891b      	ldrh	r3, [r3, #8]
 801128e:	461c      	mov	r4, r3
 8011290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011292:	68db      	ldr	r3, [r3, #12]
 8011294:	899b      	ldrh	r3, [r3, #12]
 8011296:	b29b      	uxth	r3, r3
 8011298:	4618      	mov	r0, r3
 801129a:	f7f8 ffcf 	bl	800a23c <lwip_htons>
 801129e:	4603      	mov	r3, r0
 80112a0:	b2db      	uxtb	r3, r3
 80112a2:	f003 0303 	and.w	r3, r3, #3
 80112a6:	2b00      	cmp	r3, #0
 80112a8:	d001      	beq.n	80112ae <tcp_output+0x2de>
 80112aa:	2301      	movs	r3, #1
 80112ac:	e000      	b.n	80112b0 <tcp_output+0x2e0>
 80112ae:	2300      	movs	r3, #0
 80112b0:	4423      	add	r3, r4
 80112b2:	2b00      	cmp	r3, #0
 80112b4:	d049      	beq.n	801134a <tcp_output+0x37a>
      seg->next = NULL;
 80112b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112b8:	2200      	movs	r2, #0
 80112ba:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	d105      	bne.n	80112d0 <tcp_output+0x300>
        pcb->unacked = seg;
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80112c8:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 80112ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112cc:	623b      	str	r3, [r7, #32]
 80112ce:	e03f      	b.n	8011350 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80112d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112d2:	68db      	ldr	r3, [r3, #12]
 80112d4:	685b      	ldr	r3, [r3, #4]
 80112d6:	4618      	mov	r0, r3
 80112d8:	f7f8 ffc5 	bl	800a266 <lwip_htonl>
 80112dc:	4604      	mov	r4, r0
 80112de:	6a3b      	ldr	r3, [r7, #32]
 80112e0:	68db      	ldr	r3, [r3, #12]
 80112e2:	685b      	ldr	r3, [r3, #4]
 80112e4:	4618      	mov	r0, r3
 80112e6:	f7f8 ffbe 	bl	800a266 <lwip_htonl>
 80112ea:	4603      	mov	r3, r0
 80112ec:	1ae3      	subs	r3, r4, r3
 80112ee:	2b00      	cmp	r3, #0
 80112f0:	da24      	bge.n	801133c <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	3370      	adds	r3, #112	; 0x70
 80112f6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80112f8:	e002      	b.n	8011300 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 80112fa:	69fb      	ldr	r3, [r7, #28]
 80112fc:	681b      	ldr	r3, [r3, #0]
 80112fe:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8011300:	69fb      	ldr	r3, [r7, #28]
 8011302:	681b      	ldr	r3, [r3, #0]
 8011304:	2b00      	cmp	r3, #0
 8011306:	d011      	beq.n	801132c <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8011308:	69fb      	ldr	r3, [r7, #28]
 801130a:	681b      	ldr	r3, [r3, #0]
 801130c:	68db      	ldr	r3, [r3, #12]
 801130e:	685b      	ldr	r3, [r3, #4]
 8011310:	4618      	mov	r0, r3
 8011312:	f7f8 ffa8 	bl	800a266 <lwip_htonl>
 8011316:	4604      	mov	r4, r0
 8011318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801131a:	68db      	ldr	r3, [r3, #12]
 801131c:	685b      	ldr	r3, [r3, #4]
 801131e:	4618      	mov	r0, r3
 8011320:	f7f8 ffa1 	bl	800a266 <lwip_htonl>
 8011324:	4603      	mov	r3, r0
 8011326:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8011328:	2b00      	cmp	r3, #0
 801132a:	dbe6      	blt.n	80112fa <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 801132c:	69fb      	ldr	r3, [r7, #28]
 801132e:	681a      	ldr	r2, [r3, #0]
 8011330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011332:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8011334:	69fb      	ldr	r3, [r7, #28]
 8011336:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011338:	601a      	str	r2, [r3, #0]
 801133a:	e009      	b.n	8011350 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801133c:	6a3b      	ldr	r3, [r7, #32]
 801133e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011340:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8011342:	6a3b      	ldr	r3, [r7, #32]
 8011344:	681b      	ldr	r3, [r3, #0]
 8011346:	623b      	str	r3, [r7, #32]
 8011348:	e002      	b.n	8011350 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801134a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801134c:	f7fb ff01 	bl	800d152 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011354:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8011356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011358:	2b00      	cmp	r3, #0
 801135a:	d012      	beq.n	8011382 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801135c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801135e:	68db      	ldr	r3, [r3, #12]
 8011360:	685b      	ldr	r3, [r3, #4]
 8011362:	4618      	mov	r0, r3
 8011364:	f7f8 ff7f 	bl	800a266 <lwip_htonl>
 8011368:	4602      	mov	r2, r0
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801136e:	1ad3      	subs	r3, r2, r3
 8011370:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011372:	8912      	ldrh	r2, [r2, #8]
 8011374:	4413      	add	r3, r2
  while (seg != NULL &&
 8011376:	69ba      	ldr	r2, [r7, #24]
 8011378:	429a      	cmp	r2, r3
 801137a:	f4bf aed9 	bcs.w	8011130 <tcp_output+0x160>
 801137e:	e000      	b.n	8011382 <tcp_output+0x3b2>
      break;
 8011380:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011386:	2b00      	cmp	r3, #0
 8011388:	d108      	bne.n	801139c <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	2200      	movs	r2, #0
 801138e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8011392:	e004      	b.n	801139e <tcp_output+0x3ce>
    goto output_done;
 8011394:	bf00      	nop
 8011396:	e002      	b.n	801139e <tcp_output+0x3ce>
    goto output_done;
 8011398:	bf00      	nop
 801139a:	e000      	b.n	801139e <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 801139c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	8b5b      	ldrh	r3, [r3, #26]
 80113a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80113a6:	b29a      	uxth	r2, r3
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 80113ac:	2300      	movs	r3, #0
}
 80113ae:	4618      	mov	r0, r3
 80113b0:	3728      	adds	r7, #40	; 0x28
 80113b2:	46bd      	mov	sp, r7
 80113b4:	bdb0      	pop	{r4, r5, r7, pc}
 80113b6:	bf00      	nop

080113b8 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80113b8:	b580      	push	{r7, lr}
 80113ba:	b082      	sub	sp, #8
 80113bc:	af00      	add	r7, sp, #0
 80113be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	d106      	bne.n	80113d4 <tcp_output_segment_busy+0x1c>
 80113c6:	4b09      	ldr	r3, [pc, #36]	; (80113ec <tcp_output_segment_busy+0x34>)
 80113c8:	f240 529a 	movw	r2, #1434	; 0x59a
 80113cc:	4908      	ldr	r1, [pc, #32]	; (80113f0 <tcp_output_segment_busy+0x38>)
 80113ce:	4809      	ldr	r0, [pc, #36]	; (80113f4 <tcp_output_segment_busy+0x3c>)
 80113d0:	f003 fba2 	bl	8014b18 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	685b      	ldr	r3, [r3, #4]
 80113d8:	7b9b      	ldrb	r3, [r3, #14]
 80113da:	2b01      	cmp	r3, #1
 80113dc:	d001      	beq.n	80113e2 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 80113de:	2301      	movs	r3, #1
 80113e0:	e000      	b.n	80113e4 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 80113e2:	2300      	movs	r3, #0
}
 80113e4:	4618      	mov	r0, r3
 80113e6:	3708      	adds	r7, #8
 80113e8:	46bd      	mov	sp, r7
 80113ea:	bd80      	pop	{r7, pc}
 80113ec:	080177d8 	.word	0x080177d8
 80113f0:	08017d74 	.word	0x08017d74
 80113f4:	0801782c 	.word	0x0801782c

080113f8 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80113f8:	b5b0      	push	{r4, r5, r7, lr}
 80113fa:	b08c      	sub	sp, #48	; 0x30
 80113fc:	af04      	add	r7, sp, #16
 80113fe:	60f8      	str	r0, [r7, #12]
 8011400:	60b9      	str	r1, [r7, #8]
 8011402:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8011404:	68fb      	ldr	r3, [r7, #12]
 8011406:	2b00      	cmp	r3, #0
 8011408:	d106      	bne.n	8011418 <tcp_output_segment+0x20>
 801140a:	4b63      	ldr	r3, [pc, #396]	; (8011598 <tcp_output_segment+0x1a0>)
 801140c:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8011410:	4962      	ldr	r1, [pc, #392]	; (801159c <tcp_output_segment+0x1a4>)
 8011412:	4863      	ldr	r0, [pc, #396]	; (80115a0 <tcp_output_segment+0x1a8>)
 8011414:	f003 fb80 	bl	8014b18 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8011418:	68bb      	ldr	r3, [r7, #8]
 801141a:	2b00      	cmp	r3, #0
 801141c:	d106      	bne.n	801142c <tcp_output_segment+0x34>
 801141e:	4b5e      	ldr	r3, [pc, #376]	; (8011598 <tcp_output_segment+0x1a0>)
 8011420:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8011424:	495f      	ldr	r1, [pc, #380]	; (80115a4 <tcp_output_segment+0x1ac>)
 8011426:	485e      	ldr	r0, [pc, #376]	; (80115a0 <tcp_output_segment+0x1a8>)
 8011428:	f003 fb76 	bl	8014b18 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 801142c:	687b      	ldr	r3, [r7, #4]
 801142e:	2b00      	cmp	r3, #0
 8011430:	d106      	bne.n	8011440 <tcp_output_segment+0x48>
 8011432:	4b59      	ldr	r3, [pc, #356]	; (8011598 <tcp_output_segment+0x1a0>)
 8011434:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8011438:	495b      	ldr	r1, [pc, #364]	; (80115a8 <tcp_output_segment+0x1b0>)
 801143a:	4859      	ldr	r0, [pc, #356]	; (80115a0 <tcp_output_segment+0x1a8>)
 801143c:	f003 fb6c 	bl	8014b18 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8011440:	68f8      	ldr	r0, [r7, #12]
 8011442:	f7ff ffb9 	bl	80113b8 <tcp_output_segment_busy>
 8011446:	4603      	mov	r3, r0
 8011448:	2b00      	cmp	r3, #0
 801144a:	d001      	beq.n	8011450 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 801144c:	2300      	movs	r3, #0
 801144e:	e09f      	b.n	8011590 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8011450:	68bb      	ldr	r3, [r7, #8]
 8011452:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011454:	68fb      	ldr	r3, [r7, #12]
 8011456:	68dc      	ldr	r4, [r3, #12]
 8011458:	4610      	mov	r0, r2
 801145a:	f7f8 ff04 	bl	800a266 <lwip_htonl>
 801145e:	4603      	mov	r3, r0
 8011460:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8011462:	68bb      	ldr	r3, [r7, #8]
 8011464:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8011466:	68fb      	ldr	r3, [r7, #12]
 8011468:	68dc      	ldr	r4, [r3, #12]
 801146a:	4610      	mov	r0, r2
 801146c:	f7f8 fee6 	bl	800a23c <lwip_htons>
 8011470:	4603      	mov	r3, r0
 8011472:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8011474:	68bb      	ldr	r3, [r7, #8]
 8011476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011478:	68ba      	ldr	r2, [r7, #8]
 801147a:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801147c:	441a      	add	r2, r3
 801147e:	68bb      	ldr	r3, [r7, #8]
 8011480:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8011482:	68fb      	ldr	r3, [r7, #12]
 8011484:	68db      	ldr	r3, [r3, #12]
 8011486:	3314      	adds	r3, #20
 8011488:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801148a:	68fb      	ldr	r3, [r7, #12]
 801148c:	7a9b      	ldrb	r3, [r3, #10]
 801148e:	f003 0301 	and.w	r3, r3, #1
 8011492:	2b00      	cmp	r3, #0
 8011494:	d015      	beq.n	80114c2 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8011496:	68bb      	ldr	r3, [r7, #8]
 8011498:	3304      	adds	r3, #4
 801149a:	461a      	mov	r2, r3
 801149c:	6879      	ldr	r1, [r7, #4]
 801149e:	f44f 7006 	mov.w	r0, #536	; 0x218
 80114a2:	f7fc fa33 	bl	800d90c <tcp_eff_send_mss_netif>
 80114a6:	4603      	mov	r3, r0
 80114a8:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80114aa:	8b7b      	ldrh	r3, [r7, #26]
 80114ac:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 80114b0:	4618      	mov	r0, r3
 80114b2:	f7f8 fed8 	bl	800a266 <lwip_htonl>
 80114b6:	4602      	mov	r2, r0
 80114b8:	69fb      	ldr	r3, [r7, #28]
 80114ba:	601a      	str	r2, [r3, #0]
    opts += 1;
 80114bc:	69fb      	ldr	r3, [r7, #28]
 80114be:	3304      	adds	r3, #4
 80114c0:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80114c2:	68bb      	ldr	r3, [r7, #8]
 80114c4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80114c8:	2b00      	cmp	r3, #0
 80114ca:	da02      	bge.n	80114d2 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 80114cc:	68bb      	ldr	r3, [r7, #8]
 80114ce:	2200      	movs	r2, #0
 80114d0:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 80114d2:	68bb      	ldr	r3, [r7, #8]
 80114d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80114d6:	2b00      	cmp	r3, #0
 80114d8:	d10c      	bne.n	80114f4 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80114da:	4b34      	ldr	r3, [pc, #208]	; (80115ac <tcp_output_segment+0x1b4>)
 80114dc:	681a      	ldr	r2, [r3, #0]
 80114de:	68bb      	ldr	r3, [r7, #8]
 80114e0:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80114e2:	68fb      	ldr	r3, [r7, #12]
 80114e4:	68db      	ldr	r3, [r3, #12]
 80114e6:	685b      	ldr	r3, [r3, #4]
 80114e8:	4618      	mov	r0, r3
 80114ea:	f7f8 febc 	bl	800a266 <lwip_htonl>
 80114ee:	4602      	mov	r2, r0
 80114f0:	68bb      	ldr	r3, [r7, #8]
 80114f2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80114f4:	68fb      	ldr	r3, [r7, #12]
 80114f6:	68da      	ldr	r2, [r3, #12]
 80114f8:	68fb      	ldr	r3, [r7, #12]
 80114fa:	685b      	ldr	r3, [r3, #4]
 80114fc:	685b      	ldr	r3, [r3, #4]
 80114fe:	1ad3      	subs	r3, r2, r3
 8011500:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8011502:	68fb      	ldr	r3, [r7, #12]
 8011504:	685b      	ldr	r3, [r3, #4]
 8011506:	8959      	ldrh	r1, [r3, #10]
 8011508:	68fb      	ldr	r3, [r7, #12]
 801150a:	685b      	ldr	r3, [r3, #4]
 801150c:	8b3a      	ldrh	r2, [r7, #24]
 801150e:	1a8a      	subs	r2, r1, r2
 8011510:	b292      	uxth	r2, r2
 8011512:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8011514:	68fb      	ldr	r3, [r7, #12]
 8011516:	685b      	ldr	r3, [r3, #4]
 8011518:	8919      	ldrh	r1, [r3, #8]
 801151a:	68fb      	ldr	r3, [r7, #12]
 801151c:	685b      	ldr	r3, [r3, #4]
 801151e:	8b3a      	ldrh	r2, [r7, #24]
 8011520:	1a8a      	subs	r2, r1, r2
 8011522:	b292      	uxth	r2, r2
 8011524:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8011526:	68fb      	ldr	r3, [r7, #12]
 8011528:	685b      	ldr	r3, [r3, #4]
 801152a:	68fa      	ldr	r2, [r7, #12]
 801152c:	68d2      	ldr	r2, [r2, #12]
 801152e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8011530:	68fb      	ldr	r3, [r7, #12]
 8011532:	68db      	ldr	r3, [r3, #12]
 8011534:	2200      	movs	r2, #0
 8011536:	741a      	strb	r2, [r3, #16]
 8011538:	2200      	movs	r2, #0
 801153a:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801153c:	68fb      	ldr	r3, [r7, #12]
 801153e:	68db      	ldr	r3, [r3, #12]
 8011540:	f103 0214 	add.w	r2, r3, #20
 8011544:	68fb      	ldr	r3, [r7, #12]
 8011546:	7a9b      	ldrb	r3, [r3, #10]
 8011548:	009b      	lsls	r3, r3, #2
 801154a:	f003 0304 	and.w	r3, r3, #4
 801154e:	4413      	add	r3, r2
 8011550:	69fa      	ldr	r2, [r7, #28]
 8011552:	429a      	cmp	r2, r3
 8011554:	d006      	beq.n	8011564 <tcp_output_segment+0x16c>
 8011556:	4b10      	ldr	r3, [pc, #64]	; (8011598 <tcp_output_segment+0x1a0>)
 8011558:	f240 621c 	movw	r2, #1564	; 0x61c
 801155c:	4914      	ldr	r1, [pc, #80]	; (80115b0 <tcp_output_segment+0x1b8>)
 801155e:	4810      	ldr	r0, [pc, #64]	; (80115a0 <tcp_output_segment+0x1a8>)
 8011560:	f003 fada 	bl	8014b18 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8011564:	68fb      	ldr	r3, [r7, #12]
 8011566:	6858      	ldr	r0, [r3, #4]
 8011568:	68b9      	ldr	r1, [r7, #8]
 801156a:	68bb      	ldr	r3, [r7, #8]
 801156c:	1d1c      	adds	r4, r3, #4
 801156e:	68bb      	ldr	r3, [r7, #8]
 8011570:	7add      	ldrb	r5, [r3, #11]
 8011572:	68bb      	ldr	r3, [r7, #8]
 8011574:	7a9b      	ldrb	r3, [r3, #10]
 8011576:	687a      	ldr	r2, [r7, #4]
 8011578:	9202      	str	r2, [sp, #8]
 801157a:	2206      	movs	r2, #6
 801157c:	9201      	str	r2, [sp, #4]
 801157e:	9300      	str	r3, [sp, #0]
 8011580:	462b      	mov	r3, r5
 8011582:	4622      	mov	r2, r4
 8011584:	f002 fa36 	bl	80139f4 <ip4_output_if>
 8011588:	4603      	mov	r3, r0
 801158a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801158c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011590:	4618      	mov	r0, r3
 8011592:	3720      	adds	r7, #32
 8011594:	46bd      	mov	sp, r7
 8011596:	bdb0      	pop	{r4, r5, r7, pc}
 8011598:	080177d8 	.word	0x080177d8
 801159c:	08017d9c 	.word	0x08017d9c
 80115a0:	0801782c 	.word	0x0801782c
 80115a4:	08017dbc 	.word	0x08017dbc
 80115a8:	08017ddc 	.word	0x08017ddc
 80115ac:	20008ba4 	.word	0x20008ba4
 80115b0:	08017e00 	.word	0x08017e00

080115b4 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80115b4:	b5b0      	push	{r4, r5, r7, lr}
 80115b6:	b084      	sub	sp, #16
 80115b8:	af00      	add	r7, sp, #0
 80115ba:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	2b00      	cmp	r3, #0
 80115c0:	d106      	bne.n	80115d0 <tcp_rexmit_rto_prepare+0x1c>
 80115c2:	4b31      	ldr	r3, [pc, #196]	; (8011688 <tcp_rexmit_rto_prepare+0xd4>)
 80115c4:	f240 6263 	movw	r2, #1635	; 0x663
 80115c8:	4930      	ldr	r1, [pc, #192]	; (801168c <tcp_rexmit_rto_prepare+0xd8>)
 80115ca:	4831      	ldr	r0, [pc, #196]	; (8011690 <tcp_rexmit_rto_prepare+0xdc>)
 80115cc:	f003 faa4 	bl	8014b18 <iprintf>

  if (pcb->unacked == NULL) {
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80115d4:	2b00      	cmp	r3, #0
 80115d6:	d102      	bne.n	80115de <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80115d8:	f06f 0305 	mvn.w	r3, #5
 80115dc:	e050      	b.n	8011680 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80115e2:	60fb      	str	r3, [r7, #12]
 80115e4:	e00b      	b.n	80115fe <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80115e6:	68f8      	ldr	r0, [r7, #12]
 80115e8:	f7ff fee6 	bl	80113b8 <tcp_output_segment_busy>
 80115ec:	4603      	mov	r3, r0
 80115ee:	2b00      	cmp	r3, #0
 80115f0:	d002      	beq.n	80115f8 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80115f2:	f06f 0305 	mvn.w	r3, #5
 80115f6:	e043      	b.n	8011680 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80115f8:	68fb      	ldr	r3, [r7, #12]
 80115fa:	681b      	ldr	r3, [r3, #0]
 80115fc:	60fb      	str	r3, [r7, #12]
 80115fe:	68fb      	ldr	r3, [r7, #12]
 8011600:	681b      	ldr	r3, [r3, #0]
 8011602:	2b00      	cmp	r3, #0
 8011604:	d1ef      	bne.n	80115e6 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8011606:	68f8      	ldr	r0, [r7, #12]
 8011608:	f7ff fed6 	bl	80113b8 <tcp_output_segment_busy>
 801160c:	4603      	mov	r3, r0
 801160e:	2b00      	cmp	r3, #0
 8011610:	d002      	beq.n	8011618 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8011612:	f06f 0305 	mvn.w	r3, #5
 8011616:	e033      	b.n	8011680 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801161c:	68fb      	ldr	r3, [r7, #12]
 801161e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8011620:	687b      	ldr	r3, [r7, #4]
 8011622:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	2200      	movs	r2, #0
 801162c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	8b5b      	ldrh	r3, [r3, #26]
 8011632:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8011636:	b29a      	uxth	r2, r3
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801163c:	68fb      	ldr	r3, [r7, #12]
 801163e:	68db      	ldr	r3, [r3, #12]
 8011640:	685b      	ldr	r3, [r3, #4]
 8011642:	4618      	mov	r0, r3
 8011644:	f7f8 fe0f 	bl	800a266 <lwip_htonl>
 8011648:	4604      	mov	r4, r0
 801164a:	68fb      	ldr	r3, [r7, #12]
 801164c:	891b      	ldrh	r3, [r3, #8]
 801164e:	461d      	mov	r5, r3
 8011650:	68fb      	ldr	r3, [r7, #12]
 8011652:	68db      	ldr	r3, [r3, #12]
 8011654:	899b      	ldrh	r3, [r3, #12]
 8011656:	b29b      	uxth	r3, r3
 8011658:	4618      	mov	r0, r3
 801165a:	f7f8 fdef 	bl	800a23c <lwip_htons>
 801165e:	4603      	mov	r3, r0
 8011660:	b2db      	uxtb	r3, r3
 8011662:	f003 0303 	and.w	r3, r3, #3
 8011666:	2b00      	cmp	r3, #0
 8011668:	d001      	beq.n	801166e <tcp_rexmit_rto_prepare+0xba>
 801166a:	2301      	movs	r3, #1
 801166c:	e000      	b.n	8011670 <tcp_rexmit_rto_prepare+0xbc>
 801166e:	2300      	movs	r3, #0
 8011670:	442b      	add	r3, r5
 8011672:	18e2      	adds	r2, r4, r3
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	2200      	movs	r2, #0
 801167c:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801167e:	2300      	movs	r3, #0
}
 8011680:	4618      	mov	r0, r3
 8011682:	3710      	adds	r7, #16
 8011684:	46bd      	mov	sp, r7
 8011686:	bdb0      	pop	{r4, r5, r7, pc}
 8011688:	080177d8 	.word	0x080177d8
 801168c:	08017e14 	.word	0x08017e14
 8011690:	0801782c 	.word	0x0801782c

08011694 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8011694:	b580      	push	{r7, lr}
 8011696:	b082      	sub	sp, #8
 8011698:	af00      	add	r7, sp, #0
 801169a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	2b00      	cmp	r3, #0
 80116a0:	d106      	bne.n	80116b0 <tcp_rexmit_rto_commit+0x1c>
 80116a2:	4b0d      	ldr	r3, [pc, #52]	; (80116d8 <tcp_rexmit_rto_commit+0x44>)
 80116a4:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80116a8:	490c      	ldr	r1, [pc, #48]	; (80116dc <tcp_rexmit_rto_commit+0x48>)
 80116aa:	480d      	ldr	r0, [pc, #52]	; (80116e0 <tcp_rexmit_rto_commit+0x4c>)
 80116ac:	f003 fa34 	bl	8014b18 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80116b6:	2bff      	cmp	r3, #255	; 0xff
 80116b8:	d007      	beq.n	80116ca <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80116c0:	3301      	adds	r3, #1
 80116c2:	b2da      	uxtb	r2, r3
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80116ca:	6878      	ldr	r0, [r7, #4]
 80116cc:	f7ff fc80 	bl	8010fd0 <tcp_output>
}
 80116d0:	bf00      	nop
 80116d2:	3708      	adds	r7, #8
 80116d4:	46bd      	mov	sp, r7
 80116d6:	bd80      	pop	{r7, pc}
 80116d8:	080177d8 	.word	0x080177d8
 80116dc:	08017e38 	.word	0x08017e38
 80116e0:	0801782c 	.word	0x0801782c

080116e4 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80116e4:	b580      	push	{r7, lr}
 80116e6:	b082      	sub	sp, #8
 80116e8:	af00      	add	r7, sp, #0
 80116ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	2b00      	cmp	r3, #0
 80116f0:	d106      	bne.n	8011700 <tcp_rexmit_rto+0x1c>
 80116f2:	4b0a      	ldr	r3, [pc, #40]	; (801171c <tcp_rexmit_rto+0x38>)
 80116f4:	f240 62ad 	movw	r2, #1709	; 0x6ad
 80116f8:	4909      	ldr	r1, [pc, #36]	; (8011720 <tcp_rexmit_rto+0x3c>)
 80116fa:	480a      	ldr	r0, [pc, #40]	; (8011724 <tcp_rexmit_rto+0x40>)
 80116fc:	f003 fa0c 	bl	8014b18 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8011700:	6878      	ldr	r0, [r7, #4]
 8011702:	f7ff ff57 	bl	80115b4 <tcp_rexmit_rto_prepare>
 8011706:	4603      	mov	r3, r0
 8011708:	2b00      	cmp	r3, #0
 801170a:	d102      	bne.n	8011712 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801170c:	6878      	ldr	r0, [r7, #4]
 801170e:	f7ff ffc1 	bl	8011694 <tcp_rexmit_rto_commit>
  }
}
 8011712:	bf00      	nop
 8011714:	3708      	adds	r7, #8
 8011716:	46bd      	mov	sp, r7
 8011718:	bd80      	pop	{r7, pc}
 801171a:	bf00      	nop
 801171c:	080177d8 	.word	0x080177d8
 8011720:	08017e5c 	.word	0x08017e5c
 8011724:	0801782c 	.word	0x0801782c

08011728 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8011728:	b590      	push	{r4, r7, lr}
 801172a:	b085      	sub	sp, #20
 801172c:	af00      	add	r7, sp, #0
 801172e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	2b00      	cmp	r3, #0
 8011734:	d106      	bne.n	8011744 <tcp_rexmit+0x1c>
 8011736:	4b2f      	ldr	r3, [pc, #188]	; (80117f4 <tcp_rexmit+0xcc>)
 8011738:	f240 62c1 	movw	r2, #1729	; 0x6c1
 801173c:	492e      	ldr	r1, [pc, #184]	; (80117f8 <tcp_rexmit+0xd0>)
 801173e:	482f      	ldr	r0, [pc, #188]	; (80117fc <tcp_rexmit+0xd4>)
 8011740:	f003 f9ea 	bl	8014b18 <iprintf>

  if (pcb->unacked == NULL) {
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011748:	2b00      	cmp	r3, #0
 801174a:	d102      	bne.n	8011752 <tcp_rexmit+0x2a>
    return ERR_VAL;
 801174c:	f06f 0305 	mvn.w	r3, #5
 8011750:	e04c      	b.n	80117ec <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011756:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8011758:	68b8      	ldr	r0, [r7, #8]
 801175a:	f7ff fe2d 	bl	80113b8 <tcp_output_segment_busy>
 801175e:	4603      	mov	r3, r0
 8011760:	2b00      	cmp	r3, #0
 8011762:	d002      	beq.n	801176a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8011764:	f06f 0305 	mvn.w	r3, #5
 8011768:	e040      	b.n	80117ec <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801176a:	68bb      	ldr	r3, [r7, #8]
 801176c:	681a      	ldr	r2, [r3, #0]
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	336c      	adds	r3, #108	; 0x6c
 8011776:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8011778:	e002      	b.n	8011780 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801177a:	68fb      	ldr	r3, [r7, #12]
 801177c:	681b      	ldr	r3, [r3, #0]
 801177e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8011780:	68fb      	ldr	r3, [r7, #12]
 8011782:	681b      	ldr	r3, [r3, #0]
 8011784:	2b00      	cmp	r3, #0
 8011786:	d011      	beq.n	80117ac <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8011788:	68fb      	ldr	r3, [r7, #12]
 801178a:	681b      	ldr	r3, [r3, #0]
 801178c:	68db      	ldr	r3, [r3, #12]
 801178e:	685b      	ldr	r3, [r3, #4]
 8011790:	4618      	mov	r0, r3
 8011792:	f7f8 fd68 	bl	800a266 <lwip_htonl>
 8011796:	4604      	mov	r4, r0
 8011798:	68bb      	ldr	r3, [r7, #8]
 801179a:	68db      	ldr	r3, [r3, #12]
 801179c:	685b      	ldr	r3, [r3, #4]
 801179e:	4618      	mov	r0, r3
 80117a0:	f7f8 fd61 	bl	800a266 <lwip_htonl>
 80117a4:	4603      	mov	r3, r0
 80117a6:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80117a8:	2b00      	cmp	r3, #0
 80117aa:	dbe6      	blt.n	801177a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 80117ac:	68fb      	ldr	r3, [r7, #12]
 80117ae:	681a      	ldr	r2, [r3, #0]
 80117b0:	68bb      	ldr	r3, [r7, #8]
 80117b2:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80117b4:	68fb      	ldr	r3, [r7, #12]
 80117b6:	68ba      	ldr	r2, [r7, #8]
 80117b8:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80117ba:	68bb      	ldr	r3, [r7, #8]
 80117bc:	681b      	ldr	r3, [r3, #0]
 80117be:	2b00      	cmp	r3, #0
 80117c0:	d103      	bne.n	80117ca <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	2200      	movs	r2, #0
 80117c6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80117d0:	2bff      	cmp	r3, #255	; 0xff
 80117d2:	d007      	beq.n	80117e4 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80117da:	3301      	adds	r3, #1
 80117dc:	b2da      	uxtb	r2, r3
 80117de:	687b      	ldr	r3, [r7, #4]
 80117e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	2200      	movs	r2, #0
 80117e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 80117ea:	2300      	movs	r3, #0
}
 80117ec:	4618      	mov	r0, r3
 80117ee:	3714      	adds	r7, #20
 80117f0:	46bd      	mov	sp, r7
 80117f2:	bd90      	pop	{r4, r7, pc}
 80117f4:	080177d8 	.word	0x080177d8
 80117f8:	08017e78 	.word	0x08017e78
 80117fc:	0801782c 	.word	0x0801782c

08011800 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8011800:	b580      	push	{r7, lr}
 8011802:	b082      	sub	sp, #8
 8011804:	af00      	add	r7, sp, #0
 8011806:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	2b00      	cmp	r3, #0
 801180c:	d106      	bne.n	801181c <tcp_rexmit_fast+0x1c>
 801180e:	4b2a      	ldr	r3, [pc, #168]	; (80118b8 <tcp_rexmit_fast+0xb8>)
 8011810:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8011814:	4929      	ldr	r1, [pc, #164]	; (80118bc <tcp_rexmit_fast+0xbc>)
 8011816:	482a      	ldr	r0, [pc, #168]	; (80118c0 <tcp_rexmit_fast+0xc0>)
 8011818:	f003 f97e 	bl	8014b18 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011820:	2b00      	cmp	r3, #0
 8011822:	d045      	beq.n	80118b0 <tcp_rexmit_fast+0xb0>
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	8b5b      	ldrh	r3, [r3, #26]
 8011828:	f003 0304 	and.w	r3, r3, #4
 801182c:	2b00      	cmp	r3, #0
 801182e:	d13f      	bne.n	80118b0 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8011830:	6878      	ldr	r0, [r7, #4]
 8011832:	f7ff ff79 	bl	8011728 <tcp_rexmit>
 8011836:	4603      	mov	r3, r0
 8011838:	2b00      	cmp	r3, #0
 801183a:	d139      	bne.n	80118b0 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8011842:	687b      	ldr	r3, [r7, #4]
 8011844:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011848:	4293      	cmp	r3, r2
 801184a:	bf28      	it	cs
 801184c:	4613      	movcs	r3, r2
 801184e:	b29b      	uxth	r3, r3
 8011850:	2b00      	cmp	r3, #0
 8011852:	da00      	bge.n	8011856 <tcp_rexmit_fast+0x56>
 8011854:	3301      	adds	r3, #1
 8011856:	105b      	asrs	r3, r3, #1
 8011858:	b29a      	uxth	r2, r3
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8011866:	461a      	mov	r2, r3
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801186c:	005b      	lsls	r3, r3, #1
 801186e:	429a      	cmp	r2, r3
 8011870:	d206      	bcs.n	8011880 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011876:	005b      	lsls	r3, r3, #1
 8011878:	b29a      	uxth	r2, r3
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801188a:	4619      	mov	r1, r3
 801188c:	0049      	lsls	r1, r1, #1
 801188e:	440b      	add	r3, r1
 8011890:	b29b      	uxth	r3, r3
 8011892:	4413      	add	r3, r2
 8011894:	b29a      	uxth	r2, r3
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	8b5b      	ldrh	r3, [r3, #26]
 80118a0:	f043 0304 	orr.w	r3, r3, #4
 80118a4:	b29a      	uxth	r2, r3
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	2200      	movs	r2, #0
 80118ae:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 80118b0:	bf00      	nop
 80118b2:	3708      	adds	r7, #8
 80118b4:	46bd      	mov	sp, r7
 80118b6:	bd80      	pop	{r7, pc}
 80118b8:	080177d8 	.word	0x080177d8
 80118bc:	08017e90 	.word	0x08017e90
 80118c0:	0801782c 	.word	0x0801782c

080118c4 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 80118c4:	b580      	push	{r7, lr}
 80118c6:	b086      	sub	sp, #24
 80118c8:	af00      	add	r7, sp, #0
 80118ca:	60f8      	str	r0, [r7, #12]
 80118cc:	607b      	str	r3, [r7, #4]
 80118ce:	460b      	mov	r3, r1
 80118d0:	817b      	strh	r3, [r7, #10]
 80118d2:	4613      	mov	r3, r2
 80118d4:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80118d6:	897a      	ldrh	r2, [r7, #10]
 80118d8:	893b      	ldrh	r3, [r7, #8]
 80118da:	4413      	add	r3, r2
 80118dc:	b29b      	uxth	r3, r3
 80118de:	3314      	adds	r3, #20
 80118e0:	b29b      	uxth	r3, r3
 80118e2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80118e6:	4619      	mov	r1, r3
 80118e8:	2022      	movs	r0, #34	; 0x22
 80118ea:	f7f9 fd21 	bl	800b330 <pbuf_alloc>
 80118ee:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80118f0:	697b      	ldr	r3, [r7, #20]
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	d04d      	beq.n	8011992 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80118f6:	897b      	ldrh	r3, [r7, #10]
 80118f8:	3313      	adds	r3, #19
 80118fa:	697a      	ldr	r2, [r7, #20]
 80118fc:	8952      	ldrh	r2, [r2, #10]
 80118fe:	4293      	cmp	r3, r2
 8011900:	db06      	blt.n	8011910 <tcp_output_alloc_header_common+0x4c>
 8011902:	4b26      	ldr	r3, [pc, #152]	; (801199c <tcp_output_alloc_header_common+0xd8>)
 8011904:	f240 7223 	movw	r2, #1827	; 0x723
 8011908:	4925      	ldr	r1, [pc, #148]	; (80119a0 <tcp_output_alloc_header_common+0xdc>)
 801190a:	4826      	ldr	r0, [pc, #152]	; (80119a4 <tcp_output_alloc_header_common+0xe0>)
 801190c:	f003 f904 	bl	8014b18 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8011910:	697b      	ldr	r3, [r7, #20]
 8011912:	685b      	ldr	r3, [r3, #4]
 8011914:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8011916:	8c3b      	ldrh	r3, [r7, #32]
 8011918:	4618      	mov	r0, r3
 801191a:	f7f8 fc8f 	bl	800a23c <lwip_htons>
 801191e:	4603      	mov	r3, r0
 8011920:	461a      	mov	r2, r3
 8011922:	693b      	ldr	r3, [r7, #16]
 8011924:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8011926:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011928:	4618      	mov	r0, r3
 801192a:	f7f8 fc87 	bl	800a23c <lwip_htons>
 801192e:	4603      	mov	r3, r0
 8011930:	461a      	mov	r2, r3
 8011932:	693b      	ldr	r3, [r7, #16]
 8011934:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8011936:	693b      	ldr	r3, [r7, #16]
 8011938:	687a      	ldr	r2, [r7, #4]
 801193a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801193c:	68f8      	ldr	r0, [r7, #12]
 801193e:	f7f8 fc92 	bl	800a266 <lwip_htonl>
 8011942:	4602      	mov	r2, r0
 8011944:	693b      	ldr	r3, [r7, #16]
 8011946:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8011948:	897b      	ldrh	r3, [r7, #10]
 801194a:	089b      	lsrs	r3, r3, #2
 801194c:	b29b      	uxth	r3, r3
 801194e:	3305      	adds	r3, #5
 8011950:	b29b      	uxth	r3, r3
 8011952:	031b      	lsls	r3, r3, #12
 8011954:	b29a      	uxth	r2, r3
 8011956:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801195a:	b29b      	uxth	r3, r3
 801195c:	4313      	orrs	r3, r2
 801195e:	b29b      	uxth	r3, r3
 8011960:	4618      	mov	r0, r3
 8011962:	f7f8 fc6b 	bl	800a23c <lwip_htons>
 8011966:	4603      	mov	r3, r0
 8011968:	461a      	mov	r2, r3
 801196a:	693b      	ldr	r3, [r7, #16]
 801196c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801196e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011970:	4618      	mov	r0, r3
 8011972:	f7f8 fc63 	bl	800a23c <lwip_htons>
 8011976:	4603      	mov	r3, r0
 8011978:	461a      	mov	r2, r3
 801197a:	693b      	ldr	r3, [r7, #16]
 801197c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801197e:	693b      	ldr	r3, [r7, #16]
 8011980:	2200      	movs	r2, #0
 8011982:	741a      	strb	r2, [r3, #16]
 8011984:	2200      	movs	r2, #0
 8011986:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8011988:	693b      	ldr	r3, [r7, #16]
 801198a:	2200      	movs	r2, #0
 801198c:	749a      	strb	r2, [r3, #18]
 801198e:	2200      	movs	r2, #0
 8011990:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8011992:	697b      	ldr	r3, [r7, #20]
}
 8011994:	4618      	mov	r0, r3
 8011996:	3718      	adds	r7, #24
 8011998:	46bd      	mov	sp, r7
 801199a:	bd80      	pop	{r7, pc}
 801199c:	080177d8 	.word	0x080177d8
 80119a0:	08017eb0 	.word	0x08017eb0
 80119a4:	0801782c 	.word	0x0801782c

080119a8 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 80119a8:	b5b0      	push	{r4, r5, r7, lr}
 80119aa:	b08a      	sub	sp, #40	; 0x28
 80119ac:	af04      	add	r7, sp, #16
 80119ae:	60f8      	str	r0, [r7, #12]
 80119b0:	607b      	str	r3, [r7, #4]
 80119b2:	460b      	mov	r3, r1
 80119b4:	817b      	strh	r3, [r7, #10]
 80119b6:	4613      	mov	r3, r2
 80119b8:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 80119ba:	68fb      	ldr	r3, [r7, #12]
 80119bc:	2b00      	cmp	r3, #0
 80119be:	d106      	bne.n	80119ce <tcp_output_alloc_header+0x26>
 80119c0:	4b15      	ldr	r3, [pc, #84]	; (8011a18 <tcp_output_alloc_header+0x70>)
 80119c2:	f240 7242 	movw	r2, #1858	; 0x742
 80119c6:	4915      	ldr	r1, [pc, #84]	; (8011a1c <tcp_output_alloc_header+0x74>)
 80119c8:	4815      	ldr	r0, [pc, #84]	; (8011a20 <tcp_output_alloc_header+0x78>)
 80119ca:	f003 f8a5 	bl	8014b18 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 80119ce:	68fb      	ldr	r3, [r7, #12]
 80119d0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80119d2:	68fb      	ldr	r3, [r7, #12]
 80119d4:	8adb      	ldrh	r3, [r3, #22]
 80119d6:	68fa      	ldr	r2, [r7, #12]
 80119d8:	8b12      	ldrh	r2, [r2, #24]
 80119da:	68f9      	ldr	r1, [r7, #12]
 80119dc:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 80119de:	893d      	ldrh	r5, [r7, #8]
 80119e0:	897c      	ldrh	r4, [r7, #10]
 80119e2:	9103      	str	r1, [sp, #12]
 80119e4:	2110      	movs	r1, #16
 80119e6:	9102      	str	r1, [sp, #8]
 80119e8:	9201      	str	r2, [sp, #4]
 80119ea:	9300      	str	r3, [sp, #0]
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	462a      	mov	r2, r5
 80119f0:	4621      	mov	r1, r4
 80119f2:	f7ff ff67 	bl	80118c4 <tcp_output_alloc_header_common>
 80119f6:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 80119f8:	697b      	ldr	r3, [r7, #20]
 80119fa:	2b00      	cmp	r3, #0
 80119fc:	d006      	beq.n	8011a0c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80119fe:	68fb      	ldr	r3, [r7, #12]
 8011a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a02:	68fa      	ldr	r2, [r7, #12]
 8011a04:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8011a06:	441a      	add	r2, r3
 8011a08:	68fb      	ldr	r3, [r7, #12]
 8011a0a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8011a0c:	697b      	ldr	r3, [r7, #20]
}
 8011a0e:	4618      	mov	r0, r3
 8011a10:	3718      	adds	r7, #24
 8011a12:	46bd      	mov	sp, r7
 8011a14:	bdb0      	pop	{r4, r5, r7, pc}
 8011a16:	bf00      	nop
 8011a18:	080177d8 	.word	0x080177d8
 8011a1c:	08017ee0 	.word	0x08017ee0
 8011a20:	0801782c 	.word	0x0801782c

08011a24 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8011a24:	b580      	push	{r7, lr}
 8011a26:	b088      	sub	sp, #32
 8011a28:	af00      	add	r7, sp, #0
 8011a2a:	60f8      	str	r0, [r7, #12]
 8011a2c:	60b9      	str	r1, [r7, #8]
 8011a2e:	4611      	mov	r1, r2
 8011a30:	461a      	mov	r2, r3
 8011a32:	460b      	mov	r3, r1
 8011a34:	71fb      	strb	r3, [r7, #7]
 8011a36:	4613      	mov	r3, r2
 8011a38:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8011a3a:	2300      	movs	r3, #0
 8011a3c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8011a3e:	68bb      	ldr	r3, [r7, #8]
 8011a40:	2b00      	cmp	r3, #0
 8011a42:	d106      	bne.n	8011a52 <tcp_output_fill_options+0x2e>
 8011a44:	4b13      	ldr	r3, [pc, #76]	; (8011a94 <tcp_output_fill_options+0x70>)
 8011a46:	f240 7256 	movw	r2, #1878	; 0x756
 8011a4a:	4913      	ldr	r1, [pc, #76]	; (8011a98 <tcp_output_fill_options+0x74>)
 8011a4c:	4813      	ldr	r0, [pc, #76]	; (8011a9c <tcp_output_fill_options+0x78>)
 8011a4e:	f003 f863 	bl	8014b18 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8011a52:	68bb      	ldr	r3, [r7, #8]
 8011a54:	685b      	ldr	r3, [r3, #4]
 8011a56:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8011a58:	69bb      	ldr	r3, [r7, #24]
 8011a5a:	3314      	adds	r3, #20
 8011a5c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8011a5e:	69bb      	ldr	r3, [r7, #24]
 8011a60:	f103 0214 	add.w	r2, r3, #20
 8011a64:	8bfb      	ldrh	r3, [r7, #30]
 8011a66:	009b      	lsls	r3, r3, #2
 8011a68:	4619      	mov	r1, r3
 8011a6a:	79fb      	ldrb	r3, [r7, #7]
 8011a6c:	009b      	lsls	r3, r3, #2
 8011a6e:	f003 0304 	and.w	r3, r3, #4
 8011a72:	440b      	add	r3, r1
 8011a74:	4413      	add	r3, r2
 8011a76:	697a      	ldr	r2, [r7, #20]
 8011a78:	429a      	cmp	r2, r3
 8011a7a:	d006      	beq.n	8011a8a <tcp_output_fill_options+0x66>
 8011a7c:	4b05      	ldr	r3, [pc, #20]	; (8011a94 <tcp_output_fill_options+0x70>)
 8011a7e:	f240 7275 	movw	r2, #1909	; 0x775
 8011a82:	4907      	ldr	r1, [pc, #28]	; (8011aa0 <tcp_output_fill_options+0x7c>)
 8011a84:	4805      	ldr	r0, [pc, #20]	; (8011a9c <tcp_output_fill_options+0x78>)
 8011a86:	f003 f847 	bl	8014b18 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8011a8a:	bf00      	nop
 8011a8c:	3720      	adds	r7, #32
 8011a8e:	46bd      	mov	sp, r7
 8011a90:	bd80      	pop	{r7, pc}
 8011a92:	bf00      	nop
 8011a94:	080177d8 	.word	0x080177d8
 8011a98:	08017f08 	.word	0x08017f08
 8011a9c:	0801782c 	.word	0x0801782c
 8011aa0:	08017e00 	.word	0x08017e00

08011aa4 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8011aa4:	b580      	push	{r7, lr}
 8011aa6:	b08a      	sub	sp, #40	; 0x28
 8011aa8:	af04      	add	r7, sp, #16
 8011aaa:	60f8      	str	r0, [r7, #12]
 8011aac:	60b9      	str	r1, [r7, #8]
 8011aae:	607a      	str	r2, [r7, #4]
 8011ab0:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8011ab2:	68bb      	ldr	r3, [r7, #8]
 8011ab4:	2b00      	cmp	r3, #0
 8011ab6:	d106      	bne.n	8011ac6 <tcp_output_control_segment+0x22>
 8011ab8:	4b1c      	ldr	r3, [pc, #112]	; (8011b2c <tcp_output_control_segment+0x88>)
 8011aba:	f240 7287 	movw	r2, #1927	; 0x787
 8011abe:	491c      	ldr	r1, [pc, #112]	; (8011b30 <tcp_output_control_segment+0x8c>)
 8011ac0:	481c      	ldr	r0, [pc, #112]	; (8011b34 <tcp_output_control_segment+0x90>)
 8011ac2:	f003 f829 	bl	8014b18 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8011ac6:	683a      	ldr	r2, [r7, #0]
 8011ac8:	6879      	ldr	r1, [r7, #4]
 8011aca:	68f8      	ldr	r0, [r7, #12]
 8011acc:	f7fe fae8 	bl	80100a0 <tcp_route>
 8011ad0:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8011ad2:	693b      	ldr	r3, [r7, #16]
 8011ad4:	2b00      	cmp	r3, #0
 8011ad6:	d102      	bne.n	8011ade <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8011ad8:	23fc      	movs	r3, #252	; 0xfc
 8011ada:	75fb      	strb	r3, [r7, #23]
 8011adc:	e01c      	b.n	8011b18 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8011ade:	68fb      	ldr	r3, [r7, #12]
 8011ae0:	2b00      	cmp	r3, #0
 8011ae2:	d006      	beq.n	8011af2 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8011ae4:	68fb      	ldr	r3, [r7, #12]
 8011ae6:	7adb      	ldrb	r3, [r3, #11]
 8011ae8:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8011aea:	68fb      	ldr	r3, [r7, #12]
 8011aec:	7a9b      	ldrb	r3, [r3, #10]
 8011aee:	757b      	strb	r3, [r7, #21]
 8011af0:	e003      	b.n	8011afa <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8011af2:	23ff      	movs	r3, #255	; 0xff
 8011af4:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8011af6:	2300      	movs	r3, #0
 8011af8:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8011afa:	7dba      	ldrb	r2, [r7, #22]
 8011afc:	693b      	ldr	r3, [r7, #16]
 8011afe:	9302      	str	r3, [sp, #8]
 8011b00:	2306      	movs	r3, #6
 8011b02:	9301      	str	r3, [sp, #4]
 8011b04:	7d7b      	ldrb	r3, [r7, #21]
 8011b06:	9300      	str	r3, [sp, #0]
 8011b08:	4613      	mov	r3, r2
 8011b0a:	683a      	ldr	r2, [r7, #0]
 8011b0c:	6879      	ldr	r1, [r7, #4]
 8011b0e:	68b8      	ldr	r0, [r7, #8]
 8011b10:	f001 ff70 	bl	80139f4 <ip4_output_if>
 8011b14:	4603      	mov	r3, r0
 8011b16:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8011b18:	68b8      	ldr	r0, [r7, #8]
 8011b1a:	f7f9 feed 	bl	800b8f8 <pbuf_free>
  return err;
 8011b1e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011b22:	4618      	mov	r0, r3
 8011b24:	3718      	adds	r7, #24
 8011b26:	46bd      	mov	sp, r7
 8011b28:	bd80      	pop	{r7, pc}
 8011b2a:	bf00      	nop
 8011b2c:	080177d8 	.word	0x080177d8
 8011b30:	08017f30 	.word	0x08017f30
 8011b34:	0801782c 	.word	0x0801782c

08011b38 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8011b38:	b590      	push	{r4, r7, lr}
 8011b3a:	b08b      	sub	sp, #44	; 0x2c
 8011b3c:	af04      	add	r7, sp, #16
 8011b3e:	60f8      	str	r0, [r7, #12]
 8011b40:	60b9      	str	r1, [r7, #8]
 8011b42:	607a      	str	r2, [r7, #4]
 8011b44:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8011b46:	683b      	ldr	r3, [r7, #0]
 8011b48:	2b00      	cmp	r3, #0
 8011b4a:	d106      	bne.n	8011b5a <tcp_rst+0x22>
 8011b4c:	4b1f      	ldr	r3, [pc, #124]	; (8011bcc <tcp_rst+0x94>)
 8011b4e:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8011b52:	491f      	ldr	r1, [pc, #124]	; (8011bd0 <tcp_rst+0x98>)
 8011b54:	481f      	ldr	r0, [pc, #124]	; (8011bd4 <tcp_rst+0x9c>)
 8011b56:	f002 ffdf 	bl	8014b18 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8011b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b5c:	2b00      	cmp	r3, #0
 8011b5e:	d106      	bne.n	8011b6e <tcp_rst+0x36>
 8011b60:	4b1a      	ldr	r3, [pc, #104]	; (8011bcc <tcp_rst+0x94>)
 8011b62:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8011b66:	491c      	ldr	r1, [pc, #112]	; (8011bd8 <tcp_rst+0xa0>)
 8011b68:	481a      	ldr	r0, [pc, #104]	; (8011bd4 <tcp_rst+0x9c>)
 8011b6a:	f002 ffd5 	bl	8014b18 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011b6e:	2300      	movs	r3, #0
 8011b70:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8011b72:	f246 0308 	movw	r3, #24584	; 0x6008
 8011b76:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8011b78:	7dfb      	ldrb	r3, [r7, #23]
 8011b7a:	b29c      	uxth	r4, r3
 8011b7c:	68b8      	ldr	r0, [r7, #8]
 8011b7e:	f7f8 fb72 	bl	800a266 <lwip_htonl>
 8011b82:	4602      	mov	r2, r0
 8011b84:	8abb      	ldrh	r3, [r7, #20]
 8011b86:	9303      	str	r3, [sp, #12]
 8011b88:	2314      	movs	r3, #20
 8011b8a:	9302      	str	r3, [sp, #8]
 8011b8c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8011b8e:	9301      	str	r3, [sp, #4]
 8011b90:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011b92:	9300      	str	r3, [sp, #0]
 8011b94:	4613      	mov	r3, r2
 8011b96:	2200      	movs	r2, #0
 8011b98:	4621      	mov	r1, r4
 8011b9a:	6878      	ldr	r0, [r7, #4]
 8011b9c:	f7ff fe92 	bl	80118c4 <tcp_output_alloc_header_common>
 8011ba0:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8011ba2:	693b      	ldr	r3, [r7, #16]
 8011ba4:	2b00      	cmp	r3, #0
 8011ba6:	d00c      	beq.n	8011bc2 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011ba8:	7dfb      	ldrb	r3, [r7, #23]
 8011baa:	2200      	movs	r2, #0
 8011bac:	6939      	ldr	r1, [r7, #16]
 8011bae:	68f8      	ldr	r0, [r7, #12]
 8011bb0:	f7ff ff38 	bl	8011a24 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8011bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011bb6:	683a      	ldr	r2, [r7, #0]
 8011bb8:	6939      	ldr	r1, [r7, #16]
 8011bba:	68f8      	ldr	r0, [r7, #12]
 8011bbc:	f7ff ff72 	bl	8011aa4 <tcp_output_control_segment>
 8011bc0:	e000      	b.n	8011bc4 <tcp_rst+0x8c>
    return;
 8011bc2:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8011bc4:	371c      	adds	r7, #28
 8011bc6:	46bd      	mov	sp, r7
 8011bc8:	bd90      	pop	{r4, r7, pc}
 8011bca:	bf00      	nop
 8011bcc:	080177d8 	.word	0x080177d8
 8011bd0:	08017f5c 	.word	0x08017f5c
 8011bd4:	0801782c 	.word	0x0801782c
 8011bd8:	08017f78 	.word	0x08017f78

08011bdc <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8011bdc:	b590      	push	{r4, r7, lr}
 8011bde:	b087      	sub	sp, #28
 8011be0:	af00      	add	r7, sp, #0
 8011be2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8011be4:	2300      	movs	r3, #0
 8011be6:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8011be8:	2300      	movs	r3, #0
 8011bea:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	2b00      	cmp	r3, #0
 8011bf0:	d106      	bne.n	8011c00 <tcp_send_empty_ack+0x24>
 8011bf2:	4b28      	ldr	r3, [pc, #160]	; (8011c94 <tcp_send_empty_ack+0xb8>)
 8011bf4:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8011bf8:	4927      	ldr	r1, [pc, #156]	; (8011c98 <tcp_send_empty_ack+0xbc>)
 8011bfa:	4828      	ldr	r0, [pc, #160]	; (8011c9c <tcp_send_empty_ack+0xc0>)
 8011bfc:	f002 ff8c 	bl	8014b18 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011c00:	7dfb      	ldrb	r3, [r7, #23]
 8011c02:	009b      	lsls	r3, r3, #2
 8011c04:	b2db      	uxtb	r3, r3
 8011c06:	f003 0304 	and.w	r3, r3, #4
 8011c0a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8011c0c:	7d7b      	ldrb	r3, [r7, #21]
 8011c0e:	b29c      	uxth	r4, r3
 8011c10:	687b      	ldr	r3, [r7, #4]
 8011c12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011c14:	4618      	mov	r0, r3
 8011c16:	f7f8 fb26 	bl	800a266 <lwip_htonl>
 8011c1a:	4603      	mov	r3, r0
 8011c1c:	2200      	movs	r2, #0
 8011c1e:	4621      	mov	r1, r4
 8011c20:	6878      	ldr	r0, [r7, #4]
 8011c22:	f7ff fec1 	bl	80119a8 <tcp_output_alloc_header>
 8011c26:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011c28:	693b      	ldr	r3, [r7, #16]
 8011c2a:	2b00      	cmp	r3, #0
 8011c2c:	d109      	bne.n	8011c42 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011c2e:	687b      	ldr	r3, [r7, #4]
 8011c30:	8b5b      	ldrh	r3, [r3, #26]
 8011c32:	f043 0303 	orr.w	r3, r3, #3
 8011c36:	b29a      	uxth	r2, r3
 8011c38:	687b      	ldr	r3, [r7, #4]
 8011c3a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8011c3c:	f06f 0301 	mvn.w	r3, #1
 8011c40:	e023      	b.n	8011c8a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8011c42:	7dbb      	ldrb	r3, [r7, #22]
 8011c44:	7dfa      	ldrb	r2, [r7, #23]
 8011c46:	6939      	ldr	r1, [r7, #16]
 8011c48:	6878      	ldr	r0, [r7, #4]
 8011c4a:	f7ff feeb 	bl	8011a24 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011c4e:	687a      	ldr	r2, [r7, #4]
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	3304      	adds	r3, #4
 8011c54:	6939      	ldr	r1, [r7, #16]
 8011c56:	6878      	ldr	r0, [r7, #4]
 8011c58:	f7ff ff24 	bl	8011aa4 <tcp_output_control_segment>
 8011c5c:	4603      	mov	r3, r0
 8011c5e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8011c60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011c64:	2b00      	cmp	r3, #0
 8011c66:	d007      	beq.n	8011c78 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	8b5b      	ldrh	r3, [r3, #26]
 8011c6c:	f043 0303 	orr.w	r3, r3, #3
 8011c70:	b29a      	uxth	r2, r3
 8011c72:	687b      	ldr	r3, [r7, #4]
 8011c74:	835a      	strh	r2, [r3, #26]
 8011c76:	e006      	b.n	8011c86 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011c78:	687b      	ldr	r3, [r7, #4]
 8011c7a:	8b5b      	ldrh	r3, [r3, #26]
 8011c7c:	f023 0303 	bic.w	r3, r3, #3
 8011c80:	b29a      	uxth	r2, r3
 8011c82:	687b      	ldr	r3, [r7, #4]
 8011c84:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8011c86:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011c8a:	4618      	mov	r0, r3
 8011c8c:	371c      	adds	r7, #28
 8011c8e:	46bd      	mov	sp, r7
 8011c90:	bd90      	pop	{r4, r7, pc}
 8011c92:	bf00      	nop
 8011c94:	080177d8 	.word	0x080177d8
 8011c98:	08017f94 	.word	0x08017f94
 8011c9c:	0801782c 	.word	0x0801782c

08011ca0 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8011ca0:	b590      	push	{r4, r7, lr}
 8011ca2:	b087      	sub	sp, #28
 8011ca4:	af00      	add	r7, sp, #0
 8011ca6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011ca8:	2300      	movs	r3, #0
 8011caa:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8011cac:	687b      	ldr	r3, [r7, #4]
 8011cae:	2b00      	cmp	r3, #0
 8011cb0:	d106      	bne.n	8011cc0 <tcp_keepalive+0x20>
 8011cb2:	4b18      	ldr	r3, [pc, #96]	; (8011d14 <tcp_keepalive+0x74>)
 8011cb4:	f640 0224 	movw	r2, #2084	; 0x824
 8011cb8:	4917      	ldr	r1, [pc, #92]	; (8011d18 <tcp_keepalive+0x78>)
 8011cba:	4818      	ldr	r0, [pc, #96]	; (8011d1c <tcp_keepalive+0x7c>)
 8011cbc:	f002 ff2c 	bl	8014b18 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8011cc0:	7dfb      	ldrb	r3, [r7, #23]
 8011cc2:	b29c      	uxth	r4, r3
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011cc8:	3b01      	subs	r3, #1
 8011cca:	4618      	mov	r0, r3
 8011ccc:	f7f8 facb 	bl	800a266 <lwip_htonl>
 8011cd0:	4603      	mov	r3, r0
 8011cd2:	2200      	movs	r2, #0
 8011cd4:	4621      	mov	r1, r4
 8011cd6:	6878      	ldr	r0, [r7, #4]
 8011cd8:	f7ff fe66 	bl	80119a8 <tcp_output_alloc_header>
 8011cdc:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011cde:	693b      	ldr	r3, [r7, #16]
 8011ce0:	2b00      	cmp	r3, #0
 8011ce2:	d102      	bne.n	8011cea <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8011ce4:	f04f 33ff 	mov.w	r3, #4294967295
 8011ce8:	e010      	b.n	8011d0c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011cea:	7dfb      	ldrb	r3, [r7, #23]
 8011cec:	2200      	movs	r2, #0
 8011cee:	6939      	ldr	r1, [r7, #16]
 8011cf0:	6878      	ldr	r0, [r7, #4]
 8011cf2:	f7ff fe97 	bl	8011a24 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011cf6:	687a      	ldr	r2, [r7, #4]
 8011cf8:	687b      	ldr	r3, [r7, #4]
 8011cfa:	3304      	adds	r3, #4
 8011cfc:	6939      	ldr	r1, [r7, #16]
 8011cfe:	6878      	ldr	r0, [r7, #4]
 8011d00:	f7ff fed0 	bl	8011aa4 <tcp_output_control_segment>
 8011d04:	4603      	mov	r3, r0
 8011d06:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8011d08:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011d0c:	4618      	mov	r0, r3
 8011d0e:	371c      	adds	r7, #28
 8011d10:	46bd      	mov	sp, r7
 8011d12:	bd90      	pop	{r4, r7, pc}
 8011d14:	080177d8 	.word	0x080177d8
 8011d18:	08017fb4 	.word	0x08017fb4
 8011d1c:	0801782c 	.word	0x0801782c

08011d20 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8011d20:	b590      	push	{r4, r7, lr}
 8011d22:	b08b      	sub	sp, #44	; 0x2c
 8011d24:	af00      	add	r7, sp, #0
 8011d26:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011d28:	2300      	movs	r3, #0
 8011d2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8011d2e:	687b      	ldr	r3, [r7, #4]
 8011d30:	2b00      	cmp	r3, #0
 8011d32:	d106      	bne.n	8011d42 <tcp_zero_window_probe+0x22>
 8011d34:	4b4c      	ldr	r3, [pc, #304]	; (8011e68 <tcp_zero_window_probe+0x148>)
 8011d36:	f640 024f 	movw	r2, #2127	; 0x84f
 8011d3a:	494c      	ldr	r1, [pc, #304]	; (8011e6c <tcp_zero_window_probe+0x14c>)
 8011d3c:	484c      	ldr	r0, [pc, #304]	; (8011e70 <tcp_zero_window_probe+0x150>)
 8011d3e:	f002 feeb 	bl	8014b18 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011d46:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8011d48:	6a3b      	ldr	r3, [r7, #32]
 8011d4a:	2b00      	cmp	r3, #0
 8011d4c:	d101      	bne.n	8011d52 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8011d4e:	2300      	movs	r3, #0
 8011d50:	e086      	b.n	8011e60 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8011d58:	2bff      	cmp	r3, #255	; 0xff
 8011d5a:	d007      	beq.n	8011d6c <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8011d62:	3301      	adds	r3, #1
 8011d64:	b2da      	uxtb	r2, r3
 8011d66:	687b      	ldr	r3, [r7, #4]
 8011d68:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8011d6c:	6a3b      	ldr	r3, [r7, #32]
 8011d6e:	68db      	ldr	r3, [r3, #12]
 8011d70:	899b      	ldrh	r3, [r3, #12]
 8011d72:	b29b      	uxth	r3, r3
 8011d74:	4618      	mov	r0, r3
 8011d76:	f7f8 fa61 	bl	800a23c <lwip_htons>
 8011d7a:	4603      	mov	r3, r0
 8011d7c:	b2db      	uxtb	r3, r3
 8011d7e:	f003 0301 	and.w	r3, r3, #1
 8011d82:	2b00      	cmp	r3, #0
 8011d84:	d005      	beq.n	8011d92 <tcp_zero_window_probe+0x72>
 8011d86:	6a3b      	ldr	r3, [r7, #32]
 8011d88:	891b      	ldrh	r3, [r3, #8]
 8011d8a:	2b00      	cmp	r3, #0
 8011d8c:	d101      	bne.n	8011d92 <tcp_zero_window_probe+0x72>
 8011d8e:	2301      	movs	r3, #1
 8011d90:	e000      	b.n	8011d94 <tcp_zero_window_probe+0x74>
 8011d92:	2300      	movs	r3, #0
 8011d94:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8011d96:	7ffb      	ldrb	r3, [r7, #31]
 8011d98:	2b00      	cmp	r3, #0
 8011d9a:	bf0c      	ite	eq
 8011d9c:	2301      	moveq	r3, #1
 8011d9e:	2300      	movne	r3, #0
 8011da0:	b2db      	uxtb	r3, r3
 8011da2:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8011da4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011da8:	b299      	uxth	r1, r3
 8011daa:	6a3b      	ldr	r3, [r7, #32]
 8011dac:	68db      	ldr	r3, [r3, #12]
 8011dae:	685b      	ldr	r3, [r3, #4]
 8011db0:	8bba      	ldrh	r2, [r7, #28]
 8011db2:	6878      	ldr	r0, [r7, #4]
 8011db4:	f7ff fdf8 	bl	80119a8 <tcp_output_alloc_header>
 8011db8:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8011dba:	69bb      	ldr	r3, [r7, #24]
 8011dbc:	2b00      	cmp	r3, #0
 8011dbe:	d102      	bne.n	8011dc6 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8011dc0:	f04f 33ff 	mov.w	r3, #4294967295
 8011dc4:	e04c      	b.n	8011e60 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8011dc6:	69bb      	ldr	r3, [r7, #24]
 8011dc8:	685b      	ldr	r3, [r3, #4]
 8011dca:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8011dcc:	7ffb      	ldrb	r3, [r7, #31]
 8011dce:	2b00      	cmp	r3, #0
 8011dd0:	d011      	beq.n	8011df6 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8011dd2:	697b      	ldr	r3, [r7, #20]
 8011dd4:	899b      	ldrh	r3, [r3, #12]
 8011dd6:	b29b      	uxth	r3, r3
 8011dd8:	b21b      	sxth	r3, r3
 8011dda:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8011dde:	b21c      	sxth	r4, r3
 8011de0:	2011      	movs	r0, #17
 8011de2:	f7f8 fa2b 	bl	800a23c <lwip_htons>
 8011de6:	4603      	mov	r3, r0
 8011de8:	b21b      	sxth	r3, r3
 8011dea:	4323      	orrs	r3, r4
 8011dec:	b21b      	sxth	r3, r3
 8011dee:	b29a      	uxth	r2, r3
 8011df0:	697b      	ldr	r3, [r7, #20]
 8011df2:	819a      	strh	r2, [r3, #12]
 8011df4:	e010      	b.n	8011e18 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8011df6:	69bb      	ldr	r3, [r7, #24]
 8011df8:	685b      	ldr	r3, [r3, #4]
 8011dfa:	3314      	adds	r3, #20
 8011dfc:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8011dfe:	6a3b      	ldr	r3, [r7, #32]
 8011e00:	6858      	ldr	r0, [r3, #4]
 8011e02:	6a3b      	ldr	r3, [r7, #32]
 8011e04:	685b      	ldr	r3, [r3, #4]
 8011e06:	891a      	ldrh	r2, [r3, #8]
 8011e08:	6a3b      	ldr	r3, [r7, #32]
 8011e0a:	891b      	ldrh	r3, [r3, #8]
 8011e0c:	1ad3      	subs	r3, r2, r3
 8011e0e:	b29b      	uxth	r3, r3
 8011e10:	2201      	movs	r2, #1
 8011e12:	6939      	ldr	r1, [r7, #16]
 8011e14:	f7f9 ff5a 	bl	800bccc <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8011e18:	6a3b      	ldr	r3, [r7, #32]
 8011e1a:	68db      	ldr	r3, [r3, #12]
 8011e1c:	685b      	ldr	r3, [r3, #4]
 8011e1e:	4618      	mov	r0, r3
 8011e20:	f7f8 fa21 	bl	800a266 <lwip_htonl>
 8011e24:	4603      	mov	r3, r0
 8011e26:	3301      	adds	r3, #1
 8011e28:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8011e2a:	687b      	ldr	r3, [r7, #4]
 8011e2c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011e2e:	68fb      	ldr	r3, [r7, #12]
 8011e30:	1ad3      	subs	r3, r2, r3
 8011e32:	2b00      	cmp	r3, #0
 8011e34:	da02      	bge.n	8011e3c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	68fa      	ldr	r2, [r7, #12]
 8011e3a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011e3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011e40:	2200      	movs	r2, #0
 8011e42:	69b9      	ldr	r1, [r7, #24]
 8011e44:	6878      	ldr	r0, [r7, #4]
 8011e46:	f7ff fded 	bl	8011a24 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011e4a:	687a      	ldr	r2, [r7, #4]
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	3304      	adds	r3, #4
 8011e50:	69b9      	ldr	r1, [r7, #24]
 8011e52:	6878      	ldr	r0, [r7, #4]
 8011e54:	f7ff fe26 	bl	8011aa4 <tcp_output_control_segment>
 8011e58:	4603      	mov	r3, r0
 8011e5a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8011e5c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8011e60:	4618      	mov	r0, r3
 8011e62:	372c      	adds	r7, #44	; 0x2c
 8011e64:	46bd      	mov	sp, r7
 8011e66:	bd90      	pop	{r4, r7, pc}
 8011e68:	080177d8 	.word	0x080177d8
 8011e6c:	08017fd0 	.word	0x08017fd0
 8011e70:	0801782c 	.word	0x0801782c

08011e74 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8011e74:	b580      	push	{r7, lr}
 8011e76:	b082      	sub	sp, #8
 8011e78:	af00      	add	r7, sp, #0
 8011e7a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8011e7c:	f7fa f814 	bl	800bea8 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8011e80:	4b0a      	ldr	r3, [pc, #40]	; (8011eac <tcpip_tcp_timer+0x38>)
 8011e82:	681b      	ldr	r3, [r3, #0]
 8011e84:	2b00      	cmp	r3, #0
 8011e86:	d103      	bne.n	8011e90 <tcpip_tcp_timer+0x1c>
 8011e88:	4b09      	ldr	r3, [pc, #36]	; (8011eb0 <tcpip_tcp_timer+0x3c>)
 8011e8a:	681b      	ldr	r3, [r3, #0]
 8011e8c:	2b00      	cmp	r3, #0
 8011e8e:	d005      	beq.n	8011e9c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8011e90:	2200      	movs	r2, #0
 8011e92:	4908      	ldr	r1, [pc, #32]	; (8011eb4 <tcpip_tcp_timer+0x40>)
 8011e94:	20fa      	movs	r0, #250	; 0xfa
 8011e96:	f000 f8f3 	bl	8012080 <sys_timeout>
 8011e9a:	e003      	b.n	8011ea4 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8011e9c:	4b06      	ldr	r3, [pc, #24]	; (8011eb8 <tcpip_tcp_timer+0x44>)
 8011e9e:	2200      	movs	r2, #0
 8011ea0:	601a      	str	r2, [r3, #0]
  }
}
 8011ea2:	bf00      	nop
 8011ea4:	bf00      	nop
 8011ea6:	3708      	adds	r7, #8
 8011ea8:	46bd      	mov	sp, r7
 8011eaa:	bd80      	pop	{r7, pc}
 8011eac:	20008bb0 	.word	0x20008bb0
 8011eb0:	20008bb4 	.word	0x20008bb4
 8011eb4:	08011e75 	.word	0x08011e75
 8011eb8:	20008bfc 	.word	0x20008bfc

08011ebc <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8011ebc:	b580      	push	{r7, lr}
 8011ebe:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8011ec0:	4b0a      	ldr	r3, [pc, #40]	; (8011eec <tcp_timer_needed+0x30>)
 8011ec2:	681b      	ldr	r3, [r3, #0]
 8011ec4:	2b00      	cmp	r3, #0
 8011ec6:	d10f      	bne.n	8011ee8 <tcp_timer_needed+0x2c>
 8011ec8:	4b09      	ldr	r3, [pc, #36]	; (8011ef0 <tcp_timer_needed+0x34>)
 8011eca:	681b      	ldr	r3, [r3, #0]
 8011ecc:	2b00      	cmp	r3, #0
 8011ece:	d103      	bne.n	8011ed8 <tcp_timer_needed+0x1c>
 8011ed0:	4b08      	ldr	r3, [pc, #32]	; (8011ef4 <tcp_timer_needed+0x38>)
 8011ed2:	681b      	ldr	r3, [r3, #0]
 8011ed4:	2b00      	cmp	r3, #0
 8011ed6:	d007      	beq.n	8011ee8 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8011ed8:	4b04      	ldr	r3, [pc, #16]	; (8011eec <tcp_timer_needed+0x30>)
 8011eda:	2201      	movs	r2, #1
 8011edc:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8011ede:	2200      	movs	r2, #0
 8011ee0:	4905      	ldr	r1, [pc, #20]	; (8011ef8 <tcp_timer_needed+0x3c>)
 8011ee2:	20fa      	movs	r0, #250	; 0xfa
 8011ee4:	f000 f8cc 	bl	8012080 <sys_timeout>
  }
}
 8011ee8:	bf00      	nop
 8011eea:	bd80      	pop	{r7, pc}
 8011eec:	20008bfc 	.word	0x20008bfc
 8011ef0:	20008bb0 	.word	0x20008bb0
 8011ef4:	20008bb4 	.word	0x20008bb4
 8011ef8:	08011e75 	.word	0x08011e75

08011efc <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8011efc:	b580      	push	{r7, lr}
 8011efe:	b086      	sub	sp, #24
 8011f00:	af00      	add	r7, sp, #0
 8011f02:	60f8      	str	r0, [r7, #12]
 8011f04:	60b9      	str	r1, [r7, #8]
 8011f06:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8011f08:	2006      	movs	r0, #6
 8011f0a:	f7f8 fe0f 	bl	800ab2c <memp_malloc>
 8011f0e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8011f10:	693b      	ldr	r3, [r7, #16]
 8011f12:	2b00      	cmp	r3, #0
 8011f14:	d109      	bne.n	8011f2a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8011f16:	693b      	ldr	r3, [r7, #16]
 8011f18:	2b00      	cmp	r3, #0
 8011f1a:	d151      	bne.n	8011fc0 <sys_timeout_abs+0xc4>
 8011f1c:	4b2a      	ldr	r3, [pc, #168]	; (8011fc8 <sys_timeout_abs+0xcc>)
 8011f1e:	22be      	movs	r2, #190	; 0xbe
 8011f20:	492a      	ldr	r1, [pc, #168]	; (8011fcc <sys_timeout_abs+0xd0>)
 8011f22:	482b      	ldr	r0, [pc, #172]	; (8011fd0 <sys_timeout_abs+0xd4>)
 8011f24:	f002 fdf8 	bl	8014b18 <iprintf>
    return;
 8011f28:	e04a      	b.n	8011fc0 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8011f2a:	693b      	ldr	r3, [r7, #16]
 8011f2c:	2200      	movs	r2, #0
 8011f2e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8011f30:	693b      	ldr	r3, [r7, #16]
 8011f32:	68ba      	ldr	r2, [r7, #8]
 8011f34:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8011f36:	693b      	ldr	r3, [r7, #16]
 8011f38:	687a      	ldr	r2, [r7, #4]
 8011f3a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8011f3c:	693b      	ldr	r3, [r7, #16]
 8011f3e:	68fa      	ldr	r2, [r7, #12]
 8011f40:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8011f42:	4b24      	ldr	r3, [pc, #144]	; (8011fd4 <sys_timeout_abs+0xd8>)
 8011f44:	681b      	ldr	r3, [r3, #0]
 8011f46:	2b00      	cmp	r3, #0
 8011f48:	d103      	bne.n	8011f52 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8011f4a:	4a22      	ldr	r2, [pc, #136]	; (8011fd4 <sys_timeout_abs+0xd8>)
 8011f4c:	693b      	ldr	r3, [r7, #16]
 8011f4e:	6013      	str	r3, [r2, #0]
    return;
 8011f50:	e037      	b.n	8011fc2 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8011f52:	693b      	ldr	r3, [r7, #16]
 8011f54:	685a      	ldr	r2, [r3, #4]
 8011f56:	4b1f      	ldr	r3, [pc, #124]	; (8011fd4 <sys_timeout_abs+0xd8>)
 8011f58:	681b      	ldr	r3, [r3, #0]
 8011f5a:	685b      	ldr	r3, [r3, #4]
 8011f5c:	1ad3      	subs	r3, r2, r3
 8011f5e:	0fdb      	lsrs	r3, r3, #31
 8011f60:	f003 0301 	and.w	r3, r3, #1
 8011f64:	b2db      	uxtb	r3, r3
 8011f66:	2b00      	cmp	r3, #0
 8011f68:	d007      	beq.n	8011f7a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8011f6a:	4b1a      	ldr	r3, [pc, #104]	; (8011fd4 <sys_timeout_abs+0xd8>)
 8011f6c:	681a      	ldr	r2, [r3, #0]
 8011f6e:	693b      	ldr	r3, [r7, #16]
 8011f70:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8011f72:	4a18      	ldr	r2, [pc, #96]	; (8011fd4 <sys_timeout_abs+0xd8>)
 8011f74:	693b      	ldr	r3, [r7, #16]
 8011f76:	6013      	str	r3, [r2, #0]
 8011f78:	e023      	b.n	8011fc2 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8011f7a:	4b16      	ldr	r3, [pc, #88]	; (8011fd4 <sys_timeout_abs+0xd8>)
 8011f7c:	681b      	ldr	r3, [r3, #0]
 8011f7e:	617b      	str	r3, [r7, #20]
 8011f80:	e01a      	b.n	8011fb8 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8011f82:	697b      	ldr	r3, [r7, #20]
 8011f84:	681b      	ldr	r3, [r3, #0]
 8011f86:	2b00      	cmp	r3, #0
 8011f88:	d00b      	beq.n	8011fa2 <sys_timeout_abs+0xa6>
 8011f8a:	693b      	ldr	r3, [r7, #16]
 8011f8c:	685a      	ldr	r2, [r3, #4]
 8011f8e:	697b      	ldr	r3, [r7, #20]
 8011f90:	681b      	ldr	r3, [r3, #0]
 8011f92:	685b      	ldr	r3, [r3, #4]
 8011f94:	1ad3      	subs	r3, r2, r3
 8011f96:	0fdb      	lsrs	r3, r3, #31
 8011f98:	f003 0301 	and.w	r3, r3, #1
 8011f9c:	b2db      	uxtb	r3, r3
 8011f9e:	2b00      	cmp	r3, #0
 8011fa0:	d007      	beq.n	8011fb2 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8011fa2:	697b      	ldr	r3, [r7, #20]
 8011fa4:	681a      	ldr	r2, [r3, #0]
 8011fa6:	693b      	ldr	r3, [r7, #16]
 8011fa8:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8011faa:	697b      	ldr	r3, [r7, #20]
 8011fac:	693a      	ldr	r2, [r7, #16]
 8011fae:	601a      	str	r2, [r3, #0]
        break;
 8011fb0:	e007      	b.n	8011fc2 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8011fb2:	697b      	ldr	r3, [r7, #20]
 8011fb4:	681b      	ldr	r3, [r3, #0]
 8011fb6:	617b      	str	r3, [r7, #20]
 8011fb8:	697b      	ldr	r3, [r7, #20]
 8011fba:	2b00      	cmp	r3, #0
 8011fbc:	d1e1      	bne.n	8011f82 <sys_timeout_abs+0x86>
 8011fbe:	e000      	b.n	8011fc2 <sys_timeout_abs+0xc6>
    return;
 8011fc0:	bf00      	nop
      }
    }
  }
}
 8011fc2:	3718      	adds	r7, #24
 8011fc4:	46bd      	mov	sp, r7
 8011fc6:	bd80      	pop	{r7, pc}
 8011fc8:	08017ff4 	.word	0x08017ff4
 8011fcc:	08018028 	.word	0x08018028
 8011fd0:	08018068 	.word	0x08018068
 8011fd4:	20008bf4 	.word	0x20008bf4

08011fd8 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8011fd8:	b580      	push	{r7, lr}
 8011fda:	b086      	sub	sp, #24
 8011fdc:	af00      	add	r7, sp, #0
 8011fde:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8011fe0:	687b      	ldr	r3, [r7, #4]
 8011fe2:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8011fe4:	697b      	ldr	r3, [r7, #20]
 8011fe6:	685b      	ldr	r3, [r3, #4]
 8011fe8:	4798      	blx	r3

  now = sys_now();
 8011fea:	f7f7 ff3b 	bl	8009e64 <sys_now>
 8011fee:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8011ff0:	697b      	ldr	r3, [r7, #20]
 8011ff2:	681a      	ldr	r2, [r3, #0]
 8011ff4:	4b0f      	ldr	r3, [pc, #60]	; (8012034 <lwip_cyclic_timer+0x5c>)
 8011ff6:	681b      	ldr	r3, [r3, #0]
 8011ff8:	4413      	add	r3, r2
 8011ffa:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8011ffc:	68fa      	ldr	r2, [r7, #12]
 8011ffe:	693b      	ldr	r3, [r7, #16]
 8012000:	1ad3      	subs	r3, r2, r3
 8012002:	0fdb      	lsrs	r3, r3, #31
 8012004:	f003 0301 	and.w	r3, r3, #1
 8012008:	b2db      	uxtb	r3, r3
 801200a:	2b00      	cmp	r3, #0
 801200c:	d009      	beq.n	8012022 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801200e:	697b      	ldr	r3, [r7, #20]
 8012010:	681a      	ldr	r2, [r3, #0]
 8012012:	693b      	ldr	r3, [r7, #16]
 8012014:	4413      	add	r3, r2
 8012016:	687a      	ldr	r2, [r7, #4]
 8012018:	4907      	ldr	r1, [pc, #28]	; (8012038 <lwip_cyclic_timer+0x60>)
 801201a:	4618      	mov	r0, r3
 801201c:	f7ff ff6e 	bl	8011efc <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8012020:	e004      	b.n	801202c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8012022:	687a      	ldr	r2, [r7, #4]
 8012024:	4904      	ldr	r1, [pc, #16]	; (8012038 <lwip_cyclic_timer+0x60>)
 8012026:	68f8      	ldr	r0, [r7, #12]
 8012028:	f7ff ff68 	bl	8011efc <sys_timeout_abs>
}
 801202c:	bf00      	nop
 801202e:	3718      	adds	r7, #24
 8012030:	46bd      	mov	sp, r7
 8012032:	bd80      	pop	{r7, pc}
 8012034:	20008bf8 	.word	0x20008bf8
 8012038:	08011fd9 	.word	0x08011fd9

0801203c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801203c:	b580      	push	{r7, lr}
 801203e:	b082      	sub	sp, #8
 8012040:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8012042:	2301      	movs	r3, #1
 8012044:	607b      	str	r3, [r7, #4]
 8012046:	e00e      	b.n	8012066 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8012048:	4a0b      	ldr	r2, [pc, #44]	; (8012078 <sys_timeouts_init+0x3c>)
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8012050:	687b      	ldr	r3, [r7, #4]
 8012052:	00db      	lsls	r3, r3, #3
 8012054:	4a08      	ldr	r2, [pc, #32]	; (8012078 <sys_timeouts_init+0x3c>)
 8012056:	4413      	add	r3, r2
 8012058:	461a      	mov	r2, r3
 801205a:	4908      	ldr	r1, [pc, #32]	; (801207c <sys_timeouts_init+0x40>)
 801205c:	f000 f810 	bl	8012080 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	3301      	adds	r3, #1
 8012064:	607b      	str	r3, [r7, #4]
 8012066:	687b      	ldr	r3, [r7, #4]
 8012068:	2b02      	cmp	r3, #2
 801206a:	d9ed      	bls.n	8012048 <sys_timeouts_init+0xc>
  }
}
 801206c:	bf00      	nop
 801206e:	bf00      	nop
 8012070:	3708      	adds	r7, #8
 8012072:	46bd      	mov	sp, r7
 8012074:	bd80      	pop	{r7, pc}
 8012076:	bf00      	nop
 8012078:	0801ab14 	.word	0x0801ab14
 801207c:	08011fd9 	.word	0x08011fd9

08012080 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8012080:	b580      	push	{r7, lr}
 8012082:	b086      	sub	sp, #24
 8012084:	af00      	add	r7, sp, #0
 8012086:	60f8      	str	r0, [r7, #12]
 8012088:	60b9      	str	r1, [r7, #8]
 801208a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801208c:	68fb      	ldr	r3, [r7, #12]
 801208e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012092:	d306      	bcc.n	80120a2 <sys_timeout+0x22>
 8012094:	4b0a      	ldr	r3, [pc, #40]	; (80120c0 <sys_timeout+0x40>)
 8012096:	f240 1229 	movw	r2, #297	; 0x129
 801209a:	490a      	ldr	r1, [pc, #40]	; (80120c4 <sys_timeout+0x44>)
 801209c:	480a      	ldr	r0, [pc, #40]	; (80120c8 <sys_timeout+0x48>)
 801209e:	f002 fd3b 	bl	8014b18 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80120a2:	f7f7 fedf 	bl	8009e64 <sys_now>
 80120a6:	4602      	mov	r2, r0
 80120a8:	68fb      	ldr	r3, [r7, #12]
 80120aa:	4413      	add	r3, r2
 80120ac:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80120ae:	687a      	ldr	r2, [r7, #4]
 80120b0:	68b9      	ldr	r1, [r7, #8]
 80120b2:	6978      	ldr	r0, [r7, #20]
 80120b4:	f7ff ff22 	bl	8011efc <sys_timeout_abs>
#endif
}
 80120b8:	bf00      	nop
 80120ba:	3718      	adds	r7, #24
 80120bc:	46bd      	mov	sp, r7
 80120be:	bd80      	pop	{r7, pc}
 80120c0:	08017ff4 	.word	0x08017ff4
 80120c4:	08018090 	.word	0x08018090
 80120c8:	08018068 	.word	0x08018068

080120cc <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 80120cc:	b580      	push	{r7, lr}
 80120ce:	b084      	sub	sp, #16
 80120d0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 80120d2:	f7f7 fec7 	bl	8009e64 <sys_now>
 80120d6:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 80120d8:	4b1a      	ldr	r3, [pc, #104]	; (8012144 <sys_check_timeouts+0x78>)
 80120da:	781b      	ldrb	r3, [r3, #0]
 80120dc:	b2db      	uxtb	r3, r3
 80120de:	2b00      	cmp	r3, #0
 80120e0:	d001      	beq.n	80120e6 <sys_check_timeouts+0x1a>
 80120e2:	f7f9 f8cf 	bl	800b284 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 80120e6:	4b18      	ldr	r3, [pc, #96]	; (8012148 <sys_check_timeouts+0x7c>)
 80120e8:	681b      	ldr	r3, [r3, #0]
 80120ea:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 80120ec:	68bb      	ldr	r3, [r7, #8]
 80120ee:	2b00      	cmp	r3, #0
 80120f0:	d022      	beq.n	8012138 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80120f2:	68bb      	ldr	r3, [r7, #8]
 80120f4:	685b      	ldr	r3, [r3, #4]
 80120f6:	68fa      	ldr	r2, [r7, #12]
 80120f8:	1ad3      	subs	r3, r2, r3
 80120fa:	0fdb      	lsrs	r3, r3, #31
 80120fc:	f003 0301 	and.w	r3, r3, #1
 8012100:	b2db      	uxtb	r3, r3
 8012102:	2b00      	cmp	r3, #0
 8012104:	d11a      	bne.n	801213c <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8012106:	68bb      	ldr	r3, [r7, #8]
 8012108:	681b      	ldr	r3, [r3, #0]
 801210a:	4a0f      	ldr	r2, [pc, #60]	; (8012148 <sys_check_timeouts+0x7c>)
 801210c:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801210e:	68bb      	ldr	r3, [r7, #8]
 8012110:	689b      	ldr	r3, [r3, #8]
 8012112:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8012114:	68bb      	ldr	r3, [r7, #8]
 8012116:	68db      	ldr	r3, [r3, #12]
 8012118:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801211a:	68bb      	ldr	r3, [r7, #8]
 801211c:	685b      	ldr	r3, [r3, #4]
 801211e:	4a0b      	ldr	r2, [pc, #44]	; (801214c <sys_check_timeouts+0x80>)
 8012120:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8012122:	68b9      	ldr	r1, [r7, #8]
 8012124:	2006      	movs	r0, #6
 8012126:	f7f8 fd71 	bl	800ac0c <memp_free>
    if (handler != NULL) {
 801212a:	687b      	ldr	r3, [r7, #4]
 801212c:	2b00      	cmp	r3, #0
 801212e:	d0d3      	beq.n	80120d8 <sys_check_timeouts+0xc>
      handler(arg);
 8012130:	687b      	ldr	r3, [r7, #4]
 8012132:	6838      	ldr	r0, [r7, #0]
 8012134:	4798      	blx	r3
  do {
 8012136:	e7cf      	b.n	80120d8 <sys_check_timeouts+0xc>
      return;
 8012138:	bf00      	nop
 801213a:	e000      	b.n	801213e <sys_check_timeouts+0x72>
      return;
 801213c:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801213e:	3710      	adds	r7, #16
 8012140:	46bd      	mov	sp, r7
 8012142:	bd80      	pop	{r7, pc}
 8012144:	20008ba1 	.word	0x20008ba1
 8012148:	20008bf4 	.word	0x20008bf4
 801214c:	20008bf8 	.word	0x20008bf8

08012150 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8012150:	b580      	push	{r7, lr}
 8012152:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8012154:	f002 fd6e 	bl	8014c34 <rand>
 8012158:	4603      	mov	r3, r0
 801215a:	b29b      	uxth	r3, r3
 801215c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8012160:	b29b      	uxth	r3, r3
 8012162:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8012166:	b29a      	uxth	r2, r3
 8012168:	4b01      	ldr	r3, [pc, #4]	; (8012170 <udp_init+0x20>)
 801216a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801216c:	bf00      	nop
 801216e:	bd80      	pop	{r7, pc}
 8012170:	20000068 	.word	0x20000068

08012174 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8012174:	b580      	push	{r7, lr}
 8012176:	b084      	sub	sp, #16
 8012178:	af00      	add	r7, sp, #0
 801217a:	60f8      	str	r0, [r7, #12]
 801217c:	60b9      	str	r1, [r7, #8]
 801217e:	4613      	mov	r3, r2
 8012180:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8012182:	68fb      	ldr	r3, [r7, #12]
 8012184:	2b00      	cmp	r3, #0
 8012186:	d105      	bne.n	8012194 <udp_input_local_match+0x20>
 8012188:	4b27      	ldr	r3, [pc, #156]	; (8012228 <udp_input_local_match+0xb4>)
 801218a:	2287      	movs	r2, #135	; 0x87
 801218c:	4927      	ldr	r1, [pc, #156]	; (801222c <udp_input_local_match+0xb8>)
 801218e:	4828      	ldr	r0, [pc, #160]	; (8012230 <udp_input_local_match+0xbc>)
 8012190:	f002 fcc2 	bl	8014b18 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8012194:	68bb      	ldr	r3, [r7, #8]
 8012196:	2b00      	cmp	r3, #0
 8012198:	d105      	bne.n	80121a6 <udp_input_local_match+0x32>
 801219a:	4b23      	ldr	r3, [pc, #140]	; (8012228 <udp_input_local_match+0xb4>)
 801219c:	2288      	movs	r2, #136	; 0x88
 801219e:	4925      	ldr	r1, [pc, #148]	; (8012234 <udp_input_local_match+0xc0>)
 80121a0:	4823      	ldr	r0, [pc, #140]	; (8012230 <udp_input_local_match+0xbc>)
 80121a2:	f002 fcb9 	bl	8014b18 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80121a6:	68fb      	ldr	r3, [r7, #12]
 80121a8:	7a1b      	ldrb	r3, [r3, #8]
 80121aa:	2b00      	cmp	r3, #0
 80121ac:	d00b      	beq.n	80121c6 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80121ae:	68fb      	ldr	r3, [r7, #12]
 80121b0:	7a1a      	ldrb	r2, [r3, #8]
 80121b2:	4b21      	ldr	r3, [pc, #132]	; (8012238 <udp_input_local_match+0xc4>)
 80121b4:	685b      	ldr	r3, [r3, #4]
 80121b6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80121ba:	3301      	adds	r3, #1
 80121bc:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80121be:	429a      	cmp	r2, r3
 80121c0:	d001      	beq.n	80121c6 <udp_input_local_match+0x52>
    return 0;
 80121c2:	2300      	movs	r3, #0
 80121c4:	e02b      	b.n	801221e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80121c6:	79fb      	ldrb	r3, [r7, #7]
 80121c8:	2b00      	cmp	r3, #0
 80121ca:	d018      	beq.n	80121fe <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80121cc:	68fb      	ldr	r3, [r7, #12]
 80121ce:	2b00      	cmp	r3, #0
 80121d0:	d013      	beq.n	80121fa <udp_input_local_match+0x86>
 80121d2:	68fb      	ldr	r3, [r7, #12]
 80121d4:	681b      	ldr	r3, [r3, #0]
 80121d6:	2b00      	cmp	r3, #0
 80121d8:	d00f      	beq.n	80121fa <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80121da:	4b17      	ldr	r3, [pc, #92]	; (8012238 <udp_input_local_match+0xc4>)
 80121dc:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80121de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80121e2:	d00a      	beq.n	80121fa <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80121e4:	68fb      	ldr	r3, [r7, #12]
 80121e6:	681a      	ldr	r2, [r3, #0]
 80121e8:	4b13      	ldr	r3, [pc, #76]	; (8012238 <udp_input_local_match+0xc4>)
 80121ea:	695b      	ldr	r3, [r3, #20]
 80121ec:	405a      	eors	r2, r3
 80121ee:	68bb      	ldr	r3, [r7, #8]
 80121f0:	3308      	adds	r3, #8
 80121f2:	681b      	ldr	r3, [r3, #0]
 80121f4:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80121f6:	2b00      	cmp	r3, #0
 80121f8:	d110      	bne.n	801221c <udp_input_local_match+0xa8>
          return 1;
 80121fa:	2301      	movs	r3, #1
 80121fc:	e00f      	b.n	801221e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80121fe:	68fb      	ldr	r3, [r7, #12]
 8012200:	2b00      	cmp	r3, #0
 8012202:	d009      	beq.n	8012218 <udp_input_local_match+0xa4>
 8012204:	68fb      	ldr	r3, [r7, #12]
 8012206:	681b      	ldr	r3, [r3, #0]
 8012208:	2b00      	cmp	r3, #0
 801220a:	d005      	beq.n	8012218 <udp_input_local_match+0xa4>
 801220c:	68fb      	ldr	r3, [r7, #12]
 801220e:	681a      	ldr	r2, [r3, #0]
 8012210:	4b09      	ldr	r3, [pc, #36]	; (8012238 <udp_input_local_match+0xc4>)
 8012212:	695b      	ldr	r3, [r3, #20]
 8012214:	429a      	cmp	r2, r3
 8012216:	d101      	bne.n	801221c <udp_input_local_match+0xa8>
        return 1;
 8012218:	2301      	movs	r3, #1
 801221a:	e000      	b.n	801221e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801221c:	2300      	movs	r3, #0
}
 801221e:	4618      	mov	r0, r3
 8012220:	3710      	adds	r7, #16
 8012222:	46bd      	mov	sp, r7
 8012224:	bd80      	pop	{r7, pc}
 8012226:	bf00      	nop
 8012228:	080180dc 	.word	0x080180dc
 801222c:	0801810c 	.word	0x0801810c
 8012230:	08018130 	.word	0x08018130
 8012234:	08018158 	.word	0x08018158
 8012238:	20005634 	.word	0x20005634

0801223c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801223c:	b590      	push	{r4, r7, lr}
 801223e:	b08d      	sub	sp, #52	; 0x34
 8012240:	af02      	add	r7, sp, #8
 8012242:	6078      	str	r0, [r7, #4]
 8012244:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8012246:	2300      	movs	r3, #0
 8012248:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801224a:	687b      	ldr	r3, [r7, #4]
 801224c:	2b00      	cmp	r3, #0
 801224e:	d105      	bne.n	801225c <udp_input+0x20>
 8012250:	4b7c      	ldr	r3, [pc, #496]	; (8012444 <udp_input+0x208>)
 8012252:	22cf      	movs	r2, #207	; 0xcf
 8012254:	497c      	ldr	r1, [pc, #496]	; (8012448 <udp_input+0x20c>)
 8012256:	487d      	ldr	r0, [pc, #500]	; (801244c <udp_input+0x210>)
 8012258:	f002 fc5e 	bl	8014b18 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801225c:	683b      	ldr	r3, [r7, #0]
 801225e:	2b00      	cmp	r3, #0
 8012260:	d105      	bne.n	801226e <udp_input+0x32>
 8012262:	4b78      	ldr	r3, [pc, #480]	; (8012444 <udp_input+0x208>)
 8012264:	22d0      	movs	r2, #208	; 0xd0
 8012266:	497a      	ldr	r1, [pc, #488]	; (8012450 <udp_input+0x214>)
 8012268:	4878      	ldr	r0, [pc, #480]	; (801244c <udp_input+0x210>)
 801226a:	f002 fc55 	bl	8014b18 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801226e:	687b      	ldr	r3, [r7, #4]
 8012270:	895b      	ldrh	r3, [r3, #10]
 8012272:	2b07      	cmp	r3, #7
 8012274:	d803      	bhi.n	801227e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8012276:	6878      	ldr	r0, [r7, #4]
 8012278:	f7f9 fb3e 	bl	800b8f8 <pbuf_free>
    goto end;
 801227c:	e0de      	b.n	801243c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801227e:	687b      	ldr	r3, [r7, #4]
 8012280:	685b      	ldr	r3, [r3, #4]
 8012282:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8012284:	4b73      	ldr	r3, [pc, #460]	; (8012454 <udp_input+0x218>)
 8012286:	695b      	ldr	r3, [r3, #20]
 8012288:	4a72      	ldr	r2, [pc, #456]	; (8012454 <udp_input+0x218>)
 801228a:	6812      	ldr	r2, [r2, #0]
 801228c:	4611      	mov	r1, r2
 801228e:	4618      	mov	r0, r3
 8012290:	f001 fc88 	bl	8013ba4 <ip4_addr_isbroadcast_u32>
 8012294:	4603      	mov	r3, r0
 8012296:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8012298:	697b      	ldr	r3, [r7, #20]
 801229a:	881b      	ldrh	r3, [r3, #0]
 801229c:	b29b      	uxth	r3, r3
 801229e:	4618      	mov	r0, r3
 80122a0:	f7f7 ffcc 	bl	800a23c <lwip_htons>
 80122a4:	4603      	mov	r3, r0
 80122a6:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80122a8:	697b      	ldr	r3, [r7, #20]
 80122aa:	885b      	ldrh	r3, [r3, #2]
 80122ac:	b29b      	uxth	r3, r3
 80122ae:	4618      	mov	r0, r3
 80122b0:	f7f7 ffc4 	bl	800a23c <lwip_htons>
 80122b4:	4603      	mov	r3, r0
 80122b6:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80122b8:	2300      	movs	r3, #0
 80122ba:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 80122bc:	2300      	movs	r3, #0
 80122be:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80122c0:	2300      	movs	r3, #0
 80122c2:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80122c4:	4b64      	ldr	r3, [pc, #400]	; (8012458 <udp_input+0x21c>)
 80122c6:	681b      	ldr	r3, [r3, #0]
 80122c8:	627b      	str	r3, [r7, #36]	; 0x24
 80122ca:	e054      	b.n	8012376 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80122cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122ce:	8a5b      	ldrh	r3, [r3, #18]
 80122d0:	89fa      	ldrh	r2, [r7, #14]
 80122d2:	429a      	cmp	r2, r3
 80122d4:	d14a      	bne.n	801236c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80122d6:	7cfb      	ldrb	r3, [r7, #19]
 80122d8:	461a      	mov	r2, r3
 80122da:	6839      	ldr	r1, [r7, #0]
 80122dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80122de:	f7ff ff49 	bl	8012174 <udp_input_local_match>
 80122e2:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80122e4:	2b00      	cmp	r3, #0
 80122e6:	d041      	beq.n	801236c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80122e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122ea:	7c1b      	ldrb	r3, [r3, #16]
 80122ec:	f003 0304 	and.w	r3, r3, #4
 80122f0:	2b00      	cmp	r3, #0
 80122f2:	d11d      	bne.n	8012330 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 80122f4:	69fb      	ldr	r3, [r7, #28]
 80122f6:	2b00      	cmp	r3, #0
 80122f8:	d102      	bne.n	8012300 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80122fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122fc:	61fb      	str	r3, [r7, #28]
 80122fe:	e017      	b.n	8012330 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8012300:	7cfb      	ldrb	r3, [r7, #19]
 8012302:	2b00      	cmp	r3, #0
 8012304:	d014      	beq.n	8012330 <udp_input+0xf4>
 8012306:	4b53      	ldr	r3, [pc, #332]	; (8012454 <udp_input+0x218>)
 8012308:	695b      	ldr	r3, [r3, #20]
 801230a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801230e:	d10f      	bne.n	8012330 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8012310:	69fb      	ldr	r3, [r7, #28]
 8012312:	681a      	ldr	r2, [r3, #0]
 8012314:	683b      	ldr	r3, [r7, #0]
 8012316:	3304      	adds	r3, #4
 8012318:	681b      	ldr	r3, [r3, #0]
 801231a:	429a      	cmp	r2, r3
 801231c:	d008      	beq.n	8012330 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801231e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012320:	681a      	ldr	r2, [r3, #0]
 8012322:	683b      	ldr	r3, [r7, #0]
 8012324:	3304      	adds	r3, #4
 8012326:	681b      	ldr	r3, [r3, #0]
 8012328:	429a      	cmp	r2, r3
 801232a:	d101      	bne.n	8012330 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 801232c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801232e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8012330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012332:	8a9b      	ldrh	r3, [r3, #20]
 8012334:	8a3a      	ldrh	r2, [r7, #16]
 8012336:	429a      	cmp	r2, r3
 8012338:	d118      	bne.n	801236c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801233a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801233c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801233e:	2b00      	cmp	r3, #0
 8012340:	d005      	beq.n	801234e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8012342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012344:	685a      	ldr	r2, [r3, #4]
 8012346:	4b43      	ldr	r3, [pc, #268]	; (8012454 <udp_input+0x218>)
 8012348:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801234a:	429a      	cmp	r2, r3
 801234c:	d10e      	bne.n	801236c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801234e:	6a3b      	ldr	r3, [r7, #32]
 8012350:	2b00      	cmp	r3, #0
 8012352:	d014      	beq.n	801237e <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8012354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012356:	68da      	ldr	r2, [r3, #12]
 8012358:	6a3b      	ldr	r3, [r7, #32]
 801235a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801235c:	4b3e      	ldr	r3, [pc, #248]	; (8012458 <udp_input+0x21c>)
 801235e:	681a      	ldr	r2, [r3, #0]
 8012360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012362:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8012364:	4a3c      	ldr	r2, [pc, #240]	; (8012458 <udp_input+0x21c>)
 8012366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012368:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801236a:	e008      	b.n	801237e <udp_input+0x142>
      }
    }

    prev = pcb;
 801236c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801236e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012372:	68db      	ldr	r3, [r3, #12]
 8012374:	627b      	str	r3, [r7, #36]	; 0x24
 8012376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012378:	2b00      	cmp	r3, #0
 801237a:	d1a7      	bne.n	80122cc <udp_input+0x90>
 801237c:	e000      	b.n	8012380 <udp_input+0x144>
        break;
 801237e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8012380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012382:	2b00      	cmp	r3, #0
 8012384:	d101      	bne.n	801238a <udp_input+0x14e>
    pcb = uncon_pcb;
 8012386:	69fb      	ldr	r3, [r7, #28]
 8012388:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801238a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801238c:	2b00      	cmp	r3, #0
 801238e:	d002      	beq.n	8012396 <udp_input+0x15a>
    for_us = 1;
 8012390:	2301      	movs	r3, #1
 8012392:	76fb      	strb	r3, [r7, #27]
 8012394:	e00a      	b.n	80123ac <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8012396:	683b      	ldr	r3, [r7, #0]
 8012398:	3304      	adds	r3, #4
 801239a:	681a      	ldr	r2, [r3, #0]
 801239c:	4b2d      	ldr	r3, [pc, #180]	; (8012454 <udp_input+0x218>)
 801239e:	695b      	ldr	r3, [r3, #20]
 80123a0:	429a      	cmp	r2, r3
 80123a2:	bf0c      	ite	eq
 80123a4:	2301      	moveq	r3, #1
 80123a6:	2300      	movne	r3, #0
 80123a8:	b2db      	uxtb	r3, r3
 80123aa:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80123ac:	7efb      	ldrb	r3, [r7, #27]
 80123ae:	2b00      	cmp	r3, #0
 80123b0:	d041      	beq.n	8012436 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80123b2:	2108      	movs	r1, #8
 80123b4:	6878      	ldr	r0, [r7, #4]
 80123b6:	f7f9 fa19 	bl	800b7ec <pbuf_remove_header>
 80123ba:	4603      	mov	r3, r0
 80123bc:	2b00      	cmp	r3, #0
 80123be:	d00a      	beq.n	80123d6 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80123c0:	4b20      	ldr	r3, [pc, #128]	; (8012444 <udp_input+0x208>)
 80123c2:	f44f 72b8 	mov.w	r2, #368	; 0x170
 80123c6:	4925      	ldr	r1, [pc, #148]	; (801245c <udp_input+0x220>)
 80123c8:	4820      	ldr	r0, [pc, #128]	; (801244c <udp_input+0x210>)
 80123ca:	f002 fba5 	bl	8014b18 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80123ce:	6878      	ldr	r0, [r7, #4]
 80123d0:	f7f9 fa92 	bl	800b8f8 <pbuf_free>
      goto end;
 80123d4:	e032      	b.n	801243c <udp_input+0x200>
    }

    if (pcb != NULL) {
 80123d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123d8:	2b00      	cmp	r3, #0
 80123da:	d012      	beq.n	8012402 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80123dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123de:	699b      	ldr	r3, [r3, #24]
 80123e0:	2b00      	cmp	r3, #0
 80123e2:	d00a      	beq.n	80123fa <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80123e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123e6:	699c      	ldr	r4, [r3, #24]
 80123e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123ea:	69d8      	ldr	r0, [r3, #28]
 80123ec:	8a3b      	ldrh	r3, [r7, #16]
 80123ee:	9300      	str	r3, [sp, #0]
 80123f0:	4b1b      	ldr	r3, [pc, #108]	; (8012460 <udp_input+0x224>)
 80123f2:	687a      	ldr	r2, [r7, #4]
 80123f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80123f6:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80123f8:	e021      	b.n	801243e <udp_input+0x202>
        pbuf_free(p);
 80123fa:	6878      	ldr	r0, [r7, #4]
 80123fc:	f7f9 fa7c 	bl	800b8f8 <pbuf_free>
        goto end;
 8012400:	e01c      	b.n	801243c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8012402:	7cfb      	ldrb	r3, [r7, #19]
 8012404:	2b00      	cmp	r3, #0
 8012406:	d112      	bne.n	801242e <udp_input+0x1f2>
 8012408:	4b12      	ldr	r3, [pc, #72]	; (8012454 <udp_input+0x218>)
 801240a:	695b      	ldr	r3, [r3, #20]
 801240c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012410:	2be0      	cmp	r3, #224	; 0xe0
 8012412:	d00c      	beq.n	801242e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8012414:	4b0f      	ldr	r3, [pc, #60]	; (8012454 <udp_input+0x218>)
 8012416:	899b      	ldrh	r3, [r3, #12]
 8012418:	3308      	adds	r3, #8
 801241a:	b29b      	uxth	r3, r3
 801241c:	b21b      	sxth	r3, r3
 801241e:	4619      	mov	r1, r3
 8012420:	6878      	ldr	r0, [r7, #4]
 8012422:	f7f9 fa56 	bl	800b8d2 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8012426:	2103      	movs	r1, #3
 8012428:	6878      	ldr	r0, [r7, #4]
 801242a:	f001 f89b 	bl	8013564 <icmp_dest_unreach>
      pbuf_free(p);
 801242e:	6878      	ldr	r0, [r7, #4]
 8012430:	f7f9 fa62 	bl	800b8f8 <pbuf_free>
  return;
 8012434:	e003      	b.n	801243e <udp_input+0x202>
    pbuf_free(p);
 8012436:	6878      	ldr	r0, [r7, #4]
 8012438:	f7f9 fa5e 	bl	800b8f8 <pbuf_free>
  return;
 801243c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801243e:	372c      	adds	r7, #44	; 0x2c
 8012440:	46bd      	mov	sp, r7
 8012442:	bd90      	pop	{r4, r7, pc}
 8012444:	080180dc 	.word	0x080180dc
 8012448:	08018180 	.word	0x08018180
 801244c:	08018130 	.word	0x08018130
 8012450:	08018198 	.word	0x08018198
 8012454:	20005634 	.word	0x20005634
 8012458:	20008c00 	.word	0x20008c00
 801245c:	080181b4 	.word	0x080181b4
 8012460:	20005644 	.word	0x20005644

08012464 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8012464:	b480      	push	{r7}
 8012466:	b085      	sub	sp, #20
 8012468:	af00      	add	r7, sp, #0
 801246a:	6078      	str	r0, [r7, #4]
 801246c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801246e:	687b      	ldr	r3, [r7, #4]
 8012470:	2b00      	cmp	r3, #0
 8012472:	d01e      	beq.n	80124b2 <udp_netif_ip_addr_changed+0x4e>
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	681b      	ldr	r3, [r3, #0]
 8012478:	2b00      	cmp	r3, #0
 801247a:	d01a      	beq.n	80124b2 <udp_netif_ip_addr_changed+0x4e>
 801247c:	683b      	ldr	r3, [r7, #0]
 801247e:	2b00      	cmp	r3, #0
 8012480:	d017      	beq.n	80124b2 <udp_netif_ip_addr_changed+0x4e>
 8012482:	683b      	ldr	r3, [r7, #0]
 8012484:	681b      	ldr	r3, [r3, #0]
 8012486:	2b00      	cmp	r3, #0
 8012488:	d013      	beq.n	80124b2 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801248a:	4b0d      	ldr	r3, [pc, #52]	; (80124c0 <udp_netif_ip_addr_changed+0x5c>)
 801248c:	681b      	ldr	r3, [r3, #0]
 801248e:	60fb      	str	r3, [r7, #12]
 8012490:	e00c      	b.n	80124ac <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8012492:	68fb      	ldr	r3, [r7, #12]
 8012494:	681a      	ldr	r2, [r3, #0]
 8012496:	687b      	ldr	r3, [r7, #4]
 8012498:	681b      	ldr	r3, [r3, #0]
 801249a:	429a      	cmp	r2, r3
 801249c:	d103      	bne.n	80124a6 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801249e:	683b      	ldr	r3, [r7, #0]
 80124a0:	681a      	ldr	r2, [r3, #0]
 80124a2:	68fb      	ldr	r3, [r7, #12]
 80124a4:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80124a6:	68fb      	ldr	r3, [r7, #12]
 80124a8:	68db      	ldr	r3, [r3, #12]
 80124aa:	60fb      	str	r3, [r7, #12]
 80124ac:	68fb      	ldr	r3, [r7, #12]
 80124ae:	2b00      	cmp	r3, #0
 80124b0:	d1ef      	bne.n	8012492 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80124b2:	bf00      	nop
 80124b4:	3714      	adds	r7, #20
 80124b6:	46bd      	mov	sp, r7
 80124b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124bc:	4770      	bx	lr
 80124be:	bf00      	nop
 80124c0:	20008c00 	.word	0x20008c00

080124c4 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80124c4:	b580      	push	{r7, lr}
 80124c6:	b082      	sub	sp, #8
 80124c8:	af00      	add	r7, sp, #0
 80124ca:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80124cc:	4915      	ldr	r1, [pc, #84]	; (8012524 <etharp_free_entry+0x60>)
 80124ce:	687a      	ldr	r2, [r7, #4]
 80124d0:	4613      	mov	r3, r2
 80124d2:	005b      	lsls	r3, r3, #1
 80124d4:	4413      	add	r3, r2
 80124d6:	00db      	lsls	r3, r3, #3
 80124d8:	440b      	add	r3, r1
 80124da:	681b      	ldr	r3, [r3, #0]
 80124dc:	2b00      	cmp	r3, #0
 80124de:	d013      	beq.n	8012508 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80124e0:	4910      	ldr	r1, [pc, #64]	; (8012524 <etharp_free_entry+0x60>)
 80124e2:	687a      	ldr	r2, [r7, #4]
 80124e4:	4613      	mov	r3, r2
 80124e6:	005b      	lsls	r3, r3, #1
 80124e8:	4413      	add	r3, r2
 80124ea:	00db      	lsls	r3, r3, #3
 80124ec:	440b      	add	r3, r1
 80124ee:	681b      	ldr	r3, [r3, #0]
 80124f0:	4618      	mov	r0, r3
 80124f2:	f7f9 fa01 	bl	800b8f8 <pbuf_free>
    arp_table[i].q = NULL;
 80124f6:	490b      	ldr	r1, [pc, #44]	; (8012524 <etharp_free_entry+0x60>)
 80124f8:	687a      	ldr	r2, [r7, #4]
 80124fa:	4613      	mov	r3, r2
 80124fc:	005b      	lsls	r3, r3, #1
 80124fe:	4413      	add	r3, r2
 8012500:	00db      	lsls	r3, r3, #3
 8012502:	440b      	add	r3, r1
 8012504:	2200      	movs	r2, #0
 8012506:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8012508:	4906      	ldr	r1, [pc, #24]	; (8012524 <etharp_free_entry+0x60>)
 801250a:	687a      	ldr	r2, [r7, #4]
 801250c:	4613      	mov	r3, r2
 801250e:	005b      	lsls	r3, r3, #1
 8012510:	4413      	add	r3, r2
 8012512:	00db      	lsls	r3, r3, #3
 8012514:	440b      	add	r3, r1
 8012516:	3314      	adds	r3, #20
 8012518:	2200      	movs	r2, #0
 801251a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801251c:	bf00      	nop
 801251e:	3708      	adds	r7, #8
 8012520:	46bd      	mov	sp, r7
 8012522:	bd80      	pop	{r7, pc}
 8012524:	20008c04 	.word	0x20008c04

08012528 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8012528:	b580      	push	{r7, lr}
 801252a:	b082      	sub	sp, #8
 801252c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801252e:	2300      	movs	r3, #0
 8012530:	607b      	str	r3, [r7, #4]
 8012532:	e096      	b.n	8012662 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8012534:	494f      	ldr	r1, [pc, #316]	; (8012674 <etharp_tmr+0x14c>)
 8012536:	687a      	ldr	r2, [r7, #4]
 8012538:	4613      	mov	r3, r2
 801253a:	005b      	lsls	r3, r3, #1
 801253c:	4413      	add	r3, r2
 801253e:	00db      	lsls	r3, r3, #3
 8012540:	440b      	add	r3, r1
 8012542:	3314      	adds	r3, #20
 8012544:	781b      	ldrb	r3, [r3, #0]
 8012546:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8012548:	78fb      	ldrb	r3, [r7, #3]
 801254a:	2b00      	cmp	r3, #0
 801254c:	f000 8086 	beq.w	801265c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8012550:	4948      	ldr	r1, [pc, #288]	; (8012674 <etharp_tmr+0x14c>)
 8012552:	687a      	ldr	r2, [r7, #4]
 8012554:	4613      	mov	r3, r2
 8012556:	005b      	lsls	r3, r3, #1
 8012558:	4413      	add	r3, r2
 801255a:	00db      	lsls	r3, r3, #3
 801255c:	440b      	add	r3, r1
 801255e:	3312      	adds	r3, #18
 8012560:	881b      	ldrh	r3, [r3, #0]
 8012562:	3301      	adds	r3, #1
 8012564:	b298      	uxth	r0, r3
 8012566:	4943      	ldr	r1, [pc, #268]	; (8012674 <etharp_tmr+0x14c>)
 8012568:	687a      	ldr	r2, [r7, #4]
 801256a:	4613      	mov	r3, r2
 801256c:	005b      	lsls	r3, r3, #1
 801256e:	4413      	add	r3, r2
 8012570:	00db      	lsls	r3, r3, #3
 8012572:	440b      	add	r3, r1
 8012574:	3312      	adds	r3, #18
 8012576:	4602      	mov	r2, r0
 8012578:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801257a:	493e      	ldr	r1, [pc, #248]	; (8012674 <etharp_tmr+0x14c>)
 801257c:	687a      	ldr	r2, [r7, #4]
 801257e:	4613      	mov	r3, r2
 8012580:	005b      	lsls	r3, r3, #1
 8012582:	4413      	add	r3, r2
 8012584:	00db      	lsls	r3, r3, #3
 8012586:	440b      	add	r3, r1
 8012588:	3312      	adds	r3, #18
 801258a:	881b      	ldrh	r3, [r3, #0]
 801258c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8012590:	d215      	bcs.n	80125be <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8012592:	4938      	ldr	r1, [pc, #224]	; (8012674 <etharp_tmr+0x14c>)
 8012594:	687a      	ldr	r2, [r7, #4]
 8012596:	4613      	mov	r3, r2
 8012598:	005b      	lsls	r3, r3, #1
 801259a:	4413      	add	r3, r2
 801259c:	00db      	lsls	r3, r3, #3
 801259e:	440b      	add	r3, r1
 80125a0:	3314      	adds	r3, #20
 80125a2:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80125a4:	2b01      	cmp	r3, #1
 80125a6:	d10e      	bne.n	80125c6 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80125a8:	4932      	ldr	r1, [pc, #200]	; (8012674 <etharp_tmr+0x14c>)
 80125aa:	687a      	ldr	r2, [r7, #4]
 80125ac:	4613      	mov	r3, r2
 80125ae:	005b      	lsls	r3, r3, #1
 80125b0:	4413      	add	r3, r2
 80125b2:	00db      	lsls	r3, r3, #3
 80125b4:	440b      	add	r3, r1
 80125b6:	3312      	adds	r3, #18
 80125b8:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80125ba:	2b04      	cmp	r3, #4
 80125bc:	d903      	bls.n	80125c6 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80125be:	6878      	ldr	r0, [r7, #4]
 80125c0:	f7ff ff80 	bl	80124c4 <etharp_free_entry>
 80125c4:	e04a      	b.n	801265c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80125c6:	492b      	ldr	r1, [pc, #172]	; (8012674 <etharp_tmr+0x14c>)
 80125c8:	687a      	ldr	r2, [r7, #4]
 80125ca:	4613      	mov	r3, r2
 80125cc:	005b      	lsls	r3, r3, #1
 80125ce:	4413      	add	r3, r2
 80125d0:	00db      	lsls	r3, r3, #3
 80125d2:	440b      	add	r3, r1
 80125d4:	3314      	adds	r3, #20
 80125d6:	781b      	ldrb	r3, [r3, #0]
 80125d8:	2b03      	cmp	r3, #3
 80125da:	d10a      	bne.n	80125f2 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80125dc:	4925      	ldr	r1, [pc, #148]	; (8012674 <etharp_tmr+0x14c>)
 80125de:	687a      	ldr	r2, [r7, #4]
 80125e0:	4613      	mov	r3, r2
 80125e2:	005b      	lsls	r3, r3, #1
 80125e4:	4413      	add	r3, r2
 80125e6:	00db      	lsls	r3, r3, #3
 80125e8:	440b      	add	r3, r1
 80125ea:	3314      	adds	r3, #20
 80125ec:	2204      	movs	r2, #4
 80125ee:	701a      	strb	r2, [r3, #0]
 80125f0:	e034      	b.n	801265c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80125f2:	4920      	ldr	r1, [pc, #128]	; (8012674 <etharp_tmr+0x14c>)
 80125f4:	687a      	ldr	r2, [r7, #4]
 80125f6:	4613      	mov	r3, r2
 80125f8:	005b      	lsls	r3, r3, #1
 80125fa:	4413      	add	r3, r2
 80125fc:	00db      	lsls	r3, r3, #3
 80125fe:	440b      	add	r3, r1
 8012600:	3314      	adds	r3, #20
 8012602:	781b      	ldrb	r3, [r3, #0]
 8012604:	2b04      	cmp	r3, #4
 8012606:	d10a      	bne.n	801261e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8012608:	491a      	ldr	r1, [pc, #104]	; (8012674 <etharp_tmr+0x14c>)
 801260a:	687a      	ldr	r2, [r7, #4]
 801260c:	4613      	mov	r3, r2
 801260e:	005b      	lsls	r3, r3, #1
 8012610:	4413      	add	r3, r2
 8012612:	00db      	lsls	r3, r3, #3
 8012614:	440b      	add	r3, r1
 8012616:	3314      	adds	r3, #20
 8012618:	2202      	movs	r2, #2
 801261a:	701a      	strb	r2, [r3, #0]
 801261c:	e01e      	b.n	801265c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801261e:	4915      	ldr	r1, [pc, #84]	; (8012674 <etharp_tmr+0x14c>)
 8012620:	687a      	ldr	r2, [r7, #4]
 8012622:	4613      	mov	r3, r2
 8012624:	005b      	lsls	r3, r3, #1
 8012626:	4413      	add	r3, r2
 8012628:	00db      	lsls	r3, r3, #3
 801262a:	440b      	add	r3, r1
 801262c:	3314      	adds	r3, #20
 801262e:	781b      	ldrb	r3, [r3, #0]
 8012630:	2b01      	cmp	r3, #1
 8012632:	d113      	bne.n	801265c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8012634:	490f      	ldr	r1, [pc, #60]	; (8012674 <etharp_tmr+0x14c>)
 8012636:	687a      	ldr	r2, [r7, #4]
 8012638:	4613      	mov	r3, r2
 801263a:	005b      	lsls	r3, r3, #1
 801263c:	4413      	add	r3, r2
 801263e:	00db      	lsls	r3, r3, #3
 8012640:	440b      	add	r3, r1
 8012642:	3308      	adds	r3, #8
 8012644:	6818      	ldr	r0, [r3, #0]
 8012646:	687a      	ldr	r2, [r7, #4]
 8012648:	4613      	mov	r3, r2
 801264a:	005b      	lsls	r3, r3, #1
 801264c:	4413      	add	r3, r2
 801264e:	00db      	lsls	r3, r3, #3
 8012650:	4a08      	ldr	r2, [pc, #32]	; (8012674 <etharp_tmr+0x14c>)
 8012652:	4413      	add	r3, r2
 8012654:	3304      	adds	r3, #4
 8012656:	4619      	mov	r1, r3
 8012658:	f000 fe6e 	bl	8013338 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	3301      	adds	r3, #1
 8012660:	607b      	str	r3, [r7, #4]
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	2b09      	cmp	r3, #9
 8012666:	f77f af65 	ble.w	8012534 <etharp_tmr+0xc>
      }
    }
  }
}
 801266a:	bf00      	nop
 801266c:	bf00      	nop
 801266e:	3708      	adds	r7, #8
 8012670:	46bd      	mov	sp, r7
 8012672:	bd80      	pop	{r7, pc}
 8012674:	20008c04 	.word	0x20008c04

08012678 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8012678:	b580      	push	{r7, lr}
 801267a:	b08a      	sub	sp, #40	; 0x28
 801267c:	af00      	add	r7, sp, #0
 801267e:	60f8      	str	r0, [r7, #12]
 8012680:	460b      	mov	r3, r1
 8012682:	607a      	str	r2, [r7, #4]
 8012684:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8012686:	230a      	movs	r3, #10
 8012688:	84fb      	strh	r3, [r7, #38]	; 0x26
 801268a:	230a      	movs	r3, #10
 801268c:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801268e:	230a      	movs	r3, #10
 8012690:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8012692:	2300      	movs	r3, #0
 8012694:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8012696:	230a      	movs	r3, #10
 8012698:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801269a:	2300      	movs	r3, #0
 801269c:	83bb      	strh	r3, [r7, #28]
 801269e:	2300      	movs	r3, #0
 80126a0:	837b      	strh	r3, [r7, #26]
 80126a2:	2300      	movs	r3, #0
 80126a4:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80126a6:	2300      	movs	r3, #0
 80126a8:	843b      	strh	r3, [r7, #32]
 80126aa:	e0ae      	b.n	801280a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80126ac:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80126b0:	49a6      	ldr	r1, [pc, #664]	; (801294c <etharp_find_entry+0x2d4>)
 80126b2:	4613      	mov	r3, r2
 80126b4:	005b      	lsls	r3, r3, #1
 80126b6:	4413      	add	r3, r2
 80126b8:	00db      	lsls	r3, r3, #3
 80126ba:	440b      	add	r3, r1
 80126bc:	3314      	adds	r3, #20
 80126be:	781b      	ldrb	r3, [r3, #0]
 80126c0:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80126c2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80126c6:	2b0a      	cmp	r3, #10
 80126c8:	d105      	bne.n	80126d6 <etharp_find_entry+0x5e>
 80126ca:	7dfb      	ldrb	r3, [r7, #23]
 80126cc:	2b00      	cmp	r3, #0
 80126ce:	d102      	bne.n	80126d6 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80126d0:	8c3b      	ldrh	r3, [r7, #32]
 80126d2:	847b      	strh	r3, [r7, #34]	; 0x22
 80126d4:	e095      	b.n	8012802 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80126d6:	7dfb      	ldrb	r3, [r7, #23]
 80126d8:	2b00      	cmp	r3, #0
 80126da:	f000 8092 	beq.w	8012802 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80126de:	7dfb      	ldrb	r3, [r7, #23]
 80126e0:	2b01      	cmp	r3, #1
 80126e2:	d009      	beq.n	80126f8 <etharp_find_entry+0x80>
 80126e4:	7dfb      	ldrb	r3, [r7, #23]
 80126e6:	2b01      	cmp	r3, #1
 80126e8:	d806      	bhi.n	80126f8 <etharp_find_entry+0x80>
 80126ea:	4b99      	ldr	r3, [pc, #612]	; (8012950 <etharp_find_entry+0x2d8>)
 80126ec:	f240 1223 	movw	r2, #291	; 0x123
 80126f0:	4998      	ldr	r1, [pc, #608]	; (8012954 <etharp_find_entry+0x2dc>)
 80126f2:	4899      	ldr	r0, [pc, #612]	; (8012958 <etharp_find_entry+0x2e0>)
 80126f4:	f002 fa10 	bl	8014b18 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80126f8:	68fb      	ldr	r3, [r7, #12]
 80126fa:	2b00      	cmp	r3, #0
 80126fc:	d020      	beq.n	8012740 <etharp_find_entry+0xc8>
 80126fe:	68fb      	ldr	r3, [r7, #12]
 8012700:	6819      	ldr	r1, [r3, #0]
 8012702:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012706:	4891      	ldr	r0, [pc, #580]	; (801294c <etharp_find_entry+0x2d4>)
 8012708:	4613      	mov	r3, r2
 801270a:	005b      	lsls	r3, r3, #1
 801270c:	4413      	add	r3, r2
 801270e:	00db      	lsls	r3, r3, #3
 8012710:	4403      	add	r3, r0
 8012712:	3304      	adds	r3, #4
 8012714:	681b      	ldr	r3, [r3, #0]
 8012716:	4299      	cmp	r1, r3
 8012718:	d112      	bne.n	8012740 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801271a:	687b      	ldr	r3, [r7, #4]
 801271c:	2b00      	cmp	r3, #0
 801271e:	d00c      	beq.n	801273a <etharp_find_entry+0xc2>
 8012720:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012724:	4989      	ldr	r1, [pc, #548]	; (801294c <etharp_find_entry+0x2d4>)
 8012726:	4613      	mov	r3, r2
 8012728:	005b      	lsls	r3, r3, #1
 801272a:	4413      	add	r3, r2
 801272c:	00db      	lsls	r3, r3, #3
 801272e:	440b      	add	r3, r1
 8012730:	3308      	adds	r3, #8
 8012732:	681b      	ldr	r3, [r3, #0]
 8012734:	687a      	ldr	r2, [r7, #4]
 8012736:	429a      	cmp	r2, r3
 8012738:	d102      	bne.n	8012740 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801273a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801273e:	e100      	b.n	8012942 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8012740:	7dfb      	ldrb	r3, [r7, #23]
 8012742:	2b01      	cmp	r3, #1
 8012744:	d140      	bne.n	80127c8 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8012746:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801274a:	4980      	ldr	r1, [pc, #512]	; (801294c <etharp_find_entry+0x2d4>)
 801274c:	4613      	mov	r3, r2
 801274e:	005b      	lsls	r3, r3, #1
 8012750:	4413      	add	r3, r2
 8012752:	00db      	lsls	r3, r3, #3
 8012754:	440b      	add	r3, r1
 8012756:	681b      	ldr	r3, [r3, #0]
 8012758:	2b00      	cmp	r3, #0
 801275a:	d01a      	beq.n	8012792 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801275c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012760:	497a      	ldr	r1, [pc, #488]	; (801294c <etharp_find_entry+0x2d4>)
 8012762:	4613      	mov	r3, r2
 8012764:	005b      	lsls	r3, r3, #1
 8012766:	4413      	add	r3, r2
 8012768:	00db      	lsls	r3, r3, #3
 801276a:	440b      	add	r3, r1
 801276c:	3312      	adds	r3, #18
 801276e:	881b      	ldrh	r3, [r3, #0]
 8012770:	8bba      	ldrh	r2, [r7, #28]
 8012772:	429a      	cmp	r2, r3
 8012774:	d845      	bhi.n	8012802 <etharp_find_entry+0x18a>
            old_queue = i;
 8012776:	8c3b      	ldrh	r3, [r7, #32]
 8012778:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801277a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801277e:	4973      	ldr	r1, [pc, #460]	; (801294c <etharp_find_entry+0x2d4>)
 8012780:	4613      	mov	r3, r2
 8012782:	005b      	lsls	r3, r3, #1
 8012784:	4413      	add	r3, r2
 8012786:	00db      	lsls	r3, r3, #3
 8012788:	440b      	add	r3, r1
 801278a:	3312      	adds	r3, #18
 801278c:	881b      	ldrh	r3, [r3, #0]
 801278e:	83bb      	strh	r3, [r7, #28]
 8012790:	e037      	b.n	8012802 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8012792:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012796:	496d      	ldr	r1, [pc, #436]	; (801294c <etharp_find_entry+0x2d4>)
 8012798:	4613      	mov	r3, r2
 801279a:	005b      	lsls	r3, r3, #1
 801279c:	4413      	add	r3, r2
 801279e:	00db      	lsls	r3, r3, #3
 80127a0:	440b      	add	r3, r1
 80127a2:	3312      	adds	r3, #18
 80127a4:	881b      	ldrh	r3, [r3, #0]
 80127a6:	8b7a      	ldrh	r2, [r7, #26]
 80127a8:	429a      	cmp	r2, r3
 80127aa:	d82a      	bhi.n	8012802 <etharp_find_entry+0x18a>
            old_pending = i;
 80127ac:	8c3b      	ldrh	r3, [r7, #32]
 80127ae:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 80127b0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80127b4:	4965      	ldr	r1, [pc, #404]	; (801294c <etharp_find_entry+0x2d4>)
 80127b6:	4613      	mov	r3, r2
 80127b8:	005b      	lsls	r3, r3, #1
 80127ba:	4413      	add	r3, r2
 80127bc:	00db      	lsls	r3, r3, #3
 80127be:	440b      	add	r3, r1
 80127c0:	3312      	adds	r3, #18
 80127c2:	881b      	ldrh	r3, [r3, #0]
 80127c4:	837b      	strh	r3, [r7, #26]
 80127c6:	e01c      	b.n	8012802 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80127c8:	7dfb      	ldrb	r3, [r7, #23]
 80127ca:	2b01      	cmp	r3, #1
 80127cc:	d919      	bls.n	8012802 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80127ce:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80127d2:	495e      	ldr	r1, [pc, #376]	; (801294c <etharp_find_entry+0x2d4>)
 80127d4:	4613      	mov	r3, r2
 80127d6:	005b      	lsls	r3, r3, #1
 80127d8:	4413      	add	r3, r2
 80127da:	00db      	lsls	r3, r3, #3
 80127dc:	440b      	add	r3, r1
 80127de:	3312      	adds	r3, #18
 80127e0:	881b      	ldrh	r3, [r3, #0]
 80127e2:	8b3a      	ldrh	r2, [r7, #24]
 80127e4:	429a      	cmp	r2, r3
 80127e6:	d80c      	bhi.n	8012802 <etharp_find_entry+0x18a>
            old_stable = i;
 80127e8:	8c3b      	ldrh	r3, [r7, #32]
 80127ea:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 80127ec:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80127f0:	4956      	ldr	r1, [pc, #344]	; (801294c <etharp_find_entry+0x2d4>)
 80127f2:	4613      	mov	r3, r2
 80127f4:	005b      	lsls	r3, r3, #1
 80127f6:	4413      	add	r3, r2
 80127f8:	00db      	lsls	r3, r3, #3
 80127fa:	440b      	add	r3, r1
 80127fc:	3312      	adds	r3, #18
 80127fe:	881b      	ldrh	r3, [r3, #0]
 8012800:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012802:	8c3b      	ldrh	r3, [r7, #32]
 8012804:	3301      	adds	r3, #1
 8012806:	b29b      	uxth	r3, r3
 8012808:	843b      	strh	r3, [r7, #32]
 801280a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801280e:	2b09      	cmp	r3, #9
 8012810:	f77f af4c 	ble.w	80126ac <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8012814:	7afb      	ldrb	r3, [r7, #11]
 8012816:	f003 0302 	and.w	r3, r3, #2
 801281a:	2b00      	cmp	r3, #0
 801281c:	d108      	bne.n	8012830 <etharp_find_entry+0x1b8>
 801281e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8012822:	2b0a      	cmp	r3, #10
 8012824:	d107      	bne.n	8012836 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8012826:	7afb      	ldrb	r3, [r7, #11]
 8012828:	f003 0301 	and.w	r3, r3, #1
 801282c:	2b00      	cmp	r3, #0
 801282e:	d102      	bne.n	8012836 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8012830:	f04f 33ff 	mov.w	r3, #4294967295
 8012834:	e085      	b.n	8012942 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8012836:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801283a:	2b09      	cmp	r3, #9
 801283c:	dc02      	bgt.n	8012844 <etharp_find_entry+0x1cc>
    i = empty;
 801283e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012840:	843b      	strh	r3, [r7, #32]
 8012842:	e039      	b.n	80128b8 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8012844:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8012848:	2b09      	cmp	r3, #9
 801284a:	dc14      	bgt.n	8012876 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801284c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801284e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8012850:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012854:	493d      	ldr	r1, [pc, #244]	; (801294c <etharp_find_entry+0x2d4>)
 8012856:	4613      	mov	r3, r2
 8012858:	005b      	lsls	r3, r3, #1
 801285a:	4413      	add	r3, r2
 801285c:	00db      	lsls	r3, r3, #3
 801285e:	440b      	add	r3, r1
 8012860:	681b      	ldr	r3, [r3, #0]
 8012862:	2b00      	cmp	r3, #0
 8012864:	d018      	beq.n	8012898 <etharp_find_entry+0x220>
 8012866:	4b3a      	ldr	r3, [pc, #232]	; (8012950 <etharp_find_entry+0x2d8>)
 8012868:	f240 126d 	movw	r2, #365	; 0x16d
 801286c:	493b      	ldr	r1, [pc, #236]	; (801295c <etharp_find_entry+0x2e4>)
 801286e:	483a      	ldr	r0, [pc, #232]	; (8012958 <etharp_find_entry+0x2e0>)
 8012870:	f002 f952 	bl	8014b18 <iprintf>
 8012874:	e010      	b.n	8012898 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8012876:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801287a:	2b09      	cmp	r3, #9
 801287c:	dc02      	bgt.n	8012884 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801287e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012880:	843b      	strh	r3, [r7, #32]
 8012882:	e009      	b.n	8012898 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8012884:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8012888:	2b09      	cmp	r3, #9
 801288a:	dc02      	bgt.n	8012892 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801288c:	8bfb      	ldrh	r3, [r7, #30]
 801288e:	843b      	strh	r3, [r7, #32]
 8012890:	e002      	b.n	8012898 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8012892:	f04f 33ff 	mov.w	r3, #4294967295
 8012896:	e054      	b.n	8012942 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8012898:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801289c:	2b09      	cmp	r3, #9
 801289e:	dd06      	ble.n	80128ae <etharp_find_entry+0x236>
 80128a0:	4b2b      	ldr	r3, [pc, #172]	; (8012950 <etharp_find_entry+0x2d8>)
 80128a2:	f240 127f 	movw	r2, #383	; 0x17f
 80128a6:	492e      	ldr	r1, [pc, #184]	; (8012960 <etharp_find_entry+0x2e8>)
 80128a8:	482b      	ldr	r0, [pc, #172]	; (8012958 <etharp_find_entry+0x2e0>)
 80128aa:	f002 f935 	bl	8014b18 <iprintf>
    etharp_free_entry(i);
 80128ae:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80128b2:	4618      	mov	r0, r3
 80128b4:	f7ff fe06 	bl	80124c4 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80128b8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80128bc:	2b09      	cmp	r3, #9
 80128be:	dd06      	ble.n	80128ce <etharp_find_entry+0x256>
 80128c0:	4b23      	ldr	r3, [pc, #140]	; (8012950 <etharp_find_entry+0x2d8>)
 80128c2:	f240 1283 	movw	r2, #387	; 0x183
 80128c6:	4926      	ldr	r1, [pc, #152]	; (8012960 <etharp_find_entry+0x2e8>)
 80128c8:	4823      	ldr	r0, [pc, #140]	; (8012958 <etharp_find_entry+0x2e0>)
 80128ca:	f002 f925 	bl	8014b18 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80128ce:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80128d2:	491e      	ldr	r1, [pc, #120]	; (801294c <etharp_find_entry+0x2d4>)
 80128d4:	4613      	mov	r3, r2
 80128d6:	005b      	lsls	r3, r3, #1
 80128d8:	4413      	add	r3, r2
 80128da:	00db      	lsls	r3, r3, #3
 80128dc:	440b      	add	r3, r1
 80128de:	3314      	adds	r3, #20
 80128e0:	781b      	ldrb	r3, [r3, #0]
 80128e2:	2b00      	cmp	r3, #0
 80128e4:	d006      	beq.n	80128f4 <etharp_find_entry+0x27c>
 80128e6:	4b1a      	ldr	r3, [pc, #104]	; (8012950 <etharp_find_entry+0x2d8>)
 80128e8:	f44f 72c2 	mov.w	r2, #388	; 0x184
 80128ec:	491d      	ldr	r1, [pc, #116]	; (8012964 <etharp_find_entry+0x2ec>)
 80128ee:	481a      	ldr	r0, [pc, #104]	; (8012958 <etharp_find_entry+0x2e0>)
 80128f0:	f002 f912 	bl	8014b18 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80128f4:	68fb      	ldr	r3, [r7, #12]
 80128f6:	2b00      	cmp	r3, #0
 80128f8:	d00b      	beq.n	8012912 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80128fa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80128fe:	68fb      	ldr	r3, [r7, #12]
 8012900:	6819      	ldr	r1, [r3, #0]
 8012902:	4812      	ldr	r0, [pc, #72]	; (801294c <etharp_find_entry+0x2d4>)
 8012904:	4613      	mov	r3, r2
 8012906:	005b      	lsls	r3, r3, #1
 8012908:	4413      	add	r3, r2
 801290a:	00db      	lsls	r3, r3, #3
 801290c:	4403      	add	r3, r0
 801290e:	3304      	adds	r3, #4
 8012910:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8012912:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012916:	490d      	ldr	r1, [pc, #52]	; (801294c <etharp_find_entry+0x2d4>)
 8012918:	4613      	mov	r3, r2
 801291a:	005b      	lsls	r3, r3, #1
 801291c:	4413      	add	r3, r2
 801291e:	00db      	lsls	r3, r3, #3
 8012920:	440b      	add	r3, r1
 8012922:	3312      	adds	r3, #18
 8012924:	2200      	movs	r2, #0
 8012926:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8012928:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801292c:	4907      	ldr	r1, [pc, #28]	; (801294c <etharp_find_entry+0x2d4>)
 801292e:	4613      	mov	r3, r2
 8012930:	005b      	lsls	r3, r3, #1
 8012932:	4413      	add	r3, r2
 8012934:	00db      	lsls	r3, r3, #3
 8012936:	440b      	add	r3, r1
 8012938:	3308      	adds	r3, #8
 801293a:	687a      	ldr	r2, [r7, #4]
 801293c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801293e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8012942:	4618      	mov	r0, r3
 8012944:	3728      	adds	r7, #40	; 0x28
 8012946:	46bd      	mov	sp, r7
 8012948:	bd80      	pop	{r7, pc}
 801294a:	bf00      	nop
 801294c:	20008c04 	.word	0x20008c04
 8012950:	08018440 	.word	0x08018440
 8012954:	08018478 	.word	0x08018478
 8012958:	080184b8 	.word	0x080184b8
 801295c:	080184e0 	.word	0x080184e0
 8012960:	080184f8 	.word	0x080184f8
 8012964:	0801850c 	.word	0x0801850c

08012968 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8012968:	b580      	push	{r7, lr}
 801296a:	b088      	sub	sp, #32
 801296c:	af02      	add	r7, sp, #8
 801296e:	60f8      	str	r0, [r7, #12]
 8012970:	60b9      	str	r1, [r7, #8]
 8012972:	607a      	str	r2, [r7, #4]
 8012974:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8012976:	68fb      	ldr	r3, [r7, #12]
 8012978:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801297c:	2b06      	cmp	r3, #6
 801297e:	d006      	beq.n	801298e <etharp_update_arp_entry+0x26>
 8012980:	4b48      	ldr	r3, [pc, #288]	; (8012aa4 <etharp_update_arp_entry+0x13c>)
 8012982:	f240 12a9 	movw	r2, #425	; 0x1a9
 8012986:	4948      	ldr	r1, [pc, #288]	; (8012aa8 <etharp_update_arp_entry+0x140>)
 8012988:	4848      	ldr	r0, [pc, #288]	; (8012aac <etharp_update_arp_entry+0x144>)
 801298a:	f002 f8c5 	bl	8014b18 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801298e:	68bb      	ldr	r3, [r7, #8]
 8012990:	2b00      	cmp	r3, #0
 8012992:	d012      	beq.n	80129ba <etharp_update_arp_entry+0x52>
 8012994:	68bb      	ldr	r3, [r7, #8]
 8012996:	681b      	ldr	r3, [r3, #0]
 8012998:	2b00      	cmp	r3, #0
 801299a:	d00e      	beq.n	80129ba <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801299c:	68bb      	ldr	r3, [r7, #8]
 801299e:	681b      	ldr	r3, [r3, #0]
 80129a0:	68f9      	ldr	r1, [r7, #12]
 80129a2:	4618      	mov	r0, r3
 80129a4:	f001 f8fe 	bl	8013ba4 <ip4_addr_isbroadcast_u32>
 80129a8:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80129aa:	2b00      	cmp	r3, #0
 80129ac:	d105      	bne.n	80129ba <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80129ae:	68bb      	ldr	r3, [r7, #8]
 80129b0:	681b      	ldr	r3, [r3, #0]
 80129b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80129b6:	2be0      	cmp	r3, #224	; 0xe0
 80129b8:	d102      	bne.n	80129c0 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80129ba:	f06f 030f 	mvn.w	r3, #15
 80129be:	e06c      	b.n	8012a9a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80129c0:	78fb      	ldrb	r3, [r7, #3]
 80129c2:	68fa      	ldr	r2, [r7, #12]
 80129c4:	4619      	mov	r1, r3
 80129c6:	68b8      	ldr	r0, [r7, #8]
 80129c8:	f7ff fe56 	bl	8012678 <etharp_find_entry>
 80129cc:	4603      	mov	r3, r0
 80129ce:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 80129d0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80129d4:	2b00      	cmp	r3, #0
 80129d6:	da02      	bge.n	80129de <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80129d8:	8afb      	ldrh	r3, [r7, #22]
 80129da:	b25b      	sxtb	r3, r3
 80129dc:	e05d      	b.n	8012a9a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80129de:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80129e2:	4933      	ldr	r1, [pc, #204]	; (8012ab0 <etharp_update_arp_entry+0x148>)
 80129e4:	4613      	mov	r3, r2
 80129e6:	005b      	lsls	r3, r3, #1
 80129e8:	4413      	add	r3, r2
 80129ea:	00db      	lsls	r3, r3, #3
 80129ec:	440b      	add	r3, r1
 80129ee:	3314      	adds	r3, #20
 80129f0:	2202      	movs	r2, #2
 80129f2:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80129f4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80129f8:	492d      	ldr	r1, [pc, #180]	; (8012ab0 <etharp_update_arp_entry+0x148>)
 80129fa:	4613      	mov	r3, r2
 80129fc:	005b      	lsls	r3, r3, #1
 80129fe:	4413      	add	r3, r2
 8012a00:	00db      	lsls	r3, r3, #3
 8012a02:	440b      	add	r3, r1
 8012a04:	3308      	adds	r3, #8
 8012a06:	68fa      	ldr	r2, [r7, #12]
 8012a08:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8012a0a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012a0e:	4613      	mov	r3, r2
 8012a10:	005b      	lsls	r3, r3, #1
 8012a12:	4413      	add	r3, r2
 8012a14:	00db      	lsls	r3, r3, #3
 8012a16:	3308      	adds	r3, #8
 8012a18:	4a25      	ldr	r2, [pc, #148]	; (8012ab0 <etharp_update_arp_entry+0x148>)
 8012a1a:	4413      	add	r3, r2
 8012a1c:	3304      	adds	r3, #4
 8012a1e:	2206      	movs	r2, #6
 8012a20:	6879      	ldr	r1, [r7, #4]
 8012a22:	4618      	mov	r0, r3
 8012a24:	f002 f848 	bl	8014ab8 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8012a28:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012a2c:	4920      	ldr	r1, [pc, #128]	; (8012ab0 <etharp_update_arp_entry+0x148>)
 8012a2e:	4613      	mov	r3, r2
 8012a30:	005b      	lsls	r3, r3, #1
 8012a32:	4413      	add	r3, r2
 8012a34:	00db      	lsls	r3, r3, #3
 8012a36:	440b      	add	r3, r1
 8012a38:	3312      	adds	r3, #18
 8012a3a:	2200      	movs	r2, #0
 8012a3c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8012a3e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012a42:	491b      	ldr	r1, [pc, #108]	; (8012ab0 <etharp_update_arp_entry+0x148>)
 8012a44:	4613      	mov	r3, r2
 8012a46:	005b      	lsls	r3, r3, #1
 8012a48:	4413      	add	r3, r2
 8012a4a:	00db      	lsls	r3, r3, #3
 8012a4c:	440b      	add	r3, r1
 8012a4e:	681b      	ldr	r3, [r3, #0]
 8012a50:	2b00      	cmp	r3, #0
 8012a52:	d021      	beq.n	8012a98 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8012a54:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012a58:	4915      	ldr	r1, [pc, #84]	; (8012ab0 <etharp_update_arp_entry+0x148>)
 8012a5a:	4613      	mov	r3, r2
 8012a5c:	005b      	lsls	r3, r3, #1
 8012a5e:	4413      	add	r3, r2
 8012a60:	00db      	lsls	r3, r3, #3
 8012a62:	440b      	add	r3, r1
 8012a64:	681b      	ldr	r3, [r3, #0]
 8012a66:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8012a68:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012a6c:	4910      	ldr	r1, [pc, #64]	; (8012ab0 <etharp_update_arp_entry+0x148>)
 8012a6e:	4613      	mov	r3, r2
 8012a70:	005b      	lsls	r3, r3, #1
 8012a72:	4413      	add	r3, r2
 8012a74:	00db      	lsls	r3, r3, #3
 8012a76:	440b      	add	r3, r1
 8012a78:	2200      	movs	r2, #0
 8012a7a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8012a7c:	68fb      	ldr	r3, [r7, #12]
 8012a7e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8012a82:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012a86:	9300      	str	r3, [sp, #0]
 8012a88:	687b      	ldr	r3, [r7, #4]
 8012a8a:	6939      	ldr	r1, [r7, #16]
 8012a8c:	68f8      	ldr	r0, [r7, #12]
 8012a8e:	f001 ff97 	bl	80149c0 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8012a92:	6938      	ldr	r0, [r7, #16]
 8012a94:	f7f8 ff30 	bl	800b8f8 <pbuf_free>
  }
  return ERR_OK;
 8012a98:	2300      	movs	r3, #0
}
 8012a9a:	4618      	mov	r0, r3
 8012a9c:	3718      	adds	r7, #24
 8012a9e:	46bd      	mov	sp, r7
 8012aa0:	bd80      	pop	{r7, pc}
 8012aa2:	bf00      	nop
 8012aa4:	08018440 	.word	0x08018440
 8012aa8:	08018538 	.word	0x08018538
 8012aac:	080184b8 	.word	0x080184b8
 8012ab0:	20008c04 	.word	0x20008c04

08012ab4 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8012ab4:	b580      	push	{r7, lr}
 8012ab6:	b084      	sub	sp, #16
 8012ab8:	af00      	add	r7, sp, #0
 8012aba:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012abc:	2300      	movs	r3, #0
 8012abe:	60fb      	str	r3, [r7, #12]
 8012ac0:	e01e      	b.n	8012b00 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8012ac2:	4913      	ldr	r1, [pc, #76]	; (8012b10 <etharp_cleanup_netif+0x5c>)
 8012ac4:	68fa      	ldr	r2, [r7, #12]
 8012ac6:	4613      	mov	r3, r2
 8012ac8:	005b      	lsls	r3, r3, #1
 8012aca:	4413      	add	r3, r2
 8012acc:	00db      	lsls	r3, r3, #3
 8012ace:	440b      	add	r3, r1
 8012ad0:	3314      	adds	r3, #20
 8012ad2:	781b      	ldrb	r3, [r3, #0]
 8012ad4:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8012ad6:	7afb      	ldrb	r3, [r7, #11]
 8012ad8:	2b00      	cmp	r3, #0
 8012ada:	d00e      	beq.n	8012afa <etharp_cleanup_netif+0x46>
 8012adc:	490c      	ldr	r1, [pc, #48]	; (8012b10 <etharp_cleanup_netif+0x5c>)
 8012ade:	68fa      	ldr	r2, [r7, #12]
 8012ae0:	4613      	mov	r3, r2
 8012ae2:	005b      	lsls	r3, r3, #1
 8012ae4:	4413      	add	r3, r2
 8012ae6:	00db      	lsls	r3, r3, #3
 8012ae8:	440b      	add	r3, r1
 8012aea:	3308      	adds	r3, #8
 8012aec:	681b      	ldr	r3, [r3, #0]
 8012aee:	687a      	ldr	r2, [r7, #4]
 8012af0:	429a      	cmp	r2, r3
 8012af2:	d102      	bne.n	8012afa <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8012af4:	68f8      	ldr	r0, [r7, #12]
 8012af6:	f7ff fce5 	bl	80124c4 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012afa:	68fb      	ldr	r3, [r7, #12]
 8012afc:	3301      	adds	r3, #1
 8012afe:	60fb      	str	r3, [r7, #12]
 8012b00:	68fb      	ldr	r3, [r7, #12]
 8012b02:	2b09      	cmp	r3, #9
 8012b04:	dddd      	ble.n	8012ac2 <etharp_cleanup_netif+0xe>
    }
  }
}
 8012b06:	bf00      	nop
 8012b08:	bf00      	nop
 8012b0a:	3710      	adds	r7, #16
 8012b0c:	46bd      	mov	sp, r7
 8012b0e:	bd80      	pop	{r7, pc}
 8012b10:	20008c04 	.word	0x20008c04

08012b14 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8012b14:	b5b0      	push	{r4, r5, r7, lr}
 8012b16:	b08a      	sub	sp, #40	; 0x28
 8012b18:	af04      	add	r7, sp, #16
 8012b1a:	6078      	str	r0, [r7, #4]
 8012b1c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8012b1e:	683b      	ldr	r3, [r7, #0]
 8012b20:	2b00      	cmp	r3, #0
 8012b22:	d107      	bne.n	8012b34 <etharp_input+0x20>
 8012b24:	4b3d      	ldr	r3, [pc, #244]	; (8012c1c <etharp_input+0x108>)
 8012b26:	f240 228a 	movw	r2, #650	; 0x28a
 8012b2a:	493d      	ldr	r1, [pc, #244]	; (8012c20 <etharp_input+0x10c>)
 8012b2c:	483d      	ldr	r0, [pc, #244]	; (8012c24 <etharp_input+0x110>)
 8012b2e:	f001 fff3 	bl	8014b18 <iprintf>
 8012b32:	e06f      	b.n	8012c14 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8012b34:	687b      	ldr	r3, [r7, #4]
 8012b36:	685b      	ldr	r3, [r3, #4]
 8012b38:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8012b3a:	693b      	ldr	r3, [r7, #16]
 8012b3c:	881b      	ldrh	r3, [r3, #0]
 8012b3e:	b29b      	uxth	r3, r3
 8012b40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012b44:	d10c      	bne.n	8012b60 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8012b46:	693b      	ldr	r3, [r7, #16]
 8012b48:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8012b4a:	2b06      	cmp	r3, #6
 8012b4c:	d108      	bne.n	8012b60 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8012b4e:	693b      	ldr	r3, [r7, #16]
 8012b50:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8012b52:	2b04      	cmp	r3, #4
 8012b54:	d104      	bne.n	8012b60 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8012b56:	693b      	ldr	r3, [r7, #16]
 8012b58:	885b      	ldrh	r3, [r3, #2]
 8012b5a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8012b5c:	2b08      	cmp	r3, #8
 8012b5e:	d003      	beq.n	8012b68 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8012b60:	6878      	ldr	r0, [r7, #4]
 8012b62:	f7f8 fec9 	bl	800b8f8 <pbuf_free>
    return;
 8012b66:	e055      	b.n	8012c14 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8012b68:	693b      	ldr	r3, [r7, #16]
 8012b6a:	330e      	adds	r3, #14
 8012b6c:	681b      	ldr	r3, [r3, #0]
 8012b6e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8012b70:	693b      	ldr	r3, [r7, #16]
 8012b72:	3318      	adds	r3, #24
 8012b74:	681b      	ldr	r3, [r3, #0]
 8012b76:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8012b78:	683b      	ldr	r3, [r7, #0]
 8012b7a:	3304      	adds	r3, #4
 8012b7c:	681b      	ldr	r3, [r3, #0]
 8012b7e:	2b00      	cmp	r3, #0
 8012b80:	d102      	bne.n	8012b88 <etharp_input+0x74>
    for_us = 0;
 8012b82:	2300      	movs	r3, #0
 8012b84:	75fb      	strb	r3, [r7, #23]
 8012b86:	e009      	b.n	8012b9c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8012b88:	68ba      	ldr	r2, [r7, #8]
 8012b8a:	683b      	ldr	r3, [r7, #0]
 8012b8c:	3304      	adds	r3, #4
 8012b8e:	681b      	ldr	r3, [r3, #0]
 8012b90:	429a      	cmp	r2, r3
 8012b92:	bf0c      	ite	eq
 8012b94:	2301      	moveq	r3, #1
 8012b96:	2300      	movne	r3, #0
 8012b98:	b2db      	uxtb	r3, r3
 8012b9a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8012b9c:	693b      	ldr	r3, [r7, #16]
 8012b9e:	f103 0208 	add.w	r2, r3, #8
 8012ba2:	7dfb      	ldrb	r3, [r7, #23]
 8012ba4:	2b00      	cmp	r3, #0
 8012ba6:	d001      	beq.n	8012bac <etharp_input+0x98>
 8012ba8:	2301      	movs	r3, #1
 8012baa:	e000      	b.n	8012bae <etharp_input+0x9a>
 8012bac:	2302      	movs	r3, #2
 8012bae:	f107 010c 	add.w	r1, r7, #12
 8012bb2:	6838      	ldr	r0, [r7, #0]
 8012bb4:	f7ff fed8 	bl	8012968 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8012bb8:	693b      	ldr	r3, [r7, #16]
 8012bba:	88db      	ldrh	r3, [r3, #6]
 8012bbc:	b29b      	uxth	r3, r3
 8012bbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012bc2:	d003      	beq.n	8012bcc <etharp_input+0xb8>
 8012bc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012bc8:	d01e      	beq.n	8012c08 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8012bca:	e020      	b.n	8012c0e <etharp_input+0xfa>
      if (for_us) {
 8012bcc:	7dfb      	ldrb	r3, [r7, #23]
 8012bce:	2b00      	cmp	r3, #0
 8012bd0:	d01c      	beq.n	8012c0c <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8012bd2:	683b      	ldr	r3, [r7, #0]
 8012bd4:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8012bd8:	693b      	ldr	r3, [r7, #16]
 8012bda:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8012bde:	683b      	ldr	r3, [r7, #0]
 8012be0:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8012be4:	683b      	ldr	r3, [r7, #0]
 8012be6:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8012be8:	693a      	ldr	r2, [r7, #16]
 8012bea:	3208      	adds	r2, #8
        etharp_raw(netif,
 8012bec:	2102      	movs	r1, #2
 8012bee:	9103      	str	r1, [sp, #12]
 8012bf0:	f107 010c 	add.w	r1, r7, #12
 8012bf4:	9102      	str	r1, [sp, #8]
 8012bf6:	9201      	str	r2, [sp, #4]
 8012bf8:	9300      	str	r3, [sp, #0]
 8012bfa:	462b      	mov	r3, r5
 8012bfc:	4622      	mov	r2, r4
 8012bfe:	4601      	mov	r1, r0
 8012c00:	6838      	ldr	r0, [r7, #0]
 8012c02:	f000 faeb 	bl	80131dc <etharp_raw>
      break;
 8012c06:	e001      	b.n	8012c0c <etharp_input+0xf8>
      break;
 8012c08:	bf00      	nop
 8012c0a:	e000      	b.n	8012c0e <etharp_input+0xfa>
      break;
 8012c0c:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8012c0e:	6878      	ldr	r0, [r7, #4]
 8012c10:	f7f8 fe72 	bl	800b8f8 <pbuf_free>
}
 8012c14:	3718      	adds	r7, #24
 8012c16:	46bd      	mov	sp, r7
 8012c18:	bdb0      	pop	{r4, r5, r7, pc}
 8012c1a:	bf00      	nop
 8012c1c:	08018440 	.word	0x08018440
 8012c20:	08018590 	.word	0x08018590
 8012c24:	080184b8 	.word	0x080184b8

08012c28 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8012c28:	b580      	push	{r7, lr}
 8012c2a:	b086      	sub	sp, #24
 8012c2c:	af02      	add	r7, sp, #8
 8012c2e:	60f8      	str	r0, [r7, #12]
 8012c30:	60b9      	str	r1, [r7, #8]
 8012c32:	4613      	mov	r3, r2
 8012c34:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8012c36:	79fa      	ldrb	r2, [r7, #7]
 8012c38:	4944      	ldr	r1, [pc, #272]	; (8012d4c <etharp_output_to_arp_index+0x124>)
 8012c3a:	4613      	mov	r3, r2
 8012c3c:	005b      	lsls	r3, r3, #1
 8012c3e:	4413      	add	r3, r2
 8012c40:	00db      	lsls	r3, r3, #3
 8012c42:	440b      	add	r3, r1
 8012c44:	3314      	adds	r3, #20
 8012c46:	781b      	ldrb	r3, [r3, #0]
 8012c48:	2b01      	cmp	r3, #1
 8012c4a:	d806      	bhi.n	8012c5a <etharp_output_to_arp_index+0x32>
 8012c4c:	4b40      	ldr	r3, [pc, #256]	; (8012d50 <etharp_output_to_arp_index+0x128>)
 8012c4e:	f240 22ee 	movw	r2, #750	; 0x2ee
 8012c52:	4940      	ldr	r1, [pc, #256]	; (8012d54 <etharp_output_to_arp_index+0x12c>)
 8012c54:	4840      	ldr	r0, [pc, #256]	; (8012d58 <etharp_output_to_arp_index+0x130>)
 8012c56:	f001 ff5f 	bl	8014b18 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8012c5a:	79fa      	ldrb	r2, [r7, #7]
 8012c5c:	493b      	ldr	r1, [pc, #236]	; (8012d4c <etharp_output_to_arp_index+0x124>)
 8012c5e:	4613      	mov	r3, r2
 8012c60:	005b      	lsls	r3, r3, #1
 8012c62:	4413      	add	r3, r2
 8012c64:	00db      	lsls	r3, r3, #3
 8012c66:	440b      	add	r3, r1
 8012c68:	3314      	adds	r3, #20
 8012c6a:	781b      	ldrb	r3, [r3, #0]
 8012c6c:	2b02      	cmp	r3, #2
 8012c6e:	d153      	bne.n	8012d18 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8012c70:	79fa      	ldrb	r2, [r7, #7]
 8012c72:	4936      	ldr	r1, [pc, #216]	; (8012d4c <etharp_output_to_arp_index+0x124>)
 8012c74:	4613      	mov	r3, r2
 8012c76:	005b      	lsls	r3, r3, #1
 8012c78:	4413      	add	r3, r2
 8012c7a:	00db      	lsls	r3, r3, #3
 8012c7c:	440b      	add	r3, r1
 8012c7e:	3312      	adds	r3, #18
 8012c80:	881b      	ldrh	r3, [r3, #0]
 8012c82:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8012c86:	d919      	bls.n	8012cbc <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8012c88:	79fa      	ldrb	r2, [r7, #7]
 8012c8a:	4613      	mov	r3, r2
 8012c8c:	005b      	lsls	r3, r3, #1
 8012c8e:	4413      	add	r3, r2
 8012c90:	00db      	lsls	r3, r3, #3
 8012c92:	4a2e      	ldr	r2, [pc, #184]	; (8012d4c <etharp_output_to_arp_index+0x124>)
 8012c94:	4413      	add	r3, r2
 8012c96:	3304      	adds	r3, #4
 8012c98:	4619      	mov	r1, r3
 8012c9a:	68f8      	ldr	r0, [r7, #12]
 8012c9c:	f000 fb4c 	bl	8013338 <etharp_request>
 8012ca0:	4603      	mov	r3, r0
 8012ca2:	2b00      	cmp	r3, #0
 8012ca4:	d138      	bne.n	8012d18 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8012ca6:	79fa      	ldrb	r2, [r7, #7]
 8012ca8:	4928      	ldr	r1, [pc, #160]	; (8012d4c <etharp_output_to_arp_index+0x124>)
 8012caa:	4613      	mov	r3, r2
 8012cac:	005b      	lsls	r3, r3, #1
 8012cae:	4413      	add	r3, r2
 8012cb0:	00db      	lsls	r3, r3, #3
 8012cb2:	440b      	add	r3, r1
 8012cb4:	3314      	adds	r3, #20
 8012cb6:	2203      	movs	r2, #3
 8012cb8:	701a      	strb	r2, [r3, #0]
 8012cba:	e02d      	b.n	8012d18 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8012cbc:	79fa      	ldrb	r2, [r7, #7]
 8012cbe:	4923      	ldr	r1, [pc, #140]	; (8012d4c <etharp_output_to_arp_index+0x124>)
 8012cc0:	4613      	mov	r3, r2
 8012cc2:	005b      	lsls	r3, r3, #1
 8012cc4:	4413      	add	r3, r2
 8012cc6:	00db      	lsls	r3, r3, #3
 8012cc8:	440b      	add	r3, r1
 8012cca:	3312      	adds	r3, #18
 8012ccc:	881b      	ldrh	r3, [r3, #0]
 8012cce:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8012cd2:	d321      	bcc.n	8012d18 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8012cd4:	79fa      	ldrb	r2, [r7, #7]
 8012cd6:	4613      	mov	r3, r2
 8012cd8:	005b      	lsls	r3, r3, #1
 8012cda:	4413      	add	r3, r2
 8012cdc:	00db      	lsls	r3, r3, #3
 8012cde:	4a1b      	ldr	r2, [pc, #108]	; (8012d4c <etharp_output_to_arp_index+0x124>)
 8012ce0:	4413      	add	r3, r2
 8012ce2:	1d19      	adds	r1, r3, #4
 8012ce4:	79fa      	ldrb	r2, [r7, #7]
 8012ce6:	4613      	mov	r3, r2
 8012ce8:	005b      	lsls	r3, r3, #1
 8012cea:	4413      	add	r3, r2
 8012cec:	00db      	lsls	r3, r3, #3
 8012cee:	3308      	adds	r3, #8
 8012cf0:	4a16      	ldr	r2, [pc, #88]	; (8012d4c <etharp_output_to_arp_index+0x124>)
 8012cf2:	4413      	add	r3, r2
 8012cf4:	3304      	adds	r3, #4
 8012cf6:	461a      	mov	r2, r3
 8012cf8:	68f8      	ldr	r0, [r7, #12]
 8012cfa:	f000 fafb 	bl	80132f4 <etharp_request_dst>
 8012cfe:	4603      	mov	r3, r0
 8012d00:	2b00      	cmp	r3, #0
 8012d02:	d109      	bne.n	8012d18 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8012d04:	79fa      	ldrb	r2, [r7, #7]
 8012d06:	4911      	ldr	r1, [pc, #68]	; (8012d4c <etharp_output_to_arp_index+0x124>)
 8012d08:	4613      	mov	r3, r2
 8012d0a:	005b      	lsls	r3, r3, #1
 8012d0c:	4413      	add	r3, r2
 8012d0e:	00db      	lsls	r3, r3, #3
 8012d10:	440b      	add	r3, r1
 8012d12:	3314      	adds	r3, #20
 8012d14:	2203      	movs	r2, #3
 8012d16:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8012d18:	68fb      	ldr	r3, [r7, #12]
 8012d1a:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8012d1e:	79fa      	ldrb	r2, [r7, #7]
 8012d20:	4613      	mov	r3, r2
 8012d22:	005b      	lsls	r3, r3, #1
 8012d24:	4413      	add	r3, r2
 8012d26:	00db      	lsls	r3, r3, #3
 8012d28:	3308      	adds	r3, #8
 8012d2a:	4a08      	ldr	r2, [pc, #32]	; (8012d4c <etharp_output_to_arp_index+0x124>)
 8012d2c:	4413      	add	r3, r2
 8012d2e:	3304      	adds	r3, #4
 8012d30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012d34:	9200      	str	r2, [sp, #0]
 8012d36:	460a      	mov	r2, r1
 8012d38:	68b9      	ldr	r1, [r7, #8]
 8012d3a:	68f8      	ldr	r0, [r7, #12]
 8012d3c:	f001 fe40 	bl	80149c0 <ethernet_output>
 8012d40:	4603      	mov	r3, r0
}
 8012d42:	4618      	mov	r0, r3
 8012d44:	3710      	adds	r7, #16
 8012d46:	46bd      	mov	sp, r7
 8012d48:	bd80      	pop	{r7, pc}
 8012d4a:	bf00      	nop
 8012d4c:	20008c04 	.word	0x20008c04
 8012d50:	08018440 	.word	0x08018440
 8012d54:	080185b0 	.word	0x080185b0
 8012d58:	080184b8 	.word	0x080184b8

08012d5c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8012d5c:	b580      	push	{r7, lr}
 8012d5e:	b08a      	sub	sp, #40	; 0x28
 8012d60:	af02      	add	r7, sp, #8
 8012d62:	60f8      	str	r0, [r7, #12]
 8012d64:	60b9      	str	r1, [r7, #8]
 8012d66:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8012d68:	687b      	ldr	r3, [r7, #4]
 8012d6a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8012d6c:	68fb      	ldr	r3, [r7, #12]
 8012d6e:	2b00      	cmp	r3, #0
 8012d70:	d106      	bne.n	8012d80 <etharp_output+0x24>
 8012d72:	4b73      	ldr	r3, [pc, #460]	; (8012f40 <etharp_output+0x1e4>)
 8012d74:	f240 321e 	movw	r2, #798	; 0x31e
 8012d78:	4972      	ldr	r1, [pc, #456]	; (8012f44 <etharp_output+0x1e8>)
 8012d7a:	4873      	ldr	r0, [pc, #460]	; (8012f48 <etharp_output+0x1ec>)
 8012d7c:	f001 fecc 	bl	8014b18 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8012d80:	68bb      	ldr	r3, [r7, #8]
 8012d82:	2b00      	cmp	r3, #0
 8012d84:	d106      	bne.n	8012d94 <etharp_output+0x38>
 8012d86:	4b6e      	ldr	r3, [pc, #440]	; (8012f40 <etharp_output+0x1e4>)
 8012d88:	f240 321f 	movw	r2, #799	; 0x31f
 8012d8c:	496f      	ldr	r1, [pc, #444]	; (8012f4c <etharp_output+0x1f0>)
 8012d8e:	486e      	ldr	r0, [pc, #440]	; (8012f48 <etharp_output+0x1ec>)
 8012d90:	f001 fec2 	bl	8014b18 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8012d94:	687b      	ldr	r3, [r7, #4]
 8012d96:	2b00      	cmp	r3, #0
 8012d98:	d106      	bne.n	8012da8 <etharp_output+0x4c>
 8012d9a:	4b69      	ldr	r3, [pc, #420]	; (8012f40 <etharp_output+0x1e4>)
 8012d9c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8012da0:	496b      	ldr	r1, [pc, #428]	; (8012f50 <etharp_output+0x1f4>)
 8012da2:	4869      	ldr	r0, [pc, #420]	; (8012f48 <etharp_output+0x1ec>)
 8012da4:	f001 feb8 	bl	8014b18 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8012da8:	687b      	ldr	r3, [r7, #4]
 8012daa:	681b      	ldr	r3, [r3, #0]
 8012dac:	68f9      	ldr	r1, [r7, #12]
 8012dae:	4618      	mov	r0, r3
 8012db0:	f000 fef8 	bl	8013ba4 <ip4_addr_isbroadcast_u32>
 8012db4:	4603      	mov	r3, r0
 8012db6:	2b00      	cmp	r3, #0
 8012db8:	d002      	beq.n	8012dc0 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8012dba:	4b66      	ldr	r3, [pc, #408]	; (8012f54 <etharp_output+0x1f8>)
 8012dbc:	61fb      	str	r3, [r7, #28]
 8012dbe:	e0af      	b.n	8012f20 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8012dc0:	687b      	ldr	r3, [r7, #4]
 8012dc2:	681b      	ldr	r3, [r3, #0]
 8012dc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012dc8:	2be0      	cmp	r3, #224	; 0xe0
 8012dca:	d118      	bne.n	8012dfe <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8012dcc:	2301      	movs	r3, #1
 8012dce:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8012dd0:	2300      	movs	r3, #0
 8012dd2:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8012dd4:	235e      	movs	r3, #94	; 0x5e
 8012dd6:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8012dd8:	687b      	ldr	r3, [r7, #4]
 8012dda:	3301      	adds	r3, #1
 8012ddc:	781b      	ldrb	r3, [r3, #0]
 8012dde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012de2:	b2db      	uxtb	r3, r3
 8012de4:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8012de6:	687b      	ldr	r3, [r7, #4]
 8012de8:	3302      	adds	r3, #2
 8012dea:	781b      	ldrb	r3, [r3, #0]
 8012dec:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8012dee:	687b      	ldr	r3, [r7, #4]
 8012df0:	3303      	adds	r3, #3
 8012df2:	781b      	ldrb	r3, [r3, #0]
 8012df4:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8012df6:	f107 0310 	add.w	r3, r7, #16
 8012dfa:	61fb      	str	r3, [r7, #28]
 8012dfc:	e090      	b.n	8012f20 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8012dfe:	687b      	ldr	r3, [r7, #4]
 8012e00:	681a      	ldr	r2, [r3, #0]
 8012e02:	68fb      	ldr	r3, [r7, #12]
 8012e04:	3304      	adds	r3, #4
 8012e06:	681b      	ldr	r3, [r3, #0]
 8012e08:	405a      	eors	r2, r3
 8012e0a:	68fb      	ldr	r3, [r7, #12]
 8012e0c:	3308      	adds	r3, #8
 8012e0e:	681b      	ldr	r3, [r3, #0]
 8012e10:	4013      	ands	r3, r2
 8012e12:	2b00      	cmp	r3, #0
 8012e14:	d012      	beq.n	8012e3c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8012e16:	687b      	ldr	r3, [r7, #4]
 8012e18:	681b      	ldr	r3, [r3, #0]
 8012e1a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8012e1c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8012e20:	4293      	cmp	r3, r2
 8012e22:	d00b      	beq.n	8012e3c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8012e24:	68fb      	ldr	r3, [r7, #12]
 8012e26:	330c      	adds	r3, #12
 8012e28:	681b      	ldr	r3, [r3, #0]
 8012e2a:	2b00      	cmp	r3, #0
 8012e2c:	d003      	beq.n	8012e36 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8012e2e:	68fb      	ldr	r3, [r7, #12]
 8012e30:	330c      	adds	r3, #12
 8012e32:	61bb      	str	r3, [r7, #24]
 8012e34:	e002      	b.n	8012e3c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8012e36:	f06f 0303 	mvn.w	r3, #3
 8012e3a:	e07d      	b.n	8012f38 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8012e3c:	4b46      	ldr	r3, [pc, #280]	; (8012f58 <etharp_output+0x1fc>)
 8012e3e:	781b      	ldrb	r3, [r3, #0]
 8012e40:	4619      	mov	r1, r3
 8012e42:	4a46      	ldr	r2, [pc, #280]	; (8012f5c <etharp_output+0x200>)
 8012e44:	460b      	mov	r3, r1
 8012e46:	005b      	lsls	r3, r3, #1
 8012e48:	440b      	add	r3, r1
 8012e4a:	00db      	lsls	r3, r3, #3
 8012e4c:	4413      	add	r3, r2
 8012e4e:	3314      	adds	r3, #20
 8012e50:	781b      	ldrb	r3, [r3, #0]
 8012e52:	2b01      	cmp	r3, #1
 8012e54:	d925      	bls.n	8012ea2 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8012e56:	4b40      	ldr	r3, [pc, #256]	; (8012f58 <etharp_output+0x1fc>)
 8012e58:	781b      	ldrb	r3, [r3, #0]
 8012e5a:	4619      	mov	r1, r3
 8012e5c:	4a3f      	ldr	r2, [pc, #252]	; (8012f5c <etharp_output+0x200>)
 8012e5e:	460b      	mov	r3, r1
 8012e60:	005b      	lsls	r3, r3, #1
 8012e62:	440b      	add	r3, r1
 8012e64:	00db      	lsls	r3, r3, #3
 8012e66:	4413      	add	r3, r2
 8012e68:	3308      	adds	r3, #8
 8012e6a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8012e6c:	68fa      	ldr	r2, [r7, #12]
 8012e6e:	429a      	cmp	r2, r3
 8012e70:	d117      	bne.n	8012ea2 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8012e72:	69bb      	ldr	r3, [r7, #24]
 8012e74:	681a      	ldr	r2, [r3, #0]
 8012e76:	4b38      	ldr	r3, [pc, #224]	; (8012f58 <etharp_output+0x1fc>)
 8012e78:	781b      	ldrb	r3, [r3, #0]
 8012e7a:	4618      	mov	r0, r3
 8012e7c:	4937      	ldr	r1, [pc, #220]	; (8012f5c <etharp_output+0x200>)
 8012e7e:	4603      	mov	r3, r0
 8012e80:	005b      	lsls	r3, r3, #1
 8012e82:	4403      	add	r3, r0
 8012e84:	00db      	lsls	r3, r3, #3
 8012e86:	440b      	add	r3, r1
 8012e88:	3304      	adds	r3, #4
 8012e8a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8012e8c:	429a      	cmp	r2, r3
 8012e8e:	d108      	bne.n	8012ea2 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8012e90:	4b31      	ldr	r3, [pc, #196]	; (8012f58 <etharp_output+0x1fc>)
 8012e92:	781b      	ldrb	r3, [r3, #0]
 8012e94:	461a      	mov	r2, r3
 8012e96:	68b9      	ldr	r1, [r7, #8]
 8012e98:	68f8      	ldr	r0, [r7, #12]
 8012e9a:	f7ff fec5 	bl	8012c28 <etharp_output_to_arp_index>
 8012e9e:	4603      	mov	r3, r0
 8012ea0:	e04a      	b.n	8012f38 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8012ea2:	2300      	movs	r3, #0
 8012ea4:	75fb      	strb	r3, [r7, #23]
 8012ea6:	e031      	b.n	8012f0c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8012ea8:	7dfa      	ldrb	r2, [r7, #23]
 8012eaa:	492c      	ldr	r1, [pc, #176]	; (8012f5c <etharp_output+0x200>)
 8012eac:	4613      	mov	r3, r2
 8012eae:	005b      	lsls	r3, r3, #1
 8012eb0:	4413      	add	r3, r2
 8012eb2:	00db      	lsls	r3, r3, #3
 8012eb4:	440b      	add	r3, r1
 8012eb6:	3314      	adds	r3, #20
 8012eb8:	781b      	ldrb	r3, [r3, #0]
 8012eba:	2b01      	cmp	r3, #1
 8012ebc:	d923      	bls.n	8012f06 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8012ebe:	7dfa      	ldrb	r2, [r7, #23]
 8012ec0:	4926      	ldr	r1, [pc, #152]	; (8012f5c <etharp_output+0x200>)
 8012ec2:	4613      	mov	r3, r2
 8012ec4:	005b      	lsls	r3, r3, #1
 8012ec6:	4413      	add	r3, r2
 8012ec8:	00db      	lsls	r3, r3, #3
 8012eca:	440b      	add	r3, r1
 8012ecc:	3308      	adds	r3, #8
 8012ece:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8012ed0:	68fa      	ldr	r2, [r7, #12]
 8012ed2:	429a      	cmp	r2, r3
 8012ed4:	d117      	bne.n	8012f06 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8012ed6:	69bb      	ldr	r3, [r7, #24]
 8012ed8:	6819      	ldr	r1, [r3, #0]
 8012eda:	7dfa      	ldrb	r2, [r7, #23]
 8012edc:	481f      	ldr	r0, [pc, #124]	; (8012f5c <etharp_output+0x200>)
 8012ede:	4613      	mov	r3, r2
 8012ee0:	005b      	lsls	r3, r3, #1
 8012ee2:	4413      	add	r3, r2
 8012ee4:	00db      	lsls	r3, r3, #3
 8012ee6:	4403      	add	r3, r0
 8012ee8:	3304      	adds	r3, #4
 8012eea:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8012eec:	4299      	cmp	r1, r3
 8012eee:	d10a      	bne.n	8012f06 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8012ef0:	4a19      	ldr	r2, [pc, #100]	; (8012f58 <etharp_output+0x1fc>)
 8012ef2:	7dfb      	ldrb	r3, [r7, #23]
 8012ef4:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8012ef6:	7dfb      	ldrb	r3, [r7, #23]
 8012ef8:	461a      	mov	r2, r3
 8012efa:	68b9      	ldr	r1, [r7, #8]
 8012efc:	68f8      	ldr	r0, [r7, #12]
 8012efe:	f7ff fe93 	bl	8012c28 <etharp_output_to_arp_index>
 8012f02:	4603      	mov	r3, r0
 8012f04:	e018      	b.n	8012f38 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8012f06:	7dfb      	ldrb	r3, [r7, #23]
 8012f08:	3301      	adds	r3, #1
 8012f0a:	75fb      	strb	r3, [r7, #23]
 8012f0c:	7dfb      	ldrb	r3, [r7, #23]
 8012f0e:	2b09      	cmp	r3, #9
 8012f10:	d9ca      	bls.n	8012ea8 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8012f12:	68ba      	ldr	r2, [r7, #8]
 8012f14:	69b9      	ldr	r1, [r7, #24]
 8012f16:	68f8      	ldr	r0, [r7, #12]
 8012f18:	f000 f822 	bl	8012f60 <etharp_query>
 8012f1c:	4603      	mov	r3, r0
 8012f1e:	e00b      	b.n	8012f38 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8012f20:	68fb      	ldr	r3, [r7, #12]
 8012f22:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8012f26:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012f2a:	9300      	str	r3, [sp, #0]
 8012f2c:	69fb      	ldr	r3, [r7, #28]
 8012f2e:	68b9      	ldr	r1, [r7, #8]
 8012f30:	68f8      	ldr	r0, [r7, #12]
 8012f32:	f001 fd45 	bl	80149c0 <ethernet_output>
 8012f36:	4603      	mov	r3, r0
}
 8012f38:	4618      	mov	r0, r3
 8012f3a:	3720      	adds	r7, #32
 8012f3c:	46bd      	mov	sp, r7
 8012f3e:	bd80      	pop	{r7, pc}
 8012f40:	08018440 	.word	0x08018440
 8012f44:	08018590 	.word	0x08018590
 8012f48:	080184b8 	.word	0x080184b8
 8012f4c:	080185e0 	.word	0x080185e0
 8012f50:	08018580 	.word	0x08018580
 8012f54:	0801ab30 	.word	0x0801ab30
 8012f58:	20008cf4 	.word	0x20008cf4
 8012f5c:	20008c04 	.word	0x20008c04

08012f60 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8012f60:	b580      	push	{r7, lr}
 8012f62:	b08c      	sub	sp, #48	; 0x30
 8012f64:	af02      	add	r7, sp, #8
 8012f66:	60f8      	str	r0, [r7, #12]
 8012f68:	60b9      	str	r1, [r7, #8]
 8012f6a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8012f6c:	68fb      	ldr	r3, [r7, #12]
 8012f6e:	3326      	adds	r3, #38	; 0x26
 8012f70:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8012f72:	23ff      	movs	r3, #255	; 0xff
 8012f74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8012f78:	2300      	movs	r3, #0
 8012f7a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8012f7c:	68bb      	ldr	r3, [r7, #8]
 8012f7e:	681b      	ldr	r3, [r3, #0]
 8012f80:	68f9      	ldr	r1, [r7, #12]
 8012f82:	4618      	mov	r0, r3
 8012f84:	f000 fe0e 	bl	8013ba4 <ip4_addr_isbroadcast_u32>
 8012f88:	4603      	mov	r3, r0
 8012f8a:	2b00      	cmp	r3, #0
 8012f8c:	d10c      	bne.n	8012fa8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8012f8e:	68bb      	ldr	r3, [r7, #8]
 8012f90:	681b      	ldr	r3, [r3, #0]
 8012f92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8012f96:	2be0      	cmp	r3, #224	; 0xe0
 8012f98:	d006      	beq.n	8012fa8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8012f9a:	68bb      	ldr	r3, [r7, #8]
 8012f9c:	2b00      	cmp	r3, #0
 8012f9e:	d003      	beq.n	8012fa8 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8012fa0:	68bb      	ldr	r3, [r7, #8]
 8012fa2:	681b      	ldr	r3, [r3, #0]
 8012fa4:	2b00      	cmp	r3, #0
 8012fa6:	d102      	bne.n	8012fae <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8012fa8:	f06f 030f 	mvn.w	r3, #15
 8012fac:	e101      	b.n	80131b2 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8012fae:	68fa      	ldr	r2, [r7, #12]
 8012fb0:	2101      	movs	r1, #1
 8012fb2:	68b8      	ldr	r0, [r7, #8]
 8012fb4:	f7ff fb60 	bl	8012678 <etharp_find_entry>
 8012fb8:	4603      	mov	r3, r0
 8012fba:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8012fbc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012fc0:	2b00      	cmp	r3, #0
 8012fc2:	da02      	bge.n	8012fca <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8012fc4:	8a7b      	ldrh	r3, [r7, #18]
 8012fc6:	b25b      	sxtb	r3, r3
 8012fc8:	e0f3      	b.n	80131b2 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8012fca:	8a7b      	ldrh	r3, [r7, #18]
 8012fcc:	2b7e      	cmp	r3, #126	; 0x7e
 8012fce:	d906      	bls.n	8012fde <etharp_query+0x7e>
 8012fd0:	4b7a      	ldr	r3, [pc, #488]	; (80131bc <etharp_query+0x25c>)
 8012fd2:	f240 32c1 	movw	r2, #961	; 0x3c1
 8012fd6:	497a      	ldr	r1, [pc, #488]	; (80131c0 <etharp_query+0x260>)
 8012fd8:	487a      	ldr	r0, [pc, #488]	; (80131c4 <etharp_query+0x264>)
 8012fda:	f001 fd9d 	bl	8014b18 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8012fde:	8a7b      	ldrh	r3, [r7, #18]
 8012fe0:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8012fe2:	7c7a      	ldrb	r2, [r7, #17]
 8012fe4:	4978      	ldr	r1, [pc, #480]	; (80131c8 <etharp_query+0x268>)
 8012fe6:	4613      	mov	r3, r2
 8012fe8:	005b      	lsls	r3, r3, #1
 8012fea:	4413      	add	r3, r2
 8012fec:	00db      	lsls	r3, r3, #3
 8012fee:	440b      	add	r3, r1
 8012ff0:	3314      	adds	r3, #20
 8012ff2:	781b      	ldrb	r3, [r3, #0]
 8012ff4:	2b00      	cmp	r3, #0
 8012ff6:	d115      	bne.n	8013024 <etharp_query+0xc4>
    is_new_entry = 1;
 8012ff8:	2301      	movs	r3, #1
 8012ffa:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8012ffc:	7c7a      	ldrb	r2, [r7, #17]
 8012ffe:	4972      	ldr	r1, [pc, #456]	; (80131c8 <etharp_query+0x268>)
 8013000:	4613      	mov	r3, r2
 8013002:	005b      	lsls	r3, r3, #1
 8013004:	4413      	add	r3, r2
 8013006:	00db      	lsls	r3, r3, #3
 8013008:	440b      	add	r3, r1
 801300a:	3314      	adds	r3, #20
 801300c:	2201      	movs	r2, #1
 801300e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8013010:	7c7a      	ldrb	r2, [r7, #17]
 8013012:	496d      	ldr	r1, [pc, #436]	; (80131c8 <etharp_query+0x268>)
 8013014:	4613      	mov	r3, r2
 8013016:	005b      	lsls	r3, r3, #1
 8013018:	4413      	add	r3, r2
 801301a:	00db      	lsls	r3, r3, #3
 801301c:	440b      	add	r3, r1
 801301e:	3308      	adds	r3, #8
 8013020:	68fa      	ldr	r2, [r7, #12]
 8013022:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8013024:	7c7a      	ldrb	r2, [r7, #17]
 8013026:	4968      	ldr	r1, [pc, #416]	; (80131c8 <etharp_query+0x268>)
 8013028:	4613      	mov	r3, r2
 801302a:	005b      	lsls	r3, r3, #1
 801302c:	4413      	add	r3, r2
 801302e:	00db      	lsls	r3, r3, #3
 8013030:	440b      	add	r3, r1
 8013032:	3314      	adds	r3, #20
 8013034:	781b      	ldrb	r3, [r3, #0]
 8013036:	2b01      	cmp	r3, #1
 8013038:	d011      	beq.n	801305e <etharp_query+0xfe>
 801303a:	7c7a      	ldrb	r2, [r7, #17]
 801303c:	4962      	ldr	r1, [pc, #392]	; (80131c8 <etharp_query+0x268>)
 801303e:	4613      	mov	r3, r2
 8013040:	005b      	lsls	r3, r3, #1
 8013042:	4413      	add	r3, r2
 8013044:	00db      	lsls	r3, r3, #3
 8013046:	440b      	add	r3, r1
 8013048:	3314      	adds	r3, #20
 801304a:	781b      	ldrb	r3, [r3, #0]
 801304c:	2b01      	cmp	r3, #1
 801304e:	d806      	bhi.n	801305e <etharp_query+0xfe>
 8013050:	4b5a      	ldr	r3, [pc, #360]	; (80131bc <etharp_query+0x25c>)
 8013052:	f240 32cd 	movw	r2, #973	; 0x3cd
 8013056:	495d      	ldr	r1, [pc, #372]	; (80131cc <etharp_query+0x26c>)
 8013058:	485a      	ldr	r0, [pc, #360]	; (80131c4 <etharp_query+0x264>)
 801305a:	f001 fd5d 	bl	8014b18 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801305e:	6a3b      	ldr	r3, [r7, #32]
 8013060:	2b00      	cmp	r3, #0
 8013062:	d102      	bne.n	801306a <etharp_query+0x10a>
 8013064:	687b      	ldr	r3, [r7, #4]
 8013066:	2b00      	cmp	r3, #0
 8013068:	d10c      	bne.n	8013084 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801306a:	68b9      	ldr	r1, [r7, #8]
 801306c:	68f8      	ldr	r0, [r7, #12]
 801306e:	f000 f963 	bl	8013338 <etharp_request>
 8013072:	4603      	mov	r3, r0
 8013074:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8013078:	687b      	ldr	r3, [r7, #4]
 801307a:	2b00      	cmp	r3, #0
 801307c:	d102      	bne.n	8013084 <etharp_query+0x124>
      return result;
 801307e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8013082:	e096      	b.n	80131b2 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8013084:	687b      	ldr	r3, [r7, #4]
 8013086:	2b00      	cmp	r3, #0
 8013088:	d106      	bne.n	8013098 <etharp_query+0x138>
 801308a:	4b4c      	ldr	r3, [pc, #304]	; (80131bc <etharp_query+0x25c>)
 801308c:	f240 32e1 	movw	r2, #993	; 0x3e1
 8013090:	494f      	ldr	r1, [pc, #316]	; (80131d0 <etharp_query+0x270>)
 8013092:	484c      	ldr	r0, [pc, #304]	; (80131c4 <etharp_query+0x264>)
 8013094:	f001 fd40 	bl	8014b18 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8013098:	7c7a      	ldrb	r2, [r7, #17]
 801309a:	494b      	ldr	r1, [pc, #300]	; (80131c8 <etharp_query+0x268>)
 801309c:	4613      	mov	r3, r2
 801309e:	005b      	lsls	r3, r3, #1
 80130a0:	4413      	add	r3, r2
 80130a2:	00db      	lsls	r3, r3, #3
 80130a4:	440b      	add	r3, r1
 80130a6:	3314      	adds	r3, #20
 80130a8:	781b      	ldrb	r3, [r3, #0]
 80130aa:	2b01      	cmp	r3, #1
 80130ac:	d917      	bls.n	80130de <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80130ae:	4a49      	ldr	r2, [pc, #292]	; (80131d4 <etharp_query+0x274>)
 80130b0:	7c7b      	ldrb	r3, [r7, #17]
 80130b2:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80130b4:	7c7a      	ldrb	r2, [r7, #17]
 80130b6:	4613      	mov	r3, r2
 80130b8:	005b      	lsls	r3, r3, #1
 80130ba:	4413      	add	r3, r2
 80130bc:	00db      	lsls	r3, r3, #3
 80130be:	3308      	adds	r3, #8
 80130c0:	4a41      	ldr	r2, [pc, #260]	; (80131c8 <etharp_query+0x268>)
 80130c2:	4413      	add	r3, r2
 80130c4:	3304      	adds	r3, #4
 80130c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80130ca:	9200      	str	r2, [sp, #0]
 80130cc:	697a      	ldr	r2, [r7, #20]
 80130ce:	6879      	ldr	r1, [r7, #4]
 80130d0:	68f8      	ldr	r0, [r7, #12]
 80130d2:	f001 fc75 	bl	80149c0 <ethernet_output>
 80130d6:	4603      	mov	r3, r0
 80130d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80130dc:	e067      	b.n	80131ae <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80130de:	7c7a      	ldrb	r2, [r7, #17]
 80130e0:	4939      	ldr	r1, [pc, #228]	; (80131c8 <etharp_query+0x268>)
 80130e2:	4613      	mov	r3, r2
 80130e4:	005b      	lsls	r3, r3, #1
 80130e6:	4413      	add	r3, r2
 80130e8:	00db      	lsls	r3, r3, #3
 80130ea:	440b      	add	r3, r1
 80130ec:	3314      	adds	r3, #20
 80130ee:	781b      	ldrb	r3, [r3, #0]
 80130f0:	2b01      	cmp	r3, #1
 80130f2:	d15c      	bne.n	80131ae <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80130f4:	2300      	movs	r3, #0
 80130f6:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80130f8:	687b      	ldr	r3, [r7, #4]
 80130fa:	61fb      	str	r3, [r7, #28]
    while (p) {
 80130fc:	e01c      	b.n	8013138 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80130fe:	69fb      	ldr	r3, [r7, #28]
 8013100:	895a      	ldrh	r2, [r3, #10]
 8013102:	69fb      	ldr	r3, [r7, #28]
 8013104:	891b      	ldrh	r3, [r3, #8]
 8013106:	429a      	cmp	r2, r3
 8013108:	d10a      	bne.n	8013120 <etharp_query+0x1c0>
 801310a:	69fb      	ldr	r3, [r7, #28]
 801310c:	681b      	ldr	r3, [r3, #0]
 801310e:	2b00      	cmp	r3, #0
 8013110:	d006      	beq.n	8013120 <etharp_query+0x1c0>
 8013112:	4b2a      	ldr	r3, [pc, #168]	; (80131bc <etharp_query+0x25c>)
 8013114:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8013118:	492f      	ldr	r1, [pc, #188]	; (80131d8 <etharp_query+0x278>)
 801311a:	482a      	ldr	r0, [pc, #168]	; (80131c4 <etharp_query+0x264>)
 801311c:	f001 fcfc 	bl	8014b18 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8013120:	69fb      	ldr	r3, [r7, #28]
 8013122:	7b1b      	ldrb	r3, [r3, #12]
 8013124:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013128:	2b00      	cmp	r3, #0
 801312a:	d002      	beq.n	8013132 <etharp_query+0x1d2>
        copy_needed = 1;
 801312c:	2301      	movs	r3, #1
 801312e:	61bb      	str	r3, [r7, #24]
        break;
 8013130:	e005      	b.n	801313e <etharp_query+0x1de>
      }
      p = p->next;
 8013132:	69fb      	ldr	r3, [r7, #28]
 8013134:	681b      	ldr	r3, [r3, #0]
 8013136:	61fb      	str	r3, [r7, #28]
    while (p) {
 8013138:	69fb      	ldr	r3, [r7, #28]
 801313a:	2b00      	cmp	r3, #0
 801313c:	d1df      	bne.n	80130fe <etharp_query+0x19e>
    }
    if (copy_needed) {
 801313e:	69bb      	ldr	r3, [r7, #24]
 8013140:	2b00      	cmp	r3, #0
 8013142:	d007      	beq.n	8013154 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8013144:	687a      	ldr	r2, [r7, #4]
 8013146:	f44f 7120 	mov.w	r1, #640	; 0x280
 801314a:	200e      	movs	r0, #14
 801314c:	f7f8 fe30 	bl	800bdb0 <pbuf_clone>
 8013150:	61f8      	str	r0, [r7, #28]
 8013152:	e004      	b.n	801315e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8013154:	687b      	ldr	r3, [r7, #4]
 8013156:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8013158:	69f8      	ldr	r0, [r7, #28]
 801315a:	f7f8 fc6d 	bl	800ba38 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801315e:	69fb      	ldr	r3, [r7, #28]
 8013160:	2b00      	cmp	r3, #0
 8013162:	d021      	beq.n	80131a8 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8013164:	7c7a      	ldrb	r2, [r7, #17]
 8013166:	4918      	ldr	r1, [pc, #96]	; (80131c8 <etharp_query+0x268>)
 8013168:	4613      	mov	r3, r2
 801316a:	005b      	lsls	r3, r3, #1
 801316c:	4413      	add	r3, r2
 801316e:	00db      	lsls	r3, r3, #3
 8013170:	440b      	add	r3, r1
 8013172:	681b      	ldr	r3, [r3, #0]
 8013174:	2b00      	cmp	r3, #0
 8013176:	d00a      	beq.n	801318e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8013178:	7c7a      	ldrb	r2, [r7, #17]
 801317a:	4913      	ldr	r1, [pc, #76]	; (80131c8 <etharp_query+0x268>)
 801317c:	4613      	mov	r3, r2
 801317e:	005b      	lsls	r3, r3, #1
 8013180:	4413      	add	r3, r2
 8013182:	00db      	lsls	r3, r3, #3
 8013184:	440b      	add	r3, r1
 8013186:	681b      	ldr	r3, [r3, #0]
 8013188:	4618      	mov	r0, r3
 801318a:	f7f8 fbb5 	bl	800b8f8 <pbuf_free>
      }
      arp_table[i].q = p;
 801318e:	7c7a      	ldrb	r2, [r7, #17]
 8013190:	490d      	ldr	r1, [pc, #52]	; (80131c8 <etharp_query+0x268>)
 8013192:	4613      	mov	r3, r2
 8013194:	005b      	lsls	r3, r3, #1
 8013196:	4413      	add	r3, r2
 8013198:	00db      	lsls	r3, r3, #3
 801319a:	440b      	add	r3, r1
 801319c:	69fa      	ldr	r2, [r7, #28]
 801319e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80131a0:	2300      	movs	r3, #0
 80131a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80131a6:	e002      	b.n	80131ae <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80131a8:	23ff      	movs	r3, #255	; 0xff
 80131aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 80131ae:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80131b2:	4618      	mov	r0, r3
 80131b4:	3728      	adds	r7, #40	; 0x28
 80131b6:	46bd      	mov	sp, r7
 80131b8:	bd80      	pop	{r7, pc}
 80131ba:	bf00      	nop
 80131bc:	08018440 	.word	0x08018440
 80131c0:	080185ec 	.word	0x080185ec
 80131c4:	080184b8 	.word	0x080184b8
 80131c8:	20008c04 	.word	0x20008c04
 80131cc:	080185fc 	.word	0x080185fc
 80131d0:	080185e0 	.word	0x080185e0
 80131d4:	20008cf4 	.word	0x20008cf4
 80131d8:	08018624 	.word	0x08018624

080131dc <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80131dc:	b580      	push	{r7, lr}
 80131de:	b08a      	sub	sp, #40	; 0x28
 80131e0:	af02      	add	r7, sp, #8
 80131e2:	60f8      	str	r0, [r7, #12]
 80131e4:	60b9      	str	r1, [r7, #8]
 80131e6:	607a      	str	r2, [r7, #4]
 80131e8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80131ea:	2300      	movs	r3, #0
 80131ec:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80131ee:	68fb      	ldr	r3, [r7, #12]
 80131f0:	2b00      	cmp	r3, #0
 80131f2:	d106      	bne.n	8013202 <etharp_raw+0x26>
 80131f4:	4b3a      	ldr	r3, [pc, #232]	; (80132e0 <etharp_raw+0x104>)
 80131f6:	f240 4257 	movw	r2, #1111	; 0x457
 80131fa:	493a      	ldr	r1, [pc, #232]	; (80132e4 <etharp_raw+0x108>)
 80131fc:	483a      	ldr	r0, [pc, #232]	; (80132e8 <etharp_raw+0x10c>)
 80131fe:	f001 fc8b 	bl	8014b18 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8013202:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013206:	211c      	movs	r1, #28
 8013208:	200e      	movs	r0, #14
 801320a:	f7f8 f891 	bl	800b330 <pbuf_alloc>
 801320e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8013210:	69bb      	ldr	r3, [r7, #24]
 8013212:	2b00      	cmp	r3, #0
 8013214:	d102      	bne.n	801321c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8013216:	f04f 33ff 	mov.w	r3, #4294967295
 801321a:	e05d      	b.n	80132d8 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801321c:	69bb      	ldr	r3, [r7, #24]
 801321e:	895b      	ldrh	r3, [r3, #10]
 8013220:	2b1b      	cmp	r3, #27
 8013222:	d806      	bhi.n	8013232 <etharp_raw+0x56>
 8013224:	4b2e      	ldr	r3, [pc, #184]	; (80132e0 <etharp_raw+0x104>)
 8013226:	f240 4262 	movw	r2, #1122	; 0x462
 801322a:	4930      	ldr	r1, [pc, #192]	; (80132ec <etharp_raw+0x110>)
 801322c:	482e      	ldr	r0, [pc, #184]	; (80132e8 <etharp_raw+0x10c>)
 801322e:	f001 fc73 	bl	8014b18 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8013232:	69bb      	ldr	r3, [r7, #24]
 8013234:	685b      	ldr	r3, [r3, #4]
 8013236:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8013238:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801323a:	4618      	mov	r0, r3
 801323c:	f7f6 fffe 	bl	800a23c <lwip_htons>
 8013240:	4603      	mov	r3, r0
 8013242:	461a      	mov	r2, r3
 8013244:	697b      	ldr	r3, [r7, #20]
 8013246:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8013248:	68fb      	ldr	r3, [r7, #12]
 801324a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801324e:	2b06      	cmp	r3, #6
 8013250:	d006      	beq.n	8013260 <etharp_raw+0x84>
 8013252:	4b23      	ldr	r3, [pc, #140]	; (80132e0 <etharp_raw+0x104>)
 8013254:	f240 4269 	movw	r2, #1129	; 0x469
 8013258:	4925      	ldr	r1, [pc, #148]	; (80132f0 <etharp_raw+0x114>)
 801325a:	4823      	ldr	r0, [pc, #140]	; (80132e8 <etharp_raw+0x10c>)
 801325c:	f001 fc5c 	bl	8014b18 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8013260:	697b      	ldr	r3, [r7, #20]
 8013262:	3308      	adds	r3, #8
 8013264:	2206      	movs	r2, #6
 8013266:	6839      	ldr	r1, [r7, #0]
 8013268:	4618      	mov	r0, r3
 801326a:	f001 fc25 	bl	8014ab8 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801326e:	697b      	ldr	r3, [r7, #20]
 8013270:	3312      	adds	r3, #18
 8013272:	2206      	movs	r2, #6
 8013274:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013276:	4618      	mov	r0, r3
 8013278:	f001 fc1e 	bl	8014ab8 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801327c:	697b      	ldr	r3, [r7, #20]
 801327e:	330e      	adds	r3, #14
 8013280:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013282:	6812      	ldr	r2, [r2, #0]
 8013284:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8013286:	697b      	ldr	r3, [r7, #20]
 8013288:	3318      	adds	r3, #24
 801328a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801328c:	6812      	ldr	r2, [r2, #0]
 801328e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8013290:	697b      	ldr	r3, [r7, #20]
 8013292:	2200      	movs	r2, #0
 8013294:	701a      	strb	r2, [r3, #0]
 8013296:	2200      	movs	r2, #0
 8013298:	f042 0201 	orr.w	r2, r2, #1
 801329c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801329e:	697b      	ldr	r3, [r7, #20]
 80132a0:	2200      	movs	r2, #0
 80132a2:	f042 0208 	orr.w	r2, r2, #8
 80132a6:	709a      	strb	r2, [r3, #2]
 80132a8:	2200      	movs	r2, #0
 80132aa:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80132ac:	697b      	ldr	r3, [r7, #20]
 80132ae:	2206      	movs	r2, #6
 80132b0:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80132b2:	697b      	ldr	r3, [r7, #20]
 80132b4:	2204      	movs	r2, #4
 80132b6:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80132b8:	f640 0306 	movw	r3, #2054	; 0x806
 80132bc:	9300      	str	r3, [sp, #0]
 80132be:	687b      	ldr	r3, [r7, #4]
 80132c0:	68ba      	ldr	r2, [r7, #8]
 80132c2:	69b9      	ldr	r1, [r7, #24]
 80132c4:	68f8      	ldr	r0, [r7, #12]
 80132c6:	f001 fb7b 	bl	80149c0 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80132ca:	69b8      	ldr	r0, [r7, #24]
 80132cc:	f7f8 fb14 	bl	800b8f8 <pbuf_free>
  p = NULL;
 80132d0:	2300      	movs	r3, #0
 80132d2:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80132d4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80132d8:	4618      	mov	r0, r3
 80132da:	3720      	adds	r7, #32
 80132dc:	46bd      	mov	sp, r7
 80132de:	bd80      	pop	{r7, pc}
 80132e0:	08018440 	.word	0x08018440
 80132e4:	08018590 	.word	0x08018590
 80132e8:	080184b8 	.word	0x080184b8
 80132ec:	08018640 	.word	0x08018640
 80132f0:	08018674 	.word	0x08018674

080132f4 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80132f4:	b580      	push	{r7, lr}
 80132f6:	b088      	sub	sp, #32
 80132f8:	af04      	add	r7, sp, #16
 80132fa:	60f8      	str	r0, [r7, #12]
 80132fc:	60b9      	str	r1, [r7, #8]
 80132fe:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8013300:	68fb      	ldr	r3, [r7, #12]
 8013302:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8013306:	68fb      	ldr	r3, [r7, #12]
 8013308:	f103 0026 	add.w	r0, r3, #38	; 0x26
 801330c:	68fb      	ldr	r3, [r7, #12]
 801330e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8013310:	2201      	movs	r2, #1
 8013312:	9203      	str	r2, [sp, #12]
 8013314:	68ba      	ldr	r2, [r7, #8]
 8013316:	9202      	str	r2, [sp, #8]
 8013318:	4a06      	ldr	r2, [pc, #24]	; (8013334 <etharp_request_dst+0x40>)
 801331a:	9201      	str	r2, [sp, #4]
 801331c:	9300      	str	r3, [sp, #0]
 801331e:	4603      	mov	r3, r0
 8013320:	687a      	ldr	r2, [r7, #4]
 8013322:	68f8      	ldr	r0, [r7, #12]
 8013324:	f7ff ff5a 	bl	80131dc <etharp_raw>
 8013328:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801332a:	4618      	mov	r0, r3
 801332c:	3710      	adds	r7, #16
 801332e:	46bd      	mov	sp, r7
 8013330:	bd80      	pop	{r7, pc}
 8013332:	bf00      	nop
 8013334:	0801ab38 	.word	0x0801ab38

08013338 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8013338:	b580      	push	{r7, lr}
 801333a:	b082      	sub	sp, #8
 801333c:	af00      	add	r7, sp, #0
 801333e:	6078      	str	r0, [r7, #4]
 8013340:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8013342:	4a05      	ldr	r2, [pc, #20]	; (8013358 <etharp_request+0x20>)
 8013344:	6839      	ldr	r1, [r7, #0]
 8013346:	6878      	ldr	r0, [r7, #4]
 8013348:	f7ff ffd4 	bl	80132f4 <etharp_request_dst>
 801334c:	4603      	mov	r3, r0
}
 801334e:	4618      	mov	r0, r3
 8013350:	3708      	adds	r7, #8
 8013352:	46bd      	mov	sp, r7
 8013354:	bd80      	pop	{r7, pc}
 8013356:	bf00      	nop
 8013358:	0801ab30 	.word	0x0801ab30

0801335c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801335c:	b580      	push	{r7, lr}
 801335e:	b08e      	sub	sp, #56	; 0x38
 8013360:	af04      	add	r7, sp, #16
 8013362:	6078      	str	r0, [r7, #4]
 8013364:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8013366:	4b79      	ldr	r3, [pc, #484]	; (801354c <icmp_input+0x1f0>)
 8013368:	689b      	ldr	r3, [r3, #8]
 801336a:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801336c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801336e:	781b      	ldrb	r3, [r3, #0]
 8013370:	f003 030f 	and.w	r3, r3, #15
 8013374:	b2db      	uxtb	r3, r3
 8013376:	009b      	lsls	r3, r3, #2
 8013378:	b2db      	uxtb	r3, r3
 801337a:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 801337c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801337e:	2b13      	cmp	r3, #19
 8013380:	f240 80cd 	bls.w	801351e <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8013384:	687b      	ldr	r3, [r7, #4]
 8013386:	895b      	ldrh	r3, [r3, #10]
 8013388:	2b03      	cmp	r3, #3
 801338a:	f240 80ca 	bls.w	8013522 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801338e:	687b      	ldr	r3, [r7, #4]
 8013390:	685b      	ldr	r3, [r3, #4]
 8013392:	781b      	ldrb	r3, [r3, #0]
 8013394:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8013398:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 801339c:	2b00      	cmp	r3, #0
 801339e:	f000 80b7 	beq.w	8013510 <icmp_input+0x1b4>
 80133a2:	2b08      	cmp	r3, #8
 80133a4:	f040 80b7 	bne.w	8013516 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80133a8:	4b69      	ldr	r3, [pc, #420]	; (8013550 <icmp_input+0x1f4>)
 80133aa:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80133ac:	4b67      	ldr	r3, [pc, #412]	; (801354c <icmp_input+0x1f0>)
 80133ae:	695b      	ldr	r3, [r3, #20]
 80133b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80133b4:	2be0      	cmp	r3, #224	; 0xe0
 80133b6:	f000 80bb 	beq.w	8013530 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80133ba:	4b64      	ldr	r3, [pc, #400]	; (801354c <icmp_input+0x1f0>)
 80133bc:	695b      	ldr	r3, [r3, #20]
 80133be:	4a63      	ldr	r2, [pc, #396]	; (801354c <icmp_input+0x1f0>)
 80133c0:	6812      	ldr	r2, [r2, #0]
 80133c2:	4611      	mov	r1, r2
 80133c4:	4618      	mov	r0, r3
 80133c6:	f000 fbed 	bl	8013ba4 <ip4_addr_isbroadcast_u32>
 80133ca:	4603      	mov	r3, r0
 80133cc:	2b00      	cmp	r3, #0
 80133ce:	f040 80b1 	bne.w	8013534 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80133d2:	687b      	ldr	r3, [r7, #4]
 80133d4:	891b      	ldrh	r3, [r3, #8]
 80133d6:	2b07      	cmp	r3, #7
 80133d8:	f240 80a5 	bls.w	8013526 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80133dc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80133de:	330e      	adds	r3, #14
 80133e0:	4619      	mov	r1, r3
 80133e2:	6878      	ldr	r0, [r7, #4]
 80133e4:	f7f8 f9f2 	bl	800b7cc <pbuf_add_header>
 80133e8:	4603      	mov	r3, r0
 80133ea:	2b00      	cmp	r3, #0
 80133ec:	d04b      	beq.n	8013486 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80133ee:	687b      	ldr	r3, [r7, #4]
 80133f0:	891a      	ldrh	r2, [r3, #8]
 80133f2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80133f4:	4413      	add	r3, r2
 80133f6:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80133f8:	687b      	ldr	r3, [r7, #4]
 80133fa:	891b      	ldrh	r3, [r3, #8]
 80133fc:	8b7a      	ldrh	r2, [r7, #26]
 80133fe:	429a      	cmp	r2, r3
 8013400:	f0c0 809a 	bcc.w	8013538 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8013404:	8b7b      	ldrh	r3, [r7, #26]
 8013406:	f44f 7220 	mov.w	r2, #640	; 0x280
 801340a:	4619      	mov	r1, r3
 801340c:	200e      	movs	r0, #14
 801340e:	f7f7 ff8f 	bl	800b330 <pbuf_alloc>
 8013412:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8013414:	697b      	ldr	r3, [r7, #20]
 8013416:	2b00      	cmp	r3, #0
 8013418:	f000 8090 	beq.w	801353c <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801341c:	697b      	ldr	r3, [r7, #20]
 801341e:	895b      	ldrh	r3, [r3, #10]
 8013420:	461a      	mov	r2, r3
 8013422:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013424:	3308      	adds	r3, #8
 8013426:	429a      	cmp	r2, r3
 8013428:	d203      	bcs.n	8013432 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801342a:	6978      	ldr	r0, [r7, #20]
 801342c:	f7f8 fa64 	bl	800b8f8 <pbuf_free>
          goto icmperr;
 8013430:	e085      	b.n	801353e <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8013432:	697b      	ldr	r3, [r7, #20]
 8013434:	685b      	ldr	r3, [r3, #4]
 8013436:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8013438:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801343a:	4618      	mov	r0, r3
 801343c:	f001 fb3c 	bl	8014ab8 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8013440:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013442:	4619      	mov	r1, r3
 8013444:	6978      	ldr	r0, [r7, #20]
 8013446:	f7f8 f9d1 	bl	800b7ec <pbuf_remove_header>
 801344a:	4603      	mov	r3, r0
 801344c:	2b00      	cmp	r3, #0
 801344e:	d009      	beq.n	8013464 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8013450:	4b40      	ldr	r3, [pc, #256]	; (8013554 <icmp_input+0x1f8>)
 8013452:	22b6      	movs	r2, #182	; 0xb6
 8013454:	4940      	ldr	r1, [pc, #256]	; (8013558 <icmp_input+0x1fc>)
 8013456:	4841      	ldr	r0, [pc, #260]	; (801355c <icmp_input+0x200>)
 8013458:	f001 fb5e 	bl	8014b18 <iprintf>
          pbuf_free(r);
 801345c:	6978      	ldr	r0, [r7, #20]
 801345e:	f7f8 fa4b 	bl	800b8f8 <pbuf_free>
          goto icmperr;
 8013462:	e06c      	b.n	801353e <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8013464:	6879      	ldr	r1, [r7, #4]
 8013466:	6978      	ldr	r0, [r7, #20]
 8013468:	f7f8 fb5e 	bl	800bb28 <pbuf_copy>
 801346c:	4603      	mov	r3, r0
 801346e:	2b00      	cmp	r3, #0
 8013470:	d003      	beq.n	801347a <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8013472:	6978      	ldr	r0, [r7, #20]
 8013474:	f7f8 fa40 	bl	800b8f8 <pbuf_free>
          goto icmperr;
 8013478:	e061      	b.n	801353e <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801347a:	6878      	ldr	r0, [r7, #4]
 801347c:	f7f8 fa3c 	bl	800b8f8 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8013480:	697b      	ldr	r3, [r7, #20]
 8013482:	607b      	str	r3, [r7, #4]
 8013484:	e00f      	b.n	80134a6 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8013486:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013488:	330e      	adds	r3, #14
 801348a:	4619      	mov	r1, r3
 801348c:	6878      	ldr	r0, [r7, #4]
 801348e:	f7f8 f9ad 	bl	800b7ec <pbuf_remove_header>
 8013492:	4603      	mov	r3, r0
 8013494:	2b00      	cmp	r3, #0
 8013496:	d006      	beq.n	80134a6 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8013498:	4b2e      	ldr	r3, [pc, #184]	; (8013554 <icmp_input+0x1f8>)
 801349a:	22c7      	movs	r2, #199	; 0xc7
 801349c:	4930      	ldr	r1, [pc, #192]	; (8013560 <icmp_input+0x204>)
 801349e:	482f      	ldr	r0, [pc, #188]	; (801355c <icmp_input+0x200>)
 80134a0:	f001 fb3a 	bl	8014b18 <iprintf>
          goto icmperr;
 80134a4:	e04b      	b.n	801353e <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80134a6:	687b      	ldr	r3, [r7, #4]
 80134a8:	685b      	ldr	r3, [r3, #4]
 80134aa:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80134ac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80134ae:	4619      	mov	r1, r3
 80134b0:	6878      	ldr	r0, [r7, #4]
 80134b2:	f7f8 f98b 	bl	800b7cc <pbuf_add_header>
 80134b6:	4603      	mov	r3, r0
 80134b8:	2b00      	cmp	r3, #0
 80134ba:	d12b      	bne.n	8013514 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80134bc:	687b      	ldr	r3, [r7, #4]
 80134be:	685b      	ldr	r3, [r3, #4]
 80134c0:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80134c2:	69fb      	ldr	r3, [r7, #28]
 80134c4:	681a      	ldr	r2, [r3, #0]
 80134c6:	68fb      	ldr	r3, [r7, #12]
 80134c8:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80134ca:	4b20      	ldr	r3, [pc, #128]	; (801354c <icmp_input+0x1f0>)
 80134cc:	691a      	ldr	r2, [r3, #16]
 80134ce:	68fb      	ldr	r3, [r7, #12]
 80134d0:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80134d2:	693b      	ldr	r3, [r7, #16]
 80134d4:	2200      	movs	r2, #0
 80134d6:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 80134d8:	693b      	ldr	r3, [r7, #16]
 80134da:	2200      	movs	r2, #0
 80134dc:	709a      	strb	r2, [r3, #2]
 80134de:	2200      	movs	r2, #0
 80134e0:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80134e2:	68fb      	ldr	r3, [r7, #12]
 80134e4:	22ff      	movs	r2, #255	; 0xff
 80134e6:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80134e8:	68fb      	ldr	r3, [r7, #12]
 80134ea:	2200      	movs	r2, #0
 80134ec:	729a      	strb	r2, [r3, #10]
 80134ee:	2200      	movs	r2, #0
 80134f0:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80134f2:	683b      	ldr	r3, [r7, #0]
 80134f4:	9302      	str	r3, [sp, #8]
 80134f6:	2301      	movs	r3, #1
 80134f8:	9301      	str	r3, [sp, #4]
 80134fa:	2300      	movs	r3, #0
 80134fc:	9300      	str	r3, [sp, #0]
 80134fe:	23ff      	movs	r3, #255	; 0xff
 8013500:	2200      	movs	r2, #0
 8013502:	69f9      	ldr	r1, [r7, #28]
 8013504:	6878      	ldr	r0, [r7, #4]
 8013506:	f000 fa75 	bl	80139f4 <ip4_output_if>
 801350a:	4603      	mov	r3, r0
 801350c:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801350e:	e001      	b.n	8013514 <icmp_input+0x1b8>
      break;
 8013510:	bf00      	nop
 8013512:	e000      	b.n	8013516 <icmp_input+0x1ba>
      break;
 8013514:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8013516:	6878      	ldr	r0, [r7, #4]
 8013518:	f7f8 f9ee 	bl	800b8f8 <pbuf_free>
  return;
 801351c:	e013      	b.n	8013546 <icmp_input+0x1ea>
    goto lenerr;
 801351e:	bf00      	nop
 8013520:	e002      	b.n	8013528 <icmp_input+0x1cc>
    goto lenerr;
 8013522:	bf00      	nop
 8013524:	e000      	b.n	8013528 <icmp_input+0x1cc>
        goto lenerr;
 8013526:	bf00      	nop
lenerr:
  pbuf_free(p);
 8013528:	6878      	ldr	r0, [r7, #4]
 801352a:	f7f8 f9e5 	bl	800b8f8 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801352e:	e00a      	b.n	8013546 <icmp_input+0x1ea>
        goto icmperr;
 8013530:	bf00      	nop
 8013532:	e004      	b.n	801353e <icmp_input+0x1e2>
        goto icmperr;
 8013534:	bf00      	nop
 8013536:	e002      	b.n	801353e <icmp_input+0x1e2>
          goto icmperr;
 8013538:	bf00      	nop
 801353a:	e000      	b.n	801353e <icmp_input+0x1e2>
          goto icmperr;
 801353c:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801353e:	6878      	ldr	r0, [r7, #4]
 8013540:	f7f8 f9da 	bl	800b8f8 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8013544:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8013546:	3728      	adds	r7, #40	; 0x28
 8013548:	46bd      	mov	sp, r7
 801354a:	bd80      	pop	{r7, pc}
 801354c:	20005634 	.word	0x20005634
 8013550:	20005648 	.word	0x20005648
 8013554:	080186b8 	.word	0x080186b8
 8013558:	080186f0 	.word	0x080186f0
 801355c:	08018728 	.word	0x08018728
 8013560:	08018750 	.word	0x08018750

08013564 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8013564:	b580      	push	{r7, lr}
 8013566:	b082      	sub	sp, #8
 8013568:	af00      	add	r7, sp, #0
 801356a:	6078      	str	r0, [r7, #4]
 801356c:	460b      	mov	r3, r1
 801356e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8013570:	78fb      	ldrb	r3, [r7, #3]
 8013572:	461a      	mov	r2, r3
 8013574:	2103      	movs	r1, #3
 8013576:	6878      	ldr	r0, [r7, #4]
 8013578:	f000 f814 	bl	80135a4 <icmp_send_response>
}
 801357c:	bf00      	nop
 801357e:	3708      	adds	r7, #8
 8013580:	46bd      	mov	sp, r7
 8013582:	bd80      	pop	{r7, pc}

08013584 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8013584:	b580      	push	{r7, lr}
 8013586:	b082      	sub	sp, #8
 8013588:	af00      	add	r7, sp, #0
 801358a:	6078      	str	r0, [r7, #4]
 801358c:	460b      	mov	r3, r1
 801358e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8013590:	78fb      	ldrb	r3, [r7, #3]
 8013592:	461a      	mov	r2, r3
 8013594:	210b      	movs	r1, #11
 8013596:	6878      	ldr	r0, [r7, #4]
 8013598:	f000 f804 	bl	80135a4 <icmp_send_response>
}
 801359c:	bf00      	nop
 801359e:	3708      	adds	r7, #8
 80135a0:	46bd      	mov	sp, r7
 80135a2:	bd80      	pop	{r7, pc}

080135a4 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80135a4:	b580      	push	{r7, lr}
 80135a6:	b08c      	sub	sp, #48	; 0x30
 80135a8:	af04      	add	r7, sp, #16
 80135aa:	6078      	str	r0, [r7, #4]
 80135ac:	460b      	mov	r3, r1
 80135ae:	70fb      	strb	r3, [r7, #3]
 80135b0:	4613      	mov	r3, r2
 80135b2:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80135b4:	f44f 7220 	mov.w	r2, #640	; 0x280
 80135b8:	2124      	movs	r1, #36	; 0x24
 80135ba:	2022      	movs	r0, #34	; 0x22
 80135bc:	f7f7 feb8 	bl	800b330 <pbuf_alloc>
 80135c0:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80135c2:	69fb      	ldr	r3, [r7, #28]
 80135c4:	2b00      	cmp	r3, #0
 80135c6:	d04c      	beq.n	8013662 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80135c8:	69fb      	ldr	r3, [r7, #28]
 80135ca:	895b      	ldrh	r3, [r3, #10]
 80135cc:	2b23      	cmp	r3, #35	; 0x23
 80135ce:	d806      	bhi.n	80135de <icmp_send_response+0x3a>
 80135d0:	4b26      	ldr	r3, [pc, #152]	; (801366c <icmp_send_response+0xc8>)
 80135d2:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80135d6:	4926      	ldr	r1, [pc, #152]	; (8013670 <icmp_send_response+0xcc>)
 80135d8:	4826      	ldr	r0, [pc, #152]	; (8013674 <icmp_send_response+0xd0>)
 80135da:	f001 fa9d 	bl	8014b18 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80135de:	687b      	ldr	r3, [r7, #4]
 80135e0:	685b      	ldr	r3, [r3, #4]
 80135e2:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80135e4:	69fb      	ldr	r3, [r7, #28]
 80135e6:	685b      	ldr	r3, [r3, #4]
 80135e8:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80135ea:	697b      	ldr	r3, [r7, #20]
 80135ec:	78fa      	ldrb	r2, [r7, #3]
 80135ee:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80135f0:	697b      	ldr	r3, [r7, #20]
 80135f2:	78ba      	ldrb	r2, [r7, #2]
 80135f4:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80135f6:	697b      	ldr	r3, [r7, #20]
 80135f8:	2200      	movs	r2, #0
 80135fa:	711a      	strb	r2, [r3, #4]
 80135fc:	2200      	movs	r2, #0
 80135fe:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8013600:	697b      	ldr	r3, [r7, #20]
 8013602:	2200      	movs	r2, #0
 8013604:	719a      	strb	r2, [r3, #6]
 8013606:	2200      	movs	r2, #0
 8013608:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801360a:	69fb      	ldr	r3, [r7, #28]
 801360c:	685b      	ldr	r3, [r3, #4]
 801360e:	f103 0008 	add.w	r0, r3, #8
 8013612:	687b      	ldr	r3, [r7, #4]
 8013614:	685b      	ldr	r3, [r3, #4]
 8013616:	221c      	movs	r2, #28
 8013618:	4619      	mov	r1, r3
 801361a:	f001 fa4d 	bl	8014ab8 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801361e:	69bb      	ldr	r3, [r7, #24]
 8013620:	68db      	ldr	r3, [r3, #12]
 8013622:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8013624:	f107 030c 	add.w	r3, r7, #12
 8013628:	4618      	mov	r0, r3
 801362a:	f000 f825 	bl	8013678 <ip4_route>
 801362e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8013630:	693b      	ldr	r3, [r7, #16]
 8013632:	2b00      	cmp	r3, #0
 8013634:	d011      	beq.n	801365a <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8013636:	697b      	ldr	r3, [r7, #20]
 8013638:	2200      	movs	r2, #0
 801363a:	709a      	strb	r2, [r3, #2]
 801363c:	2200      	movs	r2, #0
 801363e:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8013640:	f107 020c 	add.w	r2, r7, #12
 8013644:	693b      	ldr	r3, [r7, #16]
 8013646:	9302      	str	r3, [sp, #8]
 8013648:	2301      	movs	r3, #1
 801364a:	9301      	str	r3, [sp, #4]
 801364c:	2300      	movs	r3, #0
 801364e:	9300      	str	r3, [sp, #0]
 8013650:	23ff      	movs	r3, #255	; 0xff
 8013652:	2100      	movs	r1, #0
 8013654:	69f8      	ldr	r0, [r7, #28]
 8013656:	f000 f9cd 	bl	80139f4 <ip4_output_if>
  }
  pbuf_free(q);
 801365a:	69f8      	ldr	r0, [r7, #28]
 801365c:	f7f8 f94c 	bl	800b8f8 <pbuf_free>
 8013660:	e000      	b.n	8013664 <icmp_send_response+0xc0>
    return;
 8013662:	bf00      	nop
}
 8013664:	3720      	adds	r7, #32
 8013666:	46bd      	mov	sp, r7
 8013668:	bd80      	pop	{r7, pc}
 801366a:	bf00      	nop
 801366c:	080186b8 	.word	0x080186b8
 8013670:	08018784 	.word	0x08018784
 8013674:	08018728 	.word	0x08018728

08013678 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8013678:	b480      	push	{r7}
 801367a:	b085      	sub	sp, #20
 801367c:	af00      	add	r7, sp, #0
 801367e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8013680:	4b33      	ldr	r3, [pc, #204]	; (8013750 <ip4_route+0xd8>)
 8013682:	681b      	ldr	r3, [r3, #0]
 8013684:	60fb      	str	r3, [r7, #12]
 8013686:	e036      	b.n	80136f6 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8013688:	68fb      	ldr	r3, [r7, #12]
 801368a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801368e:	f003 0301 	and.w	r3, r3, #1
 8013692:	b2db      	uxtb	r3, r3
 8013694:	2b00      	cmp	r3, #0
 8013696:	d02b      	beq.n	80136f0 <ip4_route+0x78>
 8013698:	68fb      	ldr	r3, [r7, #12]
 801369a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801369e:	089b      	lsrs	r3, r3, #2
 80136a0:	f003 0301 	and.w	r3, r3, #1
 80136a4:	b2db      	uxtb	r3, r3
 80136a6:	2b00      	cmp	r3, #0
 80136a8:	d022      	beq.n	80136f0 <ip4_route+0x78>
 80136aa:	68fb      	ldr	r3, [r7, #12]
 80136ac:	3304      	adds	r3, #4
 80136ae:	681b      	ldr	r3, [r3, #0]
 80136b0:	2b00      	cmp	r3, #0
 80136b2:	d01d      	beq.n	80136f0 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80136b4:	687b      	ldr	r3, [r7, #4]
 80136b6:	681a      	ldr	r2, [r3, #0]
 80136b8:	68fb      	ldr	r3, [r7, #12]
 80136ba:	3304      	adds	r3, #4
 80136bc:	681b      	ldr	r3, [r3, #0]
 80136be:	405a      	eors	r2, r3
 80136c0:	68fb      	ldr	r3, [r7, #12]
 80136c2:	3308      	adds	r3, #8
 80136c4:	681b      	ldr	r3, [r3, #0]
 80136c6:	4013      	ands	r3, r2
 80136c8:	2b00      	cmp	r3, #0
 80136ca:	d101      	bne.n	80136d0 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80136cc:	68fb      	ldr	r3, [r7, #12]
 80136ce:	e038      	b.n	8013742 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80136d0:	68fb      	ldr	r3, [r7, #12]
 80136d2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80136d6:	f003 0302 	and.w	r3, r3, #2
 80136da:	2b00      	cmp	r3, #0
 80136dc:	d108      	bne.n	80136f0 <ip4_route+0x78>
 80136de:	687b      	ldr	r3, [r7, #4]
 80136e0:	681a      	ldr	r2, [r3, #0]
 80136e2:	68fb      	ldr	r3, [r7, #12]
 80136e4:	330c      	adds	r3, #12
 80136e6:	681b      	ldr	r3, [r3, #0]
 80136e8:	429a      	cmp	r2, r3
 80136ea:	d101      	bne.n	80136f0 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80136ec:	68fb      	ldr	r3, [r7, #12]
 80136ee:	e028      	b.n	8013742 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80136f0:	68fb      	ldr	r3, [r7, #12]
 80136f2:	681b      	ldr	r3, [r3, #0]
 80136f4:	60fb      	str	r3, [r7, #12]
 80136f6:	68fb      	ldr	r3, [r7, #12]
 80136f8:	2b00      	cmp	r3, #0
 80136fa:	d1c5      	bne.n	8013688 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80136fc:	4b15      	ldr	r3, [pc, #84]	; (8013754 <ip4_route+0xdc>)
 80136fe:	681b      	ldr	r3, [r3, #0]
 8013700:	2b00      	cmp	r3, #0
 8013702:	d01a      	beq.n	801373a <ip4_route+0xc2>
 8013704:	4b13      	ldr	r3, [pc, #76]	; (8013754 <ip4_route+0xdc>)
 8013706:	681b      	ldr	r3, [r3, #0]
 8013708:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801370c:	f003 0301 	and.w	r3, r3, #1
 8013710:	2b00      	cmp	r3, #0
 8013712:	d012      	beq.n	801373a <ip4_route+0xc2>
 8013714:	4b0f      	ldr	r3, [pc, #60]	; (8013754 <ip4_route+0xdc>)
 8013716:	681b      	ldr	r3, [r3, #0]
 8013718:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801371c:	f003 0304 	and.w	r3, r3, #4
 8013720:	2b00      	cmp	r3, #0
 8013722:	d00a      	beq.n	801373a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8013724:	4b0b      	ldr	r3, [pc, #44]	; (8013754 <ip4_route+0xdc>)
 8013726:	681b      	ldr	r3, [r3, #0]
 8013728:	3304      	adds	r3, #4
 801372a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801372c:	2b00      	cmp	r3, #0
 801372e:	d004      	beq.n	801373a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8013730:	687b      	ldr	r3, [r7, #4]
 8013732:	681b      	ldr	r3, [r3, #0]
 8013734:	b2db      	uxtb	r3, r3
 8013736:	2b7f      	cmp	r3, #127	; 0x7f
 8013738:	d101      	bne.n	801373e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801373a:	2300      	movs	r3, #0
 801373c:	e001      	b.n	8013742 <ip4_route+0xca>
  }

  return netif_default;
 801373e:	4b05      	ldr	r3, [pc, #20]	; (8013754 <ip4_route+0xdc>)
 8013740:	681b      	ldr	r3, [r3, #0]
}
 8013742:	4618      	mov	r0, r3
 8013744:	3714      	adds	r7, #20
 8013746:	46bd      	mov	sp, r7
 8013748:	f85d 7b04 	ldr.w	r7, [sp], #4
 801374c:	4770      	bx	lr
 801374e:	bf00      	nop
 8013750:	20008b98 	.word	0x20008b98
 8013754:	20008b9c 	.word	0x20008b9c

08013758 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8013758:	b580      	push	{r7, lr}
 801375a:	b082      	sub	sp, #8
 801375c:	af00      	add	r7, sp, #0
 801375e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8013760:	687b      	ldr	r3, [r7, #4]
 8013762:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013766:	f003 0301 	and.w	r3, r3, #1
 801376a:	b2db      	uxtb	r3, r3
 801376c:	2b00      	cmp	r3, #0
 801376e:	d016      	beq.n	801379e <ip4_input_accept+0x46>
 8013770:	687b      	ldr	r3, [r7, #4]
 8013772:	3304      	adds	r3, #4
 8013774:	681b      	ldr	r3, [r3, #0]
 8013776:	2b00      	cmp	r3, #0
 8013778:	d011      	beq.n	801379e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801377a:	4b0b      	ldr	r3, [pc, #44]	; (80137a8 <ip4_input_accept+0x50>)
 801377c:	695a      	ldr	r2, [r3, #20]
 801377e:	687b      	ldr	r3, [r7, #4]
 8013780:	3304      	adds	r3, #4
 8013782:	681b      	ldr	r3, [r3, #0]
 8013784:	429a      	cmp	r2, r3
 8013786:	d008      	beq.n	801379a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8013788:	4b07      	ldr	r3, [pc, #28]	; (80137a8 <ip4_input_accept+0x50>)
 801378a:	695b      	ldr	r3, [r3, #20]
 801378c:	6879      	ldr	r1, [r7, #4]
 801378e:	4618      	mov	r0, r3
 8013790:	f000 fa08 	bl	8013ba4 <ip4_addr_isbroadcast_u32>
 8013794:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8013796:	2b00      	cmp	r3, #0
 8013798:	d001      	beq.n	801379e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801379a:	2301      	movs	r3, #1
 801379c:	e000      	b.n	80137a0 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801379e:	2300      	movs	r3, #0
}
 80137a0:	4618      	mov	r0, r3
 80137a2:	3708      	adds	r7, #8
 80137a4:	46bd      	mov	sp, r7
 80137a6:	bd80      	pop	{r7, pc}
 80137a8:	20005634 	.word	0x20005634

080137ac <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80137ac:	b580      	push	{r7, lr}
 80137ae:	b086      	sub	sp, #24
 80137b0:	af00      	add	r7, sp, #0
 80137b2:	6078      	str	r0, [r7, #4]
 80137b4:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80137b6:	687b      	ldr	r3, [r7, #4]
 80137b8:	685b      	ldr	r3, [r3, #4]
 80137ba:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 80137bc:	697b      	ldr	r3, [r7, #20]
 80137be:	781b      	ldrb	r3, [r3, #0]
 80137c0:	091b      	lsrs	r3, r3, #4
 80137c2:	b2db      	uxtb	r3, r3
 80137c4:	2b04      	cmp	r3, #4
 80137c6:	d004      	beq.n	80137d2 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80137c8:	6878      	ldr	r0, [r7, #4]
 80137ca:	f7f8 f895 	bl	800b8f8 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80137ce:	2300      	movs	r3, #0
 80137d0:	e107      	b.n	80139e2 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80137d2:	697b      	ldr	r3, [r7, #20]
 80137d4:	781b      	ldrb	r3, [r3, #0]
 80137d6:	f003 030f 	and.w	r3, r3, #15
 80137da:	b2db      	uxtb	r3, r3
 80137dc:	009b      	lsls	r3, r3, #2
 80137de:	b2db      	uxtb	r3, r3
 80137e0:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80137e2:	697b      	ldr	r3, [r7, #20]
 80137e4:	885b      	ldrh	r3, [r3, #2]
 80137e6:	b29b      	uxth	r3, r3
 80137e8:	4618      	mov	r0, r3
 80137ea:	f7f6 fd27 	bl	800a23c <lwip_htons>
 80137ee:	4603      	mov	r3, r0
 80137f0:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80137f2:	687b      	ldr	r3, [r7, #4]
 80137f4:	891b      	ldrh	r3, [r3, #8]
 80137f6:	89ba      	ldrh	r2, [r7, #12]
 80137f8:	429a      	cmp	r2, r3
 80137fa:	d204      	bcs.n	8013806 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 80137fc:	89bb      	ldrh	r3, [r7, #12]
 80137fe:	4619      	mov	r1, r3
 8013800:	6878      	ldr	r0, [r7, #4]
 8013802:	f7f7 fef3 	bl	800b5ec <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8013806:	687b      	ldr	r3, [r7, #4]
 8013808:	895b      	ldrh	r3, [r3, #10]
 801380a:	89fa      	ldrh	r2, [r7, #14]
 801380c:	429a      	cmp	r2, r3
 801380e:	d807      	bhi.n	8013820 <ip4_input+0x74>
 8013810:	687b      	ldr	r3, [r7, #4]
 8013812:	891b      	ldrh	r3, [r3, #8]
 8013814:	89ba      	ldrh	r2, [r7, #12]
 8013816:	429a      	cmp	r2, r3
 8013818:	d802      	bhi.n	8013820 <ip4_input+0x74>
 801381a:	89fb      	ldrh	r3, [r7, #14]
 801381c:	2b13      	cmp	r3, #19
 801381e:	d804      	bhi.n	801382a <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8013820:	6878      	ldr	r0, [r7, #4]
 8013822:	f7f8 f869 	bl	800b8f8 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8013826:	2300      	movs	r3, #0
 8013828:	e0db      	b.n	80139e2 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801382a:	697b      	ldr	r3, [r7, #20]
 801382c:	691b      	ldr	r3, [r3, #16]
 801382e:	4a6f      	ldr	r2, [pc, #444]	; (80139ec <ip4_input+0x240>)
 8013830:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8013832:	697b      	ldr	r3, [r7, #20]
 8013834:	68db      	ldr	r3, [r3, #12]
 8013836:	4a6d      	ldr	r2, [pc, #436]	; (80139ec <ip4_input+0x240>)
 8013838:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801383a:	4b6c      	ldr	r3, [pc, #432]	; (80139ec <ip4_input+0x240>)
 801383c:	695b      	ldr	r3, [r3, #20]
 801383e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013842:	2be0      	cmp	r3, #224	; 0xe0
 8013844:	d112      	bne.n	801386c <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8013846:	683b      	ldr	r3, [r7, #0]
 8013848:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801384c:	f003 0301 	and.w	r3, r3, #1
 8013850:	b2db      	uxtb	r3, r3
 8013852:	2b00      	cmp	r3, #0
 8013854:	d007      	beq.n	8013866 <ip4_input+0xba>
 8013856:	683b      	ldr	r3, [r7, #0]
 8013858:	3304      	adds	r3, #4
 801385a:	681b      	ldr	r3, [r3, #0]
 801385c:	2b00      	cmp	r3, #0
 801385e:	d002      	beq.n	8013866 <ip4_input+0xba>
      netif = inp;
 8013860:	683b      	ldr	r3, [r7, #0]
 8013862:	613b      	str	r3, [r7, #16]
 8013864:	e02a      	b.n	80138bc <ip4_input+0x110>
    } else {
      netif = NULL;
 8013866:	2300      	movs	r3, #0
 8013868:	613b      	str	r3, [r7, #16]
 801386a:	e027      	b.n	80138bc <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801386c:	6838      	ldr	r0, [r7, #0]
 801386e:	f7ff ff73 	bl	8013758 <ip4_input_accept>
 8013872:	4603      	mov	r3, r0
 8013874:	2b00      	cmp	r3, #0
 8013876:	d002      	beq.n	801387e <ip4_input+0xd2>
      netif = inp;
 8013878:	683b      	ldr	r3, [r7, #0]
 801387a:	613b      	str	r3, [r7, #16]
 801387c:	e01e      	b.n	80138bc <ip4_input+0x110>
    } else {
      netif = NULL;
 801387e:	2300      	movs	r3, #0
 8013880:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8013882:	4b5a      	ldr	r3, [pc, #360]	; (80139ec <ip4_input+0x240>)
 8013884:	695b      	ldr	r3, [r3, #20]
 8013886:	b2db      	uxtb	r3, r3
 8013888:	2b7f      	cmp	r3, #127	; 0x7f
 801388a:	d017      	beq.n	80138bc <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801388c:	4b58      	ldr	r3, [pc, #352]	; (80139f0 <ip4_input+0x244>)
 801388e:	681b      	ldr	r3, [r3, #0]
 8013890:	613b      	str	r3, [r7, #16]
 8013892:	e00e      	b.n	80138b2 <ip4_input+0x106>
          if (netif == inp) {
 8013894:	693a      	ldr	r2, [r7, #16]
 8013896:	683b      	ldr	r3, [r7, #0]
 8013898:	429a      	cmp	r2, r3
 801389a:	d006      	beq.n	80138aa <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801389c:	6938      	ldr	r0, [r7, #16]
 801389e:	f7ff ff5b 	bl	8013758 <ip4_input_accept>
 80138a2:	4603      	mov	r3, r0
 80138a4:	2b00      	cmp	r3, #0
 80138a6:	d108      	bne.n	80138ba <ip4_input+0x10e>
 80138a8:	e000      	b.n	80138ac <ip4_input+0x100>
            continue;
 80138aa:	bf00      	nop
        NETIF_FOREACH(netif) {
 80138ac:	693b      	ldr	r3, [r7, #16]
 80138ae:	681b      	ldr	r3, [r3, #0]
 80138b0:	613b      	str	r3, [r7, #16]
 80138b2:	693b      	ldr	r3, [r7, #16]
 80138b4:	2b00      	cmp	r3, #0
 80138b6:	d1ed      	bne.n	8013894 <ip4_input+0xe8>
 80138b8:	e000      	b.n	80138bc <ip4_input+0x110>
            break;
 80138ba:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80138bc:	4b4b      	ldr	r3, [pc, #300]	; (80139ec <ip4_input+0x240>)
 80138be:	691b      	ldr	r3, [r3, #16]
 80138c0:	6839      	ldr	r1, [r7, #0]
 80138c2:	4618      	mov	r0, r3
 80138c4:	f000 f96e 	bl	8013ba4 <ip4_addr_isbroadcast_u32>
 80138c8:	4603      	mov	r3, r0
 80138ca:	2b00      	cmp	r3, #0
 80138cc:	d105      	bne.n	80138da <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80138ce:	4b47      	ldr	r3, [pc, #284]	; (80139ec <ip4_input+0x240>)
 80138d0:	691b      	ldr	r3, [r3, #16]
 80138d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80138d6:	2be0      	cmp	r3, #224	; 0xe0
 80138d8:	d104      	bne.n	80138e4 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80138da:	6878      	ldr	r0, [r7, #4]
 80138dc:	f7f8 f80c 	bl	800b8f8 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80138e0:	2300      	movs	r3, #0
 80138e2:	e07e      	b.n	80139e2 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80138e4:	693b      	ldr	r3, [r7, #16]
 80138e6:	2b00      	cmp	r3, #0
 80138e8:	d104      	bne.n	80138f4 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80138ea:	6878      	ldr	r0, [r7, #4]
 80138ec:	f7f8 f804 	bl	800b8f8 <pbuf_free>
    return ERR_OK;
 80138f0:	2300      	movs	r3, #0
 80138f2:	e076      	b.n	80139e2 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80138f4:	697b      	ldr	r3, [r7, #20]
 80138f6:	88db      	ldrh	r3, [r3, #6]
 80138f8:	b29b      	uxth	r3, r3
 80138fa:	461a      	mov	r2, r3
 80138fc:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8013900:	4013      	ands	r3, r2
 8013902:	2b00      	cmp	r3, #0
 8013904:	d00b      	beq.n	801391e <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8013906:	6878      	ldr	r0, [r7, #4]
 8013908:	f000 fc92 	bl	8014230 <ip4_reass>
 801390c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801390e:	687b      	ldr	r3, [r7, #4]
 8013910:	2b00      	cmp	r3, #0
 8013912:	d101      	bne.n	8013918 <ip4_input+0x16c>
      return ERR_OK;
 8013914:	2300      	movs	r3, #0
 8013916:	e064      	b.n	80139e2 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8013918:	687b      	ldr	r3, [r7, #4]
 801391a:	685b      	ldr	r3, [r3, #4]
 801391c:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801391e:	4a33      	ldr	r2, [pc, #204]	; (80139ec <ip4_input+0x240>)
 8013920:	693b      	ldr	r3, [r7, #16]
 8013922:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8013924:	4a31      	ldr	r2, [pc, #196]	; (80139ec <ip4_input+0x240>)
 8013926:	683b      	ldr	r3, [r7, #0]
 8013928:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801392a:	4a30      	ldr	r2, [pc, #192]	; (80139ec <ip4_input+0x240>)
 801392c:	697b      	ldr	r3, [r7, #20]
 801392e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8013930:	697b      	ldr	r3, [r7, #20]
 8013932:	781b      	ldrb	r3, [r3, #0]
 8013934:	f003 030f 	and.w	r3, r3, #15
 8013938:	b2db      	uxtb	r3, r3
 801393a:	009b      	lsls	r3, r3, #2
 801393c:	b2db      	uxtb	r3, r3
 801393e:	b29a      	uxth	r2, r3
 8013940:	4b2a      	ldr	r3, [pc, #168]	; (80139ec <ip4_input+0x240>)
 8013942:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8013944:	89fb      	ldrh	r3, [r7, #14]
 8013946:	4619      	mov	r1, r3
 8013948:	6878      	ldr	r0, [r7, #4]
 801394a:	f7f7 ff4f 	bl	800b7ec <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801394e:	697b      	ldr	r3, [r7, #20]
 8013950:	7a5b      	ldrb	r3, [r3, #9]
 8013952:	2b11      	cmp	r3, #17
 8013954:	d006      	beq.n	8013964 <ip4_input+0x1b8>
 8013956:	2b11      	cmp	r3, #17
 8013958:	dc13      	bgt.n	8013982 <ip4_input+0x1d6>
 801395a:	2b01      	cmp	r3, #1
 801395c:	d00c      	beq.n	8013978 <ip4_input+0x1cc>
 801395e:	2b06      	cmp	r3, #6
 8013960:	d005      	beq.n	801396e <ip4_input+0x1c2>
 8013962:	e00e      	b.n	8013982 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8013964:	6839      	ldr	r1, [r7, #0]
 8013966:	6878      	ldr	r0, [r7, #4]
 8013968:	f7fe fc68 	bl	801223c <udp_input>
        break;
 801396c:	e026      	b.n	80139bc <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801396e:	6839      	ldr	r1, [r7, #0]
 8013970:	6878      	ldr	r0, [r7, #4]
 8013972:	f7fa f889 	bl	800da88 <tcp_input>
        break;
 8013976:	e021      	b.n	80139bc <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8013978:	6839      	ldr	r1, [r7, #0]
 801397a:	6878      	ldr	r0, [r7, #4]
 801397c:	f7ff fcee 	bl	801335c <icmp_input>
        break;
 8013980:	e01c      	b.n	80139bc <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8013982:	4b1a      	ldr	r3, [pc, #104]	; (80139ec <ip4_input+0x240>)
 8013984:	695b      	ldr	r3, [r3, #20]
 8013986:	6939      	ldr	r1, [r7, #16]
 8013988:	4618      	mov	r0, r3
 801398a:	f000 f90b 	bl	8013ba4 <ip4_addr_isbroadcast_u32>
 801398e:	4603      	mov	r3, r0
 8013990:	2b00      	cmp	r3, #0
 8013992:	d10f      	bne.n	80139b4 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8013994:	4b15      	ldr	r3, [pc, #84]	; (80139ec <ip4_input+0x240>)
 8013996:	695b      	ldr	r3, [r3, #20]
 8013998:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801399c:	2be0      	cmp	r3, #224	; 0xe0
 801399e:	d009      	beq.n	80139b4 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80139a0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80139a4:	4619      	mov	r1, r3
 80139a6:	6878      	ldr	r0, [r7, #4]
 80139a8:	f7f7 ff93 	bl	800b8d2 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80139ac:	2102      	movs	r1, #2
 80139ae:	6878      	ldr	r0, [r7, #4]
 80139b0:	f7ff fdd8 	bl	8013564 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80139b4:	6878      	ldr	r0, [r7, #4]
 80139b6:	f7f7 ff9f 	bl	800b8f8 <pbuf_free>
        break;
 80139ba:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80139bc:	4b0b      	ldr	r3, [pc, #44]	; (80139ec <ip4_input+0x240>)
 80139be:	2200      	movs	r2, #0
 80139c0:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80139c2:	4b0a      	ldr	r3, [pc, #40]	; (80139ec <ip4_input+0x240>)
 80139c4:	2200      	movs	r2, #0
 80139c6:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80139c8:	4b08      	ldr	r3, [pc, #32]	; (80139ec <ip4_input+0x240>)
 80139ca:	2200      	movs	r2, #0
 80139cc:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80139ce:	4b07      	ldr	r3, [pc, #28]	; (80139ec <ip4_input+0x240>)
 80139d0:	2200      	movs	r2, #0
 80139d2:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80139d4:	4b05      	ldr	r3, [pc, #20]	; (80139ec <ip4_input+0x240>)
 80139d6:	2200      	movs	r2, #0
 80139d8:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80139da:	4b04      	ldr	r3, [pc, #16]	; (80139ec <ip4_input+0x240>)
 80139dc:	2200      	movs	r2, #0
 80139de:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80139e0:	2300      	movs	r3, #0
}
 80139e2:	4618      	mov	r0, r3
 80139e4:	3718      	adds	r7, #24
 80139e6:	46bd      	mov	sp, r7
 80139e8:	bd80      	pop	{r7, pc}
 80139ea:	bf00      	nop
 80139ec:	20005634 	.word	0x20005634
 80139f0:	20008b98 	.word	0x20008b98

080139f4 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80139f4:	b580      	push	{r7, lr}
 80139f6:	b08a      	sub	sp, #40	; 0x28
 80139f8:	af04      	add	r7, sp, #16
 80139fa:	60f8      	str	r0, [r7, #12]
 80139fc:	60b9      	str	r1, [r7, #8]
 80139fe:	607a      	str	r2, [r7, #4]
 8013a00:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8013a02:	68bb      	ldr	r3, [r7, #8]
 8013a04:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8013a06:	687b      	ldr	r3, [r7, #4]
 8013a08:	2b00      	cmp	r3, #0
 8013a0a:	d009      	beq.n	8013a20 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8013a0c:	68bb      	ldr	r3, [r7, #8]
 8013a0e:	2b00      	cmp	r3, #0
 8013a10:	d003      	beq.n	8013a1a <ip4_output_if+0x26>
 8013a12:	68bb      	ldr	r3, [r7, #8]
 8013a14:	681b      	ldr	r3, [r3, #0]
 8013a16:	2b00      	cmp	r3, #0
 8013a18:	d102      	bne.n	8013a20 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8013a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a1c:	3304      	adds	r3, #4
 8013a1e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8013a20:	78fa      	ldrb	r2, [r7, #3]
 8013a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a24:	9302      	str	r3, [sp, #8]
 8013a26:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8013a2a:	9301      	str	r3, [sp, #4]
 8013a2c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8013a30:	9300      	str	r3, [sp, #0]
 8013a32:	4613      	mov	r3, r2
 8013a34:	687a      	ldr	r2, [r7, #4]
 8013a36:	6979      	ldr	r1, [r7, #20]
 8013a38:	68f8      	ldr	r0, [r7, #12]
 8013a3a:	f000 f805 	bl	8013a48 <ip4_output_if_src>
 8013a3e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8013a40:	4618      	mov	r0, r3
 8013a42:	3718      	adds	r7, #24
 8013a44:	46bd      	mov	sp, r7
 8013a46:	bd80      	pop	{r7, pc}

08013a48 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8013a48:	b580      	push	{r7, lr}
 8013a4a:	b088      	sub	sp, #32
 8013a4c:	af00      	add	r7, sp, #0
 8013a4e:	60f8      	str	r0, [r7, #12]
 8013a50:	60b9      	str	r1, [r7, #8]
 8013a52:	607a      	str	r2, [r7, #4]
 8013a54:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8013a56:	68fb      	ldr	r3, [r7, #12]
 8013a58:	7b9b      	ldrb	r3, [r3, #14]
 8013a5a:	2b01      	cmp	r3, #1
 8013a5c:	d006      	beq.n	8013a6c <ip4_output_if_src+0x24>
 8013a5e:	4b4b      	ldr	r3, [pc, #300]	; (8013b8c <ip4_output_if_src+0x144>)
 8013a60:	f44f 7255 	mov.w	r2, #852	; 0x354
 8013a64:	494a      	ldr	r1, [pc, #296]	; (8013b90 <ip4_output_if_src+0x148>)
 8013a66:	484b      	ldr	r0, [pc, #300]	; (8013b94 <ip4_output_if_src+0x14c>)
 8013a68:	f001 f856 	bl	8014b18 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8013a6c:	687b      	ldr	r3, [r7, #4]
 8013a6e:	2b00      	cmp	r3, #0
 8013a70:	d060      	beq.n	8013b34 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8013a72:	2314      	movs	r3, #20
 8013a74:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8013a76:	2114      	movs	r1, #20
 8013a78:	68f8      	ldr	r0, [r7, #12]
 8013a7a:	f7f7 fea7 	bl	800b7cc <pbuf_add_header>
 8013a7e:	4603      	mov	r3, r0
 8013a80:	2b00      	cmp	r3, #0
 8013a82:	d002      	beq.n	8013a8a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8013a84:	f06f 0301 	mvn.w	r3, #1
 8013a88:	e07c      	b.n	8013b84 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8013a8a:	68fb      	ldr	r3, [r7, #12]
 8013a8c:	685b      	ldr	r3, [r3, #4]
 8013a8e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8013a90:	68fb      	ldr	r3, [r7, #12]
 8013a92:	895b      	ldrh	r3, [r3, #10]
 8013a94:	2b13      	cmp	r3, #19
 8013a96:	d806      	bhi.n	8013aa6 <ip4_output_if_src+0x5e>
 8013a98:	4b3c      	ldr	r3, [pc, #240]	; (8013b8c <ip4_output_if_src+0x144>)
 8013a9a:	f44f 7262 	mov.w	r2, #904	; 0x388
 8013a9e:	493e      	ldr	r1, [pc, #248]	; (8013b98 <ip4_output_if_src+0x150>)
 8013aa0:	483c      	ldr	r0, [pc, #240]	; (8013b94 <ip4_output_if_src+0x14c>)
 8013aa2:	f001 f839 	bl	8014b18 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8013aa6:	69fb      	ldr	r3, [r7, #28]
 8013aa8:	78fa      	ldrb	r2, [r7, #3]
 8013aaa:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8013aac:	69fb      	ldr	r3, [r7, #28]
 8013aae:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8013ab2:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8013ab4:	687b      	ldr	r3, [r7, #4]
 8013ab6:	681a      	ldr	r2, [r3, #0]
 8013ab8:	69fb      	ldr	r3, [r7, #28]
 8013aba:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8013abc:	8b7b      	ldrh	r3, [r7, #26]
 8013abe:	089b      	lsrs	r3, r3, #2
 8013ac0:	b29b      	uxth	r3, r3
 8013ac2:	b2db      	uxtb	r3, r3
 8013ac4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013ac8:	b2da      	uxtb	r2, r3
 8013aca:	69fb      	ldr	r3, [r7, #28]
 8013acc:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8013ace:	69fb      	ldr	r3, [r7, #28]
 8013ad0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8013ad4:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8013ad6:	68fb      	ldr	r3, [r7, #12]
 8013ad8:	891b      	ldrh	r3, [r3, #8]
 8013ada:	4618      	mov	r0, r3
 8013adc:	f7f6 fbae 	bl	800a23c <lwip_htons>
 8013ae0:	4603      	mov	r3, r0
 8013ae2:	461a      	mov	r2, r3
 8013ae4:	69fb      	ldr	r3, [r7, #28]
 8013ae6:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8013ae8:	69fb      	ldr	r3, [r7, #28]
 8013aea:	2200      	movs	r2, #0
 8013aec:	719a      	strb	r2, [r3, #6]
 8013aee:	2200      	movs	r2, #0
 8013af0:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8013af2:	4b2a      	ldr	r3, [pc, #168]	; (8013b9c <ip4_output_if_src+0x154>)
 8013af4:	881b      	ldrh	r3, [r3, #0]
 8013af6:	4618      	mov	r0, r3
 8013af8:	f7f6 fba0 	bl	800a23c <lwip_htons>
 8013afc:	4603      	mov	r3, r0
 8013afe:	461a      	mov	r2, r3
 8013b00:	69fb      	ldr	r3, [r7, #28]
 8013b02:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8013b04:	4b25      	ldr	r3, [pc, #148]	; (8013b9c <ip4_output_if_src+0x154>)
 8013b06:	881b      	ldrh	r3, [r3, #0]
 8013b08:	3301      	adds	r3, #1
 8013b0a:	b29a      	uxth	r2, r3
 8013b0c:	4b23      	ldr	r3, [pc, #140]	; (8013b9c <ip4_output_if_src+0x154>)
 8013b0e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8013b10:	68bb      	ldr	r3, [r7, #8]
 8013b12:	2b00      	cmp	r3, #0
 8013b14:	d104      	bne.n	8013b20 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8013b16:	4b22      	ldr	r3, [pc, #136]	; (8013ba0 <ip4_output_if_src+0x158>)
 8013b18:	681a      	ldr	r2, [r3, #0]
 8013b1a:	69fb      	ldr	r3, [r7, #28]
 8013b1c:	60da      	str	r2, [r3, #12]
 8013b1e:	e003      	b.n	8013b28 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8013b20:	68bb      	ldr	r3, [r7, #8]
 8013b22:	681a      	ldr	r2, [r3, #0]
 8013b24:	69fb      	ldr	r3, [r7, #28]
 8013b26:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8013b28:	69fb      	ldr	r3, [r7, #28]
 8013b2a:	2200      	movs	r2, #0
 8013b2c:	729a      	strb	r2, [r3, #10]
 8013b2e:	2200      	movs	r2, #0
 8013b30:	72da      	strb	r2, [r3, #11]
 8013b32:	e00f      	b.n	8013b54 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8013b34:	68fb      	ldr	r3, [r7, #12]
 8013b36:	895b      	ldrh	r3, [r3, #10]
 8013b38:	2b13      	cmp	r3, #19
 8013b3a:	d802      	bhi.n	8013b42 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8013b3c:	f06f 0301 	mvn.w	r3, #1
 8013b40:	e020      	b.n	8013b84 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8013b42:	68fb      	ldr	r3, [r7, #12]
 8013b44:	685b      	ldr	r3, [r3, #4]
 8013b46:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8013b48:	69fb      	ldr	r3, [r7, #28]
 8013b4a:	691b      	ldr	r3, [r3, #16]
 8013b4c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8013b4e:	f107 0314 	add.w	r3, r7, #20
 8013b52:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8013b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b56:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8013b58:	2b00      	cmp	r3, #0
 8013b5a:	d00c      	beq.n	8013b76 <ip4_output_if_src+0x12e>
 8013b5c:	68fb      	ldr	r3, [r7, #12]
 8013b5e:	891a      	ldrh	r2, [r3, #8]
 8013b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b62:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8013b64:	429a      	cmp	r2, r3
 8013b66:	d906      	bls.n	8013b76 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8013b68:	687a      	ldr	r2, [r7, #4]
 8013b6a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013b6c:	68f8      	ldr	r0, [r7, #12]
 8013b6e:	f000 fd53 	bl	8014618 <ip4_frag>
 8013b72:	4603      	mov	r3, r0
 8013b74:	e006      	b.n	8013b84 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8013b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b78:	695b      	ldr	r3, [r3, #20]
 8013b7a:	687a      	ldr	r2, [r7, #4]
 8013b7c:	68f9      	ldr	r1, [r7, #12]
 8013b7e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013b80:	4798      	blx	r3
 8013b82:	4603      	mov	r3, r0
}
 8013b84:	4618      	mov	r0, r3
 8013b86:	3720      	adds	r7, #32
 8013b88:	46bd      	mov	sp, r7
 8013b8a:	bd80      	pop	{r7, pc}
 8013b8c:	080187b0 	.word	0x080187b0
 8013b90:	080187e4 	.word	0x080187e4
 8013b94:	080187f0 	.word	0x080187f0
 8013b98:	08018818 	.word	0x08018818
 8013b9c:	20008cf6 	.word	0x20008cf6
 8013ba0:	0801ab2c 	.word	0x0801ab2c

08013ba4 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8013ba4:	b480      	push	{r7}
 8013ba6:	b085      	sub	sp, #20
 8013ba8:	af00      	add	r7, sp, #0
 8013baa:	6078      	str	r0, [r7, #4]
 8013bac:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8013bae:	687b      	ldr	r3, [r7, #4]
 8013bb0:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8013bb2:	687b      	ldr	r3, [r7, #4]
 8013bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013bb8:	d002      	beq.n	8013bc0 <ip4_addr_isbroadcast_u32+0x1c>
 8013bba:	687b      	ldr	r3, [r7, #4]
 8013bbc:	2b00      	cmp	r3, #0
 8013bbe:	d101      	bne.n	8013bc4 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8013bc0:	2301      	movs	r3, #1
 8013bc2:	e02a      	b.n	8013c1a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8013bc4:	683b      	ldr	r3, [r7, #0]
 8013bc6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013bca:	f003 0302 	and.w	r3, r3, #2
 8013bce:	2b00      	cmp	r3, #0
 8013bd0:	d101      	bne.n	8013bd6 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8013bd2:	2300      	movs	r3, #0
 8013bd4:	e021      	b.n	8013c1a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8013bd6:	683b      	ldr	r3, [r7, #0]
 8013bd8:	3304      	adds	r3, #4
 8013bda:	681b      	ldr	r3, [r3, #0]
 8013bdc:	687a      	ldr	r2, [r7, #4]
 8013bde:	429a      	cmp	r2, r3
 8013be0:	d101      	bne.n	8013be6 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8013be2:	2300      	movs	r3, #0
 8013be4:	e019      	b.n	8013c1a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8013be6:	68fa      	ldr	r2, [r7, #12]
 8013be8:	683b      	ldr	r3, [r7, #0]
 8013bea:	3304      	adds	r3, #4
 8013bec:	681b      	ldr	r3, [r3, #0]
 8013bee:	405a      	eors	r2, r3
 8013bf0:	683b      	ldr	r3, [r7, #0]
 8013bf2:	3308      	adds	r3, #8
 8013bf4:	681b      	ldr	r3, [r3, #0]
 8013bf6:	4013      	ands	r3, r2
 8013bf8:	2b00      	cmp	r3, #0
 8013bfa:	d10d      	bne.n	8013c18 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8013bfc:	683b      	ldr	r3, [r7, #0]
 8013bfe:	3308      	adds	r3, #8
 8013c00:	681b      	ldr	r3, [r3, #0]
 8013c02:	43da      	mvns	r2, r3
 8013c04:	687b      	ldr	r3, [r7, #4]
 8013c06:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8013c08:	683b      	ldr	r3, [r7, #0]
 8013c0a:	3308      	adds	r3, #8
 8013c0c:	681b      	ldr	r3, [r3, #0]
 8013c0e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8013c10:	429a      	cmp	r2, r3
 8013c12:	d101      	bne.n	8013c18 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8013c14:	2301      	movs	r3, #1
 8013c16:	e000      	b.n	8013c1a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8013c18:	2300      	movs	r3, #0
  }
}
 8013c1a:	4618      	mov	r0, r3
 8013c1c:	3714      	adds	r7, #20
 8013c1e:	46bd      	mov	sp, r7
 8013c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c24:	4770      	bx	lr
	...

08013c28 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8013c28:	b580      	push	{r7, lr}
 8013c2a:	b084      	sub	sp, #16
 8013c2c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8013c2e:	2300      	movs	r3, #0
 8013c30:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8013c32:	4b12      	ldr	r3, [pc, #72]	; (8013c7c <ip_reass_tmr+0x54>)
 8013c34:	681b      	ldr	r3, [r3, #0]
 8013c36:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8013c38:	e018      	b.n	8013c6c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8013c3a:	68fb      	ldr	r3, [r7, #12]
 8013c3c:	7fdb      	ldrb	r3, [r3, #31]
 8013c3e:	2b00      	cmp	r3, #0
 8013c40:	d00b      	beq.n	8013c5a <ip_reass_tmr+0x32>
      r->timer--;
 8013c42:	68fb      	ldr	r3, [r7, #12]
 8013c44:	7fdb      	ldrb	r3, [r3, #31]
 8013c46:	3b01      	subs	r3, #1
 8013c48:	b2da      	uxtb	r2, r3
 8013c4a:	68fb      	ldr	r3, [r7, #12]
 8013c4c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8013c4e:	68fb      	ldr	r3, [r7, #12]
 8013c50:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8013c52:	68fb      	ldr	r3, [r7, #12]
 8013c54:	681b      	ldr	r3, [r3, #0]
 8013c56:	60fb      	str	r3, [r7, #12]
 8013c58:	e008      	b.n	8013c6c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8013c5a:	68fb      	ldr	r3, [r7, #12]
 8013c5c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8013c5e:	68fb      	ldr	r3, [r7, #12]
 8013c60:	681b      	ldr	r3, [r3, #0]
 8013c62:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8013c64:	68b9      	ldr	r1, [r7, #8]
 8013c66:	6878      	ldr	r0, [r7, #4]
 8013c68:	f000 f80a 	bl	8013c80 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8013c6c:	68fb      	ldr	r3, [r7, #12]
 8013c6e:	2b00      	cmp	r3, #0
 8013c70:	d1e3      	bne.n	8013c3a <ip_reass_tmr+0x12>
    }
  }
}
 8013c72:	bf00      	nop
 8013c74:	bf00      	nop
 8013c76:	3710      	adds	r7, #16
 8013c78:	46bd      	mov	sp, r7
 8013c7a:	bd80      	pop	{r7, pc}
 8013c7c:	20008cf8 	.word	0x20008cf8

08013c80 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8013c80:	b580      	push	{r7, lr}
 8013c82:	b088      	sub	sp, #32
 8013c84:	af00      	add	r7, sp, #0
 8013c86:	6078      	str	r0, [r7, #4]
 8013c88:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8013c8a:	2300      	movs	r3, #0
 8013c8c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8013c8e:	683a      	ldr	r2, [r7, #0]
 8013c90:	687b      	ldr	r3, [r7, #4]
 8013c92:	429a      	cmp	r2, r3
 8013c94:	d105      	bne.n	8013ca2 <ip_reass_free_complete_datagram+0x22>
 8013c96:	4b45      	ldr	r3, [pc, #276]	; (8013dac <ip_reass_free_complete_datagram+0x12c>)
 8013c98:	22ab      	movs	r2, #171	; 0xab
 8013c9a:	4945      	ldr	r1, [pc, #276]	; (8013db0 <ip_reass_free_complete_datagram+0x130>)
 8013c9c:	4845      	ldr	r0, [pc, #276]	; (8013db4 <ip_reass_free_complete_datagram+0x134>)
 8013c9e:	f000 ff3b 	bl	8014b18 <iprintf>
  if (prev != NULL) {
 8013ca2:	683b      	ldr	r3, [r7, #0]
 8013ca4:	2b00      	cmp	r3, #0
 8013ca6:	d00a      	beq.n	8013cbe <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8013ca8:	683b      	ldr	r3, [r7, #0]
 8013caa:	681b      	ldr	r3, [r3, #0]
 8013cac:	687a      	ldr	r2, [r7, #4]
 8013cae:	429a      	cmp	r2, r3
 8013cb0:	d005      	beq.n	8013cbe <ip_reass_free_complete_datagram+0x3e>
 8013cb2:	4b3e      	ldr	r3, [pc, #248]	; (8013dac <ip_reass_free_complete_datagram+0x12c>)
 8013cb4:	22ad      	movs	r2, #173	; 0xad
 8013cb6:	4940      	ldr	r1, [pc, #256]	; (8013db8 <ip_reass_free_complete_datagram+0x138>)
 8013cb8:	483e      	ldr	r0, [pc, #248]	; (8013db4 <ip_reass_free_complete_datagram+0x134>)
 8013cba:	f000 ff2d 	bl	8014b18 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8013cbe:	687b      	ldr	r3, [r7, #4]
 8013cc0:	685b      	ldr	r3, [r3, #4]
 8013cc2:	685b      	ldr	r3, [r3, #4]
 8013cc4:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8013cc6:	697b      	ldr	r3, [r7, #20]
 8013cc8:	889b      	ldrh	r3, [r3, #4]
 8013cca:	b29b      	uxth	r3, r3
 8013ccc:	2b00      	cmp	r3, #0
 8013cce:	d12a      	bne.n	8013d26 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8013cd0:	687b      	ldr	r3, [r7, #4]
 8013cd2:	685b      	ldr	r3, [r3, #4]
 8013cd4:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8013cd6:	697b      	ldr	r3, [r7, #20]
 8013cd8:	681a      	ldr	r2, [r3, #0]
 8013cda:	687b      	ldr	r3, [r7, #4]
 8013cdc:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8013cde:	69bb      	ldr	r3, [r7, #24]
 8013ce0:	6858      	ldr	r0, [r3, #4]
 8013ce2:	687b      	ldr	r3, [r7, #4]
 8013ce4:	3308      	adds	r3, #8
 8013ce6:	2214      	movs	r2, #20
 8013ce8:	4619      	mov	r1, r3
 8013cea:	f000 fee5 	bl	8014ab8 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8013cee:	2101      	movs	r1, #1
 8013cf0:	69b8      	ldr	r0, [r7, #24]
 8013cf2:	f7ff fc47 	bl	8013584 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8013cf6:	69b8      	ldr	r0, [r7, #24]
 8013cf8:	f7f7 fe86 	bl	800ba08 <pbuf_clen>
 8013cfc:	4603      	mov	r3, r0
 8013cfe:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8013d00:	8bfa      	ldrh	r2, [r7, #30]
 8013d02:	8a7b      	ldrh	r3, [r7, #18]
 8013d04:	4413      	add	r3, r2
 8013d06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013d0a:	db05      	blt.n	8013d18 <ip_reass_free_complete_datagram+0x98>
 8013d0c:	4b27      	ldr	r3, [pc, #156]	; (8013dac <ip_reass_free_complete_datagram+0x12c>)
 8013d0e:	22bc      	movs	r2, #188	; 0xbc
 8013d10:	492a      	ldr	r1, [pc, #168]	; (8013dbc <ip_reass_free_complete_datagram+0x13c>)
 8013d12:	4828      	ldr	r0, [pc, #160]	; (8013db4 <ip_reass_free_complete_datagram+0x134>)
 8013d14:	f000 ff00 	bl	8014b18 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8013d18:	8bfa      	ldrh	r2, [r7, #30]
 8013d1a:	8a7b      	ldrh	r3, [r7, #18]
 8013d1c:	4413      	add	r3, r2
 8013d1e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8013d20:	69b8      	ldr	r0, [r7, #24]
 8013d22:	f7f7 fde9 	bl	800b8f8 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8013d26:	687b      	ldr	r3, [r7, #4]
 8013d28:	685b      	ldr	r3, [r3, #4]
 8013d2a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8013d2c:	e01f      	b.n	8013d6e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8013d2e:	69bb      	ldr	r3, [r7, #24]
 8013d30:	685b      	ldr	r3, [r3, #4]
 8013d32:	617b      	str	r3, [r7, #20]
    pcur = p;
 8013d34:	69bb      	ldr	r3, [r7, #24]
 8013d36:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8013d38:	697b      	ldr	r3, [r7, #20]
 8013d3a:	681b      	ldr	r3, [r3, #0]
 8013d3c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8013d3e:	68f8      	ldr	r0, [r7, #12]
 8013d40:	f7f7 fe62 	bl	800ba08 <pbuf_clen>
 8013d44:	4603      	mov	r3, r0
 8013d46:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8013d48:	8bfa      	ldrh	r2, [r7, #30]
 8013d4a:	8a7b      	ldrh	r3, [r7, #18]
 8013d4c:	4413      	add	r3, r2
 8013d4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013d52:	db05      	blt.n	8013d60 <ip_reass_free_complete_datagram+0xe0>
 8013d54:	4b15      	ldr	r3, [pc, #84]	; (8013dac <ip_reass_free_complete_datagram+0x12c>)
 8013d56:	22cc      	movs	r2, #204	; 0xcc
 8013d58:	4918      	ldr	r1, [pc, #96]	; (8013dbc <ip_reass_free_complete_datagram+0x13c>)
 8013d5a:	4816      	ldr	r0, [pc, #88]	; (8013db4 <ip_reass_free_complete_datagram+0x134>)
 8013d5c:	f000 fedc 	bl	8014b18 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8013d60:	8bfa      	ldrh	r2, [r7, #30]
 8013d62:	8a7b      	ldrh	r3, [r7, #18]
 8013d64:	4413      	add	r3, r2
 8013d66:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8013d68:	68f8      	ldr	r0, [r7, #12]
 8013d6a:	f7f7 fdc5 	bl	800b8f8 <pbuf_free>
  while (p != NULL) {
 8013d6e:	69bb      	ldr	r3, [r7, #24]
 8013d70:	2b00      	cmp	r3, #0
 8013d72:	d1dc      	bne.n	8013d2e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8013d74:	6839      	ldr	r1, [r7, #0]
 8013d76:	6878      	ldr	r0, [r7, #4]
 8013d78:	f000 f8c2 	bl	8013f00 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8013d7c:	4b10      	ldr	r3, [pc, #64]	; (8013dc0 <ip_reass_free_complete_datagram+0x140>)
 8013d7e:	881b      	ldrh	r3, [r3, #0]
 8013d80:	8bfa      	ldrh	r2, [r7, #30]
 8013d82:	429a      	cmp	r2, r3
 8013d84:	d905      	bls.n	8013d92 <ip_reass_free_complete_datagram+0x112>
 8013d86:	4b09      	ldr	r3, [pc, #36]	; (8013dac <ip_reass_free_complete_datagram+0x12c>)
 8013d88:	22d2      	movs	r2, #210	; 0xd2
 8013d8a:	490e      	ldr	r1, [pc, #56]	; (8013dc4 <ip_reass_free_complete_datagram+0x144>)
 8013d8c:	4809      	ldr	r0, [pc, #36]	; (8013db4 <ip_reass_free_complete_datagram+0x134>)
 8013d8e:	f000 fec3 	bl	8014b18 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8013d92:	4b0b      	ldr	r3, [pc, #44]	; (8013dc0 <ip_reass_free_complete_datagram+0x140>)
 8013d94:	881a      	ldrh	r2, [r3, #0]
 8013d96:	8bfb      	ldrh	r3, [r7, #30]
 8013d98:	1ad3      	subs	r3, r2, r3
 8013d9a:	b29a      	uxth	r2, r3
 8013d9c:	4b08      	ldr	r3, [pc, #32]	; (8013dc0 <ip_reass_free_complete_datagram+0x140>)
 8013d9e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8013da0:	8bfb      	ldrh	r3, [r7, #30]
}
 8013da2:	4618      	mov	r0, r3
 8013da4:	3720      	adds	r7, #32
 8013da6:	46bd      	mov	sp, r7
 8013da8:	bd80      	pop	{r7, pc}
 8013daa:	bf00      	nop
 8013dac:	08018848 	.word	0x08018848
 8013db0:	08018884 	.word	0x08018884
 8013db4:	08018890 	.word	0x08018890
 8013db8:	080188b8 	.word	0x080188b8
 8013dbc:	080188cc 	.word	0x080188cc
 8013dc0:	20008cfc 	.word	0x20008cfc
 8013dc4:	080188ec 	.word	0x080188ec

08013dc8 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8013dc8:	b580      	push	{r7, lr}
 8013dca:	b08a      	sub	sp, #40	; 0x28
 8013dcc:	af00      	add	r7, sp, #0
 8013dce:	6078      	str	r0, [r7, #4]
 8013dd0:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8013dd2:	2300      	movs	r3, #0
 8013dd4:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8013dd6:	2300      	movs	r3, #0
 8013dd8:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8013dda:	2300      	movs	r3, #0
 8013ddc:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8013dde:	2300      	movs	r3, #0
 8013de0:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8013de2:	2300      	movs	r3, #0
 8013de4:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8013de6:	4b28      	ldr	r3, [pc, #160]	; (8013e88 <ip_reass_remove_oldest_datagram+0xc0>)
 8013de8:	681b      	ldr	r3, [r3, #0]
 8013dea:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8013dec:	e030      	b.n	8013e50 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8013dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013df0:	695a      	ldr	r2, [r3, #20]
 8013df2:	687b      	ldr	r3, [r7, #4]
 8013df4:	68db      	ldr	r3, [r3, #12]
 8013df6:	429a      	cmp	r2, r3
 8013df8:	d10c      	bne.n	8013e14 <ip_reass_remove_oldest_datagram+0x4c>
 8013dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013dfc:	699a      	ldr	r2, [r3, #24]
 8013dfe:	687b      	ldr	r3, [r7, #4]
 8013e00:	691b      	ldr	r3, [r3, #16]
 8013e02:	429a      	cmp	r2, r3
 8013e04:	d106      	bne.n	8013e14 <ip_reass_remove_oldest_datagram+0x4c>
 8013e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e08:	899a      	ldrh	r2, [r3, #12]
 8013e0a:	687b      	ldr	r3, [r7, #4]
 8013e0c:	889b      	ldrh	r3, [r3, #4]
 8013e0e:	b29b      	uxth	r3, r3
 8013e10:	429a      	cmp	r2, r3
 8013e12:	d014      	beq.n	8013e3e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8013e14:	693b      	ldr	r3, [r7, #16]
 8013e16:	3301      	adds	r3, #1
 8013e18:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8013e1a:	6a3b      	ldr	r3, [r7, #32]
 8013e1c:	2b00      	cmp	r3, #0
 8013e1e:	d104      	bne.n	8013e2a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8013e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e22:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8013e24:	69fb      	ldr	r3, [r7, #28]
 8013e26:	61bb      	str	r3, [r7, #24]
 8013e28:	e009      	b.n	8013e3e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8013e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e2c:	7fda      	ldrb	r2, [r3, #31]
 8013e2e:	6a3b      	ldr	r3, [r7, #32]
 8013e30:	7fdb      	ldrb	r3, [r3, #31]
 8013e32:	429a      	cmp	r2, r3
 8013e34:	d803      	bhi.n	8013e3e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8013e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e38:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8013e3a:	69fb      	ldr	r3, [r7, #28]
 8013e3c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8013e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e40:	681b      	ldr	r3, [r3, #0]
 8013e42:	2b00      	cmp	r3, #0
 8013e44:	d001      	beq.n	8013e4a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8013e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e48:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8013e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e4c:	681b      	ldr	r3, [r3, #0]
 8013e4e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8013e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e52:	2b00      	cmp	r3, #0
 8013e54:	d1cb      	bne.n	8013dee <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8013e56:	6a3b      	ldr	r3, [r7, #32]
 8013e58:	2b00      	cmp	r3, #0
 8013e5a:	d008      	beq.n	8013e6e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8013e5c:	69b9      	ldr	r1, [r7, #24]
 8013e5e:	6a38      	ldr	r0, [r7, #32]
 8013e60:	f7ff ff0e 	bl	8013c80 <ip_reass_free_complete_datagram>
 8013e64:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8013e66:	697a      	ldr	r2, [r7, #20]
 8013e68:	68fb      	ldr	r3, [r7, #12]
 8013e6a:	4413      	add	r3, r2
 8013e6c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8013e6e:	697a      	ldr	r2, [r7, #20]
 8013e70:	683b      	ldr	r3, [r7, #0]
 8013e72:	429a      	cmp	r2, r3
 8013e74:	da02      	bge.n	8013e7c <ip_reass_remove_oldest_datagram+0xb4>
 8013e76:	693b      	ldr	r3, [r7, #16]
 8013e78:	2b01      	cmp	r3, #1
 8013e7a:	dcac      	bgt.n	8013dd6 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8013e7c:	697b      	ldr	r3, [r7, #20]
}
 8013e7e:	4618      	mov	r0, r3
 8013e80:	3728      	adds	r7, #40	; 0x28
 8013e82:	46bd      	mov	sp, r7
 8013e84:	bd80      	pop	{r7, pc}
 8013e86:	bf00      	nop
 8013e88:	20008cf8 	.word	0x20008cf8

08013e8c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8013e8c:	b580      	push	{r7, lr}
 8013e8e:	b084      	sub	sp, #16
 8013e90:	af00      	add	r7, sp, #0
 8013e92:	6078      	str	r0, [r7, #4]
 8013e94:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8013e96:	2004      	movs	r0, #4
 8013e98:	f7f6 fe48 	bl	800ab2c <memp_malloc>
 8013e9c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8013e9e:	68fb      	ldr	r3, [r7, #12]
 8013ea0:	2b00      	cmp	r3, #0
 8013ea2:	d110      	bne.n	8013ec6 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8013ea4:	6839      	ldr	r1, [r7, #0]
 8013ea6:	6878      	ldr	r0, [r7, #4]
 8013ea8:	f7ff ff8e 	bl	8013dc8 <ip_reass_remove_oldest_datagram>
 8013eac:	4602      	mov	r2, r0
 8013eae:	683b      	ldr	r3, [r7, #0]
 8013eb0:	4293      	cmp	r3, r2
 8013eb2:	dc03      	bgt.n	8013ebc <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8013eb4:	2004      	movs	r0, #4
 8013eb6:	f7f6 fe39 	bl	800ab2c <memp_malloc>
 8013eba:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8013ebc:	68fb      	ldr	r3, [r7, #12]
 8013ebe:	2b00      	cmp	r3, #0
 8013ec0:	d101      	bne.n	8013ec6 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8013ec2:	2300      	movs	r3, #0
 8013ec4:	e016      	b.n	8013ef4 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8013ec6:	2220      	movs	r2, #32
 8013ec8:	2100      	movs	r1, #0
 8013eca:	68f8      	ldr	r0, [r7, #12]
 8013ecc:	f000 fe1c 	bl	8014b08 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8013ed0:	68fb      	ldr	r3, [r7, #12]
 8013ed2:	220f      	movs	r2, #15
 8013ed4:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8013ed6:	4b09      	ldr	r3, [pc, #36]	; (8013efc <ip_reass_enqueue_new_datagram+0x70>)
 8013ed8:	681a      	ldr	r2, [r3, #0]
 8013eda:	68fb      	ldr	r3, [r7, #12]
 8013edc:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8013ede:	4a07      	ldr	r2, [pc, #28]	; (8013efc <ip_reass_enqueue_new_datagram+0x70>)
 8013ee0:	68fb      	ldr	r3, [r7, #12]
 8013ee2:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8013ee4:	68fb      	ldr	r3, [r7, #12]
 8013ee6:	3308      	adds	r3, #8
 8013ee8:	2214      	movs	r2, #20
 8013eea:	6879      	ldr	r1, [r7, #4]
 8013eec:	4618      	mov	r0, r3
 8013eee:	f000 fde3 	bl	8014ab8 <memcpy>
  return ipr;
 8013ef2:	68fb      	ldr	r3, [r7, #12]
}
 8013ef4:	4618      	mov	r0, r3
 8013ef6:	3710      	adds	r7, #16
 8013ef8:	46bd      	mov	sp, r7
 8013efa:	bd80      	pop	{r7, pc}
 8013efc:	20008cf8 	.word	0x20008cf8

08013f00 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8013f00:	b580      	push	{r7, lr}
 8013f02:	b082      	sub	sp, #8
 8013f04:	af00      	add	r7, sp, #0
 8013f06:	6078      	str	r0, [r7, #4]
 8013f08:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8013f0a:	4b10      	ldr	r3, [pc, #64]	; (8013f4c <ip_reass_dequeue_datagram+0x4c>)
 8013f0c:	681b      	ldr	r3, [r3, #0]
 8013f0e:	687a      	ldr	r2, [r7, #4]
 8013f10:	429a      	cmp	r2, r3
 8013f12:	d104      	bne.n	8013f1e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8013f14:	687b      	ldr	r3, [r7, #4]
 8013f16:	681b      	ldr	r3, [r3, #0]
 8013f18:	4a0c      	ldr	r2, [pc, #48]	; (8013f4c <ip_reass_dequeue_datagram+0x4c>)
 8013f1a:	6013      	str	r3, [r2, #0]
 8013f1c:	e00d      	b.n	8013f3a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8013f1e:	683b      	ldr	r3, [r7, #0]
 8013f20:	2b00      	cmp	r3, #0
 8013f22:	d106      	bne.n	8013f32 <ip_reass_dequeue_datagram+0x32>
 8013f24:	4b0a      	ldr	r3, [pc, #40]	; (8013f50 <ip_reass_dequeue_datagram+0x50>)
 8013f26:	f240 1245 	movw	r2, #325	; 0x145
 8013f2a:	490a      	ldr	r1, [pc, #40]	; (8013f54 <ip_reass_dequeue_datagram+0x54>)
 8013f2c:	480a      	ldr	r0, [pc, #40]	; (8013f58 <ip_reass_dequeue_datagram+0x58>)
 8013f2e:	f000 fdf3 	bl	8014b18 <iprintf>
    prev->next = ipr->next;
 8013f32:	687b      	ldr	r3, [r7, #4]
 8013f34:	681a      	ldr	r2, [r3, #0]
 8013f36:	683b      	ldr	r3, [r7, #0]
 8013f38:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8013f3a:	6879      	ldr	r1, [r7, #4]
 8013f3c:	2004      	movs	r0, #4
 8013f3e:	f7f6 fe65 	bl	800ac0c <memp_free>
}
 8013f42:	bf00      	nop
 8013f44:	3708      	adds	r7, #8
 8013f46:	46bd      	mov	sp, r7
 8013f48:	bd80      	pop	{r7, pc}
 8013f4a:	bf00      	nop
 8013f4c:	20008cf8 	.word	0x20008cf8
 8013f50:	08018848 	.word	0x08018848
 8013f54:	08018910 	.word	0x08018910
 8013f58:	08018890 	.word	0x08018890

08013f5c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8013f5c:	b580      	push	{r7, lr}
 8013f5e:	b08c      	sub	sp, #48	; 0x30
 8013f60:	af00      	add	r7, sp, #0
 8013f62:	60f8      	str	r0, [r7, #12]
 8013f64:	60b9      	str	r1, [r7, #8]
 8013f66:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8013f68:	2300      	movs	r3, #0
 8013f6a:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8013f6c:	2301      	movs	r3, #1
 8013f6e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8013f70:	68bb      	ldr	r3, [r7, #8]
 8013f72:	685b      	ldr	r3, [r3, #4]
 8013f74:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8013f76:	69fb      	ldr	r3, [r7, #28]
 8013f78:	885b      	ldrh	r3, [r3, #2]
 8013f7a:	b29b      	uxth	r3, r3
 8013f7c:	4618      	mov	r0, r3
 8013f7e:	f7f6 f95d 	bl	800a23c <lwip_htons>
 8013f82:	4603      	mov	r3, r0
 8013f84:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8013f86:	69fb      	ldr	r3, [r7, #28]
 8013f88:	781b      	ldrb	r3, [r3, #0]
 8013f8a:	f003 030f 	and.w	r3, r3, #15
 8013f8e:	b2db      	uxtb	r3, r3
 8013f90:	009b      	lsls	r3, r3, #2
 8013f92:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8013f94:	7e7b      	ldrb	r3, [r7, #25]
 8013f96:	b29b      	uxth	r3, r3
 8013f98:	8b7a      	ldrh	r2, [r7, #26]
 8013f9a:	429a      	cmp	r2, r3
 8013f9c:	d202      	bcs.n	8013fa4 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013f9e:	f04f 33ff 	mov.w	r3, #4294967295
 8013fa2:	e135      	b.n	8014210 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8013fa4:	7e7b      	ldrb	r3, [r7, #25]
 8013fa6:	b29b      	uxth	r3, r3
 8013fa8:	8b7a      	ldrh	r2, [r7, #26]
 8013faa:	1ad3      	subs	r3, r2, r3
 8013fac:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8013fae:	69fb      	ldr	r3, [r7, #28]
 8013fb0:	88db      	ldrh	r3, [r3, #6]
 8013fb2:	b29b      	uxth	r3, r3
 8013fb4:	4618      	mov	r0, r3
 8013fb6:	f7f6 f941 	bl	800a23c <lwip_htons>
 8013fba:	4603      	mov	r3, r0
 8013fbc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013fc0:	b29b      	uxth	r3, r3
 8013fc2:	00db      	lsls	r3, r3, #3
 8013fc4:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8013fc6:	68bb      	ldr	r3, [r7, #8]
 8013fc8:	685b      	ldr	r3, [r3, #4]
 8013fca:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8013fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013fce:	2200      	movs	r2, #0
 8013fd0:	701a      	strb	r2, [r3, #0]
 8013fd2:	2200      	movs	r2, #0
 8013fd4:	705a      	strb	r2, [r3, #1]
 8013fd6:	2200      	movs	r2, #0
 8013fd8:	709a      	strb	r2, [r3, #2]
 8013fda:	2200      	movs	r2, #0
 8013fdc:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8013fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013fe0:	8afa      	ldrh	r2, [r7, #22]
 8013fe2:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8013fe4:	8afa      	ldrh	r2, [r7, #22]
 8013fe6:	8b7b      	ldrh	r3, [r7, #26]
 8013fe8:	4413      	add	r3, r2
 8013fea:	b29a      	uxth	r2, r3
 8013fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013fee:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8013ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ff2:	88db      	ldrh	r3, [r3, #6]
 8013ff4:	b29b      	uxth	r3, r3
 8013ff6:	8afa      	ldrh	r2, [r7, #22]
 8013ff8:	429a      	cmp	r2, r3
 8013ffa:	d902      	bls.n	8014002 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013ffc:	f04f 33ff 	mov.w	r3, #4294967295
 8014000:	e106      	b.n	8014210 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8014002:	68fb      	ldr	r3, [r7, #12]
 8014004:	685b      	ldr	r3, [r3, #4]
 8014006:	627b      	str	r3, [r7, #36]	; 0x24
 8014008:	e068      	b.n	80140dc <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801400a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801400c:	685b      	ldr	r3, [r3, #4]
 801400e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8014010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014012:	889b      	ldrh	r3, [r3, #4]
 8014014:	b29a      	uxth	r2, r3
 8014016:	693b      	ldr	r3, [r7, #16]
 8014018:	889b      	ldrh	r3, [r3, #4]
 801401a:	b29b      	uxth	r3, r3
 801401c:	429a      	cmp	r2, r3
 801401e:	d235      	bcs.n	801408c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8014020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014022:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014024:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8014026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014028:	2b00      	cmp	r3, #0
 801402a:	d020      	beq.n	801406e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801402c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801402e:	889b      	ldrh	r3, [r3, #4]
 8014030:	b29a      	uxth	r2, r3
 8014032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014034:	88db      	ldrh	r3, [r3, #6]
 8014036:	b29b      	uxth	r3, r3
 8014038:	429a      	cmp	r2, r3
 801403a:	d307      	bcc.n	801404c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801403c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801403e:	88db      	ldrh	r3, [r3, #6]
 8014040:	b29a      	uxth	r2, r3
 8014042:	693b      	ldr	r3, [r7, #16]
 8014044:	889b      	ldrh	r3, [r3, #4]
 8014046:	b29b      	uxth	r3, r3
 8014048:	429a      	cmp	r2, r3
 801404a:	d902      	bls.n	8014052 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801404c:	f04f 33ff 	mov.w	r3, #4294967295
 8014050:	e0de      	b.n	8014210 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8014052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014054:	68ba      	ldr	r2, [r7, #8]
 8014056:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8014058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801405a:	88db      	ldrh	r3, [r3, #6]
 801405c:	b29a      	uxth	r2, r3
 801405e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014060:	889b      	ldrh	r3, [r3, #4]
 8014062:	b29b      	uxth	r3, r3
 8014064:	429a      	cmp	r2, r3
 8014066:	d03d      	beq.n	80140e4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8014068:	2300      	movs	r3, #0
 801406a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801406c:	e03a      	b.n	80140e4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801406e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014070:	88db      	ldrh	r3, [r3, #6]
 8014072:	b29a      	uxth	r2, r3
 8014074:	693b      	ldr	r3, [r7, #16]
 8014076:	889b      	ldrh	r3, [r3, #4]
 8014078:	b29b      	uxth	r3, r3
 801407a:	429a      	cmp	r2, r3
 801407c:	d902      	bls.n	8014084 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801407e:	f04f 33ff 	mov.w	r3, #4294967295
 8014082:	e0c5      	b.n	8014210 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8014084:	68fb      	ldr	r3, [r7, #12]
 8014086:	68ba      	ldr	r2, [r7, #8]
 8014088:	605a      	str	r2, [r3, #4]
      break;
 801408a:	e02b      	b.n	80140e4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801408c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801408e:	889b      	ldrh	r3, [r3, #4]
 8014090:	b29a      	uxth	r2, r3
 8014092:	693b      	ldr	r3, [r7, #16]
 8014094:	889b      	ldrh	r3, [r3, #4]
 8014096:	b29b      	uxth	r3, r3
 8014098:	429a      	cmp	r2, r3
 801409a:	d102      	bne.n	80140a2 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801409c:	f04f 33ff 	mov.w	r3, #4294967295
 80140a0:	e0b6      	b.n	8014210 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80140a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140a4:	889b      	ldrh	r3, [r3, #4]
 80140a6:	b29a      	uxth	r2, r3
 80140a8:	693b      	ldr	r3, [r7, #16]
 80140aa:	88db      	ldrh	r3, [r3, #6]
 80140ac:	b29b      	uxth	r3, r3
 80140ae:	429a      	cmp	r2, r3
 80140b0:	d202      	bcs.n	80140b8 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80140b2:	f04f 33ff 	mov.w	r3, #4294967295
 80140b6:	e0ab      	b.n	8014210 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80140b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80140ba:	2b00      	cmp	r3, #0
 80140bc:	d009      	beq.n	80140d2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80140be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80140c0:	88db      	ldrh	r3, [r3, #6]
 80140c2:	b29a      	uxth	r2, r3
 80140c4:	693b      	ldr	r3, [r7, #16]
 80140c6:	889b      	ldrh	r3, [r3, #4]
 80140c8:	b29b      	uxth	r3, r3
 80140ca:	429a      	cmp	r2, r3
 80140cc:	d001      	beq.n	80140d2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80140ce:	2300      	movs	r3, #0
 80140d0:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80140d2:	693b      	ldr	r3, [r7, #16]
 80140d4:	681b      	ldr	r3, [r3, #0]
 80140d6:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 80140d8:	693b      	ldr	r3, [r7, #16]
 80140da:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 80140dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140de:	2b00      	cmp	r3, #0
 80140e0:	d193      	bne.n	801400a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80140e2:	e000      	b.n	80140e6 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80140e4:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80140e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140e8:	2b00      	cmp	r3, #0
 80140ea:	d12d      	bne.n	8014148 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80140ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80140ee:	2b00      	cmp	r3, #0
 80140f0:	d01c      	beq.n	801412c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80140f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80140f4:	88db      	ldrh	r3, [r3, #6]
 80140f6:	b29a      	uxth	r2, r3
 80140f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140fa:	889b      	ldrh	r3, [r3, #4]
 80140fc:	b29b      	uxth	r3, r3
 80140fe:	429a      	cmp	r2, r3
 8014100:	d906      	bls.n	8014110 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8014102:	4b45      	ldr	r3, [pc, #276]	; (8014218 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014104:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8014108:	4944      	ldr	r1, [pc, #272]	; (801421c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801410a:	4845      	ldr	r0, [pc, #276]	; (8014220 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801410c:	f000 fd04 	bl	8014b18 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8014110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014112:	68ba      	ldr	r2, [r7, #8]
 8014114:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8014116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014118:	88db      	ldrh	r3, [r3, #6]
 801411a:	b29a      	uxth	r2, r3
 801411c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801411e:	889b      	ldrh	r3, [r3, #4]
 8014120:	b29b      	uxth	r3, r3
 8014122:	429a      	cmp	r2, r3
 8014124:	d010      	beq.n	8014148 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8014126:	2300      	movs	r3, #0
 8014128:	623b      	str	r3, [r7, #32]
 801412a:	e00d      	b.n	8014148 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801412c:	68fb      	ldr	r3, [r7, #12]
 801412e:	685b      	ldr	r3, [r3, #4]
 8014130:	2b00      	cmp	r3, #0
 8014132:	d006      	beq.n	8014142 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8014134:	4b38      	ldr	r3, [pc, #224]	; (8014218 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014136:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801413a:	493a      	ldr	r1, [pc, #232]	; (8014224 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801413c:	4838      	ldr	r0, [pc, #224]	; (8014220 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801413e:	f000 fceb 	bl	8014b18 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8014142:	68fb      	ldr	r3, [r7, #12]
 8014144:	68ba      	ldr	r2, [r7, #8]
 8014146:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8014148:	687b      	ldr	r3, [r7, #4]
 801414a:	2b00      	cmp	r3, #0
 801414c:	d105      	bne.n	801415a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801414e:	68fb      	ldr	r3, [r7, #12]
 8014150:	7f9b      	ldrb	r3, [r3, #30]
 8014152:	f003 0301 	and.w	r3, r3, #1
 8014156:	2b00      	cmp	r3, #0
 8014158:	d059      	beq.n	801420e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801415a:	6a3b      	ldr	r3, [r7, #32]
 801415c:	2b00      	cmp	r3, #0
 801415e:	d04f      	beq.n	8014200 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8014160:	68fb      	ldr	r3, [r7, #12]
 8014162:	685b      	ldr	r3, [r3, #4]
 8014164:	2b00      	cmp	r3, #0
 8014166:	d006      	beq.n	8014176 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8014168:	68fb      	ldr	r3, [r7, #12]
 801416a:	685b      	ldr	r3, [r3, #4]
 801416c:	685b      	ldr	r3, [r3, #4]
 801416e:	889b      	ldrh	r3, [r3, #4]
 8014170:	b29b      	uxth	r3, r3
 8014172:	2b00      	cmp	r3, #0
 8014174:	d002      	beq.n	801417c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8014176:	2300      	movs	r3, #0
 8014178:	623b      	str	r3, [r7, #32]
 801417a:	e041      	b.n	8014200 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801417c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801417e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8014180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014182:	681b      	ldr	r3, [r3, #0]
 8014184:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8014186:	e012      	b.n	80141ae <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8014188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801418a:	685b      	ldr	r3, [r3, #4]
 801418c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801418e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014190:	88db      	ldrh	r3, [r3, #6]
 8014192:	b29a      	uxth	r2, r3
 8014194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014196:	889b      	ldrh	r3, [r3, #4]
 8014198:	b29b      	uxth	r3, r3
 801419a:	429a      	cmp	r2, r3
 801419c:	d002      	beq.n	80141a4 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801419e:	2300      	movs	r3, #0
 80141a0:	623b      	str	r3, [r7, #32]
            break;
 80141a2:	e007      	b.n	80141b4 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80141a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141a6:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 80141a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141aa:	681b      	ldr	r3, [r3, #0]
 80141ac:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80141ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141b0:	2b00      	cmp	r3, #0
 80141b2:	d1e9      	bne.n	8014188 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80141b4:	6a3b      	ldr	r3, [r7, #32]
 80141b6:	2b00      	cmp	r3, #0
 80141b8:	d022      	beq.n	8014200 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80141ba:	68fb      	ldr	r3, [r7, #12]
 80141bc:	685b      	ldr	r3, [r3, #4]
 80141be:	2b00      	cmp	r3, #0
 80141c0:	d106      	bne.n	80141d0 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80141c2:	4b15      	ldr	r3, [pc, #84]	; (8014218 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80141c4:	f240 12df 	movw	r2, #479	; 0x1df
 80141c8:	4917      	ldr	r1, [pc, #92]	; (8014228 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80141ca:	4815      	ldr	r0, [pc, #84]	; (8014220 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80141cc:	f000 fca4 	bl	8014b18 <iprintf>
          LWIP_ASSERT("sanity check",
 80141d0:	68fb      	ldr	r3, [r7, #12]
 80141d2:	685b      	ldr	r3, [r3, #4]
 80141d4:	685b      	ldr	r3, [r3, #4]
 80141d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80141d8:	429a      	cmp	r2, r3
 80141da:	d106      	bne.n	80141ea <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80141dc:	4b0e      	ldr	r3, [pc, #56]	; (8014218 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80141de:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80141e2:	4911      	ldr	r1, [pc, #68]	; (8014228 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80141e4:	480e      	ldr	r0, [pc, #56]	; (8014220 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80141e6:	f000 fc97 	bl	8014b18 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80141ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141ec:	681b      	ldr	r3, [r3, #0]
 80141ee:	2b00      	cmp	r3, #0
 80141f0:	d006      	beq.n	8014200 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80141f2:	4b09      	ldr	r3, [pc, #36]	; (8014218 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80141f4:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 80141f8:	490c      	ldr	r1, [pc, #48]	; (801422c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80141fa:	4809      	ldr	r0, [pc, #36]	; (8014220 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80141fc:	f000 fc8c 	bl	8014b18 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8014200:	6a3b      	ldr	r3, [r7, #32]
 8014202:	2b00      	cmp	r3, #0
 8014204:	bf14      	ite	ne
 8014206:	2301      	movne	r3, #1
 8014208:	2300      	moveq	r3, #0
 801420a:	b2db      	uxtb	r3, r3
 801420c:	e000      	b.n	8014210 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801420e:	2300      	movs	r3, #0
}
 8014210:	4618      	mov	r0, r3
 8014212:	3730      	adds	r7, #48	; 0x30
 8014214:	46bd      	mov	sp, r7
 8014216:	bd80      	pop	{r7, pc}
 8014218:	08018848 	.word	0x08018848
 801421c:	0801892c 	.word	0x0801892c
 8014220:	08018890 	.word	0x08018890
 8014224:	0801894c 	.word	0x0801894c
 8014228:	08018984 	.word	0x08018984
 801422c:	08018994 	.word	0x08018994

08014230 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8014230:	b580      	push	{r7, lr}
 8014232:	b08e      	sub	sp, #56	; 0x38
 8014234:	af00      	add	r7, sp, #0
 8014236:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8014238:	687b      	ldr	r3, [r7, #4]
 801423a:	685b      	ldr	r3, [r3, #4]
 801423c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801423e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014240:	781b      	ldrb	r3, [r3, #0]
 8014242:	f003 030f 	and.w	r3, r3, #15
 8014246:	b2db      	uxtb	r3, r3
 8014248:	009b      	lsls	r3, r3, #2
 801424a:	b2db      	uxtb	r3, r3
 801424c:	2b14      	cmp	r3, #20
 801424e:	f040 8171 	bne.w	8014534 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8014252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014254:	88db      	ldrh	r3, [r3, #6]
 8014256:	b29b      	uxth	r3, r3
 8014258:	4618      	mov	r0, r3
 801425a:	f7f5 ffef 	bl	800a23c <lwip_htons>
 801425e:	4603      	mov	r3, r0
 8014260:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014264:	b29b      	uxth	r3, r3
 8014266:	00db      	lsls	r3, r3, #3
 8014268:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801426a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801426c:	885b      	ldrh	r3, [r3, #2]
 801426e:	b29b      	uxth	r3, r3
 8014270:	4618      	mov	r0, r3
 8014272:	f7f5 ffe3 	bl	800a23c <lwip_htons>
 8014276:	4603      	mov	r3, r0
 8014278:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801427a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801427c:	781b      	ldrb	r3, [r3, #0]
 801427e:	f003 030f 	and.w	r3, r3, #15
 8014282:	b2db      	uxtb	r3, r3
 8014284:	009b      	lsls	r3, r3, #2
 8014286:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801428a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801428e:	b29b      	uxth	r3, r3
 8014290:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8014292:	429a      	cmp	r2, r3
 8014294:	f0c0 8150 	bcc.w	8014538 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8014298:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801429c:	b29b      	uxth	r3, r3
 801429e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80142a0:	1ad3      	subs	r3, r2, r3
 80142a2:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80142a4:	6878      	ldr	r0, [r7, #4]
 80142a6:	f7f7 fbaf 	bl	800ba08 <pbuf_clen>
 80142aa:	4603      	mov	r3, r0
 80142ac:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80142ae:	4b8c      	ldr	r3, [pc, #560]	; (80144e0 <ip4_reass+0x2b0>)
 80142b0:	881b      	ldrh	r3, [r3, #0]
 80142b2:	461a      	mov	r2, r3
 80142b4:	8c3b      	ldrh	r3, [r7, #32]
 80142b6:	4413      	add	r3, r2
 80142b8:	2b0a      	cmp	r3, #10
 80142ba:	dd10      	ble.n	80142de <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80142bc:	8c3b      	ldrh	r3, [r7, #32]
 80142be:	4619      	mov	r1, r3
 80142c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80142c2:	f7ff fd81 	bl	8013dc8 <ip_reass_remove_oldest_datagram>
 80142c6:	4603      	mov	r3, r0
 80142c8:	2b00      	cmp	r3, #0
 80142ca:	f000 8137 	beq.w	801453c <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80142ce:	4b84      	ldr	r3, [pc, #528]	; (80144e0 <ip4_reass+0x2b0>)
 80142d0:	881b      	ldrh	r3, [r3, #0]
 80142d2:	461a      	mov	r2, r3
 80142d4:	8c3b      	ldrh	r3, [r7, #32]
 80142d6:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80142d8:	2b0a      	cmp	r3, #10
 80142da:	f300 812f 	bgt.w	801453c <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80142de:	4b81      	ldr	r3, [pc, #516]	; (80144e4 <ip4_reass+0x2b4>)
 80142e0:	681b      	ldr	r3, [r3, #0]
 80142e2:	633b      	str	r3, [r7, #48]	; 0x30
 80142e4:	e015      	b.n	8014312 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80142e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142e8:	695a      	ldr	r2, [r3, #20]
 80142ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142ec:	68db      	ldr	r3, [r3, #12]
 80142ee:	429a      	cmp	r2, r3
 80142f0:	d10c      	bne.n	801430c <ip4_reass+0xdc>
 80142f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142f4:	699a      	ldr	r2, [r3, #24]
 80142f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142f8:	691b      	ldr	r3, [r3, #16]
 80142fa:	429a      	cmp	r2, r3
 80142fc:	d106      	bne.n	801430c <ip4_reass+0xdc>
 80142fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014300:	899a      	ldrh	r2, [r3, #12]
 8014302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014304:	889b      	ldrh	r3, [r3, #4]
 8014306:	b29b      	uxth	r3, r3
 8014308:	429a      	cmp	r2, r3
 801430a:	d006      	beq.n	801431a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801430c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801430e:	681b      	ldr	r3, [r3, #0]
 8014310:	633b      	str	r3, [r7, #48]	; 0x30
 8014312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014314:	2b00      	cmp	r3, #0
 8014316:	d1e6      	bne.n	80142e6 <ip4_reass+0xb6>
 8014318:	e000      	b.n	801431c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801431a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801431c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801431e:	2b00      	cmp	r3, #0
 8014320:	d109      	bne.n	8014336 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8014322:	8c3b      	ldrh	r3, [r7, #32]
 8014324:	4619      	mov	r1, r3
 8014326:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014328:	f7ff fdb0 	bl	8013e8c <ip_reass_enqueue_new_datagram>
 801432c:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801432e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014330:	2b00      	cmp	r3, #0
 8014332:	d11c      	bne.n	801436e <ip4_reass+0x13e>
      goto nullreturn;
 8014334:	e105      	b.n	8014542 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8014336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014338:	88db      	ldrh	r3, [r3, #6]
 801433a:	b29b      	uxth	r3, r3
 801433c:	4618      	mov	r0, r3
 801433e:	f7f5 ff7d 	bl	800a23c <lwip_htons>
 8014342:	4603      	mov	r3, r0
 8014344:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014348:	2b00      	cmp	r3, #0
 801434a:	d110      	bne.n	801436e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801434c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801434e:	89db      	ldrh	r3, [r3, #14]
 8014350:	4618      	mov	r0, r3
 8014352:	f7f5 ff73 	bl	800a23c <lwip_htons>
 8014356:	4603      	mov	r3, r0
 8014358:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801435c:	2b00      	cmp	r3, #0
 801435e:	d006      	beq.n	801436e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8014360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014362:	3308      	adds	r3, #8
 8014364:	2214      	movs	r2, #20
 8014366:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8014368:	4618      	mov	r0, r3
 801436a:	f000 fba5 	bl	8014ab8 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801436e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014370:	88db      	ldrh	r3, [r3, #6]
 8014372:	b29b      	uxth	r3, r3
 8014374:	f003 0320 	and.w	r3, r3, #32
 8014378:	2b00      	cmp	r3, #0
 801437a:	bf0c      	ite	eq
 801437c:	2301      	moveq	r3, #1
 801437e:	2300      	movne	r3, #0
 8014380:	b2db      	uxtb	r3, r3
 8014382:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8014384:	69fb      	ldr	r3, [r7, #28]
 8014386:	2b00      	cmp	r3, #0
 8014388:	d00e      	beq.n	80143a8 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801438a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801438c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801438e:	4413      	add	r3, r2
 8014390:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8014392:	8b7a      	ldrh	r2, [r7, #26]
 8014394:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8014396:	429a      	cmp	r2, r3
 8014398:	f0c0 80a0 	bcc.w	80144dc <ip4_reass+0x2ac>
 801439c:	8b7b      	ldrh	r3, [r7, #26]
 801439e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80143a2:	4293      	cmp	r3, r2
 80143a4:	f200 809a 	bhi.w	80144dc <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80143a8:	69fa      	ldr	r2, [r7, #28]
 80143aa:	6879      	ldr	r1, [r7, #4]
 80143ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80143ae:	f7ff fdd5 	bl	8013f5c <ip_reass_chain_frag_into_datagram_and_validate>
 80143b2:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80143b4:	697b      	ldr	r3, [r7, #20]
 80143b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80143ba:	f000 809b 	beq.w	80144f4 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80143be:	4b48      	ldr	r3, [pc, #288]	; (80144e0 <ip4_reass+0x2b0>)
 80143c0:	881a      	ldrh	r2, [r3, #0]
 80143c2:	8c3b      	ldrh	r3, [r7, #32]
 80143c4:	4413      	add	r3, r2
 80143c6:	b29a      	uxth	r2, r3
 80143c8:	4b45      	ldr	r3, [pc, #276]	; (80144e0 <ip4_reass+0x2b0>)
 80143ca:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80143cc:	69fb      	ldr	r3, [r7, #28]
 80143ce:	2b00      	cmp	r3, #0
 80143d0:	d00d      	beq.n	80143ee <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80143d2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80143d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80143d6:	4413      	add	r3, r2
 80143d8:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80143da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143dc:	8a7a      	ldrh	r2, [r7, #18]
 80143de:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80143e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143e2:	7f9b      	ldrb	r3, [r3, #30]
 80143e4:	f043 0301 	orr.w	r3, r3, #1
 80143e8:	b2da      	uxtb	r2, r3
 80143ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143ec:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80143ee:	697b      	ldr	r3, [r7, #20]
 80143f0:	2b01      	cmp	r3, #1
 80143f2:	d171      	bne.n	80144d8 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80143f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143f6:	8b9b      	ldrh	r3, [r3, #28]
 80143f8:	3314      	adds	r3, #20
 80143fa:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80143fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143fe:	685b      	ldr	r3, [r3, #4]
 8014400:	685b      	ldr	r3, [r3, #4]
 8014402:	681b      	ldr	r3, [r3, #0]
 8014404:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8014406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014408:	685b      	ldr	r3, [r3, #4]
 801440a:	685b      	ldr	r3, [r3, #4]
 801440c:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801440e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014410:	3308      	adds	r3, #8
 8014412:	2214      	movs	r2, #20
 8014414:	4619      	mov	r1, r3
 8014416:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014418:	f000 fb4e 	bl	8014ab8 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801441c:	8a3b      	ldrh	r3, [r7, #16]
 801441e:	4618      	mov	r0, r3
 8014420:	f7f5 ff0c 	bl	800a23c <lwip_htons>
 8014424:	4603      	mov	r3, r0
 8014426:	461a      	mov	r2, r3
 8014428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801442a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801442c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801442e:	2200      	movs	r2, #0
 8014430:	719a      	strb	r2, [r3, #6]
 8014432:	2200      	movs	r2, #0
 8014434:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8014436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014438:	2200      	movs	r2, #0
 801443a:	729a      	strb	r2, [r3, #10]
 801443c:	2200      	movs	r2, #0
 801443e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8014440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014442:	685b      	ldr	r3, [r3, #4]
 8014444:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8014446:	e00d      	b.n	8014464 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8014448:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801444a:	685b      	ldr	r3, [r3, #4]
 801444c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801444e:	2114      	movs	r1, #20
 8014450:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8014452:	f7f7 f9cb 	bl	800b7ec <pbuf_remove_header>
      pbuf_cat(p, r);
 8014456:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8014458:	6878      	ldr	r0, [r7, #4]
 801445a:	f7f7 fb0f 	bl	800ba7c <pbuf_cat>
      r = iprh->next_pbuf;
 801445e:	68fb      	ldr	r3, [r7, #12]
 8014460:	681b      	ldr	r3, [r3, #0]
 8014462:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8014464:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014466:	2b00      	cmp	r3, #0
 8014468:	d1ee      	bne.n	8014448 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801446a:	4b1e      	ldr	r3, [pc, #120]	; (80144e4 <ip4_reass+0x2b4>)
 801446c:	681b      	ldr	r3, [r3, #0]
 801446e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014470:	429a      	cmp	r2, r3
 8014472:	d102      	bne.n	801447a <ip4_reass+0x24a>
      ipr_prev = NULL;
 8014474:	2300      	movs	r3, #0
 8014476:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014478:	e010      	b.n	801449c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801447a:	4b1a      	ldr	r3, [pc, #104]	; (80144e4 <ip4_reass+0x2b4>)
 801447c:	681b      	ldr	r3, [r3, #0]
 801447e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014480:	e007      	b.n	8014492 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8014482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014484:	681b      	ldr	r3, [r3, #0]
 8014486:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014488:	429a      	cmp	r2, r3
 801448a:	d006      	beq.n	801449a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801448c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801448e:	681b      	ldr	r3, [r3, #0]
 8014490:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014494:	2b00      	cmp	r3, #0
 8014496:	d1f4      	bne.n	8014482 <ip4_reass+0x252>
 8014498:	e000      	b.n	801449c <ip4_reass+0x26c>
          break;
 801449a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801449c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801449e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80144a0:	f7ff fd2e 	bl	8013f00 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80144a4:	6878      	ldr	r0, [r7, #4]
 80144a6:	f7f7 faaf 	bl	800ba08 <pbuf_clen>
 80144aa:	4603      	mov	r3, r0
 80144ac:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80144ae:	4b0c      	ldr	r3, [pc, #48]	; (80144e0 <ip4_reass+0x2b0>)
 80144b0:	881b      	ldrh	r3, [r3, #0]
 80144b2:	8c3a      	ldrh	r2, [r7, #32]
 80144b4:	429a      	cmp	r2, r3
 80144b6:	d906      	bls.n	80144c6 <ip4_reass+0x296>
 80144b8:	4b0b      	ldr	r3, [pc, #44]	; (80144e8 <ip4_reass+0x2b8>)
 80144ba:	f240 229b 	movw	r2, #667	; 0x29b
 80144be:	490b      	ldr	r1, [pc, #44]	; (80144ec <ip4_reass+0x2bc>)
 80144c0:	480b      	ldr	r0, [pc, #44]	; (80144f0 <ip4_reass+0x2c0>)
 80144c2:	f000 fb29 	bl	8014b18 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80144c6:	4b06      	ldr	r3, [pc, #24]	; (80144e0 <ip4_reass+0x2b0>)
 80144c8:	881a      	ldrh	r2, [r3, #0]
 80144ca:	8c3b      	ldrh	r3, [r7, #32]
 80144cc:	1ad3      	subs	r3, r2, r3
 80144ce:	b29a      	uxth	r2, r3
 80144d0:	4b03      	ldr	r3, [pc, #12]	; (80144e0 <ip4_reass+0x2b0>)
 80144d2:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80144d4:	687b      	ldr	r3, [r7, #4]
 80144d6:	e038      	b.n	801454a <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80144d8:	2300      	movs	r3, #0
 80144da:	e036      	b.n	801454a <ip4_reass+0x31a>
      goto nullreturn_ipr;
 80144dc:	bf00      	nop
 80144de:	e00a      	b.n	80144f6 <ip4_reass+0x2c6>
 80144e0:	20008cfc 	.word	0x20008cfc
 80144e4:	20008cf8 	.word	0x20008cf8
 80144e8:	08018848 	.word	0x08018848
 80144ec:	080189b8 	.word	0x080189b8
 80144f0:	08018890 	.word	0x08018890
    goto nullreturn_ipr;
 80144f4:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80144f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80144f8:	2b00      	cmp	r3, #0
 80144fa:	d106      	bne.n	801450a <ip4_reass+0x2da>
 80144fc:	4b15      	ldr	r3, [pc, #84]	; (8014554 <ip4_reass+0x324>)
 80144fe:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8014502:	4915      	ldr	r1, [pc, #84]	; (8014558 <ip4_reass+0x328>)
 8014504:	4815      	ldr	r0, [pc, #84]	; (801455c <ip4_reass+0x32c>)
 8014506:	f000 fb07 	bl	8014b18 <iprintf>
  if (ipr->p == NULL) {
 801450a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801450c:	685b      	ldr	r3, [r3, #4]
 801450e:	2b00      	cmp	r3, #0
 8014510:	d116      	bne.n	8014540 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8014512:	4b13      	ldr	r3, [pc, #76]	; (8014560 <ip4_reass+0x330>)
 8014514:	681b      	ldr	r3, [r3, #0]
 8014516:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014518:	429a      	cmp	r2, r3
 801451a:	d006      	beq.n	801452a <ip4_reass+0x2fa>
 801451c:	4b0d      	ldr	r3, [pc, #52]	; (8014554 <ip4_reass+0x324>)
 801451e:	f240 22ab 	movw	r2, #683	; 0x2ab
 8014522:	4910      	ldr	r1, [pc, #64]	; (8014564 <ip4_reass+0x334>)
 8014524:	480d      	ldr	r0, [pc, #52]	; (801455c <ip4_reass+0x32c>)
 8014526:	f000 faf7 	bl	8014b18 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801452a:	2100      	movs	r1, #0
 801452c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801452e:	f7ff fce7 	bl	8013f00 <ip_reass_dequeue_datagram>
 8014532:	e006      	b.n	8014542 <ip4_reass+0x312>
    goto nullreturn;
 8014534:	bf00      	nop
 8014536:	e004      	b.n	8014542 <ip4_reass+0x312>
    goto nullreturn;
 8014538:	bf00      	nop
 801453a:	e002      	b.n	8014542 <ip4_reass+0x312>
      goto nullreturn;
 801453c:	bf00      	nop
 801453e:	e000      	b.n	8014542 <ip4_reass+0x312>
  }

nullreturn:
 8014540:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8014542:	6878      	ldr	r0, [r7, #4]
 8014544:	f7f7 f9d8 	bl	800b8f8 <pbuf_free>
  return NULL;
 8014548:	2300      	movs	r3, #0
}
 801454a:	4618      	mov	r0, r3
 801454c:	3738      	adds	r7, #56	; 0x38
 801454e:	46bd      	mov	sp, r7
 8014550:	bd80      	pop	{r7, pc}
 8014552:	bf00      	nop
 8014554:	08018848 	.word	0x08018848
 8014558:	080189d4 	.word	0x080189d4
 801455c:	08018890 	.word	0x08018890
 8014560:	20008cf8 	.word	0x20008cf8
 8014564:	080189e0 	.word	0x080189e0

08014568 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8014568:	b580      	push	{r7, lr}
 801456a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801456c:	2005      	movs	r0, #5
 801456e:	f7f6 fadd 	bl	800ab2c <memp_malloc>
 8014572:	4603      	mov	r3, r0
}
 8014574:	4618      	mov	r0, r3
 8014576:	bd80      	pop	{r7, pc}

08014578 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8014578:	b580      	push	{r7, lr}
 801457a:	b082      	sub	sp, #8
 801457c:	af00      	add	r7, sp, #0
 801457e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8014580:	687b      	ldr	r3, [r7, #4]
 8014582:	2b00      	cmp	r3, #0
 8014584:	d106      	bne.n	8014594 <ip_frag_free_pbuf_custom_ref+0x1c>
 8014586:	4b07      	ldr	r3, [pc, #28]	; (80145a4 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8014588:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801458c:	4906      	ldr	r1, [pc, #24]	; (80145a8 <ip_frag_free_pbuf_custom_ref+0x30>)
 801458e:	4807      	ldr	r0, [pc, #28]	; (80145ac <ip_frag_free_pbuf_custom_ref+0x34>)
 8014590:	f000 fac2 	bl	8014b18 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8014594:	6879      	ldr	r1, [r7, #4]
 8014596:	2005      	movs	r0, #5
 8014598:	f7f6 fb38 	bl	800ac0c <memp_free>
}
 801459c:	bf00      	nop
 801459e:	3708      	adds	r7, #8
 80145a0:	46bd      	mov	sp, r7
 80145a2:	bd80      	pop	{r7, pc}
 80145a4:	08018848 	.word	0x08018848
 80145a8:	08018a00 	.word	0x08018a00
 80145ac:	08018890 	.word	0x08018890

080145b0 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80145b0:	b580      	push	{r7, lr}
 80145b2:	b084      	sub	sp, #16
 80145b4:	af00      	add	r7, sp, #0
 80145b6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80145b8:	687b      	ldr	r3, [r7, #4]
 80145ba:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80145bc:	68fb      	ldr	r3, [r7, #12]
 80145be:	2b00      	cmp	r3, #0
 80145c0:	d106      	bne.n	80145d0 <ipfrag_free_pbuf_custom+0x20>
 80145c2:	4b11      	ldr	r3, [pc, #68]	; (8014608 <ipfrag_free_pbuf_custom+0x58>)
 80145c4:	f240 22ce 	movw	r2, #718	; 0x2ce
 80145c8:	4910      	ldr	r1, [pc, #64]	; (801460c <ipfrag_free_pbuf_custom+0x5c>)
 80145ca:	4811      	ldr	r0, [pc, #68]	; (8014610 <ipfrag_free_pbuf_custom+0x60>)
 80145cc:	f000 faa4 	bl	8014b18 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80145d0:	68fa      	ldr	r2, [r7, #12]
 80145d2:	687b      	ldr	r3, [r7, #4]
 80145d4:	429a      	cmp	r2, r3
 80145d6:	d006      	beq.n	80145e6 <ipfrag_free_pbuf_custom+0x36>
 80145d8:	4b0b      	ldr	r3, [pc, #44]	; (8014608 <ipfrag_free_pbuf_custom+0x58>)
 80145da:	f240 22cf 	movw	r2, #719	; 0x2cf
 80145de:	490d      	ldr	r1, [pc, #52]	; (8014614 <ipfrag_free_pbuf_custom+0x64>)
 80145e0:	480b      	ldr	r0, [pc, #44]	; (8014610 <ipfrag_free_pbuf_custom+0x60>)
 80145e2:	f000 fa99 	bl	8014b18 <iprintf>
  if (pcr->original != NULL) {
 80145e6:	68fb      	ldr	r3, [r7, #12]
 80145e8:	695b      	ldr	r3, [r3, #20]
 80145ea:	2b00      	cmp	r3, #0
 80145ec:	d004      	beq.n	80145f8 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80145ee:	68fb      	ldr	r3, [r7, #12]
 80145f0:	695b      	ldr	r3, [r3, #20]
 80145f2:	4618      	mov	r0, r3
 80145f4:	f7f7 f980 	bl	800b8f8 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80145f8:	68f8      	ldr	r0, [r7, #12]
 80145fa:	f7ff ffbd 	bl	8014578 <ip_frag_free_pbuf_custom_ref>
}
 80145fe:	bf00      	nop
 8014600:	3710      	adds	r7, #16
 8014602:	46bd      	mov	sp, r7
 8014604:	bd80      	pop	{r7, pc}
 8014606:	bf00      	nop
 8014608:	08018848 	.word	0x08018848
 801460c:	08018a0c 	.word	0x08018a0c
 8014610:	08018890 	.word	0x08018890
 8014614:	08018a18 	.word	0x08018a18

08014618 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8014618:	b580      	push	{r7, lr}
 801461a:	b094      	sub	sp, #80	; 0x50
 801461c:	af02      	add	r7, sp, #8
 801461e:	60f8      	str	r0, [r7, #12]
 8014620:	60b9      	str	r1, [r7, #8]
 8014622:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8014624:	2300      	movs	r3, #0
 8014626:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801462a:	68bb      	ldr	r3, [r7, #8]
 801462c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801462e:	3b14      	subs	r3, #20
 8014630:	2b00      	cmp	r3, #0
 8014632:	da00      	bge.n	8014636 <ip4_frag+0x1e>
 8014634:	3307      	adds	r3, #7
 8014636:	10db      	asrs	r3, r3, #3
 8014638:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801463a:	2314      	movs	r3, #20
 801463c:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801463e:	68fb      	ldr	r3, [r7, #12]
 8014640:	685b      	ldr	r3, [r3, #4]
 8014642:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8014644:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014646:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8014648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801464a:	781b      	ldrb	r3, [r3, #0]
 801464c:	f003 030f 	and.w	r3, r3, #15
 8014650:	b2db      	uxtb	r3, r3
 8014652:	009b      	lsls	r3, r3, #2
 8014654:	b2db      	uxtb	r3, r3
 8014656:	2b14      	cmp	r3, #20
 8014658:	d002      	beq.n	8014660 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801465a:	f06f 0305 	mvn.w	r3, #5
 801465e:	e110      	b.n	8014882 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8014660:	68fb      	ldr	r3, [r7, #12]
 8014662:	895b      	ldrh	r3, [r3, #10]
 8014664:	2b13      	cmp	r3, #19
 8014666:	d809      	bhi.n	801467c <ip4_frag+0x64>
 8014668:	4b88      	ldr	r3, [pc, #544]	; (801488c <ip4_frag+0x274>)
 801466a:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801466e:	4988      	ldr	r1, [pc, #544]	; (8014890 <ip4_frag+0x278>)
 8014670:	4888      	ldr	r0, [pc, #544]	; (8014894 <ip4_frag+0x27c>)
 8014672:	f000 fa51 	bl	8014b18 <iprintf>
 8014676:	f06f 0305 	mvn.w	r3, #5
 801467a:	e102      	b.n	8014882 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801467c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801467e:	88db      	ldrh	r3, [r3, #6]
 8014680:	b29b      	uxth	r3, r3
 8014682:	4618      	mov	r0, r3
 8014684:	f7f5 fdda 	bl	800a23c <lwip_htons>
 8014688:	4603      	mov	r3, r0
 801468a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 801468c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801468e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014692:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8014696:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014698:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801469c:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801469e:	68fb      	ldr	r3, [r7, #12]
 80146a0:	891b      	ldrh	r3, [r3, #8]
 80146a2:	3b14      	subs	r3, #20
 80146a4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 80146a8:	e0e1      	b.n	801486e <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80146aa:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80146ac:	00db      	lsls	r3, r3, #3
 80146ae:	b29b      	uxth	r3, r3
 80146b0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80146b4:	4293      	cmp	r3, r2
 80146b6:	bf28      	it	cs
 80146b8:	4613      	movcs	r3, r2
 80146ba:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80146bc:	f44f 7220 	mov.w	r2, #640	; 0x280
 80146c0:	2114      	movs	r1, #20
 80146c2:	200e      	movs	r0, #14
 80146c4:	f7f6 fe34 	bl	800b330 <pbuf_alloc>
 80146c8:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 80146ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146cc:	2b00      	cmp	r3, #0
 80146ce:	f000 80d5 	beq.w	801487c <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80146d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146d4:	895b      	ldrh	r3, [r3, #10]
 80146d6:	2b13      	cmp	r3, #19
 80146d8:	d806      	bhi.n	80146e8 <ip4_frag+0xd0>
 80146da:	4b6c      	ldr	r3, [pc, #432]	; (801488c <ip4_frag+0x274>)
 80146dc:	f44f 7249 	mov.w	r2, #804	; 0x324
 80146e0:	496d      	ldr	r1, [pc, #436]	; (8014898 <ip4_frag+0x280>)
 80146e2:	486c      	ldr	r0, [pc, #432]	; (8014894 <ip4_frag+0x27c>)
 80146e4:	f000 fa18 	bl	8014b18 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80146e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146ea:	685b      	ldr	r3, [r3, #4]
 80146ec:	2214      	movs	r2, #20
 80146ee:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80146f0:	4618      	mov	r0, r3
 80146f2:	f000 f9e1 	bl	8014ab8 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80146f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146f8:	685b      	ldr	r3, [r3, #4]
 80146fa:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 80146fc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80146fe:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8014702:	e064      	b.n	80147ce <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8014704:	68fb      	ldr	r3, [r7, #12]
 8014706:	895a      	ldrh	r2, [r3, #10]
 8014708:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801470a:	1ad3      	subs	r3, r2, r3
 801470c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801470e:	68fb      	ldr	r3, [r7, #12]
 8014710:	895b      	ldrh	r3, [r3, #10]
 8014712:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8014714:	429a      	cmp	r2, r3
 8014716:	d906      	bls.n	8014726 <ip4_frag+0x10e>
 8014718:	4b5c      	ldr	r3, [pc, #368]	; (801488c <ip4_frag+0x274>)
 801471a:	f240 322d 	movw	r2, #813	; 0x32d
 801471e:	495f      	ldr	r1, [pc, #380]	; (801489c <ip4_frag+0x284>)
 8014720:	485c      	ldr	r0, [pc, #368]	; (8014894 <ip4_frag+0x27c>)
 8014722:	f000 f9f9 	bl	8014b18 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8014726:	8bfa      	ldrh	r2, [r7, #30]
 8014728:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801472c:	4293      	cmp	r3, r2
 801472e:	bf28      	it	cs
 8014730:	4613      	movcs	r3, r2
 8014732:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8014736:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801473a:	2b00      	cmp	r3, #0
 801473c:	d105      	bne.n	801474a <ip4_frag+0x132>
        poff = 0;
 801473e:	2300      	movs	r3, #0
 8014740:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8014742:	68fb      	ldr	r3, [r7, #12]
 8014744:	681b      	ldr	r3, [r3, #0]
 8014746:	60fb      	str	r3, [r7, #12]
        continue;
 8014748:	e041      	b.n	80147ce <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801474a:	f7ff ff0d 	bl	8014568 <ip_frag_alloc_pbuf_custom_ref>
 801474e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8014750:	69bb      	ldr	r3, [r7, #24]
 8014752:	2b00      	cmp	r3, #0
 8014754:	d103      	bne.n	801475e <ip4_frag+0x146>
        pbuf_free(rambuf);
 8014756:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014758:	f7f7 f8ce 	bl	800b8f8 <pbuf_free>
        goto memerr;
 801475c:	e08f      	b.n	801487e <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801475e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8014760:	68fb      	ldr	r3, [r7, #12]
 8014762:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8014764:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014766:	4413      	add	r3, r2
 8014768:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 801476c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8014770:	9201      	str	r2, [sp, #4]
 8014772:	9300      	str	r3, [sp, #0]
 8014774:	4603      	mov	r3, r0
 8014776:	2241      	movs	r2, #65	; 0x41
 8014778:	2000      	movs	r0, #0
 801477a:	f7f6 ff03 	bl	800b584 <pbuf_alloced_custom>
 801477e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8014780:	697b      	ldr	r3, [r7, #20]
 8014782:	2b00      	cmp	r3, #0
 8014784:	d106      	bne.n	8014794 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8014786:	69b8      	ldr	r0, [r7, #24]
 8014788:	f7ff fef6 	bl	8014578 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801478c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801478e:	f7f7 f8b3 	bl	800b8f8 <pbuf_free>
        goto memerr;
 8014792:	e074      	b.n	801487e <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8014794:	68f8      	ldr	r0, [r7, #12]
 8014796:	f7f7 f94f 	bl	800ba38 <pbuf_ref>
      pcr->original = p;
 801479a:	69bb      	ldr	r3, [r7, #24]
 801479c:	68fa      	ldr	r2, [r7, #12]
 801479e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80147a0:	69bb      	ldr	r3, [r7, #24]
 80147a2:	4a3f      	ldr	r2, [pc, #252]	; (80148a0 <ip4_frag+0x288>)
 80147a4:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80147a6:	6979      	ldr	r1, [r7, #20]
 80147a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80147aa:	f7f7 f967 	bl	800ba7c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80147ae:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80147b2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80147b6:	1ad3      	subs	r3, r2, r3
 80147b8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 80147bc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80147c0:	2b00      	cmp	r3, #0
 80147c2:	d004      	beq.n	80147ce <ip4_frag+0x1b6>
        poff = 0;
 80147c4:	2300      	movs	r3, #0
 80147c6:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80147c8:	68fb      	ldr	r3, [r7, #12]
 80147ca:	681b      	ldr	r3, [r3, #0]
 80147cc:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80147ce:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80147d2:	2b00      	cmp	r3, #0
 80147d4:	d196      	bne.n	8014704 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80147d6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80147d8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80147dc:	4413      	add	r3, r2
 80147de:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80147e0:	68bb      	ldr	r3, [r7, #8]
 80147e2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80147e4:	f1a3 0213 	sub.w	r2, r3, #19
 80147e8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80147ec:	429a      	cmp	r2, r3
 80147ee:	bfcc      	ite	gt
 80147f0:	2301      	movgt	r3, #1
 80147f2:	2300      	movle	r3, #0
 80147f4:	b2db      	uxtb	r3, r3
 80147f6:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80147f8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80147fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014800:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8014802:	6a3b      	ldr	r3, [r7, #32]
 8014804:	2b00      	cmp	r3, #0
 8014806:	d002      	beq.n	801480e <ip4_frag+0x1f6>
 8014808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801480a:	2b00      	cmp	r3, #0
 801480c:	d003      	beq.n	8014816 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801480e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014810:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8014814:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8014816:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014818:	4618      	mov	r0, r3
 801481a:	f7f5 fd0f 	bl	800a23c <lwip_htons>
 801481e:	4603      	mov	r3, r0
 8014820:	461a      	mov	r2, r3
 8014822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014824:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8014826:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014828:	3314      	adds	r3, #20
 801482a:	b29b      	uxth	r3, r3
 801482c:	4618      	mov	r0, r3
 801482e:	f7f5 fd05 	bl	800a23c <lwip_htons>
 8014832:	4603      	mov	r3, r0
 8014834:	461a      	mov	r2, r3
 8014836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014838:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801483a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801483c:	2200      	movs	r2, #0
 801483e:	729a      	strb	r2, [r3, #10]
 8014840:	2200      	movs	r2, #0
 8014842:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8014844:	68bb      	ldr	r3, [r7, #8]
 8014846:	695b      	ldr	r3, [r3, #20]
 8014848:	687a      	ldr	r2, [r7, #4]
 801484a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801484c:	68b8      	ldr	r0, [r7, #8]
 801484e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8014850:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014852:	f7f7 f851 	bl	800b8f8 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8014856:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801485a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801485c:	1ad3      	subs	r3, r2, r3
 801485e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8014862:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8014866:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014868:	4413      	add	r3, r2
 801486a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801486e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014872:	2b00      	cmp	r3, #0
 8014874:	f47f af19 	bne.w	80146aa <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8014878:	2300      	movs	r3, #0
 801487a:	e002      	b.n	8014882 <ip4_frag+0x26a>
      goto memerr;
 801487c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801487e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8014882:	4618      	mov	r0, r3
 8014884:	3748      	adds	r7, #72	; 0x48
 8014886:	46bd      	mov	sp, r7
 8014888:	bd80      	pop	{r7, pc}
 801488a:	bf00      	nop
 801488c:	08018848 	.word	0x08018848
 8014890:	08018a24 	.word	0x08018a24
 8014894:	08018890 	.word	0x08018890
 8014898:	08018a40 	.word	0x08018a40
 801489c:	08018a60 	.word	0x08018a60
 80148a0:	080145b1 	.word	0x080145b1

080148a4 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80148a4:	b580      	push	{r7, lr}
 80148a6:	b086      	sub	sp, #24
 80148a8:	af00      	add	r7, sp, #0
 80148aa:	6078      	str	r0, [r7, #4]
 80148ac:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 80148ae:	230e      	movs	r3, #14
 80148b0:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 80148b2:	687b      	ldr	r3, [r7, #4]
 80148b4:	895b      	ldrh	r3, [r3, #10]
 80148b6:	2b0e      	cmp	r3, #14
 80148b8:	d96e      	bls.n	8014998 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 80148ba:	687b      	ldr	r3, [r7, #4]
 80148bc:	7bdb      	ldrb	r3, [r3, #15]
 80148be:	2b00      	cmp	r3, #0
 80148c0:	d106      	bne.n	80148d0 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 80148c2:	683b      	ldr	r3, [r7, #0]
 80148c4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80148c8:	3301      	adds	r3, #1
 80148ca:	b2da      	uxtb	r2, r3
 80148cc:	687b      	ldr	r3, [r7, #4]
 80148ce:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80148d0:	687b      	ldr	r3, [r7, #4]
 80148d2:	685b      	ldr	r3, [r3, #4]
 80148d4:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80148d6:	693b      	ldr	r3, [r7, #16]
 80148d8:	7b1a      	ldrb	r2, [r3, #12]
 80148da:	7b5b      	ldrb	r3, [r3, #13]
 80148dc:	021b      	lsls	r3, r3, #8
 80148de:	4313      	orrs	r3, r2
 80148e0:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80148e2:	693b      	ldr	r3, [r7, #16]
 80148e4:	781b      	ldrb	r3, [r3, #0]
 80148e6:	f003 0301 	and.w	r3, r3, #1
 80148ea:	2b00      	cmp	r3, #0
 80148ec:	d023      	beq.n	8014936 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80148ee:	693b      	ldr	r3, [r7, #16]
 80148f0:	781b      	ldrb	r3, [r3, #0]
 80148f2:	2b01      	cmp	r3, #1
 80148f4:	d10f      	bne.n	8014916 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80148f6:	693b      	ldr	r3, [r7, #16]
 80148f8:	785b      	ldrb	r3, [r3, #1]
 80148fa:	2b00      	cmp	r3, #0
 80148fc:	d11b      	bne.n	8014936 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80148fe:	693b      	ldr	r3, [r7, #16]
 8014900:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8014902:	2b5e      	cmp	r3, #94	; 0x5e
 8014904:	d117      	bne.n	8014936 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8014906:	687b      	ldr	r3, [r7, #4]
 8014908:	7b5b      	ldrb	r3, [r3, #13]
 801490a:	f043 0310 	orr.w	r3, r3, #16
 801490e:	b2da      	uxtb	r2, r3
 8014910:	687b      	ldr	r3, [r7, #4]
 8014912:	735a      	strb	r2, [r3, #13]
 8014914:	e00f      	b.n	8014936 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8014916:	693b      	ldr	r3, [r7, #16]
 8014918:	2206      	movs	r2, #6
 801491a:	4928      	ldr	r1, [pc, #160]	; (80149bc <ethernet_input+0x118>)
 801491c:	4618      	mov	r0, r3
 801491e:	f000 f8bb 	bl	8014a98 <memcmp>
 8014922:	4603      	mov	r3, r0
 8014924:	2b00      	cmp	r3, #0
 8014926:	d106      	bne.n	8014936 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8014928:	687b      	ldr	r3, [r7, #4]
 801492a:	7b5b      	ldrb	r3, [r3, #13]
 801492c:	f043 0308 	orr.w	r3, r3, #8
 8014930:	b2da      	uxtb	r2, r3
 8014932:	687b      	ldr	r3, [r7, #4]
 8014934:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8014936:	89fb      	ldrh	r3, [r7, #14]
 8014938:	2b08      	cmp	r3, #8
 801493a:	d003      	beq.n	8014944 <ethernet_input+0xa0>
 801493c:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8014940:	d014      	beq.n	801496c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8014942:	e032      	b.n	80149aa <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8014944:	683b      	ldr	r3, [r7, #0]
 8014946:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801494a:	f003 0308 	and.w	r3, r3, #8
 801494e:	2b00      	cmp	r3, #0
 8014950:	d024      	beq.n	801499c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8014952:	8afb      	ldrh	r3, [r7, #22]
 8014954:	4619      	mov	r1, r3
 8014956:	6878      	ldr	r0, [r7, #4]
 8014958:	f7f6 ff48 	bl	800b7ec <pbuf_remove_header>
 801495c:	4603      	mov	r3, r0
 801495e:	2b00      	cmp	r3, #0
 8014960:	d11e      	bne.n	80149a0 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8014962:	6839      	ldr	r1, [r7, #0]
 8014964:	6878      	ldr	r0, [r7, #4]
 8014966:	f7fe ff21 	bl	80137ac <ip4_input>
      break;
 801496a:	e013      	b.n	8014994 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801496c:	683b      	ldr	r3, [r7, #0]
 801496e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014972:	f003 0308 	and.w	r3, r3, #8
 8014976:	2b00      	cmp	r3, #0
 8014978:	d014      	beq.n	80149a4 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801497a:	8afb      	ldrh	r3, [r7, #22]
 801497c:	4619      	mov	r1, r3
 801497e:	6878      	ldr	r0, [r7, #4]
 8014980:	f7f6 ff34 	bl	800b7ec <pbuf_remove_header>
 8014984:	4603      	mov	r3, r0
 8014986:	2b00      	cmp	r3, #0
 8014988:	d10e      	bne.n	80149a8 <ethernet_input+0x104>
        etharp_input(p, netif);
 801498a:	6839      	ldr	r1, [r7, #0]
 801498c:	6878      	ldr	r0, [r7, #4]
 801498e:	f7fe f8c1 	bl	8012b14 <etharp_input>
      break;
 8014992:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8014994:	2300      	movs	r3, #0
 8014996:	e00c      	b.n	80149b2 <ethernet_input+0x10e>
    goto free_and_return;
 8014998:	bf00      	nop
 801499a:	e006      	b.n	80149aa <ethernet_input+0x106>
        goto free_and_return;
 801499c:	bf00      	nop
 801499e:	e004      	b.n	80149aa <ethernet_input+0x106>
        goto free_and_return;
 80149a0:	bf00      	nop
 80149a2:	e002      	b.n	80149aa <ethernet_input+0x106>
        goto free_and_return;
 80149a4:	bf00      	nop
 80149a6:	e000      	b.n	80149aa <ethernet_input+0x106>
        goto free_and_return;
 80149a8:	bf00      	nop

free_and_return:
  pbuf_free(p);
 80149aa:	6878      	ldr	r0, [r7, #4]
 80149ac:	f7f6 ffa4 	bl	800b8f8 <pbuf_free>
  return ERR_OK;
 80149b0:	2300      	movs	r3, #0
}
 80149b2:	4618      	mov	r0, r3
 80149b4:	3718      	adds	r7, #24
 80149b6:	46bd      	mov	sp, r7
 80149b8:	bd80      	pop	{r7, pc}
 80149ba:	bf00      	nop
 80149bc:	0801ab30 	.word	0x0801ab30

080149c0 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 80149c0:	b580      	push	{r7, lr}
 80149c2:	b086      	sub	sp, #24
 80149c4:	af00      	add	r7, sp, #0
 80149c6:	60f8      	str	r0, [r7, #12]
 80149c8:	60b9      	str	r1, [r7, #8]
 80149ca:	607a      	str	r2, [r7, #4]
 80149cc:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80149ce:	8c3b      	ldrh	r3, [r7, #32]
 80149d0:	4618      	mov	r0, r3
 80149d2:	f7f5 fc33 	bl	800a23c <lwip_htons>
 80149d6:	4603      	mov	r3, r0
 80149d8:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80149da:	210e      	movs	r1, #14
 80149dc:	68b8      	ldr	r0, [r7, #8]
 80149de:	f7f6 fef5 	bl	800b7cc <pbuf_add_header>
 80149e2:	4603      	mov	r3, r0
 80149e4:	2b00      	cmp	r3, #0
 80149e6:	d125      	bne.n	8014a34 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80149e8:	68bb      	ldr	r3, [r7, #8]
 80149ea:	685b      	ldr	r3, [r3, #4]
 80149ec:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80149ee:	693b      	ldr	r3, [r7, #16]
 80149f0:	8afa      	ldrh	r2, [r7, #22]
 80149f2:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80149f4:	693b      	ldr	r3, [r7, #16]
 80149f6:	2206      	movs	r2, #6
 80149f8:	6839      	ldr	r1, [r7, #0]
 80149fa:	4618      	mov	r0, r3
 80149fc:	f000 f85c 	bl	8014ab8 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8014a00:	693b      	ldr	r3, [r7, #16]
 8014a02:	3306      	adds	r3, #6
 8014a04:	2206      	movs	r2, #6
 8014a06:	6879      	ldr	r1, [r7, #4]
 8014a08:	4618      	mov	r0, r3
 8014a0a:	f000 f855 	bl	8014ab8 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8014a0e:	68fb      	ldr	r3, [r7, #12]
 8014a10:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8014a14:	2b06      	cmp	r3, #6
 8014a16:	d006      	beq.n	8014a26 <ethernet_output+0x66>
 8014a18:	4b0a      	ldr	r3, [pc, #40]	; (8014a44 <ethernet_output+0x84>)
 8014a1a:	f44f 7299 	mov.w	r2, #306	; 0x132
 8014a1e:	490a      	ldr	r1, [pc, #40]	; (8014a48 <ethernet_output+0x88>)
 8014a20:	480a      	ldr	r0, [pc, #40]	; (8014a4c <ethernet_output+0x8c>)
 8014a22:	f000 f879 	bl	8014b18 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8014a26:	68fb      	ldr	r3, [r7, #12]
 8014a28:	699b      	ldr	r3, [r3, #24]
 8014a2a:	68b9      	ldr	r1, [r7, #8]
 8014a2c:	68f8      	ldr	r0, [r7, #12]
 8014a2e:	4798      	blx	r3
 8014a30:	4603      	mov	r3, r0
 8014a32:	e002      	b.n	8014a3a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8014a34:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8014a36:	f06f 0301 	mvn.w	r3, #1
}
 8014a3a:	4618      	mov	r0, r3
 8014a3c:	3718      	adds	r7, #24
 8014a3e:	46bd      	mov	sp, r7
 8014a40:	bd80      	pop	{r7, pc}
 8014a42:	bf00      	nop
 8014a44:	08018a70 	.word	0x08018a70
 8014a48:	08018aa8 	.word	0x08018aa8
 8014a4c:	08018adc 	.word	0x08018adc

08014a50 <__libc_init_array>:
 8014a50:	b570      	push	{r4, r5, r6, lr}
 8014a52:	4d0d      	ldr	r5, [pc, #52]	; (8014a88 <__libc_init_array+0x38>)
 8014a54:	4c0d      	ldr	r4, [pc, #52]	; (8014a8c <__libc_init_array+0x3c>)
 8014a56:	1b64      	subs	r4, r4, r5
 8014a58:	10a4      	asrs	r4, r4, #2
 8014a5a:	2600      	movs	r6, #0
 8014a5c:	42a6      	cmp	r6, r4
 8014a5e:	d109      	bne.n	8014a74 <__libc_init_array+0x24>
 8014a60:	4d0b      	ldr	r5, [pc, #44]	; (8014a90 <__libc_init_array+0x40>)
 8014a62:	4c0c      	ldr	r4, [pc, #48]	; (8014a94 <__libc_init_array+0x44>)
 8014a64:	f001 fad2 	bl	801600c <_init>
 8014a68:	1b64      	subs	r4, r4, r5
 8014a6a:	10a4      	asrs	r4, r4, #2
 8014a6c:	2600      	movs	r6, #0
 8014a6e:	42a6      	cmp	r6, r4
 8014a70:	d105      	bne.n	8014a7e <__libc_init_array+0x2e>
 8014a72:	bd70      	pop	{r4, r5, r6, pc}
 8014a74:	f855 3b04 	ldr.w	r3, [r5], #4
 8014a78:	4798      	blx	r3
 8014a7a:	3601      	adds	r6, #1
 8014a7c:	e7ee      	b.n	8014a5c <__libc_init_array+0xc>
 8014a7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8014a82:	4798      	blx	r3
 8014a84:	3601      	adds	r6, #1
 8014a86:	e7f2      	b.n	8014a6e <__libc_init_array+0x1e>
 8014a88:	0801ac90 	.word	0x0801ac90
 8014a8c:	0801ac90 	.word	0x0801ac90
 8014a90:	0801ac90 	.word	0x0801ac90
 8014a94:	0801ac94 	.word	0x0801ac94

08014a98 <memcmp>:
 8014a98:	b510      	push	{r4, lr}
 8014a9a:	3901      	subs	r1, #1
 8014a9c:	4402      	add	r2, r0
 8014a9e:	4290      	cmp	r0, r2
 8014aa0:	d101      	bne.n	8014aa6 <memcmp+0xe>
 8014aa2:	2000      	movs	r0, #0
 8014aa4:	e005      	b.n	8014ab2 <memcmp+0x1a>
 8014aa6:	7803      	ldrb	r3, [r0, #0]
 8014aa8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8014aac:	42a3      	cmp	r3, r4
 8014aae:	d001      	beq.n	8014ab4 <memcmp+0x1c>
 8014ab0:	1b18      	subs	r0, r3, r4
 8014ab2:	bd10      	pop	{r4, pc}
 8014ab4:	3001      	adds	r0, #1
 8014ab6:	e7f2      	b.n	8014a9e <memcmp+0x6>

08014ab8 <memcpy>:
 8014ab8:	440a      	add	r2, r1
 8014aba:	4291      	cmp	r1, r2
 8014abc:	f100 33ff 	add.w	r3, r0, #4294967295
 8014ac0:	d100      	bne.n	8014ac4 <memcpy+0xc>
 8014ac2:	4770      	bx	lr
 8014ac4:	b510      	push	{r4, lr}
 8014ac6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014aca:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014ace:	4291      	cmp	r1, r2
 8014ad0:	d1f9      	bne.n	8014ac6 <memcpy+0xe>
 8014ad2:	bd10      	pop	{r4, pc}

08014ad4 <memmove>:
 8014ad4:	4288      	cmp	r0, r1
 8014ad6:	b510      	push	{r4, lr}
 8014ad8:	eb01 0402 	add.w	r4, r1, r2
 8014adc:	d902      	bls.n	8014ae4 <memmove+0x10>
 8014ade:	4284      	cmp	r4, r0
 8014ae0:	4623      	mov	r3, r4
 8014ae2:	d807      	bhi.n	8014af4 <memmove+0x20>
 8014ae4:	1e43      	subs	r3, r0, #1
 8014ae6:	42a1      	cmp	r1, r4
 8014ae8:	d008      	beq.n	8014afc <memmove+0x28>
 8014aea:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014aee:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014af2:	e7f8      	b.n	8014ae6 <memmove+0x12>
 8014af4:	4402      	add	r2, r0
 8014af6:	4601      	mov	r1, r0
 8014af8:	428a      	cmp	r2, r1
 8014afa:	d100      	bne.n	8014afe <memmove+0x2a>
 8014afc:	bd10      	pop	{r4, pc}
 8014afe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014b02:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014b06:	e7f7      	b.n	8014af8 <memmove+0x24>

08014b08 <memset>:
 8014b08:	4402      	add	r2, r0
 8014b0a:	4603      	mov	r3, r0
 8014b0c:	4293      	cmp	r3, r2
 8014b0e:	d100      	bne.n	8014b12 <memset+0xa>
 8014b10:	4770      	bx	lr
 8014b12:	f803 1b01 	strb.w	r1, [r3], #1
 8014b16:	e7f9      	b.n	8014b0c <memset+0x4>

08014b18 <iprintf>:
 8014b18:	b40f      	push	{r0, r1, r2, r3}
 8014b1a:	4b0a      	ldr	r3, [pc, #40]	; (8014b44 <iprintf+0x2c>)
 8014b1c:	b513      	push	{r0, r1, r4, lr}
 8014b1e:	681c      	ldr	r4, [r3, #0]
 8014b20:	b124      	cbz	r4, 8014b2c <iprintf+0x14>
 8014b22:	69a3      	ldr	r3, [r4, #24]
 8014b24:	b913      	cbnz	r3, 8014b2c <iprintf+0x14>
 8014b26:	4620      	mov	r0, r4
 8014b28:	f000 fada 	bl	80150e0 <__sinit>
 8014b2c:	ab05      	add	r3, sp, #20
 8014b2e:	9a04      	ldr	r2, [sp, #16]
 8014b30:	68a1      	ldr	r1, [r4, #8]
 8014b32:	9301      	str	r3, [sp, #4]
 8014b34:	4620      	mov	r0, r4
 8014b36:	f000 fe59 	bl	80157ec <_vfiprintf_r>
 8014b3a:	b002      	add	sp, #8
 8014b3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014b40:	b004      	add	sp, #16
 8014b42:	4770      	bx	lr
 8014b44:	2000006c 	.word	0x2000006c

08014b48 <_puts_r>:
 8014b48:	b570      	push	{r4, r5, r6, lr}
 8014b4a:	460e      	mov	r6, r1
 8014b4c:	4605      	mov	r5, r0
 8014b4e:	b118      	cbz	r0, 8014b58 <_puts_r+0x10>
 8014b50:	6983      	ldr	r3, [r0, #24]
 8014b52:	b90b      	cbnz	r3, 8014b58 <_puts_r+0x10>
 8014b54:	f000 fac4 	bl	80150e0 <__sinit>
 8014b58:	69ab      	ldr	r3, [r5, #24]
 8014b5a:	68ac      	ldr	r4, [r5, #8]
 8014b5c:	b913      	cbnz	r3, 8014b64 <_puts_r+0x1c>
 8014b5e:	4628      	mov	r0, r5
 8014b60:	f000 fabe 	bl	80150e0 <__sinit>
 8014b64:	4b2c      	ldr	r3, [pc, #176]	; (8014c18 <_puts_r+0xd0>)
 8014b66:	429c      	cmp	r4, r3
 8014b68:	d120      	bne.n	8014bac <_puts_r+0x64>
 8014b6a:	686c      	ldr	r4, [r5, #4]
 8014b6c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014b6e:	07db      	lsls	r3, r3, #31
 8014b70:	d405      	bmi.n	8014b7e <_puts_r+0x36>
 8014b72:	89a3      	ldrh	r3, [r4, #12]
 8014b74:	0598      	lsls	r0, r3, #22
 8014b76:	d402      	bmi.n	8014b7e <_puts_r+0x36>
 8014b78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014b7a:	f000 fb61 	bl	8015240 <__retarget_lock_acquire_recursive>
 8014b7e:	89a3      	ldrh	r3, [r4, #12]
 8014b80:	0719      	lsls	r1, r3, #28
 8014b82:	d51d      	bpl.n	8014bc0 <_puts_r+0x78>
 8014b84:	6923      	ldr	r3, [r4, #16]
 8014b86:	b1db      	cbz	r3, 8014bc0 <_puts_r+0x78>
 8014b88:	3e01      	subs	r6, #1
 8014b8a:	68a3      	ldr	r3, [r4, #8]
 8014b8c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8014b90:	3b01      	subs	r3, #1
 8014b92:	60a3      	str	r3, [r4, #8]
 8014b94:	bb39      	cbnz	r1, 8014be6 <_puts_r+0x9e>
 8014b96:	2b00      	cmp	r3, #0
 8014b98:	da38      	bge.n	8014c0c <_puts_r+0xc4>
 8014b9a:	4622      	mov	r2, r4
 8014b9c:	210a      	movs	r1, #10
 8014b9e:	4628      	mov	r0, r5
 8014ba0:	f000 f8a6 	bl	8014cf0 <__swbuf_r>
 8014ba4:	3001      	adds	r0, #1
 8014ba6:	d011      	beq.n	8014bcc <_puts_r+0x84>
 8014ba8:	250a      	movs	r5, #10
 8014baa:	e011      	b.n	8014bd0 <_puts_r+0x88>
 8014bac:	4b1b      	ldr	r3, [pc, #108]	; (8014c1c <_puts_r+0xd4>)
 8014bae:	429c      	cmp	r4, r3
 8014bb0:	d101      	bne.n	8014bb6 <_puts_r+0x6e>
 8014bb2:	68ac      	ldr	r4, [r5, #8]
 8014bb4:	e7da      	b.n	8014b6c <_puts_r+0x24>
 8014bb6:	4b1a      	ldr	r3, [pc, #104]	; (8014c20 <_puts_r+0xd8>)
 8014bb8:	429c      	cmp	r4, r3
 8014bba:	bf08      	it	eq
 8014bbc:	68ec      	ldreq	r4, [r5, #12]
 8014bbe:	e7d5      	b.n	8014b6c <_puts_r+0x24>
 8014bc0:	4621      	mov	r1, r4
 8014bc2:	4628      	mov	r0, r5
 8014bc4:	f000 f8e6 	bl	8014d94 <__swsetup_r>
 8014bc8:	2800      	cmp	r0, #0
 8014bca:	d0dd      	beq.n	8014b88 <_puts_r+0x40>
 8014bcc:	f04f 35ff 	mov.w	r5, #4294967295
 8014bd0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014bd2:	07da      	lsls	r2, r3, #31
 8014bd4:	d405      	bmi.n	8014be2 <_puts_r+0x9a>
 8014bd6:	89a3      	ldrh	r3, [r4, #12]
 8014bd8:	059b      	lsls	r3, r3, #22
 8014bda:	d402      	bmi.n	8014be2 <_puts_r+0x9a>
 8014bdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014bde:	f000 fb30 	bl	8015242 <__retarget_lock_release_recursive>
 8014be2:	4628      	mov	r0, r5
 8014be4:	bd70      	pop	{r4, r5, r6, pc}
 8014be6:	2b00      	cmp	r3, #0
 8014be8:	da04      	bge.n	8014bf4 <_puts_r+0xac>
 8014bea:	69a2      	ldr	r2, [r4, #24]
 8014bec:	429a      	cmp	r2, r3
 8014bee:	dc06      	bgt.n	8014bfe <_puts_r+0xb6>
 8014bf0:	290a      	cmp	r1, #10
 8014bf2:	d004      	beq.n	8014bfe <_puts_r+0xb6>
 8014bf4:	6823      	ldr	r3, [r4, #0]
 8014bf6:	1c5a      	adds	r2, r3, #1
 8014bf8:	6022      	str	r2, [r4, #0]
 8014bfa:	7019      	strb	r1, [r3, #0]
 8014bfc:	e7c5      	b.n	8014b8a <_puts_r+0x42>
 8014bfe:	4622      	mov	r2, r4
 8014c00:	4628      	mov	r0, r5
 8014c02:	f000 f875 	bl	8014cf0 <__swbuf_r>
 8014c06:	3001      	adds	r0, #1
 8014c08:	d1bf      	bne.n	8014b8a <_puts_r+0x42>
 8014c0a:	e7df      	b.n	8014bcc <_puts_r+0x84>
 8014c0c:	6823      	ldr	r3, [r4, #0]
 8014c0e:	250a      	movs	r5, #10
 8014c10:	1c5a      	adds	r2, r3, #1
 8014c12:	6022      	str	r2, [r4, #0]
 8014c14:	701d      	strb	r5, [r3, #0]
 8014c16:	e7db      	b.n	8014bd0 <_puts_r+0x88>
 8014c18:	0801ac14 	.word	0x0801ac14
 8014c1c:	0801ac34 	.word	0x0801ac34
 8014c20:	0801abf4 	.word	0x0801abf4

08014c24 <puts>:
 8014c24:	4b02      	ldr	r3, [pc, #8]	; (8014c30 <puts+0xc>)
 8014c26:	4601      	mov	r1, r0
 8014c28:	6818      	ldr	r0, [r3, #0]
 8014c2a:	f7ff bf8d 	b.w	8014b48 <_puts_r>
 8014c2e:	bf00      	nop
 8014c30:	2000006c 	.word	0x2000006c

08014c34 <rand>:
 8014c34:	4b16      	ldr	r3, [pc, #88]	; (8014c90 <rand+0x5c>)
 8014c36:	b510      	push	{r4, lr}
 8014c38:	681c      	ldr	r4, [r3, #0]
 8014c3a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8014c3c:	b9b3      	cbnz	r3, 8014c6c <rand+0x38>
 8014c3e:	2018      	movs	r0, #24
 8014c40:	f000 fb66 	bl	8015310 <malloc>
 8014c44:	63a0      	str	r0, [r4, #56]	; 0x38
 8014c46:	b928      	cbnz	r0, 8014c54 <rand+0x20>
 8014c48:	4602      	mov	r2, r0
 8014c4a:	4b12      	ldr	r3, [pc, #72]	; (8014c94 <rand+0x60>)
 8014c4c:	4812      	ldr	r0, [pc, #72]	; (8014c98 <rand+0x64>)
 8014c4e:	214e      	movs	r1, #78	; 0x4e
 8014c50:	f000 f90e 	bl	8014e70 <__assert_func>
 8014c54:	4a11      	ldr	r2, [pc, #68]	; (8014c9c <rand+0x68>)
 8014c56:	4b12      	ldr	r3, [pc, #72]	; (8014ca0 <rand+0x6c>)
 8014c58:	e9c0 2300 	strd	r2, r3, [r0]
 8014c5c:	4b11      	ldr	r3, [pc, #68]	; (8014ca4 <rand+0x70>)
 8014c5e:	6083      	str	r3, [r0, #8]
 8014c60:	230b      	movs	r3, #11
 8014c62:	8183      	strh	r3, [r0, #12]
 8014c64:	2201      	movs	r2, #1
 8014c66:	2300      	movs	r3, #0
 8014c68:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8014c6c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8014c6e:	4a0e      	ldr	r2, [pc, #56]	; (8014ca8 <rand+0x74>)
 8014c70:	6920      	ldr	r0, [r4, #16]
 8014c72:	6963      	ldr	r3, [r4, #20]
 8014c74:	490d      	ldr	r1, [pc, #52]	; (8014cac <rand+0x78>)
 8014c76:	4342      	muls	r2, r0
 8014c78:	fb01 2203 	mla	r2, r1, r3, r2
 8014c7c:	fba0 0101 	umull	r0, r1, r0, r1
 8014c80:	1c43      	adds	r3, r0, #1
 8014c82:	eb42 0001 	adc.w	r0, r2, r1
 8014c86:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8014c8a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8014c8e:	bd10      	pop	{r4, pc}
 8014c90:	2000006c 	.word	0x2000006c
 8014c94:	0801ab44 	.word	0x0801ab44
 8014c98:	0801ab5b 	.word	0x0801ab5b
 8014c9c:	abcd330e 	.word	0xabcd330e
 8014ca0:	e66d1234 	.word	0xe66d1234
 8014ca4:	0005deec 	.word	0x0005deec
 8014ca8:	5851f42d 	.word	0x5851f42d
 8014cac:	4c957f2d 	.word	0x4c957f2d

08014cb0 <siprintf>:
 8014cb0:	b40e      	push	{r1, r2, r3}
 8014cb2:	b500      	push	{lr}
 8014cb4:	b09c      	sub	sp, #112	; 0x70
 8014cb6:	ab1d      	add	r3, sp, #116	; 0x74
 8014cb8:	9002      	str	r0, [sp, #8]
 8014cba:	9006      	str	r0, [sp, #24]
 8014cbc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8014cc0:	4809      	ldr	r0, [pc, #36]	; (8014ce8 <siprintf+0x38>)
 8014cc2:	9107      	str	r1, [sp, #28]
 8014cc4:	9104      	str	r1, [sp, #16]
 8014cc6:	4909      	ldr	r1, [pc, #36]	; (8014cec <siprintf+0x3c>)
 8014cc8:	f853 2b04 	ldr.w	r2, [r3], #4
 8014ccc:	9105      	str	r1, [sp, #20]
 8014cce:	6800      	ldr	r0, [r0, #0]
 8014cd0:	9301      	str	r3, [sp, #4]
 8014cd2:	a902      	add	r1, sp, #8
 8014cd4:	f000 fc60 	bl	8015598 <_svfiprintf_r>
 8014cd8:	9b02      	ldr	r3, [sp, #8]
 8014cda:	2200      	movs	r2, #0
 8014cdc:	701a      	strb	r2, [r3, #0]
 8014cde:	b01c      	add	sp, #112	; 0x70
 8014ce0:	f85d eb04 	ldr.w	lr, [sp], #4
 8014ce4:	b003      	add	sp, #12
 8014ce6:	4770      	bx	lr
 8014ce8:	2000006c 	.word	0x2000006c
 8014cec:	ffff0208 	.word	0xffff0208

08014cf0 <__swbuf_r>:
 8014cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014cf2:	460e      	mov	r6, r1
 8014cf4:	4614      	mov	r4, r2
 8014cf6:	4605      	mov	r5, r0
 8014cf8:	b118      	cbz	r0, 8014d02 <__swbuf_r+0x12>
 8014cfa:	6983      	ldr	r3, [r0, #24]
 8014cfc:	b90b      	cbnz	r3, 8014d02 <__swbuf_r+0x12>
 8014cfe:	f000 f9ef 	bl	80150e0 <__sinit>
 8014d02:	4b21      	ldr	r3, [pc, #132]	; (8014d88 <__swbuf_r+0x98>)
 8014d04:	429c      	cmp	r4, r3
 8014d06:	d12b      	bne.n	8014d60 <__swbuf_r+0x70>
 8014d08:	686c      	ldr	r4, [r5, #4]
 8014d0a:	69a3      	ldr	r3, [r4, #24]
 8014d0c:	60a3      	str	r3, [r4, #8]
 8014d0e:	89a3      	ldrh	r3, [r4, #12]
 8014d10:	071a      	lsls	r2, r3, #28
 8014d12:	d52f      	bpl.n	8014d74 <__swbuf_r+0x84>
 8014d14:	6923      	ldr	r3, [r4, #16]
 8014d16:	b36b      	cbz	r3, 8014d74 <__swbuf_r+0x84>
 8014d18:	6923      	ldr	r3, [r4, #16]
 8014d1a:	6820      	ldr	r0, [r4, #0]
 8014d1c:	1ac0      	subs	r0, r0, r3
 8014d1e:	6963      	ldr	r3, [r4, #20]
 8014d20:	b2f6      	uxtb	r6, r6
 8014d22:	4283      	cmp	r3, r0
 8014d24:	4637      	mov	r7, r6
 8014d26:	dc04      	bgt.n	8014d32 <__swbuf_r+0x42>
 8014d28:	4621      	mov	r1, r4
 8014d2a:	4628      	mov	r0, r5
 8014d2c:	f000 f944 	bl	8014fb8 <_fflush_r>
 8014d30:	bb30      	cbnz	r0, 8014d80 <__swbuf_r+0x90>
 8014d32:	68a3      	ldr	r3, [r4, #8]
 8014d34:	3b01      	subs	r3, #1
 8014d36:	60a3      	str	r3, [r4, #8]
 8014d38:	6823      	ldr	r3, [r4, #0]
 8014d3a:	1c5a      	adds	r2, r3, #1
 8014d3c:	6022      	str	r2, [r4, #0]
 8014d3e:	701e      	strb	r6, [r3, #0]
 8014d40:	6963      	ldr	r3, [r4, #20]
 8014d42:	3001      	adds	r0, #1
 8014d44:	4283      	cmp	r3, r0
 8014d46:	d004      	beq.n	8014d52 <__swbuf_r+0x62>
 8014d48:	89a3      	ldrh	r3, [r4, #12]
 8014d4a:	07db      	lsls	r3, r3, #31
 8014d4c:	d506      	bpl.n	8014d5c <__swbuf_r+0x6c>
 8014d4e:	2e0a      	cmp	r6, #10
 8014d50:	d104      	bne.n	8014d5c <__swbuf_r+0x6c>
 8014d52:	4621      	mov	r1, r4
 8014d54:	4628      	mov	r0, r5
 8014d56:	f000 f92f 	bl	8014fb8 <_fflush_r>
 8014d5a:	b988      	cbnz	r0, 8014d80 <__swbuf_r+0x90>
 8014d5c:	4638      	mov	r0, r7
 8014d5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014d60:	4b0a      	ldr	r3, [pc, #40]	; (8014d8c <__swbuf_r+0x9c>)
 8014d62:	429c      	cmp	r4, r3
 8014d64:	d101      	bne.n	8014d6a <__swbuf_r+0x7a>
 8014d66:	68ac      	ldr	r4, [r5, #8]
 8014d68:	e7cf      	b.n	8014d0a <__swbuf_r+0x1a>
 8014d6a:	4b09      	ldr	r3, [pc, #36]	; (8014d90 <__swbuf_r+0xa0>)
 8014d6c:	429c      	cmp	r4, r3
 8014d6e:	bf08      	it	eq
 8014d70:	68ec      	ldreq	r4, [r5, #12]
 8014d72:	e7ca      	b.n	8014d0a <__swbuf_r+0x1a>
 8014d74:	4621      	mov	r1, r4
 8014d76:	4628      	mov	r0, r5
 8014d78:	f000 f80c 	bl	8014d94 <__swsetup_r>
 8014d7c:	2800      	cmp	r0, #0
 8014d7e:	d0cb      	beq.n	8014d18 <__swbuf_r+0x28>
 8014d80:	f04f 37ff 	mov.w	r7, #4294967295
 8014d84:	e7ea      	b.n	8014d5c <__swbuf_r+0x6c>
 8014d86:	bf00      	nop
 8014d88:	0801ac14 	.word	0x0801ac14
 8014d8c:	0801ac34 	.word	0x0801ac34
 8014d90:	0801abf4 	.word	0x0801abf4

08014d94 <__swsetup_r>:
 8014d94:	4b32      	ldr	r3, [pc, #200]	; (8014e60 <__swsetup_r+0xcc>)
 8014d96:	b570      	push	{r4, r5, r6, lr}
 8014d98:	681d      	ldr	r5, [r3, #0]
 8014d9a:	4606      	mov	r6, r0
 8014d9c:	460c      	mov	r4, r1
 8014d9e:	b125      	cbz	r5, 8014daa <__swsetup_r+0x16>
 8014da0:	69ab      	ldr	r3, [r5, #24]
 8014da2:	b913      	cbnz	r3, 8014daa <__swsetup_r+0x16>
 8014da4:	4628      	mov	r0, r5
 8014da6:	f000 f99b 	bl	80150e0 <__sinit>
 8014daa:	4b2e      	ldr	r3, [pc, #184]	; (8014e64 <__swsetup_r+0xd0>)
 8014dac:	429c      	cmp	r4, r3
 8014dae:	d10f      	bne.n	8014dd0 <__swsetup_r+0x3c>
 8014db0:	686c      	ldr	r4, [r5, #4]
 8014db2:	89a3      	ldrh	r3, [r4, #12]
 8014db4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014db8:	0719      	lsls	r1, r3, #28
 8014dba:	d42c      	bmi.n	8014e16 <__swsetup_r+0x82>
 8014dbc:	06dd      	lsls	r5, r3, #27
 8014dbe:	d411      	bmi.n	8014de4 <__swsetup_r+0x50>
 8014dc0:	2309      	movs	r3, #9
 8014dc2:	6033      	str	r3, [r6, #0]
 8014dc4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8014dc8:	81a3      	strh	r3, [r4, #12]
 8014dca:	f04f 30ff 	mov.w	r0, #4294967295
 8014dce:	e03e      	b.n	8014e4e <__swsetup_r+0xba>
 8014dd0:	4b25      	ldr	r3, [pc, #148]	; (8014e68 <__swsetup_r+0xd4>)
 8014dd2:	429c      	cmp	r4, r3
 8014dd4:	d101      	bne.n	8014dda <__swsetup_r+0x46>
 8014dd6:	68ac      	ldr	r4, [r5, #8]
 8014dd8:	e7eb      	b.n	8014db2 <__swsetup_r+0x1e>
 8014dda:	4b24      	ldr	r3, [pc, #144]	; (8014e6c <__swsetup_r+0xd8>)
 8014ddc:	429c      	cmp	r4, r3
 8014dde:	bf08      	it	eq
 8014de0:	68ec      	ldreq	r4, [r5, #12]
 8014de2:	e7e6      	b.n	8014db2 <__swsetup_r+0x1e>
 8014de4:	0758      	lsls	r0, r3, #29
 8014de6:	d512      	bpl.n	8014e0e <__swsetup_r+0x7a>
 8014de8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014dea:	b141      	cbz	r1, 8014dfe <__swsetup_r+0x6a>
 8014dec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014df0:	4299      	cmp	r1, r3
 8014df2:	d002      	beq.n	8014dfa <__swsetup_r+0x66>
 8014df4:	4630      	mov	r0, r6
 8014df6:	f000 fa93 	bl	8015320 <_free_r>
 8014dfa:	2300      	movs	r3, #0
 8014dfc:	6363      	str	r3, [r4, #52]	; 0x34
 8014dfe:	89a3      	ldrh	r3, [r4, #12]
 8014e00:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014e04:	81a3      	strh	r3, [r4, #12]
 8014e06:	2300      	movs	r3, #0
 8014e08:	6063      	str	r3, [r4, #4]
 8014e0a:	6923      	ldr	r3, [r4, #16]
 8014e0c:	6023      	str	r3, [r4, #0]
 8014e0e:	89a3      	ldrh	r3, [r4, #12]
 8014e10:	f043 0308 	orr.w	r3, r3, #8
 8014e14:	81a3      	strh	r3, [r4, #12]
 8014e16:	6923      	ldr	r3, [r4, #16]
 8014e18:	b94b      	cbnz	r3, 8014e2e <__swsetup_r+0x9a>
 8014e1a:	89a3      	ldrh	r3, [r4, #12]
 8014e1c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014e20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014e24:	d003      	beq.n	8014e2e <__swsetup_r+0x9a>
 8014e26:	4621      	mov	r1, r4
 8014e28:	4630      	mov	r0, r6
 8014e2a:	f000 fa31 	bl	8015290 <__smakebuf_r>
 8014e2e:	89a0      	ldrh	r0, [r4, #12]
 8014e30:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014e34:	f010 0301 	ands.w	r3, r0, #1
 8014e38:	d00a      	beq.n	8014e50 <__swsetup_r+0xbc>
 8014e3a:	2300      	movs	r3, #0
 8014e3c:	60a3      	str	r3, [r4, #8]
 8014e3e:	6963      	ldr	r3, [r4, #20]
 8014e40:	425b      	negs	r3, r3
 8014e42:	61a3      	str	r3, [r4, #24]
 8014e44:	6923      	ldr	r3, [r4, #16]
 8014e46:	b943      	cbnz	r3, 8014e5a <__swsetup_r+0xc6>
 8014e48:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8014e4c:	d1ba      	bne.n	8014dc4 <__swsetup_r+0x30>
 8014e4e:	bd70      	pop	{r4, r5, r6, pc}
 8014e50:	0781      	lsls	r1, r0, #30
 8014e52:	bf58      	it	pl
 8014e54:	6963      	ldrpl	r3, [r4, #20]
 8014e56:	60a3      	str	r3, [r4, #8]
 8014e58:	e7f4      	b.n	8014e44 <__swsetup_r+0xb0>
 8014e5a:	2000      	movs	r0, #0
 8014e5c:	e7f7      	b.n	8014e4e <__swsetup_r+0xba>
 8014e5e:	bf00      	nop
 8014e60:	2000006c 	.word	0x2000006c
 8014e64:	0801ac14 	.word	0x0801ac14
 8014e68:	0801ac34 	.word	0x0801ac34
 8014e6c:	0801abf4 	.word	0x0801abf4

08014e70 <__assert_func>:
 8014e70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014e72:	4614      	mov	r4, r2
 8014e74:	461a      	mov	r2, r3
 8014e76:	4b09      	ldr	r3, [pc, #36]	; (8014e9c <__assert_func+0x2c>)
 8014e78:	681b      	ldr	r3, [r3, #0]
 8014e7a:	4605      	mov	r5, r0
 8014e7c:	68d8      	ldr	r0, [r3, #12]
 8014e7e:	b14c      	cbz	r4, 8014e94 <__assert_func+0x24>
 8014e80:	4b07      	ldr	r3, [pc, #28]	; (8014ea0 <__assert_func+0x30>)
 8014e82:	9100      	str	r1, [sp, #0]
 8014e84:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014e88:	4906      	ldr	r1, [pc, #24]	; (8014ea4 <__assert_func+0x34>)
 8014e8a:	462b      	mov	r3, r5
 8014e8c:	f000 f9a6 	bl	80151dc <fiprintf>
 8014e90:	f000 ffd6 	bl	8015e40 <abort>
 8014e94:	4b04      	ldr	r3, [pc, #16]	; (8014ea8 <__assert_func+0x38>)
 8014e96:	461c      	mov	r4, r3
 8014e98:	e7f3      	b.n	8014e82 <__assert_func+0x12>
 8014e9a:	bf00      	nop
 8014e9c:	2000006c 	.word	0x2000006c
 8014ea0:	0801abb6 	.word	0x0801abb6
 8014ea4:	0801abc3 	.word	0x0801abc3
 8014ea8:	0801abf1 	.word	0x0801abf1

08014eac <__sflush_r>:
 8014eac:	898a      	ldrh	r2, [r1, #12]
 8014eae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014eb2:	4605      	mov	r5, r0
 8014eb4:	0710      	lsls	r0, r2, #28
 8014eb6:	460c      	mov	r4, r1
 8014eb8:	d458      	bmi.n	8014f6c <__sflush_r+0xc0>
 8014eba:	684b      	ldr	r3, [r1, #4]
 8014ebc:	2b00      	cmp	r3, #0
 8014ebe:	dc05      	bgt.n	8014ecc <__sflush_r+0x20>
 8014ec0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014ec2:	2b00      	cmp	r3, #0
 8014ec4:	dc02      	bgt.n	8014ecc <__sflush_r+0x20>
 8014ec6:	2000      	movs	r0, #0
 8014ec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014ecc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014ece:	2e00      	cmp	r6, #0
 8014ed0:	d0f9      	beq.n	8014ec6 <__sflush_r+0x1a>
 8014ed2:	2300      	movs	r3, #0
 8014ed4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014ed8:	682f      	ldr	r7, [r5, #0]
 8014eda:	602b      	str	r3, [r5, #0]
 8014edc:	d032      	beq.n	8014f44 <__sflush_r+0x98>
 8014ede:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014ee0:	89a3      	ldrh	r3, [r4, #12]
 8014ee2:	075a      	lsls	r2, r3, #29
 8014ee4:	d505      	bpl.n	8014ef2 <__sflush_r+0x46>
 8014ee6:	6863      	ldr	r3, [r4, #4]
 8014ee8:	1ac0      	subs	r0, r0, r3
 8014eea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014eec:	b10b      	cbz	r3, 8014ef2 <__sflush_r+0x46>
 8014eee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014ef0:	1ac0      	subs	r0, r0, r3
 8014ef2:	2300      	movs	r3, #0
 8014ef4:	4602      	mov	r2, r0
 8014ef6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014ef8:	6a21      	ldr	r1, [r4, #32]
 8014efa:	4628      	mov	r0, r5
 8014efc:	47b0      	blx	r6
 8014efe:	1c43      	adds	r3, r0, #1
 8014f00:	89a3      	ldrh	r3, [r4, #12]
 8014f02:	d106      	bne.n	8014f12 <__sflush_r+0x66>
 8014f04:	6829      	ldr	r1, [r5, #0]
 8014f06:	291d      	cmp	r1, #29
 8014f08:	d82c      	bhi.n	8014f64 <__sflush_r+0xb8>
 8014f0a:	4a2a      	ldr	r2, [pc, #168]	; (8014fb4 <__sflush_r+0x108>)
 8014f0c:	40ca      	lsrs	r2, r1
 8014f0e:	07d6      	lsls	r6, r2, #31
 8014f10:	d528      	bpl.n	8014f64 <__sflush_r+0xb8>
 8014f12:	2200      	movs	r2, #0
 8014f14:	6062      	str	r2, [r4, #4]
 8014f16:	04d9      	lsls	r1, r3, #19
 8014f18:	6922      	ldr	r2, [r4, #16]
 8014f1a:	6022      	str	r2, [r4, #0]
 8014f1c:	d504      	bpl.n	8014f28 <__sflush_r+0x7c>
 8014f1e:	1c42      	adds	r2, r0, #1
 8014f20:	d101      	bne.n	8014f26 <__sflush_r+0x7a>
 8014f22:	682b      	ldr	r3, [r5, #0]
 8014f24:	b903      	cbnz	r3, 8014f28 <__sflush_r+0x7c>
 8014f26:	6560      	str	r0, [r4, #84]	; 0x54
 8014f28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014f2a:	602f      	str	r7, [r5, #0]
 8014f2c:	2900      	cmp	r1, #0
 8014f2e:	d0ca      	beq.n	8014ec6 <__sflush_r+0x1a>
 8014f30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014f34:	4299      	cmp	r1, r3
 8014f36:	d002      	beq.n	8014f3e <__sflush_r+0x92>
 8014f38:	4628      	mov	r0, r5
 8014f3a:	f000 f9f1 	bl	8015320 <_free_r>
 8014f3e:	2000      	movs	r0, #0
 8014f40:	6360      	str	r0, [r4, #52]	; 0x34
 8014f42:	e7c1      	b.n	8014ec8 <__sflush_r+0x1c>
 8014f44:	6a21      	ldr	r1, [r4, #32]
 8014f46:	2301      	movs	r3, #1
 8014f48:	4628      	mov	r0, r5
 8014f4a:	47b0      	blx	r6
 8014f4c:	1c41      	adds	r1, r0, #1
 8014f4e:	d1c7      	bne.n	8014ee0 <__sflush_r+0x34>
 8014f50:	682b      	ldr	r3, [r5, #0]
 8014f52:	2b00      	cmp	r3, #0
 8014f54:	d0c4      	beq.n	8014ee0 <__sflush_r+0x34>
 8014f56:	2b1d      	cmp	r3, #29
 8014f58:	d001      	beq.n	8014f5e <__sflush_r+0xb2>
 8014f5a:	2b16      	cmp	r3, #22
 8014f5c:	d101      	bne.n	8014f62 <__sflush_r+0xb6>
 8014f5e:	602f      	str	r7, [r5, #0]
 8014f60:	e7b1      	b.n	8014ec6 <__sflush_r+0x1a>
 8014f62:	89a3      	ldrh	r3, [r4, #12]
 8014f64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014f68:	81a3      	strh	r3, [r4, #12]
 8014f6a:	e7ad      	b.n	8014ec8 <__sflush_r+0x1c>
 8014f6c:	690f      	ldr	r7, [r1, #16]
 8014f6e:	2f00      	cmp	r7, #0
 8014f70:	d0a9      	beq.n	8014ec6 <__sflush_r+0x1a>
 8014f72:	0793      	lsls	r3, r2, #30
 8014f74:	680e      	ldr	r6, [r1, #0]
 8014f76:	bf08      	it	eq
 8014f78:	694b      	ldreq	r3, [r1, #20]
 8014f7a:	600f      	str	r7, [r1, #0]
 8014f7c:	bf18      	it	ne
 8014f7e:	2300      	movne	r3, #0
 8014f80:	eba6 0807 	sub.w	r8, r6, r7
 8014f84:	608b      	str	r3, [r1, #8]
 8014f86:	f1b8 0f00 	cmp.w	r8, #0
 8014f8a:	dd9c      	ble.n	8014ec6 <__sflush_r+0x1a>
 8014f8c:	6a21      	ldr	r1, [r4, #32]
 8014f8e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014f90:	4643      	mov	r3, r8
 8014f92:	463a      	mov	r2, r7
 8014f94:	4628      	mov	r0, r5
 8014f96:	47b0      	blx	r6
 8014f98:	2800      	cmp	r0, #0
 8014f9a:	dc06      	bgt.n	8014faa <__sflush_r+0xfe>
 8014f9c:	89a3      	ldrh	r3, [r4, #12]
 8014f9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014fa2:	81a3      	strh	r3, [r4, #12]
 8014fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8014fa8:	e78e      	b.n	8014ec8 <__sflush_r+0x1c>
 8014faa:	4407      	add	r7, r0
 8014fac:	eba8 0800 	sub.w	r8, r8, r0
 8014fb0:	e7e9      	b.n	8014f86 <__sflush_r+0xda>
 8014fb2:	bf00      	nop
 8014fb4:	20400001 	.word	0x20400001

08014fb8 <_fflush_r>:
 8014fb8:	b538      	push	{r3, r4, r5, lr}
 8014fba:	690b      	ldr	r3, [r1, #16]
 8014fbc:	4605      	mov	r5, r0
 8014fbe:	460c      	mov	r4, r1
 8014fc0:	b913      	cbnz	r3, 8014fc8 <_fflush_r+0x10>
 8014fc2:	2500      	movs	r5, #0
 8014fc4:	4628      	mov	r0, r5
 8014fc6:	bd38      	pop	{r3, r4, r5, pc}
 8014fc8:	b118      	cbz	r0, 8014fd2 <_fflush_r+0x1a>
 8014fca:	6983      	ldr	r3, [r0, #24]
 8014fcc:	b90b      	cbnz	r3, 8014fd2 <_fflush_r+0x1a>
 8014fce:	f000 f887 	bl	80150e0 <__sinit>
 8014fd2:	4b14      	ldr	r3, [pc, #80]	; (8015024 <_fflush_r+0x6c>)
 8014fd4:	429c      	cmp	r4, r3
 8014fd6:	d11b      	bne.n	8015010 <_fflush_r+0x58>
 8014fd8:	686c      	ldr	r4, [r5, #4]
 8014fda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014fde:	2b00      	cmp	r3, #0
 8014fe0:	d0ef      	beq.n	8014fc2 <_fflush_r+0xa>
 8014fe2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014fe4:	07d0      	lsls	r0, r2, #31
 8014fe6:	d404      	bmi.n	8014ff2 <_fflush_r+0x3a>
 8014fe8:	0599      	lsls	r1, r3, #22
 8014fea:	d402      	bmi.n	8014ff2 <_fflush_r+0x3a>
 8014fec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014fee:	f000 f927 	bl	8015240 <__retarget_lock_acquire_recursive>
 8014ff2:	4628      	mov	r0, r5
 8014ff4:	4621      	mov	r1, r4
 8014ff6:	f7ff ff59 	bl	8014eac <__sflush_r>
 8014ffa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014ffc:	07da      	lsls	r2, r3, #31
 8014ffe:	4605      	mov	r5, r0
 8015000:	d4e0      	bmi.n	8014fc4 <_fflush_r+0xc>
 8015002:	89a3      	ldrh	r3, [r4, #12]
 8015004:	059b      	lsls	r3, r3, #22
 8015006:	d4dd      	bmi.n	8014fc4 <_fflush_r+0xc>
 8015008:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801500a:	f000 f91a 	bl	8015242 <__retarget_lock_release_recursive>
 801500e:	e7d9      	b.n	8014fc4 <_fflush_r+0xc>
 8015010:	4b05      	ldr	r3, [pc, #20]	; (8015028 <_fflush_r+0x70>)
 8015012:	429c      	cmp	r4, r3
 8015014:	d101      	bne.n	801501a <_fflush_r+0x62>
 8015016:	68ac      	ldr	r4, [r5, #8]
 8015018:	e7df      	b.n	8014fda <_fflush_r+0x22>
 801501a:	4b04      	ldr	r3, [pc, #16]	; (801502c <_fflush_r+0x74>)
 801501c:	429c      	cmp	r4, r3
 801501e:	bf08      	it	eq
 8015020:	68ec      	ldreq	r4, [r5, #12]
 8015022:	e7da      	b.n	8014fda <_fflush_r+0x22>
 8015024:	0801ac14 	.word	0x0801ac14
 8015028:	0801ac34 	.word	0x0801ac34
 801502c:	0801abf4 	.word	0x0801abf4

08015030 <std>:
 8015030:	2300      	movs	r3, #0
 8015032:	b510      	push	{r4, lr}
 8015034:	4604      	mov	r4, r0
 8015036:	e9c0 3300 	strd	r3, r3, [r0]
 801503a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801503e:	6083      	str	r3, [r0, #8]
 8015040:	8181      	strh	r1, [r0, #12]
 8015042:	6643      	str	r3, [r0, #100]	; 0x64
 8015044:	81c2      	strh	r2, [r0, #14]
 8015046:	6183      	str	r3, [r0, #24]
 8015048:	4619      	mov	r1, r3
 801504a:	2208      	movs	r2, #8
 801504c:	305c      	adds	r0, #92	; 0x5c
 801504e:	f7ff fd5b 	bl	8014b08 <memset>
 8015052:	4b05      	ldr	r3, [pc, #20]	; (8015068 <std+0x38>)
 8015054:	6263      	str	r3, [r4, #36]	; 0x24
 8015056:	4b05      	ldr	r3, [pc, #20]	; (801506c <std+0x3c>)
 8015058:	62a3      	str	r3, [r4, #40]	; 0x28
 801505a:	4b05      	ldr	r3, [pc, #20]	; (8015070 <std+0x40>)
 801505c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801505e:	4b05      	ldr	r3, [pc, #20]	; (8015074 <std+0x44>)
 8015060:	6224      	str	r4, [r4, #32]
 8015062:	6323      	str	r3, [r4, #48]	; 0x30
 8015064:	bd10      	pop	{r4, pc}
 8015066:	bf00      	nop
 8015068:	08015d95 	.word	0x08015d95
 801506c:	08015db7 	.word	0x08015db7
 8015070:	08015def 	.word	0x08015def
 8015074:	08015e13 	.word	0x08015e13

08015078 <_cleanup_r>:
 8015078:	4901      	ldr	r1, [pc, #4]	; (8015080 <_cleanup_r+0x8>)
 801507a:	f000 b8c1 	b.w	8015200 <_fwalk_reent>
 801507e:	bf00      	nop
 8015080:	08014fb9 	.word	0x08014fb9

08015084 <__sfmoreglue>:
 8015084:	b570      	push	{r4, r5, r6, lr}
 8015086:	2268      	movs	r2, #104	; 0x68
 8015088:	1e4d      	subs	r5, r1, #1
 801508a:	4355      	muls	r5, r2
 801508c:	460e      	mov	r6, r1
 801508e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8015092:	f000 f9b1 	bl	80153f8 <_malloc_r>
 8015096:	4604      	mov	r4, r0
 8015098:	b140      	cbz	r0, 80150ac <__sfmoreglue+0x28>
 801509a:	2100      	movs	r1, #0
 801509c:	e9c0 1600 	strd	r1, r6, [r0]
 80150a0:	300c      	adds	r0, #12
 80150a2:	60a0      	str	r0, [r4, #8]
 80150a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80150a8:	f7ff fd2e 	bl	8014b08 <memset>
 80150ac:	4620      	mov	r0, r4
 80150ae:	bd70      	pop	{r4, r5, r6, pc}

080150b0 <__sfp_lock_acquire>:
 80150b0:	4801      	ldr	r0, [pc, #4]	; (80150b8 <__sfp_lock_acquire+0x8>)
 80150b2:	f000 b8c5 	b.w	8015240 <__retarget_lock_acquire_recursive>
 80150b6:	bf00      	nop
 80150b8:	20008d05 	.word	0x20008d05

080150bc <__sfp_lock_release>:
 80150bc:	4801      	ldr	r0, [pc, #4]	; (80150c4 <__sfp_lock_release+0x8>)
 80150be:	f000 b8c0 	b.w	8015242 <__retarget_lock_release_recursive>
 80150c2:	bf00      	nop
 80150c4:	20008d05 	.word	0x20008d05

080150c8 <__sinit_lock_acquire>:
 80150c8:	4801      	ldr	r0, [pc, #4]	; (80150d0 <__sinit_lock_acquire+0x8>)
 80150ca:	f000 b8b9 	b.w	8015240 <__retarget_lock_acquire_recursive>
 80150ce:	bf00      	nop
 80150d0:	20008d06 	.word	0x20008d06

080150d4 <__sinit_lock_release>:
 80150d4:	4801      	ldr	r0, [pc, #4]	; (80150dc <__sinit_lock_release+0x8>)
 80150d6:	f000 b8b4 	b.w	8015242 <__retarget_lock_release_recursive>
 80150da:	bf00      	nop
 80150dc:	20008d06 	.word	0x20008d06

080150e0 <__sinit>:
 80150e0:	b510      	push	{r4, lr}
 80150e2:	4604      	mov	r4, r0
 80150e4:	f7ff fff0 	bl	80150c8 <__sinit_lock_acquire>
 80150e8:	69a3      	ldr	r3, [r4, #24]
 80150ea:	b11b      	cbz	r3, 80150f4 <__sinit+0x14>
 80150ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80150f0:	f7ff bff0 	b.w	80150d4 <__sinit_lock_release>
 80150f4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80150f8:	6523      	str	r3, [r4, #80]	; 0x50
 80150fa:	4b13      	ldr	r3, [pc, #76]	; (8015148 <__sinit+0x68>)
 80150fc:	4a13      	ldr	r2, [pc, #76]	; (801514c <__sinit+0x6c>)
 80150fe:	681b      	ldr	r3, [r3, #0]
 8015100:	62a2      	str	r2, [r4, #40]	; 0x28
 8015102:	42a3      	cmp	r3, r4
 8015104:	bf04      	itt	eq
 8015106:	2301      	moveq	r3, #1
 8015108:	61a3      	streq	r3, [r4, #24]
 801510a:	4620      	mov	r0, r4
 801510c:	f000 f820 	bl	8015150 <__sfp>
 8015110:	6060      	str	r0, [r4, #4]
 8015112:	4620      	mov	r0, r4
 8015114:	f000 f81c 	bl	8015150 <__sfp>
 8015118:	60a0      	str	r0, [r4, #8]
 801511a:	4620      	mov	r0, r4
 801511c:	f000 f818 	bl	8015150 <__sfp>
 8015120:	2200      	movs	r2, #0
 8015122:	60e0      	str	r0, [r4, #12]
 8015124:	2104      	movs	r1, #4
 8015126:	6860      	ldr	r0, [r4, #4]
 8015128:	f7ff ff82 	bl	8015030 <std>
 801512c:	68a0      	ldr	r0, [r4, #8]
 801512e:	2201      	movs	r2, #1
 8015130:	2109      	movs	r1, #9
 8015132:	f7ff ff7d 	bl	8015030 <std>
 8015136:	68e0      	ldr	r0, [r4, #12]
 8015138:	2202      	movs	r2, #2
 801513a:	2112      	movs	r1, #18
 801513c:	f7ff ff78 	bl	8015030 <std>
 8015140:	2301      	movs	r3, #1
 8015142:	61a3      	str	r3, [r4, #24]
 8015144:	e7d2      	b.n	80150ec <__sinit+0xc>
 8015146:	bf00      	nop
 8015148:	0801ab40 	.word	0x0801ab40
 801514c:	08015079 	.word	0x08015079

08015150 <__sfp>:
 8015150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015152:	4607      	mov	r7, r0
 8015154:	f7ff ffac 	bl	80150b0 <__sfp_lock_acquire>
 8015158:	4b1e      	ldr	r3, [pc, #120]	; (80151d4 <__sfp+0x84>)
 801515a:	681e      	ldr	r6, [r3, #0]
 801515c:	69b3      	ldr	r3, [r6, #24]
 801515e:	b913      	cbnz	r3, 8015166 <__sfp+0x16>
 8015160:	4630      	mov	r0, r6
 8015162:	f7ff ffbd 	bl	80150e0 <__sinit>
 8015166:	3648      	adds	r6, #72	; 0x48
 8015168:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801516c:	3b01      	subs	r3, #1
 801516e:	d503      	bpl.n	8015178 <__sfp+0x28>
 8015170:	6833      	ldr	r3, [r6, #0]
 8015172:	b30b      	cbz	r3, 80151b8 <__sfp+0x68>
 8015174:	6836      	ldr	r6, [r6, #0]
 8015176:	e7f7      	b.n	8015168 <__sfp+0x18>
 8015178:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801517c:	b9d5      	cbnz	r5, 80151b4 <__sfp+0x64>
 801517e:	4b16      	ldr	r3, [pc, #88]	; (80151d8 <__sfp+0x88>)
 8015180:	60e3      	str	r3, [r4, #12]
 8015182:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8015186:	6665      	str	r5, [r4, #100]	; 0x64
 8015188:	f000 f859 	bl	801523e <__retarget_lock_init_recursive>
 801518c:	f7ff ff96 	bl	80150bc <__sfp_lock_release>
 8015190:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8015194:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8015198:	6025      	str	r5, [r4, #0]
 801519a:	61a5      	str	r5, [r4, #24]
 801519c:	2208      	movs	r2, #8
 801519e:	4629      	mov	r1, r5
 80151a0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80151a4:	f7ff fcb0 	bl	8014b08 <memset>
 80151a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80151ac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80151b0:	4620      	mov	r0, r4
 80151b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80151b4:	3468      	adds	r4, #104	; 0x68
 80151b6:	e7d9      	b.n	801516c <__sfp+0x1c>
 80151b8:	2104      	movs	r1, #4
 80151ba:	4638      	mov	r0, r7
 80151bc:	f7ff ff62 	bl	8015084 <__sfmoreglue>
 80151c0:	4604      	mov	r4, r0
 80151c2:	6030      	str	r0, [r6, #0]
 80151c4:	2800      	cmp	r0, #0
 80151c6:	d1d5      	bne.n	8015174 <__sfp+0x24>
 80151c8:	f7ff ff78 	bl	80150bc <__sfp_lock_release>
 80151cc:	230c      	movs	r3, #12
 80151ce:	603b      	str	r3, [r7, #0]
 80151d0:	e7ee      	b.n	80151b0 <__sfp+0x60>
 80151d2:	bf00      	nop
 80151d4:	0801ab40 	.word	0x0801ab40
 80151d8:	ffff0001 	.word	0xffff0001

080151dc <fiprintf>:
 80151dc:	b40e      	push	{r1, r2, r3}
 80151de:	b503      	push	{r0, r1, lr}
 80151e0:	4601      	mov	r1, r0
 80151e2:	ab03      	add	r3, sp, #12
 80151e4:	4805      	ldr	r0, [pc, #20]	; (80151fc <fiprintf+0x20>)
 80151e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80151ea:	6800      	ldr	r0, [r0, #0]
 80151ec:	9301      	str	r3, [sp, #4]
 80151ee:	f000 fafd 	bl	80157ec <_vfiprintf_r>
 80151f2:	b002      	add	sp, #8
 80151f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80151f8:	b003      	add	sp, #12
 80151fa:	4770      	bx	lr
 80151fc:	2000006c 	.word	0x2000006c

08015200 <_fwalk_reent>:
 8015200:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015204:	4606      	mov	r6, r0
 8015206:	4688      	mov	r8, r1
 8015208:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801520c:	2700      	movs	r7, #0
 801520e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8015212:	f1b9 0901 	subs.w	r9, r9, #1
 8015216:	d505      	bpl.n	8015224 <_fwalk_reent+0x24>
 8015218:	6824      	ldr	r4, [r4, #0]
 801521a:	2c00      	cmp	r4, #0
 801521c:	d1f7      	bne.n	801520e <_fwalk_reent+0xe>
 801521e:	4638      	mov	r0, r7
 8015220:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015224:	89ab      	ldrh	r3, [r5, #12]
 8015226:	2b01      	cmp	r3, #1
 8015228:	d907      	bls.n	801523a <_fwalk_reent+0x3a>
 801522a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801522e:	3301      	adds	r3, #1
 8015230:	d003      	beq.n	801523a <_fwalk_reent+0x3a>
 8015232:	4629      	mov	r1, r5
 8015234:	4630      	mov	r0, r6
 8015236:	47c0      	blx	r8
 8015238:	4307      	orrs	r7, r0
 801523a:	3568      	adds	r5, #104	; 0x68
 801523c:	e7e9      	b.n	8015212 <_fwalk_reent+0x12>

0801523e <__retarget_lock_init_recursive>:
 801523e:	4770      	bx	lr

08015240 <__retarget_lock_acquire_recursive>:
 8015240:	4770      	bx	lr

08015242 <__retarget_lock_release_recursive>:
 8015242:	4770      	bx	lr

08015244 <__swhatbuf_r>:
 8015244:	b570      	push	{r4, r5, r6, lr}
 8015246:	460e      	mov	r6, r1
 8015248:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801524c:	2900      	cmp	r1, #0
 801524e:	b096      	sub	sp, #88	; 0x58
 8015250:	4614      	mov	r4, r2
 8015252:	461d      	mov	r5, r3
 8015254:	da08      	bge.n	8015268 <__swhatbuf_r+0x24>
 8015256:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801525a:	2200      	movs	r2, #0
 801525c:	602a      	str	r2, [r5, #0]
 801525e:	061a      	lsls	r2, r3, #24
 8015260:	d410      	bmi.n	8015284 <__swhatbuf_r+0x40>
 8015262:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015266:	e00e      	b.n	8015286 <__swhatbuf_r+0x42>
 8015268:	466a      	mov	r2, sp
 801526a:	f000 fe01 	bl	8015e70 <_fstat_r>
 801526e:	2800      	cmp	r0, #0
 8015270:	dbf1      	blt.n	8015256 <__swhatbuf_r+0x12>
 8015272:	9a01      	ldr	r2, [sp, #4]
 8015274:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8015278:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801527c:	425a      	negs	r2, r3
 801527e:	415a      	adcs	r2, r3
 8015280:	602a      	str	r2, [r5, #0]
 8015282:	e7ee      	b.n	8015262 <__swhatbuf_r+0x1e>
 8015284:	2340      	movs	r3, #64	; 0x40
 8015286:	2000      	movs	r0, #0
 8015288:	6023      	str	r3, [r4, #0]
 801528a:	b016      	add	sp, #88	; 0x58
 801528c:	bd70      	pop	{r4, r5, r6, pc}
	...

08015290 <__smakebuf_r>:
 8015290:	898b      	ldrh	r3, [r1, #12]
 8015292:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015294:	079d      	lsls	r5, r3, #30
 8015296:	4606      	mov	r6, r0
 8015298:	460c      	mov	r4, r1
 801529a:	d507      	bpl.n	80152ac <__smakebuf_r+0x1c>
 801529c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80152a0:	6023      	str	r3, [r4, #0]
 80152a2:	6123      	str	r3, [r4, #16]
 80152a4:	2301      	movs	r3, #1
 80152a6:	6163      	str	r3, [r4, #20]
 80152a8:	b002      	add	sp, #8
 80152aa:	bd70      	pop	{r4, r5, r6, pc}
 80152ac:	ab01      	add	r3, sp, #4
 80152ae:	466a      	mov	r2, sp
 80152b0:	f7ff ffc8 	bl	8015244 <__swhatbuf_r>
 80152b4:	9900      	ldr	r1, [sp, #0]
 80152b6:	4605      	mov	r5, r0
 80152b8:	4630      	mov	r0, r6
 80152ba:	f000 f89d 	bl	80153f8 <_malloc_r>
 80152be:	b948      	cbnz	r0, 80152d4 <__smakebuf_r+0x44>
 80152c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80152c4:	059a      	lsls	r2, r3, #22
 80152c6:	d4ef      	bmi.n	80152a8 <__smakebuf_r+0x18>
 80152c8:	f023 0303 	bic.w	r3, r3, #3
 80152cc:	f043 0302 	orr.w	r3, r3, #2
 80152d0:	81a3      	strh	r3, [r4, #12]
 80152d2:	e7e3      	b.n	801529c <__smakebuf_r+0xc>
 80152d4:	4b0d      	ldr	r3, [pc, #52]	; (801530c <__smakebuf_r+0x7c>)
 80152d6:	62b3      	str	r3, [r6, #40]	; 0x28
 80152d8:	89a3      	ldrh	r3, [r4, #12]
 80152da:	6020      	str	r0, [r4, #0]
 80152dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80152e0:	81a3      	strh	r3, [r4, #12]
 80152e2:	9b00      	ldr	r3, [sp, #0]
 80152e4:	6163      	str	r3, [r4, #20]
 80152e6:	9b01      	ldr	r3, [sp, #4]
 80152e8:	6120      	str	r0, [r4, #16]
 80152ea:	b15b      	cbz	r3, 8015304 <__smakebuf_r+0x74>
 80152ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80152f0:	4630      	mov	r0, r6
 80152f2:	f000 fdcf 	bl	8015e94 <_isatty_r>
 80152f6:	b128      	cbz	r0, 8015304 <__smakebuf_r+0x74>
 80152f8:	89a3      	ldrh	r3, [r4, #12]
 80152fa:	f023 0303 	bic.w	r3, r3, #3
 80152fe:	f043 0301 	orr.w	r3, r3, #1
 8015302:	81a3      	strh	r3, [r4, #12]
 8015304:	89a0      	ldrh	r0, [r4, #12]
 8015306:	4305      	orrs	r5, r0
 8015308:	81a5      	strh	r5, [r4, #12]
 801530a:	e7cd      	b.n	80152a8 <__smakebuf_r+0x18>
 801530c:	08015079 	.word	0x08015079

08015310 <malloc>:
 8015310:	4b02      	ldr	r3, [pc, #8]	; (801531c <malloc+0xc>)
 8015312:	4601      	mov	r1, r0
 8015314:	6818      	ldr	r0, [r3, #0]
 8015316:	f000 b86f 	b.w	80153f8 <_malloc_r>
 801531a:	bf00      	nop
 801531c:	2000006c 	.word	0x2000006c

08015320 <_free_r>:
 8015320:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015322:	2900      	cmp	r1, #0
 8015324:	d044      	beq.n	80153b0 <_free_r+0x90>
 8015326:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801532a:	9001      	str	r0, [sp, #4]
 801532c:	2b00      	cmp	r3, #0
 801532e:	f1a1 0404 	sub.w	r4, r1, #4
 8015332:	bfb8      	it	lt
 8015334:	18e4      	addlt	r4, r4, r3
 8015336:	f000 fdcf 	bl	8015ed8 <__malloc_lock>
 801533a:	4a1e      	ldr	r2, [pc, #120]	; (80153b4 <_free_r+0x94>)
 801533c:	9801      	ldr	r0, [sp, #4]
 801533e:	6813      	ldr	r3, [r2, #0]
 8015340:	b933      	cbnz	r3, 8015350 <_free_r+0x30>
 8015342:	6063      	str	r3, [r4, #4]
 8015344:	6014      	str	r4, [r2, #0]
 8015346:	b003      	add	sp, #12
 8015348:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801534c:	f000 bdca 	b.w	8015ee4 <__malloc_unlock>
 8015350:	42a3      	cmp	r3, r4
 8015352:	d908      	bls.n	8015366 <_free_r+0x46>
 8015354:	6825      	ldr	r5, [r4, #0]
 8015356:	1961      	adds	r1, r4, r5
 8015358:	428b      	cmp	r3, r1
 801535a:	bf01      	itttt	eq
 801535c:	6819      	ldreq	r1, [r3, #0]
 801535e:	685b      	ldreq	r3, [r3, #4]
 8015360:	1949      	addeq	r1, r1, r5
 8015362:	6021      	streq	r1, [r4, #0]
 8015364:	e7ed      	b.n	8015342 <_free_r+0x22>
 8015366:	461a      	mov	r2, r3
 8015368:	685b      	ldr	r3, [r3, #4]
 801536a:	b10b      	cbz	r3, 8015370 <_free_r+0x50>
 801536c:	42a3      	cmp	r3, r4
 801536e:	d9fa      	bls.n	8015366 <_free_r+0x46>
 8015370:	6811      	ldr	r1, [r2, #0]
 8015372:	1855      	adds	r5, r2, r1
 8015374:	42a5      	cmp	r5, r4
 8015376:	d10b      	bne.n	8015390 <_free_r+0x70>
 8015378:	6824      	ldr	r4, [r4, #0]
 801537a:	4421      	add	r1, r4
 801537c:	1854      	adds	r4, r2, r1
 801537e:	42a3      	cmp	r3, r4
 8015380:	6011      	str	r1, [r2, #0]
 8015382:	d1e0      	bne.n	8015346 <_free_r+0x26>
 8015384:	681c      	ldr	r4, [r3, #0]
 8015386:	685b      	ldr	r3, [r3, #4]
 8015388:	6053      	str	r3, [r2, #4]
 801538a:	4421      	add	r1, r4
 801538c:	6011      	str	r1, [r2, #0]
 801538e:	e7da      	b.n	8015346 <_free_r+0x26>
 8015390:	d902      	bls.n	8015398 <_free_r+0x78>
 8015392:	230c      	movs	r3, #12
 8015394:	6003      	str	r3, [r0, #0]
 8015396:	e7d6      	b.n	8015346 <_free_r+0x26>
 8015398:	6825      	ldr	r5, [r4, #0]
 801539a:	1961      	adds	r1, r4, r5
 801539c:	428b      	cmp	r3, r1
 801539e:	bf04      	itt	eq
 80153a0:	6819      	ldreq	r1, [r3, #0]
 80153a2:	685b      	ldreq	r3, [r3, #4]
 80153a4:	6063      	str	r3, [r4, #4]
 80153a6:	bf04      	itt	eq
 80153a8:	1949      	addeq	r1, r1, r5
 80153aa:	6021      	streq	r1, [r4, #0]
 80153ac:	6054      	str	r4, [r2, #4]
 80153ae:	e7ca      	b.n	8015346 <_free_r+0x26>
 80153b0:	b003      	add	sp, #12
 80153b2:	bd30      	pop	{r4, r5, pc}
 80153b4:	20008d08 	.word	0x20008d08

080153b8 <sbrk_aligned>:
 80153b8:	b570      	push	{r4, r5, r6, lr}
 80153ba:	4e0e      	ldr	r6, [pc, #56]	; (80153f4 <sbrk_aligned+0x3c>)
 80153bc:	460c      	mov	r4, r1
 80153be:	6831      	ldr	r1, [r6, #0]
 80153c0:	4605      	mov	r5, r0
 80153c2:	b911      	cbnz	r1, 80153ca <sbrk_aligned+0x12>
 80153c4:	f000 fcd6 	bl	8015d74 <_sbrk_r>
 80153c8:	6030      	str	r0, [r6, #0]
 80153ca:	4621      	mov	r1, r4
 80153cc:	4628      	mov	r0, r5
 80153ce:	f000 fcd1 	bl	8015d74 <_sbrk_r>
 80153d2:	1c43      	adds	r3, r0, #1
 80153d4:	d00a      	beq.n	80153ec <sbrk_aligned+0x34>
 80153d6:	1cc4      	adds	r4, r0, #3
 80153d8:	f024 0403 	bic.w	r4, r4, #3
 80153dc:	42a0      	cmp	r0, r4
 80153de:	d007      	beq.n	80153f0 <sbrk_aligned+0x38>
 80153e0:	1a21      	subs	r1, r4, r0
 80153e2:	4628      	mov	r0, r5
 80153e4:	f000 fcc6 	bl	8015d74 <_sbrk_r>
 80153e8:	3001      	adds	r0, #1
 80153ea:	d101      	bne.n	80153f0 <sbrk_aligned+0x38>
 80153ec:	f04f 34ff 	mov.w	r4, #4294967295
 80153f0:	4620      	mov	r0, r4
 80153f2:	bd70      	pop	{r4, r5, r6, pc}
 80153f4:	20008d0c 	.word	0x20008d0c

080153f8 <_malloc_r>:
 80153f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80153fc:	1ccd      	adds	r5, r1, #3
 80153fe:	f025 0503 	bic.w	r5, r5, #3
 8015402:	3508      	adds	r5, #8
 8015404:	2d0c      	cmp	r5, #12
 8015406:	bf38      	it	cc
 8015408:	250c      	movcc	r5, #12
 801540a:	2d00      	cmp	r5, #0
 801540c:	4607      	mov	r7, r0
 801540e:	db01      	blt.n	8015414 <_malloc_r+0x1c>
 8015410:	42a9      	cmp	r1, r5
 8015412:	d905      	bls.n	8015420 <_malloc_r+0x28>
 8015414:	230c      	movs	r3, #12
 8015416:	603b      	str	r3, [r7, #0]
 8015418:	2600      	movs	r6, #0
 801541a:	4630      	mov	r0, r6
 801541c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015420:	4e2e      	ldr	r6, [pc, #184]	; (80154dc <_malloc_r+0xe4>)
 8015422:	f000 fd59 	bl	8015ed8 <__malloc_lock>
 8015426:	6833      	ldr	r3, [r6, #0]
 8015428:	461c      	mov	r4, r3
 801542a:	bb34      	cbnz	r4, 801547a <_malloc_r+0x82>
 801542c:	4629      	mov	r1, r5
 801542e:	4638      	mov	r0, r7
 8015430:	f7ff ffc2 	bl	80153b8 <sbrk_aligned>
 8015434:	1c43      	adds	r3, r0, #1
 8015436:	4604      	mov	r4, r0
 8015438:	d14d      	bne.n	80154d6 <_malloc_r+0xde>
 801543a:	6834      	ldr	r4, [r6, #0]
 801543c:	4626      	mov	r6, r4
 801543e:	2e00      	cmp	r6, #0
 8015440:	d140      	bne.n	80154c4 <_malloc_r+0xcc>
 8015442:	6823      	ldr	r3, [r4, #0]
 8015444:	4631      	mov	r1, r6
 8015446:	4638      	mov	r0, r7
 8015448:	eb04 0803 	add.w	r8, r4, r3
 801544c:	f000 fc92 	bl	8015d74 <_sbrk_r>
 8015450:	4580      	cmp	r8, r0
 8015452:	d13a      	bne.n	80154ca <_malloc_r+0xd2>
 8015454:	6821      	ldr	r1, [r4, #0]
 8015456:	3503      	adds	r5, #3
 8015458:	1a6d      	subs	r5, r5, r1
 801545a:	f025 0503 	bic.w	r5, r5, #3
 801545e:	3508      	adds	r5, #8
 8015460:	2d0c      	cmp	r5, #12
 8015462:	bf38      	it	cc
 8015464:	250c      	movcc	r5, #12
 8015466:	4629      	mov	r1, r5
 8015468:	4638      	mov	r0, r7
 801546a:	f7ff ffa5 	bl	80153b8 <sbrk_aligned>
 801546e:	3001      	adds	r0, #1
 8015470:	d02b      	beq.n	80154ca <_malloc_r+0xd2>
 8015472:	6823      	ldr	r3, [r4, #0]
 8015474:	442b      	add	r3, r5
 8015476:	6023      	str	r3, [r4, #0]
 8015478:	e00e      	b.n	8015498 <_malloc_r+0xa0>
 801547a:	6822      	ldr	r2, [r4, #0]
 801547c:	1b52      	subs	r2, r2, r5
 801547e:	d41e      	bmi.n	80154be <_malloc_r+0xc6>
 8015480:	2a0b      	cmp	r2, #11
 8015482:	d916      	bls.n	80154b2 <_malloc_r+0xba>
 8015484:	1961      	adds	r1, r4, r5
 8015486:	42a3      	cmp	r3, r4
 8015488:	6025      	str	r5, [r4, #0]
 801548a:	bf18      	it	ne
 801548c:	6059      	strne	r1, [r3, #4]
 801548e:	6863      	ldr	r3, [r4, #4]
 8015490:	bf08      	it	eq
 8015492:	6031      	streq	r1, [r6, #0]
 8015494:	5162      	str	r2, [r4, r5]
 8015496:	604b      	str	r3, [r1, #4]
 8015498:	4638      	mov	r0, r7
 801549a:	f104 060b 	add.w	r6, r4, #11
 801549e:	f000 fd21 	bl	8015ee4 <__malloc_unlock>
 80154a2:	f026 0607 	bic.w	r6, r6, #7
 80154a6:	1d23      	adds	r3, r4, #4
 80154a8:	1af2      	subs	r2, r6, r3
 80154aa:	d0b6      	beq.n	801541a <_malloc_r+0x22>
 80154ac:	1b9b      	subs	r3, r3, r6
 80154ae:	50a3      	str	r3, [r4, r2]
 80154b0:	e7b3      	b.n	801541a <_malloc_r+0x22>
 80154b2:	6862      	ldr	r2, [r4, #4]
 80154b4:	42a3      	cmp	r3, r4
 80154b6:	bf0c      	ite	eq
 80154b8:	6032      	streq	r2, [r6, #0]
 80154ba:	605a      	strne	r2, [r3, #4]
 80154bc:	e7ec      	b.n	8015498 <_malloc_r+0xa0>
 80154be:	4623      	mov	r3, r4
 80154c0:	6864      	ldr	r4, [r4, #4]
 80154c2:	e7b2      	b.n	801542a <_malloc_r+0x32>
 80154c4:	4634      	mov	r4, r6
 80154c6:	6876      	ldr	r6, [r6, #4]
 80154c8:	e7b9      	b.n	801543e <_malloc_r+0x46>
 80154ca:	230c      	movs	r3, #12
 80154cc:	603b      	str	r3, [r7, #0]
 80154ce:	4638      	mov	r0, r7
 80154d0:	f000 fd08 	bl	8015ee4 <__malloc_unlock>
 80154d4:	e7a1      	b.n	801541a <_malloc_r+0x22>
 80154d6:	6025      	str	r5, [r4, #0]
 80154d8:	e7de      	b.n	8015498 <_malloc_r+0xa0>
 80154da:	bf00      	nop
 80154dc:	20008d08 	.word	0x20008d08

080154e0 <__ssputs_r>:
 80154e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80154e4:	688e      	ldr	r6, [r1, #8]
 80154e6:	429e      	cmp	r6, r3
 80154e8:	4682      	mov	sl, r0
 80154ea:	460c      	mov	r4, r1
 80154ec:	4690      	mov	r8, r2
 80154ee:	461f      	mov	r7, r3
 80154f0:	d838      	bhi.n	8015564 <__ssputs_r+0x84>
 80154f2:	898a      	ldrh	r2, [r1, #12]
 80154f4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80154f8:	d032      	beq.n	8015560 <__ssputs_r+0x80>
 80154fa:	6825      	ldr	r5, [r4, #0]
 80154fc:	6909      	ldr	r1, [r1, #16]
 80154fe:	eba5 0901 	sub.w	r9, r5, r1
 8015502:	6965      	ldr	r5, [r4, #20]
 8015504:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015508:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801550c:	3301      	adds	r3, #1
 801550e:	444b      	add	r3, r9
 8015510:	106d      	asrs	r5, r5, #1
 8015512:	429d      	cmp	r5, r3
 8015514:	bf38      	it	cc
 8015516:	461d      	movcc	r5, r3
 8015518:	0553      	lsls	r3, r2, #21
 801551a:	d531      	bpl.n	8015580 <__ssputs_r+0xa0>
 801551c:	4629      	mov	r1, r5
 801551e:	f7ff ff6b 	bl	80153f8 <_malloc_r>
 8015522:	4606      	mov	r6, r0
 8015524:	b950      	cbnz	r0, 801553c <__ssputs_r+0x5c>
 8015526:	230c      	movs	r3, #12
 8015528:	f8ca 3000 	str.w	r3, [sl]
 801552c:	89a3      	ldrh	r3, [r4, #12]
 801552e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015532:	81a3      	strh	r3, [r4, #12]
 8015534:	f04f 30ff 	mov.w	r0, #4294967295
 8015538:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801553c:	6921      	ldr	r1, [r4, #16]
 801553e:	464a      	mov	r2, r9
 8015540:	f7ff faba 	bl	8014ab8 <memcpy>
 8015544:	89a3      	ldrh	r3, [r4, #12]
 8015546:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801554a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801554e:	81a3      	strh	r3, [r4, #12]
 8015550:	6126      	str	r6, [r4, #16]
 8015552:	6165      	str	r5, [r4, #20]
 8015554:	444e      	add	r6, r9
 8015556:	eba5 0509 	sub.w	r5, r5, r9
 801555a:	6026      	str	r6, [r4, #0]
 801555c:	60a5      	str	r5, [r4, #8]
 801555e:	463e      	mov	r6, r7
 8015560:	42be      	cmp	r6, r7
 8015562:	d900      	bls.n	8015566 <__ssputs_r+0x86>
 8015564:	463e      	mov	r6, r7
 8015566:	6820      	ldr	r0, [r4, #0]
 8015568:	4632      	mov	r2, r6
 801556a:	4641      	mov	r1, r8
 801556c:	f7ff fab2 	bl	8014ad4 <memmove>
 8015570:	68a3      	ldr	r3, [r4, #8]
 8015572:	1b9b      	subs	r3, r3, r6
 8015574:	60a3      	str	r3, [r4, #8]
 8015576:	6823      	ldr	r3, [r4, #0]
 8015578:	4433      	add	r3, r6
 801557a:	6023      	str	r3, [r4, #0]
 801557c:	2000      	movs	r0, #0
 801557e:	e7db      	b.n	8015538 <__ssputs_r+0x58>
 8015580:	462a      	mov	r2, r5
 8015582:	f000 fcb5 	bl	8015ef0 <_realloc_r>
 8015586:	4606      	mov	r6, r0
 8015588:	2800      	cmp	r0, #0
 801558a:	d1e1      	bne.n	8015550 <__ssputs_r+0x70>
 801558c:	6921      	ldr	r1, [r4, #16]
 801558e:	4650      	mov	r0, sl
 8015590:	f7ff fec6 	bl	8015320 <_free_r>
 8015594:	e7c7      	b.n	8015526 <__ssputs_r+0x46>
	...

08015598 <_svfiprintf_r>:
 8015598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801559c:	4698      	mov	r8, r3
 801559e:	898b      	ldrh	r3, [r1, #12]
 80155a0:	061b      	lsls	r3, r3, #24
 80155a2:	b09d      	sub	sp, #116	; 0x74
 80155a4:	4607      	mov	r7, r0
 80155a6:	460d      	mov	r5, r1
 80155a8:	4614      	mov	r4, r2
 80155aa:	d50e      	bpl.n	80155ca <_svfiprintf_r+0x32>
 80155ac:	690b      	ldr	r3, [r1, #16]
 80155ae:	b963      	cbnz	r3, 80155ca <_svfiprintf_r+0x32>
 80155b0:	2140      	movs	r1, #64	; 0x40
 80155b2:	f7ff ff21 	bl	80153f8 <_malloc_r>
 80155b6:	6028      	str	r0, [r5, #0]
 80155b8:	6128      	str	r0, [r5, #16]
 80155ba:	b920      	cbnz	r0, 80155c6 <_svfiprintf_r+0x2e>
 80155bc:	230c      	movs	r3, #12
 80155be:	603b      	str	r3, [r7, #0]
 80155c0:	f04f 30ff 	mov.w	r0, #4294967295
 80155c4:	e0d1      	b.n	801576a <_svfiprintf_r+0x1d2>
 80155c6:	2340      	movs	r3, #64	; 0x40
 80155c8:	616b      	str	r3, [r5, #20]
 80155ca:	2300      	movs	r3, #0
 80155cc:	9309      	str	r3, [sp, #36]	; 0x24
 80155ce:	2320      	movs	r3, #32
 80155d0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80155d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80155d8:	2330      	movs	r3, #48	; 0x30
 80155da:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8015784 <_svfiprintf_r+0x1ec>
 80155de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80155e2:	f04f 0901 	mov.w	r9, #1
 80155e6:	4623      	mov	r3, r4
 80155e8:	469a      	mov	sl, r3
 80155ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80155ee:	b10a      	cbz	r2, 80155f4 <_svfiprintf_r+0x5c>
 80155f0:	2a25      	cmp	r2, #37	; 0x25
 80155f2:	d1f9      	bne.n	80155e8 <_svfiprintf_r+0x50>
 80155f4:	ebba 0b04 	subs.w	fp, sl, r4
 80155f8:	d00b      	beq.n	8015612 <_svfiprintf_r+0x7a>
 80155fa:	465b      	mov	r3, fp
 80155fc:	4622      	mov	r2, r4
 80155fe:	4629      	mov	r1, r5
 8015600:	4638      	mov	r0, r7
 8015602:	f7ff ff6d 	bl	80154e0 <__ssputs_r>
 8015606:	3001      	adds	r0, #1
 8015608:	f000 80aa 	beq.w	8015760 <_svfiprintf_r+0x1c8>
 801560c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801560e:	445a      	add	r2, fp
 8015610:	9209      	str	r2, [sp, #36]	; 0x24
 8015612:	f89a 3000 	ldrb.w	r3, [sl]
 8015616:	2b00      	cmp	r3, #0
 8015618:	f000 80a2 	beq.w	8015760 <_svfiprintf_r+0x1c8>
 801561c:	2300      	movs	r3, #0
 801561e:	f04f 32ff 	mov.w	r2, #4294967295
 8015622:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015626:	f10a 0a01 	add.w	sl, sl, #1
 801562a:	9304      	str	r3, [sp, #16]
 801562c:	9307      	str	r3, [sp, #28]
 801562e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015632:	931a      	str	r3, [sp, #104]	; 0x68
 8015634:	4654      	mov	r4, sl
 8015636:	2205      	movs	r2, #5
 8015638:	f814 1b01 	ldrb.w	r1, [r4], #1
 801563c:	4851      	ldr	r0, [pc, #324]	; (8015784 <_svfiprintf_r+0x1ec>)
 801563e:	f7ea fde7 	bl	8000210 <memchr>
 8015642:	9a04      	ldr	r2, [sp, #16]
 8015644:	b9d8      	cbnz	r0, 801567e <_svfiprintf_r+0xe6>
 8015646:	06d0      	lsls	r0, r2, #27
 8015648:	bf44      	itt	mi
 801564a:	2320      	movmi	r3, #32
 801564c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015650:	0711      	lsls	r1, r2, #28
 8015652:	bf44      	itt	mi
 8015654:	232b      	movmi	r3, #43	; 0x2b
 8015656:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801565a:	f89a 3000 	ldrb.w	r3, [sl]
 801565e:	2b2a      	cmp	r3, #42	; 0x2a
 8015660:	d015      	beq.n	801568e <_svfiprintf_r+0xf6>
 8015662:	9a07      	ldr	r2, [sp, #28]
 8015664:	4654      	mov	r4, sl
 8015666:	2000      	movs	r0, #0
 8015668:	f04f 0c0a 	mov.w	ip, #10
 801566c:	4621      	mov	r1, r4
 801566e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015672:	3b30      	subs	r3, #48	; 0x30
 8015674:	2b09      	cmp	r3, #9
 8015676:	d94e      	bls.n	8015716 <_svfiprintf_r+0x17e>
 8015678:	b1b0      	cbz	r0, 80156a8 <_svfiprintf_r+0x110>
 801567a:	9207      	str	r2, [sp, #28]
 801567c:	e014      	b.n	80156a8 <_svfiprintf_r+0x110>
 801567e:	eba0 0308 	sub.w	r3, r0, r8
 8015682:	fa09 f303 	lsl.w	r3, r9, r3
 8015686:	4313      	orrs	r3, r2
 8015688:	9304      	str	r3, [sp, #16]
 801568a:	46a2      	mov	sl, r4
 801568c:	e7d2      	b.n	8015634 <_svfiprintf_r+0x9c>
 801568e:	9b03      	ldr	r3, [sp, #12]
 8015690:	1d19      	adds	r1, r3, #4
 8015692:	681b      	ldr	r3, [r3, #0]
 8015694:	9103      	str	r1, [sp, #12]
 8015696:	2b00      	cmp	r3, #0
 8015698:	bfbb      	ittet	lt
 801569a:	425b      	neglt	r3, r3
 801569c:	f042 0202 	orrlt.w	r2, r2, #2
 80156a0:	9307      	strge	r3, [sp, #28]
 80156a2:	9307      	strlt	r3, [sp, #28]
 80156a4:	bfb8      	it	lt
 80156a6:	9204      	strlt	r2, [sp, #16]
 80156a8:	7823      	ldrb	r3, [r4, #0]
 80156aa:	2b2e      	cmp	r3, #46	; 0x2e
 80156ac:	d10c      	bne.n	80156c8 <_svfiprintf_r+0x130>
 80156ae:	7863      	ldrb	r3, [r4, #1]
 80156b0:	2b2a      	cmp	r3, #42	; 0x2a
 80156b2:	d135      	bne.n	8015720 <_svfiprintf_r+0x188>
 80156b4:	9b03      	ldr	r3, [sp, #12]
 80156b6:	1d1a      	adds	r2, r3, #4
 80156b8:	681b      	ldr	r3, [r3, #0]
 80156ba:	9203      	str	r2, [sp, #12]
 80156bc:	2b00      	cmp	r3, #0
 80156be:	bfb8      	it	lt
 80156c0:	f04f 33ff 	movlt.w	r3, #4294967295
 80156c4:	3402      	adds	r4, #2
 80156c6:	9305      	str	r3, [sp, #20]
 80156c8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8015794 <_svfiprintf_r+0x1fc>
 80156cc:	7821      	ldrb	r1, [r4, #0]
 80156ce:	2203      	movs	r2, #3
 80156d0:	4650      	mov	r0, sl
 80156d2:	f7ea fd9d 	bl	8000210 <memchr>
 80156d6:	b140      	cbz	r0, 80156ea <_svfiprintf_r+0x152>
 80156d8:	2340      	movs	r3, #64	; 0x40
 80156da:	eba0 000a 	sub.w	r0, r0, sl
 80156de:	fa03 f000 	lsl.w	r0, r3, r0
 80156e2:	9b04      	ldr	r3, [sp, #16]
 80156e4:	4303      	orrs	r3, r0
 80156e6:	3401      	adds	r4, #1
 80156e8:	9304      	str	r3, [sp, #16]
 80156ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80156ee:	4826      	ldr	r0, [pc, #152]	; (8015788 <_svfiprintf_r+0x1f0>)
 80156f0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80156f4:	2206      	movs	r2, #6
 80156f6:	f7ea fd8b 	bl	8000210 <memchr>
 80156fa:	2800      	cmp	r0, #0
 80156fc:	d038      	beq.n	8015770 <_svfiprintf_r+0x1d8>
 80156fe:	4b23      	ldr	r3, [pc, #140]	; (801578c <_svfiprintf_r+0x1f4>)
 8015700:	bb1b      	cbnz	r3, 801574a <_svfiprintf_r+0x1b2>
 8015702:	9b03      	ldr	r3, [sp, #12]
 8015704:	3307      	adds	r3, #7
 8015706:	f023 0307 	bic.w	r3, r3, #7
 801570a:	3308      	adds	r3, #8
 801570c:	9303      	str	r3, [sp, #12]
 801570e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015710:	4433      	add	r3, r6
 8015712:	9309      	str	r3, [sp, #36]	; 0x24
 8015714:	e767      	b.n	80155e6 <_svfiprintf_r+0x4e>
 8015716:	fb0c 3202 	mla	r2, ip, r2, r3
 801571a:	460c      	mov	r4, r1
 801571c:	2001      	movs	r0, #1
 801571e:	e7a5      	b.n	801566c <_svfiprintf_r+0xd4>
 8015720:	2300      	movs	r3, #0
 8015722:	3401      	adds	r4, #1
 8015724:	9305      	str	r3, [sp, #20]
 8015726:	4619      	mov	r1, r3
 8015728:	f04f 0c0a 	mov.w	ip, #10
 801572c:	4620      	mov	r0, r4
 801572e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015732:	3a30      	subs	r2, #48	; 0x30
 8015734:	2a09      	cmp	r2, #9
 8015736:	d903      	bls.n	8015740 <_svfiprintf_r+0x1a8>
 8015738:	2b00      	cmp	r3, #0
 801573a:	d0c5      	beq.n	80156c8 <_svfiprintf_r+0x130>
 801573c:	9105      	str	r1, [sp, #20]
 801573e:	e7c3      	b.n	80156c8 <_svfiprintf_r+0x130>
 8015740:	fb0c 2101 	mla	r1, ip, r1, r2
 8015744:	4604      	mov	r4, r0
 8015746:	2301      	movs	r3, #1
 8015748:	e7f0      	b.n	801572c <_svfiprintf_r+0x194>
 801574a:	ab03      	add	r3, sp, #12
 801574c:	9300      	str	r3, [sp, #0]
 801574e:	462a      	mov	r2, r5
 8015750:	4b0f      	ldr	r3, [pc, #60]	; (8015790 <_svfiprintf_r+0x1f8>)
 8015752:	a904      	add	r1, sp, #16
 8015754:	4638      	mov	r0, r7
 8015756:	f3af 8000 	nop.w
 801575a:	1c42      	adds	r2, r0, #1
 801575c:	4606      	mov	r6, r0
 801575e:	d1d6      	bne.n	801570e <_svfiprintf_r+0x176>
 8015760:	89ab      	ldrh	r3, [r5, #12]
 8015762:	065b      	lsls	r3, r3, #25
 8015764:	f53f af2c 	bmi.w	80155c0 <_svfiprintf_r+0x28>
 8015768:	9809      	ldr	r0, [sp, #36]	; 0x24
 801576a:	b01d      	add	sp, #116	; 0x74
 801576c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015770:	ab03      	add	r3, sp, #12
 8015772:	9300      	str	r3, [sp, #0]
 8015774:	462a      	mov	r2, r5
 8015776:	4b06      	ldr	r3, [pc, #24]	; (8015790 <_svfiprintf_r+0x1f8>)
 8015778:	a904      	add	r1, sp, #16
 801577a:	4638      	mov	r0, r7
 801577c:	f000 f9d4 	bl	8015b28 <_printf_i>
 8015780:	e7eb      	b.n	801575a <_svfiprintf_r+0x1c2>
 8015782:	bf00      	nop
 8015784:	0801ac54 	.word	0x0801ac54
 8015788:	0801ac5e 	.word	0x0801ac5e
 801578c:	00000000 	.word	0x00000000
 8015790:	080154e1 	.word	0x080154e1
 8015794:	0801ac5a 	.word	0x0801ac5a

08015798 <__sfputc_r>:
 8015798:	6893      	ldr	r3, [r2, #8]
 801579a:	3b01      	subs	r3, #1
 801579c:	2b00      	cmp	r3, #0
 801579e:	b410      	push	{r4}
 80157a0:	6093      	str	r3, [r2, #8]
 80157a2:	da08      	bge.n	80157b6 <__sfputc_r+0x1e>
 80157a4:	6994      	ldr	r4, [r2, #24]
 80157a6:	42a3      	cmp	r3, r4
 80157a8:	db01      	blt.n	80157ae <__sfputc_r+0x16>
 80157aa:	290a      	cmp	r1, #10
 80157ac:	d103      	bne.n	80157b6 <__sfputc_r+0x1e>
 80157ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80157b2:	f7ff ba9d 	b.w	8014cf0 <__swbuf_r>
 80157b6:	6813      	ldr	r3, [r2, #0]
 80157b8:	1c58      	adds	r0, r3, #1
 80157ba:	6010      	str	r0, [r2, #0]
 80157bc:	7019      	strb	r1, [r3, #0]
 80157be:	4608      	mov	r0, r1
 80157c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80157c4:	4770      	bx	lr

080157c6 <__sfputs_r>:
 80157c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80157c8:	4606      	mov	r6, r0
 80157ca:	460f      	mov	r7, r1
 80157cc:	4614      	mov	r4, r2
 80157ce:	18d5      	adds	r5, r2, r3
 80157d0:	42ac      	cmp	r4, r5
 80157d2:	d101      	bne.n	80157d8 <__sfputs_r+0x12>
 80157d4:	2000      	movs	r0, #0
 80157d6:	e007      	b.n	80157e8 <__sfputs_r+0x22>
 80157d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80157dc:	463a      	mov	r2, r7
 80157de:	4630      	mov	r0, r6
 80157e0:	f7ff ffda 	bl	8015798 <__sfputc_r>
 80157e4:	1c43      	adds	r3, r0, #1
 80157e6:	d1f3      	bne.n	80157d0 <__sfputs_r+0xa>
 80157e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080157ec <_vfiprintf_r>:
 80157ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80157f0:	460d      	mov	r5, r1
 80157f2:	b09d      	sub	sp, #116	; 0x74
 80157f4:	4614      	mov	r4, r2
 80157f6:	4698      	mov	r8, r3
 80157f8:	4606      	mov	r6, r0
 80157fa:	b118      	cbz	r0, 8015804 <_vfiprintf_r+0x18>
 80157fc:	6983      	ldr	r3, [r0, #24]
 80157fe:	b90b      	cbnz	r3, 8015804 <_vfiprintf_r+0x18>
 8015800:	f7ff fc6e 	bl	80150e0 <__sinit>
 8015804:	4b89      	ldr	r3, [pc, #548]	; (8015a2c <_vfiprintf_r+0x240>)
 8015806:	429d      	cmp	r5, r3
 8015808:	d11b      	bne.n	8015842 <_vfiprintf_r+0x56>
 801580a:	6875      	ldr	r5, [r6, #4]
 801580c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801580e:	07d9      	lsls	r1, r3, #31
 8015810:	d405      	bmi.n	801581e <_vfiprintf_r+0x32>
 8015812:	89ab      	ldrh	r3, [r5, #12]
 8015814:	059a      	lsls	r2, r3, #22
 8015816:	d402      	bmi.n	801581e <_vfiprintf_r+0x32>
 8015818:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801581a:	f7ff fd11 	bl	8015240 <__retarget_lock_acquire_recursive>
 801581e:	89ab      	ldrh	r3, [r5, #12]
 8015820:	071b      	lsls	r3, r3, #28
 8015822:	d501      	bpl.n	8015828 <_vfiprintf_r+0x3c>
 8015824:	692b      	ldr	r3, [r5, #16]
 8015826:	b9eb      	cbnz	r3, 8015864 <_vfiprintf_r+0x78>
 8015828:	4629      	mov	r1, r5
 801582a:	4630      	mov	r0, r6
 801582c:	f7ff fab2 	bl	8014d94 <__swsetup_r>
 8015830:	b1c0      	cbz	r0, 8015864 <_vfiprintf_r+0x78>
 8015832:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015834:	07dc      	lsls	r4, r3, #31
 8015836:	d50e      	bpl.n	8015856 <_vfiprintf_r+0x6a>
 8015838:	f04f 30ff 	mov.w	r0, #4294967295
 801583c:	b01d      	add	sp, #116	; 0x74
 801583e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015842:	4b7b      	ldr	r3, [pc, #492]	; (8015a30 <_vfiprintf_r+0x244>)
 8015844:	429d      	cmp	r5, r3
 8015846:	d101      	bne.n	801584c <_vfiprintf_r+0x60>
 8015848:	68b5      	ldr	r5, [r6, #8]
 801584a:	e7df      	b.n	801580c <_vfiprintf_r+0x20>
 801584c:	4b79      	ldr	r3, [pc, #484]	; (8015a34 <_vfiprintf_r+0x248>)
 801584e:	429d      	cmp	r5, r3
 8015850:	bf08      	it	eq
 8015852:	68f5      	ldreq	r5, [r6, #12]
 8015854:	e7da      	b.n	801580c <_vfiprintf_r+0x20>
 8015856:	89ab      	ldrh	r3, [r5, #12]
 8015858:	0598      	lsls	r0, r3, #22
 801585a:	d4ed      	bmi.n	8015838 <_vfiprintf_r+0x4c>
 801585c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801585e:	f7ff fcf0 	bl	8015242 <__retarget_lock_release_recursive>
 8015862:	e7e9      	b.n	8015838 <_vfiprintf_r+0x4c>
 8015864:	2300      	movs	r3, #0
 8015866:	9309      	str	r3, [sp, #36]	; 0x24
 8015868:	2320      	movs	r3, #32
 801586a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801586e:	f8cd 800c 	str.w	r8, [sp, #12]
 8015872:	2330      	movs	r3, #48	; 0x30
 8015874:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8015a38 <_vfiprintf_r+0x24c>
 8015878:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801587c:	f04f 0901 	mov.w	r9, #1
 8015880:	4623      	mov	r3, r4
 8015882:	469a      	mov	sl, r3
 8015884:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015888:	b10a      	cbz	r2, 801588e <_vfiprintf_r+0xa2>
 801588a:	2a25      	cmp	r2, #37	; 0x25
 801588c:	d1f9      	bne.n	8015882 <_vfiprintf_r+0x96>
 801588e:	ebba 0b04 	subs.w	fp, sl, r4
 8015892:	d00b      	beq.n	80158ac <_vfiprintf_r+0xc0>
 8015894:	465b      	mov	r3, fp
 8015896:	4622      	mov	r2, r4
 8015898:	4629      	mov	r1, r5
 801589a:	4630      	mov	r0, r6
 801589c:	f7ff ff93 	bl	80157c6 <__sfputs_r>
 80158a0:	3001      	adds	r0, #1
 80158a2:	f000 80aa 	beq.w	80159fa <_vfiprintf_r+0x20e>
 80158a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80158a8:	445a      	add	r2, fp
 80158aa:	9209      	str	r2, [sp, #36]	; 0x24
 80158ac:	f89a 3000 	ldrb.w	r3, [sl]
 80158b0:	2b00      	cmp	r3, #0
 80158b2:	f000 80a2 	beq.w	80159fa <_vfiprintf_r+0x20e>
 80158b6:	2300      	movs	r3, #0
 80158b8:	f04f 32ff 	mov.w	r2, #4294967295
 80158bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80158c0:	f10a 0a01 	add.w	sl, sl, #1
 80158c4:	9304      	str	r3, [sp, #16]
 80158c6:	9307      	str	r3, [sp, #28]
 80158c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80158cc:	931a      	str	r3, [sp, #104]	; 0x68
 80158ce:	4654      	mov	r4, sl
 80158d0:	2205      	movs	r2, #5
 80158d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80158d6:	4858      	ldr	r0, [pc, #352]	; (8015a38 <_vfiprintf_r+0x24c>)
 80158d8:	f7ea fc9a 	bl	8000210 <memchr>
 80158dc:	9a04      	ldr	r2, [sp, #16]
 80158de:	b9d8      	cbnz	r0, 8015918 <_vfiprintf_r+0x12c>
 80158e0:	06d1      	lsls	r1, r2, #27
 80158e2:	bf44      	itt	mi
 80158e4:	2320      	movmi	r3, #32
 80158e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80158ea:	0713      	lsls	r3, r2, #28
 80158ec:	bf44      	itt	mi
 80158ee:	232b      	movmi	r3, #43	; 0x2b
 80158f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80158f4:	f89a 3000 	ldrb.w	r3, [sl]
 80158f8:	2b2a      	cmp	r3, #42	; 0x2a
 80158fa:	d015      	beq.n	8015928 <_vfiprintf_r+0x13c>
 80158fc:	9a07      	ldr	r2, [sp, #28]
 80158fe:	4654      	mov	r4, sl
 8015900:	2000      	movs	r0, #0
 8015902:	f04f 0c0a 	mov.w	ip, #10
 8015906:	4621      	mov	r1, r4
 8015908:	f811 3b01 	ldrb.w	r3, [r1], #1
 801590c:	3b30      	subs	r3, #48	; 0x30
 801590e:	2b09      	cmp	r3, #9
 8015910:	d94e      	bls.n	80159b0 <_vfiprintf_r+0x1c4>
 8015912:	b1b0      	cbz	r0, 8015942 <_vfiprintf_r+0x156>
 8015914:	9207      	str	r2, [sp, #28]
 8015916:	e014      	b.n	8015942 <_vfiprintf_r+0x156>
 8015918:	eba0 0308 	sub.w	r3, r0, r8
 801591c:	fa09 f303 	lsl.w	r3, r9, r3
 8015920:	4313      	orrs	r3, r2
 8015922:	9304      	str	r3, [sp, #16]
 8015924:	46a2      	mov	sl, r4
 8015926:	e7d2      	b.n	80158ce <_vfiprintf_r+0xe2>
 8015928:	9b03      	ldr	r3, [sp, #12]
 801592a:	1d19      	adds	r1, r3, #4
 801592c:	681b      	ldr	r3, [r3, #0]
 801592e:	9103      	str	r1, [sp, #12]
 8015930:	2b00      	cmp	r3, #0
 8015932:	bfbb      	ittet	lt
 8015934:	425b      	neglt	r3, r3
 8015936:	f042 0202 	orrlt.w	r2, r2, #2
 801593a:	9307      	strge	r3, [sp, #28]
 801593c:	9307      	strlt	r3, [sp, #28]
 801593e:	bfb8      	it	lt
 8015940:	9204      	strlt	r2, [sp, #16]
 8015942:	7823      	ldrb	r3, [r4, #0]
 8015944:	2b2e      	cmp	r3, #46	; 0x2e
 8015946:	d10c      	bne.n	8015962 <_vfiprintf_r+0x176>
 8015948:	7863      	ldrb	r3, [r4, #1]
 801594a:	2b2a      	cmp	r3, #42	; 0x2a
 801594c:	d135      	bne.n	80159ba <_vfiprintf_r+0x1ce>
 801594e:	9b03      	ldr	r3, [sp, #12]
 8015950:	1d1a      	adds	r2, r3, #4
 8015952:	681b      	ldr	r3, [r3, #0]
 8015954:	9203      	str	r2, [sp, #12]
 8015956:	2b00      	cmp	r3, #0
 8015958:	bfb8      	it	lt
 801595a:	f04f 33ff 	movlt.w	r3, #4294967295
 801595e:	3402      	adds	r4, #2
 8015960:	9305      	str	r3, [sp, #20]
 8015962:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8015a48 <_vfiprintf_r+0x25c>
 8015966:	7821      	ldrb	r1, [r4, #0]
 8015968:	2203      	movs	r2, #3
 801596a:	4650      	mov	r0, sl
 801596c:	f7ea fc50 	bl	8000210 <memchr>
 8015970:	b140      	cbz	r0, 8015984 <_vfiprintf_r+0x198>
 8015972:	2340      	movs	r3, #64	; 0x40
 8015974:	eba0 000a 	sub.w	r0, r0, sl
 8015978:	fa03 f000 	lsl.w	r0, r3, r0
 801597c:	9b04      	ldr	r3, [sp, #16]
 801597e:	4303      	orrs	r3, r0
 8015980:	3401      	adds	r4, #1
 8015982:	9304      	str	r3, [sp, #16]
 8015984:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015988:	482c      	ldr	r0, [pc, #176]	; (8015a3c <_vfiprintf_r+0x250>)
 801598a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801598e:	2206      	movs	r2, #6
 8015990:	f7ea fc3e 	bl	8000210 <memchr>
 8015994:	2800      	cmp	r0, #0
 8015996:	d03f      	beq.n	8015a18 <_vfiprintf_r+0x22c>
 8015998:	4b29      	ldr	r3, [pc, #164]	; (8015a40 <_vfiprintf_r+0x254>)
 801599a:	bb1b      	cbnz	r3, 80159e4 <_vfiprintf_r+0x1f8>
 801599c:	9b03      	ldr	r3, [sp, #12]
 801599e:	3307      	adds	r3, #7
 80159a0:	f023 0307 	bic.w	r3, r3, #7
 80159a4:	3308      	adds	r3, #8
 80159a6:	9303      	str	r3, [sp, #12]
 80159a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80159aa:	443b      	add	r3, r7
 80159ac:	9309      	str	r3, [sp, #36]	; 0x24
 80159ae:	e767      	b.n	8015880 <_vfiprintf_r+0x94>
 80159b0:	fb0c 3202 	mla	r2, ip, r2, r3
 80159b4:	460c      	mov	r4, r1
 80159b6:	2001      	movs	r0, #1
 80159b8:	e7a5      	b.n	8015906 <_vfiprintf_r+0x11a>
 80159ba:	2300      	movs	r3, #0
 80159bc:	3401      	adds	r4, #1
 80159be:	9305      	str	r3, [sp, #20]
 80159c0:	4619      	mov	r1, r3
 80159c2:	f04f 0c0a 	mov.w	ip, #10
 80159c6:	4620      	mov	r0, r4
 80159c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80159cc:	3a30      	subs	r2, #48	; 0x30
 80159ce:	2a09      	cmp	r2, #9
 80159d0:	d903      	bls.n	80159da <_vfiprintf_r+0x1ee>
 80159d2:	2b00      	cmp	r3, #0
 80159d4:	d0c5      	beq.n	8015962 <_vfiprintf_r+0x176>
 80159d6:	9105      	str	r1, [sp, #20]
 80159d8:	e7c3      	b.n	8015962 <_vfiprintf_r+0x176>
 80159da:	fb0c 2101 	mla	r1, ip, r1, r2
 80159de:	4604      	mov	r4, r0
 80159e0:	2301      	movs	r3, #1
 80159e2:	e7f0      	b.n	80159c6 <_vfiprintf_r+0x1da>
 80159e4:	ab03      	add	r3, sp, #12
 80159e6:	9300      	str	r3, [sp, #0]
 80159e8:	462a      	mov	r2, r5
 80159ea:	4b16      	ldr	r3, [pc, #88]	; (8015a44 <_vfiprintf_r+0x258>)
 80159ec:	a904      	add	r1, sp, #16
 80159ee:	4630      	mov	r0, r6
 80159f0:	f3af 8000 	nop.w
 80159f4:	4607      	mov	r7, r0
 80159f6:	1c78      	adds	r0, r7, #1
 80159f8:	d1d6      	bne.n	80159a8 <_vfiprintf_r+0x1bc>
 80159fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80159fc:	07d9      	lsls	r1, r3, #31
 80159fe:	d405      	bmi.n	8015a0c <_vfiprintf_r+0x220>
 8015a00:	89ab      	ldrh	r3, [r5, #12]
 8015a02:	059a      	lsls	r2, r3, #22
 8015a04:	d402      	bmi.n	8015a0c <_vfiprintf_r+0x220>
 8015a06:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015a08:	f7ff fc1b 	bl	8015242 <__retarget_lock_release_recursive>
 8015a0c:	89ab      	ldrh	r3, [r5, #12]
 8015a0e:	065b      	lsls	r3, r3, #25
 8015a10:	f53f af12 	bmi.w	8015838 <_vfiprintf_r+0x4c>
 8015a14:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015a16:	e711      	b.n	801583c <_vfiprintf_r+0x50>
 8015a18:	ab03      	add	r3, sp, #12
 8015a1a:	9300      	str	r3, [sp, #0]
 8015a1c:	462a      	mov	r2, r5
 8015a1e:	4b09      	ldr	r3, [pc, #36]	; (8015a44 <_vfiprintf_r+0x258>)
 8015a20:	a904      	add	r1, sp, #16
 8015a22:	4630      	mov	r0, r6
 8015a24:	f000 f880 	bl	8015b28 <_printf_i>
 8015a28:	e7e4      	b.n	80159f4 <_vfiprintf_r+0x208>
 8015a2a:	bf00      	nop
 8015a2c:	0801ac14 	.word	0x0801ac14
 8015a30:	0801ac34 	.word	0x0801ac34
 8015a34:	0801abf4 	.word	0x0801abf4
 8015a38:	0801ac54 	.word	0x0801ac54
 8015a3c:	0801ac5e 	.word	0x0801ac5e
 8015a40:	00000000 	.word	0x00000000
 8015a44:	080157c7 	.word	0x080157c7
 8015a48:	0801ac5a 	.word	0x0801ac5a

08015a4c <_printf_common>:
 8015a4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015a50:	4616      	mov	r6, r2
 8015a52:	4699      	mov	r9, r3
 8015a54:	688a      	ldr	r2, [r1, #8]
 8015a56:	690b      	ldr	r3, [r1, #16]
 8015a58:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015a5c:	4293      	cmp	r3, r2
 8015a5e:	bfb8      	it	lt
 8015a60:	4613      	movlt	r3, r2
 8015a62:	6033      	str	r3, [r6, #0]
 8015a64:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8015a68:	4607      	mov	r7, r0
 8015a6a:	460c      	mov	r4, r1
 8015a6c:	b10a      	cbz	r2, 8015a72 <_printf_common+0x26>
 8015a6e:	3301      	adds	r3, #1
 8015a70:	6033      	str	r3, [r6, #0]
 8015a72:	6823      	ldr	r3, [r4, #0]
 8015a74:	0699      	lsls	r1, r3, #26
 8015a76:	bf42      	ittt	mi
 8015a78:	6833      	ldrmi	r3, [r6, #0]
 8015a7a:	3302      	addmi	r3, #2
 8015a7c:	6033      	strmi	r3, [r6, #0]
 8015a7e:	6825      	ldr	r5, [r4, #0]
 8015a80:	f015 0506 	ands.w	r5, r5, #6
 8015a84:	d106      	bne.n	8015a94 <_printf_common+0x48>
 8015a86:	f104 0a19 	add.w	sl, r4, #25
 8015a8a:	68e3      	ldr	r3, [r4, #12]
 8015a8c:	6832      	ldr	r2, [r6, #0]
 8015a8e:	1a9b      	subs	r3, r3, r2
 8015a90:	42ab      	cmp	r3, r5
 8015a92:	dc26      	bgt.n	8015ae2 <_printf_common+0x96>
 8015a94:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8015a98:	1e13      	subs	r3, r2, #0
 8015a9a:	6822      	ldr	r2, [r4, #0]
 8015a9c:	bf18      	it	ne
 8015a9e:	2301      	movne	r3, #1
 8015aa0:	0692      	lsls	r2, r2, #26
 8015aa2:	d42b      	bmi.n	8015afc <_printf_common+0xb0>
 8015aa4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015aa8:	4649      	mov	r1, r9
 8015aaa:	4638      	mov	r0, r7
 8015aac:	47c0      	blx	r8
 8015aae:	3001      	adds	r0, #1
 8015ab0:	d01e      	beq.n	8015af0 <_printf_common+0xa4>
 8015ab2:	6823      	ldr	r3, [r4, #0]
 8015ab4:	68e5      	ldr	r5, [r4, #12]
 8015ab6:	6832      	ldr	r2, [r6, #0]
 8015ab8:	f003 0306 	and.w	r3, r3, #6
 8015abc:	2b04      	cmp	r3, #4
 8015abe:	bf08      	it	eq
 8015ac0:	1aad      	subeq	r5, r5, r2
 8015ac2:	68a3      	ldr	r3, [r4, #8]
 8015ac4:	6922      	ldr	r2, [r4, #16]
 8015ac6:	bf0c      	ite	eq
 8015ac8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015acc:	2500      	movne	r5, #0
 8015ace:	4293      	cmp	r3, r2
 8015ad0:	bfc4      	itt	gt
 8015ad2:	1a9b      	subgt	r3, r3, r2
 8015ad4:	18ed      	addgt	r5, r5, r3
 8015ad6:	2600      	movs	r6, #0
 8015ad8:	341a      	adds	r4, #26
 8015ada:	42b5      	cmp	r5, r6
 8015adc:	d11a      	bne.n	8015b14 <_printf_common+0xc8>
 8015ade:	2000      	movs	r0, #0
 8015ae0:	e008      	b.n	8015af4 <_printf_common+0xa8>
 8015ae2:	2301      	movs	r3, #1
 8015ae4:	4652      	mov	r2, sl
 8015ae6:	4649      	mov	r1, r9
 8015ae8:	4638      	mov	r0, r7
 8015aea:	47c0      	blx	r8
 8015aec:	3001      	adds	r0, #1
 8015aee:	d103      	bne.n	8015af8 <_printf_common+0xac>
 8015af0:	f04f 30ff 	mov.w	r0, #4294967295
 8015af4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015af8:	3501      	adds	r5, #1
 8015afa:	e7c6      	b.n	8015a8a <_printf_common+0x3e>
 8015afc:	18e1      	adds	r1, r4, r3
 8015afe:	1c5a      	adds	r2, r3, #1
 8015b00:	2030      	movs	r0, #48	; 0x30
 8015b02:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8015b06:	4422      	add	r2, r4
 8015b08:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8015b0c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015b10:	3302      	adds	r3, #2
 8015b12:	e7c7      	b.n	8015aa4 <_printf_common+0x58>
 8015b14:	2301      	movs	r3, #1
 8015b16:	4622      	mov	r2, r4
 8015b18:	4649      	mov	r1, r9
 8015b1a:	4638      	mov	r0, r7
 8015b1c:	47c0      	blx	r8
 8015b1e:	3001      	adds	r0, #1
 8015b20:	d0e6      	beq.n	8015af0 <_printf_common+0xa4>
 8015b22:	3601      	adds	r6, #1
 8015b24:	e7d9      	b.n	8015ada <_printf_common+0x8e>
	...

08015b28 <_printf_i>:
 8015b28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015b2c:	7e0f      	ldrb	r7, [r1, #24]
 8015b2e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8015b30:	2f78      	cmp	r7, #120	; 0x78
 8015b32:	4691      	mov	r9, r2
 8015b34:	4680      	mov	r8, r0
 8015b36:	460c      	mov	r4, r1
 8015b38:	469a      	mov	sl, r3
 8015b3a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8015b3e:	d807      	bhi.n	8015b50 <_printf_i+0x28>
 8015b40:	2f62      	cmp	r7, #98	; 0x62
 8015b42:	d80a      	bhi.n	8015b5a <_printf_i+0x32>
 8015b44:	2f00      	cmp	r7, #0
 8015b46:	f000 80d8 	beq.w	8015cfa <_printf_i+0x1d2>
 8015b4a:	2f58      	cmp	r7, #88	; 0x58
 8015b4c:	f000 80a3 	beq.w	8015c96 <_printf_i+0x16e>
 8015b50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015b54:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8015b58:	e03a      	b.n	8015bd0 <_printf_i+0xa8>
 8015b5a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8015b5e:	2b15      	cmp	r3, #21
 8015b60:	d8f6      	bhi.n	8015b50 <_printf_i+0x28>
 8015b62:	a101      	add	r1, pc, #4	; (adr r1, 8015b68 <_printf_i+0x40>)
 8015b64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8015b68:	08015bc1 	.word	0x08015bc1
 8015b6c:	08015bd5 	.word	0x08015bd5
 8015b70:	08015b51 	.word	0x08015b51
 8015b74:	08015b51 	.word	0x08015b51
 8015b78:	08015b51 	.word	0x08015b51
 8015b7c:	08015b51 	.word	0x08015b51
 8015b80:	08015bd5 	.word	0x08015bd5
 8015b84:	08015b51 	.word	0x08015b51
 8015b88:	08015b51 	.word	0x08015b51
 8015b8c:	08015b51 	.word	0x08015b51
 8015b90:	08015b51 	.word	0x08015b51
 8015b94:	08015ce1 	.word	0x08015ce1
 8015b98:	08015c05 	.word	0x08015c05
 8015b9c:	08015cc3 	.word	0x08015cc3
 8015ba0:	08015b51 	.word	0x08015b51
 8015ba4:	08015b51 	.word	0x08015b51
 8015ba8:	08015d03 	.word	0x08015d03
 8015bac:	08015b51 	.word	0x08015b51
 8015bb0:	08015c05 	.word	0x08015c05
 8015bb4:	08015b51 	.word	0x08015b51
 8015bb8:	08015b51 	.word	0x08015b51
 8015bbc:	08015ccb 	.word	0x08015ccb
 8015bc0:	682b      	ldr	r3, [r5, #0]
 8015bc2:	1d1a      	adds	r2, r3, #4
 8015bc4:	681b      	ldr	r3, [r3, #0]
 8015bc6:	602a      	str	r2, [r5, #0]
 8015bc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015bcc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015bd0:	2301      	movs	r3, #1
 8015bd2:	e0a3      	b.n	8015d1c <_printf_i+0x1f4>
 8015bd4:	6820      	ldr	r0, [r4, #0]
 8015bd6:	6829      	ldr	r1, [r5, #0]
 8015bd8:	0606      	lsls	r6, r0, #24
 8015bda:	f101 0304 	add.w	r3, r1, #4
 8015bde:	d50a      	bpl.n	8015bf6 <_printf_i+0xce>
 8015be0:	680e      	ldr	r6, [r1, #0]
 8015be2:	602b      	str	r3, [r5, #0]
 8015be4:	2e00      	cmp	r6, #0
 8015be6:	da03      	bge.n	8015bf0 <_printf_i+0xc8>
 8015be8:	232d      	movs	r3, #45	; 0x2d
 8015bea:	4276      	negs	r6, r6
 8015bec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015bf0:	485e      	ldr	r0, [pc, #376]	; (8015d6c <_printf_i+0x244>)
 8015bf2:	230a      	movs	r3, #10
 8015bf4:	e019      	b.n	8015c2a <_printf_i+0x102>
 8015bf6:	680e      	ldr	r6, [r1, #0]
 8015bf8:	602b      	str	r3, [r5, #0]
 8015bfa:	f010 0f40 	tst.w	r0, #64	; 0x40
 8015bfe:	bf18      	it	ne
 8015c00:	b236      	sxthne	r6, r6
 8015c02:	e7ef      	b.n	8015be4 <_printf_i+0xbc>
 8015c04:	682b      	ldr	r3, [r5, #0]
 8015c06:	6820      	ldr	r0, [r4, #0]
 8015c08:	1d19      	adds	r1, r3, #4
 8015c0a:	6029      	str	r1, [r5, #0]
 8015c0c:	0601      	lsls	r1, r0, #24
 8015c0e:	d501      	bpl.n	8015c14 <_printf_i+0xec>
 8015c10:	681e      	ldr	r6, [r3, #0]
 8015c12:	e002      	b.n	8015c1a <_printf_i+0xf2>
 8015c14:	0646      	lsls	r6, r0, #25
 8015c16:	d5fb      	bpl.n	8015c10 <_printf_i+0xe8>
 8015c18:	881e      	ldrh	r6, [r3, #0]
 8015c1a:	4854      	ldr	r0, [pc, #336]	; (8015d6c <_printf_i+0x244>)
 8015c1c:	2f6f      	cmp	r7, #111	; 0x6f
 8015c1e:	bf0c      	ite	eq
 8015c20:	2308      	moveq	r3, #8
 8015c22:	230a      	movne	r3, #10
 8015c24:	2100      	movs	r1, #0
 8015c26:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015c2a:	6865      	ldr	r5, [r4, #4]
 8015c2c:	60a5      	str	r5, [r4, #8]
 8015c2e:	2d00      	cmp	r5, #0
 8015c30:	bfa2      	ittt	ge
 8015c32:	6821      	ldrge	r1, [r4, #0]
 8015c34:	f021 0104 	bicge.w	r1, r1, #4
 8015c38:	6021      	strge	r1, [r4, #0]
 8015c3a:	b90e      	cbnz	r6, 8015c40 <_printf_i+0x118>
 8015c3c:	2d00      	cmp	r5, #0
 8015c3e:	d04d      	beq.n	8015cdc <_printf_i+0x1b4>
 8015c40:	4615      	mov	r5, r2
 8015c42:	fbb6 f1f3 	udiv	r1, r6, r3
 8015c46:	fb03 6711 	mls	r7, r3, r1, r6
 8015c4a:	5dc7      	ldrb	r7, [r0, r7]
 8015c4c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8015c50:	4637      	mov	r7, r6
 8015c52:	42bb      	cmp	r3, r7
 8015c54:	460e      	mov	r6, r1
 8015c56:	d9f4      	bls.n	8015c42 <_printf_i+0x11a>
 8015c58:	2b08      	cmp	r3, #8
 8015c5a:	d10b      	bne.n	8015c74 <_printf_i+0x14c>
 8015c5c:	6823      	ldr	r3, [r4, #0]
 8015c5e:	07de      	lsls	r6, r3, #31
 8015c60:	d508      	bpl.n	8015c74 <_printf_i+0x14c>
 8015c62:	6923      	ldr	r3, [r4, #16]
 8015c64:	6861      	ldr	r1, [r4, #4]
 8015c66:	4299      	cmp	r1, r3
 8015c68:	bfde      	ittt	le
 8015c6a:	2330      	movle	r3, #48	; 0x30
 8015c6c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8015c70:	f105 35ff 	addle.w	r5, r5, #4294967295
 8015c74:	1b52      	subs	r2, r2, r5
 8015c76:	6122      	str	r2, [r4, #16]
 8015c78:	f8cd a000 	str.w	sl, [sp]
 8015c7c:	464b      	mov	r3, r9
 8015c7e:	aa03      	add	r2, sp, #12
 8015c80:	4621      	mov	r1, r4
 8015c82:	4640      	mov	r0, r8
 8015c84:	f7ff fee2 	bl	8015a4c <_printf_common>
 8015c88:	3001      	adds	r0, #1
 8015c8a:	d14c      	bne.n	8015d26 <_printf_i+0x1fe>
 8015c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8015c90:	b004      	add	sp, #16
 8015c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015c96:	4835      	ldr	r0, [pc, #212]	; (8015d6c <_printf_i+0x244>)
 8015c98:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8015c9c:	6829      	ldr	r1, [r5, #0]
 8015c9e:	6823      	ldr	r3, [r4, #0]
 8015ca0:	f851 6b04 	ldr.w	r6, [r1], #4
 8015ca4:	6029      	str	r1, [r5, #0]
 8015ca6:	061d      	lsls	r5, r3, #24
 8015ca8:	d514      	bpl.n	8015cd4 <_printf_i+0x1ac>
 8015caa:	07df      	lsls	r7, r3, #31
 8015cac:	bf44      	itt	mi
 8015cae:	f043 0320 	orrmi.w	r3, r3, #32
 8015cb2:	6023      	strmi	r3, [r4, #0]
 8015cb4:	b91e      	cbnz	r6, 8015cbe <_printf_i+0x196>
 8015cb6:	6823      	ldr	r3, [r4, #0]
 8015cb8:	f023 0320 	bic.w	r3, r3, #32
 8015cbc:	6023      	str	r3, [r4, #0]
 8015cbe:	2310      	movs	r3, #16
 8015cc0:	e7b0      	b.n	8015c24 <_printf_i+0xfc>
 8015cc2:	6823      	ldr	r3, [r4, #0]
 8015cc4:	f043 0320 	orr.w	r3, r3, #32
 8015cc8:	6023      	str	r3, [r4, #0]
 8015cca:	2378      	movs	r3, #120	; 0x78
 8015ccc:	4828      	ldr	r0, [pc, #160]	; (8015d70 <_printf_i+0x248>)
 8015cce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8015cd2:	e7e3      	b.n	8015c9c <_printf_i+0x174>
 8015cd4:	0659      	lsls	r1, r3, #25
 8015cd6:	bf48      	it	mi
 8015cd8:	b2b6      	uxthmi	r6, r6
 8015cda:	e7e6      	b.n	8015caa <_printf_i+0x182>
 8015cdc:	4615      	mov	r5, r2
 8015cde:	e7bb      	b.n	8015c58 <_printf_i+0x130>
 8015ce0:	682b      	ldr	r3, [r5, #0]
 8015ce2:	6826      	ldr	r6, [r4, #0]
 8015ce4:	6961      	ldr	r1, [r4, #20]
 8015ce6:	1d18      	adds	r0, r3, #4
 8015ce8:	6028      	str	r0, [r5, #0]
 8015cea:	0635      	lsls	r5, r6, #24
 8015cec:	681b      	ldr	r3, [r3, #0]
 8015cee:	d501      	bpl.n	8015cf4 <_printf_i+0x1cc>
 8015cf0:	6019      	str	r1, [r3, #0]
 8015cf2:	e002      	b.n	8015cfa <_printf_i+0x1d2>
 8015cf4:	0670      	lsls	r0, r6, #25
 8015cf6:	d5fb      	bpl.n	8015cf0 <_printf_i+0x1c8>
 8015cf8:	8019      	strh	r1, [r3, #0]
 8015cfa:	2300      	movs	r3, #0
 8015cfc:	6123      	str	r3, [r4, #16]
 8015cfe:	4615      	mov	r5, r2
 8015d00:	e7ba      	b.n	8015c78 <_printf_i+0x150>
 8015d02:	682b      	ldr	r3, [r5, #0]
 8015d04:	1d1a      	adds	r2, r3, #4
 8015d06:	602a      	str	r2, [r5, #0]
 8015d08:	681d      	ldr	r5, [r3, #0]
 8015d0a:	6862      	ldr	r2, [r4, #4]
 8015d0c:	2100      	movs	r1, #0
 8015d0e:	4628      	mov	r0, r5
 8015d10:	f7ea fa7e 	bl	8000210 <memchr>
 8015d14:	b108      	cbz	r0, 8015d1a <_printf_i+0x1f2>
 8015d16:	1b40      	subs	r0, r0, r5
 8015d18:	6060      	str	r0, [r4, #4]
 8015d1a:	6863      	ldr	r3, [r4, #4]
 8015d1c:	6123      	str	r3, [r4, #16]
 8015d1e:	2300      	movs	r3, #0
 8015d20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015d24:	e7a8      	b.n	8015c78 <_printf_i+0x150>
 8015d26:	6923      	ldr	r3, [r4, #16]
 8015d28:	462a      	mov	r2, r5
 8015d2a:	4649      	mov	r1, r9
 8015d2c:	4640      	mov	r0, r8
 8015d2e:	47d0      	blx	sl
 8015d30:	3001      	adds	r0, #1
 8015d32:	d0ab      	beq.n	8015c8c <_printf_i+0x164>
 8015d34:	6823      	ldr	r3, [r4, #0]
 8015d36:	079b      	lsls	r3, r3, #30
 8015d38:	d413      	bmi.n	8015d62 <_printf_i+0x23a>
 8015d3a:	68e0      	ldr	r0, [r4, #12]
 8015d3c:	9b03      	ldr	r3, [sp, #12]
 8015d3e:	4298      	cmp	r0, r3
 8015d40:	bfb8      	it	lt
 8015d42:	4618      	movlt	r0, r3
 8015d44:	e7a4      	b.n	8015c90 <_printf_i+0x168>
 8015d46:	2301      	movs	r3, #1
 8015d48:	4632      	mov	r2, r6
 8015d4a:	4649      	mov	r1, r9
 8015d4c:	4640      	mov	r0, r8
 8015d4e:	47d0      	blx	sl
 8015d50:	3001      	adds	r0, #1
 8015d52:	d09b      	beq.n	8015c8c <_printf_i+0x164>
 8015d54:	3501      	adds	r5, #1
 8015d56:	68e3      	ldr	r3, [r4, #12]
 8015d58:	9903      	ldr	r1, [sp, #12]
 8015d5a:	1a5b      	subs	r3, r3, r1
 8015d5c:	42ab      	cmp	r3, r5
 8015d5e:	dcf2      	bgt.n	8015d46 <_printf_i+0x21e>
 8015d60:	e7eb      	b.n	8015d3a <_printf_i+0x212>
 8015d62:	2500      	movs	r5, #0
 8015d64:	f104 0619 	add.w	r6, r4, #25
 8015d68:	e7f5      	b.n	8015d56 <_printf_i+0x22e>
 8015d6a:	bf00      	nop
 8015d6c:	0801ac65 	.word	0x0801ac65
 8015d70:	0801ac76 	.word	0x0801ac76

08015d74 <_sbrk_r>:
 8015d74:	b538      	push	{r3, r4, r5, lr}
 8015d76:	4d06      	ldr	r5, [pc, #24]	; (8015d90 <_sbrk_r+0x1c>)
 8015d78:	2300      	movs	r3, #0
 8015d7a:	4604      	mov	r4, r0
 8015d7c:	4608      	mov	r0, r1
 8015d7e:	602b      	str	r3, [r5, #0]
 8015d80:	f7eb fc40 	bl	8001604 <_sbrk>
 8015d84:	1c43      	adds	r3, r0, #1
 8015d86:	d102      	bne.n	8015d8e <_sbrk_r+0x1a>
 8015d88:	682b      	ldr	r3, [r5, #0]
 8015d8a:	b103      	cbz	r3, 8015d8e <_sbrk_r+0x1a>
 8015d8c:	6023      	str	r3, [r4, #0]
 8015d8e:	bd38      	pop	{r3, r4, r5, pc}
 8015d90:	20008d00 	.word	0x20008d00

08015d94 <__sread>:
 8015d94:	b510      	push	{r4, lr}
 8015d96:	460c      	mov	r4, r1
 8015d98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015d9c:	f000 f8d8 	bl	8015f50 <_read_r>
 8015da0:	2800      	cmp	r0, #0
 8015da2:	bfab      	itete	ge
 8015da4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8015da6:	89a3      	ldrhlt	r3, [r4, #12]
 8015da8:	181b      	addge	r3, r3, r0
 8015daa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8015dae:	bfac      	ite	ge
 8015db0:	6563      	strge	r3, [r4, #84]	; 0x54
 8015db2:	81a3      	strhlt	r3, [r4, #12]
 8015db4:	bd10      	pop	{r4, pc}

08015db6 <__swrite>:
 8015db6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015dba:	461f      	mov	r7, r3
 8015dbc:	898b      	ldrh	r3, [r1, #12]
 8015dbe:	05db      	lsls	r3, r3, #23
 8015dc0:	4605      	mov	r5, r0
 8015dc2:	460c      	mov	r4, r1
 8015dc4:	4616      	mov	r6, r2
 8015dc6:	d505      	bpl.n	8015dd4 <__swrite+0x1e>
 8015dc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015dcc:	2302      	movs	r3, #2
 8015dce:	2200      	movs	r2, #0
 8015dd0:	f000 f870 	bl	8015eb4 <_lseek_r>
 8015dd4:	89a3      	ldrh	r3, [r4, #12]
 8015dd6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015dda:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8015dde:	81a3      	strh	r3, [r4, #12]
 8015de0:	4632      	mov	r2, r6
 8015de2:	463b      	mov	r3, r7
 8015de4:	4628      	mov	r0, r5
 8015de6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015dea:	f000 b817 	b.w	8015e1c <_write_r>

08015dee <__sseek>:
 8015dee:	b510      	push	{r4, lr}
 8015df0:	460c      	mov	r4, r1
 8015df2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015df6:	f000 f85d 	bl	8015eb4 <_lseek_r>
 8015dfa:	1c43      	adds	r3, r0, #1
 8015dfc:	89a3      	ldrh	r3, [r4, #12]
 8015dfe:	bf15      	itete	ne
 8015e00:	6560      	strne	r0, [r4, #84]	; 0x54
 8015e02:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8015e06:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8015e0a:	81a3      	strheq	r3, [r4, #12]
 8015e0c:	bf18      	it	ne
 8015e0e:	81a3      	strhne	r3, [r4, #12]
 8015e10:	bd10      	pop	{r4, pc}

08015e12 <__sclose>:
 8015e12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015e16:	f000 b81b 	b.w	8015e50 <_close_r>
	...

08015e1c <_write_r>:
 8015e1c:	b538      	push	{r3, r4, r5, lr}
 8015e1e:	4d07      	ldr	r5, [pc, #28]	; (8015e3c <_write_r+0x20>)
 8015e20:	4604      	mov	r4, r0
 8015e22:	4608      	mov	r0, r1
 8015e24:	4611      	mov	r1, r2
 8015e26:	2200      	movs	r2, #0
 8015e28:	602a      	str	r2, [r5, #0]
 8015e2a:	461a      	mov	r2, r3
 8015e2c:	f7ea fc84 	bl	8000738 <_write>
 8015e30:	1c43      	adds	r3, r0, #1
 8015e32:	d102      	bne.n	8015e3a <_write_r+0x1e>
 8015e34:	682b      	ldr	r3, [r5, #0]
 8015e36:	b103      	cbz	r3, 8015e3a <_write_r+0x1e>
 8015e38:	6023      	str	r3, [r4, #0]
 8015e3a:	bd38      	pop	{r3, r4, r5, pc}
 8015e3c:	20008d00 	.word	0x20008d00

08015e40 <abort>:
 8015e40:	b508      	push	{r3, lr}
 8015e42:	2006      	movs	r0, #6
 8015e44:	f000 f8be 	bl	8015fc4 <raise>
 8015e48:	2001      	movs	r0, #1
 8015e4a:	f7eb fb7f 	bl	800154c <_exit>
	...

08015e50 <_close_r>:
 8015e50:	b538      	push	{r3, r4, r5, lr}
 8015e52:	4d06      	ldr	r5, [pc, #24]	; (8015e6c <_close_r+0x1c>)
 8015e54:	2300      	movs	r3, #0
 8015e56:	4604      	mov	r4, r0
 8015e58:	4608      	mov	r0, r1
 8015e5a:	602b      	str	r3, [r5, #0]
 8015e5c:	f7eb fb9d 	bl	800159a <_close>
 8015e60:	1c43      	adds	r3, r0, #1
 8015e62:	d102      	bne.n	8015e6a <_close_r+0x1a>
 8015e64:	682b      	ldr	r3, [r5, #0]
 8015e66:	b103      	cbz	r3, 8015e6a <_close_r+0x1a>
 8015e68:	6023      	str	r3, [r4, #0]
 8015e6a:	bd38      	pop	{r3, r4, r5, pc}
 8015e6c:	20008d00 	.word	0x20008d00

08015e70 <_fstat_r>:
 8015e70:	b538      	push	{r3, r4, r5, lr}
 8015e72:	4d07      	ldr	r5, [pc, #28]	; (8015e90 <_fstat_r+0x20>)
 8015e74:	2300      	movs	r3, #0
 8015e76:	4604      	mov	r4, r0
 8015e78:	4608      	mov	r0, r1
 8015e7a:	4611      	mov	r1, r2
 8015e7c:	602b      	str	r3, [r5, #0]
 8015e7e:	f7eb fb98 	bl	80015b2 <_fstat>
 8015e82:	1c43      	adds	r3, r0, #1
 8015e84:	d102      	bne.n	8015e8c <_fstat_r+0x1c>
 8015e86:	682b      	ldr	r3, [r5, #0]
 8015e88:	b103      	cbz	r3, 8015e8c <_fstat_r+0x1c>
 8015e8a:	6023      	str	r3, [r4, #0]
 8015e8c:	bd38      	pop	{r3, r4, r5, pc}
 8015e8e:	bf00      	nop
 8015e90:	20008d00 	.word	0x20008d00

08015e94 <_isatty_r>:
 8015e94:	b538      	push	{r3, r4, r5, lr}
 8015e96:	4d06      	ldr	r5, [pc, #24]	; (8015eb0 <_isatty_r+0x1c>)
 8015e98:	2300      	movs	r3, #0
 8015e9a:	4604      	mov	r4, r0
 8015e9c:	4608      	mov	r0, r1
 8015e9e:	602b      	str	r3, [r5, #0]
 8015ea0:	f7eb fb97 	bl	80015d2 <_isatty>
 8015ea4:	1c43      	adds	r3, r0, #1
 8015ea6:	d102      	bne.n	8015eae <_isatty_r+0x1a>
 8015ea8:	682b      	ldr	r3, [r5, #0]
 8015eaa:	b103      	cbz	r3, 8015eae <_isatty_r+0x1a>
 8015eac:	6023      	str	r3, [r4, #0]
 8015eae:	bd38      	pop	{r3, r4, r5, pc}
 8015eb0:	20008d00 	.word	0x20008d00

08015eb4 <_lseek_r>:
 8015eb4:	b538      	push	{r3, r4, r5, lr}
 8015eb6:	4d07      	ldr	r5, [pc, #28]	; (8015ed4 <_lseek_r+0x20>)
 8015eb8:	4604      	mov	r4, r0
 8015eba:	4608      	mov	r0, r1
 8015ebc:	4611      	mov	r1, r2
 8015ebe:	2200      	movs	r2, #0
 8015ec0:	602a      	str	r2, [r5, #0]
 8015ec2:	461a      	mov	r2, r3
 8015ec4:	f7eb fb90 	bl	80015e8 <_lseek>
 8015ec8:	1c43      	adds	r3, r0, #1
 8015eca:	d102      	bne.n	8015ed2 <_lseek_r+0x1e>
 8015ecc:	682b      	ldr	r3, [r5, #0]
 8015ece:	b103      	cbz	r3, 8015ed2 <_lseek_r+0x1e>
 8015ed0:	6023      	str	r3, [r4, #0]
 8015ed2:	bd38      	pop	{r3, r4, r5, pc}
 8015ed4:	20008d00 	.word	0x20008d00

08015ed8 <__malloc_lock>:
 8015ed8:	4801      	ldr	r0, [pc, #4]	; (8015ee0 <__malloc_lock+0x8>)
 8015eda:	f7ff b9b1 	b.w	8015240 <__retarget_lock_acquire_recursive>
 8015ede:	bf00      	nop
 8015ee0:	20008d04 	.word	0x20008d04

08015ee4 <__malloc_unlock>:
 8015ee4:	4801      	ldr	r0, [pc, #4]	; (8015eec <__malloc_unlock+0x8>)
 8015ee6:	f7ff b9ac 	b.w	8015242 <__retarget_lock_release_recursive>
 8015eea:	bf00      	nop
 8015eec:	20008d04 	.word	0x20008d04

08015ef0 <_realloc_r>:
 8015ef0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015ef4:	4680      	mov	r8, r0
 8015ef6:	4614      	mov	r4, r2
 8015ef8:	460e      	mov	r6, r1
 8015efa:	b921      	cbnz	r1, 8015f06 <_realloc_r+0x16>
 8015efc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015f00:	4611      	mov	r1, r2
 8015f02:	f7ff ba79 	b.w	80153f8 <_malloc_r>
 8015f06:	b92a      	cbnz	r2, 8015f14 <_realloc_r+0x24>
 8015f08:	f7ff fa0a 	bl	8015320 <_free_r>
 8015f0c:	4625      	mov	r5, r4
 8015f0e:	4628      	mov	r0, r5
 8015f10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015f14:	f000 f872 	bl	8015ffc <_malloc_usable_size_r>
 8015f18:	4284      	cmp	r4, r0
 8015f1a:	4607      	mov	r7, r0
 8015f1c:	d802      	bhi.n	8015f24 <_realloc_r+0x34>
 8015f1e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8015f22:	d812      	bhi.n	8015f4a <_realloc_r+0x5a>
 8015f24:	4621      	mov	r1, r4
 8015f26:	4640      	mov	r0, r8
 8015f28:	f7ff fa66 	bl	80153f8 <_malloc_r>
 8015f2c:	4605      	mov	r5, r0
 8015f2e:	2800      	cmp	r0, #0
 8015f30:	d0ed      	beq.n	8015f0e <_realloc_r+0x1e>
 8015f32:	42bc      	cmp	r4, r7
 8015f34:	4622      	mov	r2, r4
 8015f36:	4631      	mov	r1, r6
 8015f38:	bf28      	it	cs
 8015f3a:	463a      	movcs	r2, r7
 8015f3c:	f7fe fdbc 	bl	8014ab8 <memcpy>
 8015f40:	4631      	mov	r1, r6
 8015f42:	4640      	mov	r0, r8
 8015f44:	f7ff f9ec 	bl	8015320 <_free_r>
 8015f48:	e7e1      	b.n	8015f0e <_realloc_r+0x1e>
 8015f4a:	4635      	mov	r5, r6
 8015f4c:	e7df      	b.n	8015f0e <_realloc_r+0x1e>
	...

08015f50 <_read_r>:
 8015f50:	b538      	push	{r3, r4, r5, lr}
 8015f52:	4d07      	ldr	r5, [pc, #28]	; (8015f70 <_read_r+0x20>)
 8015f54:	4604      	mov	r4, r0
 8015f56:	4608      	mov	r0, r1
 8015f58:	4611      	mov	r1, r2
 8015f5a:	2200      	movs	r2, #0
 8015f5c:	602a      	str	r2, [r5, #0]
 8015f5e:	461a      	mov	r2, r3
 8015f60:	f7eb fafe 	bl	8001560 <_read>
 8015f64:	1c43      	adds	r3, r0, #1
 8015f66:	d102      	bne.n	8015f6e <_read_r+0x1e>
 8015f68:	682b      	ldr	r3, [r5, #0]
 8015f6a:	b103      	cbz	r3, 8015f6e <_read_r+0x1e>
 8015f6c:	6023      	str	r3, [r4, #0]
 8015f6e:	bd38      	pop	{r3, r4, r5, pc}
 8015f70:	20008d00 	.word	0x20008d00

08015f74 <_raise_r>:
 8015f74:	291f      	cmp	r1, #31
 8015f76:	b538      	push	{r3, r4, r5, lr}
 8015f78:	4604      	mov	r4, r0
 8015f7a:	460d      	mov	r5, r1
 8015f7c:	d904      	bls.n	8015f88 <_raise_r+0x14>
 8015f7e:	2316      	movs	r3, #22
 8015f80:	6003      	str	r3, [r0, #0]
 8015f82:	f04f 30ff 	mov.w	r0, #4294967295
 8015f86:	bd38      	pop	{r3, r4, r5, pc}
 8015f88:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8015f8a:	b112      	cbz	r2, 8015f92 <_raise_r+0x1e>
 8015f8c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015f90:	b94b      	cbnz	r3, 8015fa6 <_raise_r+0x32>
 8015f92:	4620      	mov	r0, r4
 8015f94:	f000 f830 	bl	8015ff8 <_getpid_r>
 8015f98:	462a      	mov	r2, r5
 8015f9a:	4601      	mov	r1, r0
 8015f9c:	4620      	mov	r0, r4
 8015f9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015fa2:	f000 b817 	b.w	8015fd4 <_kill_r>
 8015fa6:	2b01      	cmp	r3, #1
 8015fa8:	d00a      	beq.n	8015fc0 <_raise_r+0x4c>
 8015faa:	1c59      	adds	r1, r3, #1
 8015fac:	d103      	bne.n	8015fb6 <_raise_r+0x42>
 8015fae:	2316      	movs	r3, #22
 8015fb0:	6003      	str	r3, [r0, #0]
 8015fb2:	2001      	movs	r0, #1
 8015fb4:	e7e7      	b.n	8015f86 <_raise_r+0x12>
 8015fb6:	2400      	movs	r4, #0
 8015fb8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8015fbc:	4628      	mov	r0, r5
 8015fbe:	4798      	blx	r3
 8015fc0:	2000      	movs	r0, #0
 8015fc2:	e7e0      	b.n	8015f86 <_raise_r+0x12>

08015fc4 <raise>:
 8015fc4:	4b02      	ldr	r3, [pc, #8]	; (8015fd0 <raise+0xc>)
 8015fc6:	4601      	mov	r1, r0
 8015fc8:	6818      	ldr	r0, [r3, #0]
 8015fca:	f7ff bfd3 	b.w	8015f74 <_raise_r>
 8015fce:	bf00      	nop
 8015fd0:	2000006c 	.word	0x2000006c

08015fd4 <_kill_r>:
 8015fd4:	b538      	push	{r3, r4, r5, lr}
 8015fd6:	4d07      	ldr	r5, [pc, #28]	; (8015ff4 <_kill_r+0x20>)
 8015fd8:	2300      	movs	r3, #0
 8015fda:	4604      	mov	r4, r0
 8015fdc:	4608      	mov	r0, r1
 8015fde:	4611      	mov	r1, r2
 8015fe0:	602b      	str	r3, [r5, #0]
 8015fe2:	f7eb faa1 	bl	8001528 <_kill>
 8015fe6:	1c43      	adds	r3, r0, #1
 8015fe8:	d102      	bne.n	8015ff0 <_kill_r+0x1c>
 8015fea:	682b      	ldr	r3, [r5, #0]
 8015fec:	b103      	cbz	r3, 8015ff0 <_kill_r+0x1c>
 8015fee:	6023      	str	r3, [r4, #0]
 8015ff0:	bd38      	pop	{r3, r4, r5, pc}
 8015ff2:	bf00      	nop
 8015ff4:	20008d00 	.word	0x20008d00

08015ff8 <_getpid_r>:
 8015ff8:	f7eb ba8e 	b.w	8001518 <_getpid>

08015ffc <_malloc_usable_size_r>:
 8015ffc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016000:	1f18      	subs	r0, r3, #4
 8016002:	2b00      	cmp	r3, #0
 8016004:	bfbc      	itt	lt
 8016006:	580b      	ldrlt	r3, [r1, r0]
 8016008:	18c0      	addlt	r0, r0, r3
 801600a:	4770      	bx	lr

0801600c <_init>:
 801600c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801600e:	bf00      	nop
 8016010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016012:	bc08      	pop	{r3}
 8016014:	469e      	mov	lr, r3
 8016016:	4770      	bx	lr

08016018 <_fini>:
 8016018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801601a:	bf00      	nop
 801601c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801601e:	bc08      	pop	{r3}
 8016020:	469e      	mov	lr, r3
 8016022:	4770      	bx	lr
