
Project_746_LwIP_LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017b7c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000054f8  08017d4c  08017d4c  00027d4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801d244  0801d244  00049c40  2**0
                  CONTENTS
  4 .ARM          00000008  0801d244  0801d244  0002d244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801d24c  0801d24c  00049c40  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801d24c  0801d24c  0002d24c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801d250  0801d250  0002d250  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d0  20000000  0801d254  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200000d0  0801d324  000300d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000170  0801d3c4  00030170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00008b04  20000210  0801d464  00030210  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20008d14  0801d464  00038d14  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00049c40  2**0
                  CONTENTS, READONLY
 14 .ExtQSPIFlashSection 00009c40  90000000  90000000  00040000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 15 .debug_info   0003260b  00000000  00000000  00049c70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000076a7  00000000  00000000  0007c27b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000024b8  00000000  00000000  00083928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00002358  00000000  00000000  00085de0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0003710d  00000000  00000000  00088138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   000375c7  00000000  00000000  000bf245  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    00110e1c  00000000  00000000  000f680c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000050  00000000  00000000  00207628  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000a2d8  00000000  00000000  00207678  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000210 	.word	0x20000210
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08017d34 	.word	0x08017d34

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000214 	.word	0x20000214
 800020c:	08017d34 	.word	0x08017d34

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <echo_close>:
#include <tcp.h>

char tcp_buffer[1024];

static void echo_close (struct tcp_pcb *pcb )
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
    tcp_arg(pcb, NULL);
 80005cc:	2100      	movs	r1, #0
 80005ce:	6878      	ldr	r0, [r7, #4]
 80005d0:	f00e fe2c 	bl	800f22c <tcp_arg>
    tcp_sent(pcb, NULL);
 80005d4:	2100      	movs	r1, #0
 80005d6:	6878      	ldr	r0, [r7, #4]
 80005d8:	f00e fe5c 	bl	800f294 <tcp_sent>
    tcp_recv(pcb, NULL);
 80005dc:	2100      	movs	r1, #0
 80005de:	6878      	ldr	r0, [r7, #4]
 80005e0:	f00e fe36 	bl	800f250 <tcp_recv>
    tcp_close(pcb);
 80005e4:	6878      	ldr	r0, [r7, #4]
 80005e6:	f00d fb59 	bl	800dc9c <tcp_close>
}
 80005ea:	bf00      	nop
 80005ec:	3708      	adds	r7, #8
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
	...

080005f4 <echo_recv>:

static err_t echo_recv( void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err )
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b088      	sub	sp, #32
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	60f8      	str	r0, [r7, #12]
 80005fc:	60b9      	str	r1, [r7, #8]
 80005fe:	607a      	str	r2, [r7, #4]
 8000600:	70fb      	strb	r3, [r7, #3]
    int i;
    int len;
    char *pc;

    if ( err == ERR_OK && p != NULL )
 8000602:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000606:	2b00      	cmp	r3, #0
 8000608:	d142      	bne.n	8000690 <echo_recv+0x9c>
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	2b00      	cmp	r3, #0
 800060e:	d03f      	beq.n	8000690 <echo_recv+0x9c>
    {
        tcp_recved( pcb, p->tot_len );  //possible error
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	891b      	ldrh	r3, [r3, #8]
 8000614:	4619      	mov	r1, r3
 8000616:	68b8      	ldr	r0, [r7, #8]
 8000618:	f00d fe04 	bl	800e224 <tcp_recved>
        pc = (char *)p->payload;
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	685b      	ldr	r3, [r3, #4]
 8000620:	617b      	str	r3, [r7, #20]
        len =p->tot_len;				//possible error
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	891b      	ldrh	r3, [r3, #8]
 8000626:	61bb      	str	r3, [r7, #24]

        for( i=0; i<len; i++ )
 8000628:	2300      	movs	r3, #0
 800062a:	61fb      	str	r3, [r7, #28]
 800062c:	e00b      	b.n	8000646 <echo_recv+0x52>
        {
            tcp_buffer[i] = pc[i];
 800062e:	69fb      	ldr	r3, [r7, #28]
 8000630:	697a      	ldr	r2, [r7, #20]
 8000632:	4413      	add	r3, r2
 8000634:	7819      	ldrb	r1, [r3, #0]
 8000636:	4a1f      	ldr	r2, [pc, #124]	; (80006b4 <echo_recv+0xc0>)
 8000638:	69fb      	ldr	r3, [r7, #28]
 800063a:	4413      	add	r3, r2
 800063c:	460a      	mov	r2, r1
 800063e:	701a      	strb	r2, [r3, #0]
        for( i=0; i<len; i++ )
 8000640:	69fb      	ldr	r3, [r7, #28]
 8000642:	3301      	adds	r3, #1
 8000644:	61fb      	str	r3, [r7, #28]
 8000646:	69fa      	ldr	r2, [r7, #28]
 8000648:	69bb      	ldr	r3, [r7, #24]
 800064a:	429a      	cmp	r2, r3
 800064c:	dbef      	blt.n	800062e <echo_recv+0x3a>
        }

        if( tcp_buffer[0] == 'X' )
 800064e:	4b19      	ldr	r3, [pc, #100]	; (80006b4 <echo_recv+0xc0>)
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	2b58      	cmp	r3, #88	; 0x58
 8000654:	d102      	bne.n	800065c <echo_recv+0x68>
            echo_close( pcb );
 8000656:	68b8      	ldr	r0, [r7, #8]
 8000658:	f7ff ffb4 	bl	80005c4 <echo_close>

        pbuf_free( p );
 800065c:	6878      	ldr	r0, [r7, #4]
 800065e:	f00c fe1b 	bl	800d298 <pbuf_free>

        if( len > tcp_sndbuf( pcb ) )
 8000662:	68bb      	ldr	r3, [r7, #8]
 8000664:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8000668:	461a      	mov	r2, r3
 800066a:	69bb      	ldr	r3, [r7, #24]
 800066c:	4293      	cmp	r3, r2
 800066e:	dd03      	ble.n	8000678 <echo_recv+0x84>
            len= tcp_sndbuf( pcb );
 8000670:	68bb      	ldr	r3, [r7, #8]
 8000672:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8000676:	61bb      	str	r3, [r7, #24]

        tcp_write( pcb, tcp_buffer, len, 0 );
 8000678:	69bb      	ldr	r3, [r7, #24]
 800067a:	b29a      	uxth	r2, r3
 800067c:	2300      	movs	r3, #0
 800067e:	490d      	ldr	r1, [pc, #52]	; (80006b4 <echo_recv+0xc0>)
 8000680:	68b8      	ldr	r0, [r7, #8]
 8000682:	f011 fd15 	bl	80120b0 <tcp_write>
        tcp_sent( pcb, NULL );
 8000686:	2100      	movs	r1, #0
 8000688:	68b8      	ldr	r0, [r7, #8]
 800068a:	f00e fe03 	bl	800f294 <tcp_sent>
 800068e:	e002      	b.n	8000696 <echo_recv+0xa2>
    }
    else
    {
        pbuf_free( p );
 8000690:	6878      	ldr	r0, [r7, #4]
 8000692:	f00c fe01 	bl	800d298 <pbuf_free>
    }

    if( err == ERR_OK && p == NULL )
 8000696:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800069a:	2b00      	cmp	r3, #0
 800069c:	d105      	bne.n	80006aa <echo_recv+0xb6>
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d102      	bne.n	80006aa <echo_recv+0xb6>
    {
        echo_close( pcb );
 80006a4:	68b8      	ldr	r0, [r7, #8]
 80006a6:	f7ff ff8d 	bl	80005c4 <echo_close>
    }

    return ERR_OK;
 80006aa:	2300      	movs	r3, #0
}
 80006ac:	4618      	mov	r0, r3
 80006ae:	3720      	adds	r7, #32
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	2000022c 	.word	0x2000022c

080006b8 <echo_accept>:

static err_t echo_accept(void *arg, struct tcp_pcb *pcb, err_t err )
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b084      	sub	sp, #16
 80006bc:	af00      	add	r7, sp, #0
 80006be:	60f8      	str	r0, [r7, #12]
 80006c0:	60b9      	str	r1, [r7, #8]
 80006c2:	4613      	mov	r3, r2
 80006c4:	71fb      	strb	r3, [r7, #7]
    LWIP_UNUSED_ARG( arg );
    LWIP_UNUSED_ARG( err );
    tcp_setprio( pcb, TCP_PRIO_MIN );
 80006c6:	2101      	movs	r1, #1
 80006c8:	68b8      	ldr	r0, [r7, #8]
 80006ca:	f00e fba7 	bl	800ee1c <tcp_setprio>
    tcp_recv( pcb, echo_recv );
 80006ce:	490e      	ldr	r1, [pc, #56]	; (8000708 <echo_accept+0x50>)
 80006d0:	68b8      	ldr	r0, [r7, #8]
 80006d2:	f00e fdbd 	bl	800f250 <tcp_recv>
    tcp_err( pcb, NULL );
 80006d6:	2100      	movs	r1, #0
 80006d8:	68b8      	ldr	r0, [r7, #8]
 80006da:	f00e fdfd 	bl	800f2d8 <tcp_err>
    tcp_poll( pcb, NULL, 4 );
 80006de:	2204      	movs	r2, #4
 80006e0:	2100      	movs	r1, #0
 80006e2:	68b8      	ldr	r0, [r7, #8]
 80006e4:	f00e fe32 	bl	800f34c <tcp_poll>
    tcp_write( pcb,
 80006e8:	2300      	movs	r3, #0
 80006ea:	2276      	movs	r2, #118	; 0x76
 80006ec:	4907      	ldr	r1, [pc, #28]	; (800070c <echo_accept+0x54>)
 80006ee:	68b8      	ldr	r0, [r7, #8]
 80006f0:	f011 fcde 	bl	80120b0 <tcp_write>
    		"    Welcome to the echo server demo    \r\n"
    		" (I send everything back! X to close)  \r\n"
    		"=======================================\r\n", 118, 0 );
    tcp_sent( pcb, NULL );
 80006f4:	2100      	movs	r1, #0
 80006f6:	68b8      	ldr	r0, [r7, #8]
 80006f8:	f00e fdcc 	bl	800f294 <tcp_sent>
    return ERR_OK;
 80006fc:	2300      	movs	r3, #0
}
 80006fe:	4618      	mov	r0, r3
 8000700:	3710      	adds	r7, #16
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	080005f5 	.word	0x080005f5
 800070c:	08017d4c 	.word	0x08017d4c

08000710 <echo_init>:

void echo_init( void )
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
    struct tcp_pcb *tcp_pcb;
    tcp_pcb = tcp_new();
 8000716:	f00e fd73 	bl	800f200 <tcp_new>
 800071a:	6078      	str	r0, [r7, #4]
    tcp_bind(tcp_pcb, IP_ADDR_ANY, 23);
 800071c:	2217      	movs	r2, #23
 800071e:	4908      	ldr	r1, [pc, #32]	; (8000740 <echo_init+0x30>)
 8000720:	6878      	ldr	r0, [r7, #4]
 8000722:	f00d fbb1 	bl	800de88 <tcp_bind>

    tcp_pcb = tcp_listen( tcp_pcb );
 8000726:	21ff      	movs	r1, #255	; 0xff
 8000728:	6878      	ldr	r0, [r7, #4]
 800072a:	f00d fc65 	bl	800dff8 <tcp_listen_with_backlog>
 800072e:	6078      	str	r0, [r7, #4]
    tcp_accept( tcp_pcb, echo_accept );
 8000730:	4904      	ldr	r1, [pc, #16]	; (8000744 <echo_init+0x34>)
 8000732:	6878      	ldr	r0, [r7, #4]
 8000734:	f00e fdf2 	bl	800f31c <tcp_accept>
}
 8000738:	bf00      	nop
 800073a:	3708      	adds	r7, #8
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	0801d0e8 	.word	0x0801d0e8
 8000744:	080006b9 	.word	0x080006b9

08000748 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//This function will send the characters from printf via UART1.
//Modified so you don't have to type \r\n anymore, just type \n.
int _write(int file, char *ptr, int len) {
 8000748:	b580      	push	{r7, lr}
 800074a:	b086      	sub	sp, #24
 800074c:	af00      	add	r7, sp, #0
 800074e:	60f8      	str	r0, [r7, #12]
 8000750:	60b9      	str	r1, [r7, #8]
 8000752:	607a      	str	r2, [r7, #4]
	for(int i = 0; i < len; i++){
 8000754:	2300      	movs	r3, #0
 8000756:	617b      	str	r3, [r7, #20]
 8000758:	e018      	b.n	800078c <_write+0x44>
		if(ptr[i]=='\n'){
 800075a:	697b      	ldr	r3, [r7, #20]
 800075c:	68ba      	ldr	r2, [r7, #8]
 800075e:	4413      	add	r3, r2
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	2b0a      	cmp	r3, #10
 8000764:	d106      	bne.n	8000774 <_write+0x2c>
			HAL_UART_Transmit(&huart1, (uint8_t*)"\r", 1, HAL_MAX_DELAY);
 8000766:	f04f 33ff 	mov.w	r3, #4294967295
 800076a:	2201      	movs	r2, #1
 800076c:	490c      	ldr	r1, [pc, #48]	; (80007a0 <_write+0x58>)
 800076e:	480d      	ldr	r0, [pc, #52]	; (80007a4 <_write+0x5c>)
 8000770:	f008 fb67 	bl	8008e42 <HAL_UART_Transmit>
		}
		HAL_UART_Transmit(&huart1, (uint8_t*)&ptr[i], 1, HAL_MAX_DELAY);
 8000774:	697b      	ldr	r3, [r7, #20]
 8000776:	68ba      	ldr	r2, [r7, #8]
 8000778:	18d1      	adds	r1, r2, r3
 800077a:	f04f 33ff 	mov.w	r3, #4294967295
 800077e:	2201      	movs	r2, #1
 8000780:	4808      	ldr	r0, [pc, #32]	; (80007a4 <_write+0x5c>)
 8000782:	f008 fb5e 	bl	8008e42 <HAL_UART_Transmit>
	for(int i = 0; i < len; i++){
 8000786:	697b      	ldr	r3, [r7, #20]
 8000788:	3301      	adds	r3, #1
 800078a:	617b      	str	r3, [r7, #20]
 800078c:	697a      	ldr	r2, [r7, #20]
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	429a      	cmp	r2, r3
 8000792:	dbe2      	blt.n	800075a <_write+0x12>
	}
    return len;
 8000794:	687b      	ldr	r3, [r7, #4]
}
 8000796:	4618      	mov	r0, r3
 8000798:	3718      	adds	r7, #24
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	08017dc8 	.word	0x08017dc8
 80007a4:	20000760 	.word	0x20000760

080007a8 <checkScreensaver>:
//This function will check if the screensaver needs to be on or not.
//It will disable the screen if no fingers are detected after SCREENSAVER_DELAY
void checkScreensaver(void){
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b08c      	sub	sp, #48	; 0x30
 80007ac:	af00      	add	r7, sp, #0
	static uint32_t ScreensaverStart = SCREENSAVER_DELAY+100;
	static uint8_t screensaver_status = 0;
	if(ScreensaverStart < HAL_GetTick() && screensaver_status == 0){
 80007ae:	f003 fa1b 	bl	8003be8 <HAL_GetTick>
 80007b2:	4602      	mov	r2, r0
 80007b4:	4b21      	ldr	r3, [pc, #132]	; (800083c <checkScreensaver+0x94>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	429a      	cmp	r2, r3
 80007ba:	d914      	bls.n	80007e6 <checkScreensaver+0x3e>
 80007bc:	4b20      	ldr	r3, [pc, #128]	; (8000840 <checkScreensaver+0x98>)
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d110      	bne.n	80007e6 <checkScreensaver+0x3e>
		//Screen saver on -> display Off
		HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_RESET);
 80007c4:	2200      	movs	r2, #0
 80007c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007ca:	481e      	ldr	r0, [pc, #120]	; (8000844 <checkScreensaver+0x9c>)
 80007cc:	f005 fbb2 	bl	8005f34 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_RESET);
 80007d0:	2200      	movs	r2, #0
 80007d2:	2108      	movs	r1, #8
 80007d4:	481c      	ldr	r0, [pc, #112]	; (8000848 <checkScreensaver+0xa0>)
 80007d6:	f005 fbad 	bl	8005f34 <HAL_GPIO_WritePin>
		screensaver_status = 1;
 80007da:	4b19      	ldr	r3, [pc, #100]	; (8000840 <checkScreensaver+0x98>)
 80007dc:	2201      	movs	r2, #1
 80007de:	701a      	strb	r2, [r3, #0]
		printf("Screensaver: on\n");
 80007e0:	481a      	ldr	r0, [pc, #104]	; (800084c <checkScreensaver+0xa4>)
 80007e2:	f016 f8b3 	bl	801694c <puts>
	}
	TS_StateTypeDef TS_State;
	BSP_TS_GetState(&TS_State);
 80007e6:	1d3b      	adds	r3, r7, #4
 80007e8:	4618      	mov	r0, r3
 80007ea:	f002 ff6f 	bl	80036cc <BSP_TS_GetState>
	if(TS_State.touchDetected > 0){
 80007ee:	793b      	ldrb	r3, [r7, #4]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d01f      	beq.n	8000834 <checkScreensaver+0x8c>
		//new start value
		ScreensaverStart = HAL_GetTick() + SCREENSAVER_DELAY;
 80007f4:	f003 f9f8 	bl	8003be8 <HAL_GetTick>
 80007f8:	4602      	mov	r2, r0
 80007fa:	f247 5330 	movw	r3, #30000	; 0x7530
 80007fe:	4413      	add	r3, r2
 8000800:	4a0e      	ldr	r2, [pc, #56]	; (800083c <checkScreensaver+0x94>)
 8000802:	6013      	str	r3, [r2, #0]
		if(screensaver_status == 1){
 8000804:	4b0e      	ldr	r3, [pc, #56]	; (8000840 <checkScreensaver+0x98>)
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	2b01      	cmp	r3, #1
 800080a:	d113      	bne.n	8000834 <checkScreensaver+0x8c>
			HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 800080c:	2201      	movs	r2, #1
 800080e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000812:	480c      	ldr	r0, [pc, #48]	; (8000844 <checkScreensaver+0x9c>)
 8000814:	f005 fb8e 	bl	8005f34 <HAL_GPIO_WritePin>
			HAL_Delay(100);
 8000818:	2064      	movs	r0, #100	; 0x64
 800081a:	f003 f9f1 	bl	8003c00 <HAL_Delay>
			HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 800081e:	2201      	movs	r2, #1
 8000820:	2108      	movs	r1, #8
 8000822:	4809      	ldr	r0, [pc, #36]	; (8000848 <checkScreensaver+0xa0>)
 8000824:	f005 fb86 	bl	8005f34 <HAL_GPIO_WritePin>
			screensaver_status = 0;
 8000828:	4b05      	ldr	r3, [pc, #20]	; (8000840 <checkScreensaver+0x98>)
 800082a:	2200      	movs	r2, #0
 800082c:	701a      	strb	r2, [r3, #0]
			printf("Screensaver: off\n");
 800082e:	4808      	ldr	r0, [pc, #32]	; (8000850 <checkScreensaver+0xa8>)
 8000830:	f016 f88c 	bl	801694c <puts>
		}
	}
}
 8000834:	bf00      	nop
 8000836:	3730      	adds	r7, #48	; 0x30
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	20000000 	.word	0x20000000
 8000840:	20000820 	.word	0x20000820
 8000844:	40022000 	.word	0x40022000
 8000848:	40022800 	.word	0x40022800
 800084c:	08017dcc 	.word	0x08017dcc
 8000850:	08017ddc 	.word	0x08017ddc

08000854 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b090      	sub	sp, #64	; 0x40
 8000858:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800085a:	f003 f973 	bl	8003b44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800085e:	f000 f883 	bl	8000968 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000862:	f000 fa87 	bl	8000d74 <MX_GPIO_Init>
  MX_LTDC_Init();
 8000866:	f000 f921 	bl	8000aac <MX_LTDC_Init>
  MX_USART1_UART_Init();
 800086a:	f000 fa05 	bl	8000c78 <MX_USART1_UART_Init>
  MX_DMA2D_Init();
 800086e:	f000 f8eb 	bl	8000a48 <MX_DMA2D_Init>
  MX_FMC_Init();
 8000872:	f000 fa31 	bl	8000cd8 <MX_FMC_Init>
  MX_LWIP_Init();
 8000876:	f009 f86d 	bl	8009954 <MX_LWIP_Init>
  MX_QUADSPI_Init();
 800087a:	f000 f9d1 	bl	8000c20 <MX_QUADSPI_Init>
  /* USER CODE BEGIN 2 */
  /*QSPI INIT*/
  BSP_QSPI_Init();
 800087e:	f002 faad 	bl	8002ddc <BSP_QSPI_Init>
  BSP_QSPI_MemoryMappedMode();
 8000882:	f002 fb03 	bl	8002e8c <BSP_QSPI_EnableMemoryMappedMode>
  WRITE_REG(QUADSPI->LPTR, 0xFFF);
 8000886:	4b2e      	ldr	r3, [pc, #184]	; (8000940 <main+0xec>)
 8000888:	f640 72ff 	movw	r2, #4095	; 0xfff
 800088c:	631a      	str	r2, [r3, #48]	; 0x30
  printf("Running LwIP & LCD start project...\n");
 800088e:	482d      	ldr	r0, [pc, #180]	; (8000944 <main+0xf0>)
 8000890:	f016 f85c 	bl	801694c <puts>
  echo_init();
 8000894:	f7ff ff3c 	bl	8000710 <echo_init>
  BSP_LCD_Init();
 8000898:	f001 fd72 	bl	8002380 <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(1, LCD_FB_START_ADDRESS);
 800089c:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 80008a0:	2001      	movs	r0, #1
 80008a2:	f001 fe05 	bl	80024b0 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS+(480*272*4));
 80008a6:	4928      	ldr	r1, [pc, #160]	; (8000948 <main+0xf4>)
 80008a8:	2000      	movs	r0, #0
 80008aa:	f001 fe01 	bl	80024b0 <BSP_LCD_LayerDefaultInit>
  /* Enable the LCD */
  BSP_LCD_DisplayOn();
 80008ae:	f002 f81d 	bl	80028ec <BSP_LCD_DisplayOn>
  /* Select the LCD Background Layer  */
  BSP_LCD_SelectLayer(0);
 80008b2:	2000      	movs	r0, #0
 80008b4:	f001 fe5c 	bl	8002570 <BSP_LCD_SelectLayer>
  /* Clear the Background Layer */
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 80008b8:	f04f 30ff 	mov.w	r0, #4294967295
 80008bc:	f001 fe9a 	bl	80025f4 <BSP_LCD_Clear>
  BSP_LCD_SelectLayer(1);
 80008c0:	2001      	movs	r0, #1
 80008c2:	f001 fe55 	bl	8002570 <BSP_LCD_SelectLayer>
  /* Clear the foreground Layer */
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 80008c6:	f04f 30ff 	mov.w	r0, #4294967295
 80008ca:	f001 fe93 	bl	80025f4 <BSP_LCD_Clear>
  /* Some sign */
  BSP_LCD_SetTextColor(LCD_COLOR_RED);
 80008ce:	481f      	ldr	r0, [pc, #124]	; (800094c <main+0xf8>)
 80008d0:	f001 fe5e 	bl	8002590 <BSP_LCD_SetTextColor>
  BSP_LCD_SetFont(&Font12);
 80008d4:	481e      	ldr	r0, [pc, #120]	; (8000950 <main+0xfc>)
 80008d6:	f001 fe73 	bl	80025c0 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 0, (uint8_t*) "Display is working", CENTER_MODE);
 80008da:	2301      	movs	r3, #1
 80008dc:	4a1d      	ldr	r2, [pc, #116]	; (8000954 <main+0x100>)
 80008de:	2100      	movs	r1, #0
 80008e0:	2000      	movs	r0, #0
 80008e2:	f001 fef3 	bl	80026cc <BSP_LCD_DisplayStringAt>
  char buffer[50];
  sprintf(buffer, "Screensaver delay is set to: %ds", SCREENSAVER_DELAY/1000);
 80008e6:	463b      	mov	r3, r7
 80008e8:	221e      	movs	r2, #30
 80008ea:	491b      	ldr	r1, [pc, #108]	; (8000958 <main+0x104>)
 80008ec:	4618      	mov	r0, r3
 80008ee:	f016 f873 	bl	80169d8 <siprintf>
  BSP_LCD_DisplayStringAt(0, 12, (uint8_t*) buffer, CENTER_MODE);
 80008f2:	463a      	mov	r2, r7
 80008f4:	2301      	movs	r3, #1
 80008f6:	210c      	movs	r1, #12
 80008f8:	2000      	movs	r0, #0
 80008fa:	f001 fee7 	bl	80026cc <BSP_LCD_DisplayStringAt>
  WDA_LCD_DrawBitmap(TM_LOGO_DATA,
 80008fe:	2303      	movs	r3, #3
 8000900:	9301      	str	r3, [sp, #4]
 8000902:	2364      	movs	r3, #100	; 0x64
 8000904:	9300      	str	r3, [sp, #0]
 8000906:	23c8      	movs	r3, #200	; 0xc8
 8000908:	2256      	movs	r2, #86	; 0x56
 800090a:	218c      	movs	r1, #140	; 0x8c
 800090c:	4813      	ldr	r0, [pc, #76]	; (800095c <main+0x108>)
 800090e:	f002 fa05 	bl	8002d1c <WDA_LCD_DrawBitmap>
		  (272-TM_LOGO_DATA_Y_PIXEL)/2,
		  TM_LOGO_DATA_X_PIXEL,
		  TM_LOGO_DATA_Y_PIXEL,
		  TM_LOGO_DATA_FORMAT);
  /* Init touch screen */
  BSP_TS_Init(480,272);
 8000912:	f44f 7188 	mov.w	r1, #272	; 0x110
 8000916:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 800091a:	f002 fe97 	bl	800364c <BSP_TS_Init>

  /* Create client */
  mqtt_client_t *client = mqtt_client_new();
 800091e:	f00a feaf 	bl	800b680 <mqtt_client_new>
 8000922:	6378      	str	r0, [r7, #52]	; 0x34

  /* Set IP address */
  IP_ADDR4(&brokerIP ,192,168,0,137);
 8000924:	4b0e      	ldr	r3, [pc, #56]	; (8000960 <main+0x10c>)
 8000926:	4a0f      	ldr	r2, [pc, #60]	; (8000964 <main+0x110>)
 8000928:	601a      	str	r2, [r3, #0]

  /* Connect client */
  if (client != NULL) {
 800092a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800092c:	2b00      	cmp	r3, #0
 800092e:	d002      	beq.n	8000936 <main+0xe2>
	  connect_to_broker(client);
 8000930:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000932:	f000 faed 	bl	8000f10 <connect_to_broker>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	MX_LWIP_Process();
 8000936:	f009 f959 	bl	8009bec <MX_LWIP_Process>
	checkScreensaver();
 800093a:	f7ff ff35 	bl	80007a8 <checkScreensaver>
	MX_LWIP_Process();
 800093e:	e7fa      	b.n	8000936 <main+0xe2>
 8000940:	a0001000 	.word	0xa0001000
 8000944:	08017df0 	.word	0x08017df0
 8000948:	c007f800 	.word	0xc007f800
 800094c:	ffff0000 	.word	0xffff0000
 8000950:	20000038 	.word	0x20000038
 8000954:	08017e14 	.word	0x08017e14
 8000958:	08017e28 	.word	0x08017e28
 800095c:	90000000 	.word	0x90000000
 8000960:	2000081c 	.word	0x2000081c
 8000964:	8900a8c0 	.word	0x8900a8c0

08000968 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b094      	sub	sp, #80	; 0x50
 800096c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800096e:	f107 0320 	add.w	r3, r7, #32
 8000972:	2230      	movs	r2, #48	; 0x30
 8000974:	2100      	movs	r1, #0
 8000976:	4618      	mov	r0, r3
 8000978:	f015 ff5a 	bl	8016830 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800097c:	f107 030c 	add.w	r3, r7, #12
 8000980:	2200      	movs	r2, #0
 8000982:	601a      	str	r2, [r3, #0]
 8000984:	605a      	str	r2, [r3, #4]
 8000986:	609a      	str	r2, [r3, #8]
 8000988:	60da      	str	r2, [r3, #12]
 800098a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800098c:	f006 fb4c 	bl	8007028 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000990:	4b2b      	ldr	r3, [pc, #172]	; (8000a40 <SystemClock_Config+0xd8>)
 8000992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000994:	4a2a      	ldr	r2, [pc, #168]	; (8000a40 <SystemClock_Config+0xd8>)
 8000996:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800099a:	6413      	str	r3, [r2, #64]	; 0x40
 800099c:	4b28      	ldr	r3, [pc, #160]	; (8000a40 <SystemClock_Config+0xd8>)
 800099e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009a4:	60bb      	str	r3, [r7, #8]
 80009a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009a8:	4b26      	ldr	r3, [pc, #152]	; (8000a44 <SystemClock_Config+0xdc>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a25      	ldr	r2, [pc, #148]	; (8000a44 <SystemClock_Config+0xdc>)
 80009ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80009b2:	6013      	str	r3, [r2, #0]
 80009b4:	4b23      	ldr	r3, [pc, #140]	; (8000a44 <SystemClock_Config+0xdc>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009bc:	607b      	str	r3, [r7, #4]
 80009be:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009c0:	2301      	movs	r3, #1
 80009c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009c8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009ca:	2302      	movs	r3, #2
 80009cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009ce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80009d4:	2319      	movs	r3, #25
 80009d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 80009d8:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80009dc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009de:	2302      	movs	r3, #2
 80009e0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80009e2:	2302      	movs	r3, #2
 80009e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009e6:	f107 0320 	add.w	r3, r7, #32
 80009ea:	4618      	mov	r0, r3
 80009ec:	f007 f8d0 	bl	8007b90 <HAL_RCC_OscConfig>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <SystemClock_Config+0x92>
  {
    Error_Handler();
 80009f6:	f000 fb17 	bl	8001028 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80009fa:	f006 fb25 	bl	8007048 <HAL_PWREx_EnableOverDrive>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000a04:	f000 fb10 	bl	8001028 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a08:	230f      	movs	r3, #15
 8000a0a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a10:	2300      	movs	r3, #0
 8000a12:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a14:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a18:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a1e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000a20:	f107 030c 	add.w	r3, r7, #12
 8000a24:	2106      	movs	r1, #6
 8000a26:	4618      	mov	r0, r3
 8000a28:	f007 fb56 	bl	80080d8 <HAL_RCC_ClockConfig>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000a32:	f000 faf9 	bl	8001028 <Error_Handler>
  }
}
 8000a36:	bf00      	nop
 8000a38:	3750      	adds	r7, #80	; 0x50
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	40023800 	.word	0x40023800
 8000a44:	40007000 	.word	0x40007000

08000a48 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000a4c:	4b15      	ldr	r3, [pc, #84]	; (8000aa4 <MX_DMA2D_Init+0x5c>)
 8000a4e:	4a16      	ldr	r2, [pc, #88]	; (8000aa8 <MX_DMA2D_Init+0x60>)
 8000a50:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000a52:	4b14      	ldr	r3, [pc, #80]	; (8000aa4 <MX_DMA2D_Init+0x5c>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000a58:	4b12      	ldr	r3, [pc, #72]	; (8000aa4 <MX_DMA2D_Init+0x5c>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000a5e:	4b11      	ldr	r3, [pc, #68]	; (8000aa4 <MX_DMA2D_Init+0x5c>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000a64:	4b0f      	ldr	r3, [pc, #60]	; (8000aa4 <MX_DMA2D_Init+0x5c>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000a6a:	4b0e      	ldr	r3, [pc, #56]	; (8000aa4 <MX_DMA2D_Init+0x5c>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000a70:	4b0c      	ldr	r3, [pc, #48]	; (8000aa4 <MX_DMA2D_Init+0x5c>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000a76:	4b0b      	ldr	r3, [pc, #44]	; (8000aa4 <MX_DMA2D_Init+0x5c>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000a7c:	4809      	ldr	r0, [pc, #36]	; (8000aa4 <MX_DMA2D_Init+0x5c>)
 8000a7e:	f003 fc23 	bl	80042c8 <HAL_DMA2D_Init>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000a88:	f000 face 	bl	8001028 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000a8c:	2101      	movs	r1, #1
 8000a8e:	4805      	ldr	r0, [pc, #20]	; (8000aa4 <MX_DMA2D_Init+0x5c>)
 8000a90:	f003 fd78 	bl	8004584 <HAL_DMA2D_ConfigLayer>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000a9a:	f000 fac5 	bl	8001028 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000a9e:	bf00      	nop
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	2000062c 	.word	0x2000062c
 8000aa8:	4002b000 	.word	0x4002b000

08000aac <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b09a      	sub	sp, #104	; 0x68
 8000ab0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000ab2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000ab6:	2234      	movs	r2, #52	; 0x34
 8000ab8:	2100      	movs	r1, #0
 8000aba:	4618      	mov	r0, r3
 8000abc:	f015 feb8 	bl	8016830 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8000ac0:	463b      	mov	r3, r7
 8000ac2:	2234      	movs	r2, #52	; 0x34
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f015 feb2 	bl	8016830 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000acc:	4b52      	ldr	r3, [pc, #328]	; (8000c18 <MX_LTDC_Init+0x16c>)
 8000ace:	4a53      	ldr	r2, [pc, #332]	; (8000c1c <MX_LTDC_Init+0x170>)
 8000ad0:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000ad2:	4b51      	ldr	r3, [pc, #324]	; (8000c18 <MX_LTDC_Init+0x16c>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000ad8:	4b4f      	ldr	r3, [pc, #316]	; (8000c18 <MX_LTDC_Init+0x16c>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000ade:	4b4e      	ldr	r3, [pc, #312]	; (8000c18 <MX_LTDC_Init+0x16c>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000ae4:	4b4c      	ldr	r3, [pc, #304]	; (8000c18 <MX_LTDC_Init+0x16c>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8000aea:	4b4b      	ldr	r3, [pc, #300]	; (8000c18 <MX_LTDC_Init+0x16c>)
 8000aec:	2228      	movs	r2, #40	; 0x28
 8000aee:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8000af0:	4b49      	ldr	r3, [pc, #292]	; (8000c18 <MX_LTDC_Init+0x16c>)
 8000af2:	2209      	movs	r2, #9
 8000af4:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8000af6:	4b48      	ldr	r3, [pc, #288]	; (8000c18 <MX_LTDC_Init+0x16c>)
 8000af8:	2235      	movs	r2, #53	; 0x35
 8000afa:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8000afc:	4b46      	ldr	r3, [pc, #280]	; (8000c18 <MX_LTDC_Init+0x16c>)
 8000afe:	220b      	movs	r2, #11
 8000b00:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8000b02:	4b45      	ldr	r3, [pc, #276]	; (8000c18 <MX_LTDC_Init+0x16c>)
 8000b04:	f240 2215 	movw	r2, #533	; 0x215
 8000b08:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8000b0a:	4b43      	ldr	r3, [pc, #268]	; (8000c18 <MX_LTDC_Init+0x16c>)
 8000b0c:	f240 121b 	movw	r2, #283	; 0x11b
 8000b10:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8000b12:	4b41      	ldr	r3, [pc, #260]	; (8000c18 <MX_LTDC_Init+0x16c>)
 8000b14:	f240 2235 	movw	r2, #565	; 0x235
 8000b18:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8000b1a:	4b3f      	ldr	r3, [pc, #252]	; (8000c18 <MX_LTDC_Init+0x16c>)
 8000b1c:	f240 121d 	movw	r2, #285	; 0x11d
 8000b20:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000b22:	4b3d      	ldr	r3, [pc, #244]	; (8000c18 <MX_LTDC_Init+0x16c>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 255;
 8000b2a:	4b3b      	ldr	r3, [pc, #236]	; (8000c18 <MX_LTDC_Init+0x16c>)
 8000b2c:	22ff      	movs	r2, #255	; 0xff
 8000b2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000b32:	4b39      	ldr	r3, [pc, #228]	; (8000c18 <MX_LTDC_Init+0x16c>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000b3a:	4837      	ldr	r0, [pc, #220]	; (8000c18 <MX_LTDC_Init+0x16c>)
 8000b3c:	f005 ffbe 	bl	8006abc <HAL_LTDC_Init>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8000b46:	f000 fa6f 	bl	8001028 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 480;
 8000b4e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000b52:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8000b54:	2300      	movs	r3, #0
 8000b56:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 272;
 8000b58:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000b5c:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB1555;
 8000b5e:	2303      	movs	r3, #3
 8000b60:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 255;
 8000b62:	23ff      	movs	r3, #255	; 0xff
 8000b64:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8000b66:	2300      	movs	r3, #0
 8000b68:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000b6a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000b6e:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000b70:	2307      	movs	r3, #7
 8000b72:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 8000b74:	2300      	movs	r3, #0
 8000b76:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 480;
 8000b78:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000b7c:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 272;
 8000b7e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000b82:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8000b84:	2300      	movs	r3, #0
 8000b86:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8000b90:	2300      	movs	r3, #0
 8000b92:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000b96:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	481e      	ldr	r0, [pc, #120]	; (8000c18 <MX_LTDC_Init+0x16c>)
 8000ba0:	f006 f85c 	bl	8006c5c <HAL_LTDC_ConfigLayer>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <MX_LTDC_Init+0x102>
  {
    Error_Handler();
 8000baa:	f000 fa3d 	bl	8001028 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 480;
 8000bb2:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000bb6:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 272;
 8000bbc:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000bc0:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB1555;
 8000bc2:	2303      	movs	r3, #3
 8000bc4:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 255;
 8000bc6:	23ff      	movs	r3, #255	; 0xff
 8000bc8:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000bce:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000bd2:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000bd4:	2307      	movs	r3, #7
 8000bd6:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 480;
 8000bdc:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000be0:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 272;
 8000be2:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000be6:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8000be8:	2300      	movs	r3, #0
 8000bea:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8000bfa:	463b      	mov	r3, r7
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	4619      	mov	r1, r3
 8000c00:	4805      	ldr	r0, [pc, #20]	; (8000c18 <MX_LTDC_Init+0x16c>)
 8000c02:	f006 f82b 	bl	8006c5c <HAL_LTDC_ConfigLayer>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <MX_LTDC_Init+0x164>
  {
    Error_Handler();
 8000c0c:	f000 fa0c 	bl	8001028 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000c10:	bf00      	nop
 8000c12:	3768      	adds	r7, #104	; 0x68
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	2000066c 	.word	0x2000066c
 8000c1c:	40016800 	.word	0x40016800

08000c20 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000c24:	4b12      	ldr	r3, [pc, #72]	; (8000c70 <MX_QUADSPI_Init+0x50>)
 8000c26:	4a13      	ldr	r2, [pc, #76]	; (8000c74 <MX_QUADSPI_Init+0x54>)
 8000c28:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8000c2a:	4b11      	ldr	r3, [pc, #68]	; (8000c70 <MX_QUADSPI_Init+0x50>)
 8000c2c:	22ff      	movs	r2, #255	; 0xff
 8000c2e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000c30:	4b0f      	ldr	r3, [pc, #60]	; (8000c70 <MX_QUADSPI_Init+0x50>)
 8000c32:	2201      	movs	r2, #1
 8000c34:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000c36:	4b0e      	ldr	r3, [pc, #56]	; (8000c70 <MX_QUADSPI_Init+0x50>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8000c3c:	4b0c      	ldr	r3, [pc, #48]	; (8000c70 <MX_QUADSPI_Init+0x50>)
 8000c3e:	2201      	movs	r2, #1
 8000c40:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000c42:	4b0b      	ldr	r3, [pc, #44]	; (8000c70 <MX_QUADSPI_Init+0x50>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000c48:	4b09      	ldr	r3, [pc, #36]	; (8000c70 <MX_QUADSPI_Init+0x50>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000c4e:	4b08      	ldr	r3, [pc, #32]	; (8000c70 <MX_QUADSPI_Init+0x50>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000c54:	4b06      	ldr	r3, [pc, #24]	; (8000c70 <MX_QUADSPI_Init+0x50>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000c5a:	4805      	ldr	r0, [pc, #20]	; (8000c70 <MX_QUADSPI_Init+0x50>)
 8000c5c:	f006 fa44 	bl	80070e8 <HAL_QSPI_Init>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8000c66:	f000 f9df 	bl	8001028 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000c6a:	bf00      	nop
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	20000714 	.word	0x20000714
 8000c74:	a0001000 	.word	0xa0001000

08000c78 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c7c:	4b14      	ldr	r3, [pc, #80]	; (8000cd0 <MX_USART1_UART_Init+0x58>)
 8000c7e:	4a15      	ldr	r2, [pc, #84]	; (8000cd4 <MX_USART1_UART_Init+0x5c>)
 8000c80:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c82:	4b13      	ldr	r3, [pc, #76]	; (8000cd0 <MX_USART1_UART_Init+0x58>)
 8000c84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c88:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c8a:	4b11      	ldr	r3, [pc, #68]	; (8000cd0 <MX_USART1_UART_Init+0x58>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c90:	4b0f      	ldr	r3, [pc, #60]	; (8000cd0 <MX_USART1_UART_Init+0x58>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c96:	4b0e      	ldr	r3, [pc, #56]	; (8000cd0 <MX_USART1_UART_Init+0x58>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c9c:	4b0c      	ldr	r3, [pc, #48]	; (8000cd0 <MX_USART1_UART_Init+0x58>)
 8000c9e:	220c      	movs	r2, #12
 8000ca0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ca2:	4b0b      	ldr	r3, [pc, #44]	; (8000cd0 <MX_USART1_UART_Init+0x58>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ca8:	4b09      	ldr	r3, [pc, #36]	; (8000cd0 <MX_USART1_UART_Init+0x58>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cae:	4b08      	ldr	r3, [pc, #32]	; (8000cd0 <MX_USART1_UART_Init+0x58>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cb4:	4b06      	ldr	r3, [pc, #24]	; (8000cd0 <MX_USART1_UART_Init+0x58>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000cba:	4805      	ldr	r0, [pc, #20]	; (8000cd0 <MX_USART1_UART_Init+0x58>)
 8000cbc:	f008 f873 	bl	8008da6 <HAL_UART_Init>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000cc6:	f000 f9af 	bl	8001028 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000cca:	bf00      	nop
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	20000760 	.word	0x20000760
 8000cd4:	40011000 	.word	0x40011000

08000cd8 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b088      	sub	sp, #32
 8000cdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000cde:	1d3b      	adds	r3, r7, #4
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	601a      	str	r2, [r3, #0]
 8000ce4:	605a      	str	r2, [r3, #4]
 8000ce6:	609a      	str	r2, [r3, #8]
 8000ce8:	60da      	str	r2, [r3, #12]
 8000cea:	611a      	str	r2, [r3, #16]
 8000cec:	615a      	str	r2, [r3, #20]
 8000cee:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000cf0:	4b1e      	ldr	r3, [pc, #120]	; (8000d6c <MX_FMC_Init+0x94>)
 8000cf2:	4a1f      	ldr	r2, [pc, #124]	; (8000d70 <MX_FMC_Init+0x98>)
 8000cf4:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000cf6:	4b1d      	ldr	r3, [pc, #116]	; (8000d6c <MX_FMC_Init+0x94>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000cfc:	4b1b      	ldr	r3, [pc, #108]	; (8000d6c <MX_FMC_Init+0x94>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000d02:	4b1a      	ldr	r3, [pc, #104]	; (8000d6c <MX_FMC_Init+0x94>)
 8000d04:	2204      	movs	r2, #4
 8000d06:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000d08:	4b18      	ldr	r3, [pc, #96]	; (8000d6c <MX_FMC_Init+0x94>)
 8000d0a:	2210      	movs	r2, #16
 8000d0c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000d0e:	4b17      	ldr	r3, [pc, #92]	; (8000d6c <MX_FMC_Init+0x94>)
 8000d10:	2240      	movs	r2, #64	; 0x40
 8000d12:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8000d14:	4b15      	ldr	r3, [pc, #84]	; (8000d6c <MX_FMC_Init+0x94>)
 8000d16:	2280      	movs	r2, #128	; 0x80
 8000d18:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000d1a:	4b14      	ldr	r3, [pc, #80]	; (8000d6c <MX_FMC_Init+0x94>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8000d20:	4b12      	ldr	r3, [pc, #72]	; (8000d6c <MX_FMC_Init+0x94>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000d26:	4b11      	ldr	r3, [pc, #68]	; (8000d6c <MX_FMC_Init+0x94>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000d2c:	4b0f      	ldr	r3, [pc, #60]	; (8000d6c <MX_FMC_Init+0x94>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8000d32:	2310      	movs	r3, #16
 8000d34:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8000d36:	2310      	movs	r3, #16
 8000d38:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 8000d3a:	2310      	movs	r3, #16
 8000d3c:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 8000d3e:	2310      	movs	r3, #16
 8000d40:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8000d42:	2310      	movs	r3, #16
 8000d44:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 8000d46:	2310      	movs	r3, #16
 8000d48:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 8000d4a:	2310      	movs	r3, #16
 8000d4c:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000d4e:	1d3b      	adds	r3, r7, #4
 8000d50:	4619      	mov	r1, r3
 8000d52:	4806      	ldr	r0, [pc, #24]	; (8000d6c <MX_FMC_Init+0x94>)
 8000d54:	f007 ff96 	bl	8008c84 <HAL_SDRAM_Init>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 8000d5e:	f000 f963 	bl	8001028 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000d62:	bf00      	nop
 8000d64:	3720      	adds	r7, #32
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	200007e8 	.word	0x200007e8
 8000d70:	a0000140 	.word	0xa0000140

08000d74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b090      	sub	sp, #64	; 0x40
 8000d78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d7a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d7e:	2200      	movs	r2, #0
 8000d80:	601a      	str	r2, [r3, #0]
 8000d82:	605a      	str	r2, [r3, #4]
 8000d84:	609a      	str	r2, [r3, #8]
 8000d86:	60da      	str	r2, [r3, #12]
 8000d88:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d8a:	4b5e      	ldr	r3, [pc, #376]	; (8000f04 <MX_GPIO_Init+0x190>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8e:	4a5d      	ldr	r2, [pc, #372]	; (8000f04 <MX_GPIO_Init+0x190>)
 8000d90:	f043 0310 	orr.w	r3, r3, #16
 8000d94:	6313      	str	r3, [r2, #48]	; 0x30
 8000d96:	4b5b      	ldr	r3, [pc, #364]	; (8000f04 <MX_GPIO_Init+0x190>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9a:	f003 0310 	and.w	r3, r3, #16
 8000d9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000da2:	4b58      	ldr	r3, [pc, #352]	; (8000f04 <MX_GPIO_Init+0x190>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da6:	4a57      	ldr	r2, [pc, #348]	; (8000f04 <MX_GPIO_Init+0x190>)
 8000da8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000dac:	6313      	str	r3, [r2, #48]	; 0x30
 8000dae:	4b55      	ldr	r3, [pc, #340]	; (8000f04 <MX_GPIO_Init+0x190>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000db6:	627b      	str	r3, [r7, #36]	; 0x24
 8000db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dba:	4b52      	ldr	r3, [pc, #328]	; (8000f04 <MX_GPIO_Init+0x190>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbe:	4a51      	ldr	r2, [pc, #324]	; (8000f04 <MX_GPIO_Init+0x190>)
 8000dc0:	f043 0302 	orr.w	r3, r3, #2
 8000dc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc6:	4b4f      	ldr	r3, [pc, #316]	; (8000f04 <MX_GPIO_Init+0x190>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dca:	f003 0302 	and.w	r3, r3, #2
 8000dce:	623b      	str	r3, [r7, #32]
 8000dd0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000dd2:	4b4c      	ldr	r3, [pc, #304]	; (8000f04 <MX_GPIO_Init+0x190>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd6:	4a4b      	ldr	r2, [pc, #300]	; (8000f04 <MX_GPIO_Init+0x190>)
 8000dd8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ddc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dde:	4b49      	ldr	r3, [pc, #292]	; (8000f04 <MX_GPIO_Init+0x190>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000de6:	61fb      	str	r3, [r7, #28]
 8000de8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dea:	4b46      	ldr	r3, [pc, #280]	; (8000f04 <MX_GPIO_Init+0x190>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dee:	4a45      	ldr	r2, [pc, #276]	; (8000f04 <MX_GPIO_Init+0x190>)
 8000df0:	f043 0308 	orr.w	r3, r3, #8
 8000df4:	6313      	str	r3, [r2, #48]	; 0x30
 8000df6:	4b43      	ldr	r3, [pc, #268]	; (8000f04 <MX_GPIO_Init+0x190>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfa:	f003 0308 	and.w	r3, r3, #8
 8000dfe:	61bb      	str	r3, [r7, #24]
 8000e00:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000e02:	4b40      	ldr	r3, [pc, #256]	; (8000f04 <MX_GPIO_Init+0x190>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e06:	4a3f      	ldr	r2, [pc, #252]	; (8000f04 <MX_GPIO_Init+0x190>)
 8000e08:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e0e:	4b3d      	ldr	r3, [pc, #244]	; (8000f04 <MX_GPIO_Init+0x190>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e16:	617b      	str	r3, [r7, #20]
 8000e18:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e1a:	4b3a      	ldr	r3, [pc, #232]	; (8000f04 <MX_GPIO_Init+0x190>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1e:	4a39      	ldr	r2, [pc, #228]	; (8000f04 <MX_GPIO_Init+0x190>)
 8000e20:	f043 0320 	orr.w	r3, r3, #32
 8000e24:	6313      	str	r3, [r2, #48]	; 0x30
 8000e26:	4b37      	ldr	r3, [pc, #220]	; (8000f04 <MX_GPIO_Init+0x190>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2a:	f003 0320 	and.w	r3, r3, #32
 8000e2e:	613b      	str	r3, [r7, #16]
 8000e30:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000e32:	4b34      	ldr	r3, [pc, #208]	; (8000f04 <MX_GPIO_Init+0x190>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e36:	4a33      	ldr	r2, [pc, #204]	; (8000f04 <MX_GPIO_Init+0x190>)
 8000e38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e3e:	4b31      	ldr	r3, [pc, #196]	; (8000f04 <MX_GPIO_Init+0x190>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e46:	60fb      	str	r3, [r7, #12]
 8000e48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e4a:	4b2e      	ldr	r3, [pc, #184]	; (8000f04 <MX_GPIO_Init+0x190>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4e:	4a2d      	ldr	r2, [pc, #180]	; (8000f04 <MX_GPIO_Init+0x190>)
 8000e50:	f043 0304 	orr.w	r3, r3, #4
 8000e54:	6313      	str	r3, [r2, #48]	; 0x30
 8000e56:	4b2b      	ldr	r3, [pc, #172]	; (8000f04 <MX_GPIO_Init+0x190>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5a:	f003 0304 	and.w	r3, r3, #4
 8000e5e:	60bb      	str	r3, [r7, #8]
 8000e60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e62:	4b28      	ldr	r3, [pc, #160]	; (8000f04 <MX_GPIO_Init+0x190>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e66:	4a27      	ldr	r2, [pc, #156]	; (8000f04 <MX_GPIO_Init+0x190>)
 8000e68:	f043 0301 	orr.w	r3, r3, #1
 8000e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e6e:	4b25      	ldr	r3, [pc, #148]	; (8000f04 <MX_GPIO_Init+0x190>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e72:	f003 0301 	and.w	r3, r3, #1
 8000e76:	607b      	str	r3, [r7, #4]
 8000e78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e7a:	4b22      	ldr	r3, [pc, #136]	; (8000f04 <MX_GPIO_Init+0x190>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7e:	4a21      	ldr	r2, [pc, #132]	; (8000f04 <MX_GPIO_Init+0x190>)
 8000e80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e84:	6313      	str	r3, [r2, #48]	; 0x30
 8000e86:	4b1f      	ldr	r3, [pc, #124]	; (8000f04 <MX_GPIO_Init+0x190>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e8e:	603b      	str	r3, [r7, #0]
 8000e90:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8000e92:	2200      	movs	r2, #0
 8000e94:	2108      	movs	r1, #8
 8000e96:	481c      	ldr	r0, [pc, #112]	; (8000f08 <MX_GPIO_Init+0x194>)
 8000e98:	f005 f84c 	bl	8005f34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, LED_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	f241 0102 	movw	r1, #4098	; 0x1002
 8000ea2:	481a      	ldr	r0, [pc, #104]	; (8000f0c <MX_GPIO_Init+0x198>)
 8000ea4:	f005 f846 	bl	8005f34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8000ea8:	2308      	movs	r3, #8
 8000eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eac:	2301      	movs	r3, #1
 8000eae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000eb8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	4812      	ldr	r0, [pc, #72]	; (8000f08 <MX_GPIO_Init+0x194>)
 8000ec0:	f004 fd80 	bl	80059c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = LED_Pin|LCD_DISP_Pin;
 8000ec4:	f241 0302 	movw	r3, #4098	; 0x1002
 8000ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000ed6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000eda:	4619      	mov	r1, r3
 8000edc:	480b      	ldr	r0, [pc, #44]	; (8000f0c <MX_GPIO_Init+0x198>)
 8000ede:	f004 fd71 	bl	80059c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8000ee2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eec:	2300      	movs	r3, #0
 8000eee:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000ef0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4805      	ldr	r0, [pc, #20]	; (8000f0c <MX_GPIO_Init+0x198>)
 8000ef8:	f004 fd64 	bl	80059c4 <HAL_GPIO_Init>

}
 8000efc:	bf00      	nop
 8000efe:	3740      	adds	r7, #64	; 0x40
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	40023800 	.word	0x40023800
 8000f08:	40022800 	.word	0x40022800
 8000f0c:	40022000 	.word	0x40022000

08000f10 <connect_to_broker>:

/* USER CODE BEGIN 4 */

void  connect_to_broker(mqtt_client_t *client)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b08c      	sub	sp, #48	; 0x30
 8000f14:	af02      	add	r7, sp, #8
 8000f16:	6078      	str	r0, [r7, #4]
	err_t err;
	struct mqtt_connect_client_info_t clientInfo;
	memset(&clientInfo, 0, sizeof(clientInfo));
 8000f18:	f107 0308 	add.w	r3, r7, #8
 8000f1c:	221c      	movs	r2, #28
 8000f1e:	2100      	movs	r1, #0
 8000f20:	4618      	mov	r0, r3
 8000f22:	f015 fc85 	bl	8016830 <memset>

	clientInfo.client_id = "ledstripSubscriber"; // Set client ID
 8000f26:	4b15      	ldr	r3, [pc, #84]	; (8000f7c <connect_to_broker+0x6c>)
 8000f28:	60bb      	str	r3, [r7, #8]
	clientInfo.keep_alive = 60;
 8000f2a:	233c      	movs	r3, #60	; 0x3c
 8000f2c:	82bb      	strh	r3, [r7, #20]

	err = mqtt_client_connect(client, &brokerIP, 1883, mqtt_connection_cb, 0, &clientInfo);
 8000f2e:	f107 0308 	add.w	r3, r7, #8
 8000f32:	9301      	str	r3, [sp, #4]
 8000f34:	2300      	movs	r3, #0
 8000f36:	9300      	str	r3, [sp, #0]
 8000f38:	4b11      	ldr	r3, [pc, #68]	; (8000f80 <connect_to_broker+0x70>)
 8000f3a:	f240 725b 	movw	r2, #1883	; 0x75b
 8000f3e:	4911      	ldr	r1, [pc, #68]	; (8000f84 <connect_to_broker+0x74>)
 8000f40:	6878      	ldr	r0, [r7, #4]
 8000f42:	f00a fba7 	bl	800b694 <mqtt_client_connect>
 8000f46:	4603      	mov	r3, r0
 8000f48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (err != ERR_OK) {
 8000f4c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d00e      	beq.n	8000f72 <connect_to_broker+0x62>
		if (err == ERR_ISCONN) {
 8000f54:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8000f58:	f113 0f0a 	cmn.w	r3, #10
 8000f5c:	d103      	bne.n	8000f66 <connect_to_broker+0x56>
			printf("Already connected.\n"); // temp for debug
 8000f5e:	480a      	ldr	r0, [pc, #40]	; (8000f88 <connect_to_broker+0x78>)
 8000f60:	f015 fcf4 	bl	801694c <puts>
		} else {
			printf("mqtt_client_connect return: %d\n", err);
		}
	}

}
 8000f64:	e005      	b.n	8000f72 <connect_to_broker+0x62>
			printf("mqtt_client_connect return: %d\n", err);
 8000f66:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	4807      	ldr	r0, [pc, #28]	; (8000f8c <connect_to_broker+0x7c>)
 8000f6e:	f015 fc67 	bl	8016840 <iprintf>
}
 8000f72:	bf00      	nop
 8000f74:	3728      	adds	r7, #40	; 0x28
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	08017e4c 	.word	0x08017e4c
 8000f80:	08000f91 	.word	0x08000f91
 8000f84:	2000081c 	.word	0x2000081c
 8000f88:	08017e60 	.word	0x08017e60
 8000f8c:	08017e74 	.word	0x08017e74

08000f90 <mqtt_connection_cb>:

void mqtt_connection_cb(mqtt_client_t *client, void *arg, mqtt_connection_status_t status)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b088      	sub	sp, #32
 8000f94:	af02      	add	r7, sp, #8
 8000f96:	60f8      	str	r0, [r7, #12]
 8000f98:	60b9      	str	r1, [r7, #8]
 8000f9a:	4613      	mov	r3, r2
 8000f9c:	80fb      	strh	r3, [r7, #6]
  err_t err;
  if(status == MQTT_CONNECT_ACCEPTED) {
 8000f9e:	88fb      	ldrh	r3, [r7, #6]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d119      	bne.n	8000fd8 <mqtt_connection_cb+0x48>
    printf("mqtt_connection_cb: Successfully connected\n");
 8000fa4:	4812      	ldr	r0, [pc, #72]	; (8000ff0 <mqtt_connection_cb+0x60>)
 8000fa6:	f015 fcd1 	bl	801694c <puts>

    /* Setup callback for incoming publish requests */
    //mqtt_set_inpub_callback(client, mqtt_incoming_publish_cb, mqtt_incoming_data_cb, arg);

    /* Subscribe to a topic named "ledstrip" with QoS level 1, call mqtt_sub_request_cb with result */
    err = mqtt_subscribe(client, "ledstrip", 1, mqtt_sub_request_cb, arg);
 8000faa:	2301      	movs	r3, #1
 8000fac:	9301      	str	r3, [sp, #4]
 8000fae:	68bb      	ldr	r3, [r7, #8]
 8000fb0:	9300      	str	r3, [sp, #0]
 8000fb2:	4b10      	ldr	r3, [pc, #64]	; (8000ff4 <mqtt_connection_cb+0x64>)
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	4910      	ldr	r1, [pc, #64]	; (8000ff8 <mqtt_connection_cb+0x68>)
 8000fb8:	68f8      	ldr	r0, [r7, #12]
 8000fba:	f00a fa8b 	bl	800b4d4 <mqtt_sub_unsub>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	75fb      	strb	r3, [r7, #23]

    if(err != ERR_OK) {
 8000fc2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d00e      	beq.n	8000fe8 <mqtt_connection_cb+0x58>
      printf("mqtt_subscribe return: %d\n", err);
 8000fca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000fce:	4619      	mov	r1, r3
 8000fd0:	480a      	ldr	r0, [pc, #40]	; (8000ffc <mqtt_connection_cb+0x6c>)
 8000fd2:	f015 fc35 	bl	8016840 <iprintf>
    printf("mqtt_connection_cb: Disconnected, reason: %d\n", status);

    /* Its more nice to be connected, so try to reconnect */
    connect_to_broker(client);
  }
}
 8000fd6:	e007      	b.n	8000fe8 <mqtt_connection_cb+0x58>
    printf("mqtt_connection_cb: Disconnected, reason: %d\n", status);
 8000fd8:	88fb      	ldrh	r3, [r7, #6]
 8000fda:	4619      	mov	r1, r3
 8000fdc:	4808      	ldr	r0, [pc, #32]	; (8001000 <mqtt_connection_cb+0x70>)
 8000fde:	f015 fc2f 	bl	8016840 <iprintf>
    connect_to_broker(client);
 8000fe2:	68f8      	ldr	r0, [r7, #12]
 8000fe4:	f7ff ff94 	bl	8000f10 <connect_to_broker>
}
 8000fe8:	bf00      	nop
 8000fea:	3718      	adds	r7, #24
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	08017e94 	.word	0x08017e94
 8000ff4:	08001005 	.word	0x08001005
 8000ff8:	08017ec0 	.word	0x08017ec0
 8000ffc:	08017ecc 	.word	0x08017ecc
 8001000:	08017ee8 	.word	0x08017ee8

08001004 <mqtt_sub_request_cb>:

static void mqtt_sub_request_cb(void *arg, err_t result)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	460b      	mov	r3, r1
 800100e:	70fb      	strb	r3, [r7, #3]
  /* Just print the result code here for simplicity,
     normal behaviour would be to take some action if subscribe fails like
     notifying user, retry subscribe or disconnect from server */
  printf("Subscribe result: %d\n", result);
 8001010:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001014:	4619      	mov	r1, r3
 8001016:	4803      	ldr	r0, [pc, #12]	; (8001024 <mqtt_sub_request_cb+0x20>)
 8001018:	f015 fc12 	bl	8016840 <iprintf>
}
 800101c:	bf00      	nop
 800101e:	3708      	adds	r7, #8
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	08017f18 	.word	0x08017f18

08001028 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800102c:	b672      	cpsid	i
}
 800102e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001030:	e7fe      	b.n	8001030 <Error_Handler+0x8>
	...

08001034 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800103a:	4b0f      	ldr	r3, [pc, #60]	; (8001078 <HAL_MspInit+0x44>)
 800103c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103e:	4a0e      	ldr	r2, [pc, #56]	; (8001078 <HAL_MspInit+0x44>)
 8001040:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001044:	6413      	str	r3, [r2, #64]	; 0x40
 8001046:	4b0c      	ldr	r3, [pc, #48]	; (8001078 <HAL_MspInit+0x44>)
 8001048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800104e:	607b      	str	r3, [r7, #4]
 8001050:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001052:	4b09      	ldr	r3, [pc, #36]	; (8001078 <HAL_MspInit+0x44>)
 8001054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001056:	4a08      	ldr	r2, [pc, #32]	; (8001078 <HAL_MspInit+0x44>)
 8001058:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800105c:	6453      	str	r3, [r2, #68]	; 0x44
 800105e:	4b06      	ldr	r3, [pc, #24]	; (8001078 <HAL_MspInit+0x44>)
 8001060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001062:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001066:	603b      	str	r3, [r7, #0]
 8001068:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800106a:	bf00      	nop
 800106c:	370c      	adds	r7, #12
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	40023800 	.word	0x40023800

0800107c <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 800107c:	b480      	push	{r7}
 800107e:	b085      	sub	sp, #20
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a0a      	ldr	r2, [pc, #40]	; (80010b4 <HAL_DMA2D_MspInit+0x38>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d10b      	bne.n	80010a6 <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800108e:	4b0a      	ldr	r3, [pc, #40]	; (80010b8 <HAL_DMA2D_MspInit+0x3c>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001092:	4a09      	ldr	r2, [pc, #36]	; (80010b8 <HAL_DMA2D_MspInit+0x3c>)
 8001094:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001098:	6313      	str	r3, [r2, #48]	; 0x30
 800109a:	4b07      	ldr	r3, [pc, #28]	; (80010b8 <HAL_DMA2D_MspInit+0x3c>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80010a2:	60fb      	str	r3, [r7, #12]
 80010a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 80010a6:	bf00      	nop
 80010a8:	3714      	adds	r7, #20
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	4002b000 	.word	0x4002b000
 80010b8:	40023800 	.word	0x40023800

080010bc <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b0ae      	sub	sp, #184	; 0xb8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	605a      	str	r2, [r3, #4]
 80010ce:	609a      	str	r2, [r3, #8]
 80010d0:	60da      	str	r2, [r3, #12]
 80010d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010d4:	f107 0320 	add.w	r3, r7, #32
 80010d8:	2284      	movs	r2, #132	; 0x84
 80010da:	2100      	movs	r1, #0
 80010dc:	4618      	mov	r0, r3
 80010de:	f015 fba7 	bl	8016830 <memset>
  if(hltdc->Instance==LTDC)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4a6a      	ldr	r2, [pc, #424]	; (8001290 <HAL_LTDC_MspInit+0x1d4>)
 80010e8:	4293      	cmp	r3, r2
 80010ea:	f040 80cd 	bne.w	8001288 <HAL_LTDC_MspInit+0x1cc>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80010ee:	2308      	movs	r3, #8
 80010f0:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80010f2:	23c0      	movs	r3, #192	; 0xc0
 80010f4:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 80010f6:	2305      	movs	r3, #5
 80010f8:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80010fa:	2302      	movs	r3, #2
 80010fc:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 80010fe:	2300      	movs	r3, #0
 8001100:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8001102:	2301      	movs	r3, #1
 8001104:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8001106:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800110a:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800110c:	f107 0320 	add.w	r3, r7, #32
 8001110:	4618      	mov	r0, r3
 8001112:	f007 f9c7 	bl	80084a4 <HAL_RCCEx_PeriphCLKConfig>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <HAL_LTDC_MspInit+0x64>
    {
      Error_Handler();
 800111c:	f7ff ff84 	bl	8001028 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001120:	4b5c      	ldr	r3, [pc, #368]	; (8001294 <HAL_LTDC_MspInit+0x1d8>)
 8001122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001124:	4a5b      	ldr	r2, [pc, #364]	; (8001294 <HAL_LTDC_MspInit+0x1d8>)
 8001126:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800112a:	6453      	str	r3, [r2, #68]	; 0x44
 800112c:	4b59      	ldr	r3, [pc, #356]	; (8001294 <HAL_LTDC_MspInit+0x1d8>)
 800112e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001130:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001134:	61fb      	str	r3, [r7, #28]
 8001136:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001138:	4b56      	ldr	r3, [pc, #344]	; (8001294 <HAL_LTDC_MspInit+0x1d8>)
 800113a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113c:	4a55      	ldr	r2, [pc, #340]	; (8001294 <HAL_LTDC_MspInit+0x1d8>)
 800113e:	f043 0310 	orr.w	r3, r3, #16
 8001142:	6313      	str	r3, [r2, #48]	; 0x30
 8001144:	4b53      	ldr	r3, [pc, #332]	; (8001294 <HAL_LTDC_MspInit+0x1d8>)
 8001146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001148:	f003 0310 	and.w	r3, r3, #16
 800114c:	61bb      	str	r3, [r7, #24]
 800114e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001150:	4b50      	ldr	r3, [pc, #320]	; (8001294 <HAL_LTDC_MspInit+0x1d8>)
 8001152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001154:	4a4f      	ldr	r2, [pc, #316]	; (8001294 <HAL_LTDC_MspInit+0x1d8>)
 8001156:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800115a:	6313      	str	r3, [r2, #48]	; 0x30
 800115c:	4b4d      	ldr	r3, [pc, #308]	; (8001294 <HAL_LTDC_MspInit+0x1d8>)
 800115e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001160:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001164:	617b      	str	r3, [r7, #20]
 8001166:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8001168:	4b4a      	ldr	r3, [pc, #296]	; (8001294 <HAL_LTDC_MspInit+0x1d8>)
 800116a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116c:	4a49      	ldr	r2, [pc, #292]	; (8001294 <HAL_LTDC_MspInit+0x1d8>)
 800116e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001172:	6313      	str	r3, [r2, #48]	; 0x30
 8001174:	4b47      	ldr	r3, [pc, #284]	; (8001294 <HAL_LTDC_MspInit+0x1d8>)
 8001176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001178:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800117c:	613b      	str	r3, [r7, #16]
 800117e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001180:	4b44      	ldr	r3, [pc, #272]	; (8001294 <HAL_LTDC_MspInit+0x1d8>)
 8001182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001184:	4a43      	ldr	r2, [pc, #268]	; (8001294 <HAL_LTDC_MspInit+0x1d8>)
 8001186:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800118a:	6313      	str	r3, [r2, #48]	; 0x30
 800118c:	4b41      	ldr	r3, [pc, #260]	; (8001294 <HAL_LTDC_MspInit+0x1d8>)
 800118e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001190:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001194:	60fb      	str	r3, [r7, #12]
 8001196:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001198:	4b3e      	ldr	r3, [pc, #248]	; (8001294 <HAL_LTDC_MspInit+0x1d8>)
 800119a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119c:	4a3d      	ldr	r2, [pc, #244]	; (8001294 <HAL_LTDC_MspInit+0x1d8>)
 800119e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011a2:	6313      	str	r3, [r2, #48]	; 0x30
 80011a4:	4b3b      	ldr	r3, [pc, #236]	; (8001294 <HAL_LTDC_MspInit+0x1d8>)
 80011a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011ac:	60bb      	str	r3, [r7, #8]
 80011ae:	68bb      	ldr	r3, [r7, #8]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80011b0:	2310      	movs	r3, #16
 80011b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b6:	2302      	movs	r3, #2
 80011b8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011bc:	2300      	movs	r3, #0
 80011be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c2:	2300      	movs	r3, #0
 80011c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80011c8:	230e      	movs	r3, #14
 80011ca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011ce:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80011d2:	4619      	mov	r1, r3
 80011d4:	4830      	ldr	r0, [pc, #192]	; (8001298 <HAL_LTDC_MspInit+0x1dc>)
 80011d6:	f004 fbf5 	bl	80059c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_11
 80011da:	f64e 73ff 	movw	r3, #61439	; 0xefff
 80011de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_7|GPIO_PIN_9
                          |GPIO_PIN_6|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_3
                          |GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e2:	2302      	movs	r3, #2
 80011e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e8:	2300      	movs	r3, #0
 80011ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ee:	2300      	movs	r3, #0
 80011f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80011f4:	230e      	movs	r3, #14
 80011f6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80011fa:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80011fe:	4619      	mov	r1, r3
 8001200:	4826      	ldr	r0, [pc, #152]	; (800129c <HAL_LTDC_MspInit+0x1e0>)
 8001202:	f004 fbdf 	bl	80059c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4
 8001206:	23f7      	movs	r3, #247	; 0xf7
 8001208:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120c:	2302      	movs	r3, #2
 800120e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001212:	2300      	movs	r3, #0
 8001214:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001218:	2300      	movs	r3, #0
 800121a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800121e:	230e      	movs	r3, #14
 8001220:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001224:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001228:	4619      	mov	r1, r3
 800122a:	481d      	ldr	r0, [pc, #116]	; (80012a0 <HAL_LTDC_MspInit+0x1e4>)
 800122c:	f004 fbca 	bl	80059c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001230:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001234:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001238:	2302      	movs	r3, #2
 800123a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123e:	2300      	movs	r3, #0
 8001240:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001244:	2300      	movs	r3, #0
 8001246:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800124a:	2309      	movs	r3, #9
 800124c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001250:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001254:	4619      	mov	r1, r3
 8001256:	4813      	ldr	r0, [pc, #76]	; (80012a4 <HAL_LTDC_MspInit+0x1e8>)
 8001258:	f004 fbb4 	bl	80059c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_15|GPIO_PIN_14;
 800125c:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8001260:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001264:	2302      	movs	r3, #2
 8001266:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126a:	2300      	movs	r3, #0
 800126c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001270:	2300      	movs	r3, #0
 8001272:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001276:	230e      	movs	r3, #14
 8001278:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800127c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001280:	4619      	mov	r1, r3
 8001282:	4809      	ldr	r0, [pc, #36]	; (80012a8 <HAL_LTDC_MspInit+0x1ec>)
 8001284:	f004 fb9e 	bl	80059c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001288:	bf00      	nop
 800128a:	37b8      	adds	r7, #184	; 0xb8
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	40016800 	.word	0x40016800
 8001294:	40023800 	.word	0x40023800
 8001298:	40021000 	.word	0x40021000
 800129c:	40022400 	.word	0x40022400
 80012a0:	40022800 	.word	0x40022800
 80012a4:	40021800 	.word	0x40021800
 80012a8:	40022000 	.word	0x40022000

080012ac <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b08c      	sub	sp, #48	; 0x30
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b4:	f107 031c 	add.w	r3, r7, #28
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
 80012bc:	605a      	str	r2, [r3, #4]
 80012be:	609a      	str	r2, [r3, #8]
 80012c0:	60da      	str	r2, [r3, #12]
 80012c2:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a3b      	ldr	r2, [pc, #236]	; (80013b8 <HAL_QSPI_MspInit+0x10c>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d170      	bne.n	80013b0 <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80012ce:	4b3b      	ldr	r3, [pc, #236]	; (80013bc <HAL_QSPI_MspInit+0x110>)
 80012d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012d2:	4a3a      	ldr	r2, [pc, #232]	; (80013bc <HAL_QSPI_MspInit+0x110>)
 80012d4:	f043 0302 	orr.w	r3, r3, #2
 80012d8:	6393      	str	r3, [r2, #56]	; 0x38
 80012da:	4b38      	ldr	r3, [pc, #224]	; (80013bc <HAL_QSPI_MspInit+0x110>)
 80012dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012de:	f003 0302 	and.w	r3, r3, #2
 80012e2:	61bb      	str	r3, [r7, #24]
 80012e4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80012e6:	4b35      	ldr	r3, [pc, #212]	; (80013bc <HAL_QSPI_MspInit+0x110>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ea:	4a34      	ldr	r2, [pc, #208]	; (80013bc <HAL_QSPI_MspInit+0x110>)
 80012ec:	f043 0310 	orr.w	r3, r3, #16
 80012f0:	6313      	str	r3, [r2, #48]	; 0x30
 80012f2:	4b32      	ldr	r3, [pc, #200]	; (80013bc <HAL_QSPI_MspInit+0x110>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	f003 0310 	and.w	r3, r3, #16
 80012fa:	617b      	str	r3, [r7, #20]
 80012fc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012fe:	4b2f      	ldr	r3, [pc, #188]	; (80013bc <HAL_QSPI_MspInit+0x110>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	4a2e      	ldr	r2, [pc, #184]	; (80013bc <HAL_QSPI_MspInit+0x110>)
 8001304:	f043 0302 	orr.w	r3, r3, #2
 8001308:	6313      	str	r3, [r2, #48]	; 0x30
 800130a:	4b2c      	ldr	r3, [pc, #176]	; (80013bc <HAL_QSPI_MspInit+0x110>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130e:	f003 0302 	and.w	r3, r3, #2
 8001312:	613b      	str	r3, [r7, #16]
 8001314:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001316:	4b29      	ldr	r3, [pc, #164]	; (80013bc <HAL_QSPI_MspInit+0x110>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131a:	4a28      	ldr	r2, [pc, #160]	; (80013bc <HAL_QSPI_MspInit+0x110>)
 800131c:	f043 0308 	orr.w	r3, r3, #8
 8001320:	6313      	str	r3, [r2, #48]	; 0x30
 8001322:	4b26      	ldr	r3, [pc, #152]	; (80013bc <HAL_QSPI_MspInit+0x110>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001326:	f003 0308 	and.w	r3, r3, #8
 800132a:	60fb      	str	r3, [r7, #12]
 800132c:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800132e:	2304      	movs	r3, #4
 8001330:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001332:	2302      	movs	r3, #2
 8001334:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001336:	2300      	movs	r3, #0
 8001338:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800133a:	2303      	movs	r3, #3
 800133c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800133e:	2309      	movs	r3, #9
 8001340:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001342:	f107 031c 	add.w	r3, r7, #28
 8001346:	4619      	mov	r1, r3
 8001348:	481d      	ldr	r0, [pc, #116]	; (80013c0 <HAL_QSPI_MspInit+0x114>)
 800134a:	f004 fb3b 	bl	80059c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800134e:	2340      	movs	r3, #64	; 0x40
 8001350:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001352:	2302      	movs	r3, #2
 8001354:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001356:	2300      	movs	r3, #0
 8001358:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800135a:	2303      	movs	r3, #3
 800135c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800135e:	230a      	movs	r3, #10
 8001360:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001362:	f107 031c 	add.w	r3, r7, #28
 8001366:	4619      	mov	r1, r3
 8001368:	4816      	ldr	r0, [pc, #88]	; (80013c4 <HAL_QSPI_MspInit+0x118>)
 800136a:	f004 fb2b 	bl	80059c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800136e:	2304      	movs	r3, #4
 8001370:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001372:	2302      	movs	r3, #2
 8001374:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001376:	2300      	movs	r3, #0
 8001378:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800137a:	2303      	movs	r3, #3
 800137c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800137e:	2309      	movs	r3, #9
 8001380:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001382:	f107 031c 	add.w	r3, r7, #28
 8001386:	4619      	mov	r1, r3
 8001388:	480e      	ldr	r0, [pc, #56]	; (80013c4 <HAL_QSPI_MspInit+0x118>)
 800138a:	f004 fb1b 	bl	80059c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_11;
 800138e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001392:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001394:	2302      	movs	r3, #2
 8001396:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001398:	2300      	movs	r3, #0
 800139a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800139c:	2303      	movs	r3, #3
 800139e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80013a0:	2309      	movs	r3, #9
 80013a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013a4:	f107 031c 	add.w	r3, r7, #28
 80013a8:	4619      	mov	r1, r3
 80013aa:	4807      	ldr	r0, [pc, #28]	; (80013c8 <HAL_QSPI_MspInit+0x11c>)
 80013ac:	f004 fb0a 	bl	80059c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80013b0:	bf00      	nop
 80013b2:	3730      	adds	r7, #48	; 0x30
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	a0001000 	.word	0xa0001000
 80013bc:	40023800 	.word	0x40023800
 80013c0:	40021000 	.word	0x40021000
 80013c4:	40020400 	.word	0x40020400
 80013c8:	40020c00 	.word	0x40020c00

080013cc <HAL_QSPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* hqspi)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  if(hqspi->Instance==QUADSPI)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a0c      	ldr	r2, [pc, #48]	; (800140c <HAL_QSPI_MspDeInit+0x40>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d112      	bne.n	8001404 <HAL_QSPI_MspDeInit+0x38>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
 80013de:	4b0c      	ldr	r3, [pc, #48]	; (8001410 <HAL_QSPI_MspDeInit+0x44>)
 80013e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013e2:	4a0b      	ldr	r2, [pc, #44]	; (8001410 <HAL_QSPI_MspDeInit+0x44>)
 80013e4:	f023 0302 	bic.w	r3, r3, #2
 80013e8:	6393      	str	r3, [r2, #56]	; 0x38
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_2);
 80013ea:	2104      	movs	r1, #4
 80013ec:	4809      	ldr	r0, [pc, #36]	; (8001414 <HAL_QSPI_MspDeInit+0x48>)
 80013ee:	f004 fc95 	bl	8005d1c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6|GPIO_PIN_2);
 80013f2:	2144      	movs	r1, #68	; 0x44
 80013f4:	4808      	ldr	r0, [pc, #32]	; (8001418 <HAL_QSPI_MspDeInit+0x4c>)
 80013f6:	f004 fc91 	bl	8005d1c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_11);
 80013fa:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 80013fe:	4807      	ldr	r0, [pc, #28]	; (800141c <HAL_QSPI_MspDeInit+0x50>)
 8001400:	f004 fc8c 	bl	8005d1c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }

}
 8001404:	bf00      	nop
 8001406:	3708      	adds	r7, #8
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	a0001000 	.word	0xa0001000
 8001410:	40023800 	.word	0x40023800
 8001414:	40021000 	.word	0x40021000
 8001418:	40020400 	.word	0x40020400
 800141c:	40020c00 	.word	0x40020c00

08001420 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b0ac      	sub	sp, #176	; 0xb0
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001428:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800142c:	2200      	movs	r2, #0
 800142e:	601a      	str	r2, [r3, #0]
 8001430:	605a      	str	r2, [r3, #4]
 8001432:	609a      	str	r2, [r3, #8]
 8001434:	60da      	str	r2, [r3, #12]
 8001436:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001438:	f107 0318 	add.w	r3, r7, #24
 800143c:	2284      	movs	r2, #132	; 0x84
 800143e:	2100      	movs	r1, #0
 8001440:	4618      	mov	r0, r3
 8001442:	f015 f9f5 	bl	8016830 <memset>
  if(huart->Instance==USART1)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a32      	ldr	r2, [pc, #200]	; (8001514 <HAL_UART_MspInit+0xf4>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d15c      	bne.n	800150a <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001450:	2340      	movs	r3, #64	; 0x40
 8001452:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001454:	2300      	movs	r3, #0
 8001456:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001458:	f107 0318 	add.w	r3, r7, #24
 800145c:	4618      	mov	r0, r3
 800145e:	f007 f821 	bl	80084a4 <HAL_RCCEx_PeriphCLKConfig>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001468:	f7ff fdde 	bl	8001028 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800146c:	4b2a      	ldr	r3, [pc, #168]	; (8001518 <HAL_UART_MspInit+0xf8>)
 800146e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001470:	4a29      	ldr	r2, [pc, #164]	; (8001518 <HAL_UART_MspInit+0xf8>)
 8001472:	f043 0310 	orr.w	r3, r3, #16
 8001476:	6453      	str	r3, [r2, #68]	; 0x44
 8001478:	4b27      	ldr	r3, [pc, #156]	; (8001518 <HAL_UART_MspInit+0xf8>)
 800147a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800147c:	f003 0310 	and.w	r3, r3, #16
 8001480:	617b      	str	r3, [r7, #20]
 8001482:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001484:	4b24      	ldr	r3, [pc, #144]	; (8001518 <HAL_UART_MspInit+0xf8>)
 8001486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001488:	4a23      	ldr	r2, [pc, #140]	; (8001518 <HAL_UART_MspInit+0xf8>)
 800148a:	f043 0302 	orr.w	r3, r3, #2
 800148e:	6313      	str	r3, [r2, #48]	; 0x30
 8001490:	4b21      	ldr	r3, [pc, #132]	; (8001518 <HAL_UART_MspInit+0xf8>)
 8001492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001494:	f003 0302 	and.w	r3, r3, #2
 8001498:	613b      	str	r3, [r7, #16]
 800149a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800149c:	4b1e      	ldr	r3, [pc, #120]	; (8001518 <HAL_UART_MspInit+0xf8>)
 800149e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a0:	4a1d      	ldr	r2, [pc, #116]	; (8001518 <HAL_UART_MspInit+0xf8>)
 80014a2:	f043 0301 	orr.w	r3, r3, #1
 80014a6:	6313      	str	r3, [r2, #48]	; 0x30
 80014a8:	4b1b      	ldr	r3, [pc, #108]	; (8001518 <HAL_UART_MspInit+0xf8>)
 80014aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ac:	f003 0301 	and.w	r3, r3, #1
 80014b0:	60fb      	str	r3, [r7, #12]
 80014b2:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80014b4:	2380      	movs	r3, #128	; 0x80
 80014b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ba:	2302      	movs	r3, #2
 80014bc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c0:	2300      	movs	r3, #0
 80014c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c6:	2303      	movs	r3, #3
 80014c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80014cc:	2307      	movs	r3, #7
 80014ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014d2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80014d6:	4619      	mov	r1, r3
 80014d8:	4810      	ldr	r0, [pc, #64]	; (800151c <HAL_UART_MspInit+0xfc>)
 80014da:	f004 fa73 	bl	80059c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80014de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e6:	2302      	movs	r3, #2
 80014e8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ec:	2300      	movs	r3, #0
 80014ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f2:	2303      	movs	r3, #3
 80014f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80014f8:	2307      	movs	r3, #7
 80014fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014fe:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001502:	4619      	mov	r1, r3
 8001504:	4806      	ldr	r0, [pc, #24]	; (8001520 <HAL_UART_MspInit+0x100>)
 8001506:	f004 fa5d 	bl	80059c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800150a:	bf00      	nop
 800150c:	37b0      	adds	r7, #176	; 0xb0
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	40011000 	.word	0x40011000
 8001518:	40023800 	.word	0x40023800
 800151c:	40020400 	.word	0x40020400
 8001520:	40020000 	.word	0x40020000

08001524 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001524:	b580      	push	{r7, lr}
 8001526:	b086      	sub	sp, #24
 8001528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800152a:	1d3b      	adds	r3, r7, #4
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	605a      	str	r2, [r3, #4]
 8001532:	609a      	str	r2, [r3, #8]
 8001534:	60da      	str	r2, [r3, #12]
 8001536:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001538:	4b33      	ldr	r3, [pc, #204]	; (8001608 <HAL_FMC_MspInit+0xe4>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d15e      	bne.n	80015fe <HAL_FMC_MspInit+0xda>
    return;
  }
  FMC_Initialized = 1;
 8001540:	4b31      	ldr	r3, [pc, #196]	; (8001608 <HAL_FMC_MspInit+0xe4>)
 8001542:	2201      	movs	r2, #1
 8001544:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001546:	4b31      	ldr	r3, [pc, #196]	; (800160c <HAL_FMC_MspInit+0xe8>)
 8001548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800154a:	4a30      	ldr	r2, [pc, #192]	; (800160c <HAL_FMC_MspInit+0xe8>)
 800154c:	f043 0301 	orr.w	r3, r3, #1
 8001550:	6393      	str	r3, [r2, #56]	; 0x38
 8001552:	4b2e      	ldr	r3, [pc, #184]	; (800160c <HAL_FMC_MspInit+0xe8>)
 8001554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001556:	f003 0301 	and.w	r3, r3, #1
 800155a:	603b      	str	r3, [r7, #0]
 800155c:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9
 800155e:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001562:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_7|GPIO_PIN_10
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001564:	2302      	movs	r3, #2
 8001566:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001568:	2300      	movs	r3, #0
 800156a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800156c:	2303      	movs	r3, #3
 800156e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001570:	230c      	movs	r3, #12
 8001572:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001574:	1d3b      	adds	r3, r7, #4
 8001576:	4619      	mov	r1, r3
 8001578:	4825      	ldr	r0, [pc, #148]	; (8001610 <HAL_FMC_MspInit+0xec>)
 800157a:	f004 fa23 	bl	80059c4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0
 800157e:	f248 1333 	movw	r3, #33075	; 0x8133
 8001582:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001584:	2302      	movs	r3, #2
 8001586:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001588:	2300      	movs	r3, #0
 800158a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800158c:	2303      	movs	r3, #3
 800158e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001590:	230c      	movs	r3, #12
 8001592:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001594:	1d3b      	adds	r3, r7, #4
 8001596:	4619      	mov	r1, r3
 8001598:	481e      	ldr	r0, [pc, #120]	; (8001614 <HAL_FMC_MspInit+0xf0>)
 800159a:	f004 fa13 	bl	80059c4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10
 800159e:	f24c 7303 	movw	r3, #50947	; 0xc703
 80015a2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a4:	2302      	movs	r3, #2
 80015a6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a8:	2300      	movs	r3, #0
 80015aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ac:	2303      	movs	r3, #3
 80015ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80015b0:	230c      	movs	r3, #12
 80015b2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015b4:	1d3b      	adds	r3, r7, #4
 80015b6:	4619      	mov	r1, r3
 80015b8:	4817      	ldr	r0, [pc, #92]	; (8001618 <HAL_FMC_MspInit+0xf4>)
 80015ba:	f004 fa03 	bl	80059c4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80015be:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80015c2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_15
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c4:	2302      	movs	r3, #2
 80015c6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c8:	2300      	movs	r3, #0
 80015ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015cc:	2303      	movs	r3, #3
 80015ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80015d0:	230c      	movs	r3, #12
 80015d2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80015d4:	1d3b      	adds	r3, r7, #4
 80015d6:	4619      	mov	r1, r3
 80015d8:	4810      	ldr	r0, [pc, #64]	; (800161c <HAL_FMC_MspInit+0xf8>)
 80015da:	f004 f9f3 	bl	80059c4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_2;
 80015de:	232c      	movs	r3, #44	; 0x2c
 80015e0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e2:	2302      	movs	r3, #2
 80015e4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e6:	2300      	movs	r3, #0
 80015e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ea:	2303      	movs	r3, #3
 80015ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80015ee:	230c      	movs	r3, #12
 80015f0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80015f2:	1d3b      	adds	r3, r7, #4
 80015f4:	4619      	mov	r1, r3
 80015f6:	480a      	ldr	r0, [pc, #40]	; (8001620 <HAL_FMC_MspInit+0xfc>)
 80015f8:	f004 f9e4 	bl	80059c4 <HAL_GPIO_Init>
 80015fc:	e000      	b.n	8001600 <HAL_FMC_MspInit+0xdc>
    return;
 80015fe:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001600:	3718      	adds	r7, #24
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	20000824 	.word	0x20000824
 800160c:	40023800 	.word	0x40023800
 8001610:	40021000 	.word	0x40021000
 8001614:	40021800 	.word	0x40021800
 8001618:	40020c00 	.word	0x40020c00
 800161c:	40021400 	.word	0x40021400
 8001620:	40021c00 	.word	0x40021c00

08001624 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800162c:	f7ff ff7a 	bl	8001524 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001630:	bf00      	nop
 8001632:	3708      	adds	r7, #8
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}

08001638 <SVC_Handler>:
/******************************************************************************/
/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800163c:	bf00      	nop
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr

08001646 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001646:	b480      	push	{r7}
 8001648:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800164a:	bf00      	nop
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr

08001654 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001658:	f002 fab2 	bl	8003bc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800165c:	bf00      	nop
 800165e:	bd80      	pop	{r7, pc}

08001660 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
	return 1;
 8001664:	2301      	movs	r3, #1
}
 8001666:	4618      	mov	r0, r3
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr

08001670 <_kill>:

int _kill(int pid, int sig)
{
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
 8001678:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800167a:	4b05      	ldr	r3, [pc, #20]	; (8001690 <_kill+0x20>)
 800167c:	2216      	movs	r2, #22
 800167e:	601a      	str	r2, [r3, #0]
	return -1;
 8001680:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001684:	4618      	mov	r0, r3
 8001686:	370c      	adds	r7, #12
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr
 8001690:	20008d04 	.word	0x20008d04

08001694 <_exit>:

void _exit (int status)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800169c:	f04f 31ff 	mov.w	r1, #4294967295
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f7ff ffe5 	bl	8001670 <_kill>
	while (1) {}		/* Make sure we hang here */
 80016a6:	e7fe      	b.n	80016a6 <_exit+0x12>

080016a8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b086      	sub	sp, #24
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	60f8      	str	r0, [r7, #12]
 80016b0:	60b9      	str	r1, [r7, #8]
 80016b2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016b4:	2300      	movs	r3, #0
 80016b6:	617b      	str	r3, [r7, #20]
 80016b8:	e00a      	b.n	80016d0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80016ba:	f3af 8000 	nop.w
 80016be:	4601      	mov	r1, r0
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	1c5a      	adds	r2, r3, #1
 80016c4:	60ba      	str	r2, [r7, #8]
 80016c6:	b2ca      	uxtb	r2, r1
 80016c8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	3301      	adds	r3, #1
 80016ce:	617b      	str	r3, [r7, #20]
 80016d0:	697a      	ldr	r2, [r7, #20]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	429a      	cmp	r2, r3
 80016d6:	dbf0      	blt.n	80016ba <_read+0x12>
	}

return len;
 80016d8:	687b      	ldr	r3, [r7, #4]
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3718      	adds	r7, #24
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}

080016e2 <_close>:
	}
	return len;
}

int _close(int file)
{
 80016e2:	b480      	push	{r7}
 80016e4:	b083      	sub	sp, #12
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	6078      	str	r0, [r7, #4]
	return -1;
 80016ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	370c      	adds	r7, #12
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr

080016fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016fa:	b480      	push	{r7}
 80016fc:	b083      	sub	sp, #12
 80016fe:	af00      	add	r7, sp, #0
 8001700:	6078      	str	r0, [r7, #4]
 8001702:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800170a:	605a      	str	r2, [r3, #4]
	return 0;
 800170c:	2300      	movs	r3, #0
}
 800170e:	4618      	mov	r0, r3
 8001710:	370c      	adds	r7, #12
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr

0800171a <_isatty>:

int _isatty(int file)
{
 800171a:	b480      	push	{r7}
 800171c:	b083      	sub	sp, #12
 800171e:	af00      	add	r7, sp, #0
 8001720:	6078      	str	r0, [r7, #4]
	return 1;
 8001722:	2301      	movs	r3, #1
}
 8001724:	4618      	mov	r0, r3
 8001726:	370c      	adds	r7, #12
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr

08001730 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001730:	b480      	push	{r7}
 8001732:	b085      	sub	sp, #20
 8001734:	af00      	add	r7, sp, #0
 8001736:	60f8      	str	r0, [r7, #12]
 8001738:	60b9      	str	r1, [r7, #8]
 800173a:	607a      	str	r2, [r7, #4]
	return 0;
 800173c:	2300      	movs	r3, #0
}
 800173e:	4618      	mov	r0, r3
 8001740:	3714      	adds	r7, #20
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
	...

0800174c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800174c:	b480      	push	{r7}
 800174e:	b087      	sub	sp, #28
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001754:	4a14      	ldr	r2, [pc, #80]	; (80017a8 <_sbrk+0x5c>)
 8001756:	4b15      	ldr	r3, [pc, #84]	; (80017ac <_sbrk+0x60>)
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001760:	4b13      	ldr	r3, [pc, #76]	; (80017b0 <_sbrk+0x64>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d102      	bne.n	800176e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001768:	4b11      	ldr	r3, [pc, #68]	; (80017b0 <_sbrk+0x64>)
 800176a:	4a12      	ldr	r2, [pc, #72]	; (80017b4 <_sbrk+0x68>)
 800176c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800176e:	4b10      	ldr	r3, [pc, #64]	; (80017b0 <_sbrk+0x64>)
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	4413      	add	r3, r2
 8001776:	693a      	ldr	r2, [r7, #16]
 8001778:	429a      	cmp	r2, r3
 800177a:	d205      	bcs.n	8001788 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 800177c:	4b0e      	ldr	r3, [pc, #56]	; (80017b8 <_sbrk+0x6c>)
 800177e:	220c      	movs	r2, #12
 8001780:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001782:	f04f 33ff 	mov.w	r3, #4294967295
 8001786:	e009      	b.n	800179c <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001788:	4b09      	ldr	r3, [pc, #36]	; (80017b0 <_sbrk+0x64>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800178e:	4b08      	ldr	r3, [pc, #32]	; (80017b0 <_sbrk+0x64>)
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4413      	add	r3, r2
 8001796:	4a06      	ldr	r2, [pc, #24]	; (80017b0 <_sbrk+0x64>)
 8001798:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800179a:	68fb      	ldr	r3, [r7, #12]
}
 800179c:	4618      	mov	r0, r3
 800179e:	371c      	adds	r7, #28
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr
 80017a8:	20050000 	.word	0x20050000
 80017ac:	00000400 	.word	0x00000400
 80017b0:	20000828 	.word	0x20000828
 80017b4:	20008d18 	.word	0x20008d18
 80017b8:	20008d04 	.word	0x20008d04

080017bc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017c0:	4b06      	ldr	r3, [pc, #24]	; (80017dc <SystemInit+0x20>)
 80017c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017c6:	4a05      	ldr	r2, [pc, #20]	; (80017dc <SystemInit+0x20>)
 80017c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017d0:	bf00      	nop
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	e000ed00 	.word	0xe000ed00

080017e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80017e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001818 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017e4:	480d      	ldr	r0, [pc, #52]	; (800181c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80017e6:	490e      	ldr	r1, [pc, #56]	; (8001820 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80017e8:	4a0e      	ldr	r2, [pc, #56]	; (8001824 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017ec:	e002      	b.n	80017f4 <LoopCopyDataInit>

080017ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017f2:	3304      	adds	r3, #4

080017f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017f8:	d3f9      	bcc.n	80017ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017fa:	4a0b      	ldr	r2, [pc, #44]	; (8001828 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80017fc:	4c0b      	ldr	r4, [pc, #44]	; (800182c <LoopFillZerobss+0x26>)
  movs r3, #0
 80017fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001800:	e001      	b.n	8001806 <LoopFillZerobss>

08001802 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001802:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001804:	3204      	adds	r2, #4

08001806 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001806:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001808:	d3fb      	bcc.n	8001802 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800180a:	f7ff ffd7 	bl	80017bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800180e:	f014 ffb3 	bl	8016778 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001812:	f7ff f81f 	bl	8000854 <main>
  bx  lr    
 8001816:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001818:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800181c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001820:	200000d0 	.word	0x200000d0
  ldr r2, =_sidata
 8001824:	0801d254 	.word	0x0801d254
  ldr r2, =_sbss
 8001828:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 800182c:	20008d14 	.word	0x20008d14

08001830 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001830:	e7fe      	b.n	8001830 <ADC_IRQHandler>

08001832 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8001832:	b480      	push	{r7}
 8001834:	b083      	sub	sp, #12
 8001836:	af00      	add	r7, sp, #0
 8001838:	6078      	str	r0, [r7, #4]
 800183a:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d00b      	beq.n	800185a <LAN8742_RegisterBusIO+0x28>
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	68db      	ldr	r3, [r3, #12]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d007      	beq.n	800185a <LAN8742_RegisterBusIO+0x28>
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d003      	beq.n	800185a <LAN8742_RegisterBusIO+0x28>
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	691b      	ldr	r3, [r3, #16]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d102      	bne.n	8001860 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 800185a:	f04f 33ff 	mov.w	r3, #4294967295
 800185e:	e014      	b.n	800188a <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	685a      	ldr	r2, [r3, #4]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	68da      	ldr	r2, [r3, #12]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	689a      	ldr	r2, [r3, #8]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	691a      	ldr	r2, [r3, #16]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8001888:	2300      	movs	r3, #0
}
 800188a:	4618      	mov	r0, r3
 800188c:	370c      	adds	r7, #12
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr

08001896 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8001896:	b580      	push	{r7, lr}
 8001898:	b086      	sub	sp, #24
 800189a:	af00      	add	r7, sp, #0
 800189c:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 800189e:	2300      	movs	r3, #0
 80018a0:	60fb      	str	r3, [r7, #12]
 80018a2:	2300      	movs	r3, #0
 80018a4:	60bb      	str	r3, [r7, #8]
 80018a6:	2300      	movs	r3, #0
 80018a8:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 80018aa:	2300      	movs	r3, #0
 80018ac:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d17c      	bne.n	80019b0 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d002      	beq.n	80018c4 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2220      	movs	r2, #32
 80018c8:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80018ca:	2300      	movs	r3, #0
 80018cc:	617b      	str	r3, [r7, #20]
 80018ce:	e01c      	b.n	800190a <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	695b      	ldr	r3, [r3, #20]
 80018d4:	f107 0208 	add.w	r2, r7, #8
 80018d8:	2112      	movs	r1, #18
 80018da:	6978      	ldr	r0, [r7, #20]
 80018dc:	4798      	blx	r3
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	da03      	bge.n	80018ec <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 80018e4:	f06f 0304 	mvn.w	r3, #4
 80018e8:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 80018ea:	e00b      	b.n	8001904 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	f003 031f 	and.w	r3, r3, #31
 80018f2:	697a      	ldr	r2, [r7, #20]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d105      	bne.n	8001904 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	697a      	ldr	r2, [r7, #20]
 80018fc:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 80018fe:	2300      	movs	r3, #0
 8001900:	613b      	str	r3, [r7, #16]
         break;
 8001902:	e005      	b.n	8001910 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	3301      	adds	r3, #1
 8001908:	617b      	str	r3, [r7, #20]
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	2b1f      	cmp	r3, #31
 800190e:	d9df      	bls.n	80018d0 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	2b1f      	cmp	r3, #31
 8001916:	d902      	bls.n	800191e <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001918:	f06f 0302 	mvn.w	r3, #2
 800191c:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d145      	bne.n	80019b0 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	691b      	ldr	r3, [r3, #16]
 8001928:	687a      	ldr	r2, [r7, #4]
 800192a:	6810      	ldr	r0, [r2, #0]
 800192c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001930:	2100      	movs	r1, #0
 8001932:	4798      	blx	r3
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	db37      	blt.n	80019aa <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	695b      	ldr	r3, [r3, #20]
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	6810      	ldr	r0, [r2, #0]
 8001942:	f107 0208 	add.w	r2, r7, #8
 8001946:	2100      	movs	r1, #0
 8001948:	4798      	blx	r3
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	db28      	blt.n	80019a2 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	699b      	ldr	r3, [r3, #24]
 8001954:	4798      	blx	r3
 8001956:	4603      	mov	r3, r0
 8001958:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800195a:	e01c      	b.n	8001996 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	699b      	ldr	r3, [r3, #24]
 8001960:	4798      	blx	r3
 8001962:	4603      	mov	r3, r0
 8001964:	461a      	mov	r2, r3
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800196e:	d80e      	bhi.n	800198e <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	695b      	ldr	r3, [r3, #20]
 8001974:	687a      	ldr	r2, [r7, #4]
 8001976:	6810      	ldr	r0, [r2, #0]
 8001978:	f107 0208 	add.w	r2, r7, #8
 800197c:	2100      	movs	r1, #0
 800197e:	4798      	blx	r3
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	da07      	bge.n	8001996 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8001986:	f06f 0304 	mvn.w	r3, #4
 800198a:	613b      	str	r3, [r7, #16]
                 break;
 800198c:	e010      	b.n	80019b0 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 800198e:	f06f 0301 	mvn.w	r3, #1
 8001992:	613b      	str	r3, [r7, #16]
               break;
 8001994:	e00c      	b.n	80019b0 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800199c:	2b00      	cmp	r3, #0
 800199e:	d1dd      	bne.n	800195c <LAN8742_Init+0xc6>
 80019a0:	e006      	b.n	80019b0 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 80019a2:	f06f 0304 	mvn.w	r3, #4
 80019a6:	613b      	str	r3, [r7, #16]
 80019a8:	e002      	b.n	80019b0 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 80019aa:	f06f 0303 	mvn.w	r3, #3
 80019ae:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d112      	bne.n	80019dc <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	699b      	ldr	r3, [r3, #24]
 80019ba:	4798      	blx	r3
 80019bc:	4603      	mov	r3, r0
 80019be:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 80019c0:	bf00      	nop
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	699b      	ldr	r3, [r3, #24]
 80019c6:	4798      	blx	r3
 80019c8:	4603      	mov	r3, r0
 80019ca:	461a      	mov	r2, r3
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	1ad3      	subs	r3, r2, r3
 80019d0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80019d4:	d9f5      	bls.n	80019c2 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2201      	movs	r2, #1
 80019da:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 80019dc:	693b      	ldr	r3, [r7, #16]
 }
 80019de:	4618      	mov	r0, r3
 80019e0:	3718      	adds	r7, #24
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}

080019e6 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 80019e6:	b580      	push	{r7, lr}
 80019e8:	b084      	sub	sp, #16
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80019ee:	2300      	movs	r3, #0
 80019f0:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	695b      	ldr	r3, [r3, #20]
 80019f6:	687a      	ldr	r2, [r7, #4]
 80019f8:	6810      	ldr	r0, [r2, #0]
 80019fa:	f107 020c 	add.w	r2, r7, #12
 80019fe:	2101      	movs	r1, #1
 8001a00:	4798      	blx	r3
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	da02      	bge.n	8001a0e <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001a08:	f06f 0304 	mvn.w	r3, #4
 8001a0c:	e06e      	b.n	8001aec <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	695b      	ldr	r3, [r3, #20]
 8001a12:	687a      	ldr	r2, [r7, #4]
 8001a14:	6810      	ldr	r0, [r2, #0]
 8001a16:	f107 020c 	add.w	r2, r7, #12
 8001a1a:	2101      	movs	r1, #1
 8001a1c:	4798      	blx	r3
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	da02      	bge.n	8001a2a <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001a24:	f06f 0304 	mvn.w	r3, #4
 8001a28:	e060      	b.n	8001aec <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	f003 0304 	and.w	r3, r3, #4
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d101      	bne.n	8001a38 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8001a34:	2301      	movs	r3, #1
 8001a36:	e059      	b.n	8001aec <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	695b      	ldr	r3, [r3, #20]
 8001a3c:	687a      	ldr	r2, [r7, #4]
 8001a3e:	6810      	ldr	r0, [r2, #0]
 8001a40:	f107 020c 	add.w	r2, r7, #12
 8001a44:	2100      	movs	r1, #0
 8001a46:	4798      	blx	r3
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	da02      	bge.n	8001a54 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001a4e:	f06f 0304 	mvn.w	r3, #4
 8001a52:	e04b      	b.n	8001aec <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d11b      	bne.n	8001a96 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d006      	beq.n	8001a76 <LAN8742_GetLinkState+0x90>
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001a72:	2302      	movs	r3, #2
 8001a74:	e03a      	b.n	8001aec <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d001      	beq.n	8001a84 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001a80:	2303      	movs	r3, #3
 8001a82:	e033      	b.n	8001aec <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001a8e:	2304      	movs	r3, #4
 8001a90:	e02c      	b.n	8001aec <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001a92:	2305      	movs	r3, #5
 8001a94:	e02a      	b.n	8001aec <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	695b      	ldr	r3, [r3, #20]
 8001a9a:	687a      	ldr	r2, [r7, #4]
 8001a9c:	6810      	ldr	r0, [r2, #0]
 8001a9e:	f107 020c 	add.w	r2, r7, #12
 8001aa2:	211f      	movs	r1, #31
 8001aa4:	4798      	blx	r3
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	da02      	bge.n	8001ab2 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001aac:	f06f 0304 	mvn.w	r3, #4
 8001ab0:	e01c      	b.n	8001aec <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d101      	bne.n	8001ac0 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001abc:	2306      	movs	r3, #6
 8001abe:	e015      	b.n	8001aec <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	f003 031c 	and.w	r3, r3, #28
 8001ac6:	2b18      	cmp	r3, #24
 8001ac8:	d101      	bne.n	8001ace <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001aca:	2302      	movs	r3, #2
 8001acc:	e00e      	b.n	8001aec <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	f003 031c 	and.w	r3, r3, #28
 8001ad4:	2b08      	cmp	r3, #8
 8001ad6:	d101      	bne.n	8001adc <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001ad8:	2303      	movs	r3, #3
 8001ada:	e007      	b.n	8001aec <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	f003 031c 	and.w	r3, r3, #28
 8001ae2:	2b14      	cmp	r3, #20
 8001ae4:	d101      	bne.n	8001aea <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001ae6:	2304      	movs	r3, #4
 8001ae8:	e000      	b.n	8001aec <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001aea:	2305      	movs	r3, #5
    }				
  }
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3710      	adds	r7, #16
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}

08001af4 <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	4603      	mov	r3, r0
 8001afc:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 8001afe:	20c8      	movs	r0, #200	; 0xc8
 8001b00:	f000 fc32 	bl	8002368 <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8001b04:	f000 fa7a 	bl	8001ffc <ft5336_I2C_InitializeIfRequired>
}
 8001b08:	bf00      	nop
 8001b0a:	3708      	adds	r7, #8
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}

08001b10 <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	4603      	mov	r3, r0
 8001b18:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 8001b1a:	bf00      	nop
 8001b1c:	370c      	adds	r7, #12
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr

08001b26 <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 8001b26:	b580      	push	{r7, lr}
 8001b28:	b084      	sub	sp, #16
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 8001b30:	2300      	movs	r3, #0
 8001b32:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 8001b34:	2300      	movs	r3, #0
 8001b36:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 8001b38:	2300      	movs	r3, #0
 8001b3a:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8001b3c:	f000 fa5e 	bl	8001ffc <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8001b40:	2300      	movs	r3, #0
 8001b42:	73fb      	strb	r3, [r7, #15]
 8001b44:	e010      	b.n	8001b68 <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8001b46:	88fb      	ldrh	r3, [r7, #6]
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	21a8      	movs	r1, #168	; 0xa8
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f000 fbed 	bl	800232c <TS_IO_Read>
 8001b52:	4603      	mov	r3, r0
 8001b54:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 8001b56:	7b7b      	ldrb	r3, [r7, #13]
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	2b51      	cmp	r3, #81	; 0x51
 8001b5c:	d101      	bne.n	8001b62 <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8001b62:	7bfb      	ldrb	r3, [r7, #15]
 8001b64:	3301      	adds	r3, #1
 8001b66:	73fb      	strb	r3, [r7, #15]
 8001b68:	7bfb      	ldrb	r3, [r7, #15]
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	d802      	bhi.n	8001b74 <ft5336_ReadID+0x4e>
 8001b6e:	7bbb      	ldrb	r3, [r7, #14]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d0e8      	beq.n	8001b46 <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 8001b74:	7b7b      	ldrb	r3, [r7, #13]
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	b29b      	uxth	r3, r3
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3710      	adds	r7, #16
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}

08001b82 <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 8001b82:	b580      	push	{r7, lr}
 8001b84:	b082      	sub	sp, #8
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	4603      	mov	r3, r0
 8001b8a:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 8001b8c:	88fb      	ldrh	r3, [r7, #6]
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f000 fa44 	bl	800201c <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 8001b94:	88fb      	ldrh	r3, [r7, #6]
 8001b96:	4618      	mov	r0, r3
 8001b98:	f000 f932 	bl	8001e00 <ft5336_TS_DisableIT>
}
 8001b9c:	bf00      	nop
 8001b9e:	3708      	adds	r7, #8
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	4603      	mov	r3, r0
 8001bac:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 8001bb2:	88fb      	ldrh	r3, [r7, #6]
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	2102      	movs	r1, #2
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f000 fbb7 	bl	800232c <TS_IO_Read>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 8001bc2:	7bfb      	ldrb	r3, [r7, #15]
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	f003 030f 	and.w	r3, r3, #15
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 8001bce:	7bfb      	ldrb	r3, [r7, #15]
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	2b05      	cmp	r3, #5
 8001bd4:	d901      	bls.n	8001bda <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 8001bda:	7bfb      	ldrb	r3, [r7, #15]
 8001bdc:	b2da      	uxtb	r2, r3
 8001bde:	4b05      	ldr	r3, [pc, #20]	; (8001bf4 <ft5336_TS_DetectTouch+0x50>)
 8001be0:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 8001be2:	4b04      	ldr	r3, [pc, #16]	; (8001bf4 <ft5336_TS_DetectTouch+0x50>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 8001be8:	7bfb      	ldrb	r3, [r7, #15]
 8001bea:	b2db      	uxtb	r3, r3
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3710      	adds	r7, #16
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	2000082c 	.word	0x2000082c

08001bf8 <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b086      	sub	sp, #24
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	4603      	mov	r3, r0
 8001c00:	60b9      	str	r1, [r7, #8]
 8001c02:	607a      	str	r2, [r7, #4]
 8001c04:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8001c06:	2300      	movs	r3, #0
 8001c08:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 8001c12:	2300      	movs	r3, #0
 8001c14:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 8001c16:	2300      	movs	r3, #0
 8001c18:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8001c1a:	4b6d      	ldr	r3, [pc, #436]	; (8001dd0 <ft5336_TS_GetXY+0x1d8>)
 8001c1c:	789a      	ldrb	r2, [r3, #2]
 8001c1e:	4b6c      	ldr	r3, [pc, #432]	; (8001dd0 <ft5336_TS_GetXY+0x1d8>)
 8001c20:	785b      	ldrb	r3, [r3, #1]
 8001c22:	429a      	cmp	r2, r3
 8001c24:	f080 80cf 	bcs.w	8001dc6 <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 8001c28:	4b69      	ldr	r3, [pc, #420]	; (8001dd0 <ft5336_TS_GetXY+0x1d8>)
 8001c2a:	789b      	ldrb	r3, [r3, #2]
 8001c2c:	2b09      	cmp	r3, #9
 8001c2e:	d871      	bhi.n	8001d14 <ft5336_TS_GetXY+0x11c>
 8001c30:	a201      	add	r2, pc, #4	; (adr r2, 8001c38 <ft5336_TS_GetXY+0x40>)
 8001c32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c36:	bf00      	nop
 8001c38:	08001c61 	.word	0x08001c61
 8001c3c:	08001c73 	.word	0x08001c73
 8001c40:	08001c85 	.word	0x08001c85
 8001c44:	08001c97 	.word	0x08001c97
 8001c48:	08001ca9 	.word	0x08001ca9
 8001c4c:	08001cbb 	.word	0x08001cbb
 8001c50:	08001ccd 	.word	0x08001ccd
 8001c54:	08001cdf 	.word	0x08001cdf
 8001c58:	08001cf1 	.word	0x08001cf1
 8001c5c:	08001d03 	.word	0x08001d03
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 8001c60:	2304      	movs	r3, #4
 8001c62:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 8001c64:	2303      	movs	r3, #3
 8001c66:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 8001c68:	2306      	movs	r3, #6
 8001c6a:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 8001c6c:	2305      	movs	r3, #5
 8001c6e:	753b      	strb	r3, [r7, #20]
      break;
 8001c70:	e051      	b.n	8001d16 <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 8001c72:	230a      	movs	r3, #10
 8001c74:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 8001c76:	2309      	movs	r3, #9
 8001c78:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 8001c7a:	230c      	movs	r3, #12
 8001c7c:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 8001c7e:	230b      	movs	r3, #11
 8001c80:	753b      	strb	r3, [r7, #20]
      break;
 8001c82:	e048      	b.n	8001d16 <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 8001c84:	2310      	movs	r3, #16
 8001c86:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 8001c88:	230f      	movs	r3, #15
 8001c8a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 8001c8c:	2312      	movs	r3, #18
 8001c8e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 8001c90:	2311      	movs	r3, #17
 8001c92:	753b      	strb	r3, [r7, #20]
      break;
 8001c94:	e03f      	b.n	8001d16 <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 8001c96:	2316      	movs	r3, #22
 8001c98:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 8001c9a:	2315      	movs	r3, #21
 8001c9c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 8001c9e:	2318      	movs	r3, #24
 8001ca0:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 8001ca2:	2317      	movs	r3, #23
 8001ca4:	753b      	strb	r3, [r7, #20]
      break;
 8001ca6:	e036      	b.n	8001d16 <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 8001ca8:	231c      	movs	r3, #28
 8001caa:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 8001cac:	231b      	movs	r3, #27
 8001cae:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 8001cb0:	231e      	movs	r3, #30
 8001cb2:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 8001cb4:	231d      	movs	r3, #29
 8001cb6:	753b      	strb	r3, [r7, #20]
      break;
 8001cb8:	e02d      	b.n	8001d16 <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 8001cba:	2322      	movs	r3, #34	; 0x22
 8001cbc:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 8001cbe:	2321      	movs	r3, #33	; 0x21
 8001cc0:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 8001cc2:	2324      	movs	r3, #36	; 0x24
 8001cc4:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 8001cc6:	2323      	movs	r3, #35	; 0x23
 8001cc8:	753b      	strb	r3, [r7, #20]
      break;
 8001cca:	e024      	b.n	8001d16 <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 8001ccc:	2328      	movs	r3, #40	; 0x28
 8001cce:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 8001cd0:	2327      	movs	r3, #39	; 0x27
 8001cd2:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 8001cd4:	232a      	movs	r3, #42	; 0x2a
 8001cd6:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 8001cd8:	2329      	movs	r3, #41	; 0x29
 8001cda:	753b      	strb	r3, [r7, #20]
      break;
 8001cdc:	e01b      	b.n	8001d16 <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 8001cde:	232e      	movs	r3, #46	; 0x2e
 8001ce0:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 8001ce2:	232d      	movs	r3, #45	; 0x2d
 8001ce4:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 8001ce6:	2330      	movs	r3, #48	; 0x30
 8001ce8:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 8001cea:	232f      	movs	r3, #47	; 0x2f
 8001cec:	753b      	strb	r3, [r7, #20]
      break;
 8001cee:	e012      	b.n	8001d16 <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 8001cf0:	2334      	movs	r3, #52	; 0x34
 8001cf2:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 8001cf4:	2333      	movs	r3, #51	; 0x33
 8001cf6:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 8001cf8:	2336      	movs	r3, #54	; 0x36
 8001cfa:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 8001cfc:	2335      	movs	r3, #53	; 0x35
 8001cfe:	753b      	strb	r3, [r7, #20]
      break;
 8001d00:	e009      	b.n	8001d16 <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 8001d02:	233a      	movs	r3, #58	; 0x3a
 8001d04:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 8001d06:	2339      	movs	r3, #57	; 0x39
 8001d08:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 8001d0a:	233c      	movs	r3, #60	; 0x3c
 8001d0c:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 8001d0e:	233b      	movs	r3, #59	; 0x3b
 8001d10:	753b      	strb	r3, [r7, #20]
      break;
 8001d12:	e000      	b.n	8001d16 <ft5336_TS_GetXY+0x11e>

    default :
      break;
 8001d14:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 8001d16:	89fb      	ldrh	r3, [r7, #14]
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	7dfa      	ldrb	r2, [r7, #23]
 8001d1c:	4611      	mov	r1, r2
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f000 fb04 	bl	800232c <TS_IO_Read>
 8001d24:	4603      	mov	r3, r0
 8001d26:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8001d28:	7cfb      	ldrb	r3, [r7, #19]
 8001d2a:	b2db      	uxtb	r3, r3
 8001d2c:	b29a      	uxth	r2, r3
 8001d2e:	4b29      	ldr	r3, [pc, #164]	; (8001dd4 <ft5336_TS_GetXY+0x1dc>)
 8001d30:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8001d32:	89fb      	ldrh	r3, [r7, #14]
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	7dba      	ldrb	r2, [r7, #22]
 8001d38:	4611      	mov	r1, r2
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f000 faf6 	bl	800232c <TS_IO_Read>
 8001d40:	4603      	mov	r3, r0
 8001d42:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8001d44:	7cfb      	ldrb	r3, [r7, #19]
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	021b      	lsls	r3, r3, #8
 8001d4a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001d4e:	b21a      	sxth	r2, r3
 8001d50:	4b20      	ldr	r3, [pc, #128]	; (8001dd4 <ft5336_TS_GetXY+0x1dc>)
 8001d52:	881b      	ldrh	r3, [r3, #0]
 8001d54:	b21b      	sxth	r3, r3
 8001d56:	4313      	orrs	r3, r2
 8001d58:	b21b      	sxth	r3, r3
 8001d5a:	b29a      	uxth	r2, r3
 8001d5c:	4b1d      	ldr	r3, [pc, #116]	; (8001dd4 <ft5336_TS_GetXY+0x1dc>)
 8001d5e:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 8001d60:	4b1c      	ldr	r3, [pc, #112]	; (8001dd4 <ft5336_TS_GetXY+0x1dc>)
 8001d62:	881a      	ldrh	r2, [r3, #0]
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8001d68:	89fb      	ldrh	r3, [r7, #14]
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	7d7a      	ldrb	r2, [r7, #21]
 8001d6e:	4611      	mov	r1, r2
 8001d70:	4618      	mov	r0, r3
 8001d72:	f000 fadb 	bl	800232c <TS_IO_Read>
 8001d76:	4603      	mov	r3, r0
 8001d78:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8001d7a:	7cfb      	ldrb	r3, [r7, #19]
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	b29a      	uxth	r2, r3
 8001d80:	4b14      	ldr	r3, [pc, #80]	; (8001dd4 <ft5336_TS_GetXY+0x1dc>)
 8001d82:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8001d84:	89fb      	ldrh	r3, [r7, #14]
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	7d3a      	ldrb	r2, [r7, #20]
 8001d8a:	4611      	mov	r1, r2
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f000 facd 	bl	800232c <TS_IO_Read>
 8001d92:	4603      	mov	r3, r0
 8001d94:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8001d96:	7cfb      	ldrb	r3, [r7, #19]
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	021b      	lsls	r3, r3, #8
 8001d9c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001da0:	b21a      	sxth	r2, r3
 8001da2:	4b0c      	ldr	r3, [pc, #48]	; (8001dd4 <ft5336_TS_GetXY+0x1dc>)
 8001da4:	881b      	ldrh	r3, [r3, #0]
 8001da6:	b21b      	sxth	r3, r3
 8001da8:	4313      	orrs	r3, r2
 8001daa:	b21b      	sxth	r3, r3
 8001dac:	b29a      	uxth	r2, r3
 8001dae:	4b09      	ldr	r3, [pc, #36]	; (8001dd4 <ft5336_TS_GetXY+0x1dc>)
 8001db0:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 8001db2:	4b08      	ldr	r3, [pc, #32]	; (8001dd4 <ft5336_TS_GetXY+0x1dc>)
 8001db4:	881a      	ldrh	r2, [r3, #0]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 8001dba:	4b05      	ldr	r3, [pc, #20]	; (8001dd0 <ft5336_TS_GetXY+0x1d8>)
 8001dbc:	789b      	ldrb	r3, [r3, #2]
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	b2da      	uxtb	r2, r3
 8001dc2:	4b03      	ldr	r3, [pc, #12]	; (8001dd0 <ft5336_TS_GetXY+0x1d8>)
 8001dc4:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 8001dc6:	bf00      	nop
 8001dc8:	3718      	adds	r7, #24
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	2000082c 	.word	0x2000082c
 8001dd4:	20000830 	.word	0x20000830

08001dd8 <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b084      	sub	sp, #16
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	4603      	mov	r3, r0
 8001de0:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 8001de2:	2300      	movs	r3, #0
 8001de4:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8001de6:	2301      	movs	r3, #1
 8001de8:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8001dea:	88fb      	ldrh	r3, [r7, #6]
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	7bfa      	ldrb	r2, [r7, #15]
 8001df0:	21a4      	movs	r1, #164	; 0xa4
 8001df2:	4618      	mov	r0, r3
 8001df4:	f000 fa80 	bl	80022f8 <TS_IO_Write>
}
 8001df8:	bf00      	nop
 8001dfa:	3710      	adds	r7, #16
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}

08001e00 <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b084      	sub	sp, #16
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	4603      	mov	r3, r0
 8001e08:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8001e12:	88fb      	ldrh	r3, [r7, #6]
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	7bfa      	ldrb	r2, [r7, #15]
 8001e18:	21a4      	movs	r1, #164	; 0xa4
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f000 fa6c 	bl	80022f8 <TS_IO_Write>
}
 8001e20:	bf00      	nop
 8001e22:	3710      	adds	r7, #16
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}

08001e28 <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	4603      	mov	r3, r0
 8001e30:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 8001e32:	2300      	movs	r3, #0
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	370c      	adds	r7, #12
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr

08001e40 <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	4603      	mov	r3, r0
 8001e48:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 8001e4a:	bf00      	nop
 8001e4c:	370c      	adds	r7, #12
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr

08001e56 <ft5336_TS_GetGestureID>:
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @param  pGestureId : Pointer to get last touch gesture Identification.
  * @retval None.
  */
void ft5336_TS_GetGestureID(uint16_t DeviceAddr, uint32_t * pGestureId)
{
 8001e56:	b580      	push	{r7, lr}
 8001e58:	b084      	sub	sp, #16
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	6039      	str	r1, [r7, #0]
 8001e60:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadData = 0;
 8001e62:	2300      	movs	r3, #0
 8001e64:	73fb      	strb	r3, [r7, #15]

  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 8001e66:	88fb      	ldrh	r3, [r7, #6]
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	2101      	movs	r1, #1
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f000 fa5d 	bl	800232c <TS_IO_Read>
 8001e72:	4603      	mov	r3, r0
 8001e74:	73fb      	strb	r3, [r7, #15]

  * pGestureId = ucReadData;
 8001e76:	7bfb      	ldrb	r3, [r7, #15]
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	601a      	str	r2, [r3, #0]
}
 8001e80:	bf00      	nop
 8001e82:	3710      	adds	r7, #16
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}

08001e88 <ft5336_TS_GetTouchInfo>:
void ft5336_TS_GetTouchInfo(uint16_t   DeviceAddr,
                            uint32_t   touchIdx,
                            uint32_t * pWeight,
                            uint32_t * pArea,
                            uint32_t * pEvent)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b086      	sub	sp, #24
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	60b9      	str	r1, [r7, #8]
 8001e90:	607a      	str	r2, [r7, #4]
 8001e92:	603b      	str	r3, [r7, #0]
 8001e94:	4603      	mov	r3, r0
 8001e96:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	753b      	strb	r3, [r7, #20]
  uint8_t regAddressXHigh = 0;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressPWeight = 0;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressPMisc = 0;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	757b      	strb	r3, [r7, #21]

  if(touchIdx < ft5336_handle.currActiveTouchNb)
 8001ea8:	4b4d      	ldr	r3, [pc, #308]	; (8001fe0 <ft5336_TS_GetTouchInfo+0x158>)
 8001eaa:	785b      	ldrb	r3, [r3, #1]
 8001eac:	461a      	mov	r2, r3
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	f080 8090 	bcs.w	8001fd6 <ft5336_TS_GetTouchInfo+0x14e>
  {
    switch(touchIdx)
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	2b09      	cmp	r3, #9
 8001eba:	d85d      	bhi.n	8001f78 <ft5336_TS_GetTouchInfo+0xf0>
 8001ebc:	a201      	add	r2, pc, #4	; (adr r2, 8001ec4 <ft5336_TS_GetTouchInfo+0x3c>)
 8001ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ec2:	bf00      	nop
 8001ec4:	08001eed 	.word	0x08001eed
 8001ec8:	08001efb 	.word	0x08001efb
 8001ecc:	08001f09 	.word	0x08001f09
 8001ed0:	08001f17 	.word	0x08001f17
 8001ed4:	08001f25 	.word	0x08001f25
 8001ed8:	08001f33 	.word	0x08001f33
 8001edc:	08001f41 	.word	0x08001f41
 8001ee0:	08001f4f 	.word	0x08001f4f
 8001ee4:	08001f5d 	.word	0x08001f5d
 8001ee8:	08001f6b 	.word	0x08001f6b
    {
    case 0 :
      regAddressXHigh   = FT5336_P1_XH_REG;
 8001eec:	2303      	movs	r3, #3
 8001eee:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P1_WEIGHT_REG;
 8001ef0:	2307      	movs	r3, #7
 8001ef2:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P1_MISC_REG;
 8001ef4:	2308      	movs	r3, #8
 8001ef6:	757b      	strb	r3, [r7, #21]
      break;
 8001ef8:	e03f      	b.n	8001f7a <ft5336_TS_GetTouchInfo+0xf2>

    case 1 :
      regAddressXHigh   = FT5336_P2_XH_REG;
 8001efa:	2309      	movs	r3, #9
 8001efc:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P2_WEIGHT_REG;
 8001efe:	230d      	movs	r3, #13
 8001f00:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P2_MISC_REG;
 8001f02:	230e      	movs	r3, #14
 8001f04:	757b      	strb	r3, [r7, #21]
      break;
 8001f06:	e038      	b.n	8001f7a <ft5336_TS_GetTouchInfo+0xf2>

    case 2 :
      regAddressXHigh   = FT5336_P3_XH_REG;
 8001f08:	230f      	movs	r3, #15
 8001f0a:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P3_WEIGHT_REG;
 8001f0c:	2313      	movs	r3, #19
 8001f0e:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P3_MISC_REG;
 8001f10:	2314      	movs	r3, #20
 8001f12:	757b      	strb	r3, [r7, #21]
      break;
 8001f14:	e031      	b.n	8001f7a <ft5336_TS_GetTouchInfo+0xf2>

    case 3 :
      regAddressXHigh   = FT5336_P4_XH_REG;
 8001f16:	2315      	movs	r3, #21
 8001f18:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P4_WEIGHT_REG;
 8001f1a:	2319      	movs	r3, #25
 8001f1c:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P4_MISC_REG;
 8001f1e:	231a      	movs	r3, #26
 8001f20:	757b      	strb	r3, [r7, #21]
      break;
 8001f22:	e02a      	b.n	8001f7a <ft5336_TS_GetTouchInfo+0xf2>

    case 4 :
      regAddressXHigh   = FT5336_P5_XH_REG;
 8001f24:	231b      	movs	r3, #27
 8001f26:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P5_WEIGHT_REG;
 8001f28:	231f      	movs	r3, #31
 8001f2a:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P5_MISC_REG;
 8001f2c:	2320      	movs	r3, #32
 8001f2e:	757b      	strb	r3, [r7, #21]
      break;
 8001f30:	e023      	b.n	8001f7a <ft5336_TS_GetTouchInfo+0xf2>

    case 5 :
      regAddressXHigh   = FT5336_P6_XH_REG;
 8001f32:	2321      	movs	r3, #33	; 0x21
 8001f34:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P6_WEIGHT_REG;
 8001f36:	2325      	movs	r3, #37	; 0x25
 8001f38:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P6_MISC_REG;
 8001f3a:	2326      	movs	r3, #38	; 0x26
 8001f3c:	757b      	strb	r3, [r7, #21]
      break;
 8001f3e:	e01c      	b.n	8001f7a <ft5336_TS_GetTouchInfo+0xf2>

    case 6 :
      regAddressXHigh   = FT5336_P7_XH_REG;
 8001f40:	2327      	movs	r3, #39	; 0x27
 8001f42:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P7_WEIGHT_REG;
 8001f44:	232b      	movs	r3, #43	; 0x2b
 8001f46:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P7_MISC_REG;
 8001f48:	232c      	movs	r3, #44	; 0x2c
 8001f4a:	757b      	strb	r3, [r7, #21]
      break;
 8001f4c:	e015      	b.n	8001f7a <ft5336_TS_GetTouchInfo+0xf2>

    case 7 :
      regAddressXHigh   = FT5336_P8_XH_REG;
 8001f4e:	232d      	movs	r3, #45	; 0x2d
 8001f50:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P8_WEIGHT_REG;
 8001f52:	2331      	movs	r3, #49	; 0x31
 8001f54:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P8_MISC_REG;
 8001f56:	2332      	movs	r3, #50	; 0x32
 8001f58:	757b      	strb	r3, [r7, #21]
      break;
 8001f5a:	e00e      	b.n	8001f7a <ft5336_TS_GetTouchInfo+0xf2>

    case 8 :
      regAddressXHigh   = FT5336_P9_XH_REG;
 8001f5c:	2333      	movs	r3, #51	; 0x33
 8001f5e:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P9_WEIGHT_REG;
 8001f60:	2337      	movs	r3, #55	; 0x37
 8001f62:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P9_MISC_REG;
 8001f64:	2338      	movs	r3, #56	; 0x38
 8001f66:	757b      	strb	r3, [r7, #21]
      break;
 8001f68:	e007      	b.n	8001f7a <ft5336_TS_GetTouchInfo+0xf2>

    case 9 :
      regAddressXHigh   = FT5336_P10_XH_REG;
 8001f6a:	2339      	movs	r3, #57	; 0x39
 8001f6c:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P10_WEIGHT_REG;
 8001f6e:	233d      	movs	r3, #61	; 0x3d
 8001f70:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P10_MISC_REG;
 8001f72:	233e      	movs	r3, #62	; 0x3e
 8001f74:	757b      	strb	r3, [r7, #21]
      break;
 8001f76:	e000      	b.n	8001f7a <ft5336_TS_GetTouchInfo+0xf2>

    default :
      break;
 8001f78:	bf00      	nop

    } /* end switch(touchIdx) */

    /* Read Event Id of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8001f7a:	89fb      	ldrh	r3, [r7, #14]
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	7dfa      	ldrb	r2, [r7, #23]
 8001f80:	4611      	mov	r1, r2
 8001f82:	4618      	mov	r0, r3
 8001f84:	f000 f9d2 	bl	800232c <TS_IO_Read>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	753b      	strb	r3, [r7, #20]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 8001f8c:	7d3b      	ldrb	r3, [r7, #20]
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	119b      	asrs	r3, r3, #6
 8001f92:	f003 0203 	and.w	r2, r3, #3
 8001f96:	6a3b      	ldr	r3, [r7, #32]
 8001f98:	601a      	str	r2, [r3, #0]

    /* Read weight of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 8001f9a:	89fb      	ldrh	r3, [r7, #14]
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	7dba      	ldrb	r2, [r7, #22]
 8001fa0:	4611      	mov	r1, r2
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f000 f9c2 	bl	800232c <TS_IO_Read>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	753b      	strb	r3, [r7, #20]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 8001fac:	7d3b      	ldrb	r3, [r7, #20]
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	601a      	str	r2, [r3, #0]

    /* Read area of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 8001fb6:	89fb      	ldrh	r3, [r7, #14]
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	7d7a      	ldrb	r2, [r7, #21]
 8001fbc:	4611      	mov	r1, r2
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f000 f9b4 	bl	800232c <TS_IO_Read>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	753b      	strb	r3, [r7, #20]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 8001fc8:	7d3b      	ldrb	r3, [r7, #20]
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	111b      	asrs	r3, r3, #4
 8001fce:	f003 0204 	and.w	r2, r3, #4
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	601a      	str	r2, [r3, #0]

  } /* of if(touchIdx < ft5336_handle.currActiveTouchNb) */
}
 8001fd6:	bf00      	nop
 8001fd8:	3718      	adds	r7, #24
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	2000082c 	.word	0x2000082c

08001fe4 <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 8001fe8:	4b03      	ldr	r3, [pc, #12]	; (8001ff8 <ft5336_Get_I2C_InitializedStatus+0x14>)
 8001fea:	781b      	ldrb	r3, [r3, #0]
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop
 8001ff8:	2000082c 	.word	0x2000082c

08001ffc <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8002000:	f7ff fff0 	bl	8001fe4 <ft5336_Get_I2C_InitializedStatus>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d104      	bne.n	8002014 <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 800200a:	f000 f96b 	bl	80022e4 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 800200e:	4b02      	ldr	r3, [pc, #8]	; (8002018 <ft5336_I2C_InitializeIfRequired+0x1c>)
 8002010:	2201      	movs	r2, #1
 8002012:	701a      	strb	r2, [r3, #0]
  }
}
 8002014:	bf00      	nop
 8002016:	bd80      	pop	{r7, pc}
 8002018:	2000082c 	.word	0x2000082c

0800201c <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 800201c:	b480      	push	{r7}
 800201e:	b085      	sub	sp, #20
 8002020:	af00      	add	r7, sp, #0
 8002022:	4603      	mov	r3, r0
 8002024:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 8002026:	2300      	movs	r3, #0
 8002028:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 800202a:	68fb      	ldr	r3, [r7, #12]
}
 800202c:	4618      	mov	r0, r3
 800202e:	3714      	adds	r7, #20
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b08c      	sub	sp, #48	; 0x30
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	4a51      	ldr	r2, [pc, #324]	; (8002188 <I2Cx_MspInit+0x150>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d14d      	bne.n	80020e4 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002048:	4b50      	ldr	r3, [pc, #320]	; (800218c <I2Cx_MspInit+0x154>)
 800204a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204c:	4a4f      	ldr	r2, [pc, #316]	; (800218c <I2Cx_MspInit+0x154>)
 800204e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002052:	6313      	str	r3, [r2, #48]	; 0x30
 8002054:	4b4d      	ldr	r3, [pc, #308]	; (800218c <I2Cx_MspInit+0x154>)
 8002056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002058:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800205c:	61bb      	str	r3, [r7, #24]
 800205e:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8002060:	2380      	movs	r3, #128	; 0x80
 8002062:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002064:	2312      	movs	r3, #18
 8002066:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8002068:	2300      	movs	r3, #0
 800206a:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800206c:	2302      	movs	r3, #2
 800206e:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8002070:	2304      	movs	r3, #4
 8002072:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002074:	f107 031c 	add.w	r3, r7, #28
 8002078:	4619      	mov	r1, r3
 800207a:	4845      	ldr	r0, [pc, #276]	; (8002190 <I2Cx_MspInit+0x158>)
 800207c:	f003 fca2 	bl	80059c4 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8002080:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002084:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002086:	f107 031c 	add.w	r3, r7, #28
 800208a:	4619      	mov	r1, r3
 800208c:	4840      	ldr	r0, [pc, #256]	; (8002190 <I2Cx_MspInit+0x158>)
 800208e:	f003 fc99 	bl	80059c4 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8002092:	4b3e      	ldr	r3, [pc, #248]	; (800218c <I2Cx_MspInit+0x154>)
 8002094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002096:	4a3d      	ldr	r2, [pc, #244]	; (800218c <I2Cx_MspInit+0x154>)
 8002098:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800209c:	6413      	str	r3, [r2, #64]	; 0x40
 800209e:	4b3b      	ldr	r3, [pc, #236]	; (800218c <I2Cx_MspInit+0x154>)
 80020a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80020a6:	617b      	str	r3, [r7, #20]
 80020a8:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 80020aa:	4b38      	ldr	r3, [pc, #224]	; (800218c <I2Cx_MspInit+0x154>)
 80020ac:	6a1b      	ldr	r3, [r3, #32]
 80020ae:	4a37      	ldr	r2, [pc, #220]	; (800218c <I2Cx_MspInit+0x154>)
 80020b0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80020b4:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 80020b6:	4b35      	ldr	r3, [pc, #212]	; (800218c <I2Cx_MspInit+0x154>)
 80020b8:	6a1b      	ldr	r3, [r3, #32]
 80020ba:	4a34      	ldr	r2, [pc, #208]	; (800218c <I2Cx_MspInit+0x154>)
 80020bc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80020c0:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 80020c2:	2200      	movs	r2, #0
 80020c4:	210f      	movs	r1, #15
 80020c6:	2048      	movs	r0, #72	; 0x48
 80020c8:	f001 fe99 	bl	8003dfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 80020cc:	2048      	movs	r0, #72	; 0x48
 80020ce:	f001 feb2 	bl	8003e36 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 80020d2:	2200      	movs	r2, #0
 80020d4:	210f      	movs	r1, #15
 80020d6:	2049      	movs	r0, #73	; 0x49
 80020d8:	f001 fe91 	bl	8003dfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 80020dc:	2049      	movs	r0, #73	; 0x49
 80020de:	f001 feaa 	bl	8003e36 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 80020e2:	e04d      	b.n	8002180 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80020e4:	4b29      	ldr	r3, [pc, #164]	; (800218c <I2Cx_MspInit+0x154>)
 80020e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e8:	4a28      	ldr	r2, [pc, #160]	; (800218c <I2Cx_MspInit+0x154>)
 80020ea:	f043 0302 	orr.w	r3, r3, #2
 80020ee:	6313      	str	r3, [r2, #48]	; 0x30
 80020f0:	4b26      	ldr	r3, [pc, #152]	; (800218c <I2Cx_MspInit+0x154>)
 80020f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f4:	f003 0302 	and.w	r3, r3, #2
 80020f8:	613b      	str	r3, [r7, #16]
 80020fa:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 80020fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002100:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002102:	2312      	movs	r3, #18
 8002104:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8002106:	2300      	movs	r3, #0
 8002108:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800210a:	2302      	movs	r3, #2
 800210c:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 800210e:	2304      	movs	r3, #4
 8002110:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002112:	f107 031c 	add.w	r3, r7, #28
 8002116:	4619      	mov	r1, r3
 8002118:	481e      	ldr	r0, [pc, #120]	; (8002194 <I2Cx_MspInit+0x15c>)
 800211a:	f003 fc53 	bl	80059c4 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 800211e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002122:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002124:	f107 031c 	add.w	r3, r7, #28
 8002128:	4619      	mov	r1, r3
 800212a:	481a      	ldr	r0, [pc, #104]	; (8002194 <I2Cx_MspInit+0x15c>)
 800212c:	f003 fc4a 	bl	80059c4 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8002130:	4b16      	ldr	r3, [pc, #88]	; (800218c <I2Cx_MspInit+0x154>)
 8002132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002134:	4a15      	ldr	r2, [pc, #84]	; (800218c <I2Cx_MspInit+0x154>)
 8002136:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800213a:	6413      	str	r3, [r2, #64]	; 0x40
 800213c:	4b13      	ldr	r3, [pc, #76]	; (800218c <I2Cx_MspInit+0x154>)
 800213e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002140:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002144:	60fb      	str	r3, [r7, #12]
 8002146:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8002148:	4b10      	ldr	r3, [pc, #64]	; (800218c <I2Cx_MspInit+0x154>)
 800214a:	6a1b      	ldr	r3, [r3, #32]
 800214c:	4a0f      	ldr	r2, [pc, #60]	; (800218c <I2Cx_MspInit+0x154>)
 800214e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002152:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8002154:	4b0d      	ldr	r3, [pc, #52]	; (800218c <I2Cx_MspInit+0x154>)
 8002156:	6a1b      	ldr	r3, [r3, #32]
 8002158:	4a0c      	ldr	r2, [pc, #48]	; (800218c <I2Cx_MspInit+0x154>)
 800215a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800215e:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8002160:	2200      	movs	r2, #0
 8002162:	210f      	movs	r1, #15
 8002164:	201f      	movs	r0, #31
 8002166:	f001 fe4a 	bl	8003dfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 800216a:	201f      	movs	r0, #31
 800216c:	f001 fe63 	bl	8003e36 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8002170:	2200      	movs	r2, #0
 8002172:	210f      	movs	r1, #15
 8002174:	2020      	movs	r0, #32
 8002176:	f001 fe42 	bl	8003dfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 800217a:	2020      	movs	r0, #32
 800217c:	f001 fe5b 	bl	8003e36 <HAL_NVIC_EnableIRQ>
}
 8002180:	bf00      	nop
 8002182:	3730      	adds	r7, #48	; 0x30
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}
 8002188:	20000834 	.word	0x20000834
 800218c:	40023800 	.word	0x40023800
 8002190:	40021c00 	.word	0x40021c00
 8002194:	40020400 	.word	0x40020400

08002198 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 80021a0:	6878      	ldr	r0, [r7, #4]
 80021a2:	f004 f9e3 	bl	800656c <HAL_I2C_GetState>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d125      	bne.n	80021f8 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	4a14      	ldr	r2, [pc, #80]	; (8002200 <I2Cx_Init+0x68>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d103      	bne.n	80021bc <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	4a13      	ldr	r2, [pc, #76]	; (8002204 <I2Cx_Init+0x6c>)
 80021b8:	601a      	str	r2, [r3, #0]
 80021ba:	e002      	b.n	80021c2 <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	4a12      	ldr	r2, [pc, #72]	; (8002208 <I2Cx_Init+0x70>)
 80021c0:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a11      	ldr	r2, [pc, #68]	; (800220c <I2Cx_Init+0x74>)
 80021c6:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2200      	movs	r2, #0
 80021cc:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2201      	movs	r2, #1
 80021d2:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2200      	movs	r2, #0
 80021d8:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2200      	movs	r2, #0
 80021e4:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2200      	movs	r2, #0
 80021ea:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	f7ff ff23 	bl	8002038 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f003 feb8 	bl	8005f68 <HAL_I2C_Init>
  }
}
 80021f8:	bf00      	nop
 80021fa:	3708      	adds	r7, #8
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	20000834 	.word	0x20000834
 8002204:	40005c00 	.word	0x40005c00
 8002208:	40005400 	.word	0x40005400
 800220c:	40912732 	.word	0x40912732

08002210 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b08a      	sub	sp, #40	; 0x28
 8002214:	af04      	add	r7, sp, #16
 8002216:	60f8      	str	r0, [r7, #12]
 8002218:	4608      	mov	r0, r1
 800221a:	4611      	mov	r1, r2
 800221c:	461a      	mov	r2, r3
 800221e:	4603      	mov	r3, r0
 8002220:	72fb      	strb	r3, [r7, #11]
 8002222:	460b      	mov	r3, r1
 8002224:	813b      	strh	r3, [r7, #8]
 8002226:	4613      	mov	r3, r2
 8002228:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800222a:	2300      	movs	r3, #0
 800222c:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800222e:	7afb      	ldrb	r3, [r7, #11]
 8002230:	b299      	uxth	r1, r3
 8002232:	88f8      	ldrh	r0, [r7, #6]
 8002234:	893a      	ldrh	r2, [r7, #8]
 8002236:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800223a:	9302      	str	r3, [sp, #8]
 800223c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800223e:	9301      	str	r3, [sp, #4]
 8002240:	6a3b      	ldr	r3, [r7, #32]
 8002242:	9300      	str	r3, [sp, #0]
 8002244:	4603      	mov	r3, r0
 8002246:	68f8      	ldr	r0, [r7, #12]
 8002248:	f004 f876 	bl	8006338 <HAL_I2C_Mem_Read>
 800224c:	4603      	mov	r3, r0
 800224e:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002250:	7dfb      	ldrb	r3, [r7, #23]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d004      	beq.n	8002260 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8002256:	7afb      	ldrb	r3, [r7, #11]
 8002258:	4619      	mov	r1, r3
 800225a:	68f8      	ldr	r0, [r7, #12]
 800225c:	f000 f832 	bl	80022c4 <I2Cx_Error>
  }
  return status;    
 8002260:	7dfb      	ldrb	r3, [r7, #23]
}
 8002262:	4618      	mov	r0, r3
 8002264:	3718      	adds	r7, #24
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}

0800226a <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 800226a:	b580      	push	{r7, lr}
 800226c:	b08a      	sub	sp, #40	; 0x28
 800226e:	af04      	add	r7, sp, #16
 8002270:	60f8      	str	r0, [r7, #12]
 8002272:	4608      	mov	r0, r1
 8002274:	4611      	mov	r1, r2
 8002276:	461a      	mov	r2, r3
 8002278:	4603      	mov	r3, r0
 800227a:	72fb      	strb	r3, [r7, #11]
 800227c:	460b      	mov	r3, r1
 800227e:	813b      	strh	r3, [r7, #8]
 8002280:	4613      	mov	r3, r2
 8002282:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002284:	2300      	movs	r3, #0
 8002286:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002288:	7afb      	ldrb	r3, [r7, #11]
 800228a:	b299      	uxth	r1, r3
 800228c:	88f8      	ldrh	r0, [r7, #6]
 800228e:	893a      	ldrh	r2, [r7, #8]
 8002290:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002294:	9302      	str	r3, [sp, #8]
 8002296:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002298:	9301      	str	r3, [sp, #4]
 800229a:	6a3b      	ldr	r3, [r7, #32]
 800229c:	9300      	str	r3, [sp, #0]
 800229e:	4603      	mov	r3, r0
 80022a0:	68f8      	ldr	r0, [r7, #12]
 80022a2:	f003 ff35 	bl	8006110 <HAL_I2C_Mem_Write>
 80022a6:	4603      	mov	r3, r0
 80022a8:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80022aa:	7dfb      	ldrb	r3, [r7, #23]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d004      	beq.n	80022ba <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 80022b0:	7afb      	ldrb	r3, [r7, #11]
 80022b2:	4619      	mov	r1, r3
 80022b4:	68f8      	ldr	r0, [r7, #12]
 80022b6:	f000 f805 	bl	80022c4 <I2Cx_Error>
  }
  return status;
 80022ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3718      	adds	r7, #24
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	460b      	mov	r3, r1
 80022ce:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	f003 fed9 	bl	8006088 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f7ff ff5e 	bl	8002198 <I2Cx_Init>
}
 80022dc:	bf00      	nop
 80022de:	3708      	adds	r7, #8
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}

080022e4 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 80022e8:	4802      	ldr	r0, [pc, #8]	; (80022f4 <TS_IO_Init+0x10>)
 80022ea:	f7ff ff55 	bl	8002198 <I2Cx_Init>
}
 80022ee:	bf00      	nop
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	20000834 	.word	0x20000834

080022f8 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af02      	add	r7, sp, #8
 80022fe:	4603      	mov	r3, r0
 8002300:	71fb      	strb	r3, [r7, #7]
 8002302:	460b      	mov	r3, r1
 8002304:	71bb      	strb	r3, [r7, #6]
 8002306:	4613      	mov	r3, r2
 8002308:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800230a:	79bb      	ldrb	r3, [r7, #6]
 800230c:	b29a      	uxth	r2, r3
 800230e:	79f9      	ldrb	r1, [r7, #7]
 8002310:	2301      	movs	r3, #1
 8002312:	9301      	str	r3, [sp, #4]
 8002314:	1d7b      	adds	r3, r7, #5
 8002316:	9300      	str	r3, [sp, #0]
 8002318:	2301      	movs	r3, #1
 800231a:	4803      	ldr	r0, [pc, #12]	; (8002328 <TS_IO_Write+0x30>)
 800231c:	f7ff ffa5 	bl	800226a <I2Cx_WriteMultiple>
}
 8002320:	bf00      	nop
 8002322:	3708      	adds	r7, #8
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	20000834 	.word	0x20000834

0800232c <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b086      	sub	sp, #24
 8002330:	af02      	add	r7, sp, #8
 8002332:	4603      	mov	r3, r0
 8002334:	460a      	mov	r2, r1
 8002336:	71fb      	strb	r3, [r7, #7]
 8002338:	4613      	mov	r3, r2
 800233a:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 800233c:	2300      	movs	r3, #0
 800233e:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8002340:	79bb      	ldrb	r3, [r7, #6]
 8002342:	b29a      	uxth	r2, r3
 8002344:	79f9      	ldrb	r1, [r7, #7]
 8002346:	2301      	movs	r3, #1
 8002348:	9301      	str	r3, [sp, #4]
 800234a:	f107 030f 	add.w	r3, r7, #15
 800234e:	9300      	str	r3, [sp, #0]
 8002350:	2301      	movs	r3, #1
 8002352:	4804      	ldr	r0, [pc, #16]	; (8002364 <TS_IO_Read+0x38>)
 8002354:	f7ff ff5c 	bl	8002210 <I2Cx_ReadMultiple>

  return read_value;
 8002358:	7bfb      	ldrb	r3, [r7, #15]
}
 800235a:	4618      	mov	r0, r3
 800235c:	3710      	adds	r7, #16
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	20000834 	.word	0x20000834

08002368 <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	f001 fc45 	bl	8003c00 <HAL_Delay>
}
 8002376:	bf00      	nop
 8002378:	3708      	adds	r7, #8
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
	...

08002380 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 8002380:	b580      	push	{r7, lr}
 8002382:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8002384:	4b31      	ldr	r3, [pc, #196]	; (800244c <BSP_LCD_Init+0xcc>)
 8002386:	2228      	movs	r2, #40	; 0x28
 8002388:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 800238a:	4b30      	ldr	r3, [pc, #192]	; (800244c <BSP_LCD_Init+0xcc>)
 800238c:	2209      	movs	r2, #9
 800238e:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8002390:	4b2e      	ldr	r3, [pc, #184]	; (800244c <BSP_LCD_Init+0xcc>)
 8002392:	2235      	movs	r2, #53	; 0x35
 8002394:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8002396:	4b2d      	ldr	r3, [pc, #180]	; (800244c <BSP_LCD_Init+0xcc>)
 8002398:	220b      	movs	r2, #11
 800239a:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 800239c:	4b2b      	ldr	r3, [pc, #172]	; (800244c <BSP_LCD_Init+0xcc>)
 800239e:	f240 121b 	movw	r2, #283	; 0x11b
 80023a2:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 80023a4:	4b29      	ldr	r3, [pc, #164]	; (800244c <BSP_LCD_Init+0xcc>)
 80023a6:	f240 2215 	movw	r2, #533	; 0x215
 80023aa:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 80023ac:	4b27      	ldr	r3, [pc, #156]	; (800244c <BSP_LCD_Init+0xcc>)
 80023ae:	f240 121d 	movw	r2, #285	; 0x11d
 80023b2:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 80023b4:	4b25      	ldr	r3, [pc, #148]	; (800244c <BSP_LCD_Init+0xcc>)
 80023b6:	f240 2235 	movw	r2, #565	; 0x235
 80023ba:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 80023bc:	2100      	movs	r1, #0
 80023be:	4823      	ldr	r0, [pc, #140]	; (800244c <BSP_LCD_Init+0xcc>)
 80023c0:	f000 fb8c 	bl	8002adc <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 80023c4:	4b21      	ldr	r3, [pc, #132]	; (800244c <BSP_LCD_Init+0xcc>)
 80023c6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80023ca:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 80023cc:	4b1f      	ldr	r3, [pc, #124]	; (800244c <BSP_LCD_Init+0xcc>)
 80023ce:	f44f 7288 	mov.w	r2, #272	; 0x110
 80023d2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 80023d4:	4b1d      	ldr	r3, [pc, #116]	; (800244c <BSP_LCD_Init+0xcc>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 80023dc:	4b1b      	ldr	r3, [pc, #108]	; (800244c <BSP_LCD_Init+0xcc>)
 80023de:	2200      	movs	r2, #0
 80023e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 80023e4:	4b19      	ldr	r3, [pc, #100]	; (800244c <BSP_LCD_Init+0xcc>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80023ec:	4b17      	ldr	r3, [pc, #92]	; (800244c <BSP_LCD_Init+0xcc>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 80023f2:	4b16      	ldr	r3, [pc, #88]	; (800244c <BSP_LCD_Init+0xcc>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 80023f8:	4b14      	ldr	r3, [pc, #80]	; (800244c <BSP_LCD_Init+0xcc>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80023fe:	4b13      	ldr	r3, [pc, #76]	; (800244c <BSP_LCD_Init+0xcc>)
 8002400:	2200      	movs	r2, #0
 8002402:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 8002404:	4b11      	ldr	r3, [pc, #68]	; (800244c <BSP_LCD_Init+0xcc>)
 8002406:	4a12      	ldr	r2, [pc, #72]	; (8002450 <BSP_LCD_Init+0xd0>)
 8002408:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 800240a:	4810      	ldr	r0, [pc, #64]	; (800244c <BSP_LCD_Init+0xcc>)
 800240c:	f004 fc64 	bl	8006cd8 <HAL_LTDC_GetState>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d103      	bne.n	800241e <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 8002416:	2100      	movs	r1, #0
 8002418:	480c      	ldr	r0, [pc, #48]	; (800244c <BSP_LCD_Init+0xcc>)
 800241a:	f000 fa85 	bl	8002928 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 800241e:	480b      	ldr	r0, [pc, #44]	; (800244c <BSP_LCD_Init+0xcc>)
 8002420:	f004 fb4c 	bl	8006abc <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8002424:	2201      	movs	r2, #1
 8002426:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800242a:	480a      	ldr	r0, [pc, #40]	; (8002454 <BSP_LCD_Init+0xd4>)
 800242c:	f003 fd82 	bl	8005f34 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8002430:	2201      	movs	r2, #1
 8002432:	2108      	movs	r1, #8
 8002434:	4808      	ldr	r0, [pc, #32]	; (8002458 <BSP_LCD_Init+0xd8>)
 8002436:	f003 fd7d 	bl	8005f34 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 800243a:	f000 ff51 	bl	80032e0 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800243e:	4807      	ldr	r0, [pc, #28]	; (800245c <BSP_LCD_Init+0xdc>)
 8002440:	f000 f8be 	bl	80025c0 <BSP_LCD_SetFont>
  
  return LCD_OK;
 8002444:	2300      	movs	r3, #0
}
 8002446:	4618      	mov	r0, r3
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	20000888 	.word	0x20000888
 8002450:	40016800 	.word	0x40016800
 8002454:	40022000 	.word	0x40022000
 8002458:	40022800 	.word	0x40022800
 800245c:	20000030 	.word	0x20000030

08002460 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8002464:	4b06      	ldr	r3, [pc, #24]	; (8002480 <BSP_LCD_GetXSize+0x20>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a06      	ldr	r2, [pc, #24]	; (8002484 <BSP_LCD_GetXSize+0x24>)
 800246a:	2134      	movs	r1, #52	; 0x34
 800246c:	fb01 f303 	mul.w	r3, r1, r3
 8002470:	4413      	add	r3, r2
 8002472:	3360      	adds	r3, #96	; 0x60
 8002474:	681b      	ldr	r3, [r3, #0]
}
 8002476:	4618      	mov	r0, r3
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr
 8002480:	20000970 	.word	0x20000970
 8002484:	20000888 	.word	0x20000888

08002488 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8002488:	b480      	push	{r7}
 800248a:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 800248c:	4b06      	ldr	r3, [pc, #24]	; (80024a8 <BSP_LCD_GetYSize+0x20>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a06      	ldr	r2, [pc, #24]	; (80024ac <BSP_LCD_GetYSize+0x24>)
 8002492:	2134      	movs	r1, #52	; 0x34
 8002494:	fb01 f303 	mul.w	r3, r1, r3
 8002498:	4413      	add	r3, r2
 800249a:	3364      	adds	r3, #100	; 0x64
 800249c:	681b      	ldr	r3, [r3, #0]
}
 800249e:	4618      	mov	r0, r3
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr
 80024a8:	20000970 	.word	0x20000970
 80024ac:	20000888 	.word	0x20000888

080024b0 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b090      	sub	sp, #64	; 0x40
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	4603      	mov	r3, r0
 80024b8:	6039      	str	r1, [r7, #0]
 80024ba:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 80024bc:	2300      	movs	r3, #0
 80024be:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 80024c0:	f7ff ffce 	bl	8002460 <BSP_LCD_GetXSize>
 80024c4:	4603      	mov	r3, r0
 80024c6:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 80024c8:	2300      	movs	r3, #0
 80024ca:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 80024cc:	f7ff ffdc 	bl	8002488 <BSP_LCD_GetYSize>
 80024d0:	4603      	mov	r3, r0
 80024d2:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80024d4:	2300      	movs	r3, #0
 80024d6:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 80024dc:	23ff      	movs	r3, #255	; 0xff
 80024de:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 80024e0:	2300      	movs	r3, #0
 80024e2:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 80024e4:	2300      	movs	r3, #0
 80024e6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 80024ea:	2300      	movs	r3, #0
 80024ec:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 80024f0:	2300      	movs	r3, #0
 80024f2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80024f6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80024fa:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80024fc:	2307      	movs	r3, #7
 80024fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8002500:	f7ff ffae 	bl	8002460 <BSP_LCD_GetXSize>
 8002504:	4603      	mov	r3, r0
 8002506:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8002508:	f7ff ffbe 	bl	8002488 <BSP_LCD_GetYSize>
 800250c:	4603      	mov	r3, r0
 800250e:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8002510:	88fa      	ldrh	r2, [r7, #6]
 8002512:	f107 030c 	add.w	r3, r7, #12
 8002516:	4619      	mov	r1, r3
 8002518:	4812      	ldr	r0, [pc, #72]	; (8002564 <BSP_LCD_LayerDefaultInit+0xb4>)
 800251a:	f004 fb9f 	bl	8006c5c <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 800251e:	88fa      	ldrh	r2, [r7, #6]
 8002520:	4911      	ldr	r1, [pc, #68]	; (8002568 <BSP_LCD_LayerDefaultInit+0xb8>)
 8002522:	4613      	mov	r3, r2
 8002524:	005b      	lsls	r3, r3, #1
 8002526:	4413      	add	r3, r2
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	440b      	add	r3, r1
 800252c:	3304      	adds	r3, #4
 800252e:	f04f 32ff 	mov.w	r2, #4294967295
 8002532:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8002534:	88fa      	ldrh	r2, [r7, #6]
 8002536:	490c      	ldr	r1, [pc, #48]	; (8002568 <BSP_LCD_LayerDefaultInit+0xb8>)
 8002538:	4613      	mov	r3, r2
 800253a:	005b      	lsls	r3, r3, #1
 800253c:	4413      	add	r3, r2
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	440b      	add	r3, r1
 8002542:	3308      	adds	r3, #8
 8002544:	4a09      	ldr	r2, [pc, #36]	; (800256c <BSP_LCD_LayerDefaultInit+0xbc>)
 8002546:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8002548:	88fa      	ldrh	r2, [r7, #6]
 800254a:	4907      	ldr	r1, [pc, #28]	; (8002568 <BSP_LCD_LayerDefaultInit+0xb8>)
 800254c:	4613      	mov	r3, r2
 800254e:	005b      	lsls	r3, r3, #1
 8002550:	4413      	add	r3, r2
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	440b      	add	r3, r1
 8002556:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 800255a:	601a      	str	r2, [r3, #0]
}
 800255c:	bf00      	nop
 800255e:	3740      	adds	r7, #64	; 0x40
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	20000888 	.word	0x20000888
 8002568:	20000974 	.word	0x20000974
 800256c:	20000030 	.word	0x20000030

08002570 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8002570:	b480      	push	{r7}
 8002572:	b083      	sub	sp, #12
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8002578:	4a04      	ldr	r2, [pc, #16]	; (800258c <BSP_LCD_SelectLayer+0x1c>)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6013      	str	r3, [r2, #0]
} 
 800257e:	bf00      	nop
 8002580:	370c      	adds	r7, #12
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr
 800258a:	bf00      	nop
 800258c:	20000970 	.word	0x20000970

08002590 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8002598:	4b07      	ldr	r3, [pc, #28]	; (80025b8 <BSP_LCD_SetTextColor+0x28>)
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	4907      	ldr	r1, [pc, #28]	; (80025bc <BSP_LCD_SetTextColor+0x2c>)
 800259e:	4613      	mov	r3, r2
 80025a0:	005b      	lsls	r3, r3, #1
 80025a2:	4413      	add	r3, r2
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	440b      	add	r3, r1
 80025a8:	687a      	ldr	r2, [r7, #4]
 80025aa:	601a      	str	r2, [r3, #0]
}
 80025ac:	bf00      	nop
 80025ae:	370c      	adds	r7, #12
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr
 80025b8:	20000970 	.word	0x20000970
 80025bc:	20000974 	.word	0x20000974

080025c0 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 80025c8:	4b08      	ldr	r3, [pc, #32]	; (80025ec <BSP_LCD_SetFont+0x2c>)
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	4908      	ldr	r1, [pc, #32]	; (80025f0 <BSP_LCD_SetFont+0x30>)
 80025ce:	4613      	mov	r3, r2
 80025d0:	005b      	lsls	r3, r3, #1
 80025d2:	4413      	add	r3, r2
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	440b      	add	r3, r1
 80025d8:	3308      	adds	r3, #8
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	601a      	str	r2, [r3, #0]
}
 80025de:	bf00      	nop
 80025e0:	370c      	adds	r7, #12
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	20000970 	.word	0x20000970
 80025f0:	20000974 	.word	0x20000974

080025f4 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 80025f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025f6:	b085      	sub	sp, #20
 80025f8:	af02      	add	r7, sp, #8
 80025fa:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 80025fc:	4b0f      	ldr	r3, [pc, #60]	; (800263c <BSP_LCD_Clear+0x48>)
 80025fe:	681c      	ldr	r4, [r3, #0]
 8002600:	4b0e      	ldr	r3, [pc, #56]	; (800263c <BSP_LCD_Clear+0x48>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a0e      	ldr	r2, [pc, #56]	; (8002640 <BSP_LCD_Clear+0x4c>)
 8002606:	2134      	movs	r1, #52	; 0x34
 8002608:	fb01 f303 	mul.w	r3, r1, r3
 800260c:	4413      	add	r3, r2
 800260e:	335c      	adds	r3, #92	; 0x5c
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	461e      	mov	r6, r3
 8002614:	f7ff ff24 	bl	8002460 <BSP_LCD_GetXSize>
 8002618:	4605      	mov	r5, r0
 800261a:	f7ff ff35 	bl	8002488 <BSP_LCD_GetYSize>
 800261e:	4602      	mov	r2, r0
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	9301      	str	r3, [sp, #4]
 8002624:	2300      	movs	r3, #0
 8002626:	9300      	str	r3, [sp, #0]
 8002628:	4613      	mov	r3, r2
 800262a:	462a      	mov	r2, r5
 800262c:	4631      	mov	r1, r6
 800262e:	4620      	mov	r0, r4
 8002630:	f000 fb28 	bl	8002c84 <LL_FillBuffer>
}
 8002634:	bf00      	nop
 8002636:	370c      	adds	r7, #12
 8002638:	46bd      	mov	sp, r7
 800263a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800263c:	20000970 	.word	0x20000970
 8002640:	20000888 	.word	0x20000888

08002644 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8002644:	b590      	push	{r4, r7, lr}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	4603      	mov	r3, r0
 800264c:	80fb      	strh	r3, [r7, #6]
 800264e:	460b      	mov	r3, r1
 8002650:	80bb      	strh	r3, [r7, #4]
 8002652:	4613      	mov	r3, r2
 8002654:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002656:	4b1b      	ldr	r3, [pc, #108]	; (80026c4 <BSP_LCD_DisplayChar+0x80>)
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	491b      	ldr	r1, [pc, #108]	; (80026c8 <BSP_LCD_DisplayChar+0x84>)
 800265c:	4613      	mov	r3, r2
 800265e:	005b      	lsls	r3, r3, #1
 8002660:	4413      	add	r3, r2
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	440b      	add	r3, r1
 8002666:	3308      	adds	r3, #8
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	6819      	ldr	r1, [r3, #0]
 800266c:	78fb      	ldrb	r3, [r7, #3]
 800266e:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002672:	4b14      	ldr	r3, [pc, #80]	; (80026c4 <BSP_LCD_DisplayChar+0x80>)
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	4c14      	ldr	r4, [pc, #80]	; (80026c8 <BSP_LCD_DisplayChar+0x84>)
 8002678:	4613      	mov	r3, r2
 800267a:	005b      	lsls	r3, r3, #1
 800267c:	4413      	add	r3, r2
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	4423      	add	r3, r4
 8002682:	3308      	adds	r3, #8
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002688:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800268c:	4b0d      	ldr	r3, [pc, #52]	; (80026c4 <BSP_LCD_DisplayChar+0x80>)
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	4c0d      	ldr	r4, [pc, #52]	; (80026c8 <BSP_LCD_DisplayChar+0x84>)
 8002692:	4613      	mov	r3, r2
 8002694:	005b      	lsls	r3, r3, #1
 8002696:	4413      	add	r3, r2
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	4423      	add	r3, r4
 800269c:	3308      	adds	r3, #8
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	889b      	ldrh	r3, [r3, #4]
 80026a2:	3307      	adds	r3, #7
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	da00      	bge.n	80026aa <BSP_LCD_DisplayChar+0x66>
 80026a8:	3307      	adds	r3, #7
 80026aa:	10db      	asrs	r3, r3, #3
 80026ac:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80026b0:	18ca      	adds	r2, r1, r3
 80026b2:	88b9      	ldrh	r1, [r7, #4]
 80026b4:	88fb      	ldrh	r3, [r7, #6]
 80026b6:	4618      	mov	r0, r3
 80026b8:	f000 fa2c 	bl	8002b14 <DrawChar>
}
 80026bc:	bf00      	nop
 80026be:	370c      	adds	r7, #12
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd90      	pop	{r4, r7, pc}
 80026c4:	20000970 	.word	0x20000970
 80026c8:	20000974 	.word	0x20000974

080026cc <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 80026cc:	b5b0      	push	{r4, r5, r7, lr}
 80026ce:	b088      	sub	sp, #32
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	60ba      	str	r2, [r7, #8]
 80026d4:	461a      	mov	r2, r3
 80026d6:	4603      	mov	r3, r0
 80026d8:	81fb      	strh	r3, [r7, #14]
 80026da:	460b      	mov	r3, r1
 80026dc:	81bb      	strh	r3, [r7, #12]
 80026de:	4613      	mov	r3, r2
 80026e0:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 80026e2:	2301      	movs	r3, #1
 80026e4:	83fb      	strh	r3, [r7, #30]
 80026e6:	2300      	movs	r3, #0
 80026e8:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 80026ea:	2300      	movs	r3, #0
 80026ec:	61bb      	str	r3, [r7, #24]
 80026ee:	2300      	movs	r3, #0
 80026f0:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 80026f6:	e002      	b.n	80026fe <BSP_LCD_DisplayStringAt+0x32>
 80026f8:	69bb      	ldr	r3, [r7, #24]
 80026fa:	3301      	adds	r3, #1
 80026fc:	61bb      	str	r3, [r7, #24]
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	1c5a      	adds	r2, r3, #1
 8002702:	617a      	str	r2, [r7, #20]
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d1f6      	bne.n	80026f8 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 800270a:	f7ff fea9 	bl	8002460 <BSP_LCD_GetXSize>
 800270e:	4601      	mov	r1, r0
 8002710:	4b50      	ldr	r3, [pc, #320]	; (8002854 <BSP_LCD_DisplayStringAt+0x188>)
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	4850      	ldr	r0, [pc, #320]	; (8002858 <BSP_LCD_DisplayStringAt+0x18c>)
 8002716:	4613      	mov	r3, r2
 8002718:	005b      	lsls	r3, r3, #1
 800271a:	4413      	add	r3, r2
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	4403      	add	r3, r0
 8002720:	3308      	adds	r3, #8
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	889b      	ldrh	r3, [r3, #4]
 8002726:	fbb1 f3f3 	udiv	r3, r1, r3
 800272a:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 800272c:	79fb      	ldrb	r3, [r7, #7]
 800272e:	2b03      	cmp	r3, #3
 8002730:	d01c      	beq.n	800276c <BSP_LCD_DisplayStringAt+0xa0>
 8002732:	2b03      	cmp	r3, #3
 8002734:	dc33      	bgt.n	800279e <BSP_LCD_DisplayStringAt+0xd2>
 8002736:	2b01      	cmp	r3, #1
 8002738:	d002      	beq.n	8002740 <BSP_LCD_DisplayStringAt+0x74>
 800273a:	2b02      	cmp	r3, #2
 800273c:	d019      	beq.n	8002772 <BSP_LCD_DisplayStringAt+0xa6>
 800273e:	e02e      	b.n	800279e <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8002740:	693a      	ldr	r2, [r7, #16]
 8002742:	69bb      	ldr	r3, [r7, #24]
 8002744:	1ad1      	subs	r1, r2, r3
 8002746:	4b43      	ldr	r3, [pc, #268]	; (8002854 <BSP_LCD_DisplayStringAt+0x188>)
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	4843      	ldr	r0, [pc, #268]	; (8002858 <BSP_LCD_DisplayStringAt+0x18c>)
 800274c:	4613      	mov	r3, r2
 800274e:	005b      	lsls	r3, r3, #1
 8002750:	4413      	add	r3, r2
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	4403      	add	r3, r0
 8002756:	3308      	adds	r3, #8
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	889b      	ldrh	r3, [r3, #4]
 800275c:	fb01 f303 	mul.w	r3, r1, r3
 8002760:	085b      	lsrs	r3, r3, #1
 8002762:	b29a      	uxth	r2, r3
 8002764:	89fb      	ldrh	r3, [r7, #14]
 8002766:	4413      	add	r3, r2
 8002768:	83fb      	strh	r3, [r7, #30]
      break;
 800276a:	e01b      	b.n	80027a4 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 800276c:	89fb      	ldrh	r3, [r7, #14]
 800276e:	83fb      	strh	r3, [r7, #30]
      break;
 8002770:	e018      	b.n	80027a4 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8002772:	693a      	ldr	r2, [r7, #16]
 8002774:	69bb      	ldr	r3, [r7, #24]
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	b299      	uxth	r1, r3
 800277a:	4b36      	ldr	r3, [pc, #216]	; (8002854 <BSP_LCD_DisplayStringAt+0x188>)
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	4836      	ldr	r0, [pc, #216]	; (8002858 <BSP_LCD_DisplayStringAt+0x18c>)
 8002780:	4613      	mov	r3, r2
 8002782:	005b      	lsls	r3, r3, #1
 8002784:	4413      	add	r3, r2
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	4403      	add	r3, r0
 800278a:	3308      	adds	r3, #8
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	889b      	ldrh	r3, [r3, #4]
 8002790:	fb11 f303 	smulbb	r3, r1, r3
 8002794:	b29a      	uxth	r2, r3
 8002796:	89fb      	ldrh	r3, [r7, #14]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	83fb      	strh	r3, [r7, #30]
      break;
 800279c:	e002      	b.n	80027a4 <BSP_LCD_DisplayStringAt+0xd8>
    }    
  default:
    {
      ref_column = Xpos;
 800279e:	89fb      	ldrh	r3, [r7, #14]
 80027a0:	83fb      	strh	r3, [r7, #30]
      break;
 80027a2:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 80027a4:	8bfb      	ldrh	r3, [r7, #30]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d003      	beq.n	80027b2 <BSP_LCD_DisplayStringAt+0xe6>
 80027aa:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	da1d      	bge.n	80027ee <BSP_LCD_DisplayStringAt+0x122>
  {
    ref_column = 1;
 80027b2:	2301      	movs	r3, #1
 80027b4:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80027b6:	e01a      	b.n	80027ee <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	781a      	ldrb	r2, [r3, #0]
 80027bc:	89b9      	ldrh	r1, [r7, #12]
 80027be:	8bfb      	ldrh	r3, [r7, #30]
 80027c0:	4618      	mov	r0, r3
 80027c2:	f7ff ff3f 	bl	8002644 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 80027c6:	4b23      	ldr	r3, [pc, #140]	; (8002854 <BSP_LCD_DisplayStringAt+0x188>)
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	4923      	ldr	r1, [pc, #140]	; (8002858 <BSP_LCD_DisplayStringAt+0x18c>)
 80027cc:	4613      	mov	r3, r2
 80027ce:	005b      	lsls	r3, r3, #1
 80027d0:	4413      	add	r3, r2
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	440b      	add	r3, r1
 80027d6:	3308      	adds	r3, #8
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	889a      	ldrh	r2, [r3, #4]
 80027dc:	8bfb      	ldrh	r3, [r7, #30]
 80027de:	4413      	add	r3, r2
 80027e0:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	3301      	adds	r3, #1
 80027e6:	60bb      	str	r3, [r7, #8]
    i++;
 80027e8:	8bbb      	ldrh	r3, [r7, #28]
 80027ea:	3301      	adds	r3, #1
 80027ec:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	bf14      	ite	ne
 80027f6:	2301      	movne	r3, #1
 80027f8:	2300      	moveq	r3, #0
 80027fa:	b2dc      	uxtb	r4, r3
 80027fc:	f7ff fe30 	bl	8002460 <BSP_LCD_GetXSize>
 8002800:	8bb9      	ldrh	r1, [r7, #28]
 8002802:	4b14      	ldr	r3, [pc, #80]	; (8002854 <BSP_LCD_DisplayStringAt+0x188>)
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	4d14      	ldr	r5, [pc, #80]	; (8002858 <BSP_LCD_DisplayStringAt+0x18c>)
 8002808:	4613      	mov	r3, r2
 800280a:	005b      	lsls	r3, r3, #1
 800280c:	4413      	add	r3, r2
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	442b      	add	r3, r5
 8002812:	3308      	adds	r3, #8
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	889b      	ldrh	r3, [r3, #4]
 8002818:	fb01 f303 	mul.w	r3, r1, r3
 800281c:	1ac3      	subs	r3, r0, r3
 800281e:	b299      	uxth	r1, r3
 8002820:	4b0c      	ldr	r3, [pc, #48]	; (8002854 <BSP_LCD_DisplayStringAt+0x188>)
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	480c      	ldr	r0, [pc, #48]	; (8002858 <BSP_LCD_DisplayStringAt+0x18c>)
 8002826:	4613      	mov	r3, r2
 8002828:	005b      	lsls	r3, r3, #1
 800282a:	4413      	add	r3, r2
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	4403      	add	r3, r0
 8002830:	3308      	adds	r3, #8
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	889b      	ldrh	r3, [r3, #4]
 8002836:	4299      	cmp	r1, r3
 8002838:	bf2c      	ite	cs
 800283a:	2301      	movcs	r3, #1
 800283c:	2300      	movcc	r3, #0
 800283e:	b2db      	uxtb	r3, r3
 8002840:	4023      	ands	r3, r4
 8002842:	b2db      	uxtb	r3, r3
 8002844:	2b00      	cmp	r3, #0
 8002846:	d1b7      	bne.n	80027b8 <BSP_LCD_DisplayStringAt+0xec>
  }  
}
 8002848:	bf00      	nop
 800284a:	bf00      	nop
 800284c:	3720      	adds	r7, #32
 800284e:	46bd      	mov	sp, r7
 8002850:	bdb0      	pop	{r4, r5, r7, pc}
 8002852:	bf00      	nop
 8002854:	20000970 	.word	0x20000970
 8002858:	20000974 	.word	0x20000974

0800285c <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 800285c:	b5b0      	push	{r4, r5, r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0
 8002862:	4603      	mov	r3, r0
 8002864:	603a      	str	r2, [r7, #0]
 8002866:	80fb      	strh	r3, [r7, #6]
 8002868:	460b      	mov	r3, r1
 800286a:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800286c:	4b1d      	ldr	r3, [pc, #116]	; (80028e4 <BSP_LCD_DrawPixel+0x88>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a1d      	ldr	r2, [pc, #116]	; (80028e8 <BSP_LCD_DrawPixel+0x8c>)
 8002872:	2134      	movs	r1, #52	; 0x34
 8002874:	fb01 f303 	mul.w	r3, r1, r3
 8002878:	4413      	add	r3, r2
 800287a:	3348      	adds	r3, #72	; 0x48
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	2b02      	cmp	r3, #2
 8002880:	d116      	bne.n	80028b0 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8002882:	4b18      	ldr	r3, [pc, #96]	; (80028e4 <BSP_LCD_DrawPixel+0x88>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a18      	ldr	r2, [pc, #96]	; (80028e8 <BSP_LCD_DrawPixel+0x8c>)
 8002888:	2134      	movs	r1, #52	; 0x34
 800288a:	fb01 f303 	mul.w	r3, r1, r3
 800288e:	4413      	add	r3, r2
 8002890:	335c      	adds	r3, #92	; 0x5c
 8002892:	681c      	ldr	r4, [r3, #0]
 8002894:	88bd      	ldrh	r5, [r7, #4]
 8002896:	f7ff fde3 	bl	8002460 <BSP_LCD_GetXSize>
 800289a:	4603      	mov	r3, r0
 800289c:	fb03 f205 	mul.w	r2, r3, r5
 80028a0:	88fb      	ldrh	r3, [r7, #6]
 80028a2:	4413      	add	r3, r2
 80028a4:	005b      	lsls	r3, r3, #1
 80028a6:	4423      	add	r3, r4
 80028a8:	683a      	ldr	r2, [r7, #0]
 80028aa:	b292      	uxth	r2, r2
 80028ac:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 80028ae:	e015      	b.n	80028dc <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 80028b0:	4b0c      	ldr	r3, [pc, #48]	; (80028e4 <BSP_LCD_DrawPixel+0x88>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a0c      	ldr	r2, [pc, #48]	; (80028e8 <BSP_LCD_DrawPixel+0x8c>)
 80028b6:	2134      	movs	r1, #52	; 0x34
 80028b8:	fb01 f303 	mul.w	r3, r1, r3
 80028bc:	4413      	add	r3, r2
 80028be:	335c      	adds	r3, #92	; 0x5c
 80028c0:	681c      	ldr	r4, [r3, #0]
 80028c2:	88bd      	ldrh	r5, [r7, #4]
 80028c4:	f7ff fdcc 	bl	8002460 <BSP_LCD_GetXSize>
 80028c8:	4603      	mov	r3, r0
 80028ca:	fb03 f205 	mul.w	r2, r3, r5
 80028ce:	88fb      	ldrh	r3, [r7, #6]
 80028d0:	4413      	add	r3, r2
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	4423      	add	r3, r4
 80028d6:	461a      	mov	r2, r3
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	6013      	str	r3, [r2, #0]
}
 80028dc:	bf00      	nop
 80028de:	3708      	adds	r7, #8
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bdb0      	pop	{r4, r5, r7, pc}
 80028e4:	20000970 	.word	0x20000970
 80028e8:	20000888 	.word	0x20000888

080028ec <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 80028f0:	4b0a      	ldr	r3, [pc, #40]	; (800291c <BSP_LCD_DisplayOn+0x30>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	699a      	ldr	r2, [r3, #24]
 80028f6:	4b09      	ldr	r3, [pc, #36]	; (800291c <BSP_LCD_DisplayOn+0x30>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f042 0201 	orr.w	r2, r2, #1
 80028fe:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8002900:	2201      	movs	r2, #1
 8002902:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002906:	4806      	ldr	r0, [pc, #24]	; (8002920 <BSP_LCD_DisplayOn+0x34>)
 8002908:	f003 fb14 	bl	8005f34 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 800290c:	2201      	movs	r2, #1
 800290e:	2108      	movs	r1, #8
 8002910:	4804      	ldr	r0, [pc, #16]	; (8002924 <BSP_LCD_DisplayOn+0x38>)
 8002912:	f003 fb0f 	bl	8005f34 <HAL_GPIO_WritePin>
}
 8002916:	bf00      	nop
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	20000888 	.word	0x20000888
 8002920:	40022000 	.word	0x40022000
 8002924:	40022800 	.word	0x40022800

08002928 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b090      	sub	sp, #64	; 0x40
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8002932:	4b64      	ldr	r3, [pc, #400]	; (8002ac4 <BSP_LCD_MspInit+0x19c>)
 8002934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002936:	4a63      	ldr	r2, [pc, #396]	; (8002ac4 <BSP_LCD_MspInit+0x19c>)
 8002938:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800293c:	6453      	str	r3, [r2, #68]	; 0x44
 800293e:	4b61      	ldr	r3, [pc, #388]	; (8002ac4 <BSP_LCD_MspInit+0x19c>)
 8002940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002942:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002946:	62bb      	str	r3, [r7, #40]	; 0x28
 8002948:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 800294a:	4b5e      	ldr	r3, [pc, #376]	; (8002ac4 <BSP_LCD_MspInit+0x19c>)
 800294c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800294e:	4a5d      	ldr	r2, [pc, #372]	; (8002ac4 <BSP_LCD_MspInit+0x19c>)
 8002950:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002954:	6313      	str	r3, [r2, #48]	; 0x30
 8002956:	4b5b      	ldr	r3, [pc, #364]	; (8002ac4 <BSP_LCD_MspInit+0x19c>)
 8002958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800295e:	627b      	str	r3, [r7, #36]	; 0x24
 8002960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002962:	4b58      	ldr	r3, [pc, #352]	; (8002ac4 <BSP_LCD_MspInit+0x19c>)
 8002964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002966:	4a57      	ldr	r2, [pc, #348]	; (8002ac4 <BSP_LCD_MspInit+0x19c>)
 8002968:	f043 0310 	orr.w	r3, r3, #16
 800296c:	6313      	str	r3, [r2, #48]	; 0x30
 800296e:	4b55      	ldr	r3, [pc, #340]	; (8002ac4 <BSP_LCD_MspInit+0x19c>)
 8002970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002972:	f003 0310 	and.w	r3, r3, #16
 8002976:	623b      	str	r3, [r7, #32]
 8002978:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800297a:	4b52      	ldr	r3, [pc, #328]	; (8002ac4 <BSP_LCD_MspInit+0x19c>)
 800297c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297e:	4a51      	ldr	r2, [pc, #324]	; (8002ac4 <BSP_LCD_MspInit+0x19c>)
 8002980:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002984:	6313      	str	r3, [r2, #48]	; 0x30
 8002986:	4b4f      	ldr	r3, [pc, #316]	; (8002ac4 <BSP_LCD_MspInit+0x19c>)
 8002988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800298e:	61fb      	str	r3, [r7, #28]
 8002990:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002992:	4b4c      	ldr	r3, [pc, #304]	; (8002ac4 <BSP_LCD_MspInit+0x19c>)
 8002994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002996:	4a4b      	ldr	r2, [pc, #300]	; (8002ac4 <BSP_LCD_MspInit+0x19c>)
 8002998:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800299c:	6313      	str	r3, [r2, #48]	; 0x30
 800299e:	4b49      	ldr	r3, [pc, #292]	; (8002ac4 <BSP_LCD_MspInit+0x19c>)
 80029a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029a6:	61bb      	str	r3, [r7, #24]
 80029a8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80029aa:	4b46      	ldr	r3, [pc, #280]	; (8002ac4 <BSP_LCD_MspInit+0x19c>)
 80029ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ae:	4a45      	ldr	r2, [pc, #276]	; (8002ac4 <BSP_LCD_MspInit+0x19c>)
 80029b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029b4:	6313      	str	r3, [r2, #48]	; 0x30
 80029b6:	4b43      	ldr	r3, [pc, #268]	; (8002ac4 <BSP_LCD_MspInit+0x19c>)
 80029b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029be:	617b      	str	r3, [r7, #20]
 80029c0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80029c2:	4b40      	ldr	r3, [pc, #256]	; (8002ac4 <BSP_LCD_MspInit+0x19c>)
 80029c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c6:	4a3f      	ldr	r2, [pc, #252]	; (8002ac4 <BSP_LCD_MspInit+0x19c>)
 80029c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029cc:	6313      	str	r3, [r2, #48]	; 0x30
 80029ce:	4b3d      	ldr	r3, [pc, #244]	; (8002ac4 <BSP_LCD_MspInit+0x19c>)
 80029d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029d6:	613b      	str	r3, [r7, #16]
 80029d8:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 80029da:	4b3a      	ldr	r3, [pc, #232]	; (8002ac4 <BSP_LCD_MspInit+0x19c>)
 80029dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029de:	4a39      	ldr	r2, [pc, #228]	; (8002ac4 <BSP_LCD_MspInit+0x19c>)
 80029e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029e4:	6313      	str	r3, [r2, #48]	; 0x30
 80029e6:	4b37      	ldr	r3, [pc, #220]	; (8002ac4 <BSP_LCD_MspInit+0x19c>)
 80029e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ee:	60fb      	str	r3, [r7, #12]
 80029f0:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 80029f2:	4b34      	ldr	r3, [pc, #208]	; (8002ac4 <BSP_LCD_MspInit+0x19c>)
 80029f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f6:	4a33      	ldr	r2, [pc, #204]	; (8002ac4 <BSP_LCD_MspInit+0x19c>)
 80029f8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029fc:	6313      	str	r3, [r2, #48]	; 0x30
 80029fe:	4b31      	ldr	r3, [pc, #196]	; (8002ac4 <BSP_LCD_MspInit+0x19c>)
 8002a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a06:	60bb      	str	r3, [r7, #8]
 8002a08:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 8002a0a:	2310      	movs	r3, #16
 8002a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002a0e:	2302      	movs	r3, #2
 8002a10:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8002a12:	2300      	movs	r3, #0
 8002a14:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8002a16:	2302      	movs	r3, #2
 8002a18:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8002a1a:	230e      	movs	r3, #14
 8002a1c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8002a1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a22:	4619      	mov	r1, r3
 8002a24:	4828      	ldr	r0, [pc, #160]	; (8002ac8 <BSP_LCD_MspInit+0x1a0>)
 8002a26:	f002 ffcd 	bl	80059c4 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8002a2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002a30:	2302      	movs	r3, #2
 8002a32:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8002a34:	2309      	movs	r3, #9
 8002a36:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8002a38:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	4823      	ldr	r0, [pc, #140]	; (8002acc <BSP_LCD_MspInit+0x1a4>)
 8002a40:	f002 ffc0 	bl	80059c4 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8002a44:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8002a48:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002a4a:	2302      	movs	r3, #2
 8002a4c:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8002a4e:	230e      	movs	r3, #14
 8002a50:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8002a52:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a56:	4619      	mov	r1, r3
 8002a58:	481d      	ldr	r0, [pc, #116]	; (8002ad0 <BSP_LCD_MspInit+0x1a8>)
 8002a5a:	f002 ffb3 	bl	80059c4 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8002a5e:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8002a62:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002a64:	2302      	movs	r3, #2
 8002a66:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8002a68:	230e      	movs	r3, #14
 8002a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8002a6c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a70:	4619      	mov	r1, r3
 8002a72:	4818      	ldr	r0, [pc, #96]	; (8002ad4 <BSP_LCD_MspInit+0x1ac>)
 8002a74:	f002 ffa6 	bl	80059c4 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8002a78:	23f7      	movs	r3, #247	; 0xf7
 8002a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002a7c:	2302      	movs	r3, #2
 8002a7e:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8002a80:	230e      	movs	r3, #14
 8002a82:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8002a84:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a88:	4619      	mov	r1, r3
 8002a8a:	4813      	ldr	r0, [pc, #76]	; (8002ad8 <BSP_LCD_MspInit+0x1b0>)
 8002a8c:	f002 ff9a 	bl	80059c4 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8002a90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a94:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8002a96:	2301      	movs	r3, #1
 8002a98:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8002a9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	480b      	ldr	r0, [pc, #44]	; (8002ad0 <BSP_LCD_MspInit+0x1a8>)
 8002aa2:	f002 ff8f 	bl	80059c4 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8002aa6:	2308      	movs	r3, #8
 8002aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8002aae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	4808      	ldr	r0, [pc, #32]	; (8002ad8 <BSP_LCD_MspInit+0x1b0>)
 8002ab6:	f002 ff85 	bl	80059c4 <HAL_GPIO_Init>
}
 8002aba:	bf00      	nop
 8002abc:	3740      	adds	r7, #64	; 0x40
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	40023800 	.word	0x40023800
 8002ac8:	40021000 	.word	0x40021000
 8002acc:	40021800 	.word	0x40021800
 8002ad0:	40022000 	.word	0x40022000
 8002ad4:	40022400 	.word	0x40022400
 8002ad8:	40022800 	.word	0x40022800

08002adc <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b082      	sub	sp, #8
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002ae6:	4b0a      	ldr	r3, [pc, #40]	; (8002b10 <BSP_LCD_ClockConfig+0x34>)
 8002ae8:	2208      	movs	r2, #8
 8002aea:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8002aec:	4b08      	ldr	r3, [pc, #32]	; (8002b10 <BSP_LCD_ClockConfig+0x34>)
 8002aee:	22c0      	movs	r2, #192	; 0xc0
 8002af0:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8002af2:	4b07      	ldr	r3, [pc, #28]	; (8002b10 <BSP_LCD_ClockConfig+0x34>)
 8002af4:	2205      	movs	r2, #5
 8002af6:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8002af8:	4b05      	ldr	r3, [pc, #20]	; (8002b10 <BSP_LCD_ClockConfig+0x34>)
 8002afa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002afe:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8002b00:	4803      	ldr	r0, [pc, #12]	; (8002b10 <BSP_LCD_ClockConfig+0x34>)
 8002b02:	f005 fccf 	bl	80084a4 <HAL_RCCEx_PeriphCLKConfig>
}
 8002b06:	bf00      	nop
 8002b08:	3708      	adds	r7, #8
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	2000098c 	.word	0x2000098c

08002b14 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b088      	sub	sp, #32
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	603a      	str	r2, [r7, #0]
 8002b1e:	80fb      	strh	r3, [r7, #6]
 8002b20:	460b      	mov	r3, r1
 8002b22:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8002b24:	2300      	movs	r3, #0
 8002b26:	61fb      	str	r3, [r7, #28]
 8002b28:	2300      	movs	r3, #0
 8002b2a:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 8002b2c:	4b53      	ldr	r3, [pc, #332]	; (8002c7c <DrawChar+0x168>)
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	4953      	ldr	r1, [pc, #332]	; (8002c80 <DrawChar+0x16c>)
 8002b32:	4613      	mov	r3, r2
 8002b34:	005b      	lsls	r3, r3, #1
 8002b36:	4413      	add	r3, r2
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	440b      	add	r3, r1
 8002b3c:	3308      	adds	r3, #8
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	88db      	ldrh	r3, [r3, #6]
 8002b42:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8002b44:	4b4d      	ldr	r3, [pc, #308]	; (8002c7c <DrawChar+0x168>)
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	494d      	ldr	r1, [pc, #308]	; (8002c80 <DrawChar+0x16c>)
 8002b4a:	4613      	mov	r3, r2
 8002b4c:	005b      	lsls	r3, r3, #1
 8002b4e:	4413      	add	r3, r2
 8002b50:	009b      	lsls	r3, r3, #2
 8002b52:	440b      	add	r3, r1
 8002b54:	3308      	adds	r3, #8
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	889b      	ldrh	r3, [r3, #4]
 8002b5a:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 8002b5c:	8a3b      	ldrh	r3, [r7, #16]
 8002b5e:	3307      	adds	r3, #7
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	da00      	bge.n	8002b66 <DrawChar+0x52>
 8002b64:	3307      	adds	r3, #7
 8002b66:	10db      	asrs	r3, r3, #3
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	00db      	lsls	r3, r3, #3
 8002b6c:	b2da      	uxtb	r2, r3
 8002b6e:	8a3b      	ldrh	r3, [r7, #16]
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	1ad3      	subs	r3, r2, r3
 8002b74:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 8002b76:	2300      	movs	r3, #0
 8002b78:	61fb      	str	r3, [r7, #28]
 8002b7a:	e076      	b.n	8002c6a <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8002b7c:	8a3b      	ldrh	r3, [r7, #16]
 8002b7e:	3307      	adds	r3, #7
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	da00      	bge.n	8002b86 <DrawChar+0x72>
 8002b84:	3307      	adds	r3, #7
 8002b86:	10db      	asrs	r3, r3, #3
 8002b88:	461a      	mov	r2, r3
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	fb02 f303 	mul.w	r3, r2, r3
 8002b90:	683a      	ldr	r2, [r7, #0]
 8002b92:	4413      	add	r3, r2
 8002b94:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 8002b96:	8a3b      	ldrh	r3, [r7, #16]
 8002b98:	3307      	adds	r3, #7
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	da00      	bge.n	8002ba0 <DrawChar+0x8c>
 8002b9e:	3307      	adds	r3, #7
 8002ba0:	10db      	asrs	r3, r3, #3
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d002      	beq.n	8002bac <DrawChar+0x98>
 8002ba6:	2b02      	cmp	r3, #2
 8002ba8:	d004      	beq.n	8002bb4 <DrawChar+0xa0>
 8002baa:	e00c      	b.n	8002bc6 <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	617b      	str	r3, [r7, #20]
      break;
 8002bb2:	e016      	b.n	8002be2 <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	021b      	lsls	r3, r3, #8
 8002bba:	68ba      	ldr	r2, [r7, #8]
 8002bbc:	3201      	adds	r2, #1
 8002bbe:	7812      	ldrb	r2, [r2, #0]
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	617b      	str	r3, [r7, #20]
      break;
 8002bc4:	e00d      	b.n	8002be2 <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	041a      	lsls	r2, r3, #16
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	3301      	adds	r3, #1
 8002bd0:	781b      	ldrb	r3, [r3, #0]
 8002bd2:	021b      	lsls	r3, r3, #8
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	68ba      	ldr	r2, [r7, #8]
 8002bd8:	3202      	adds	r2, #2
 8002bda:	7812      	ldrb	r2, [r2, #0]
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	617b      	str	r3, [r7, #20]
      break;
 8002be0:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 8002be2:	2300      	movs	r3, #0
 8002be4:	61bb      	str	r3, [r7, #24]
 8002be6:	e036      	b.n	8002c56 <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8002be8:	8a3a      	ldrh	r2, [r7, #16]
 8002bea:	69bb      	ldr	r3, [r7, #24]
 8002bec:	1ad2      	subs	r2, r2, r3
 8002bee:	7bfb      	ldrb	r3, [r7, #15]
 8002bf0:	4413      	add	r3, r2
 8002bf2:	3b01      	subs	r3, #1
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfa:	461a      	mov	r2, r3
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	4013      	ands	r3, r2
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d012      	beq.n	8002c2a <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8002c04:	69bb      	ldr	r3, [r7, #24]
 8002c06:	b29a      	uxth	r2, r3
 8002c08:	88fb      	ldrh	r3, [r7, #6]
 8002c0a:	4413      	add	r3, r2
 8002c0c:	b298      	uxth	r0, r3
 8002c0e:	4b1b      	ldr	r3, [pc, #108]	; (8002c7c <DrawChar+0x168>)
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	491b      	ldr	r1, [pc, #108]	; (8002c80 <DrawChar+0x16c>)
 8002c14:	4613      	mov	r3, r2
 8002c16:	005b      	lsls	r3, r3, #1
 8002c18:	4413      	add	r3, r2
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	440b      	add	r3, r1
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	88bb      	ldrh	r3, [r7, #4]
 8002c22:	4619      	mov	r1, r3
 8002c24:	f7ff fe1a 	bl	800285c <BSP_LCD_DrawPixel>
 8002c28:	e012      	b.n	8002c50 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8002c2a:	69bb      	ldr	r3, [r7, #24]
 8002c2c:	b29a      	uxth	r2, r3
 8002c2e:	88fb      	ldrh	r3, [r7, #6]
 8002c30:	4413      	add	r3, r2
 8002c32:	b298      	uxth	r0, r3
 8002c34:	4b11      	ldr	r3, [pc, #68]	; (8002c7c <DrawChar+0x168>)
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	4911      	ldr	r1, [pc, #68]	; (8002c80 <DrawChar+0x16c>)
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	005b      	lsls	r3, r3, #1
 8002c3e:	4413      	add	r3, r2
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	440b      	add	r3, r1
 8002c44:	3304      	adds	r3, #4
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	88bb      	ldrh	r3, [r7, #4]
 8002c4a:	4619      	mov	r1, r3
 8002c4c:	f7ff fe06 	bl	800285c <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8002c50:	69bb      	ldr	r3, [r7, #24]
 8002c52:	3301      	adds	r3, #1
 8002c54:	61bb      	str	r3, [r7, #24]
 8002c56:	8a3b      	ldrh	r3, [r7, #16]
 8002c58:	69ba      	ldr	r2, [r7, #24]
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d3c4      	bcc.n	8002be8 <DrawChar+0xd4>
      } 
    }
    Ypos++;
 8002c5e:	88bb      	ldrh	r3, [r7, #4]
 8002c60:	3301      	adds	r3, #1
 8002c62:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	3301      	adds	r3, #1
 8002c68:	61fb      	str	r3, [r7, #28]
 8002c6a:	8a7b      	ldrh	r3, [r7, #18]
 8002c6c:	69fa      	ldr	r2, [r7, #28]
 8002c6e:	429a      	cmp	r2, r3
 8002c70:	d384      	bcc.n	8002b7c <DrawChar+0x68>
  }
}
 8002c72:	bf00      	nop
 8002c74:	bf00      	nop
 8002c76:	3720      	adds	r7, #32
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	20000970 	.word	0x20000970
 8002c80:	20000974 	.word	0x20000974

08002c84 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b086      	sub	sp, #24
 8002c88:	af02      	add	r7, sp, #8
 8002c8a:	60f8      	str	r0, [r7, #12]
 8002c8c:	60b9      	str	r1, [r7, #8]
 8002c8e:	607a      	str	r2, [r7, #4]
 8002c90:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8002c92:	4b1e      	ldr	r3, [pc, #120]	; (8002d0c <LL_FillBuffer+0x88>)
 8002c94:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002c98:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002c9a:	4b1d      	ldr	r3, [pc, #116]	; (8002d10 <LL_FillBuffer+0x8c>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a1d      	ldr	r2, [pc, #116]	; (8002d14 <LL_FillBuffer+0x90>)
 8002ca0:	2134      	movs	r1, #52	; 0x34
 8002ca2:	fb01 f303 	mul.w	r3, r1, r3
 8002ca6:	4413      	add	r3, r2
 8002ca8:	3348      	adds	r3, #72	; 0x48
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2b02      	cmp	r3, #2
 8002cae:	d103      	bne.n	8002cb8 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8002cb0:	4b16      	ldr	r3, [pc, #88]	; (8002d0c <LL_FillBuffer+0x88>)
 8002cb2:	2202      	movs	r2, #2
 8002cb4:	609a      	str	r2, [r3, #8]
 8002cb6:	e002      	b.n	8002cbe <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8002cb8:	4b14      	ldr	r3, [pc, #80]	; (8002d0c <LL_FillBuffer+0x88>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8002cbe:	4a13      	ldr	r2, [pc, #76]	; (8002d0c <LL_FillBuffer+0x88>)
 8002cc0:	69bb      	ldr	r3, [r7, #24]
 8002cc2:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 8002cc4:	4b11      	ldr	r3, [pc, #68]	; (8002d0c <LL_FillBuffer+0x88>)
 8002cc6:	4a14      	ldr	r2, [pc, #80]	; (8002d18 <LL_FillBuffer+0x94>)
 8002cc8:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8002cca:	4810      	ldr	r0, [pc, #64]	; (8002d0c <LL_FillBuffer+0x88>)
 8002ccc:	f001 fafc 	bl	80042c8 <HAL_DMA2D_Init>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d115      	bne.n	8002d02 <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 8002cd6:	68f9      	ldr	r1, [r7, #12]
 8002cd8:	480c      	ldr	r0, [pc, #48]	; (8002d0c <LL_FillBuffer+0x88>)
 8002cda:	f001 fc53 	bl	8004584 <HAL_DMA2D_ConfigLayer>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d10e      	bne.n	8002d02 <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8002ce4:	68ba      	ldr	r2, [r7, #8]
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	9300      	str	r3, [sp, #0]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	69f9      	ldr	r1, [r7, #28]
 8002cee:	4807      	ldr	r0, [pc, #28]	; (8002d0c <LL_FillBuffer+0x88>)
 8002cf0:	f001 fb34 	bl	800435c <HAL_DMA2D_Start>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d103      	bne.n	8002d02 <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8002cfa:	210a      	movs	r1, #10
 8002cfc:	4803      	ldr	r0, [pc, #12]	; (8002d0c <LL_FillBuffer+0x88>)
 8002cfe:	f001 fb58 	bl	80043b2 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8002d02:	bf00      	nop
 8002d04:	3710      	adds	r7, #16
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	20000930 	.word	0x20000930
 8002d10:	20000970 	.word	0x20000970
 8002d14:	20000888 	.word	0x20000888
 8002d18:	4002b000 	.word	0x4002b000

08002d1c <WDA_LCD_DrawBitmap>:
 * @param: ySize size of the image (in pixels)
 * @param: ColorMode is the color format of the image data (pSrc).
 * @retval None
 */
void WDA_LCD_DrawBitmap(const void *pSrc, uint32_t xPos, uint32_t yPos, uint32_t xSize, uint32_t ySize, uint32_t ColorMode)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b088      	sub	sp, #32
 8002d20:	af02      	add	r7, sp, #8
 8002d22:	60f8      	str	r0, [r7, #12]
 8002d24:	60b9      	str	r1, [r7, #8]
 8002d26:	607a      	str	r2, [r7, #4]
 8002d28:	603b      	str	r3, [r7, #0]


	uint32_t address = hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (((480*yPos) + xPos)*(4));
 8002d2a:	4b28      	ldr	r3, [pc, #160]	; (8002dcc <WDA_LCD_DrawBitmap+0xb0>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a28      	ldr	r2, [pc, #160]	; (8002dd0 <WDA_LCD_DrawBitmap+0xb4>)
 8002d30:	2134      	movs	r1, #52	; 0x34
 8002d32:	fb01 f303 	mul.w	r3, r1, r3
 8002d36:	4413      	add	r3, r2
 8002d38:	335c      	adds	r3, #92	; 0x5c
 8002d3a:	6819      	ldr	r1, [r3, #0]
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	4613      	mov	r3, r2
 8002d40:	011b      	lsls	r3, r3, #4
 8002d42:	1a9b      	subs	r3, r3, r2
 8002d44:	015b      	lsls	r3, r3, #5
 8002d46:	461a      	mov	r2, r3
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	4413      	add	r3, r2
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	440b      	add	r3, r1
 8002d50:	617b      	str	r3, [r7, #20]
	void *pDst = (void *)address;
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	613b      	str	r3, [r7, #16]

  /* Configure the DMA2D Mode, Color Mode and output offset */
	hDma2dHandler.Init.Mode         = DMA2D_M2M_PFC;
 8002d56:	4b1f      	ldr	r3, [pc, #124]	; (8002dd4 <WDA_LCD_DrawBitmap+0xb8>)
 8002d58:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002d5c:	605a      	str	r2, [r3, #4]
	hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8002d5e:	4b1d      	ldr	r3, [pc, #116]	; (8002dd4 <WDA_LCD_DrawBitmap+0xb8>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	609a      	str	r2, [r3, #8]
	hDma2dHandler.Init.OutputOffset = 480-xSize;
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	f5c3 73f0 	rsb	r3, r3, #480	; 0x1e0
 8002d6a:	4a1a      	ldr	r2, [pc, #104]	; (8002dd4 <WDA_LCD_DrawBitmap+0xb8>)
 8002d6c:	60d3      	str	r3, [r2, #12]

  /* Foreground Configuration */
	hDma2dHandler.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8002d6e:	4b19      	ldr	r3, [pc, #100]	; (8002dd4 <WDA_LCD_DrawBitmap+0xb8>)
 8002d70:	2200      	movs	r2, #0
 8002d72:	631a      	str	r2, [r3, #48]	; 0x30
	hDma2dHandler.LayerCfg[1].InputAlpha = 0xFF;
 8002d74:	4b17      	ldr	r3, [pc, #92]	; (8002dd4 <WDA_LCD_DrawBitmap+0xb8>)
 8002d76:	22ff      	movs	r2, #255	; 0xff
 8002d78:	635a      	str	r2, [r3, #52]	; 0x34
	hDma2dHandler.LayerCfg[1].InputColorMode = ColorMode;
 8002d7a:	4a16      	ldr	r2, [pc, #88]	; (8002dd4 <WDA_LCD_DrawBitmap+0xb8>)
 8002d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7e:	62d3      	str	r3, [r2, #44]	; 0x2c
	hDma2dHandler.LayerCfg[1].InputOffset = 0;
 8002d80:	4b14      	ldr	r3, [pc, #80]	; (8002dd4 <WDA_LCD_DrawBitmap+0xb8>)
 8002d82:	2200      	movs	r2, #0
 8002d84:	629a      	str	r2, [r3, #40]	; 0x28

	hDma2dHandler.Instance = DMA2D;
 8002d86:	4b13      	ldr	r3, [pc, #76]	; (8002dd4 <WDA_LCD_DrawBitmap+0xb8>)
 8002d88:	4a13      	ldr	r2, [pc, #76]	; (8002dd8 <WDA_LCD_DrawBitmap+0xbc>)
 8002d8a:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK)
 8002d8c:	4811      	ldr	r0, [pc, #68]	; (8002dd4 <WDA_LCD_DrawBitmap+0xb8>)
 8002d8e:	f001 fa9b 	bl	80042c8 <HAL_DMA2D_Init>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d115      	bne.n	8002dc4 <WDA_LCD_DrawBitmap+0xa8>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, 1) == HAL_OK)
 8002d98:	2101      	movs	r1, #1
 8002d9a:	480e      	ldr	r0, [pc, #56]	; (8002dd4 <WDA_LCD_DrawBitmap+0xb8>)
 8002d9c:	f001 fbf2 	bl	8004584 <HAL_DMA2D_ConfigLayer>
 8002da0:	4603      	mov	r3, r0
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d10e      	bne.n	8002dc4 <WDA_LCD_DrawBitmap+0xa8>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, (uint32_t)pSrc, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8002da6:	68f9      	ldr	r1, [r7, #12]
 8002da8:	693a      	ldr	r2, [r7, #16]
 8002daa:	6a3b      	ldr	r3, [r7, #32]
 8002dac:	9300      	str	r3, [sp, #0]
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	4808      	ldr	r0, [pc, #32]	; (8002dd4 <WDA_LCD_DrawBitmap+0xb8>)
 8002db2:	f001 fad3 	bl	800435c <HAL_DMA2D_Start>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d103      	bne.n	8002dc4 <WDA_LCD_DrawBitmap+0xa8>
      {
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8002dbc:	210a      	movs	r1, #10
 8002dbe:	4805      	ldr	r0, [pc, #20]	; (8002dd4 <WDA_LCD_DrawBitmap+0xb8>)
 8002dc0:	f001 faf7 	bl	80043b2 <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 8002dc4:	bf00      	nop
 8002dc6:	3718      	adds	r7, #24
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	20000970 	.word	0x20000970
 8002dd0:	20000888 	.word	0x20000888
 8002dd4:	20000930 	.word	0x20000930
 8002dd8:	4002b000 	.word	0x4002b000

08002ddc <BSP_QSPI_Init>:
/**
  * @brief  Initializes the QSPI interface.
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Init(void)
{ 
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b082      	sub	sp, #8
 8002de0:	af00      	add	r7, sp, #0
  QSPIHandle.Instance = QUADSPI;
 8002de2:	4b28      	ldr	r3, [pc, #160]	; (8002e84 <BSP_QSPI_Init+0xa8>)
 8002de4:	4a28      	ldr	r2, [pc, #160]	; (8002e88 <BSP_QSPI_Init+0xac>)
 8002de6:	601a      	str	r2, [r3, #0]

  /* Call the DeInit function to reset the driver */
  if (HAL_QSPI_DeInit(&QSPIHandle) != HAL_OK)
 8002de8:	4826      	ldr	r0, [pc, #152]	; (8002e84 <BSP_QSPI_Init+0xa8>)
 8002dea:	f004 f9f9 	bl	80071e0 <HAL_QSPI_DeInit>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d001      	beq.n	8002df8 <BSP_QSPI_Init+0x1c>
  {
    return QSPI_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	e041      	b.n	8002e7c <BSP_QSPI_Init+0xa0>
  }
        
  /* System level initialization */
  BSP_QSPI_MspInit(&QSPIHandle, NULL);
 8002df8:	2100      	movs	r1, #0
 8002dfa:	4822      	ldr	r0, [pc, #136]	; (8002e84 <BSP_QSPI_Init+0xa8>)
 8002dfc:	f000 f878 	bl	8002ef0 <BSP_QSPI_MspInit>
  
  /* QSPI initialization */
  QSPIHandle.Init.ClockPrescaler     = 1; /* QSPI freq = 216 MHz/(1+1) = 108 Mhz */
 8002e00:	4b20      	ldr	r3, [pc, #128]	; (8002e84 <BSP_QSPI_Init+0xa8>)
 8002e02:	2201      	movs	r2, #1
 8002e04:	605a      	str	r2, [r3, #4]
  QSPIHandle.Init.FifoThreshold      = 4;
 8002e06:	4b1f      	ldr	r3, [pc, #124]	; (8002e84 <BSP_QSPI_Init+0xa8>)
 8002e08:	2204      	movs	r2, #4
 8002e0a:	609a      	str	r2, [r3, #8]
  QSPIHandle.Init.SampleShifting     = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8002e0c:	4b1d      	ldr	r3, [pc, #116]	; (8002e84 <BSP_QSPI_Init+0xa8>)
 8002e0e:	2210      	movs	r2, #16
 8002e10:	60da      	str	r2, [r3, #12]
 8002e12:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e16:	607b      	str	r3, [r7, #4]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	fa93 f3a3 	rbit	r3, r3
 8002e1e:	603b      	str	r3, [r7, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002e20:	683b      	ldr	r3, [r7, #0]
  QSPIHandle.Init.FlashSize          = POSITION_VAL(N25Q128A_FLASH_SIZE) - 1;
 8002e22:	fab3 f383 	clz	r3, r3
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	3b01      	subs	r3, #1
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	4b15      	ldr	r3, [pc, #84]	; (8002e84 <BSP_QSPI_Init+0xa8>)
 8002e2e:	611a      	str	r2, [r3, #16]
  QSPIHandle.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE; /* Min 50ns for nonRead */
 8002e30:	4b14      	ldr	r3, [pc, #80]	; (8002e84 <BSP_QSPI_Init+0xa8>)
 8002e32:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8002e36:	615a      	str	r2, [r3, #20]
  QSPIHandle.Init.ClockMode          = QSPI_CLOCK_MODE_0;
 8002e38:	4b12      	ldr	r3, [pc, #72]	; (8002e84 <BSP_QSPI_Init+0xa8>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	619a      	str	r2, [r3, #24]
  QSPIHandle.Init.FlashID            = QSPI_FLASH_ID_1;
 8002e3e:	4b11      	ldr	r3, [pc, #68]	; (8002e84 <BSP_QSPI_Init+0xa8>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	61da      	str	r2, [r3, #28]
  QSPIHandle.Init.DualFlash          = QSPI_DUALFLASH_DISABLE;
 8002e44:	4b0f      	ldr	r3, [pc, #60]	; (8002e84 <BSP_QSPI_Init+0xa8>)
 8002e46:	2200      	movs	r2, #0
 8002e48:	621a      	str	r2, [r3, #32]

  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 8002e4a:	480e      	ldr	r0, [pc, #56]	; (8002e84 <BSP_QSPI_Init+0xa8>)
 8002e4c:	f004 f94c 	bl	80070e8 <HAL_QSPI_Init>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d001      	beq.n	8002e5a <BSP_QSPI_Init+0x7e>
  {
    return QSPI_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e010      	b.n	8002e7c <BSP_QSPI_Init+0xa0>
  }

  /* QSPI memory reset */
  if (QSPI_ResetMemory(&QSPIHandle) != QSPI_OK)
 8002e5a:	480a      	ldr	r0, [pc, #40]	; (8002e84 <BSP_QSPI_Init+0xa8>)
 8002e5c:	f000 f908 	bl	8003070 <QSPI_ResetMemory>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d001      	beq.n	8002e6a <BSP_QSPI_Init+0x8e>
  {
    return QSPI_NOT_SUPPORTED;
 8002e66:	2304      	movs	r3, #4
 8002e68:	e008      	b.n	8002e7c <BSP_QSPI_Init+0xa0>
  }
 
  /* Configuration of the dummy cycles on QSPI memory side */
  if (QSPI_DummyCyclesCfg(&QSPIHandle) != QSPI_OK)
 8002e6a:	4806      	ldr	r0, [pc, #24]	; (8002e84 <BSP_QSPI_Init+0xa8>)
 8002e6c:	f000 f942 	bl	80030f4 <QSPI_DummyCyclesCfg>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d001      	beq.n	8002e7a <BSP_QSPI_Init+0x9e>
  {
    return QSPI_NOT_SUPPORTED;
 8002e76:	2304      	movs	r3, #4
 8002e78:	e000      	b.n	8002e7c <BSP_QSPI_Init+0xa0>
  }
  
  return QSPI_OK;
 8002e7a:	2300      	movs	r3, #0
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3708      	adds	r7, #8
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	20000a10 	.word	0x20000a10
 8002e88:	a0001000 	.word	0xa0001000

08002e8c <BSP_QSPI_EnableMemoryMappedMode>:
/**
  * @brief  Configure the QSPI in memory-mapped mode
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_EnableMemoryMappedMode(void)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b090      	sub	sp, #64	; 0x40
 8002e90:	af00      	add	r7, sp, #0
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;

  /* Configure the command for the read instruction */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002e92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e96:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = QUAD_INOUT_FAST_READ_CMD;
 8002e98:	23eb      	movs	r3, #235	; 0xeb
 8002e9a:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8002e9c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002ea0:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AddressSize       = QSPI_ADDRESS_24_BITS;
 8002ea2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ea6:	617b      	str	r3, [r7, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8002eac:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8002eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = N25Q128A_DUMMY_CYCLES_READ_QUAD;
 8002eb2:	230a      	movs	r3, #10
 8002eb4:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	607b      	str	r3, [r7, #4]
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	603b      	str	r3, [r7, #0]
  
  if (HAL_QSPI_MemoryMapped(&QSPIHandle, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8002eca:	463a      	mov	r2, r7
 8002ecc:	f107 0308 	add.w	r3, r7, #8
 8002ed0:	4619      	mov	r1, r3
 8002ed2:	4806      	ldr	r0, [pc, #24]	; (8002eec <BSP_QSPI_EnableMemoryMappedMode+0x60>)
 8002ed4:	f004 fbb6 	bl	8007644 <HAL_QSPI_MemoryMapped>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d001      	beq.n	8002ee2 <BSP_QSPI_EnableMemoryMappedMode+0x56>
  {
    return QSPI_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e000      	b.n	8002ee4 <BSP_QSPI_EnableMemoryMappedMode+0x58>
  }

  return QSPI_OK;
 8002ee2:	2300      	movs	r3, #0
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3740      	adds	r7, #64	; 0x40
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	20000a10 	.word	0x20000a10

08002ef0 <BSP_QSPI_MspInit>:
  *           - Peripheral's GPIO Configuration
  *           - NVIC configuration for QSPI interrupt
  * @retval None
  */
__weak void BSP_QSPI_MspInit(QSPI_HandleTypeDef *hqspi, void *Params)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b08e      	sub	sp, #56	; 0x38
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
 8002ef8:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable the QuadSPI memory interface clock */
  QSPI_CLK_ENABLE();
 8002efa:	4b59      	ldr	r3, [pc, #356]	; (8003060 <BSP_QSPI_MspInit+0x170>)
 8002efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002efe:	4a58      	ldr	r2, [pc, #352]	; (8003060 <BSP_QSPI_MspInit+0x170>)
 8002f00:	f043 0302 	orr.w	r3, r3, #2
 8002f04:	6393      	str	r3, [r2, #56]	; 0x38
 8002f06:	4b56      	ldr	r3, [pc, #344]	; (8003060 <BSP_QSPI_MspInit+0x170>)
 8002f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f0a:	f003 0302 	and.w	r3, r3, #2
 8002f0e:	623b      	str	r3, [r7, #32]
 8002f10:	6a3b      	ldr	r3, [r7, #32]
  /* Reset the QuadSPI memory interface */
  QSPI_FORCE_RESET();
 8002f12:	4b53      	ldr	r3, [pc, #332]	; (8003060 <BSP_QSPI_MspInit+0x170>)
 8002f14:	699b      	ldr	r3, [r3, #24]
 8002f16:	4a52      	ldr	r2, [pc, #328]	; (8003060 <BSP_QSPI_MspInit+0x170>)
 8002f18:	f043 0302 	orr.w	r3, r3, #2
 8002f1c:	6193      	str	r3, [r2, #24]
  QSPI_RELEASE_RESET();
 8002f1e:	4b50      	ldr	r3, [pc, #320]	; (8003060 <BSP_QSPI_MspInit+0x170>)
 8002f20:	699b      	ldr	r3, [r3, #24]
 8002f22:	4a4f      	ldr	r2, [pc, #316]	; (8003060 <BSP_QSPI_MspInit+0x170>)
 8002f24:	f023 0302 	bic.w	r3, r3, #2
 8002f28:	6193      	str	r3, [r2, #24]
  /* Enable GPIO clocks */
  QSPI_CS_GPIO_CLK_ENABLE();
 8002f2a:	4b4d      	ldr	r3, [pc, #308]	; (8003060 <BSP_QSPI_MspInit+0x170>)
 8002f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2e:	4a4c      	ldr	r2, [pc, #304]	; (8003060 <BSP_QSPI_MspInit+0x170>)
 8002f30:	f043 0302 	orr.w	r3, r3, #2
 8002f34:	6313      	str	r3, [r2, #48]	; 0x30
 8002f36:	4b4a      	ldr	r3, [pc, #296]	; (8003060 <BSP_QSPI_MspInit+0x170>)
 8002f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3a:	f003 0302 	and.w	r3, r3, #2
 8002f3e:	61fb      	str	r3, [r7, #28]
 8002f40:	69fb      	ldr	r3, [r7, #28]
  QSPI_CLK_GPIO_CLK_ENABLE();
 8002f42:	4b47      	ldr	r3, [pc, #284]	; (8003060 <BSP_QSPI_MspInit+0x170>)
 8002f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f46:	4a46      	ldr	r2, [pc, #280]	; (8003060 <BSP_QSPI_MspInit+0x170>)
 8002f48:	f043 0302 	orr.w	r3, r3, #2
 8002f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f4e:	4b44      	ldr	r3, [pc, #272]	; (8003060 <BSP_QSPI_MspInit+0x170>)
 8002f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f52:	f003 0302 	and.w	r3, r3, #2
 8002f56:	61bb      	str	r3, [r7, #24]
 8002f58:	69bb      	ldr	r3, [r7, #24]
  QSPI_D0_GPIO_CLK_ENABLE();
 8002f5a:	4b41      	ldr	r3, [pc, #260]	; (8003060 <BSP_QSPI_MspInit+0x170>)
 8002f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f5e:	4a40      	ldr	r2, [pc, #256]	; (8003060 <BSP_QSPI_MspInit+0x170>)
 8002f60:	f043 0308 	orr.w	r3, r3, #8
 8002f64:	6313      	str	r3, [r2, #48]	; 0x30
 8002f66:	4b3e      	ldr	r3, [pc, #248]	; (8003060 <BSP_QSPI_MspInit+0x170>)
 8002f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6a:	f003 0308 	and.w	r3, r3, #8
 8002f6e:	617b      	str	r3, [r7, #20]
 8002f70:	697b      	ldr	r3, [r7, #20]
  QSPI_D1_GPIO_CLK_ENABLE();
 8002f72:	4b3b      	ldr	r3, [pc, #236]	; (8003060 <BSP_QSPI_MspInit+0x170>)
 8002f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f76:	4a3a      	ldr	r2, [pc, #232]	; (8003060 <BSP_QSPI_MspInit+0x170>)
 8002f78:	f043 0308 	orr.w	r3, r3, #8
 8002f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f7e:	4b38      	ldr	r3, [pc, #224]	; (8003060 <BSP_QSPI_MspInit+0x170>)
 8002f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f82:	f003 0308 	and.w	r3, r3, #8
 8002f86:	613b      	str	r3, [r7, #16]
 8002f88:	693b      	ldr	r3, [r7, #16]
  QSPI_D2_GPIO_CLK_ENABLE();
 8002f8a:	4b35      	ldr	r3, [pc, #212]	; (8003060 <BSP_QSPI_MspInit+0x170>)
 8002f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8e:	4a34      	ldr	r2, [pc, #208]	; (8003060 <BSP_QSPI_MspInit+0x170>)
 8002f90:	f043 0310 	orr.w	r3, r3, #16
 8002f94:	6313      	str	r3, [r2, #48]	; 0x30
 8002f96:	4b32      	ldr	r3, [pc, #200]	; (8003060 <BSP_QSPI_MspInit+0x170>)
 8002f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9a:	f003 0310 	and.w	r3, r3, #16
 8002f9e:	60fb      	str	r3, [r7, #12]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
  QSPI_D3_GPIO_CLK_ENABLE();
 8002fa2:	4b2f      	ldr	r3, [pc, #188]	; (8003060 <BSP_QSPI_MspInit+0x170>)
 8002fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa6:	4a2e      	ldr	r2, [pc, #184]	; (8003060 <BSP_QSPI_MspInit+0x170>)
 8002fa8:	f043 0308 	orr.w	r3, r3, #8
 8002fac:	6313      	str	r3, [r2, #48]	; 0x30
 8002fae:	4b2c      	ldr	r3, [pc, #176]	; (8003060 <BSP_QSPI_MspInit+0x170>)
 8002fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb2:	f003 0308 	and.w	r3, r3, #8
 8002fb6:	60bb      	str	r3, [r7, #8]
 8002fb8:	68bb      	ldr	r3, [r7, #8]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* QSPI CS GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_CS_PIN;
 8002fba:	2340      	movs	r3, #64	; 0x40
 8002fbc:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002fbe:	2302      	movs	r3, #2
 8002fc0:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 8002fca:	230a      	movs	r3, #10
 8002fcc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(QSPI_CS_GPIO_PORT, &gpio_init_structure);
 8002fce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fd2:	4619      	mov	r1, r3
 8002fd4:	4823      	ldr	r0, [pc, #140]	; (8003064 <BSP_QSPI_MspInit+0x174>)
 8002fd6:	f002 fcf5 	bl	80059c4 <HAL_GPIO_Init>

  /* QSPI CLK GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
 8002fda:	2304      	movs	r3, #4
 8002fdc:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8002fe2:	2309      	movs	r3, #9
 8002fe4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 8002fe6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fea:	4619      	mov	r1, r3
 8002fec:	481d      	ldr	r0, [pc, #116]	; (8003064 <BSP_QSPI_MspInit+0x174>)
 8002fee:	f002 fce9 	bl	80059c4 <HAL_GPIO_Init>

  /* QSPI D0 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_D0_PIN;
 8002ff2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002ff6:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8002ff8:	2309      	movs	r3, #9
 8002ffa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(QSPI_D0_GPIO_PORT, &gpio_init_structure);
 8002ffc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003000:	4619      	mov	r1, r3
 8003002:	4819      	ldr	r0, [pc, #100]	; (8003068 <BSP_QSPI_MspInit+0x178>)
 8003004:	f002 fcde 	bl	80059c4 <HAL_GPIO_Init>

  /* QSPI D1 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_D1_PIN;
 8003008:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800300c:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800300e:	2309      	movs	r3, #9
 8003010:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(QSPI_D1_GPIO_PORT, &gpio_init_structure);
 8003012:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003016:	4619      	mov	r1, r3
 8003018:	4813      	ldr	r0, [pc, #76]	; (8003068 <BSP_QSPI_MspInit+0x178>)
 800301a:	f002 fcd3 	bl	80059c4 <HAL_GPIO_Init>

  /* QSPI D2 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_D2_PIN;
 800301e:	2304      	movs	r3, #4
 8003020:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8003022:	2309      	movs	r3, #9
 8003024:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(QSPI_D2_GPIO_PORT, &gpio_init_structure);
 8003026:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800302a:	4619      	mov	r1, r3
 800302c:	480f      	ldr	r0, [pc, #60]	; (800306c <BSP_QSPI_MspInit+0x17c>)
 800302e:	f002 fcc9 	bl	80059c4 <HAL_GPIO_Init>

  /* QSPI D3 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_D3_PIN;
 8003032:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003036:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8003038:	2309      	movs	r3, #9
 800303a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(QSPI_D3_GPIO_PORT, &gpio_init_structure);
 800303c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003040:	4619      	mov	r1, r3
 8003042:	4809      	ldr	r0, [pc, #36]	; (8003068 <BSP_QSPI_MspInit+0x178>)
 8003044:	f002 fcbe 	bl	80059c4 <HAL_GPIO_Init>

  /*##-3- Configure the NVIC for QSPI #########################################*/
  /* NVIC configuration for QSPI interrupt */
  HAL_NVIC_SetPriority(QUADSPI_IRQn, 0x0F, 0);
 8003048:	2200      	movs	r2, #0
 800304a:	210f      	movs	r1, #15
 800304c:	205c      	movs	r0, #92	; 0x5c
 800304e:	f000 fed6 	bl	8003dfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 8003052:	205c      	movs	r0, #92	; 0x5c
 8003054:	f000 feef 	bl	8003e36 <HAL_NVIC_EnableIRQ>
}
 8003058:	bf00      	nop
 800305a:	3738      	adds	r7, #56	; 0x38
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}
 8003060:	40023800 	.word	0x40023800
 8003064:	40020400 	.word	0x40020400
 8003068:	40020c00 	.word	0x40020c00
 800306c:	40021000 	.word	0x40021000

08003070 <QSPI_ResetMemory>:
  * @brief  This function reset the QSPI memory.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_ResetMemory(QSPI_HandleTypeDef *hqspi)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b090      	sub	sp, #64	; 0x40
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003078:	f44f 7380 	mov.w	r3, #256	; 0x100
 800307c:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = RESET_ENABLE_CMD;
 800307e:	2366      	movs	r3, #102	; 0x66
 8003080:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8003082:	2300      	movs	r3, #0
 8003084:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003086:	2300      	movs	r3, #0
 8003088:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 800308a:	2300      	movs	r3, #0
 800308c:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 800308e:	2300      	movs	r3, #0
 8003090:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003092:	2300      	movs	r3, #0
 8003094:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003096:	2300      	movs	r3, #0
 8003098:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800309a:	2300      	movs	r3, #0
 800309c:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800309e:	f107 0308 	add.w	r3, r7, #8
 80030a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80030a6:	4619      	mov	r1, r3
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f004 f8bd 	bl	8007228 <HAL_QSPI_Command>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d001      	beq.n	80030b8 <QSPI_ResetMemory+0x48>
  {
    return QSPI_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	e019      	b.n	80030ec <QSPI_ResetMemory+0x7c>
  }

  /* Send the reset memory command */
  s_command.Instruction = RESET_MEMORY_CMD;
 80030b8:	2399      	movs	r3, #153	; 0x99
 80030ba:	60bb      	str	r3, [r7, #8]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80030bc:	f107 0308 	add.w	r3, r7, #8
 80030c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80030c4:	4619      	mov	r1, r3
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f004 f8ae 	bl	8007228 <HAL_QSPI_Command>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d001      	beq.n	80030d6 <QSPI_ResetMemory+0x66>
  {
    return QSPI_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e00a      	b.n	80030ec <QSPI_ResetMemory+0x7c>
  }

  /* Configure automatic polling mode to wait the memory is ready */  
  if (QSPI_AutoPollingMemReady(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 80030d6:	f241 3188 	movw	r1, #5000	; 0x1388
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f000 f8c7 	bl	800326e <QSPI_AutoPollingMemReady>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d001      	beq.n	80030ea <QSPI_ResetMemory+0x7a>
  {
    return QSPI_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e000      	b.n	80030ec <QSPI_ResetMemory+0x7c>
  }

  return QSPI_OK;
 80030ea:	2300      	movs	r3, #0
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3740      	adds	r7, #64	; 0x40
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <QSPI_DummyCyclesCfg>:
  * @brief  This function configure the dummy cycles on memory side.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_DummyCyclesCfg(QSPI_HandleTypeDef *hqspi)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b094      	sub	sp, #80	; 0x50
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;
  uint8_t reg;

  /* Initialize the read volatile configuration register command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80030fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003100:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction       = READ_VOL_CFG_REG_CMD;
 8003102:	2385      	movs	r3, #133	; 0x85
 8003104:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8003106:	2300      	movs	r3, #0
 8003108:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800310a:	2300      	movs	r3, #0
 800310c:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode          = QSPI_DATA_1_LINE;
 800310e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003112:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles       = 0;
 8003114:	2300      	movs	r3, #0
 8003116:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData            = 1;
 8003118:	2301      	movs	r3, #1
 800311a:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800311c:	2300      	movs	r3, #0
 800311e:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003120:	2300      	movs	r3, #0
 8003122:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003124:	2300      	movs	r3, #0
 8003126:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003128:	f107 0310 	add.w	r3, r7, #16
 800312c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003130:	4619      	mov	r1, r3
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f004 f878 	bl	8007228 <HAL_QSPI_Command>
 8003138:	4603      	mov	r3, r0
 800313a:	2b00      	cmp	r3, #0
 800313c:	d001      	beq.n	8003142 <QSPI_DummyCyclesCfg+0x4e>
  {
    return QSPI_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e048      	b.n	80031d4 <QSPI_DummyCyclesCfg+0xe0>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003142:	f107 030f 	add.w	r3, r7, #15
 8003146:	f241 3288 	movw	r2, #5000	; 0x1388
 800314a:	4619      	mov	r1, r3
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	f004 f960 	bl	8007412 <HAL_QSPI_Receive>
 8003152:	4603      	mov	r3, r0
 8003154:	2b00      	cmp	r3, #0
 8003156:	d001      	beq.n	800315c <QSPI_DummyCyclesCfg+0x68>
  {
    return QSPI_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	e03b      	b.n	80031d4 <QSPI_DummyCyclesCfg+0xe0>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(hqspi) != QSPI_OK)
 800315c:	6878      	ldr	r0, [r7, #4]
 800315e:	f000 f83d 	bl	80031dc <QSPI_WriteEnable>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d001      	beq.n	800316c <QSPI_DummyCyclesCfg+0x78>
  {
    return QSPI_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e033      	b.n	80031d4 <QSPI_DummyCyclesCfg+0xe0>
  }

  /* Update volatile configuration register (with new dummy cycles) */  
  s_command.Instruction = WRITE_VOL_CFG_REG_CMD;
 800316c:	2381      	movs	r3, #129	; 0x81
 800316e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 8003170:	7bfb      	ldrb	r3, [r7, #15]
 8003172:	b25b      	sxtb	r3, r3
 8003174:	f003 030f 	and.w	r3, r3, #15
 8003178:	b25a      	sxtb	r2, r3
 800317a:	23f0      	movs	r3, #240	; 0xf0
 800317c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800317e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003180:	fa93 f3a3 	rbit	r3, r3
 8003184:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8003186:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003188:	fab3 f383 	clz	r3, r3
 800318c:	b2db      	uxtb	r3, r3
 800318e:	4619      	mov	r1, r3
 8003190:	230a      	movs	r3, #10
 8003192:	408b      	lsls	r3, r1
 8003194:	b25b      	sxtb	r3, r3
 8003196:	4313      	orrs	r3, r2
 8003198:	b25b      	sxtb	r3, r3
 800319a:	b2db      	uxtb	r3, r3
 800319c:	73fb      	strb	r3, [r7, #15]
      
  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800319e:	f107 0310 	add.w	r3, r7, #16
 80031a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80031a6:	4619      	mov	r1, r3
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f004 f83d 	bl	8007228 <HAL_QSPI_Command>
 80031ae:	4603      	mov	r3, r0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d001      	beq.n	80031b8 <QSPI_DummyCyclesCfg+0xc4>
  {
    return QSPI_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e00d      	b.n	80031d4 <QSPI_DummyCyclesCfg+0xe0>
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80031b8:	f107 030f 	add.w	r3, r7, #15
 80031bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80031c0:	4619      	mov	r1, r3
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f004 f88e 	bl	80072e4 <HAL_QSPI_Transmit>
 80031c8:	4603      	mov	r3, r0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d001      	beq.n	80031d2 <QSPI_DummyCyclesCfg+0xde>
  {
    return QSPI_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e000      	b.n	80031d4 <QSPI_DummyCyclesCfg+0xe0>
  }
  
  return QSPI_OK;
 80031d2:	2300      	movs	r3, #0
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3750      	adds	r7, #80	; 0x50
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}

080031dc <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b096      	sub	sp, #88	; 0x58
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80031e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80031e8:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = WRITE_ENABLE_CMD;
 80031ea:	2306      	movs	r3, #6
 80031ec:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80031ee:	2300      	movs	r3, #0
 80031f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80031f2:	2300      	movs	r3, #0
 80031f4:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_NONE;
 80031f6:	2300      	movs	r3, #0
 80031f8:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 0;
 80031fa:	2300      	movs	r3, #0
 80031fc:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80031fe:	2300      	movs	r3, #0
 8003200:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003202:	2300      	movs	r3, #0
 8003204:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003206:	2300      	movs	r3, #0
 8003208:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800320a:	f107 0320 	add.w	r3, r7, #32
 800320e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003212:	4619      	mov	r1, r3
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f004 f807 	bl	8007228 <HAL_QSPI_Command>
 800321a:	4603      	mov	r3, r0
 800321c:	2b00      	cmp	r3, #0
 800321e:	d001      	beq.n	8003224 <QSPI_WriteEnable+0x48>
  {
    return QSPI_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e020      	b.n	8003266 <QSPI_WriteEnable+0x8a>
  }
  
  /* Configure automatic polling mode to wait for write enabling */  
  s_config.Match           = N25Q128A_SR_WREN;
 8003224:	2302      	movs	r3, #2
 8003226:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = N25Q128A_SR_WREN;
 8003228:	2302      	movs	r3, #2
 800322a:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 800322c:	2300      	movs	r3, #0
 800322e:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 1;
 8003230:	2301      	movs	r3, #1
 8003232:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 8003234:	2310      	movs	r3, #16
 8003236:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8003238:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800323c:	61fb      	str	r3, [r7, #28]

  s_command.Instruction    = READ_STATUS_REG_CMD;
 800323e:	2305      	movs	r3, #5
 8003240:	623b      	str	r3, [r7, #32]
  s_command.DataMode       = QSPI_DATA_1_LINE;
 8003242:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003246:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003248:	f107 0208 	add.w	r2, r7, #8
 800324c:	f107 0120 	add.w	r1, r7, #32
 8003250:	f241 3388 	movw	r3, #5000	; 0x1388
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	f004 f97e 	bl	8007556 <HAL_QSPI_AutoPolling>
 800325a:	4603      	mov	r3, r0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d001      	beq.n	8003264 <QSPI_WriteEnable+0x88>
  {
    return QSPI_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e000      	b.n	8003266 <QSPI_WriteEnable+0x8a>
  }

  return QSPI_OK;
 8003264:	2300      	movs	r3, #0
}
 8003266:	4618      	mov	r0, r3
 8003268:	3758      	adds	r7, #88	; 0x58
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}

0800326e <QSPI_AutoPollingMemReady>:
  * @param  hqspi: QSPI handle
  * @param  Timeout
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800326e:	b580      	push	{r7, lr}
 8003270:	b096      	sub	sp, #88	; 0x58
 8003272:	af00      	add	r7, sp, #0
 8003274:	6078      	str	r0, [r7, #4]
 8003276:	6039      	str	r1, [r7, #0]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */  
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003278:	f44f 7380 	mov.w	r3, #256	; 0x100
 800327c:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = READ_STATUS_REG_CMD;
 800327e:	2305      	movs	r3, #5
 8003280:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8003282:	2300      	movs	r3, #0
 8003284:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003286:	2300      	movs	r3, #0
 8003288:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_1_LINE;
 800328a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800328e:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 0;
 8003290:	2300      	movs	r3, #0
 8003292:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003294:	2300      	movs	r3, #0
 8003296:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003298:	2300      	movs	r3, #0
 800329a:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800329c:	2300      	movs	r3, #0
 800329e:	657b      	str	r3, [r7, #84]	; 0x54

  s_config.Match           = 0;
 80032a0:	2300      	movs	r3, #0
 80032a2:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = N25Q128A_SR_WIP;
 80032a4:	2301      	movs	r3, #1
 80032a6:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 80032a8:	2300      	movs	r3, #0
 80032aa:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 1;
 80032ac:	2301      	movs	r3, #1
 80032ae:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 80032b0:	2310      	movs	r3, #16
 80032b2:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 80032b4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80032b8:	61fb      	str	r3, [r7, #28]

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 80032ba:	f107 0208 	add.w	r2, r7, #8
 80032be:	f107 0120 	add.w	r1, r7, #32
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	6878      	ldr	r0, [r7, #4]
 80032c6:	f004 f946 	bl	8007556 <HAL_QSPI_AutoPolling>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d001      	beq.n	80032d4 <QSPI_AutoPollingMemReady+0x66>
  {
    return QSPI_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e000      	b.n	80032d6 <QSPI_AutoPollingMemReady+0x68>
  }

  return QSPI_OK;
 80032d4:	2300      	movs	r3, #0
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3758      	adds	r7, #88	; 0x58
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
	...

080032e0 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 80032e0:	b580      	push	{r7, lr}
 80032e2:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 80032e4:	4b29      	ldr	r3, [pc, #164]	; (800338c <BSP_SDRAM_Init+0xac>)
 80032e6:	4a2a      	ldr	r2, [pc, #168]	; (8003390 <BSP_SDRAM_Init+0xb0>)
 80032e8:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 80032ea:	4b2a      	ldr	r3, [pc, #168]	; (8003394 <BSP_SDRAM_Init+0xb4>)
 80032ec:	2202      	movs	r2, #2
 80032ee:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 80032f0:	4b28      	ldr	r3, [pc, #160]	; (8003394 <BSP_SDRAM_Init+0xb4>)
 80032f2:	2207      	movs	r2, #7
 80032f4:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 80032f6:	4b27      	ldr	r3, [pc, #156]	; (8003394 <BSP_SDRAM_Init+0xb4>)
 80032f8:	2204      	movs	r2, #4
 80032fa:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 80032fc:	4b25      	ldr	r3, [pc, #148]	; (8003394 <BSP_SDRAM_Init+0xb4>)
 80032fe:	2207      	movs	r2, #7
 8003300:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 8003302:	4b24      	ldr	r3, [pc, #144]	; (8003394 <BSP_SDRAM_Init+0xb4>)
 8003304:	2202      	movs	r2, #2
 8003306:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8003308:	4b22      	ldr	r3, [pc, #136]	; (8003394 <BSP_SDRAM_Init+0xb4>)
 800330a:	2202      	movs	r2, #2
 800330c:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 800330e:	4b21      	ldr	r3, [pc, #132]	; (8003394 <BSP_SDRAM_Init+0xb4>)
 8003310:	2202      	movs	r2, #2
 8003312:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8003314:	4b1d      	ldr	r3, [pc, #116]	; (800338c <BSP_SDRAM_Init+0xac>)
 8003316:	2200      	movs	r2, #0
 8003318:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800331a:	4b1c      	ldr	r3, [pc, #112]	; (800338c <BSP_SDRAM_Init+0xac>)
 800331c:	2200      	movs	r2, #0
 800331e:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8003320:	4b1a      	ldr	r3, [pc, #104]	; (800338c <BSP_SDRAM_Init+0xac>)
 8003322:	2204      	movs	r2, #4
 8003324:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8003326:	4b19      	ldr	r3, [pc, #100]	; (800338c <BSP_SDRAM_Init+0xac>)
 8003328:	2210      	movs	r2, #16
 800332a:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800332c:	4b17      	ldr	r3, [pc, #92]	; (800338c <BSP_SDRAM_Init+0xac>)
 800332e:	2240      	movs	r2, #64	; 0x40
 8003330:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8003332:	4b16      	ldr	r3, [pc, #88]	; (800338c <BSP_SDRAM_Init+0xac>)
 8003334:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003338:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800333a:	4b14      	ldr	r3, [pc, #80]	; (800338c <BSP_SDRAM_Init+0xac>)
 800333c:	2200      	movs	r2, #0
 800333e:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8003340:	4b12      	ldr	r3, [pc, #72]	; (800338c <BSP_SDRAM_Init+0xac>)
 8003342:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003346:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8003348:	4b10      	ldr	r3, [pc, #64]	; (800338c <BSP_SDRAM_Init+0xac>)
 800334a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800334e:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8003350:	4b0e      	ldr	r3, [pc, #56]	; (800338c <BSP_SDRAM_Init+0xac>)
 8003352:	2200      	movs	r2, #0
 8003354:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8003356:	2100      	movs	r1, #0
 8003358:	480c      	ldr	r0, [pc, #48]	; (800338c <BSP_SDRAM_Init+0xac>)
 800335a:	f000 f87f 	bl	800345c <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 800335e:	490d      	ldr	r1, [pc, #52]	; (8003394 <BSP_SDRAM_Init+0xb4>)
 8003360:	480a      	ldr	r0, [pc, #40]	; (800338c <BSP_SDRAM_Init+0xac>)
 8003362:	f005 fc8f 	bl	8008c84 <HAL_SDRAM_Init>
 8003366:	4603      	mov	r3, r0
 8003368:	2b00      	cmp	r3, #0
 800336a:	d003      	beq.n	8003374 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 800336c:	4b0a      	ldr	r3, [pc, #40]	; (8003398 <BSP_SDRAM_Init+0xb8>)
 800336e:	2201      	movs	r2, #1
 8003370:	701a      	strb	r2, [r3, #0]
 8003372:	e002      	b.n	800337a <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8003374:	4b08      	ldr	r3, [pc, #32]	; (8003398 <BSP_SDRAM_Init+0xb8>)
 8003376:	2200      	movs	r2, #0
 8003378:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 800337a:	f240 6003 	movw	r0, #1539	; 0x603
 800337e:	f000 f80d 	bl	800339c <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8003382:	4b05      	ldr	r3, [pc, #20]	; (8003398 <BSP_SDRAM_Init+0xb8>)
 8003384:	781b      	ldrb	r3, [r3, #0]
}
 8003386:	4618      	mov	r0, r3
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	20000a5c 	.word	0x20000a5c
 8003390:	a0000140 	.word	0xa0000140
 8003394:	20000a90 	.word	0x20000a90
 8003398:	20000040 	.word	0x20000040

0800339c <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b084      	sub	sp, #16
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 80033a4:	2300      	movs	r3, #0
 80033a6:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 80033a8:	4b2a      	ldr	r3, [pc, #168]	; (8003454 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80033aa:	2201      	movs	r2, #1
 80033ac:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80033ae:	4b29      	ldr	r3, [pc, #164]	; (8003454 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80033b0:	2210      	movs	r2, #16
 80033b2:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80033b4:	4b27      	ldr	r3, [pc, #156]	; (8003454 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80033b6:	2201      	movs	r2, #1
 80033b8:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80033ba:	4b26      	ldr	r3, [pc, #152]	; (8003454 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80033bc:	2200      	movs	r2, #0
 80033be:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80033c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80033c4:	4923      	ldr	r1, [pc, #140]	; (8003454 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80033c6:	4824      	ldr	r0, [pc, #144]	; (8003458 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80033c8:	f005 fc90 	bl	8008cec <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80033cc:	2001      	movs	r0, #1
 80033ce:	f000 fc17 	bl	8003c00 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 80033d2:	4b20      	ldr	r3, [pc, #128]	; (8003454 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80033d4:	2202      	movs	r2, #2
 80033d6:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80033d8:	4b1e      	ldr	r3, [pc, #120]	; (8003454 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80033da:	2210      	movs	r2, #16
 80033dc:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80033de:	4b1d      	ldr	r3, [pc, #116]	; (8003454 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80033e0:	2201      	movs	r2, #1
 80033e2:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80033e4:	4b1b      	ldr	r3, [pc, #108]	; (8003454 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80033e6:	2200      	movs	r2, #0
 80033e8:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 80033ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80033ee:	4919      	ldr	r1, [pc, #100]	; (8003454 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80033f0:	4819      	ldr	r0, [pc, #100]	; (8003458 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80033f2:	f005 fc7b 	bl	8008cec <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80033f6:	4b17      	ldr	r3, [pc, #92]	; (8003454 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80033f8:	2203      	movs	r2, #3
 80033fa:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80033fc:	4b15      	ldr	r3, [pc, #84]	; (8003454 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80033fe:	2210      	movs	r2, #16
 8003400:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8003402:	4b14      	ldr	r3, [pc, #80]	; (8003454 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003404:	2208      	movs	r2, #8
 8003406:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003408:	4b12      	ldr	r3, [pc, #72]	; (8003454 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800340a:	2200      	movs	r2, #0
 800340c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800340e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003412:	4910      	ldr	r1, [pc, #64]	; (8003454 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003414:	4810      	ldr	r0, [pc, #64]	; (8003458 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003416:	f005 fc69 	bl	8008cec <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 800341a:	f44f 7308 	mov.w	r3, #544	; 0x220
 800341e:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8003420:	4b0c      	ldr	r3, [pc, #48]	; (8003454 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003422:	2204      	movs	r2, #4
 8003424:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003426:	4b0b      	ldr	r3, [pc, #44]	; (8003454 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003428:	2210      	movs	r2, #16
 800342a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 800342c:	4b09      	ldr	r3, [pc, #36]	; (8003454 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800342e:	2201      	movs	r2, #1
 8003430:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	4a07      	ldr	r2, [pc, #28]	; (8003454 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003436:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003438:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800343c:	4905      	ldr	r1, [pc, #20]	; (8003454 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800343e:	4806      	ldr	r0, [pc, #24]	; (8003458 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003440:	f005 fc54 	bl	8008cec <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8003444:	6879      	ldr	r1, [r7, #4]
 8003446:	4804      	ldr	r0, [pc, #16]	; (8003458 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003448:	f005 fc85 	bl	8008d56 <HAL_SDRAM_ProgramRefreshRate>
}
 800344c:	bf00      	nop
 800344e:	3710      	adds	r7, #16
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}
 8003454:	20000aac 	.word	0x20000aac
 8003458:	20000a5c 	.word	0x20000a5c

0800345c <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 800345c:	b580      	push	{r7, lr}
 800345e:	b090      	sub	sp, #64	; 0x40
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003466:	4b70      	ldr	r3, [pc, #448]	; (8003628 <BSP_SDRAM_MspInit+0x1cc>)
 8003468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800346a:	4a6f      	ldr	r2, [pc, #444]	; (8003628 <BSP_SDRAM_MspInit+0x1cc>)
 800346c:	f043 0301 	orr.w	r3, r3, #1
 8003470:	6393      	str	r3, [r2, #56]	; 0x38
 8003472:	4b6d      	ldr	r3, [pc, #436]	; (8003628 <BSP_SDRAM_MspInit+0x1cc>)
 8003474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003476:	f003 0301 	and.w	r3, r3, #1
 800347a:	62bb      	str	r3, [r7, #40]	; 0x28
 800347c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 800347e:	4b6a      	ldr	r3, [pc, #424]	; (8003628 <BSP_SDRAM_MspInit+0x1cc>)
 8003480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003482:	4a69      	ldr	r2, [pc, #420]	; (8003628 <BSP_SDRAM_MspInit+0x1cc>)
 8003484:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003488:	6313      	str	r3, [r2, #48]	; 0x30
 800348a:	4b67      	ldr	r3, [pc, #412]	; (8003628 <BSP_SDRAM_MspInit+0x1cc>)
 800348c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800348e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003492:	627b      	str	r3, [r7, #36]	; 0x24
 8003494:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003496:	4b64      	ldr	r3, [pc, #400]	; (8003628 <BSP_SDRAM_MspInit+0x1cc>)
 8003498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349a:	4a63      	ldr	r2, [pc, #396]	; (8003628 <BSP_SDRAM_MspInit+0x1cc>)
 800349c:	f043 0304 	orr.w	r3, r3, #4
 80034a0:	6313      	str	r3, [r2, #48]	; 0x30
 80034a2:	4b61      	ldr	r3, [pc, #388]	; (8003628 <BSP_SDRAM_MspInit+0x1cc>)
 80034a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a6:	f003 0304 	and.w	r3, r3, #4
 80034aa:	623b      	str	r3, [r7, #32]
 80034ac:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80034ae:	4b5e      	ldr	r3, [pc, #376]	; (8003628 <BSP_SDRAM_MspInit+0x1cc>)
 80034b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b2:	4a5d      	ldr	r2, [pc, #372]	; (8003628 <BSP_SDRAM_MspInit+0x1cc>)
 80034b4:	f043 0308 	orr.w	r3, r3, #8
 80034b8:	6313      	str	r3, [r2, #48]	; 0x30
 80034ba:	4b5b      	ldr	r3, [pc, #364]	; (8003628 <BSP_SDRAM_MspInit+0x1cc>)
 80034bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034be:	f003 0308 	and.w	r3, r3, #8
 80034c2:	61fb      	str	r3, [r7, #28]
 80034c4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80034c6:	4b58      	ldr	r3, [pc, #352]	; (8003628 <BSP_SDRAM_MspInit+0x1cc>)
 80034c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ca:	4a57      	ldr	r2, [pc, #348]	; (8003628 <BSP_SDRAM_MspInit+0x1cc>)
 80034cc:	f043 0310 	orr.w	r3, r3, #16
 80034d0:	6313      	str	r3, [r2, #48]	; 0x30
 80034d2:	4b55      	ldr	r3, [pc, #340]	; (8003628 <BSP_SDRAM_MspInit+0x1cc>)
 80034d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d6:	f003 0310 	and.w	r3, r3, #16
 80034da:	61bb      	str	r3, [r7, #24]
 80034dc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80034de:	4b52      	ldr	r3, [pc, #328]	; (8003628 <BSP_SDRAM_MspInit+0x1cc>)
 80034e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e2:	4a51      	ldr	r2, [pc, #324]	; (8003628 <BSP_SDRAM_MspInit+0x1cc>)
 80034e4:	f043 0320 	orr.w	r3, r3, #32
 80034e8:	6313      	str	r3, [r2, #48]	; 0x30
 80034ea:	4b4f      	ldr	r3, [pc, #316]	; (8003628 <BSP_SDRAM_MspInit+0x1cc>)
 80034ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ee:	f003 0320 	and.w	r3, r3, #32
 80034f2:	617b      	str	r3, [r7, #20]
 80034f4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80034f6:	4b4c      	ldr	r3, [pc, #304]	; (8003628 <BSP_SDRAM_MspInit+0x1cc>)
 80034f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034fa:	4a4b      	ldr	r2, [pc, #300]	; (8003628 <BSP_SDRAM_MspInit+0x1cc>)
 80034fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003500:	6313      	str	r3, [r2, #48]	; 0x30
 8003502:	4b49      	ldr	r3, [pc, #292]	; (8003628 <BSP_SDRAM_MspInit+0x1cc>)
 8003504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003506:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800350a:	613b      	str	r3, [r7, #16]
 800350c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800350e:	4b46      	ldr	r3, [pc, #280]	; (8003628 <BSP_SDRAM_MspInit+0x1cc>)
 8003510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003512:	4a45      	ldr	r2, [pc, #276]	; (8003628 <BSP_SDRAM_MspInit+0x1cc>)
 8003514:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003518:	6313      	str	r3, [r2, #48]	; 0x30
 800351a:	4b43      	ldr	r3, [pc, #268]	; (8003628 <BSP_SDRAM_MspInit+0x1cc>)
 800351c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800351e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003522:	60fb      	str	r3, [r7, #12]
 8003524:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003526:	2302      	movs	r3, #2
 8003528:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800352a:	2301      	movs	r3, #1
 800352c:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 800352e:	2302      	movs	r3, #2
 8003530:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8003532:	230c      	movs	r3, #12
 8003534:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8003536:	2308      	movs	r3, #8
 8003538:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 800353a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800353e:	4619      	mov	r1, r3
 8003540:	483a      	ldr	r0, [pc, #232]	; (800362c <BSP_SDRAM_MspInit+0x1d0>)
 8003542:	f002 fa3f 	bl	80059c4 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8003546:	f24c 7303 	movw	r3, #50947	; 0xc703
 800354a:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800354c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003550:	4619      	mov	r1, r3
 8003552:	4837      	ldr	r0, [pc, #220]	; (8003630 <BSP_SDRAM_MspInit+0x1d4>)
 8003554:	f002 fa36 	bl	80059c4 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8003558:	f64f 7383 	movw	r3, #65411	; 0xff83
 800355c:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800355e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003562:	4619      	mov	r1, r3
 8003564:	4833      	ldr	r0, [pc, #204]	; (8003634 <BSP_SDRAM_MspInit+0x1d8>)
 8003566:	f002 fa2d 	bl	80059c4 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800356a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800356e:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8003570:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003574:	4619      	mov	r1, r3
 8003576:	4830      	ldr	r0, [pc, #192]	; (8003638 <BSP_SDRAM_MspInit+0x1dc>)
 8003578:	f002 fa24 	bl	80059c4 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 800357c:	f248 1333 	movw	r3, #33075	; 0x8133
 8003580:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8003582:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003586:	4619      	mov	r1, r3
 8003588:	482c      	ldr	r0, [pc, #176]	; (800363c <BSP_SDRAM_MspInit+0x1e0>)
 800358a:	f002 fa1b 	bl	80059c4 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 800358e:	2328      	movs	r3, #40	; 0x28
 8003590:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8003592:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003596:	4619      	mov	r1, r3
 8003598:	4829      	ldr	r0, [pc, #164]	; (8003640 <BSP_SDRAM_MspInit+0x1e4>)
 800359a:	f002 fa13 	bl	80059c4 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800359e:	4b29      	ldr	r3, [pc, #164]	; (8003644 <BSP_SDRAM_MspInit+0x1e8>)
 80035a0:	2200      	movs	r2, #0
 80035a2:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80035a4:	4b27      	ldr	r3, [pc, #156]	; (8003644 <BSP_SDRAM_MspInit+0x1e8>)
 80035a6:	2280      	movs	r2, #128	; 0x80
 80035a8:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 80035aa:	4b26      	ldr	r3, [pc, #152]	; (8003644 <BSP_SDRAM_MspInit+0x1e8>)
 80035ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035b0:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 80035b2:	4b24      	ldr	r3, [pc, #144]	; (8003644 <BSP_SDRAM_MspInit+0x1e8>)
 80035b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80035b8:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80035ba:	4b22      	ldr	r3, [pc, #136]	; (8003644 <BSP_SDRAM_MspInit+0x1e8>)
 80035bc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80035c0:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80035c2:	4b20      	ldr	r3, [pc, #128]	; (8003644 <BSP_SDRAM_MspInit+0x1e8>)
 80035c4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80035c8:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 80035ca:	4b1e      	ldr	r3, [pc, #120]	; (8003644 <BSP_SDRAM_MspInit+0x1e8>)
 80035cc:	2200      	movs	r2, #0
 80035ce:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 80035d0:	4b1c      	ldr	r3, [pc, #112]	; (8003644 <BSP_SDRAM_MspInit+0x1e8>)
 80035d2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80035d6:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 80035d8:	4b1a      	ldr	r3, [pc, #104]	; (8003644 <BSP_SDRAM_MspInit+0x1e8>)
 80035da:	2200      	movs	r2, #0
 80035dc:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80035de:	4b19      	ldr	r3, [pc, #100]	; (8003644 <BSP_SDRAM_MspInit+0x1e8>)
 80035e0:	2203      	movs	r2, #3
 80035e2:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 80035e4:	4b17      	ldr	r3, [pc, #92]	; (8003644 <BSP_SDRAM_MspInit+0x1e8>)
 80035e6:	2200      	movs	r2, #0
 80035e8:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80035ea:	4b16      	ldr	r3, [pc, #88]	; (8003644 <BSP_SDRAM_MspInit+0x1e8>)
 80035ec:	2200      	movs	r2, #0
 80035ee:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 80035f0:	4b14      	ldr	r3, [pc, #80]	; (8003644 <BSP_SDRAM_MspInit+0x1e8>)
 80035f2:	4a15      	ldr	r2, [pc, #84]	; (8003648 <BSP_SDRAM_MspInit+0x1ec>)
 80035f4:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4a12      	ldr	r2, [pc, #72]	; (8003644 <BSP_SDRAM_MspInit+0x1e8>)
 80035fa:	631a      	str	r2, [r3, #48]	; 0x30
 80035fc:	4a11      	ldr	r2, [pc, #68]	; (8003644 <BSP_SDRAM_MspInit+0x1e8>)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8003602:	4810      	ldr	r0, [pc, #64]	; (8003644 <BSP_SDRAM_MspInit+0x1e8>)
 8003604:	f000 fce0 	bl	8003fc8 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8003608:	480e      	ldr	r0, [pc, #56]	; (8003644 <BSP_SDRAM_MspInit+0x1e8>)
 800360a:	f000 fc2f 	bl	8003e6c <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 800360e:	2200      	movs	r2, #0
 8003610:	210f      	movs	r1, #15
 8003612:	2038      	movs	r0, #56	; 0x38
 8003614:	f000 fbf3 	bl	8003dfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8003618:	2038      	movs	r0, #56	; 0x38
 800361a:	f000 fc0c 	bl	8003e36 <HAL_NVIC_EnableIRQ>
}
 800361e:	bf00      	nop
 8003620:	3740      	adds	r7, #64	; 0x40
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
 8003626:	bf00      	nop
 8003628:	40023800 	.word	0x40023800
 800362c:	40020800 	.word	0x40020800
 8003630:	40020c00 	.word	0x40020c00
 8003634:	40021000 	.word	0x40021000
 8003638:	40021400 	.word	0x40021400
 800363c:	40021800 	.word	0x40021800
 8003640:	40021c00 	.word	0x40021c00
 8003644:	20000abc 	.word	0x20000abc
 8003648:	40026410 	.word	0x40026410

0800364c <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b084      	sub	sp, #16
 8003650:	af00      	add	r7, sp, #0
 8003652:	4603      	mov	r3, r0
 8003654:	460a      	mov	r2, r1
 8003656:	80fb      	strh	r3, [r7, #6]
 8003658:	4613      	mov	r3, r2
 800365a:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 800365c:	2300      	movs	r3, #0
 800365e:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 8003660:	4a14      	ldr	r2, [pc, #80]	; (80036b4 <BSP_TS_Init+0x68>)
 8003662:	88fb      	ldrh	r3, [r7, #6]
 8003664:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 8003666:	4a14      	ldr	r2, [pc, #80]	; (80036b8 <BSP_TS_Init+0x6c>)
 8003668:	88bb      	ldrh	r3, [r7, #4]
 800366a:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 800366c:	4b13      	ldr	r3, [pc, #76]	; (80036bc <BSP_TS_Init+0x70>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	2070      	movs	r0, #112	; 0x70
 8003672:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 8003674:	4b11      	ldr	r3, [pc, #68]	; (80036bc <BSP_TS_Init+0x70>)
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	2070      	movs	r0, #112	; 0x70
 800367a:	4798      	blx	r3
 800367c:	4603      	mov	r3, r0
 800367e:	2b51      	cmp	r3, #81	; 0x51
 8003680:	d111      	bne.n	80036a6 <BSP_TS_Init+0x5a>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 8003682:	4b0f      	ldr	r3, [pc, #60]	; (80036c0 <BSP_TS_Init+0x74>)
 8003684:	4a0d      	ldr	r2, [pc, #52]	; (80036bc <BSP_TS_Init+0x70>)
 8003686:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 8003688:	4b0e      	ldr	r3, [pc, #56]	; (80036c4 <BSP_TS_Init+0x78>)
 800368a:	2270      	movs	r2, #112	; 0x70
 800368c:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 800368e:	4b0e      	ldr	r3, [pc, #56]	; (80036c8 <BSP_TS_Init+0x7c>)
 8003690:	2208      	movs	r2, #8
 8003692:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 8003694:	4b0a      	ldr	r3, [pc, #40]	; (80036c0 <BSP_TS_Init+0x74>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	4a0a      	ldr	r2, [pc, #40]	; (80036c4 <BSP_TS_Init+0x78>)
 800369c:	7812      	ldrb	r2, [r2, #0]
 800369e:	b292      	uxth	r2, r2
 80036a0:	4610      	mov	r0, r2
 80036a2:	4798      	blx	r3
 80036a4:	e001      	b.n	80036aa <BSP_TS_Init+0x5e>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 80036a6:	2303      	movs	r3, #3
 80036a8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80036aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3710      	adds	r7, #16
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	20000b20 	.word	0x20000b20
 80036b8:	20000b22 	.word	0x20000b22
 80036bc:	20000008 	.word	0x20000008
 80036c0:	20000b1c 	.word	0x20000b1c
 80036c4:	20000b25 	.word	0x20000b25
 80036c8:	20000b24 	.word	0x20000b24

080036cc <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 80036cc:	b590      	push	{r4, r7, lr}
 80036ce:	b097      	sub	sp, #92	; 0x5c
 80036d0:	af02      	add	r7, sp, #8
 80036d2:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 80036d4:	2300      	movs	r3, #0
 80036d6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint16_t brute_y[TS_MAX_NB_TOUCH];
  uint16_t x_diff;
  uint16_t y_diff;
  uint32_t index;
#if (TS_MULTI_TOUCH_SUPPORTED == 1)
  uint32_t weight = 0;
 80036da:	2300      	movs	r3, #0
 80036dc:	613b      	str	r3, [r7, #16]
  uint32_t area = 0;
 80036de:	2300      	movs	r3, #0
 80036e0:	60fb      	str	r3, [r7, #12]
  uint32_t event = 0;
 80036e2:	2300      	movs	r3, #0
 80036e4:	60bb      	str	r3, [r7, #8]
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 80036e6:	4bb4      	ldr	r3, [pc, #720]	; (80039b8 <BSP_TS_GetState+0x2ec>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	691b      	ldr	r3, [r3, #16]
 80036ec:	4ab3      	ldr	r2, [pc, #716]	; (80039bc <BSP_TS_GetState+0x2f0>)
 80036ee:	7812      	ldrb	r2, [r2, #0]
 80036f0:	b292      	uxth	r2, r2
 80036f2:	4610      	mov	r0, r2
 80036f4:	4798      	blx	r3
 80036f6:	4603      	mov	r3, r0
 80036f8:	461a      	mov	r2, r3
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	701a      	strb	r2, [r3, #0]
  
  if(TS_State->touchDetected)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	781b      	ldrb	r3, [r3, #0]
 8003702:	2b00      	cmp	r3, #0
 8003704:	f000 8196 	beq.w	8003a34 <BSP_TS_GetState+0x368>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 8003708:	2300      	movs	r3, #0
 800370a:	64bb      	str	r3, [r7, #72]	; 0x48
 800370c:	e185      	b.n	8003a1a <BSP_TS_GetState+0x34e>
    {
      /* Get each touch coordinates */
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 800370e:	4baa      	ldr	r3, [pc, #680]	; (80039b8 <BSP_TS_GetState+0x2ec>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	695b      	ldr	r3, [r3, #20]
 8003714:	4aa9      	ldr	r2, [pc, #676]	; (80039bc <BSP_TS_GetState+0x2f0>)
 8003716:	7812      	ldrb	r2, [r2, #0]
 8003718:	b290      	uxth	r0, r2
 800371a:	f107 0120 	add.w	r1, r7, #32
 800371e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003720:	0052      	lsls	r2, r2, #1
 8003722:	188c      	adds	r4, r1, r2
 8003724:	f107 0114 	add.w	r1, r7, #20
 8003728:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800372a:	0052      	lsls	r2, r2, #1
 800372c:	440a      	add	r2, r1
 800372e:	4621      	mov	r1, r4
 8003730:	4798      	blx	r3

      if(tsOrientation == TS_SWAP_NONE)
 8003732:	4ba3      	ldr	r3, [pc, #652]	; (80039c0 <BSP_TS_GetState+0x2f4>)
 8003734:	781b      	ldrb	r3, [r3, #0]
 8003736:	2b01      	cmp	r3, #1
 8003738:	d117      	bne.n	800376a <BSP_TS_GetState+0x9e>
      {
        x[index] = brute_x[index];
 800373a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800373c:	005b      	lsls	r3, r3, #1
 800373e:	3350      	adds	r3, #80	; 0x50
 8003740:	443b      	add	r3, r7
 8003742:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8003746:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003748:	005b      	lsls	r3, r3, #1
 800374a:	3350      	adds	r3, #80	; 0x50
 800374c:	443b      	add	r3, r7
 800374e:	f823 2c18 	strh.w	r2, [r3, #-24]
        y[index] = brute_y[index];
 8003752:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003754:	005b      	lsls	r3, r3, #1
 8003756:	3350      	adds	r3, #80	; 0x50
 8003758:	443b      	add	r3, r7
 800375a:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 800375e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003760:	005b      	lsls	r3, r3, #1
 8003762:	3350      	adds	r3, #80	; 0x50
 8003764:	443b      	add	r3, r7
 8003766:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_X)
 800376a:	4b95      	ldr	r3, [pc, #596]	; (80039c0 <BSP_TS_GetState+0x2f4>)
 800376c:	781b      	ldrb	r3, [r3, #0]
 800376e:	f003 0302 	and.w	r3, r3, #2
 8003772:	2b00      	cmp	r3, #0
 8003774:	d00e      	beq.n	8003794 <BSP_TS_GetState+0xc8>
      {
        x[index] = 4096 - brute_x[index];
 8003776:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003778:	005b      	lsls	r3, r3, #1
 800377a:	3350      	adds	r3, #80	; 0x50
 800377c:	443b      	add	r3, r7
 800377e:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 8003782:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8003786:	b29a      	uxth	r2, r3
 8003788:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800378a:	005b      	lsls	r3, r3, #1
 800378c:	3350      	adds	r3, #80	; 0x50
 800378e:	443b      	add	r3, r7
 8003790:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      if(tsOrientation & TS_SWAP_Y)
 8003794:	4b8a      	ldr	r3, [pc, #552]	; (80039c0 <BSP_TS_GetState+0x2f4>)
 8003796:	781b      	ldrb	r3, [r3, #0]
 8003798:	f003 0304 	and.w	r3, r3, #4
 800379c:	2b00      	cmp	r3, #0
 800379e:	d00e      	beq.n	80037be <BSP_TS_GetState+0xf2>
      {
        y[index] = 4096 - brute_y[index];
 80037a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037a2:	005b      	lsls	r3, r3, #1
 80037a4:	3350      	adds	r3, #80	; 0x50
 80037a6:	443b      	add	r3, r7
 80037a8:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 80037ac:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 80037b0:	b29a      	uxth	r2, r3
 80037b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037b4:	005b      	lsls	r3, r3, #1
 80037b6:	3350      	adds	r3, #80	; 0x50
 80037b8:	443b      	add	r3, r7
 80037ba:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_XY)
 80037be:	4b80      	ldr	r3, [pc, #512]	; (80039c0 <BSP_TS_GetState+0x2f4>)
 80037c0:	781b      	ldrb	r3, [r3, #0]
 80037c2:	f003 0308 	and.w	r3, r3, #8
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d017      	beq.n	80037fa <BSP_TS_GetState+0x12e>
      {
        y[index] = brute_x[index];
 80037ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037cc:	005b      	lsls	r3, r3, #1
 80037ce:	3350      	adds	r3, #80	; 0x50
 80037d0:	443b      	add	r3, r7
 80037d2:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 80037d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037d8:	005b      	lsls	r3, r3, #1
 80037da:	3350      	adds	r3, #80	; 0x50
 80037dc:	443b      	add	r3, r7
 80037de:	f823 2c24 	strh.w	r2, [r3, #-36]
        x[index] = brute_y[index];
 80037e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037e4:	005b      	lsls	r3, r3, #1
 80037e6:	3350      	adds	r3, #80	; 0x50
 80037e8:	443b      	add	r3, r7
 80037ea:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 80037ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037f0:	005b      	lsls	r3, r3, #1
 80037f2:	3350      	adds	r3, #80	; 0x50
 80037f4:	443b      	add	r3, r7
 80037f6:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 80037fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037fc:	005b      	lsls	r3, r3, #1
 80037fe:	3350      	adds	r3, #80	; 0x50
 8003800:	443b      	add	r3, r7
 8003802:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003806:	4619      	mov	r1, r3
 8003808:	4a6e      	ldr	r2, [pc, #440]	; (80039c4 <BSP_TS_GetState+0x2f8>)
 800380a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800380c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003810:	4299      	cmp	r1, r3
 8003812:	d90d      	bls.n	8003830 <BSP_TS_GetState+0x164>
 8003814:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003816:	005b      	lsls	r3, r3, #1
 8003818:	3350      	adds	r3, #80	; 0x50
 800381a:	443b      	add	r3, r7
 800381c:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8003820:	4968      	ldr	r1, [pc, #416]	; (80039c4 <BSP_TS_GetState+0x2f8>)
 8003822:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003824:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003828:	b29b      	uxth	r3, r3
 800382a:	1ad3      	subs	r3, r2, r3
 800382c:	b29b      	uxth	r3, r3
 800382e:	e00c      	b.n	800384a <BSP_TS_GetState+0x17e>
 8003830:	4a64      	ldr	r2, [pc, #400]	; (80039c4 <BSP_TS_GetState+0x2f8>)
 8003832:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003834:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003838:	b29a      	uxth	r2, r3
 800383a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800383c:	005b      	lsls	r3, r3, #1
 800383e:	3350      	adds	r3, #80	; 0x50
 8003840:	443b      	add	r3, r7
 8003842:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003846:	1ad3      	subs	r3, r2, r3
 8003848:	b29b      	uxth	r3, r3
 800384a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 800384e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003850:	005b      	lsls	r3, r3, #1
 8003852:	3350      	adds	r3, #80	; 0x50
 8003854:	443b      	add	r3, r7
 8003856:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 800385a:	4619      	mov	r1, r3
 800385c:	4a5a      	ldr	r2, [pc, #360]	; (80039c8 <BSP_TS_GetState+0x2fc>)
 800385e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003860:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003864:	4299      	cmp	r1, r3
 8003866:	d90d      	bls.n	8003884 <BSP_TS_GetState+0x1b8>
 8003868:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800386a:	005b      	lsls	r3, r3, #1
 800386c:	3350      	adds	r3, #80	; 0x50
 800386e:	443b      	add	r3, r7
 8003870:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 8003874:	4954      	ldr	r1, [pc, #336]	; (80039c8 <BSP_TS_GetState+0x2fc>)
 8003876:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003878:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800387c:	b29b      	uxth	r3, r3
 800387e:	1ad3      	subs	r3, r2, r3
 8003880:	b29b      	uxth	r3, r3
 8003882:	e00c      	b.n	800389e <BSP_TS_GetState+0x1d2>
 8003884:	4a50      	ldr	r2, [pc, #320]	; (80039c8 <BSP_TS_GetState+0x2fc>)
 8003886:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003888:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800388c:	b29a      	uxth	r2, r3
 800388e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003890:	005b      	lsls	r3, r3, #1
 8003892:	3350      	adds	r3, #80	; 0x50
 8003894:	443b      	add	r3, r7
 8003896:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 800389a:	1ad3      	subs	r3, r2, r3
 800389c:	b29b      	uxth	r3, r3
 800389e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

      if ((x_diff + y_diff) > 5)
 80038a2:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80038a6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80038aa:	4413      	add	r3, r2
 80038ac:	2b05      	cmp	r3, #5
 80038ae:	dd15      	ble.n	80038dc <BSP_TS_GetState+0x210>
      {
        _x[index] = x[index];
 80038b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038b2:	005b      	lsls	r3, r3, #1
 80038b4:	3350      	adds	r3, #80	; 0x50
 80038b6:	443b      	add	r3, r7
 80038b8:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80038bc:	4619      	mov	r1, r3
 80038be:	4a41      	ldr	r2, [pc, #260]	; (80039c4 <BSP_TS_GetState+0x2f8>)
 80038c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038c2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = y[index];
 80038c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038c8:	005b      	lsls	r3, r3, #1
 80038ca:	3350      	adds	r3, #80	; 0x50
 80038cc:	443b      	add	r3, r7
 80038ce:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 80038d2:	4619      	mov	r1, r3
 80038d4:	4a3c      	ldr	r2, [pc, #240]	; (80039c8 <BSP_TS_GetState+0x2fc>)
 80038d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038d8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }

      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 80038dc:	4b37      	ldr	r3, [pc, #220]	; (80039bc <BSP_TS_GetState+0x2f0>)
 80038de:	781b      	ldrb	r3, [r3, #0]
 80038e0:	2b70      	cmp	r3, #112	; 0x70
 80038e2:	d119      	bne.n	8003918 <BSP_TS_GetState+0x24c>
      {
        TS_State->touchX[index] = x[index];
 80038e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038e6:	005b      	lsls	r3, r3, #1
 80038e8:	3350      	adds	r3, #80	; 0x50
 80038ea:	443b      	add	r3, r7
 80038ec:	f833 1c18 	ldrh.w	r1, [r3, #-24]
 80038f0:	687a      	ldr	r2, [r7, #4]
 80038f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038f4:	005b      	lsls	r3, r3, #1
 80038f6:	4413      	add	r3, r2
 80038f8:	460a      	mov	r2, r1
 80038fa:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = y[index];
 80038fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038fe:	005b      	lsls	r3, r3, #1
 8003900:	3350      	adds	r3, #80	; 0x50
 8003902:	443b      	add	r3, r7
 8003904:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 8003908:	687a      	ldr	r2, [r7, #4]
 800390a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800390c:	3304      	adds	r3, #4
 800390e:	005b      	lsls	r3, r3, #1
 8003910:	4413      	add	r3, r2
 8003912:	460a      	mov	r2, r1
 8003914:	809a      	strh	r2, [r3, #4]
 8003916:	e022      	b.n	800395e <BSP_TS_GetState+0x292>
      }
      else
      {
        /* 2^12 = 4096 : indexes are expressed on a dynamic of 4096 */
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 8003918:	4b2c      	ldr	r3, [pc, #176]	; (80039cc <BSP_TS_GetState+0x300>)
 800391a:	881b      	ldrh	r3, [r3, #0]
 800391c:	4619      	mov	r1, r3
 800391e:	4a29      	ldr	r2, [pc, #164]	; (80039c4 <BSP_TS_GetState+0x2f8>)
 8003920:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003922:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003926:	fb01 f303 	mul.w	r3, r1, r3
 800392a:	0b1b      	lsrs	r3, r3, #12
 800392c:	b299      	uxth	r1, r3
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003932:	005b      	lsls	r3, r3, #1
 8003934:	4413      	add	r3, r2
 8003936:	460a      	mov	r2, r1
 8003938:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 800393a:	4b25      	ldr	r3, [pc, #148]	; (80039d0 <BSP_TS_GetState+0x304>)
 800393c:	881b      	ldrh	r3, [r3, #0]
 800393e:	4619      	mov	r1, r3
 8003940:	4a21      	ldr	r2, [pc, #132]	; (80039c8 <BSP_TS_GetState+0x2fc>)
 8003942:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003944:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003948:	fb01 f303 	mul.w	r3, r1, r3
 800394c:	0b1b      	lsrs	r3, r3, #12
 800394e:	b299      	uxth	r1, r3
 8003950:	687a      	ldr	r2, [r7, #4]
 8003952:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003954:	3304      	adds	r3, #4
 8003956:	005b      	lsls	r3, r3, #1
 8003958:	4413      	add	r3, r2
 800395a:	460a      	mov	r2, r1
 800395c:	809a      	strh	r2, [r3, #4]
      }

#if (TS_MULTI_TOUCH_SUPPORTED == 1)

      /* Get touch info related to the current touch */
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 800395e:	4b17      	ldr	r3, [pc, #92]	; (80039bc <BSP_TS_GetState+0x2f0>)
 8003960:	781b      	ldrb	r3, [r3, #0]
 8003962:	b298      	uxth	r0, r3
 8003964:	f107 010c 	add.w	r1, r7, #12
 8003968:	f107 0210 	add.w	r2, r7, #16
 800396c:	f107 0308 	add.w	r3, r7, #8
 8003970:	9300      	str	r3, [sp, #0]
 8003972:	460b      	mov	r3, r1
 8003974:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003976:	f7fe fa87 	bl	8001e88 <ft5336_TS_GetTouchInfo>

      /* Update TS_State structure */
      TS_State->touchWeight[index] = weight;
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	b2d9      	uxtb	r1, r3
 800397e:	687a      	ldr	r2, [r7, #4]
 8003980:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003982:	4413      	add	r3, r2
 8003984:	3316      	adds	r3, #22
 8003986:	460a      	mov	r2, r1
 8003988:	701a      	strb	r2, [r3, #0]
      TS_State->touchArea[index]   = area;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	b2d9      	uxtb	r1, r3
 800398e:	687a      	ldr	r2, [r7, #4]
 8003990:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003992:	4413      	add	r3, r2
 8003994:	3320      	adds	r3, #32
 8003996:	460a      	mov	r2, r1
 8003998:	701a      	strb	r2, [r3, #0]

      /* Remap touch event */
      switch(event)
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	2b03      	cmp	r3, #3
 800399e:	d835      	bhi.n	8003a0c <BSP_TS_GetState+0x340>
 80039a0:	a201      	add	r2, pc, #4	; (adr r2, 80039a8 <BSP_TS_GetState+0x2dc>)
 80039a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039a6:	bf00      	nop
 80039a8:	080039d5 	.word	0x080039d5
 80039ac:	080039e3 	.word	0x080039e3
 80039b0:	080039f1 	.word	0x080039f1
 80039b4:	080039ff 	.word	0x080039ff
 80039b8:	20000b1c 	.word	0x20000b1c
 80039bc:	20000b25 	.word	0x20000b25
 80039c0:	20000b24 	.word	0x20000b24
 80039c4:	20000b28 	.word	0x20000b28
 80039c8:	20000b3c 	.word	0x20000b3c
 80039cc:	20000b20 	.word	0x20000b20
 80039d0:	20000b22 	.word	0x20000b22
      {
        case FT5336_TOUCH_EVT_FLAG_PRESS_DOWN	:
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 80039d4:	687a      	ldr	r2, [r7, #4]
 80039d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039d8:	4413      	add	r3, r2
 80039da:	331b      	adds	r3, #27
 80039dc:	2201      	movs	r2, #1
 80039de:	701a      	strb	r2, [r3, #0]
          break;
 80039e0:	e018      	b.n	8003a14 <BSP_TS_GetState+0x348>
        case FT5336_TOUCH_EVT_FLAG_LIFT_UP :
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 80039e2:	687a      	ldr	r2, [r7, #4]
 80039e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039e6:	4413      	add	r3, r2
 80039e8:	331b      	adds	r3, #27
 80039ea:	2202      	movs	r2, #2
 80039ec:	701a      	strb	r2, [r3, #0]
          break;
 80039ee:	e011      	b.n	8003a14 <BSP_TS_GetState+0x348>
        case FT5336_TOUCH_EVT_FLAG_CONTACT :
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 80039f0:	687a      	ldr	r2, [r7, #4]
 80039f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039f4:	4413      	add	r3, r2
 80039f6:	331b      	adds	r3, #27
 80039f8:	2203      	movs	r2, #3
 80039fa:	701a      	strb	r2, [r3, #0]
          break;
 80039fc:	e00a      	b.n	8003a14 <BSP_TS_GetState+0x348>
        case FT5336_TOUCH_EVT_FLAG_NO_EVENT :
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a02:	4413      	add	r3, r2
 8003a04:	331b      	adds	r3, #27
 8003a06:	2200      	movs	r2, #0
 8003a08:	701a      	strb	r2, [r3, #0]
          break;
 8003a0a:	e003      	b.n	8003a14 <BSP_TS_GetState+0x348>
        default :
          ts_status = TS_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
          break;
 8003a12:	bf00      	nop
    for(index=0; index < TS_State->touchDetected; index++)
 8003a14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a16:	3301      	adds	r3, #1
 8003a18:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	781b      	ldrb	r3, [r3, #0]
 8003a1e:	461a      	mov	r2, r3
 8003a20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a22:	4293      	cmp	r3, r2
 8003a24:	f4ff ae73 	bcc.w	800370e <BSP_TS_GetState+0x42>

    } /* of for(index=0; index < TS_State->touchDetected; index++) */

#if (TS_MULTI_TOUCH_SUPPORTED == 1)
    /* Get gesture Id */
    ts_status = BSP_TS_Get_GestureId(TS_State);
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	f000 f809 	bl	8003a40 <BSP_TS_Get_GestureId>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 8003a34:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3754      	adds	r7, #84	; 0x54
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd90      	pop	{r4, r7, pc}

08003a40 <BSP_TS_Get_GestureId>:
  * @brief  Update gesture Id following a touch detected.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b084      	sub	sp, #16
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  uint32_t gestureId = 0;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	60bb      	str	r3, [r7, #8]
  uint8_t  ts_status = TS_OK;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	73fb      	strb	r3, [r7, #15]

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 8003a50:	4b3b      	ldr	r3, [pc, #236]	; (8003b40 <BSP_TS_Get_GestureId+0x100>)
 8003a52:	781b      	ldrb	r3, [r3, #0]
 8003a54:	b29b      	uxth	r3, r3
 8003a56:	f107 0208 	add.w	r2, r7, #8
 8003a5a:	4611      	mov	r1, r2
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f7fe f9fa 	bl	8001e56 <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	2b49      	cmp	r3, #73	; 0x49
 8003a66:	d05e      	beq.n	8003b26 <BSP_TS_Get_GestureId+0xe6>
 8003a68:	2b49      	cmp	r3, #73	; 0x49
 8003a6a:	d860      	bhi.n	8003b2e <BSP_TS_Get_GestureId+0xee>
 8003a6c:	2b1c      	cmp	r3, #28
 8003a6e:	d83f      	bhi.n	8003af0 <BSP_TS_Get_GestureId+0xb0>
 8003a70:	2b1c      	cmp	r3, #28
 8003a72:	d85c      	bhi.n	8003b2e <BSP_TS_Get_GestureId+0xee>
 8003a74:	a201      	add	r2, pc, #4	; (adr r2, 8003a7c <BSP_TS_Get_GestureId+0x3c>)
 8003a76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a7a:	bf00      	nop
 8003a7c:	08003af7 	.word	0x08003af7
 8003a80:	08003b2f 	.word	0x08003b2f
 8003a84:	08003b2f 	.word	0x08003b2f
 8003a88:	08003b2f 	.word	0x08003b2f
 8003a8c:	08003b2f 	.word	0x08003b2f
 8003a90:	08003b2f 	.word	0x08003b2f
 8003a94:	08003b2f 	.word	0x08003b2f
 8003a98:	08003b2f 	.word	0x08003b2f
 8003a9c:	08003b2f 	.word	0x08003b2f
 8003aa0:	08003b2f 	.word	0x08003b2f
 8003aa4:	08003b2f 	.word	0x08003b2f
 8003aa8:	08003b2f 	.word	0x08003b2f
 8003aac:	08003b2f 	.word	0x08003b2f
 8003ab0:	08003b2f 	.word	0x08003b2f
 8003ab4:	08003b2f 	.word	0x08003b2f
 8003ab8:	08003b2f 	.word	0x08003b2f
 8003abc:	08003aff 	.word	0x08003aff
 8003ac0:	08003b2f 	.word	0x08003b2f
 8003ac4:	08003b2f 	.word	0x08003b2f
 8003ac8:	08003b2f 	.word	0x08003b2f
 8003acc:	08003b07 	.word	0x08003b07
 8003ad0:	08003b2f 	.word	0x08003b2f
 8003ad4:	08003b2f 	.word	0x08003b2f
 8003ad8:	08003b2f 	.word	0x08003b2f
 8003adc:	08003b0f 	.word	0x08003b0f
 8003ae0:	08003b2f 	.word	0x08003b2f
 8003ae4:	08003b2f 	.word	0x08003b2f
 8003ae8:	08003b2f 	.word	0x08003b2f
 8003aec:	08003b17 	.word	0x08003b17
 8003af0:	2b40      	cmp	r3, #64	; 0x40
 8003af2:	d014      	beq.n	8003b1e <BSP_TS_Get_GestureId+0xde>
 8003af4:	e01b      	b.n	8003b2e <BSP_TS_Get_GestureId+0xee>
  {
    case FT5336_GEST_ID_NO_GESTURE :
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2200      	movs	r2, #0
 8003afa:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8003afc:	e01a      	b.n	8003b34 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_UP :
      TS_State->gestureId = GEST_ID_MOVE_UP;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2201      	movs	r2, #1
 8003b02:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8003b04:	e016      	b.n	8003b34 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_RIGHT :
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2202      	movs	r2, #2
 8003b0a:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8003b0c:	e012      	b.n	8003b34 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_DOWN :
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2203      	movs	r2, #3
 8003b12:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8003b14:	e00e      	b.n	8003b34 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_LEFT :
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2204      	movs	r2, #4
 8003b1a:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8003b1c:	e00a      	b.n	8003b34 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_IN :
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2205      	movs	r2, #5
 8003b22:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8003b24:	e006      	b.n	8003b34 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_OUT :
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2206      	movs	r2, #6
 8003b2a:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8003b2c:	e002      	b.n	8003b34 <BSP_TS_Get_GestureId+0xf4>
    default :
      ts_status = TS_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	73fb      	strb	r3, [r7, #15]
      break;
 8003b32:	bf00      	nop
  } /* of switch(gestureId) */

  return(ts_status);
 8003b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3710      	adds	r7, #16
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	20000b25 	.word	0x20000b25

08003b44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b48:	2003      	movs	r0, #3
 8003b4a:	f000 f94d 	bl	8003de8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003b4e:	2000      	movs	r0, #0
 8003b50:	f000 f806 	bl	8003b60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003b54:	f7fd fa6e 	bl	8001034 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003b58:	2300      	movs	r3, #0
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	bd80      	pop	{r7, pc}
	...

08003b60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b082      	sub	sp, #8
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003b68:	4b12      	ldr	r3, [pc, #72]	; (8003bb4 <HAL_InitTick+0x54>)
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	4b12      	ldr	r3, [pc, #72]	; (8003bb8 <HAL_InitTick+0x58>)
 8003b6e:	781b      	ldrb	r3, [r3, #0]
 8003b70:	4619      	mov	r1, r3
 8003b72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b76:	fbb3 f3f1 	udiv	r3, r3, r1
 8003b7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f000 f967 	bl	8003e52 <HAL_SYSTICK_Config>
 8003b84:	4603      	mov	r3, r0
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d001      	beq.n	8003b8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e00e      	b.n	8003bac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2b0f      	cmp	r3, #15
 8003b92:	d80a      	bhi.n	8003baa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003b94:	2200      	movs	r2, #0
 8003b96:	6879      	ldr	r1, [r7, #4]
 8003b98:	f04f 30ff 	mov.w	r0, #4294967295
 8003b9c:	f000 f92f 	bl	8003dfe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003ba0:	4a06      	ldr	r2, [pc, #24]	; (8003bbc <HAL_InitTick+0x5c>)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	e000      	b.n	8003bac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3708      	adds	r7, #8
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}
 8003bb4:	20000004 	.word	0x20000004
 8003bb8:	20000048 	.word	0x20000048
 8003bbc:	20000044 	.word	0x20000044

08003bc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003bc4:	4b06      	ldr	r3, [pc, #24]	; (8003be0 <HAL_IncTick+0x20>)
 8003bc6:	781b      	ldrb	r3, [r3, #0]
 8003bc8:	461a      	mov	r2, r3
 8003bca:	4b06      	ldr	r3, [pc, #24]	; (8003be4 <HAL_IncTick+0x24>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4413      	add	r3, r2
 8003bd0:	4a04      	ldr	r2, [pc, #16]	; (8003be4 <HAL_IncTick+0x24>)
 8003bd2:	6013      	str	r3, [r2, #0]
}
 8003bd4:	bf00      	nop
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bdc:	4770      	bx	lr
 8003bde:	bf00      	nop
 8003be0:	20000048 	.word	0x20000048
 8003be4:	20000b50 	.word	0x20000b50

08003be8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003be8:	b480      	push	{r7}
 8003bea:	af00      	add	r7, sp, #0
  return uwTick;
 8003bec:	4b03      	ldr	r3, [pc, #12]	; (8003bfc <HAL_GetTick+0x14>)
 8003bee:	681b      	ldr	r3, [r3, #0]
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr
 8003bfa:	bf00      	nop
 8003bfc:	20000b50 	.word	0x20000b50

08003c00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b084      	sub	sp, #16
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003c08:	f7ff ffee 	bl	8003be8 <HAL_GetTick>
 8003c0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c18:	d005      	beq.n	8003c26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003c1a:	4b0a      	ldr	r3, [pc, #40]	; (8003c44 <HAL_Delay+0x44>)
 8003c1c:	781b      	ldrb	r3, [r3, #0]
 8003c1e:	461a      	mov	r2, r3
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	4413      	add	r3, r2
 8003c24:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003c26:	bf00      	nop
 8003c28:	f7ff ffde 	bl	8003be8 <HAL_GetTick>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	68fa      	ldr	r2, [r7, #12]
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d8f7      	bhi.n	8003c28 <HAL_Delay+0x28>
  {
  }
}
 8003c38:	bf00      	nop
 8003c3a:	bf00      	nop
 8003c3c:	3710      	adds	r7, #16
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	20000048 	.word	0x20000048

08003c48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b085      	sub	sp, #20
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f003 0307 	and.w	r3, r3, #7
 8003c56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c58:	4b0b      	ldr	r3, [pc, #44]	; (8003c88 <__NVIC_SetPriorityGrouping+0x40>)
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c5e:	68ba      	ldr	r2, [r7, #8]
 8003c60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c64:	4013      	ands	r3, r2
 8003c66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003c70:	4b06      	ldr	r3, [pc, #24]	; (8003c8c <__NVIC_SetPriorityGrouping+0x44>)
 8003c72:	4313      	orrs	r3, r2
 8003c74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c76:	4a04      	ldr	r2, [pc, #16]	; (8003c88 <__NVIC_SetPriorityGrouping+0x40>)
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	60d3      	str	r3, [r2, #12]
}
 8003c7c:	bf00      	nop
 8003c7e:	3714      	adds	r7, #20
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr
 8003c88:	e000ed00 	.word	0xe000ed00
 8003c8c:	05fa0000 	.word	0x05fa0000

08003c90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c90:	b480      	push	{r7}
 8003c92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c94:	4b04      	ldr	r3, [pc, #16]	; (8003ca8 <__NVIC_GetPriorityGrouping+0x18>)
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	0a1b      	lsrs	r3, r3, #8
 8003c9a:	f003 0307 	and.w	r3, r3, #7
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr
 8003ca8:	e000ed00 	.word	0xe000ed00

08003cac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b083      	sub	sp, #12
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	db0b      	blt.n	8003cd6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003cbe:	79fb      	ldrb	r3, [r7, #7]
 8003cc0:	f003 021f 	and.w	r2, r3, #31
 8003cc4:	4907      	ldr	r1, [pc, #28]	; (8003ce4 <__NVIC_EnableIRQ+0x38>)
 8003cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cca:	095b      	lsrs	r3, r3, #5
 8003ccc:	2001      	movs	r0, #1
 8003cce:	fa00 f202 	lsl.w	r2, r0, r2
 8003cd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003cd6:	bf00      	nop
 8003cd8:	370c      	adds	r7, #12
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr
 8003ce2:	bf00      	nop
 8003ce4:	e000e100 	.word	0xe000e100

08003ce8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b083      	sub	sp, #12
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	4603      	mov	r3, r0
 8003cf0:	6039      	str	r1, [r7, #0]
 8003cf2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	db0a      	blt.n	8003d12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	b2da      	uxtb	r2, r3
 8003d00:	490c      	ldr	r1, [pc, #48]	; (8003d34 <__NVIC_SetPriority+0x4c>)
 8003d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d06:	0112      	lsls	r2, r2, #4
 8003d08:	b2d2      	uxtb	r2, r2
 8003d0a:	440b      	add	r3, r1
 8003d0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d10:	e00a      	b.n	8003d28 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	b2da      	uxtb	r2, r3
 8003d16:	4908      	ldr	r1, [pc, #32]	; (8003d38 <__NVIC_SetPriority+0x50>)
 8003d18:	79fb      	ldrb	r3, [r7, #7]
 8003d1a:	f003 030f 	and.w	r3, r3, #15
 8003d1e:	3b04      	subs	r3, #4
 8003d20:	0112      	lsls	r2, r2, #4
 8003d22:	b2d2      	uxtb	r2, r2
 8003d24:	440b      	add	r3, r1
 8003d26:	761a      	strb	r2, [r3, #24]
}
 8003d28:	bf00      	nop
 8003d2a:	370c      	adds	r7, #12
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr
 8003d34:	e000e100 	.word	0xe000e100
 8003d38:	e000ed00 	.word	0xe000ed00

08003d3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b089      	sub	sp, #36	; 0x24
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	60f8      	str	r0, [r7, #12]
 8003d44:	60b9      	str	r1, [r7, #8]
 8003d46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f003 0307 	and.w	r3, r3, #7
 8003d4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d50:	69fb      	ldr	r3, [r7, #28]
 8003d52:	f1c3 0307 	rsb	r3, r3, #7
 8003d56:	2b04      	cmp	r3, #4
 8003d58:	bf28      	it	cs
 8003d5a:	2304      	movcs	r3, #4
 8003d5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d5e:	69fb      	ldr	r3, [r7, #28]
 8003d60:	3304      	adds	r3, #4
 8003d62:	2b06      	cmp	r3, #6
 8003d64:	d902      	bls.n	8003d6c <NVIC_EncodePriority+0x30>
 8003d66:	69fb      	ldr	r3, [r7, #28]
 8003d68:	3b03      	subs	r3, #3
 8003d6a:	e000      	b.n	8003d6e <NVIC_EncodePriority+0x32>
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d70:	f04f 32ff 	mov.w	r2, #4294967295
 8003d74:	69bb      	ldr	r3, [r7, #24]
 8003d76:	fa02 f303 	lsl.w	r3, r2, r3
 8003d7a:	43da      	mvns	r2, r3
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	401a      	ands	r2, r3
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d84:	f04f 31ff 	mov.w	r1, #4294967295
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d8e:	43d9      	mvns	r1, r3
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d94:	4313      	orrs	r3, r2
         );
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3724      	adds	r7, #36	; 0x24
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr
	...

08003da4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b082      	sub	sp, #8
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	3b01      	subs	r3, #1
 8003db0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003db4:	d301      	bcc.n	8003dba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003db6:	2301      	movs	r3, #1
 8003db8:	e00f      	b.n	8003dda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003dba:	4a0a      	ldr	r2, [pc, #40]	; (8003de4 <SysTick_Config+0x40>)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	3b01      	subs	r3, #1
 8003dc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003dc2:	210f      	movs	r1, #15
 8003dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8003dc8:	f7ff ff8e 	bl	8003ce8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003dcc:	4b05      	ldr	r3, [pc, #20]	; (8003de4 <SysTick_Config+0x40>)
 8003dce:	2200      	movs	r2, #0
 8003dd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003dd2:	4b04      	ldr	r3, [pc, #16]	; (8003de4 <SysTick_Config+0x40>)
 8003dd4:	2207      	movs	r2, #7
 8003dd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003dd8:	2300      	movs	r3, #0
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3708      	adds	r7, #8
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	e000e010 	.word	0xe000e010

08003de8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b082      	sub	sp, #8
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	f7ff ff29 	bl	8003c48 <__NVIC_SetPriorityGrouping>
}
 8003df6:	bf00      	nop
 8003df8:	3708      	adds	r7, #8
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}

08003dfe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003dfe:	b580      	push	{r7, lr}
 8003e00:	b086      	sub	sp, #24
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	4603      	mov	r3, r0
 8003e06:	60b9      	str	r1, [r7, #8]
 8003e08:	607a      	str	r2, [r7, #4]
 8003e0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003e10:	f7ff ff3e 	bl	8003c90 <__NVIC_GetPriorityGrouping>
 8003e14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e16:	687a      	ldr	r2, [r7, #4]
 8003e18:	68b9      	ldr	r1, [r7, #8]
 8003e1a:	6978      	ldr	r0, [r7, #20]
 8003e1c:	f7ff ff8e 	bl	8003d3c <NVIC_EncodePriority>
 8003e20:	4602      	mov	r2, r0
 8003e22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e26:	4611      	mov	r1, r2
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f7ff ff5d 	bl	8003ce8 <__NVIC_SetPriority>
}
 8003e2e:	bf00      	nop
 8003e30:	3718      	adds	r7, #24
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}

08003e36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e36:	b580      	push	{r7, lr}
 8003e38:	b082      	sub	sp, #8
 8003e3a:	af00      	add	r7, sp, #0
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e44:	4618      	mov	r0, r3
 8003e46:	f7ff ff31 	bl	8003cac <__NVIC_EnableIRQ>
}
 8003e4a:	bf00      	nop
 8003e4c:	3708      	adds	r7, #8
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}

08003e52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e52:	b580      	push	{r7, lr}
 8003e54:	b082      	sub	sp, #8
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f7ff ffa2 	bl	8003da4 <SysTick_Config>
 8003e60:	4603      	mov	r3, r0
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3708      	adds	r7, #8
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
	...

08003e6c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b086      	sub	sp, #24
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003e74:	2300      	movs	r3, #0
 8003e76:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003e78:	f7ff feb6 	bl	8003be8 <HAL_GetTick>
 8003e7c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d101      	bne.n	8003e88 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	e099      	b.n	8003fbc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2202      	movs	r2, #2
 8003e8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2200      	movs	r2, #0
 8003e94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f022 0201 	bic.w	r2, r2, #1
 8003ea6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ea8:	e00f      	b.n	8003eca <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003eaa:	f7ff fe9d 	bl	8003be8 <HAL_GetTick>
 8003eae:	4602      	mov	r2, r0
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	1ad3      	subs	r3, r2, r3
 8003eb4:	2b05      	cmp	r3, #5
 8003eb6:	d908      	bls.n	8003eca <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2220      	movs	r2, #32
 8003ebc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2203      	movs	r2, #3
 8003ec2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003ec6:	2303      	movs	r3, #3
 8003ec8:	e078      	b.n	8003fbc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 0301 	and.w	r3, r3, #1
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d1e8      	bne.n	8003eaa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003ee0:	697a      	ldr	r2, [r7, #20]
 8003ee2:	4b38      	ldr	r3, [pc, #224]	; (8003fc4 <HAL_DMA_Init+0x158>)
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	685a      	ldr	r2, [r3, #4]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ef6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	691b      	ldr	r3, [r3, #16]
 8003efc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f02:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	699b      	ldr	r3, [r3, #24]
 8003f08:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f0e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6a1b      	ldr	r3, [r3, #32]
 8003f14:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f16:	697a      	ldr	r2, [r7, #20]
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f20:	2b04      	cmp	r3, #4
 8003f22:	d107      	bne.n	8003f34 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	697a      	ldr	r2, [r7, #20]
 8003f30:	4313      	orrs	r3, r2
 8003f32:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	697a      	ldr	r2, [r7, #20]
 8003f3a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	695b      	ldr	r3, [r3, #20]
 8003f42:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	f023 0307 	bic.w	r3, r3, #7
 8003f4a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f50:	697a      	ldr	r2, [r7, #20]
 8003f52:	4313      	orrs	r3, r2
 8003f54:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5a:	2b04      	cmp	r3, #4
 8003f5c:	d117      	bne.n	8003f8e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f62:	697a      	ldr	r2, [r7, #20]
 8003f64:	4313      	orrs	r3, r2
 8003f66:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d00e      	beq.n	8003f8e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	f000 f92d 	bl	80041d0 <DMA_CheckFifoParam>
 8003f76:	4603      	mov	r3, r0
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d008      	beq.n	8003f8e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2240      	movs	r2, #64	; 0x40
 8003f80:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2201      	movs	r2, #1
 8003f86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e016      	b.n	8003fbc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	697a      	ldr	r2, [r7, #20]
 8003f94:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f000 f8e4 	bl	8004164 <DMA_CalcBaseAndBitshift>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fa4:	223f      	movs	r2, #63	; 0x3f
 8003fa6:	409a      	lsls	r2, r3
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003fba:	2300      	movs	r3, #0
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3718      	adds	r7, #24
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}
 8003fc4:	f010803f 	.word	0xf010803f

08003fc8 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b084      	sub	sp, #16
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d101      	bne.n	8003fda <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e050      	b.n	800407c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	2b02      	cmp	r3, #2
 8003fe4:	d101      	bne.n	8003fea <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8003fe6:	2302      	movs	r3, #2
 8003fe8:	e048      	b.n	800407c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f022 0201 	bic.w	r2, r2, #1
 8003ff8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	2200      	movs	r2, #0
 8004000:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	2200      	movs	r2, #0
 8004008:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	2200      	movs	r2, #0
 8004010:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	2200      	movs	r2, #0
 8004018:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	2200      	movs	r2, #0
 8004020:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	2221      	movs	r2, #33	; 0x21
 8004028:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f000 f89a 	bl	8004164 <DMA_CalcBaseAndBitshift>
 8004030:	4603      	mov	r3, r0
 8004032:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004038:	223f      	movs	r2, #63	; 0x3f
 800403a:	409a      	lsls	r2, r3
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2200      	movs	r2, #0
 8004044:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2200      	movs	r2, #0
 8004050:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2200      	movs	r2, #0
 8004056:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2200      	movs	r2, #0
 8004062:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2200      	movs	r2, #0
 8004068:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2200      	movs	r2, #0
 800406e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800407a:	2300      	movs	r3, #0
}
 800407c:	4618      	mov	r0, r3
 800407e:	3710      	adds	r7, #16
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}

08004084 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b084      	sub	sp, #16
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004090:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004092:	f7ff fda9 	bl	8003be8 <HAL_GetTick>
 8004096:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800409e:	b2db      	uxtb	r3, r3
 80040a0:	2b02      	cmp	r3, #2
 80040a2:	d008      	beq.n	80040b6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2280      	movs	r2, #128	; 0x80
 80040a8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2200      	movs	r2, #0
 80040ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e052      	b.n	800415c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f022 0216 	bic.w	r2, r2, #22
 80040c4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	695a      	ldr	r2, [r3, #20]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80040d4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d103      	bne.n	80040e6 <HAL_DMA_Abort+0x62>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d007      	beq.n	80040f6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f022 0208 	bic.w	r2, r2, #8
 80040f4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f022 0201 	bic.w	r2, r2, #1
 8004104:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004106:	e013      	b.n	8004130 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004108:	f7ff fd6e 	bl	8003be8 <HAL_GetTick>
 800410c:	4602      	mov	r2, r0
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	2b05      	cmp	r3, #5
 8004114:	d90c      	bls.n	8004130 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2220      	movs	r2, #32
 800411a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2203      	movs	r2, #3
 8004120:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2200      	movs	r2, #0
 8004128:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 800412c:	2303      	movs	r3, #3
 800412e:	e015      	b.n	800415c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 0301 	and.w	r3, r3, #1
 800413a:	2b00      	cmp	r3, #0
 800413c:	d1e4      	bne.n	8004108 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004142:	223f      	movs	r2, #63	; 0x3f
 8004144:	409a      	lsls	r2, r3
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2201      	movs	r2, #1
 800414e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2200      	movs	r2, #0
 8004156:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800415a:	2300      	movs	r3, #0
}
 800415c:	4618      	mov	r0, r3
 800415e:	3710      	adds	r7, #16
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}

08004164 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004164:	b480      	push	{r7}
 8004166:	b085      	sub	sp, #20
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	b2db      	uxtb	r3, r3
 8004172:	3b10      	subs	r3, #16
 8004174:	4a13      	ldr	r2, [pc, #76]	; (80041c4 <DMA_CalcBaseAndBitshift+0x60>)
 8004176:	fba2 2303 	umull	r2, r3, r2, r3
 800417a:	091b      	lsrs	r3, r3, #4
 800417c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800417e:	4a12      	ldr	r2, [pc, #72]	; (80041c8 <DMA_CalcBaseAndBitshift+0x64>)
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	4413      	add	r3, r2
 8004184:	781b      	ldrb	r3, [r3, #0]
 8004186:	461a      	mov	r2, r3
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2b03      	cmp	r3, #3
 8004190:	d908      	bls.n	80041a4 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	461a      	mov	r2, r3
 8004198:	4b0c      	ldr	r3, [pc, #48]	; (80041cc <DMA_CalcBaseAndBitshift+0x68>)
 800419a:	4013      	ands	r3, r2
 800419c:	1d1a      	adds	r2, r3, #4
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	659a      	str	r2, [r3, #88]	; 0x58
 80041a2:	e006      	b.n	80041b2 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	461a      	mov	r2, r3
 80041aa:	4b08      	ldr	r3, [pc, #32]	; (80041cc <DMA_CalcBaseAndBitshift+0x68>)
 80041ac:	4013      	ands	r3, r2
 80041ae:	687a      	ldr	r2, [r7, #4]
 80041b0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3714      	adds	r7, #20
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr
 80041c2:	bf00      	nop
 80041c4:	aaaaaaab 	.word	0xaaaaaaab
 80041c8:	0801d004 	.word	0x0801d004
 80041cc:	fffffc00 	.word	0xfffffc00

080041d0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b085      	sub	sp, #20
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041d8:	2300      	movs	r3, #0
 80041da:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041e0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	699b      	ldr	r3, [r3, #24]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d11f      	bne.n	800422a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	2b03      	cmp	r3, #3
 80041ee:	d856      	bhi.n	800429e <DMA_CheckFifoParam+0xce>
 80041f0:	a201      	add	r2, pc, #4	; (adr r2, 80041f8 <DMA_CheckFifoParam+0x28>)
 80041f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041f6:	bf00      	nop
 80041f8:	08004209 	.word	0x08004209
 80041fc:	0800421b 	.word	0x0800421b
 8004200:	08004209 	.word	0x08004209
 8004204:	0800429f 	.word	0x0800429f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800420c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004210:	2b00      	cmp	r3, #0
 8004212:	d046      	beq.n	80042a2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004218:	e043      	b.n	80042a2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800421e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004222:	d140      	bne.n	80042a6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004228:	e03d      	b.n	80042a6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	699b      	ldr	r3, [r3, #24]
 800422e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004232:	d121      	bne.n	8004278 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	2b03      	cmp	r3, #3
 8004238:	d837      	bhi.n	80042aa <DMA_CheckFifoParam+0xda>
 800423a:	a201      	add	r2, pc, #4	; (adr r2, 8004240 <DMA_CheckFifoParam+0x70>)
 800423c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004240:	08004251 	.word	0x08004251
 8004244:	08004257 	.word	0x08004257
 8004248:	08004251 	.word	0x08004251
 800424c:	08004269 	.word	0x08004269
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	73fb      	strb	r3, [r7, #15]
      break;
 8004254:	e030      	b.n	80042b8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800425a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800425e:	2b00      	cmp	r3, #0
 8004260:	d025      	beq.n	80042ae <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004266:	e022      	b.n	80042ae <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800426c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004270:	d11f      	bne.n	80042b2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004276:	e01c      	b.n	80042b2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	2b02      	cmp	r3, #2
 800427c:	d903      	bls.n	8004286 <DMA_CheckFifoParam+0xb6>
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	2b03      	cmp	r3, #3
 8004282:	d003      	beq.n	800428c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004284:	e018      	b.n	80042b8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	73fb      	strb	r3, [r7, #15]
      break;
 800428a:	e015      	b.n	80042b8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004290:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004294:	2b00      	cmp	r3, #0
 8004296:	d00e      	beq.n	80042b6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	73fb      	strb	r3, [r7, #15]
      break;
 800429c:	e00b      	b.n	80042b6 <DMA_CheckFifoParam+0xe6>
      break;
 800429e:	bf00      	nop
 80042a0:	e00a      	b.n	80042b8 <DMA_CheckFifoParam+0xe8>
      break;
 80042a2:	bf00      	nop
 80042a4:	e008      	b.n	80042b8 <DMA_CheckFifoParam+0xe8>
      break;
 80042a6:	bf00      	nop
 80042a8:	e006      	b.n	80042b8 <DMA_CheckFifoParam+0xe8>
      break;
 80042aa:	bf00      	nop
 80042ac:	e004      	b.n	80042b8 <DMA_CheckFifoParam+0xe8>
      break;
 80042ae:	bf00      	nop
 80042b0:	e002      	b.n	80042b8 <DMA_CheckFifoParam+0xe8>
      break;   
 80042b2:	bf00      	nop
 80042b4:	e000      	b.n	80042b8 <DMA_CheckFifoParam+0xe8>
      break;
 80042b6:	bf00      	nop
    }
  } 
  
  return status; 
 80042b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3714      	adds	r7, #20
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr
 80042c6:	bf00      	nop

080042c8 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b082      	sub	sp, #8
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d101      	bne.n	80042da <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	e039      	b.n	800434e <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d106      	bne.n	80042f4 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2200      	movs	r2, #0
 80042ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f7fc fec4 	bl	800107c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2202      	movs	r2, #2
 80042f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	685a      	ldr	r2, [r3, #4]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	430a      	orrs	r2, r1
 8004310:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004318:	f023 0107 	bic.w	r1, r3, #7
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	689a      	ldr	r2, [r3, #8]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	430a      	orrs	r2, r1
 8004326:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800432e:	4b0a      	ldr	r3, [pc, #40]	; (8004358 <HAL_DMA2D_Init+0x90>)
 8004330:	4013      	ands	r3, r2
 8004332:	687a      	ldr	r2, [r7, #4]
 8004334:	68d1      	ldr	r1, [r2, #12]
 8004336:	687a      	ldr	r2, [r7, #4]
 8004338:	6812      	ldr	r2, [r2, #0]
 800433a:	430b      	orrs	r3, r1
 800433c:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2200      	movs	r2, #0
 8004342:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2201      	movs	r2, #1
 8004348:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800434c:	2300      	movs	r3, #0
}
 800434e:	4618      	mov	r0, r3
 8004350:	3708      	adds	r7, #8
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}
 8004356:	bf00      	nop
 8004358:	ffffc000 	.word	0xffffc000

0800435c <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b086      	sub	sp, #24
 8004360:	af02      	add	r7, sp, #8
 8004362:	60f8      	str	r0, [r7, #12]
 8004364:	60b9      	str	r1, [r7, #8]
 8004366:	607a      	str	r2, [r7, #4]
 8004368:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004370:	2b01      	cmp	r3, #1
 8004372:	d101      	bne.n	8004378 <HAL_DMA2D_Start+0x1c>
 8004374:	2302      	movs	r3, #2
 8004376:	e018      	b.n	80043aa <HAL_DMA2D_Start+0x4e>
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2201      	movs	r2, #1
 800437c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2202      	movs	r2, #2
 8004384:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8004388:	69bb      	ldr	r3, [r7, #24]
 800438a:	9300      	str	r3, [sp, #0]
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	68b9      	ldr	r1, [r7, #8]
 8004392:	68f8      	ldr	r0, [r7, #12]
 8004394:	f000 f988 	bl	80046a8 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f042 0201 	orr.w	r2, r2, #1
 80043a6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80043a8:	2300      	movs	r3, #0
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	3710      	adds	r7, #16
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}

080043b2 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80043b2:	b580      	push	{r7, lr}
 80043b4:	b086      	sub	sp, #24
 80043b6:	af00      	add	r7, sp, #0
 80043b8:	6078      	str	r0, [r7, #4]
 80043ba:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80043bc:	2300      	movs	r3, #0
 80043be:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 0301 	and.w	r3, r3, #1
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d056      	beq.n	800447c <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80043ce:	f7ff fc0b 	bl	8003be8 <HAL_GetTick>
 80043d2:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80043d4:	e04b      	b.n	800446e <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d023      	beq.n	8004430 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f003 0320 	and.w	r3, r3, #32
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d005      	beq.n	80043fe <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043f6:	f043 0202 	orr.w	r2, r3, #2
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	f003 0301 	and.w	r3, r3, #1
 8004404:	2b00      	cmp	r3, #0
 8004406:	d005      	beq.n	8004414 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800440c:	f043 0201 	orr.w	r2, r3, #1
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	2221      	movs	r2, #33	; 0x21
 800441a:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2204      	movs	r2, #4
 8004420:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2200      	movs	r2, #0
 8004428:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	e0a5      	b.n	800457c <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004436:	d01a      	beq.n	800446e <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004438:	f7ff fbd6 	bl	8003be8 <HAL_GetTick>
 800443c:	4602      	mov	r2, r0
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	683a      	ldr	r2, [r7, #0]
 8004444:	429a      	cmp	r2, r3
 8004446:	d302      	bcc.n	800444e <HAL_DMA2D_PollForTransfer+0x9c>
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d10f      	bne.n	800446e <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004452:	f043 0220 	orr.w	r2, r3, #32
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2203      	movs	r2, #3
 800445e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2200      	movs	r2, #0
 8004466:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 800446a:	2303      	movs	r3, #3
 800446c:	e086      	b.n	800457c <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	f003 0302 	and.w	r3, r3, #2
 8004478:	2b00      	cmp	r3, #0
 800447a:	d0ac      	beq.n	80043d6 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	69db      	ldr	r3, [r3, #28]
 8004482:	f003 0320 	and.w	r3, r3, #32
 8004486:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800448e:	f003 0320 	and.w	r3, r3, #32
 8004492:	693a      	ldr	r2, [r7, #16]
 8004494:	4313      	orrs	r3, r2
 8004496:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d061      	beq.n	8004562 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800449e:	f7ff fba3 	bl	8003be8 <HAL_GetTick>
 80044a2:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80044a4:	e056      	b.n	8004554 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	f003 0329 	and.w	r3, r3, #41	; 0x29
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d02e      	beq.n	8004516 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f003 0308 	and.w	r3, r3, #8
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d005      	beq.n	80044ce <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044c6:	f043 0204 	orr.w	r2, r3, #4
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	f003 0320 	and.w	r3, r3, #32
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d005      	beq.n	80044e4 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044dc:	f043 0202 	orr.w	r2, r3, #2
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f003 0301 	and.w	r3, r3, #1
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d005      	beq.n	80044fa <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044f2:	f043 0201 	orr.w	r2, r3, #1
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	2229      	movs	r2, #41	; 0x29
 8004500:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2204      	movs	r2, #4
 8004506:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2200      	movs	r2, #0
 800450e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e032      	b.n	800457c <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800451c:	d01a      	beq.n	8004554 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800451e:	f7ff fb63 	bl	8003be8 <HAL_GetTick>
 8004522:	4602      	mov	r2, r0
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	1ad3      	subs	r3, r2, r3
 8004528:	683a      	ldr	r2, [r7, #0]
 800452a:	429a      	cmp	r2, r3
 800452c:	d302      	bcc.n	8004534 <HAL_DMA2D_PollForTransfer+0x182>
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d10f      	bne.n	8004554 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004538:	f043 0220 	orr.w	r2, r3, #32
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2203      	movs	r2, #3
 8004544:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2200      	movs	r2, #0
 800454c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8004550:	2303      	movs	r3, #3
 8004552:	e013      	b.n	800457c <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	f003 0310 	and.w	r3, r3, #16
 800455e:	2b00      	cmp	r3, #0
 8004560:	d0a1      	beq.n	80044a6 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	2212      	movs	r2, #18
 8004568:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2201      	movs	r2, #1
 800456e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2200      	movs	r2, #0
 8004576:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800457a:	2300      	movs	r3, #0
}
 800457c:	4618      	mov	r0, r3
 800457e:	3718      	adds	r7, #24
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}

08004584 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8004584:	b480      	push	{r7}
 8004586:	b087      	sub	sp, #28
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
 800458c:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800459c:	2b01      	cmp	r3, #1
 800459e:	d101      	bne.n	80045a4 <HAL_DMA2D_ConfigLayer+0x20>
 80045a0:	2302      	movs	r3, #2
 80045a2:	e079      	b.n	8004698 <HAL_DMA2D_ConfigLayer+0x114>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2201      	movs	r2, #1
 80045a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2202      	movs	r2, #2
 80045b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	011b      	lsls	r3, r3, #4
 80045b8:	3318      	adds	r3, #24
 80045ba:	687a      	ldr	r2, [r7, #4]
 80045bc:	4413      	add	r3, r2
 80045be:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	685a      	ldr	r2, [r3, #4]
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	041b      	lsls	r3, r3, #16
 80045ca:	4313      	orrs	r3, r2
 80045cc:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80045ce:	4b35      	ldr	r3, [pc, #212]	; (80046a4 <HAL_DMA2D_ConfigLayer+0x120>)
 80045d0:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	2b0a      	cmp	r3, #10
 80045d8:	d003      	beq.n	80045e2 <HAL_DMA2D_ConfigLayer+0x5e>
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	2b09      	cmp	r3, #9
 80045e0:	d107      	bne.n	80045f2 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	68db      	ldr	r3, [r3, #12]
 80045e6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80045ea:	697a      	ldr	r2, [r7, #20]
 80045ec:	4313      	orrs	r3, r2
 80045ee:	617b      	str	r3, [r7, #20]
 80045f0:	e005      	b.n	80045fe <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	68db      	ldr	r3, [r3, #12]
 80045f6:	061b      	lsls	r3, r3, #24
 80045f8:	697a      	ldr	r2, [r7, #20]
 80045fa:	4313      	orrs	r3, r2
 80045fc:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d120      	bne.n	8004646 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	43db      	mvns	r3, r3
 800460e:	ea02 0103 	and.w	r1, r2, r3
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	697a      	ldr	r2, [r7, #20]
 8004618:	430a      	orrs	r2, r1
 800461a:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	693a      	ldr	r2, [r7, #16]
 8004622:	6812      	ldr	r2, [r2, #0]
 8004624:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	2b0a      	cmp	r3, #10
 800462c:	d003      	beq.n	8004636 <HAL_DMA2D_ConfigLayer+0xb2>
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	2b09      	cmp	r3, #9
 8004634:	d127      	bne.n	8004686 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	68da      	ldr	r2, [r3, #12]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004642:	629a      	str	r2, [r3, #40]	; 0x28
 8004644:	e01f      	b.n	8004686 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	69da      	ldr	r2, [r3, #28]
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	43db      	mvns	r3, r3
 8004650:	ea02 0103 	and.w	r1, r2, r3
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	697a      	ldr	r2, [r7, #20]
 800465a:	430a      	orrs	r2, r1
 800465c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	693a      	ldr	r2, [r7, #16]
 8004664:	6812      	ldr	r2, [r2, #0]
 8004666:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	2b0a      	cmp	r3, #10
 800466e:	d003      	beq.n	8004678 <HAL_DMA2D_ConfigLayer+0xf4>
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	2b09      	cmp	r3, #9
 8004676:	d106      	bne.n	8004686 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	68da      	ldr	r2, [r3, #12]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004684:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2201      	movs	r2, #1
 800468a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2200      	movs	r2, #0
 8004692:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004696:	2300      	movs	r3, #0
}
 8004698:	4618      	mov	r0, r3
 800469a:	371c      	adds	r7, #28
 800469c:	46bd      	mov	sp, r7
 800469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a2:	4770      	bx	lr
 80046a4:	ff03000f 	.word	0xff03000f

080046a8 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b08b      	sub	sp, #44	; 0x2c
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	60f8      	str	r0, [r7, #12]
 80046b0:	60b9      	str	r1, [r7, #8]
 80046b2:	607a      	str	r2, [r7, #4]
 80046b4:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046bc:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	041a      	lsls	r2, r3, #16
 80046c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046c6:	431a      	orrs	r2, r3
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	430a      	orrs	r2, r1
 80046ce:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	687a      	ldr	r2, [r7, #4]
 80046d6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80046e0:	d174      	bne.n	80047cc <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80046e8:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80046f0:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80046f8:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	b2db      	uxtb	r3, r3
 80046fe:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d108      	bne.n	800471a <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8004708:	69ba      	ldr	r2, [r7, #24]
 800470a:	69fb      	ldr	r3, [r7, #28]
 800470c:	431a      	orrs	r2, r3
 800470e:	6a3b      	ldr	r3, [r7, #32]
 8004710:	4313      	orrs	r3, r2
 8004712:	697a      	ldr	r2, [r7, #20]
 8004714:	4313      	orrs	r3, r2
 8004716:	627b      	str	r3, [r7, #36]	; 0x24
 8004718:	e053      	b.n	80047c2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	2b01      	cmp	r3, #1
 8004720:	d106      	bne.n	8004730 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8004722:	69ba      	ldr	r2, [r7, #24]
 8004724:	69fb      	ldr	r3, [r7, #28]
 8004726:	4313      	orrs	r3, r2
 8004728:	697a      	ldr	r2, [r7, #20]
 800472a:	4313      	orrs	r3, r2
 800472c:	627b      	str	r3, [r7, #36]	; 0x24
 800472e:	e048      	b.n	80047c2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	2b02      	cmp	r3, #2
 8004736:	d111      	bne.n	800475c <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8004738:	69fb      	ldr	r3, [r7, #28]
 800473a:	0cdb      	lsrs	r3, r3, #19
 800473c:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800473e:	69bb      	ldr	r3, [r7, #24]
 8004740:	0a9b      	lsrs	r3, r3, #10
 8004742:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	08db      	lsrs	r3, r3, #3
 8004748:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800474a:	69bb      	ldr	r3, [r7, #24]
 800474c:	015a      	lsls	r2, r3, #5
 800474e:	69fb      	ldr	r3, [r7, #28]
 8004750:	02db      	lsls	r3, r3, #11
 8004752:	4313      	orrs	r3, r2
 8004754:	697a      	ldr	r2, [r7, #20]
 8004756:	4313      	orrs	r3, r2
 8004758:	627b      	str	r3, [r7, #36]	; 0x24
 800475a:	e032      	b.n	80047c2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	2b03      	cmp	r3, #3
 8004762:	d117      	bne.n	8004794 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8004764:	6a3b      	ldr	r3, [r7, #32]
 8004766:	0fdb      	lsrs	r3, r3, #31
 8004768:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 800476a:	69fb      	ldr	r3, [r7, #28]
 800476c:	0cdb      	lsrs	r3, r3, #19
 800476e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8004770:	69bb      	ldr	r3, [r7, #24]
 8004772:	0adb      	lsrs	r3, r3, #11
 8004774:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	08db      	lsrs	r3, r3, #3
 800477a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 800477c:	69bb      	ldr	r3, [r7, #24]
 800477e:	015a      	lsls	r2, r3, #5
 8004780:	69fb      	ldr	r3, [r7, #28]
 8004782:	029b      	lsls	r3, r3, #10
 8004784:	431a      	orrs	r2, r3
 8004786:	6a3b      	ldr	r3, [r7, #32]
 8004788:	03db      	lsls	r3, r3, #15
 800478a:	4313      	orrs	r3, r2
 800478c:	697a      	ldr	r2, [r7, #20]
 800478e:	4313      	orrs	r3, r2
 8004790:	627b      	str	r3, [r7, #36]	; 0x24
 8004792:	e016      	b.n	80047c2 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8004794:	6a3b      	ldr	r3, [r7, #32]
 8004796:	0f1b      	lsrs	r3, r3, #28
 8004798:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800479a:	69fb      	ldr	r3, [r7, #28]
 800479c:	0d1b      	lsrs	r3, r3, #20
 800479e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80047a0:	69bb      	ldr	r3, [r7, #24]
 80047a2:	0b1b      	lsrs	r3, r3, #12
 80047a4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	091b      	lsrs	r3, r3, #4
 80047aa:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80047ac:	69bb      	ldr	r3, [r7, #24]
 80047ae:	011a      	lsls	r2, r3, #4
 80047b0:	69fb      	ldr	r3, [r7, #28]
 80047b2:	021b      	lsls	r3, r3, #8
 80047b4:	431a      	orrs	r2, r3
 80047b6:	6a3b      	ldr	r3, [r7, #32]
 80047b8:	031b      	lsls	r3, r3, #12
 80047ba:	4313      	orrs	r3, r2
 80047bc:	697a      	ldr	r2, [r7, #20]
 80047be:	4313      	orrs	r3, r2
 80047c0:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047c8:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80047ca:	e003      	b.n	80047d4 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	68ba      	ldr	r2, [r7, #8]
 80047d2:	60da      	str	r2, [r3, #12]
}
 80047d4:	bf00      	nop
 80047d6:	372c      	adds	r7, #44	; 0x2c
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr

080047e0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b084      	sub	sp, #16
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d101      	bne.n	80047f2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e06a      	b.n	80048c8 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d106      	bne.n	800480a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2223      	movs	r2, #35	; 0x23
 8004800:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f005 fbd9 	bl	8009fbc <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800480a:	4b31      	ldr	r3, [pc, #196]	; (80048d0 <HAL_ETH_Init+0xf0>)
 800480c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800480e:	4a30      	ldr	r2, [pc, #192]	; (80048d0 <HAL_ETH_Init+0xf0>)
 8004810:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004814:	6453      	str	r3, [r2, #68]	; 0x44
 8004816:	4b2e      	ldr	r3, [pc, #184]	; (80048d0 <HAL_ETH_Init+0xf0>)
 8004818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800481a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800481e:	60bb      	str	r3, [r7, #8]
 8004820:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8004822:	4b2c      	ldr	r3, [pc, #176]	; (80048d4 <HAL_ETH_Init+0xf4>)
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	4a2b      	ldr	r2, [pc, #172]	; (80048d4 <HAL_ETH_Init+0xf4>)
 8004828:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800482c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800482e:	4b29      	ldr	r3, [pc, #164]	; (80048d4 <HAL_ETH_Init+0xf4>)
 8004830:	685a      	ldr	r2, [r3, #4]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	4927      	ldr	r1, [pc, #156]	; (80048d4 <HAL_ETH_Init+0xf4>)
 8004838:	4313      	orrs	r3, r2
 800483a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800483c:	4b25      	ldr	r3, [pc, #148]	; (80048d4 <HAL_ETH_Init+0xf4>)
 800483e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	687a      	ldr	r2, [r7, #4]
 800484c:	6812      	ldr	r2, [r2, #0]
 800484e:	f043 0301 	orr.w	r3, r3, #1
 8004852:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004856:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004858:	f7ff f9c6 	bl	8003be8 <HAL_GetTick>
 800485c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800485e:	e011      	b.n	8004884 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8004860:	f7ff f9c2 	bl	8003be8 <HAL_GetTick>
 8004864:	4602      	mov	r2, r0
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	1ad3      	subs	r3, r2, r3
 800486a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800486e:	d909      	bls.n	8004884 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2204      	movs	r2, #4
 8004874:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	22e0      	movs	r2, #224	; 0xe0
 800487c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	e021      	b.n	80048c8 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f003 0301 	and.w	r3, r3, #1
 8004892:	2b00      	cmp	r3, #0
 8004894:	d1e4      	bne.n	8004860 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f000 fdf0 	bl	800547c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f000 fe97 	bl	80055d0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f000 feed 	bl	8005682 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	461a      	mov	r2, r3
 80048ae:	2100      	movs	r1, #0
 80048b0:	6878      	ldr	r0, [r7, #4]
 80048b2:	f000 fe55 	bl	8005560 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2200      	movs	r2, #0
 80048ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2210      	movs	r2, #16
 80048c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80048c6:	2300      	movs	r3, #0
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	3710      	adds	r7, #16
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}
 80048d0:	40023800 	.word	0x40023800
 80048d4:	40013800 	.word	0x40013800

080048d8 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b084      	sub	sp, #16
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048e6:	2b10      	cmp	r3, #16
 80048e8:	d150      	bne.n	800498c <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2223      	movs	r2, #35	; 0x23
 80048ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2204      	movs	r2, #4
 80048f6:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80048f8:	6878      	ldr	r0, [r7, #4]
 80048fa:	f000 f9fd 	bl	8004cf8 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f042 0208 	orr.w	r2, r2, #8
 800490c:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004916:	2001      	movs	r0, #1
 8004918:	f7ff f972 	bl	8003c00 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	68fa      	ldr	r2, [r7, #12]
 8004922:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f042 0204 	orr.w	r2, r2, #4
 8004932:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800493c:	2001      	movs	r0, #1
 800493e:	f7ff f95f 	bl	8003c00 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	68fa      	ldr	r2, [r7, #12]
 8004948:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f000 fc36 	bl	80051bc <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004958:	699b      	ldr	r3, [r3, #24]
 800495a:	687a      	ldr	r2, [r7, #4]
 800495c:	6812      	ldr	r2, [r2, #0]
 800495e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004962:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004966:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004970:	699b      	ldr	r3, [r3, #24]
 8004972:	687a      	ldr	r2, [r7, #4]
 8004974:	6812      	ldr	r2, [r2, #0]
 8004976:	f043 0302 	orr.w	r3, r3, #2
 800497a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800497e:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2223      	movs	r2, #35	; 0x23
 8004984:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8004988:	2300      	movs	r3, #0
 800498a:	e000      	b.n	800498e <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 800498c:	2301      	movs	r3, #1
  }
}
 800498e:	4618      	mov	r0, r3
 8004990:	3710      	adds	r7, #16
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}

08004996 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8004996:	b580      	push	{r7, lr}
 8004998:	b084      	sub	sp, #16
 800499a:	af00      	add	r7, sp, #0
 800499c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049a4:	2b23      	cmp	r3, #35	; 0x23
 80049a6:	d14a      	bne.n	8004a3e <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2223      	movs	r2, #35	; 0x23
 80049ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049b8:	699b      	ldr	r3, [r3, #24]
 80049ba:	687a      	ldr	r2, [r7, #4]
 80049bc:	6812      	ldr	r2, [r2, #0]
 80049be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80049c2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80049c6:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049d0:	699b      	ldr	r3, [r3, #24]
 80049d2:	687a      	ldr	r2, [r7, #4]
 80049d4:	6812      	ldr	r2, [r2, #0]
 80049d6:	f023 0302 	bic.w	r3, r3, #2
 80049da:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80049de:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f022 0204 	bic.w	r2, r2, #4
 80049ee:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80049f8:	2001      	movs	r0, #1
 80049fa:	f7ff f901 	bl	8003c00 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	68fa      	ldr	r2, [r7, #12]
 8004a04:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f000 fbd8 	bl	80051bc <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	681a      	ldr	r2, [r3, #0]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f022 0208 	bic.w	r2, r2, #8
 8004a1a:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004a24:	2001      	movs	r0, #1
 8004a26:	f7ff f8eb 	bl	8003c00 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	68fa      	ldr	r2, [r7, #12]
 8004a30:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2210      	movs	r2, #16
 8004a36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	e000      	b.n	8004a40 <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
  }
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3710      	adds	r7, #16
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}

08004a48 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b086      	sub	sp, #24
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	60f8      	str	r0, [r7, #12]
 8004a50:	60b9      	str	r1, [r7, #8]
 8004a52:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d109      	bne.n	8004a6e <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a60:	f043 0201 	orr.w	r2, r3, #1
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e07c      	b.n	8004b68 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a74:	2b23      	cmp	r3, #35	; 0x23
 8004a76:	d176      	bne.n	8004b66 <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8004a78:	2200      	movs	r2, #0
 8004a7a:	68b9      	ldr	r1, [r7, #8]
 8004a7c:	68f8      	ldr	r0, [r7, #12]
 8004a7e:	f000 fe6d 	bl	800575c <ETH_Prepare_Tx_Descriptors>
 8004a82:	4603      	mov	r3, r0
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d009      	beq.n	8004a9c <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a8e:	f043 0202 	orr.w	r2, r3, #2
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	e065      	b.n	8004b68 <HAL_ETH_Transmit+0x120>
  __ASM volatile ("dsb 0xF":::"memory");
 8004a9c:	f3bf 8f4f 	dsb	sy
}
 8004aa0:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	3206      	adds	r2, #6
 8004aaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004aae:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ab4:	1c5a      	adds	r2, r3, #1
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	629a      	str	r2, [r3, #40]	; 0x28
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004abe:	2b03      	cmp	r3, #3
 8004ac0:	d904      	bls.n	8004acc <HAL_ETH_Transmit+0x84>
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ac6:	1f1a      	subs	r2, r3, #4
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	3106      	adds	r1, #6
 8004ad8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004adc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004ae0:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 8004ae2:	f7ff f881 	bl	8003be8 <HAL_GetTick>
 8004ae6:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8004ae8:	e037      	b.n	8004b5a <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004af2:	695b      	ldr	r3, [r3, #20]
 8004af4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d011      	beq.n	8004b20 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b02:	f043 0208 	orr.w	r2, r3, #8
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b14:	695a      	ldr	r2, [r3, #20]
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	e023      	b.n	8004b68 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b26:	d018      	beq.n	8004b5a <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004b28:	f7ff f85e 	bl	8003be8 <HAL_GetTick>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	1ad3      	subs	r3, r2, r3
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d302      	bcc.n	8004b3e <HAL_ETH_Transmit+0xf6>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d10d      	bne.n	8004b5a <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b44:	f043 0204 	orr.w	r2, r3, #4
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8004b54:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	e006      	b.n	8004b68 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	dbc3      	blt.n	8004aea <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8004b62:	2300      	movs	r3, #0
 8004b64:	e000      	b.n	8004b68 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
  }
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3718      	adds	r7, #24
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}

08004b70 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b088      	sub	sp, #32
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
 8004b78:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d109      	bne.n	8004b9c <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b8e:	f043 0201 	orr.w	r2, r3, #1
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	e0a8      	b.n	8004cee <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ba2:	2b23      	cmp	r3, #35	; 0x23
 8004ba4:	d001      	beq.n	8004baa <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	e0a1      	b.n	8004cee <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bae:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	69fa      	ldr	r2, [r7, #28]
 8004bb4:	3212      	adds	r2, #18
 8004bb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bba:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bc0:	f1c3 0304 	rsb	r3, r3, #4
 8004bc4:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8004bc6:	e06a      	b.n	8004c9e <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8004bc8:	69bb      	ldr	r3, [r7, #24]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d007      	beq.n	8004be4 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 8004bd4:	69bb      	ldr	r3, [r7, #24]
 8004bd6:	699a      	ldr	r2, [r3, #24]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 8004bdc:	69bb      	ldr	r3, [r7, #24]
 8004bde:	69da      	ldr	r2, [r3, #28]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8004be4:	69bb      	ldr	r3, [r7, #24]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d103      	bne.n	8004bf8 <HAL_ETH_ReadData+0x88>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d040      	beq.n	8004c7a <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8004bf8:	69bb      	ldr	r3, [r7, #24]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d005      	beq.n	8004c10 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2200      	movs	r2, #0
 8004c08:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	695b      	ldr	r3, [r3, #20]
 8004c14:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8004c16:	69bb      	ldr	r3, [r7, #24]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d00c      	beq.n	8004c3c <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8004c22:	69bb      	ldr	r3, [r7, #24]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	0c1b      	lsrs	r3, r3, #16
 8004c28:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8004c2c:	3b04      	subs	r3, #4
 8004c2e:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8004c30:	69bb      	ldr	r3, [r7, #24]
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8004c3c:	69bb      	ldr	r3, [r7, #24]
 8004c3e:	689a      	ldr	r2, [r3, #8]
 8004c40:	69bb      	ldr	r3, [r7, #24]
 8004c42:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8004c50:	69bb      	ldr	r3, [r7, #24]
 8004c52:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8004c54:	461a      	mov	r2, r3
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	b29b      	uxth	r3, r3
 8004c5a:	f005 fb51 	bl	800a300 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c62:	1c5a      	adds	r2, r3, #1
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	441a      	add	r2, r3
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8004c74:	69bb      	ldr	r3, [r7, #24]
 8004c76:	2200      	movs	r2, #0
 8004c78:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8004c7a:	69fb      	ldr	r3, [r7, #28]
 8004c7c:	3301      	adds	r3, #1
 8004c7e:	61fb      	str	r3, [r7, #28]
 8004c80:	69fb      	ldr	r3, [r7, #28]
 8004c82:	2b03      	cmp	r3, #3
 8004c84:	d902      	bls.n	8004c8c <HAL_ETH_ReadData+0x11c>
 8004c86:	69fb      	ldr	r3, [r7, #28]
 8004c88:	3b04      	subs	r3, #4
 8004c8a:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	69fa      	ldr	r2, [r7, #28]
 8004c90:	3212      	adds	r2, #18
 8004c92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c96:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	3301      	adds	r3, #1
 8004c9c:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8004c9e:	69bb      	ldr	r3, [r7, #24]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	db06      	blt.n	8004cb4 <HAL_ETH_ReadData+0x144>
 8004ca6:	697a      	ldr	r2, [r7, #20]
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	429a      	cmp	r2, r3
 8004cac:	d202      	bcs.n	8004cb4 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 8004cae:	7bfb      	ldrb	r3, [r7, #15]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d089      	beq.n	8004bc8 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	441a      	add	r2, r3
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d002      	beq.n	8004cce <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8004cc8:	6878      	ldr	r0, [r7, #4]
 8004cca:	f000 f815 	bl	8004cf8 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	69fa      	ldr	r2, [r7, #28]
 8004cd2:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8004cd4:	7bfb      	ldrb	r3, [r7, #15]
 8004cd6:	2b01      	cmp	r3, #1
 8004cd8:	d108      	bne.n	8004cec <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	e000      	b.n	8004cee <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3720      	adds	r7, #32
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}
	...

08004cf8 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b088      	sub	sp, #32
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8004d00:	2300      	movs	r3, #0
 8004d02:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8004d04:	2301      	movs	r3, #1
 8004d06:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d0c:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	69fa      	ldr	r2, [r7, #28]
 8004d12:	3212      	adds	r2, #18
 8004d14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d18:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d1e:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8004d20:	e040      	b.n	8004da4 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	6a1b      	ldr	r3, [r3, #32]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d112      	bne.n	8004d50 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8004d2a:	f107 030c 	add.w	r3, r7, #12
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f005 fab6 	bl	800a2a0 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d102      	bne.n	8004d40 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	74fb      	strb	r3, [r7, #19]
 8004d3e:	e007      	b.n	8004d50 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	461a      	mov	r2, r3
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	461a      	mov	r2, r3
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8004d50:	7cfb      	ldrb	r3, [r7, #19]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d026      	beq.n	8004da4 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d103      	bne.n	8004d66 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	4a1e      	ldr	r2, [pc, #120]	; (8004ddc <ETH_UpdateDescriptor+0xe4>)
 8004d62:	605a      	str	r2, [r3, #4]
 8004d64:	e003      	b.n	8004d6e <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8004d6c:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dmb 0xF":::"memory");
 8004d6e:	f3bf 8f5f 	dmb	sy
}
 8004d72:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8004d80:	69fb      	ldr	r3, [r7, #28]
 8004d82:	3301      	adds	r3, #1
 8004d84:	61fb      	str	r3, [r7, #28]
 8004d86:	69fb      	ldr	r3, [r7, #28]
 8004d88:	2b03      	cmp	r3, #3
 8004d8a:	d902      	bls.n	8004d92 <ETH_UpdateDescriptor+0x9a>
 8004d8c:	69fb      	ldr	r3, [r7, #28]
 8004d8e:	3b04      	subs	r3, #4
 8004d90:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	69fa      	ldr	r2, [r7, #28]
 8004d96:	3212      	adds	r2, #18
 8004d98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d9c:	617b      	str	r3, [r7, #20]
      desccount--;
 8004d9e:	69bb      	ldr	r3, [r7, #24]
 8004da0:	3b01      	subs	r3, #1
 8004da2:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8004da4:	69bb      	ldr	r3, [r7, #24]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d002      	beq.n	8004db0 <ETH_UpdateDescriptor+0xb8>
 8004daa:	7cfb      	ldrb	r3, [r7, #19]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d1b8      	bne.n	8004d22 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004db4:	69ba      	ldr	r2, [r7, #24]
 8004db6:	429a      	cmp	r2, r3
 8004db8:	d00c      	beq.n	8004dd4 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004dc2:	461a      	mov	r2, r3
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	69fa      	ldr	r2, [r7, #28]
 8004dcc:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	69ba      	ldr	r2, [r7, #24]
 8004dd2:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8004dd4:	bf00      	nop
 8004dd6:	3720      	adds	r7, #32
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}
 8004ddc:	800045f8 	.word	0x800045f8

08004de0 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b086      	sub	sp, #24
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	60f8      	str	r0, [r7, #12]
 8004de8:	60b9      	str	r1, [r7, #8]
 8004dea:	607a      	str	r2, [r7, #4]
 8004dec:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	691b      	ldr	r3, [r3, #16]
 8004df4:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	f003 031c 	and.w	r3, r3, #28
 8004dfc:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	02db      	lsls	r3, r3, #11
 8004e02:	b29b      	uxth	r3, r3
 8004e04:	697a      	ldr	r2, [r7, #20]
 8004e06:	4313      	orrs	r3, r2
 8004e08:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	019b      	lsls	r3, r3, #6
 8004e0e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8004e12:	697a      	ldr	r2, [r7, #20]
 8004e14:	4313      	orrs	r3, r2
 8004e16:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	f023 0302 	bic.w	r3, r3, #2
 8004e1e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	f043 0301 	orr.w	r3, r3, #1
 8004e26:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	697a      	ldr	r2, [r7, #20]
 8004e2e:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8004e30:	f7fe feda 	bl	8003be8 <HAL_GetTick>
 8004e34:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004e36:	e00d      	b.n	8004e54 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8004e38:	f7fe fed6 	bl	8003be8 <HAL_GetTick>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	1ad3      	subs	r3, r2, r3
 8004e42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e46:	d301      	bcc.n	8004e4c <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	e010      	b.n	8004e6e <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	691b      	ldr	r3, [r3, #16]
 8004e52:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	f003 0301 	and.w	r3, r3, #1
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d1ec      	bne.n	8004e38 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	695b      	ldr	r3, [r3, #20]
 8004e64:	b29b      	uxth	r3, r3
 8004e66:	461a      	mov	r2, r3
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004e6c:	2300      	movs	r3, #0
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3718      	adds	r7, #24
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}

08004e76 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8004e76:	b580      	push	{r7, lr}
 8004e78:	b086      	sub	sp, #24
 8004e7a:	af00      	add	r7, sp, #0
 8004e7c:	60f8      	str	r0, [r7, #12]
 8004e7e:	60b9      	str	r1, [r7, #8]
 8004e80:	607a      	str	r2, [r7, #4]
 8004e82:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	691b      	ldr	r3, [r3, #16]
 8004e8a:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	f003 031c 	and.w	r3, r3, #28
 8004e92:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	02db      	lsls	r3, r3, #11
 8004e98:	b29b      	uxth	r3, r3
 8004e9a:	697a      	ldr	r2, [r7, #20]
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	019b      	lsls	r3, r3, #6
 8004ea4:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8004ea8:	697a      	ldr	r2, [r7, #20]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	f043 0302 	orr.w	r3, r3, #2
 8004eb4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	f043 0301 	orr.w	r3, r3, #1
 8004ebc:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	b29a      	uxth	r2, r3
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	697a      	ldr	r2, [r7, #20]
 8004ece:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004ed0:	f7fe fe8a 	bl	8003be8 <HAL_GetTick>
 8004ed4:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004ed6:	e00d      	b.n	8004ef4 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8004ed8:	f7fe fe86 	bl	8003be8 <HAL_GetTick>
 8004edc:	4602      	mov	r2, r0
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	1ad3      	subs	r3, r2, r3
 8004ee2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ee6:	d301      	bcc.n	8004eec <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	e009      	b.n	8004f00 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	691b      	ldr	r3, [r3, #16]
 8004ef2:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	f003 0301 	and.w	r3, r3, #1
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d1ec      	bne.n	8004ed8 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8004efe:	2300      	movs	r3, #0
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	3718      	adds	r7, #24
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}

08004f08 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b083      	sub	sp, #12
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
 8004f10:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d101      	bne.n	8004f1c <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	e0d9      	b.n	80050d0 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f003 0310 	and.w	r3, r3, #16
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	bf14      	ite	ne
 8004f2a:	2301      	movne	r3, #1
 8004f2c:	2300      	moveq	r3, #0
 8004f2e:	b2db      	uxtb	r3, r3
 8004f30:	461a      	mov	r2, r3
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	bf0c      	ite	eq
 8004f54:	2301      	moveq	r3, #1
 8004f56:	2300      	movne	r3, #0
 8004f58:	b2db      	uxtb	r3, r3
 8004f5a:	461a      	mov	r2, r3
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	bf14      	ite	ne
 8004f70:	2301      	movne	r3, #1
 8004f72:	2300      	moveq	r3, #0
 8004f74:	b2db      	uxtb	r3, r3
 8004f76:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	bf0c      	ite	eq
 8004f8a:	2301      	moveq	r3, #1
 8004f8c:	2300      	movne	r3, #0
 8004f8e:	b2db      	uxtb	r3, r3
 8004f90:	461a      	mov	r2, r3
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	bf14      	ite	ne
 8004fa4:	2301      	movne	r3, #1
 8004fa6:	2300      	moveq	r3, #0
 8004fa8:	b2db      	uxtb	r3, r3
 8004faa:	461a      	mov	r2, r3
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	bf0c      	ite	eq
 8004fda:	2301      	moveq	r3, #1
 8004fdc:	2300      	movne	r3, #0
 8004fde:	b2db      	uxtb	r3, r3
 8004fe0:	461a      	mov	r2, r3
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	bf0c      	ite	eq
 8004ff4:	2301      	moveq	r3, #1
 8004ff6:	2300      	movne	r3, #0
 8004ff8:	b2db      	uxtb	r3, r3
 8004ffa:	461a      	mov	r2, r3
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800500a:	2b00      	cmp	r3, #0
 800500c:	bf14      	ite	ne
 800500e:	2301      	movne	r3, #1
 8005010:	2300      	moveq	r3, #0
 8005012:	b2db      	uxtb	r3, r3
 8005014:	461a      	mov	r2, r3
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005032:	2b00      	cmp	r3, #0
 8005034:	bf14      	ite	ne
 8005036:	2301      	movne	r3, #1
 8005038:	2300      	moveq	r3, #0
 800503a:	b2db      	uxtb	r3, r3
 800503c:	461a      	mov	r2, r3
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	699b      	ldr	r3, [r3, #24]
 8005048:	f003 0302 	and.w	r3, r3, #2
 800504c:	2b00      	cmp	r3, #0
 800504e:	bf14      	ite	ne
 8005050:	2301      	movne	r3, #1
 8005052:	2300      	moveq	r3, #0
 8005054:	b2db      	uxtb	r3, r3
 8005056:	461a      	mov	r2, r3
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	699b      	ldr	r3, [r3, #24]
 8005064:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005068:	2b00      	cmp	r3, #0
 800506a:	bf0c      	ite	eq
 800506c:	2301      	moveq	r3, #1
 800506e:	2300      	movne	r3, #0
 8005070:	b2db      	uxtb	r3, r3
 8005072:	461a      	mov	r2, r3
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	699b      	ldr	r3, [r3, #24]
 8005080:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	699b      	ldr	r3, [r3, #24]
 800508e:	0c1b      	lsrs	r3, r3, #16
 8005090:	b29a      	uxth	r2, r3
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	699b      	ldr	r3, [r3, #24]
 800509c:	f003 0304 	and.w	r3, r3, #4
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	bf14      	ite	ne
 80050a4:	2301      	movne	r3, #1
 80050a6:	2300      	moveq	r3, #0
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	461a      	mov	r2, r3
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	699b      	ldr	r3, [r3, #24]
 80050b8:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 80050bc:	2b00      	cmp	r3, #0
 80050be:	bf14      	ite	ne
 80050c0:	2301      	movne	r3, #1
 80050c2:	2300      	moveq	r3, #0
 80050c4:	b2db      	uxtb	r3, r3
 80050c6:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 80050ce:	2300      	movs	r3, #0
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	370c      	adds	r7, #12
 80050d4:	46bd      	mov	sp, r7
 80050d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050da:	4770      	bx	lr

080050dc <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b082      	sub	sp, #8
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
 80050e4:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d101      	bne.n	80050f0 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	e00b      	b.n	8005108 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050f6:	2b10      	cmp	r3, #16
 80050f8:	d105      	bne.n	8005106 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 80050fa:	6839      	ldr	r1, [r7, #0]
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	f000 f883 	bl	8005208 <ETH_SetMACConfig>

    return HAL_OK;
 8005102:	2300      	movs	r3, #0
 8005104:	e000      	b.n	8005108 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8005106:	2301      	movs	r3, #1
  }
}
 8005108:	4618      	mov	r0, r3
 800510a:	3708      	adds	r7, #8
 800510c:	46bd      	mov	sp, r7
 800510e:	bd80      	pop	{r7, pc}

08005110 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b084      	sub	sp, #16
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	691b      	ldr	r3, [r3, #16]
 800511e:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f023 031c 	bic.w	r3, r3, #28
 8005126:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8005128:	f003 f988 	bl	800843c <HAL_RCC_GetHCLKFreq>
 800512c:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	4a1d      	ldr	r2, [pc, #116]	; (80051a8 <HAL_ETH_SetMDIOClockRange+0x98>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d908      	bls.n	8005148 <HAL_ETH_SetMDIOClockRange+0x38>
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	4a1c      	ldr	r2, [pc, #112]	; (80051ac <HAL_ETH_SetMDIOClockRange+0x9c>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d804      	bhi.n	8005148 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	f043 0308 	orr.w	r3, r3, #8
 8005144:	60fb      	str	r3, [r7, #12]
 8005146:	e027      	b.n	8005198 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	4a18      	ldr	r2, [pc, #96]	; (80051ac <HAL_ETH_SetMDIOClockRange+0x9c>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d908      	bls.n	8005162 <HAL_ETH_SetMDIOClockRange+0x52>
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	4a17      	ldr	r2, [pc, #92]	; (80051b0 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d204      	bcs.n	8005162 <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	f043 030c 	orr.w	r3, r3, #12
 800515e:	60fb      	str	r3, [r7, #12]
 8005160:	e01a      	b.n	8005198 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	4a12      	ldr	r2, [pc, #72]	; (80051b0 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d303      	bcc.n	8005172 <HAL_ETH_SetMDIOClockRange+0x62>
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	4a11      	ldr	r2, [pc, #68]	; (80051b4 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d911      	bls.n	8005196 <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	4a0f      	ldr	r2, [pc, #60]	; (80051b4 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d908      	bls.n	800518c <HAL_ETH_SetMDIOClockRange+0x7c>
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	4a0e      	ldr	r2, [pc, #56]	; (80051b8 <HAL_ETH_SetMDIOClockRange+0xa8>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d804      	bhi.n	800518c <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	f043 0304 	orr.w	r3, r3, #4
 8005188:	60fb      	str	r3, [r7, #12]
 800518a:	e005      	b.n	8005198 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f043 0310 	orr.w	r3, r3, #16
 8005192:	60fb      	str	r3, [r7, #12]
 8005194:	e000      	b.n	8005198 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8005196:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	68fa      	ldr	r2, [r7, #12]
 800519e:	611a      	str	r2, [r3, #16]
}
 80051a0:	bf00      	nop
 80051a2:	3710      	adds	r7, #16
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}
 80051a8:	01312cff 	.word	0x01312cff
 80051ac:	02160ebf 	.word	0x02160ebf
 80051b0:	03938700 	.word	0x03938700
 80051b4:	05f5e0ff 	.word	0x05f5e0ff
 80051b8:	08f0d17f 	.word	0x08f0d17f

080051bc <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b084      	sub	sp, #16
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80051c4:	2300      	movs	r3, #0
 80051c6:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051d0:	699b      	ldr	r3, [r3, #24]
 80051d2:	687a      	ldr	r2, [r7, #4]
 80051d4:	6812      	ldr	r2, [r2, #0]
 80051d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80051da:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80051de:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051e8:	699b      	ldr	r3, [r3, #24]
 80051ea:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80051ec:	2001      	movs	r0, #1
 80051ee:	f7fe fd07 	bl	8003c00 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681a      	ldr	r2, [r3, #0]
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80051fc:	6193      	str	r3, [r2, #24]
}
 80051fe:	bf00      	nop
 8005200:	3710      	adds	r7, #16
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}
	...

08005208 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b084      	sub	sp, #16
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
 8005210:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800521a:	68fa      	ldr	r2, [r7, #12]
 800521c:	4b51      	ldr	r3, [pc, #324]	; (8005364 <ETH_SetMACConfig+0x15c>)
 800521e:	4013      	ands	r3, r2
 8005220:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	7c1b      	ldrb	r3, [r3, #16]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d102      	bne.n	8005230 <ETH_SetMACConfig+0x28>
 800522a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800522e:	e000      	b.n	8005232 <ETH_SetMACConfig+0x2a>
 8005230:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	7c5b      	ldrb	r3, [r3, #17]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d102      	bne.n	8005240 <ETH_SetMACConfig+0x38>
 800523a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800523e:	e000      	b.n	8005242 <ETH_SetMACConfig+0x3a>
 8005240:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8005242:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8005248:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	7fdb      	ldrb	r3, [r3, #31]
 800524e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8005250:	431a      	orrs	r2, r3
                        macconf->Speed |
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8005256:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8005258:	683a      	ldr	r2, [r7, #0]
 800525a:	7f92      	ldrb	r2, [r2, #30]
 800525c:	2a00      	cmp	r2, #0
 800525e:	d102      	bne.n	8005266 <ETH_SetMACConfig+0x5e>
 8005260:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005264:	e000      	b.n	8005268 <ETH_SetMACConfig+0x60>
 8005266:	2200      	movs	r2, #0
                        macconf->Speed |
 8005268:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	7f1b      	ldrb	r3, [r3, #28]
 800526e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8005270:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8005276:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	791b      	ldrb	r3, [r3, #4]
 800527c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800527e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8005280:	683a      	ldr	r2, [r7, #0]
 8005282:	f892 2020 	ldrb.w	r2, [r2, #32]
 8005286:	2a00      	cmp	r2, #0
 8005288:	d102      	bne.n	8005290 <ETH_SetMACConfig+0x88>
 800528a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800528e:	e000      	b.n	8005292 <ETH_SetMACConfig+0x8a>
 8005290:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8005292:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	7bdb      	ldrb	r3, [r3, #15]
 8005298:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800529a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80052a0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80052a8:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80052aa:	4313      	orrs	r3, r2
 80052ac:	68fa      	ldr	r2, [r7, #12]
 80052ae:	4313      	orrs	r3, r2
 80052b0:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	68fa      	ldr	r2, [r7, #12]
 80052b8:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80052c2:	2001      	movs	r0, #1
 80052c4:	f7fe fc9c 	bl	8003c00 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	68fa      	ldr	r2, [r7, #12]
 80052ce:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	699b      	ldr	r3, [r3, #24]
 80052d6:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80052d8:	68fa      	ldr	r2, [r7, #12]
 80052da:	f64f 7341 	movw	r3, #65345	; 0xff41
 80052de:	4013      	ands	r3, r2
 80052e0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052e6:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80052e8:	683a      	ldr	r2, [r7, #0]
 80052ea:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80052ee:	2a00      	cmp	r2, #0
 80052f0:	d101      	bne.n	80052f6 <ETH_SetMACConfig+0xee>
 80052f2:	2280      	movs	r2, #128	; 0x80
 80052f4:	e000      	b.n	80052f8 <ETH_SetMACConfig+0xf0>
 80052f6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80052f8:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80052fe:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8005300:	683a      	ldr	r2, [r7, #0]
 8005302:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8005306:	2a01      	cmp	r2, #1
 8005308:	d101      	bne.n	800530e <ETH_SetMACConfig+0x106>
 800530a:	2208      	movs	r2, #8
 800530c:	e000      	b.n	8005310 <ETH_SetMACConfig+0x108>
 800530e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8005310:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8005312:	683a      	ldr	r2, [r7, #0]
 8005314:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8005318:	2a01      	cmp	r2, #1
 800531a:	d101      	bne.n	8005320 <ETH_SetMACConfig+0x118>
 800531c:	2204      	movs	r2, #4
 800531e:	e000      	b.n	8005322 <ETH_SetMACConfig+0x11a>
 8005320:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8005322:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8005324:	683a      	ldr	r2, [r7, #0]
 8005326:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800532a:	2a01      	cmp	r2, #1
 800532c:	d101      	bne.n	8005332 <ETH_SetMACConfig+0x12a>
 800532e:	2202      	movs	r2, #2
 8005330:	e000      	b.n	8005334 <ETH_SetMACConfig+0x12c>
 8005332:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8005334:	4313      	orrs	r3, r2
 8005336:	68fa      	ldr	r2, [r7, #12]
 8005338:	4313      	orrs	r3, r2
 800533a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	68fa      	ldr	r2, [r7, #12]
 8005342:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	699b      	ldr	r3, [r3, #24]
 800534a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800534c:	2001      	movs	r0, #1
 800534e:	f7fe fc57 	bl	8003c00 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	68fa      	ldr	r2, [r7, #12]
 8005358:	619a      	str	r2, [r3, #24]
}
 800535a:	bf00      	nop
 800535c:	3710      	adds	r7, #16
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}
 8005362:	bf00      	nop
 8005364:	ff20810f 	.word	0xff20810f

08005368 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b084      	sub	sp, #16
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800537a:	699b      	ldr	r3, [r3, #24]
 800537c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800537e:	68fa      	ldr	r2, [r7, #12]
 8005380:	4b3d      	ldr	r3, [pc, #244]	; (8005478 <ETH_SetDMAConfig+0x110>)
 8005382:	4013      	ands	r3, r2
 8005384:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	7b1b      	ldrb	r3, [r3, #12]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d102      	bne.n	8005394 <ETH_SetDMAConfig+0x2c>
 800538e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8005392:	e000      	b.n	8005396 <ETH_SetDMAConfig+0x2e>
 8005394:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	7b5b      	ldrb	r3, [r3, #13]
 800539a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800539c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800539e:	683a      	ldr	r2, [r7, #0]
 80053a0:	7f52      	ldrb	r2, [r2, #29]
 80053a2:	2a00      	cmp	r2, #0
 80053a4:	d102      	bne.n	80053ac <ETH_SetDMAConfig+0x44>
 80053a6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80053aa:	e000      	b.n	80053ae <ETH_SetDMAConfig+0x46>
 80053ac:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80053ae:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	7b9b      	ldrb	r3, [r3, #14]
 80053b4:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80053b6:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80053bc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	7f1b      	ldrb	r3, [r3, #28]
 80053c2:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80053c4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	7f9b      	ldrb	r3, [r3, #30]
 80053ca:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80053cc:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80053d2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80053da:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80053dc:	4313      	orrs	r3, r2
 80053de:	68fa      	ldr	r2, [r7, #12]
 80053e0:	4313      	orrs	r3, r2
 80053e2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053ec:	461a      	mov	r2, r3
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053fa:	699b      	ldr	r3, [r3, #24]
 80053fc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80053fe:	2001      	movs	r0, #1
 8005400:	f7fe fbfe 	bl	8003c00 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800540c:	461a      	mov	r2, r3
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	791b      	ldrb	r3, [r3, #4]
 8005416:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800541c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8005422:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8005428:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005430:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8005432:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005438:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800543a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8005440:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8005442:	687a      	ldr	r2, [r7, #4]
 8005444:	6812      	ldr	r2, [r2, #0]
 8005446:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800544a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800544e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800545c:	2001      	movs	r0, #1
 800545e:	f7fe fbcf 	bl	8003c00 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800546a:	461a      	mov	r2, r3
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	6013      	str	r3, [r2, #0]
}
 8005470:	bf00      	nop
 8005472:	3710      	adds	r7, #16
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}
 8005478:	f8de3f23 	.word	0xf8de3f23

0800547c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b0a6      	sub	sp, #152	; 0x98
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8005484:	2301      	movs	r3, #1
 8005486:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800548a:	2301      	movs	r3, #1
 800548c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8005490:	2300      	movs	r3, #0
 8005492:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8005494:	2300      	movs	r3, #0
 8005496:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800549a:	2301      	movs	r3, #1
 800549c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80054a0:	2300      	movs	r3, #0
 80054a2:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80054a6:	2301      	movs	r3, #1
 80054a8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80054ac:	2300      	movs	r3, #0
 80054ae:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80054b2:	2300      	movs	r3, #0
 80054b4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80054b8:	2300      	movs	r3, #0
 80054ba:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80054bc:	2300      	movs	r3, #0
 80054be:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80054c2:	2300      	movs	r3, #0
 80054c4:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80054c6:	2300      	movs	r3, #0
 80054c8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80054cc:	2300      	movs	r3, #0
 80054ce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80054d2:	2300      	movs	r3, #0
 80054d4:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80054d8:	2300      	movs	r3, #0
 80054da:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80054de:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80054e2:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80054e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80054e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80054ea:	2300      	movs	r3, #0
 80054ec:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80054f0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80054f4:	4619      	mov	r1, r3
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f7ff fe86 	bl	8005208 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80054fc:	2301      	movs	r3, #1
 80054fe:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8005500:	2301      	movs	r3, #1
 8005502:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8005504:	2301      	movs	r3, #1
 8005506:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800550a:	2301      	movs	r3, #1
 800550c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800550e:	2300      	movs	r3, #0
 8005510:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8005512:	2300      	movs	r3, #0
 8005514:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8005518:	2300      	movs	r3, #0
 800551a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800551e:	2300      	movs	r3, #0
 8005520:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8005522:	2301      	movs	r3, #1
 8005524:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8005528:	2301      	movs	r3, #1
 800552a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800552c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005530:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8005532:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005536:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8005538:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800553c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800553e:	2301      	movs	r3, #1
 8005540:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8005544:	2300      	movs	r3, #0
 8005546:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8005548:	2300      	movs	r3, #0
 800554a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800554c:	f107 0308 	add.w	r3, r7, #8
 8005550:	4619      	mov	r1, r3
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f7ff ff08 	bl	8005368 <ETH_SetDMAConfig>
}
 8005558:	bf00      	nop
 800555a:	3798      	adds	r7, #152	; 0x98
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}

08005560 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8005560:	b480      	push	{r7}
 8005562:	b087      	sub	sp, #28
 8005564:	af00      	add	r7, sp, #0
 8005566:	60f8      	str	r0, [r7, #12]
 8005568:	60b9      	str	r1, [r7, #8]
 800556a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	3305      	adds	r3, #5
 8005570:	781b      	ldrb	r3, [r3, #0]
 8005572:	021b      	lsls	r3, r3, #8
 8005574:	687a      	ldr	r2, [r7, #4]
 8005576:	3204      	adds	r2, #4
 8005578:	7812      	ldrb	r2, [r2, #0]
 800557a:	4313      	orrs	r3, r2
 800557c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800557e:	68ba      	ldr	r2, [r7, #8]
 8005580:	4b11      	ldr	r3, [pc, #68]	; (80055c8 <ETH_MACAddressConfig+0x68>)
 8005582:	4413      	add	r3, r2
 8005584:	461a      	mov	r2, r3
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	3303      	adds	r3, #3
 800558e:	781b      	ldrb	r3, [r3, #0]
 8005590:	061a      	lsls	r2, r3, #24
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	3302      	adds	r3, #2
 8005596:	781b      	ldrb	r3, [r3, #0]
 8005598:	041b      	lsls	r3, r3, #16
 800559a:	431a      	orrs	r2, r3
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	3301      	adds	r3, #1
 80055a0:	781b      	ldrb	r3, [r3, #0]
 80055a2:	021b      	lsls	r3, r3, #8
 80055a4:	4313      	orrs	r3, r2
 80055a6:	687a      	ldr	r2, [r7, #4]
 80055a8:	7812      	ldrb	r2, [r2, #0]
 80055aa:	4313      	orrs	r3, r2
 80055ac:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80055ae:	68ba      	ldr	r2, [r7, #8]
 80055b0:	4b06      	ldr	r3, [pc, #24]	; (80055cc <ETH_MACAddressConfig+0x6c>)
 80055b2:	4413      	add	r3, r2
 80055b4:	461a      	mov	r2, r3
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	6013      	str	r3, [r2, #0]
}
 80055ba:	bf00      	nop
 80055bc:	371c      	adds	r7, #28
 80055be:	46bd      	mov	sp, r7
 80055c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c4:	4770      	bx	lr
 80055c6:	bf00      	nop
 80055c8:	40028040 	.word	0x40028040
 80055cc:	40028044 	.word	0x40028044

080055d0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b085      	sub	sp, #20
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80055d8:	2300      	movs	r3, #0
 80055da:	60fb      	str	r3, [r7, #12]
 80055dc:	e03e      	b.n	800565c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	68d9      	ldr	r1, [r3, #12]
 80055e2:	68fa      	ldr	r2, [r7, #12]
 80055e4:	4613      	mov	r3, r2
 80055e6:	009b      	lsls	r3, r3, #2
 80055e8:	4413      	add	r3, r2
 80055ea:	00db      	lsls	r3, r3, #3
 80055ec:	440b      	add	r3, r1
 80055ee:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	2200      	movs	r2, #0
 80055f4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	2200      	movs	r2, #0
 80055fa:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	2200      	movs	r2, #0
 8005600:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	2200      	movs	r2, #0
 8005606:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8005608:	68b9      	ldr	r1, [r7, #8]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	68fa      	ldr	r2, [r7, #12]
 800560e:	3206      	adds	r2, #6
 8005610:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2b02      	cmp	r3, #2
 8005624:	d80c      	bhi.n	8005640 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	68d9      	ldr	r1, [r3, #12]
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	1c5a      	adds	r2, r3, #1
 800562e:	4613      	mov	r3, r2
 8005630:	009b      	lsls	r3, r3, #2
 8005632:	4413      	add	r3, r2
 8005634:	00db      	lsls	r3, r3, #3
 8005636:	440b      	add	r3, r1
 8005638:	461a      	mov	r2, r3
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	60da      	str	r2, [r3, #12]
 800563e:	e004      	b.n	800564a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	68db      	ldr	r3, [r3, #12]
 8005644:	461a      	mov	r2, r3
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	3301      	adds	r3, #1
 800565a:	60fb      	str	r3, [r7, #12]
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2b03      	cmp	r3, #3
 8005660:	d9bd      	bls.n	80055de <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2200      	movs	r2, #0
 8005666:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	68da      	ldr	r2, [r3, #12]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005674:	611a      	str	r2, [r3, #16]
}
 8005676:	bf00      	nop
 8005678:	3714      	adds	r7, #20
 800567a:	46bd      	mov	sp, r7
 800567c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005680:	4770      	bx	lr

08005682 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8005682:	b480      	push	{r7}
 8005684:	b085      	sub	sp, #20
 8005686:	af00      	add	r7, sp, #0
 8005688:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800568a:	2300      	movs	r3, #0
 800568c:	60fb      	str	r3, [r7, #12]
 800568e:	e046      	b.n	800571e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6919      	ldr	r1, [r3, #16]
 8005694:	68fa      	ldr	r2, [r7, #12]
 8005696:	4613      	mov	r3, r2
 8005698:	009b      	lsls	r3, r3, #2
 800569a:	4413      	add	r3, r2
 800569c:	00db      	lsls	r3, r3, #3
 800569e:	440b      	add	r3, r1
 80056a0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	2200      	movs	r2, #0
 80056a6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	2200      	movs	r2, #0
 80056ac:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	2200      	movs	r2, #0
 80056b2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	2200      	movs	r2, #0
 80056b8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	2200      	movs	r2, #0
 80056be:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	2200      	movs	r2, #0
 80056c4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80056cc:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	f244 52f8 	movw	r2, #17912	; 0x45f8
 80056d4:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80056e2:	68b9      	ldr	r1, [r7, #8]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	68fa      	ldr	r2, [r7, #12]
 80056e8:	3212      	adds	r2, #18
 80056ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2b02      	cmp	r3, #2
 80056f2:	d80c      	bhi.n	800570e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6919      	ldr	r1, [r3, #16]
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	1c5a      	adds	r2, r3, #1
 80056fc:	4613      	mov	r3, r2
 80056fe:	009b      	lsls	r3, r3, #2
 8005700:	4413      	add	r3, r2
 8005702:	00db      	lsls	r3, r3, #3
 8005704:	440b      	add	r3, r1
 8005706:	461a      	mov	r2, r3
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	60da      	str	r2, [r3, #12]
 800570c:	e004      	b.n	8005718 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	691b      	ldr	r3, [r3, #16]
 8005712:	461a      	mov	r2, r3
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	3301      	adds	r3, #1
 800571c:	60fb      	str	r3, [r7, #12]
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2b03      	cmp	r3, #3
 8005722:	d9b5      	bls.n	8005690 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2200      	movs	r2, #0
 8005728:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2200      	movs	r2, #0
 800572e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2200      	movs	r2, #0
 8005734:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2200      	movs	r2, #0
 800573a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2200      	movs	r2, #0
 8005740:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	691a      	ldr	r2, [r3, #16]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800574e:	60da      	str	r2, [r3, #12]
}
 8005750:	bf00      	nop
 8005752:	3714      	adds	r7, #20
 8005754:	46bd      	mov	sp, r7
 8005756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575a:	4770      	bx	lr

0800575c <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 800575c:	b480      	push	{r7}
 800575e:	b08d      	sub	sp, #52	; 0x34
 8005760:	af00      	add	r7, sp, #0
 8005762:	60f8      	str	r0, [r7, #12]
 8005764:	60b9      	str	r1, [r7, #8]
 8005766:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	3318      	adds	r3, #24
 800576c:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	691b      	ldr	r3, [r3, #16]
 8005772:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	691b      	ldr	r3, [r3, #16]
 8005778:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 800577a:	2300      	movs	r3, #0
 800577c:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005782:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005786:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	689b      	ldr	r3, [r3, #8]
 800578c:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 800578e:	2300      	movs	r3, #0
 8005790:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8005792:	6a3b      	ldr	r3, [r7, #32]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800579a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800579e:	d007      	beq.n	80057b0 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80057a0:	697a      	ldr	r2, [r7, #20]
 80057a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057a4:	3304      	adds	r3, #4
 80057a6:	009b      	lsls	r3, r3, #2
 80057a8:	4413      	add	r3, r2
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d001      	beq.n	80057b4 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80057b0:	2302      	movs	r3, #2
 80057b2:	e0ff      	b.n	80059b4 <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 80057b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b6:	3301      	adds	r3, #1
 80057b8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80057ba:	69fb      	ldr	r3, [r7, #28]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	461a      	mov	r2, r3
 80057c0:	6a3b      	ldr	r3, [r7, #32]
 80057c2:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80057c4:	6a3b      	ldr	r3, [r7, #32]
 80057c6:	685a      	ldr	r2, [r3, #4]
 80057c8:	4b7d      	ldr	r3, [pc, #500]	; (80059c0 <ETH_Prepare_Tx_Descriptors+0x264>)
 80057ca:	4013      	ands	r3, r2
 80057cc:	69fa      	ldr	r2, [r7, #28]
 80057ce:	6852      	ldr	r2, [r2, #4]
 80057d0:	431a      	orrs	r2, r3
 80057d2:	6a3b      	ldr	r3, [r7, #32]
 80057d4:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f003 0301 	and.w	r3, r3, #1
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d008      	beq.n	80057f4 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 80057e2:	6a3b      	ldr	r3, [r7, #32]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	695b      	ldr	r3, [r3, #20]
 80057ee:	431a      	orrs	r2, r3
 80057f0:	6a3b      	ldr	r3, [r7, #32]
 80057f2:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f003 0320 	and.w	r3, r3, #32
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d008      	beq.n	8005812 <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8005800:	6a3b      	ldr	r3, [r7, #32]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	691b      	ldr	r3, [r3, #16]
 800580c:	431a      	orrs	r2, r3
 800580e:	6a3b      	ldr	r3, [r7, #32]
 8005810:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f003 0304 	and.w	r3, r3, #4
 800581a:	2b00      	cmp	r3, #0
 800581c:	d005      	beq.n	800582a <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 800581e:	6a3b      	ldr	r3, [r7, #32]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005826:	6a3b      	ldr	r3, [r7, #32]
 8005828:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800582a:	6a3b      	ldr	r3, [r7, #32]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005832:	6a3b      	ldr	r3, [r7, #32]
 8005834:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8005836:	f3bf 8f5f 	dmb	sy
}
 800583a:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800583c:	6a3b      	ldr	r3, [r7, #32]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005844:	6a3b      	ldr	r3, [r7, #32]
 8005846:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8005848:	e082      	b.n	8005950 <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800584a:	6a3b      	ldr	r3, [r7, #32]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005852:	6a3b      	ldr	r3, [r7, #32]
 8005854:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d006      	beq.n	800586a <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800585c:	6a3b      	ldr	r3, [r7, #32]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005864:	6a3b      	ldr	r3, [r7, #32]
 8005866:	601a      	str	r2, [r3, #0]
 8005868:	e005      	b.n	8005876 <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800586a:	6a3b      	ldr	r3, [r7, #32]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005872:	6a3b      	ldr	r3, [r7, #32]
 8005874:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8005876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005878:	3301      	adds	r3, #1
 800587a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800587c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800587e:	2b03      	cmp	r3, #3
 8005880:	d902      	bls.n	8005888 <ETH_Prepare_Tx_Descriptors+0x12c>
 8005882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005884:	3b04      	subs	r3, #4
 8005886:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800588c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005890:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8005892:	6a3b      	ldr	r3, [r7, #32]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800589a:	6a3b      	ldr	r3, [r7, #32]
 800589c:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800589e:	6a3b      	ldr	r3, [r7, #32]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80058a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80058aa:	d007      	beq.n	80058bc <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80058ac:	697a      	ldr	r2, [r7, #20]
 80058ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058b0:	3304      	adds	r3, #4
 80058b2:	009b      	lsls	r3, r3, #2
 80058b4:	4413      	add	r3, r2
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d029      	beq.n	8005910 <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058c8:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 80058ca:	2300      	movs	r3, #0
 80058cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80058ce:	e019      	b.n	8005904 <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 80058d0:	f3bf 8f5f 	dmb	sy
}
 80058d4:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80058d6:	6a3b      	ldr	r3, [r7, #32]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80058de:	6a3b      	ldr	r3, [r7, #32]
 80058e0:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 80058e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058e4:	3301      	adds	r3, #1
 80058e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058ea:	2b03      	cmp	r3, #3
 80058ec:	d902      	bls.n	80058f4 <ETH_Prepare_Tx_Descriptors+0x198>
 80058ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058f0:	3b04      	subs	r3, #4
 80058f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058fc:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 80058fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005900:	3301      	adds	r3, #1
 8005902:	62bb      	str	r3, [r7, #40]	; 0x28
 8005904:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005908:	429a      	cmp	r2, r3
 800590a:	d3e1      	bcc.n	80058d0 <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 800590c:	2302      	movs	r3, #2
 800590e:	e051      	b.n	80059b4 <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 8005910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005912:	3301      	adds	r3, #1
 8005914:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8005916:	69fb      	ldr	r3, [r7, #28]
 8005918:	689b      	ldr	r3, [r3, #8]
 800591a:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800591c:	69fb      	ldr	r3, [r7, #28]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	461a      	mov	r2, r3
 8005922:	6a3b      	ldr	r3, [r7, #32]
 8005924:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8005926:	6a3b      	ldr	r3, [r7, #32]
 8005928:	685a      	ldr	r2, [r3, #4]
 800592a:	4b25      	ldr	r3, [pc, #148]	; (80059c0 <ETH_Prepare_Tx_Descriptors+0x264>)
 800592c:	4013      	ands	r3, r2
 800592e:	69fa      	ldr	r2, [r7, #28]
 8005930:	6852      	ldr	r2, [r2, #4]
 8005932:	431a      	orrs	r2, r3
 8005934:	6a3b      	ldr	r3, [r7, #32]
 8005936:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8005938:	69bb      	ldr	r3, [r7, #24]
 800593a:	3301      	adds	r3, #1
 800593c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 800593e:	f3bf 8f5f 	dmb	sy
}
 8005942:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8005944:	6a3b      	ldr	r3, [r7, #32]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800594c:	6a3b      	ldr	r3, [r7, #32]
 800594e:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8005950:	69fb      	ldr	r3, [r7, #28]
 8005952:	689b      	ldr	r3, [r3, #8]
 8005954:	2b00      	cmp	r3, #0
 8005956:	f47f af78 	bne.w	800584a <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d006      	beq.n	800596e <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8005960:	6a3b      	ldr	r3, [r7, #32]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005968:	6a3b      	ldr	r3, [r7, #32]
 800596a:	601a      	str	r2, [r3, #0]
 800596c:	e005      	b.n	800597a <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800596e:	6a3b      	ldr	r3, [r7, #32]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005976:	6a3b      	ldr	r3, [r7, #32]
 8005978:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800597a:	6a3b      	ldr	r3, [r7, #32]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005982:	6a3b      	ldr	r3, [r7, #32]
 8005984:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800598a:	6979      	ldr	r1, [r7, #20]
 800598c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800598e:	3304      	adds	r3, #4
 8005990:	009b      	lsls	r3, r3, #2
 8005992:	440b      	add	r3, r1
 8005994:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800599a:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800599c:	b672      	cpsid	i
}
 800599e:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80059a4:	69bb      	ldr	r3, [r7, #24]
 80059a6:	4413      	add	r3, r2
 80059a8:	1c5a      	adds	r2, r3, #1
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 80059ae:	b662      	cpsie	i
}
 80059b0:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80059b2:	2300      	movs	r3, #0
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	3734      	adds	r7, #52	; 0x34
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr
 80059c0:	ffffe000 	.word	0xffffe000

080059c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b089      	sub	sp, #36	; 0x24
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
 80059cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80059ce:	2300      	movs	r3, #0
 80059d0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80059d2:	2300      	movs	r3, #0
 80059d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80059d6:	2300      	movs	r3, #0
 80059d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80059da:	2300      	movs	r3, #0
 80059dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80059de:	2300      	movs	r3, #0
 80059e0:	61fb      	str	r3, [r7, #28]
 80059e2:	e175      	b.n	8005cd0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80059e4:	2201      	movs	r2, #1
 80059e6:	69fb      	ldr	r3, [r7, #28]
 80059e8:	fa02 f303 	lsl.w	r3, r2, r3
 80059ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	697a      	ldr	r2, [r7, #20]
 80059f4:	4013      	ands	r3, r2
 80059f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80059f8:	693a      	ldr	r2, [r7, #16]
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	429a      	cmp	r2, r3
 80059fe:	f040 8164 	bne.w	8005cca <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	f003 0303 	and.w	r3, r3, #3
 8005a0a:	2b01      	cmp	r3, #1
 8005a0c:	d005      	beq.n	8005a1a <HAL_GPIO_Init+0x56>
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	f003 0303 	and.w	r3, r3, #3
 8005a16:	2b02      	cmp	r3, #2
 8005a18:	d130      	bne.n	8005a7c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	689b      	ldr	r3, [r3, #8]
 8005a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005a20:	69fb      	ldr	r3, [r7, #28]
 8005a22:	005b      	lsls	r3, r3, #1
 8005a24:	2203      	movs	r2, #3
 8005a26:	fa02 f303 	lsl.w	r3, r2, r3
 8005a2a:	43db      	mvns	r3, r3
 8005a2c:	69ba      	ldr	r2, [r7, #24]
 8005a2e:	4013      	ands	r3, r2
 8005a30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	68da      	ldr	r2, [r3, #12]
 8005a36:	69fb      	ldr	r3, [r7, #28]
 8005a38:	005b      	lsls	r3, r3, #1
 8005a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a3e:	69ba      	ldr	r2, [r7, #24]
 8005a40:	4313      	orrs	r3, r2
 8005a42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	69ba      	ldr	r2, [r7, #24]
 8005a48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005a50:	2201      	movs	r2, #1
 8005a52:	69fb      	ldr	r3, [r7, #28]
 8005a54:	fa02 f303 	lsl.w	r3, r2, r3
 8005a58:	43db      	mvns	r3, r3
 8005a5a:	69ba      	ldr	r2, [r7, #24]
 8005a5c:	4013      	ands	r3, r2
 8005a5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	091b      	lsrs	r3, r3, #4
 8005a66:	f003 0201 	and.w	r2, r3, #1
 8005a6a:	69fb      	ldr	r3, [r7, #28]
 8005a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a70:	69ba      	ldr	r2, [r7, #24]
 8005a72:	4313      	orrs	r3, r2
 8005a74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	69ba      	ldr	r2, [r7, #24]
 8005a7a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	f003 0303 	and.w	r3, r3, #3
 8005a84:	2b03      	cmp	r3, #3
 8005a86:	d017      	beq.n	8005ab8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	68db      	ldr	r3, [r3, #12]
 8005a8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005a8e:	69fb      	ldr	r3, [r7, #28]
 8005a90:	005b      	lsls	r3, r3, #1
 8005a92:	2203      	movs	r2, #3
 8005a94:	fa02 f303 	lsl.w	r3, r2, r3
 8005a98:	43db      	mvns	r3, r3
 8005a9a:	69ba      	ldr	r2, [r7, #24]
 8005a9c:	4013      	ands	r3, r2
 8005a9e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	689a      	ldr	r2, [r3, #8]
 8005aa4:	69fb      	ldr	r3, [r7, #28]
 8005aa6:	005b      	lsls	r3, r3, #1
 8005aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8005aac:	69ba      	ldr	r2, [r7, #24]
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	69ba      	ldr	r2, [r7, #24]
 8005ab6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	f003 0303 	and.w	r3, r3, #3
 8005ac0:	2b02      	cmp	r3, #2
 8005ac2:	d123      	bne.n	8005b0c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005ac4:	69fb      	ldr	r3, [r7, #28]
 8005ac6:	08da      	lsrs	r2, r3, #3
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	3208      	adds	r2, #8
 8005acc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ad0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005ad2:	69fb      	ldr	r3, [r7, #28]
 8005ad4:	f003 0307 	and.w	r3, r3, #7
 8005ad8:	009b      	lsls	r3, r3, #2
 8005ada:	220f      	movs	r2, #15
 8005adc:	fa02 f303 	lsl.w	r3, r2, r3
 8005ae0:	43db      	mvns	r3, r3
 8005ae2:	69ba      	ldr	r2, [r7, #24]
 8005ae4:	4013      	ands	r3, r2
 8005ae6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	691a      	ldr	r2, [r3, #16]
 8005aec:	69fb      	ldr	r3, [r7, #28]
 8005aee:	f003 0307 	and.w	r3, r3, #7
 8005af2:	009b      	lsls	r3, r3, #2
 8005af4:	fa02 f303 	lsl.w	r3, r2, r3
 8005af8:	69ba      	ldr	r2, [r7, #24]
 8005afa:	4313      	orrs	r3, r2
 8005afc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8005afe:	69fb      	ldr	r3, [r7, #28]
 8005b00:	08da      	lsrs	r2, r3, #3
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	3208      	adds	r2, #8
 8005b06:	69b9      	ldr	r1, [r7, #24]
 8005b08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005b12:	69fb      	ldr	r3, [r7, #28]
 8005b14:	005b      	lsls	r3, r3, #1
 8005b16:	2203      	movs	r2, #3
 8005b18:	fa02 f303 	lsl.w	r3, r2, r3
 8005b1c:	43db      	mvns	r3, r3
 8005b1e:	69ba      	ldr	r2, [r7, #24]
 8005b20:	4013      	ands	r3, r2
 8005b22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	f003 0203 	and.w	r2, r3, #3
 8005b2c:	69fb      	ldr	r3, [r7, #28]
 8005b2e:	005b      	lsls	r3, r3, #1
 8005b30:	fa02 f303 	lsl.w	r3, r2, r3
 8005b34:	69ba      	ldr	r2, [r7, #24]
 8005b36:	4313      	orrs	r3, r2
 8005b38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	69ba      	ldr	r2, [r7, #24]
 8005b3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	f000 80be 	beq.w	8005cca <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005b4e:	4b66      	ldr	r3, [pc, #408]	; (8005ce8 <HAL_GPIO_Init+0x324>)
 8005b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b52:	4a65      	ldr	r2, [pc, #404]	; (8005ce8 <HAL_GPIO_Init+0x324>)
 8005b54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005b58:	6453      	str	r3, [r2, #68]	; 0x44
 8005b5a:	4b63      	ldr	r3, [pc, #396]	; (8005ce8 <HAL_GPIO_Init+0x324>)
 8005b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b62:	60fb      	str	r3, [r7, #12]
 8005b64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005b66:	4a61      	ldr	r2, [pc, #388]	; (8005cec <HAL_GPIO_Init+0x328>)
 8005b68:	69fb      	ldr	r3, [r7, #28]
 8005b6a:	089b      	lsrs	r3, r3, #2
 8005b6c:	3302      	adds	r3, #2
 8005b6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b72:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005b74:	69fb      	ldr	r3, [r7, #28]
 8005b76:	f003 0303 	and.w	r3, r3, #3
 8005b7a:	009b      	lsls	r3, r3, #2
 8005b7c:	220f      	movs	r2, #15
 8005b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b82:	43db      	mvns	r3, r3
 8005b84:	69ba      	ldr	r2, [r7, #24]
 8005b86:	4013      	ands	r3, r2
 8005b88:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	4a58      	ldr	r2, [pc, #352]	; (8005cf0 <HAL_GPIO_Init+0x32c>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d037      	beq.n	8005c02 <HAL_GPIO_Init+0x23e>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	4a57      	ldr	r2, [pc, #348]	; (8005cf4 <HAL_GPIO_Init+0x330>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d031      	beq.n	8005bfe <HAL_GPIO_Init+0x23a>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	4a56      	ldr	r2, [pc, #344]	; (8005cf8 <HAL_GPIO_Init+0x334>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d02b      	beq.n	8005bfa <HAL_GPIO_Init+0x236>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	4a55      	ldr	r2, [pc, #340]	; (8005cfc <HAL_GPIO_Init+0x338>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d025      	beq.n	8005bf6 <HAL_GPIO_Init+0x232>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	4a54      	ldr	r2, [pc, #336]	; (8005d00 <HAL_GPIO_Init+0x33c>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d01f      	beq.n	8005bf2 <HAL_GPIO_Init+0x22e>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	4a53      	ldr	r2, [pc, #332]	; (8005d04 <HAL_GPIO_Init+0x340>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d019      	beq.n	8005bee <HAL_GPIO_Init+0x22a>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	4a52      	ldr	r2, [pc, #328]	; (8005d08 <HAL_GPIO_Init+0x344>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d013      	beq.n	8005bea <HAL_GPIO_Init+0x226>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	4a51      	ldr	r2, [pc, #324]	; (8005d0c <HAL_GPIO_Init+0x348>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d00d      	beq.n	8005be6 <HAL_GPIO_Init+0x222>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	4a50      	ldr	r2, [pc, #320]	; (8005d10 <HAL_GPIO_Init+0x34c>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d007      	beq.n	8005be2 <HAL_GPIO_Init+0x21e>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	4a4f      	ldr	r2, [pc, #316]	; (8005d14 <HAL_GPIO_Init+0x350>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d101      	bne.n	8005bde <HAL_GPIO_Init+0x21a>
 8005bda:	2309      	movs	r3, #9
 8005bdc:	e012      	b.n	8005c04 <HAL_GPIO_Init+0x240>
 8005bde:	230a      	movs	r3, #10
 8005be0:	e010      	b.n	8005c04 <HAL_GPIO_Init+0x240>
 8005be2:	2308      	movs	r3, #8
 8005be4:	e00e      	b.n	8005c04 <HAL_GPIO_Init+0x240>
 8005be6:	2307      	movs	r3, #7
 8005be8:	e00c      	b.n	8005c04 <HAL_GPIO_Init+0x240>
 8005bea:	2306      	movs	r3, #6
 8005bec:	e00a      	b.n	8005c04 <HAL_GPIO_Init+0x240>
 8005bee:	2305      	movs	r3, #5
 8005bf0:	e008      	b.n	8005c04 <HAL_GPIO_Init+0x240>
 8005bf2:	2304      	movs	r3, #4
 8005bf4:	e006      	b.n	8005c04 <HAL_GPIO_Init+0x240>
 8005bf6:	2303      	movs	r3, #3
 8005bf8:	e004      	b.n	8005c04 <HAL_GPIO_Init+0x240>
 8005bfa:	2302      	movs	r3, #2
 8005bfc:	e002      	b.n	8005c04 <HAL_GPIO_Init+0x240>
 8005bfe:	2301      	movs	r3, #1
 8005c00:	e000      	b.n	8005c04 <HAL_GPIO_Init+0x240>
 8005c02:	2300      	movs	r3, #0
 8005c04:	69fa      	ldr	r2, [r7, #28]
 8005c06:	f002 0203 	and.w	r2, r2, #3
 8005c0a:	0092      	lsls	r2, r2, #2
 8005c0c:	4093      	lsls	r3, r2
 8005c0e:	69ba      	ldr	r2, [r7, #24]
 8005c10:	4313      	orrs	r3, r2
 8005c12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005c14:	4935      	ldr	r1, [pc, #212]	; (8005cec <HAL_GPIO_Init+0x328>)
 8005c16:	69fb      	ldr	r3, [r7, #28]
 8005c18:	089b      	lsrs	r3, r3, #2
 8005c1a:	3302      	adds	r3, #2
 8005c1c:	69ba      	ldr	r2, [r7, #24]
 8005c1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005c22:	4b3d      	ldr	r3, [pc, #244]	; (8005d18 <HAL_GPIO_Init+0x354>)
 8005c24:	689b      	ldr	r3, [r3, #8]
 8005c26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	43db      	mvns	r3, r3
 8005c2c:	69ba      	ldr	r2, [r7, #24]
 8005c2e:	4013      	ands	r3, r2
 8005c30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d003      	beq.n	8005c46 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005c3e:	69ba      	ldr	r2, [r7, #24]
 8005c40:	693b      	ldr	r3, [r7, #16]
 8005c42:	4313      	orrs	r3, r2
 8005c44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005c46:	4a34      	ldr	r2, [pc, #208]	; (8005d18 <HAL_GPIO_Init+0x354>)
 8005c48:	69bb      	ldr	r3, [r7, #24]
 8005c4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005c4c:	4b32      	ldr	r3, [pc, #200]	; (8005d18 <HAL_GPIO_Init+0x354>)
 8005c4e:	68db      	ldr	r3, [r3, #12]
 8005c50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	43db      	mvns	r3, r3
 8005c56:	69ba      	ldr	r2, [r7, #24]
 8005c58:	4013      	ands	r3, r2
 8005c5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d003      	beq.n	8005c70 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005c68:	69ba      	ldr	r2, [r7, #24]
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005c70:	4a29      	ldr	r2, [pc, #164]	; (8005d18 <HAL_GPIO_Init+0x354>)
 8005c72:	69bb      	ldr	r3, [r7, #24]
 8005c74:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005c76:	4b28      	ldr	r3, [pc, #160]	; (8005d18 <HAL_GPIO_Init+0x354>)
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c7c:	693b      	ldr	r3, [r7, #16]
 8005c7e:	43db      	mvns	r3, r3
 8005c80:	69ba      	ldr	r2, [r7, #24]
 8005c82:	4013      	ands	r3, r2
 8005c84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d003      	beq.n	8005c9a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005c92:	69ba      	ldr	r2, [r7, #24]
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	4313      	orrs	r3, r2
 8005c98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005c9a:	4a1f      	ldr	r2, [pc, #124]	; (8005d18 <HAL_GPIO_Init+0x354>)
 8005c9c:	69bb      	ldr	r3, [r7, #24]
 8005c9e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005ca0:	4b1d      	ldr	r3, [pc, #116]	; (8005d18 <HAL_GPIO_Init+0x354>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	43db      	mvns	r3, r3
 8005caa:	69ba      	ldr	r2, [r7, #24]
 8005cac:	4013      	ands	r3, r2
 8005cae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d003      	beq.n	8005cc4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005cbc:	69ba      	ldr	r2, [r7, #24]
 8005cbe:	693b      	ldr	r3, [r7, #16]
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005cc4:	4a14      	ldr	r2, [pc, #80]	; (8005d18 <HAL_GPIO_Init+0x354>)
 8005cc6:	69bb      	ldr	r3, [r7, #24]
 8005cc8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005cca:	69fb      	ldr	r3, [r7, #28]
 8005ccc:	3301      	adds	r3, #1
 8005cce:	61fb      	str	r3, [r7, #28]
 8005cd0:	69fb      	ldr	r3, [r7, #28]
 8005cd2:	2b0f      	cmp	r3, #15
 8005cd4:	f67f ae86 	bls.w	80059e4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005cd8:	bf00      	nop
 8005cda:	bf00      	nop
 8005cdc:	3724      	adds	r7, #36	; 0x24
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce4:	4770      	bx	lr
 8005ce6:	bf00      	nop
 8005ce8:	40023800 	.word	0x40023800
 8005cec:	40013800 	.word	0x40013800
 8005cf0:	40020000 	.word	0x40020000
 8005cf4:	40020400 	.word	0x40020400
 8005cf8:	40020800 	.word	0x40020800
 8005cfc:	40020c00 	.word	0x40020c00
 8005d00:	40021000 	.word	0x40021000
 8005d04:	40021400 	.word	0x40021400
 8005d08:	40021800 	.word	0x40021800
 8005d0c:	40021c00 	.word	0x40021c00
 8005d10:	40022000 	.word	0x40022000
 8005d14:	40022400 	.word	0x40022400
 8005d18:	40013c00 	.word	0x40013c00

08005d1c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b087      	sub	sp, #28
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
 8005d24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8005d26:	2300      	movs	r3, #0
 8005d28:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8005d2e:	2300      	movs	r3, #0
 8005d30:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8005d32:	2300      	movs	r3, #0
 8005d34:	617b      	str	r3, [r7, #20]
 8005d36:	e0d9      	b.n	8005eec <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005d38:	2201      	movs	r2, #1
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d40:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8005d42:	683a      	ldr	r2, [r7, #0]
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	4013      	ands	r3, r2
 8005d48:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8005d4a:	68fa      	ldr	r2, [r7, #12]
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	429a      	cmp	r2, r3
 8005d50:	f040 80c9 	bne.w	8005ee6 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8005d54:	4a6b      	ldr	r2, [pc, #428]	; (8005f04 <HAL_GPIO_DeInit+0x1e8>)
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	089b      	lsrs	r3, r3, #2
 8005d5a:	3302      	adds	r3, #2
 8005d5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d60:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	f003 0303 	and.w	r3, r3, #3
 8005d68:	009b      	lsls	r3, r3, #2
 8005d6a:	220f      	movs	r2, #15
 8005d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d70:	68ba      	ldr	r2, [r7, #8]
 8005d72:	4013      	ands	r3, r2
 8005d74:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	4a63      	ldr	r2, [pc, #396]	; (8005f08 <HAL_GPIO_DeInit+0x1ec>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d037      	beq.n	8005dee <HAL_GPIO_DeInit+0xd2>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	4a62      	ldr	r2, [pc, #392]	; (8005f0c <HAL_GPIO_DeInit+0x1f0>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d031      	beq.n	8005dea <HAL_GPIO_DeInit+0xce>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	4a61      	ldr	r2, [pc, #388]	; (8005f10 <HAL_GPIO_DeInit+0x1f4>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d02b      	beq.n	8005de6 <HAL_GPIO_DeInit+0xca>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	4a60      	ldr	r2, [pc, #384]	; (8005f14 <HAL_GPIO_DeInit+0x1f8>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d025      	beq.n	8005de2 <HAL_GPIO_DeInit+0xc6>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	4a5f      	ldr	r2, [pc, #380]	; (8005f18 <HAL_GPIO_DeInit+0x1fc>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d01f      	beq.n	8005dde <HAL_GPIO_DeInit+0xc2>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	4a5e      	ldr	r2, [pc, #376]	; (8005f1c <HAL_GPIO_DeInit+0x200>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d019      	beq.n	8005dda <HAL_GPIO_DeInit+0xbe>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	4a5d      	ldr	r2, [pc, #372]	; (8005f20 <HAL_GPIO_DeInit+0x204>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d013      	beq.n	8005dd6 <HAL_GPIO_DeInit+0xba>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	4a5c      	ldr	r2, [pc, #368]	; (8005f24 <HAL_GPIO_DeInit+0x208>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d00d      	beq.n	8005dd2 <HAL_GPIO_DeInit+0xb6>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	4a5b      	ldr	r2, [pc, #364]	; (8005f28 <HAL_GPIO_DeInit+0x20c>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d007      	beq.n	8005dce <HAL_GPIO_DeInit+0xb2>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	4a5a      	ldr	r2, [pc, #360]	; (8005f2c <HAL_GPIO_DeInit+0x210>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d101      	bne.n	8005dca <HAL_GPIO_DeInit+0xae>
 8005dc6:	2309      	movs	r3, #9
 8005dc8:	e012      	b.n	8005df0 <HAL_GPIO_DeInit+0xd4>
 8005dca:	230a      	movs	r3, #10
 8005dcc:	e010      	b.n	8005df0 <HAL_GPIO_DeInit+0xd4>
 8005dce:	2308      	movs	r3, #8
 8005dd0:	e00e      	b.n	8005df0 <HAL_GPIO_DeInit+0xd4>
 8005dd2:	2307      	movs	r3, #7
 8005dd4:	e00c      	b.n	8005df0 <HAL_GPIO_DeInit+0xd4>
 8005dd6:	2306      	movs	r3, #6
 8005dd8:	e00a      	b.n	8005df0 <HAL_GPIO_DeInit+0xd4>
 8005dda:	2305      	movs	r3, #5
 8005ddc:	e008      	b.n	8005df0 <HAL_GPIO_DeInit+0xd4>
 8005dde:	2304      	movs	r3, #4
 8005de0:	e006      	b.n	8005df0 <HAL_GPIO_DeInit+0xd4>
 8005de2:	2303      	movs	r3, #3
 8005de4:	e004      	b.n	8005df0 <HAL_GPIO_DeInit+0xd4>
 8005de6:	2302      	movs	r3, #2
 8005de8:	e002      	b.n	8005df0 <HAL_GPIO_DeInit+0xd4>
 8005dea:	2301      	movs	r3, #1
 8005dec:	e000      	b.n	8005df0 <HAL_GPIO_DeInit+0xd4>
 8005dee:	2300      	movs	r3, #0
 8005df0:	697a      	ldr	r2, [r7, #20]
 8005df2:	f002 0203 	and.w	r2, r2, #3
 8005df6:	0092      	lsls	r2, r2, #2
 8005df8:	4093      	lsls	r3, r2
 8005dfa:	68ba      	ldr	r2, [r7, #8]
 8005dfc:	429a      	cmp	r2, r3
 8005dfe:	d132      	bne.n	8005e66 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005e00:	4b4b      	ldr	r3, [pc, #300]	; (8005f30 <HAL_GPIO_DeInit+0x214>)
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	43db      	mvns	r3, r3
 8005e08:	4949      	ldr	r1, [pc, #292]	; (8005f30 <HAL_GPIO_DeInit+0x214>)
 8005e0a:	4013      	ands	r3, r2
 8005e0c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005e0e:	4b48      	ldr	r3, [pc, #288]	; (8005f30 <HAL_GPIO_DeInit+0x214>)
 8005e10:	685a      	ldr	r2, [r3, #4]
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	43db      	mvns	r3, r3
 8005e16:	4946      	ldr	r1, [pc, #280]	; (8005f30 <HAL_GPIO_DeInit+0x214>)
 8005e18:	4013      	ands	r3, r2
 8005e1a:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005e1c:	4b44      	ldr	r3, [pc, #272]	; (8005f30 <HAL_GPIO_DeInit+0x214>)
 8005e1e:	68da      	ldr	r2, [r3, #12]
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	43db      	mvns	r3, r3
 8005e24:	4942      	ldr	r1, [pc, #264]	; (8005f30 <HAL_GPIO_DeInit+0x214>)
 8005e26:	4013      	ands	r3, r2
 8005e28:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005e2a:	4b41      	ldr	r3, [pc, #260]	; (8005f30 <HAL_GPIO_DeInit+0x214>)
 8005e2c:	689a      	ldr	r2, [r3, #8]
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	43db      	mvns	r3, r3
 8005e32:	493f      	ldr	r1, [pc, #252]	; (8005f30 <HAL_GPIO_DeInit+0x214>)
 8005e34:	4013      	ands	r3, r2
 8005e36:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	f003 0303 	and.w	r3, r3, #3
 8005e3e:	009b      	lsls	r3, r3, #2
 8005e40:	220f      	movs	r2, #15
 8005e42:	fa02 f303 	lsl.w	r3, r2, r3
 8005e46:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8005e48:	4a2e      	ldr	r2, [pc, #184]	; (8005f04 <HAL_GPIO_DeInit+0x1e8>)
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	089b      	lsrs	r3, r3, #2
 8005e4e:	3302      	adds	r3, #2
 8005e50:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	43da      	mvns	r2, r3
 8005e58:	482a      	ldr	r0, [pc, #168]	; (8005f04 <HAL_GPIO_DeInit+0x1e8>)
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	089b      	lsrs	r3, r3, #2
 8005e5e:	400a      	ands	r2, r1
 8005e60:	3302      	adds	r3, #2
 8005e62:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681a      	ldr	r2, [r3, #0]
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	005b      	lsls	r3, r3, #1
 8005e6e:	2103      	movs	r1, #3
 8005e70:	fa01 f303 	lsl.w	r3, r1, r3
 8005e74:	43db      	mvns	r3, r3
 8005e76:	401a      	ands	r2, r3
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	08da      	lsrs	r2, r3, #3
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	3208      	adds	r2, #8
 8005e84:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	f003 0307 	and.w	r3, r3, #7
 8005e8e:	009b      	lsls	r3, r3, #2
 8005e90:	220f      	movs	r2, #15
 8005e92:	fa02 f303 	lsl.w	r3, r2, r3
 8005e96:	43db      	mvns	r3, r3
 8005e98:	697a      	ldr	r2, [r7, #20]
 8005e9a:	08d2      	lsrs	r2, r2, #3
 8005e9c:	4019      	ands	r1, r3
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	3208      	adds	r2, #8
 8005ea2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	68da      	ldr	r2, [r3, #12]
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	005b      	lsls	r3, r3, #1
 8005eae:	2103      	movs	r1, #3
 8005eb0:	fa01 f303 	lsl.w	r3, r1, r3
 8005eb4:	43db      	mvns	r3, r3
 8005eb6:	401a      	ands	r2, r3
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	685a      	ldr	r2, [r3, #4]
 8005ec0:	2101      	movs	r1, #1
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	fa01 f303 	lsl.w	r3, r1, r3
 8005ec8:	43db      	mvns	r3, r3
 8005eca:	401a      	ands	r2, r3
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	689a      	ldr	r2, [r3, #8]
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	005b      	lsls	r3, r3, #1
 8005ed8:	2103      	movs	r1, #3
 8005eda:	fa01 f303 	lsl.w	r3, r1, r3
 8005ede:	43db      	mvns	r3, r3
 8005ee0:	401a      	ands	r2, r3
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	3301      	adds	r3, #1
 8005eea:	617b      	str	r3, [r7, #20]
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	2b0f      	cmp	r3, #15
 8005ef0:	f67f af22 	bls.w	8005d38 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8005ef4:	bf00      	nop
 8005ef6:	bf00      	nop
 8005ef8:	371c      	adds	r7, #28
 8005efa:	46bd      	mov	sp, r7
 8005efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f00:	4770      	bx	lr
 8005f02:	bf00      	nop
 8005f04:	40013800 	.word	0x40013800
 8005f08:	40020000 	.word	0x40020000
 8005f0c:	40020400 	.word	0x40020400
 8005f10:	40020800 	.word	0x40020800
 8005f14:	40020c00 	.word	0x40020c00
 8005f18:	40021000 	.word	0x40021000
 8005f1c:	40021400 	.word	0x40021400
 8005f20:	40021800 	.word	0x40021800
 8005f24:	40021c00 	.word	0x40021c00
 8005f28:	40022000 	.word	0x40022000
 8005f2c:	40022400 	.word	0x40022400
 8005f30:	40013c00 	.word	0x40013c00

08005f34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b083      	sub	sp, #12
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
 8005f3c:	460b      	mov	r3, r1
 8005f3e:	807b      	strh	r3, [r7, #2]
 8005f40:	4613      	mov	r3, r2
 8005f42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005f44:	787b      	ldrb	r3, [r7, #1]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d003      	beq.n	8005f52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005f4a:	887a      	ldrh	r2, [r7, #2]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005f50:	e003      	b.n	8005f5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005f52:	887b      	ldrh	r3, [r7, #2]
 8005f54:	041a      	lsls	r2, r3, #16
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	619a      	str	r2, [r3, #24]
}
 8005f5a:	bf00      	nop
 8005f5c:	370c      	adds	r7, #12
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f64:	4770      	bx	lr
	...

08005f68 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b082      	sub	sp, #8
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d101      	bne.n	8005f7a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005f76:	2301      	movs	r3, #1
 8005f78:	e07f      	b.n	800607a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f80:	b2db      	uxtb	r3, r3
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d106      	bne.n	8005f94 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f000 f8a9 	bl	80060e6 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2224      	movs	r2, #36	; 0x24
 8005f98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	681a      	ldr	r2, [r3, #0]
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f022 0201 	bic.w	r2, r2, #1
 8005faa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	685a      	ldr	r2, [r3, #4]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005fb8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	689a      	ldr	r2, [r3, #8]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005fc8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	68db      	ldr	r3, [r3, #12]
 8005fce:	2b01      	cmp	r3, #1
 8005fd0:	d107      	bne.n	8005fe2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	689a      	ldr	r2, [r3, #8]
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005fde:	609a      	str	r2, [r3, #8]
 8005fe0:	e006      	b.n	8005ff0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	689a      	ldr	r2, [r3, #8]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005fee:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	68db      	ldr	r3, [r3, #12]
 8005ff4:	2b02      	cmp	r3, #2
 8005ff6:	d104      	bne.n	8006002 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006000:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	6859      	ldr	r1, [r3, #4]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681a      	ldr	r2, [r3, #0]
 800600c:	4b1d      	ldr	r3, [pc, #116]	; (8006084 <HAL_I2C_Init+0x11c>)
 800600e:	430b      	orrs	r3, r1
 8006010:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	68da      	ldr	r2, [r3, #12]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006020:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	691a      	ldr	r2, [r3, #16]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	695b      	ldr	r3, [r3, #20]
 800602a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	699b      	ldr	r3, [r3, #24]
 8006032:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	430a      	orrs	r2, r1
 800603a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	69d9      	ldr	r1, [r3, #28]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6a1a      	ldr	r2, [r3, #32]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	430a      	orrs	r2, r1
 800604a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	681a      	ldr	r2, [r3, #0]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f042 0201 	orr.w	r2, r2, #1
 800605a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2200      	movs	r2, #0
 8006060:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2220      	movs	r2, #32
 8006066:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2200      	movs	r2, #0
 800606e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2200      	movs	r2, #0
 8006074:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006078:	2300      	movs	r3, #0
}
 800607a:	4618      	mov	r0, r3
 800607c:	3708      	adds	r7, #8
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}
 8006082:	bf00      	nop
 8006084:	02008000 	.word	0x02008000

08006088 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b082      	sub	sp, #8
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d101      	bne.n	800609a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8006096:	2301      	movs	r3, #1
 8006098:	e021      	b.n	80060de <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2224      	movs	r2, #36	; 0x24
 800609e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	681a      	ldr	r2, [r3, #0]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f022 0201 	bic.w	r2, r2, #1
 80060b0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f000 f821 	bl	80060fa <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2200      	movs	r2, #0
 80060bc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2200      	movs	r2, #0
 80060c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2200      	movs	r2, #0
 80060ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2200      	movs	r2, #0
 80060d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2200      	movs	r2, #0
 80060d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80060dc:	2300      	movs	r3, #0
}
 80060de:	4618      	mov	r0, r3
 80060e0:	3708      	adds	r7, #8
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd80      	pop	{r7, pc}

080060e6 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 80060e6:	b480      	push	{r7}
 80060e8:	b083      	sub	sp, #12
 80060ea:	af00      	add	r7, sp, #0
 80060ec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 80060ee:	bf00      	nop
 80060f0:	370c      	adds	r7, #12
 80060f2:	46bd      	mov	sp, r7
 80060f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f8:	4770      	bx	lr

080060fa <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 80060fa:	b480      	push	{r7}
 80060fc:	b083      	sub	sp, #12
 80060fe:	af00      	add	r7, sp, #0
 8006100:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8006102:	bf00      	nop
 8006104:	370c      	adds	r7, #12
 8006106:	46bd      	mov	sp, r7
 8006108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610c:	4770      	bx	lr
	...

08006110 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b088      	sub	sp, #32
 8006114:	af02      	add	r7, sp, #8
 8006116:	60f8      	str	r0, [r7, #12]
 8006118:	4608      	mov	r0, r1
 800611a:	4611      	mov	r1, r2
 800611c:	461a      	mov	r2, r3
 800611e:	4603      	mov	r3, r0
 8006120:	817b      	strh	r3, [r7, #10]
 8006122:	460b      	mov	r3, r1
 8006124:	813b      	strh	r3, [r7, #8]
 8006126:	4613      	mov	r3, r2
 8006128:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006130:	b2db      	uxtb	r3, r3
 8006132:	2b20      	cmp	r3, #32
 8006134:	f040 80f9 	bne.w	800632a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006138:	6a3b      	ldr	r3, [r7, #32]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d002      	beq.n	8006144 <HAL_I2C_Mem_Write+0x34>
 800613e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006140:	2b00      	cmp	r3, #0
 8006142:	d105      	bne.n	8006150 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	f44f 7200 	mov.w	r2, #512	; 0x200
 800614a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800614c:	2301      	movs	r3, #1
 800614e:	e0ed      	b.n	800632c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006156:	2b01      	cmp	r3, #1
 8006158:	d101      	bne.n	800615e <HAL_I2C_Mem_Write+0x4e>
 800615a:	2302      	movs	r3, #2
 800615c:	e0e6      	b.n	800632c <HAL_I2C_Mem_Write+0x21c>
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2201      	movs	r2, #1
 8006162:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006166:	f7fd fd3f 	bl	8003be8 <HAL_GetTick>
 800616a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	9300      	str	r3, [sp, #0]
 8006170:	2319      	movs	r3, #25
 8006172:	2201      	movs	r2, #1
 8006174:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006178:	68f8      	ldr	r0, [r7, #12]
 800617a:	f000 fad1 	bl	8006720 <I2C_WaitOnFlagUntilTimeout>
 800617e:	4603      	mov	r3, r0
 8006180:	2b00      	cmp	r3, #0
 8006182:	d001      	beq.n	8006188 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006184:	2301      	movs	r3, #1
 8006186:	e0d1      	b.n	800632c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2221      	movs	r2, #33	; 0x21
 800618c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2240      	movs	r2, #64	; 0x40
 8006194:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	2200      	movs	r2, #0
 800619c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	6a3a      	ldr	r2, [r7, #32]
 80061a2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80061a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	2200      	movs	r2, #0
 80061ae:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80061b0:	88f8      	ldrh	r0, [r7, #6]
 80061b2:	893a      	ldrh	r2, [r7, #8]
 80061b4:	8979      	ldrh	r1, [r7, #10]
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	9301      	str	r3, [sp, #4]
 80061ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061bc:	9300      	str	r3, [sp, #0]
 80061be:	4603      	mov	r3, r0
 80061c0:	68f8      	ldr	r0, [r7, #12]
 80061c2:	f000 f9e1 	bl	8006588 <I2C_RequestMemoryWrite>
 80061c6:	4603      	mov	r3, r0
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d005      	beq.n	80061d8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	2200      	movs	r2, #0
 80061d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80061d4:	2301      	movs	r3, #1
 80061d6:	e0a9      	b.n	800632c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061dc:	b29b      	uxth	r3, r3
 80061de:	2bff      	cmp	r3, #255	; 0xff
 80061e0:	d90e      	bls.n	8006200 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	22ff      	movs	r2, #255	; 0xff
 80061e6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061ec:	b2da      	uxtb	r2, r3
 80061ee:	8979      	ldrh	r1, [r7, #10]
 80061f0:	2300      	movs	r3, #0
 80061f2:	9300      	str	r3, [sp, #0]
 80061f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80061f8:	68f8      	ldr	r0, [r7, #12]
 80061fa:	f000 fc2d 	bl	8006a58 <I2C_TransferConfig>
 80061fe:	e00f      	b.n	8006220 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006204:	b29a      	uxth	r2, r3
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800620e:	b2da      	uxtb	r2, r3
 8006210:	8979      	ldrh	r1, [r7, #10]
 8006212:	2300      	movs	r3, #0
 8006214:	9300      	str	r3, [sp, #0]
 8006216:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800621a:	68f8      	ldr	r0, [r7, #12]
 800621c:	f000 fc1c 	bl	8006a58 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006220:	697a      	ldr	r2, [r7, #20]
 8006222:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006224:	68f8      	ldr	r0, [r7, #12]
 8006226:	f000 fabb 	bl	80067a0 <I2C_WaitOnTXISFlagUntilTimeout>
 800622a:	4603      	mov	r3, r0
 800622c:	2b00      	cmp	r3, #0
 800622e:	d001      	beq.n	8006234 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006230:	2301      	movs	r3, #1
 8006232:	e07b      	b.n	800632c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006238:	781a      	ldrb	r2, [r3, #0]
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006244:	1c5a      	adds	r2, r3, #1
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800624e:	b29b      	uxth	r3, r3
 8006250:	3b01      	subs	r3, #1
 8006252:	b29a      	uxth	r2, r3
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800625c:	3b01      	subs	r3, #1
 800625e:	b29a      	uxth	r2, r3
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006268:	b29b      	uxth	r3, r3
 800626a:	2b00      	cmp	r3, #0
 800626c:	d034      	beq.n	80062d8 <HAL_I2C_Mem_Write+0x1c8>
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006272:	2b00      	cmp	r3, #0
 8006274:	d130      	bne.n	80062d8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	9300      	str	r3, [sp, #0]
 800627a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800627c:	2200      	movs	r2, #0
 800627e:	2180      	movs	r1, #128	; 0x80
 8006280:	68f8      	ldr	r0, [r7, #12]
 8006282:	f000 fa4d 	bl	8006720 <I2C_WaitOnFlagUntilTimeout>
 8006286:	4603      	mov	r3, r0
 8006288:	2b00      	cmp	r3, #0
 800628a:	d001      	beq.n	8006290 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800628c:	2301      	movs	r3, #1
 800628e:	e04d      	b.n	800632c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006294:	b29b      	uxth	r3, r3
 8006296:	2bff      	cmp	r3, #255	; 0xff
 8006298:	d90e      	bls.n	80062b8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	22ff      	movs	r2, #255	; 0xff
 800629e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062a4:	b2da      	uxtb	r2, r3
 80062a6:	8979      	ldrh	r1, [r7, #10]
 80062a8:	2300      	movs	r3, #0
 80062aa:	9300      	str	r3, [sp, #0]
 80062ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80062b0:	68f8      	ldr	r0, [r7, #12]
 80062b2:	f000 fbd1 	bl	8006a58 <I2C_TransferConfig>
 80062b6:	e00f      	b.n	80062d8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062bc:	b29a      	uxth	r2, r3
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062c6:	b2da      	uxtb	r2, r3
 80062c8:	8979      	ldrh	r1, [r7, #10]
 80062ca:	2300      	movs	r3, #0
 80062cc:	9300      	str	r3, [sp, #0]
 80062ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80062d2:	68f8      	ldr	r0, [r7, #12]
 80062d4:	f000 fbc0 	bl	8006a58 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062dc:	b29b      	uxth	r3, r3
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d19e      	bne.n	8006220 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80062e2:	697a      	ldr	r2, [r7, #20]
 80062e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80062e6:	68f8      	ldr	r0, [r7, #12]
 80062e8:	f000 fa9a 	bl	8006820 <I2C_WaitOnSTOPFlagUntilTimeout>
 80062ec:	4603      	mov	r3, r0
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d001      	beq.n	80062f6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80062f2:	2301      	movs	r3, #1
 80062f4:	e01a      	b.n	800632c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	2220      	movs	r2, #32
 80062fc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	6859      	ldr	r1, [r3, #4]
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681a      	ldr	r2, [r3, #0]
 8006308:	4b0a      	ldr	r3, [pc, #40]	; (8006334 <HAL_I2C_Mem_Write+0x224>)
 800630a:	400b      	ands	r3, r1
 800630c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	2220      	movs	r2, #32
 8006312:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2200      	movs	r2, #0
 800631a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2200      	movs	r2, #0
 8006322:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006326:	2300      	movs	r3, #0
 8006328:	e000      	b.n	800632c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800632a:	2302      	movs	r3, #2
  }
}
 800632c:	4618      	mov	r0, r3
 800632e:	3718      	adds	r7, #24
 8006330:	46bd      	mov	sp, r7
 8006332:	bd80      	pop	{r7, pc}
 8006334:	fe00e800 	.word	0xfe00e800

08006338 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b088      	sub	sp, #32
 800633c:	af02      	add	r7, sp, #8
 800633e:	60f8      	str	r0, [r7, #12]
 8006340:	4608      	mov	r0, r1
 8006342:	4611      	mov	r1, r2
 8006344:	461a      	mov	r2, r3
 8006346:	4603      	mov	r3, r0
 8006348:	817b      	strh	r3, [r7, #10]
 800634a:	460b      	mov	r3, r1
 800634c:	813b      	strh	r3, [r7, #8]
 800634e:	4613      	mov	r3, r2
 8006350:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006358:	b2db      	uxtb	r3, r3
 800635a:	2b20      	cmp	r3, #32
 800635c:	f040 80fd 	bne.w	800655a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006360:	6a3b      	ldr	r3, [r7, #32]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d002      	beq.n	800636c <HAL_I2C_Mem_Read+0x34>
 8006366:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006368:	2b00      	cmp	r3, #0
 800636a:	d105      	bne.n	8006378 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006372:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006374:	2301      	movs	r3, #1
 8006376:	e0f1      	b.n	800655c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800637e:	2b01      	cmp	r3, #1
 8006380:	d101      	bne.n	8006386 <HAL_I2C_Mem_Read+0x4e>
 8006382:	2302      	movs	r3, #2
 8006384:	e0ea      	b.n	800655c <HAL_I2C_Mem_Read+0x224>
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	2201      	movs	r2, #1
 800638a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800638e:	f7fd fc2b 	bl	8003be8 <HAL_GetTick>
 8006392:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	9300      	str	r3, [sp, #0]
 8006398:	2319      	movs	r3, #25
 800639a:	2201      	movs	r2, #1
 800639c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80063a0:	68f8      	ldr	r0, [r7, #12]
 80063a2:	f000 f9bd 	bl	8006720 <I2C_WaitOnFlagUntilTimeout>
 80063a6:	4603      	mov	r3, r0
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d001      	beq.n	80063b0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80063ac:	2301      	movs	r3, #1
 80063ae:	e0d5      	b.n	800655c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	2222      	movs	r2, #34	; 0x22
 80063b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	2240      	movs	r2, #64	; 0x40
 80063bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	2200      	movs	r2, #0
 80063c4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	6a3a      	ldr	r2, [r7, #32]
 80063ca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80063d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2200      	movs	r2, #0
 80063d6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80063d8:	88f8      	ldrh	r0, [r7, #6]
 80063da:	893a      	ldrh	r2, [r7, #8]
 80063dc:	8979      	ldrh	r1, [r7, #10]
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	9301      	str	r3, [sp, #4]
 80063e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063e4:	9300      	str	r3, [sp, #0]
 80063e6:	4603      	mov	r3, r0
 80063e8:	68f8      	ldr	r0, [r7, #12]
 80063ea:	f000 f921 	bl	8006630 <I2C_RequestMemoryRead>
 80063ee:	4603      	mov	r3, r0
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d005      	beq.n	8006400 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2200      	movs	r2, #0
 80063f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80063fc:	2301      	movs	r3, #1
 80063fe:	e0ad      	b.n	800655c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006404:	b29b      	uxth	r3, r3
 8006406:	2bff      	cmp	r3, #255	; 0xff
 8006408:	d90e      	bls.n	8006428 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	22ff      	movs	r2, #255	; 0xff
 800640e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006414:	b2da      	uxtb	r2, r3
 8006416:	8979      	ldrh	r1, [r7, #10]
 8006418:	4b52      	ldr	r3, [pc, #328]	; (8006564 <HAL_I2C_Mem_Read+0x22c>)
 800641a:	9300      	str	r3, [sp, #0]
 800641c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006420:	68f8      	ldr	r0, [r7, #12]
 8006422:	f000 fb19 	bl	8006a58 <I2C_TransferConfig>
 8006426:	e00f      	b.n	8006448 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800642c:	b29a      	uxth	r2, r3
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006436:	b2da      	uxtb	r2, r3
 8006438:	8979      	ldrh	r1, [r7, #10]
 800643a:	4b4a      	ldr	r3, [pc, #296]	; (8006564 <HAL_I2C_Mem_Read+0x22c>)
 800643c:	9300      	str	r3, [sp, #0]
 800643e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006442:	68f8      	ldr	r0, [r7, #12]
 8006444:	f000 fb08 	bl	8006a58 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006448:	697b      	ldr	r3, [r7, #20]
 800644a:	9300      	str	r3, [sp, #0]
 800644c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800644e:	2200      	movs	r2, #0
 8006450:	2104      	movs	r1, #4
 8006452:	68f8      	ldr	r0, [r7, #12]
 8006454:	f000 f964 	bl	8006720 <I2C_WaitOnFlagUntilTimeout>
 8006458:	4603      	mov	r3, r0
 800645a:	2b00      	cmp	r3, #0
 800645c:	d001      	beq.n	8006462 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800645e:	2301      	movs	r3, #1
 8006460:	e07c      	b.n	800655c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800646c:	b2d2      	uxtb	r2, r2
 800646e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006474:	1c5a      	adds	r2, r3, #1
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800647e:	3b01      	subs	r3, #1
 8006480:	b29a      	uxth	r2, r3
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800648a:	b29b      	uxth	r3, r3
 800648c:	3b01      	subs	r3, #1
 800648e:	b29a      	uxth	r2, r3
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006498:	b29b      	uxth	r3, r3
 800649a:	2b00      	cmp	r3, #0
 800649c:	d034      	beq.n	8006508 <HAL_I2C_Mem_Read+0x1d0>
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d130      	bne.n	8006508 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	9300      	str	r3, [sp, #0]
 80064aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ac:	2200      	movs	r2, #0
 80064ae:	2180      	movs	r1, #128	; 0x80
 80064b0:	68f8      	ldr	r0, [r7, #12]
 80064b2:	f000 f935 	bl	8006720 <I2C_WaitOnFlagUntilTimeout>
 80064b6:	4603      	mov	r3, r0
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d001      	beq.n	80064c0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80064bc:	2301      	movs	r3, #1
 80064be:	e04d      	b.n	800655c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064c4:	b29b      	uxth	r3, r3
 80064c6:	2bff      	cmp	r3, #255	; 0xff
 80064c8:	d90e      	bls.n	80064e8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	22ff      	movs	r2, #255	; 0xff
 80064ce:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064d4:	b2da      	uxtb	r2, r3
 80064d6:	8979      	ldrh	r1, [r7, #10]
 80064d8:	2300      	movs	r3, #0
 80064da:	9300      	str	r3, [sp, #0]
 80064dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80064e0:	68f8      	ldr	r0, [r7, #12]
 80064e2:	f000 fab9 	bl	8006a58 <I2C_TransferConfig>
 80064e6:	e00f      	b.n	8006508 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064ec:	b29a      	uxth	r2, r3
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064f6:	b2da      	uxtb	r2, r3
 80064f8:	8979      	ldrh	r1, [r7, #10]
 80064fa:	2300      	movs	r3, #0
 80064fc:	9300      	str	r3, [sp, #0]
 80064fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006502:	68f8      	ldr	r0, [r7, #12]
 8006504:	f000 faa8 	bl	8006a58 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800650c:	b29b      	uxth	r3, r3
 800650e:	2b00      	cmp	r3, #0
 8006510:	d19a      	bne.n	8006448 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006512:	697a      	ldr	r2, [r7, #20]
 8006514:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006516:	68f8      	ldr	r0, [r7, #12]
 8006518:	f000 f982 	bl	8006820 <I2C_WaitOnSTOPFlagUntilTimeout>
 800651c:	4603      	mov	r3, r0
 800651e:	2b00      	cmp	r3, #0
 8006520:	d001      	beq.n	8006526 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006522:	2301      	movs	r3, #1
 8006524:	e01a      	b.n	800655c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	2220      	movs	r2, #32
 800652c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	6859      	ldr	r1, [r3, #4]
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681a      	ldr	r2, [r3, #0]
 8006538:	4b0b      	ldr	r3, [pc, #44]	; (8006568 <HAL_I2C_Mem_Read+0x230>)
 800653a:	400b      	ands	r3, r1
 800653c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	2220      	movs	r2, #32
 8006542:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	2200      	movs	r2, #0
 800654a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	2200      	movs	r2, #0
 8006552:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006556:	2300      	movs	r3, #0
 8006558:	e000      	b.n	800655c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800655a:	2302      	movs	r3, #2
  }
}
 800655c:	4618      	mov	r0, r3
 800655e:	3718      	adds	r7, #24
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}
 8006564:	80002400 	.word	0x80002400
 8006568:	fe00e800 	.word	0xfe00e800

0800656c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800656c:	b480      	push	{r7}
 800656e:	b083      	sub	sp, #12
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800657a:	b2db      	uxtb	r3, r3
}
 800657c:	4618      	mov	r0, r3
 800657e:	370c      	adds	r7, #12
 8006580:	46bd      	mov	sp, r7
 8006582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006586:	4770      	bx	lr

08006588 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b086      	sub	sp, #24
 800658c:	af02      	add	r7, sp, #8
 800658e:	60f8      	str	r0, [r7, #12]
 8006590:	4608      	mov	r0, r1
 8006592:	4611      	mov	r1, r2
 8006594:	461a      	mov	r2, r3
 8006596:	4603      	mov	r3, r0
 8006598:	817b      	strh	r3, [r7, #10]
 800659a:	460b      	mov	r3, r1
 800659c:	813b      	strh	r3, [r7, #8]
 800659e:	4613      	mov	r3, r2
 80065a0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80065a2:	88fb      	ldrh	r3, [r7, #6]
 80065a4:	b2da      	uxtb	r2, r3
 80065a6:	8979      	ldrh	r1, [r7, #10]
 80065a8:	4b20      	ldr	r3, [pc, #128]	; (800662c <I2C_RequestMemoryWrite+0xa4>)
 80065aa:	9300      	str	r3, [sp, #0]
 80065ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80065b0:	68f8      	ldr	r0, [r7, #12]
 80065b2:	f000 fa51 	bl	8006a58 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80065b6:	69fa      	ldr	r2, [r7, #28]
 80065b8:	69b9      	ldr	r1, [r7, #24]
 80065ba:	68f8      	ldr	r0, [r7, #12]
 80065bc:	f000 f8f0 	bl	80067a0 <I2C_WaitOnTXISFlagUntilTimeout>
 80065c0:	4603      	mov	r3, r0
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d001      	beq.n	80065ca <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80065c6:	2301      	movs	r3, #1
 80065c8:	e02c      	b.n	8006624 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80065ca:	88fb      	ldrh	r3, [r7, #6]
 80065cc:	2b01      	cmp	r3, #1
 80065ce:	d105      	bne.n	80065dc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80065d0:	893b      	ldrh	r3, [r7, #8]
 80065d2:	b2da      	uxtb	r2, r3
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	629a      	str	r2, [r3, #40]	; 0x28
 80065da:	e015      	b.n	8006608 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80065dc:	893b      	ldrh	r3, [r7, #8]
 80065de:	0a1b      	lsrs	r3, r3, #8
 80065e0:	b29b      	uxth	r3, r3
 80065e2:	b2da      	uxtb	r2, r3
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80065ea:	69fa      	ldr	r2, [r7, #28]
 80065ec:	69b9      	ldr	r1, [r7, #24]
 80065ee:	68f8      	ldr	r0, [r7, #12]
 80065f0:	f000 f8d6 	bl	80067a0 <I2C_WaitOnTXISFlagUntilTimeout>
 80065f4:	4603      	mov	r3, r0
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d001      	beq.n	80065fe <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80065fa:	2301      	movs	r3, #1
 80065fc:	e012      	b.n	8006624 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80065fe:	893b      	ldrh	r3, [r7, #8]
 8006600:	b2da      	uxtb	r2, r3
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006608:	69fb      	ldr	r3, [r7, #28]
 800660a:	9300      	str	r3, [sp, #0]
 800660c:	69bb      	ldr	r3, [r7, #24]
 800660e:	2200      	movs	r2, #0
 8006610:	2180      	movs	r1, #128	; 0x80
 8006612:	68f8      	ldr	r0, [r7, #12]
 8006614:	f000 f884 	bl	8006720 <I2C_WaitOnFlagUntilTimeout>
 8006618:	4603      	mov	r3, r0
 800661a:	2b00      	cmp	r3, #0
 800661c:	d001      	beq.n	8006622 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800661e:	2301      	movs	r3, #1
 8006620:	e000      	b.n	8006624 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006622:	2300      	movs	r3, #0
}
 8006624:	4618      	mov	r0, r3
 8006626:	3710      	adds	r7, #16
 8006628:	46bd      	mov	sp, r7
 800662a:	bd80      	pop	{r7, pc}
 800662c:	80002000 	.word	0x80002000

08006630 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b086      	sub	sp, #24
 8006634:	af02      	add	r7, sp, #8
 8006636:	60f8      	str	r0, [r7, #12]
 8006638:	4608      	mov	r0, r1
 800663a:	4611      	mov	r1, r2
 800663c:	461a      	mov	r2, r3
 800663e:	4603      	mov	r3, r0
 8006640:	817b      	strh	r3, [r7, #10]
 8006642:	460b      	mov	r3, r1
 8006644:	813b      	strh	r3, [r7, #8]
 8006646:	4613      	mov	r3, r2
 8006648:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800664a:	88fb      	ldrh	r3, [r7, #6]
 800664c:	b2da      	uxtb	r2, r3
 800664e:	8979      	ldrh	r1, [r7, #10]
 8006650:	4b20      	ldr	r3, [pc, #128]	; (80066d4 <I2C_RequestMemoryRead+0xa4>)
 8006652:	9300      	str	r3, [sp, #0]
 8006654:	2300      	movs	r3, #0
 8006656:	68f8      	ldr	r0, [r7, #12]
 8006658:	f000 f9fe 	bl	8006a58 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800665c:	69fa      	ldr	r2, [r7, #28]
 800665e:	69b9      	ldr	r1, [r7, #24]
 8006660:	68f8      	ldr	r0, [r7, #12]
 8006662:	f000 f89d 	bl	80067a0 <I2C_WaitOnTXISFlagUntilTimeout>
 8006666:	4603      	mov	r3, r0
 8006668:	2b00      	cmp	r3, #0
 800666a:	d001      	beq.n	8006670 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800666c:	2301      	movs	r3, #1
 800666e:	e02c      	b.n	80066ca <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006670:	88fb      	ldrh	r3, [r7, #6]
 8006672:	2b01      	cmp	r3, #1
 8006674:	d105      	bne.n	8006682 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006676:	893b      	ldrh	r3, [r7, #8]
 8006678:	b2da      	uxtb	r2, r3
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	629a      	str	r2, [r3, #40]	; 0x28
 8006680:	e015      	b.n	80066ae <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006682:	893b      	ldrh	r3, [r7, #8]
 8006684:	0a1b      	lsrs	r3, r3, #8
 8006686:	b29b      	uxth	r3, r3
 8006688:	b2da      	uxtb	r2, r3
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006690:	69fa      	ldr	r2, [r7, #28]
 8006692:	69b9      	ldr	r1, [r7, #24]
 8006694:	68f8      	ldr	r0, [r7, #12]
 8006696:	f000 f883 	bl	80067a0 <I2C_WaitOnTXISFlagUntilTimeout>
 800669a:	4603      	mov	r3, r0
 800669c:	2b00      	cmp	r3, #0
 800669e:	d001      	beq.n	80066a4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80066a0:	2301      	movs	r3, #1
 80066a2:	e012      	b.n	80066ca <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80066a4:	893b      	ldrh	r3, [r7, #8]
 80066a6:	b2da      	uxtb	r2, r3
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80066ae:	69fb      	ldr	r3, [r7, #28]
 80066b0:	9300      	str	r3, [sp, #0]
 80066b2:	69bb      	ldr	r3, [r7, #24]
 80066b4:	2200      	movs	r2, #0
 80066b6:	2140      	movs	r1, #64	; 0x40
 80066b8:	68f8      	ldr	r0, [r7, #12]
 80066ba:	f000 f831 	bl	8006720 <I2C_WaitOnFlagUntilTimeout>
 80066be:	4603      	mov	r3, r0
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d001      	beq.n	80066c8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80066c4:	2301      	movs	r3, #1
 80066c6:	e000      	b.n	80066ca <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80066c8:	2300      	movs	r3, #0
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	3710      	adds	r7, #16
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}
 80066d2:	bf00      	nop
 80066d4:	80002000 	.word	0x80002000

080066d8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80066d8:	b480      	push	{r7}
 80066da:	b083      	sub	sp, #12
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	699b      	ldr	r3, [r3, #24]
 80066e6:	f003 0302 	and.w	r3, r3, #2
 80066ea:	2b02      	cmp	r3, #2
 80066ec:	d103      	bne.n	80066f6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	2200      	movs	r2, #0
 80066f4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	699b      	ldr	r3, [r3, #24]
 80066fc:	f003 0301 	and.w	r3, r3, #1
 8006700:	2b01      	cmp	r3, #1
 8006702:	d007      	beq.n	8006714 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	699a      	ldr	r2, [r3, #24]
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f042 0201 	orr.w	r2, r2, #1
 8006712:	619a      	str	r2, [r3, #24]
  }
}
 8006714:	bf00      	nop
 8006716:	370c      	adds	r7, #12
 8006718:	46bd      	mov	sp, r7
 800671a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671e:	4770      	bx	lr

08006720 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b084      	sub	sp, #16
 8006724:	af00      	add	r7, sp, #0
 8006726:	60f8      	str	r0, [r7, #12]
 8006728:	60b9      	str	r1, [r7, #8]
 800672a:	603b      	str	r3, [r7, #0]
 800672c:	4613      	mov	r3, r2
 800672e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006730:	e022      	b.n	8006778 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006738:	d01e      	beq.n	8006778 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800673a:	f7fd fa55 	bl	8003be8 <HAL_GetTick>
 800673e:	4602      	mov	r2, r0
 8006740:	69bb      	ldr	r3, [r7, #24]
 8006742:	1ad3      	subs	r3, r2, r3
 8006744:	683a      	ldr	r2, [r7, #0]
 8006746:	429a      	cmp	r2, r3
 8006748:	d302      	bcc.n	8006750 <I2C_WaitOnFlagUntilTimeout+0x30>
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d113      	bne.n	8006778 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006754:	f043 0220 	orr.w	r2, r3, #32
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	2220      	movs	r2, #32
 8006760:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	2200      	movs	r2, #0
 8006768:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	2200      	movs	r2, #0
 8006770:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006774:	2301      	movs	r3, #1
 8006776:	e00f      	b.n	8006798 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	699a      	ldr	r2, [r3, #24]
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	4013      	ands	r3, r2
 8006782:	68ba      	ldr	r2, [r7, #8]
 8006784:	429a      	cmp	r2, r3
 8006786:	bf0c      	ite	eq
 8006788:	2301      	moveq	r3, #1
 800678a:	2300      	movne	r3, #0
 800678c:	b2db      	uxtb	r3, r3
 800678e:	461a      	mov	r2, r3
 8006790:	79fb      	ldrb	r3, [r7, #7]
 8006792:	429a      	cmp	r2, r3
 8006794:	d0cd      	beq.n	8006732 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006796:	2300      	movs	r3, #0
}
 8006798:	4618      	mov	r0, r3
 800679a:	3710      	adds	r7, #16
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}

080067a0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b084      	sub	sp, #16
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	60f8      	str	r0, [r7, #12]
 80067a8:	60b9      	str	r1, [r7, #8]
 80067aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80067ac:	e02c      	b.n	8006808 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80067ae:	687a      	ldr	r2, [r7, #4]
 80067b0:	68b9      	ldr	r1, [r7, #8]
 80067b2:	68f8      	ldr	r0, [r7, #12]
 80067b4:	f000 f870 	bl	8006898 <I2C_IsErrorOccurred>
 80067b8:	4603      	mov	r3, r0
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d001      	beq.n	80067c2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80067be:	2301      	movs	r3, #1
 80067c0:	e02a      	b.n	8006818 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067c8:	d01e      	beq.n	8006808 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067ca:	f7fd fa0d 	bl	8003be8 <HAL_GetTick>
 80067ce:	4602      	mov	r2, r0
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	1ad3      	subs	r3, r2, r3
 80067d4:	68ba      	ldr	r2, [r7, #8]
 80067d6:	429a      	cmp	r2, r3
 80067d8:	d302      	bcc.n	80067e0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d113      	bne.n	8006808 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067e4:	f043 0220 	orr.w	r2, r3, #32
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	2220      	movs	r2, #32
 80067f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	2200      	movs	r2, #0
 80067f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	2200      	movs	r2, #0
 8006800:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006804:	2301      	movs	r3, #1
 8006806:	e007      	b.n	8006818 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	699b      	ldr	r3, [r3, #24]
 800680e:	f003 0302 	and.w	r3, r3, #2
 8006812:	2b02      	cmp	r3, #2
 8006814:	d1cb      	bne.n	80067ae <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006816:	2300      	movs	r3, #0
}
 8006818:	4618      	mov	r0, r3
 800681a:	3710      	adds	r7, #16
 800681c:	46bd      	mov	sp, r7
 800681e:	bd80      	pop	{r7, pc}

08006820 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b084      	sub	sp, #16
 8006824:	af00      	add	r7, sp, #0
 8006826:	60f8      	str	r0, [r7, #12]
 8006828:	60b9      	str	r1, [r7, #8]
 800682a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800682c:	e028      	b.n	8006880 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800682e:	687a      	ldr	r2, [r7, #4]
 8006830:	68b9      	ldr	r1, [r7, #8]
 8006832:	68f8      	ldr	r0, [r7, #12]
 8006834:	f000 f830 	bl	8006898 <I2C_IsErrorOccurred>
 8006838:	4603      	mov	r3, r0
 800683a:	2b00      	cmp	r3, #0
 800683c:	d001      	beq.n	8006842 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800683e:	2301      	movs	r3, #1
 8006840:	e026      	b.n	8006890 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006842:	f7fd f9d1 	bl	8003be8 <HAL_GetTick>
 8006846:	4602      	mov	r2, r0
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	1ad3      	subs	r3, r2, r3
 800684c:	68ba      	ldr	r2, [r7, #8]
 800684e:	429a      	cmp	r2, r3
 8006850:	d302      	bcc.n	8006858 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d113      	bne.n	8006880 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800685c:	f043 0220 	orr.w	r2, r3, #32
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	2220      	movs	r2, #32
 8006868:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	2200      	movs	r2, #0
 8006870:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	2200      	movs	r2, #0
 8006878:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800687c:	2301      	movs	r3, #1
 800687e:	e007      	b.n	8006890 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	699b      	ldr	r3, [r3, #24]
 8006886:	f003 0320 	and.w	r3, r3, #32
 800688a:	2b20      	cmp	r3, #32
 800688c:	d1cf      	bne.n	800682e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800688e:	2300      	movs	r3, #0
}
 8006890:	4618      	mov	r0, r3
 8006892:	3710      	adds	r7, #16
 8006894:	46bd      	mov	sp, r7
 8006896:	bd80      	pop	{r7, pc}

08006898 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b08a      	sub	sp, #40	; 0x28
 800689c:	af00      	add	r7, sp, #0
 800689e:	60f8      	str	r0, [r7, #12]
 80068a0:	60b9      	str	r1, [r7, #8]
 80068a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80068a4:	2300      	movs	r3, #0
 80068a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	699b      	ldr	r3, [r3, #24]
 80068b0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80068b2:	2300      	movs	r3, #0
 80068b4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80068ba:	69bb      	ldr	r3, [r7, #24]
 80068bc:	f003 0310 	and.w	r3, r3, #16
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d068      	beq.n	8006996 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	2210      	movs	r2, #16
 80068ca:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80068cc:	e049      	b.n	8006962 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068d4:	d045      	beq.n	8006962 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80068d6:	f7fd f987 	bl	8003be8 <HAL_GetTick>
 80068da:	4602      	mov	r2, r0
 80068dc:	69fb      	ldr	r3, [r7, #28]
 80068de:	1ad3      	subs	r3, r2, r3
 80068e0:	68ba      	ldr	r2, [r7, #8]
 80068e2:	429a      	cmp	r2, r3
 80068e4:	d302      	bcc.n	80068ec <I2C_IsErrorOccurred+0x54>
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d13a      	bne.n	8006962 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	685b      	ldr	r3, [r3, #4]
 80068f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80068f6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80068fe:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	699b      	ldr	r3, [r3, #24]
 8006906:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800690a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800690e:	d121      	bne.n	8006954 <I2C_IsErrorOccurred+0xbc>
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006916:	d01d      	beq.n	8006954 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006918:	7cfb      	ldrb	r3, [r7, #19]
 800691a:	2b20      	cmp	r3, #32
 800691c:	d01a      	beq.n	8006954 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	685a      	ldr	r2, [r3, #4]
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800692c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800692e:	f7fd f95b 	bl	8003be8 <HAL_GetTick>
 8006932:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006934:	e00e      	b.n	8006954 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006936:	f7fd f957 	bl	8003be8 <HAL_GetTick>
 800693a:	4602      	mov	r2, r0
 800693c:	69fb      	ldr	r3, [r7, #28]
 800693e:	1ad3      	subs	r3, r2, r3
 8006940:	2b19      	cmp	r3, #25
 8006942:	d907      	bls.n	8006954 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8006944:	6a3b      	ldr	r3, [r7, #32]
 8006946:	f043 0320 	orr.w	r3, r3, #32
 800694a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800694c:	2301      	movs	r3, #1
 800694e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8006952:	e006      	b.n	8006962 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	699b      	ldr	r3, [r3, #24]
 800695a:	f003 0320 	and.w	r3, r3, #32
 800695e:	2b20      	cmp	r3, #32
 8006960:	d1e9      	bne.n	8006936 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	699b      	ldr	r3, [r3, #24]
 8006968:	f003 0320 	and.w	r3, r3, #32
 800696c:	2b20      	cmp	r3, #32
 800696e:	d003      	beq.n	8006978 <I2C_IsErrorOccurred+0xe0>
 8006970:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006974:	2b00      	cmp	r3, #0
 8006976:	d0aa      	beq.n	80068ce <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006978:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800697c:	2b00      	cmp	r3, #0
 800697e:	d103      	bne.n	8006988 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	2220      	movs	r2, #32
 8006986:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006988:	6a3b      	ldr	r3, [r7, #32]
 800698a:	f043 0304 	orr.w	r3, r3, #4
 800698e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006990:	2301      	movs	r3, #1
 8006992:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	699b      	ldr	r3, [r3, #24]
 800699c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800699e:	69bb      	ldr	r3, [r7, #24]
 80069a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d00b      	beq.n	80069c0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80069a8:	6a3b      	ldr	r3, [r7, #32]
 80069aa:	f043 0301 	orr.w	r3, r3, #1
 80069ae:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80069b8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80069ba:	2301      	movs	r3, #1
 80069bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80069c0:	69bb      	ldr	r3, [r7, #24]
 80069c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d00b      	beq.n	80069e2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80069ca:	6a3b      	ldr	r3, [r7, #32]
 80069cc:	f043 0308 	orr.w	r3, r3, #8
 80069d0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80069da:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80069dc:	2301      	movs	r3, #1
 80069de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80069e2:	69bb      	ldr	r3, [r7, #24]
 80069e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d00b      	beq.n	8006a04 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80069ec:	6a3b      	ldr	r3, [r7, #32]
 80069ee:	f043 0302 	orr.w	r3, r3, #2
 80069f2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80069fc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80069fe:	2301      	movs	r3, #1
 8006a00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8006a04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d01c      	beq.n	8006a46 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006a0c:	68f8      	ldr	r0, [r7, #12]
 8006a0e:	f7ff fe63 	bl	80066d8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	6859      	ldr	r1, [r3, #4]
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681a      	ldr	r2, [r3, #0]
 8006a1c:	4b0d      	ldr	r3, [pc, #52]	; (8006a54 <I2C_IsErrorOccurred+0x1bc>)
 8006a1e:	400b      	ands	r3, r1
 8006a20:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a26:	6a3b      	ldr	r3, [r7, #32]
 8006a28:	431a      	orrs	r2, r3
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	2220      	movs	r2, #32
 8006a32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	2200      	movs	r2, #0
 8006a42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8006a46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	3728      	adds	r7, #40	; 0x28
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bd80      	pop	{r7, pc}
 8006a52:	bf00      	nop
 8006a54:	fe00e800 	.word	0xfe00e800

08006a58 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b087      	sub	sp, #28
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	60f8      	str	r0, [r7, #12]
 8006a60:	607b      	str	r3, [r7, #4]
 8006a62:	460b      	mov	r3, r1
 8006a64:	817b      	strh	r3, [r7, #10]
 8006a66:	4613      	mov	r3, r2
 8006a68:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006a6a:	897b      	ldrh	r3, [r7, #10]
 8006a6c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006a70:	7a7b      	ldrb	r3, [r7, #9]
 8006a72:	041b      	lsls	r3, r3, #16
 8006a74:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006a78:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006a7e:	6a3b      	ldr	r3, [r7, #32]
 8006a80:	4313      	orrs	r3, r2
 8006a82:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006a86:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	685a      	ldr	r2, [r3, #4]
 8006a8e:	6a3b      	ldr	r3, [r7, #32]
 8006a90:	0d5b      	lsrs	r3, r3, #21
 8006a92:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006a96:	4b08      	ldr	r3, [pc, #32]	; (8006ab8 <I2C_TransferConfig+0x60>)
 8006a98:	430b      	orrs	r3, r1
 8006a9a:	43db      	mvns	r3, r3
 8006a9c:	ea02 0103 	and.w	r1, r2, r3
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	697a      	ldr	r2, [r7, #20]
 8006aa6:	430a      	orrs	r2, r1
 8006aa8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006aaa:	bf00      	nop
 8006aac:	371c      	adds	r7, #28
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab4:	4770      	bx	lr
 8006ab6:	bf00      	nop
 8006ab8:	03ff63ff 	.word	0x03ff63ff

08006abc <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b084      	sub	sp, #16
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d101      	bne.n	8006ace <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8006aca:	2301      	movs	r3, #1
 8006acc:	e0bf      	b.n	8006c4e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8006ad4:	b2db      	uxtb	r3, r3
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d106      	bne.n	8006ae8 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2200      	movs	r2, #0
 8006ade:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f7fa faea 	bl	80010bc <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2202      	movs	r2, #2
 8006aec:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	699a      	ldr	r2, [r3, #24]
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8006afe:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	6999      	ldr	r1, [r3, #24]
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	685a      	ldr	r2, [r3, #4]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	689b      	ldr	r3, [r3, #8]
 8006b0e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006b14:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	691b      	ldr	r3, [r3, #16]
 8006b1a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	430a      	orrs	r2, r1
 8006b22:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	6899      	ldr	r1, [r3, #8]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681a      	ldr	r2, [r3, #0]
 8006b2e:	4b4a      	ldr	r3, [pc, #296]	; (8006c58 <HAL_LTDC_Init+0x19c>)
 8006b30:	400b      	ands	r3, r1
 8006b32:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	695b      	ldr	r3, [r3, #20]
 8006b38:	041b      	lsls	r3, r3, #16
 8006b3a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	6899      	ldr	r1, [r3, #8]
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	699a      	ldr	r2, [r3, #24]
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	431a      	orrs	r2, r3
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	430a      	orrs	r2, r1
 8006b50:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	68d9      	ldr	r1, [r3, #12]
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681a      	ldr	r2, [r3, #0]
 8006b5c:	4b3e      	ldr	r3, [pc, #248]	; (8006c58 <HAL_LTDC_Init+0x19c>)
 8006b5e:	400b      	ands	r3, r1
 8006b60:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	69db      	ldr	r3, [r3, #28]
 8006b66:	041b      	lsls	r3, r3, #16
 8006b68:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	68d9      	ldr	r1, [r3, #12]
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6a1a      	ldr	r2, [r3, #32]
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	431a      	orrs	r2, r3
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	430a      	orrs	r2, r1
 8006b7e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	6919      	ldr	r1, [r3, #16]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681a      	ldr	r2, [r3, #0]
 8006b8a:	4b33      	ldr	r3, [pc, #204]	; (8006c58 <HAL_LTDC_Init+0x19c>)
 8006b8c:	400b      	ands	r3, r1
 8006b8e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b94:	041b      	lsls	r3, r3, #16
 8006b96:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	6919      	ldr	r1, [r3, #16]
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	431a      	orrs	r2, r3
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	430a      	orrs	r2, r1
 8006bac:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	6959      	ldr	r1, [r3, #20]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681a      	ldr	r2, [r3, #0]
 8006bb8:	4b27      	ldr	r3, [pc, #156]	; (8006c58 <HAL_LTDC_Init+0x19c>)
 8006bba:	400b      	ands	r3, r1
 8006bbc:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bc2:	041b      	lsls	r3, r3, #16
 8006bc4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	6959      	ldr	r1, [r3, #20]
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	431a      	orrs	r2, r3
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	430a      	orrs	r2, r1
 8006bda:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006be2:	021b      	lsls	r3, r3, #8
 8006be4:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006bec:	041b      	lsls	r3, r3, #16
 8006bee:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8006bfe:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006c06:	68ba      	ldr	r2, [r7, #8]
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	687a      	ldr	r2, [r7, #4]
 8006c0e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8006c12:	431a      	orrs	r2, r3
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	430a      	orrs	r2, r1
 8006c1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f042 0206 	orr.w	r2, r2, #6
 8006c2a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	699a      	ldr	r2, [r3, #24]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f042 0201 	orr.w	r2, r2, #1
 8006c3a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2201      	movs	r2, #1
 8006c48:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8006c4c:	2300      	movs	r3, #0
}
 8006c4e:	4618      	mov	r0, r3
 8006c50:	3710      	adds	r7, #16
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}
 8006c56:	bf00      	nop
 8006c58:	f000f800 	.word	0xf000f800

08006c5c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006c5c:	b5b0      	push	{r4, r5, r7, lr}
 8006c5e:	b084      	sub	sp, #16
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	60f8      	str	r0, [r7, #12]
 8006c64:	60b9      	str	r1, [r7, #8]
 8006c66:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8006c6e:	2b01      	cmp	r3, #1
 8006c70:	d101      	bne.n	8006c76 <HAL_LTDC_ConfigLayer+0x1a>
 8006c72:	2302      	movs	r3, #2
 8006c74:	e02c      	b.n	8006cd0 <HAL_LTDC_ConfigLayer+0x74>
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	2201      	movs	r2, #1
 8006c7a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	2202      	movs	r2, #2
 8006c82:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006c86:	68fa      	ldr	r2, [r7, #12]
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2134      	movs	r1, #52	; 0x34
 8006c8c:	fb01 f303 	mul.w	r3, r1, r3
 8006c90:	4413      	add	r3, r2
 8006c92:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	4614      	mov	r4, r2
 8006c9a:	461d      	mov	r5, r3
 8006c9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006c9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ca0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006ca2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ca4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006ca6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ca8:	682b      	ldr	r3, [r5, #0]
 8006caa:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006cac:	687a      	ldr	r2, [r7, #4]
 8006cae:	68b9      	ldr	r1, [r7, #8]
 8006cb0:	68f8      	ldr	r0, [r7, #12]
 8006cb2:	f000 f81f 	bl	8006cf4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	2201      	movs	r2, #1
 8006cbc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	2201      	movs	r2, #1
 8006cc2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8006cce:	2300      	movs	r3, #0
}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	3710      	adds	r7, #16
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bdb0      	pop	{r4, r5, r7, pc}

08006cd8 <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b083      	sub	sp, #12
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8006ce6:	b2db      	uxtb	r3, r3
}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	370c      	adds	r7, #12
 8006cec:	46bd      	mov	sp, r7
 8006cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf2:	4770      	bx	lr

08006cf4 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b089      	sub	sp, #36	; 0x24
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	60f8      	str	r0, [r7, #12]
 8006cfc:	60b9      	str	r1, [r7, #8]
 8006cfe:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	685a      	ldr	r2, [r3, #4]
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	68db      	ldr	r3, [r3, #12]
 8006d0a:	0c1b      	lsrs	r3, r3, #16
 8006d0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006d10:	4413      	add	r3, r2
 8006d12:	041b      	lsls	r3, r3, #16
 8006d14:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	461a      	mov	r2, r3
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	01db      	lsls	r3, r3, #7
 8006d20:	4413      	add	r3, r2
 8006d22:	3384      	adds	r3, #132	; 0x84
 8006d24:	685b      	ldr	r3, [r3, #4]
 8006d26:	68fa      	ldr	r2, [r7, #12]
 8006d28:	6812      	ldr	r2, [r2, #0]
 8006d2a:	4611      	mov	r1, r2
 8006d2c:	687a      	ldr	r2, [r7, #4]
 8006d2e:	01d2      	lsls	r2, r2, #7
 8006d30:	440a      	add	r2, r1
 8006d32:	3284      	adds	r2, #132	; 0x84
 8006d34:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006d38:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	68db      	ldr	r3, [r3, #12]
 8006d44:	0c1b      	lsrs	r3, r3, #16
 8006d46:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006d4a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006d4c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4619      	mov	r1, r3
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	01db      	lsls	r3, r3, #7
 8006d58:	440b      	add	r3, r1
 8006d5a:	3384      	adds	r3, #132	; 0x84
 8006d5c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006d5e:	69fb      	ldr	r3, [r7, #28]
 8006d60:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006d62:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	68da      	ldr	r2, [r3, #12]
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	68db      	ldr	r3, [r3, #12]
 8006d6e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006d72:	4413      	add	r3, r2
 8006d74:	041b      	lsls	r3, r3, #16
 8006d76:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	461a      	mov	r2, r3
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	01db      	lsls	r3, r3, #7
 8006d82:	4413      	add	r3, r2
 8006d84:	3384      	adds	r3, #132	; 0x84
 8006d86:	689b      	ldr	r3, [r3, #8]
 8006d88:	68fa      	ldr	r2, [r7, #12]
 8006d8a:	6812      	ldr	r2, [r2, #0]
 8006d8c:	4611      	mov	r1, r2
 8006d8e:	687a      	ldr	r2, [r7, #4]
 8006d90:	01d2      	lsls	r2, r2, #7
 8006d92:	440a      	add	r2, r1
 8006d94:	3284      	adds	r2, #132	; 0x84
 8006d96:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006d9a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	689a      	ldr	r2, [r3, #8]
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	68db      	ldr	r3, [r3, #12]
 8006da6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006daa:	4413      	add	r3, r2
 8006dac:	1c5a      	adds	r2, r3, #1
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	4619      	mov	r1, r3
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	01db      	lsls	r3, r3, #7
 8006db8:	440b      	add	r3, r1
 8006dba:	3384      	adds	r3, #132	; 0x84
 8006dbc:	4619      	mov	r1, r3
 8006dbe:	69fb      	ldr	r3, [r7, #28]
 8006dc0:	4313      	orrs	r3, r2
 8006dc2:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	461a      	mov	r2, r3
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	01db      	lsls	r3, r3, #7
 8006dce:	4413      	add	r3, r2
 8006dd0:	3384      	adds	r3, #132	; 0x84
 8006dd2:	691b      	ldr	r3, [r3, #16]
 8006dd4:	68fa      	ldr	r2, [r7, #12]
 8006dd6:	6812      	ldr	r2, [r2, #0]
 8006dd8:	4611      	mov	r1, r2
 8006dda:	687a      	ldr	r2, [r7, #4]
 8006ddc:	01d2      	lsls	r2, r2, #7
 8006dde:	440a      	add	r2, r1
 8006de0:	3284      	adds	r2, #132	; 0x84
 8006de2:	f023 0307 	bic.w	r3, r3, #7
 8006de6:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	461a      	mov	r2, r3
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	01db      	lsls	r3, r3, #7
 8006df2:	4413      	add	r3, r2
 8006df4:	3384      	adds	r3, #132	; 0x84
 8006df6:	461a      	mov	r2, r3
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	691b      	ldr	r3, [r3, #16]
 8006dfc:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006e04:	021b      	lsls	r3, r3, #8
 8006e06:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006e0e:	041b      	lsls	r3, r3, #16
 8006e10:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	699b      	ldr	r3, [r3, #24]
 8006e16:	061b      	lsls	r3, r3, #24
 8006e18:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	461a      	mov	r2, r3
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	01db      	lsls	r3, r3, #7
 8006e24:	4413      	add	r3, r2
 8006e26:	3384      	adds	r3, #132	; 0x84
 8006e28:	699b      	ldr	r3, [r3, #24]
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	461a      	mov	r2, r3
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	01db      	lsls	r3, r3, #7
 8006e34:	4413      	add	r3, r2
 8006e36:	3384      	adds	r3, #132	; 0x84
 8006e38:	461a      	mov	r2, r3
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006e44:	461a      	mov	r2, r3
 8006e46:	69fb      	ldr	r3, [r7, #28]
 8006e48:	431a      	orrs	r2, r3
 8006e4a:	69bb      	ldr	r3, [r7, #24]
 8006e4c:	431a      	orrs	r2, r3
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	4619      	mov	r1, r3
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	01db      	lsls	r3, r3, #7
 8006e58:	440b      	add	r3, r1
 8006e5a:	3384      	adds	r3, #132	; 0x84
 8006e5c:	4619      	mov	r1, r3
 8006e5e:	697b      	ldr	r3, [r7, #20]
 8006e60:	4313      	orrs	r3, r2
 8006e62:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	461a      	mov	r2, r3
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	01db      	lsls	r3, r3, #7
 8006e6e:	4413      	add	r3, r2
 8006e70:	3384      	adds	r3, #132	; 0x84
 8006e72:	695b      	ldr	r3, [r3, #20]
 8006e74:	68fa      	ldr	r2, [r7, #12]
 8006e76:	6812      	ldr	r2, [r2, #0]
 8006e78:	4611      	mov	r1, r2
 8006e7a:	687a      	ldr	r2, [r7, #4]
 8006e7c:	01d2      	lsls	r2, r2, #7
 8006e7e:	440a      	add	r2, r1
 8006e80:	3284      	adds	r2, #132	; 0x84
 8006e82:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006e86:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	461a      	mov	r2, r3
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	01db      	lsls	r3, r3, #7
 8006e92:	4413      	add	r3, r2
 8006e94:	3384      	adds	r3, #132	; 0x84
 8006e96:	461a      	mov	r2, r3
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	695b      	ldr	r3, [r3, #20]
 8006e9c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	461a      	mov	r2, r3
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	01db      	lsls	r3, r3, #7
 8006ea8:	4413      	add	r3, r2
 8006eaa:	3384      	adds	r3, #132	; 0x84
 8006eac:	69da      	ldr	r2, [r3, #28]
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	4619      	mov	r1, r3
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	01db      	lsls	r3, r3, #7
 8006eb8:	440b      	add	r3, r1
 8006eba:	3384      	adds	r3, #132	; 0x84
 8006ebc:	4619      	mov	r1, r3
 8006ebe:	4b58      	ldr	r3, [pc, #352]	; (8007020 <LTDC_SetConfig+0x32c>)
 8006ec0:	4013      	ands	r3, r2
 8006ec2:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	69da      	ldr	r2, [r3, #28]
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	6a1b      	ldr	r3, [r3, #32]
 8006ecc:	68f9      	ldr	r1, [r7, #12]
 8006ece:	6809      	ldr	r1, [r1, #0]
 8006ed0:	4608      	mov	r0, r1
 8006ed2:	6879      	ldr	r1, [r7, #4]
 8006ed4:	01c9      	lsls	r1, r1, #7
 8006ed6:	4401      	add	r1, r0
 8006ed8:	3184      	adds	r1, #132	; 0x84
 8006eda:	4313      	orrs	r3, r2
 8006edc:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	461a      	mov	r2, r3
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	01db      	lsls	r3, r3, #7
 8006ee8:	4413      	add	r3, r2
 8006eea:	3384      	adds	r3, #132	; 0x84
 8006eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	461a      	mov	r2, r3
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	01db      	lsls	r3, r3, #7
 8006ef8:	4413      	add	r3, r2
 8006efa:	3384      	adds	r3, #132	; 0x84
 8006efc:	461a      	mov	r2, r3
 8006efe:	2300      	movs	r3, #0
 8006f00:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	461a      	mov	r2, r3
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	01db      	lsls	r3, r3, #7
 8006f0c:	4413      	add	r3, r2
 8006f0e:	3384      	adds	r3, #132	; 0x84
 8006f10:	461a      	mov	r2, r3
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f16:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	691b      	ldr	r3, [r3, #16]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d102      	bne.n	8006f26 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8006f20:	2304      	movs	r3, #4
 8006f22:	61fb      	str	r3, [r7, #28]
 8006f24:	e01b      	b.n	8006f5e <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	691b      	ldr	r3, [r3, #16]
 8006f2a:	2b01      	cmp	r3, #1
 8006f2c:	d102      	bne.n	8006f34 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8006f2e:	2303      	movs	r3, #3
 8006f30:	61fb      	str	r3, [r7, #28]
 8006f32:	e014      	b.n	8006f5e <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	691b      	ldr	r3, [r3, #16]
 8006f38:	2b04      	cmp	r3, #4
 8006f3a:	d00b      	beq.n	8006f54 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006f40:	2b02      	cmp	r3, #2
 8006f42:	d007      	beq.n	8006f54 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006f48:	2b03      	cmp	r3, #3
 8006f4a:	d003      	beq.n	8006f54 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006f50:	2b07      	cmp	r3, #7
 8006f52:	d102      	bne.n	8006f5a <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8006f54:	2302      	movs	r3, #2
 8006f56:	61fb      	str	r3, [r7, #28]
 8006f58:	e001      	b.n	8006f5e <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	461a      	mov	r2, r3
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	01db      	lsls	r3, r3, #7
 8006f68:	4413      	add	r3, r2
 8006f6a:	3384      	adds	r3, #132	; 0x84
 8006f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f6e:	68fa      	ldr	r2, [r7, #12]
 8006f70:	6812      	ldr	r2, [r2, #0]
 8006f72:	4611      	mov	r1, r2
 8006f74:	687a      	ldr	r2, [r7, #4]
 8006f76:	01d2      	lsls	r2, r2, #7
 8006f78:	440a      	add	r2, r1
 8006f7a:	3284      	adds	r2, #132	; 0x84
 8006f7c:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8006f80:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f86:	69fa      	ldr	r2, [r7, #28]
 8006f88:	fb02 f303 	mul.w	r3, r2, r3
 8006f8c:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	6859      	ldr	r1, [r3, #4]
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	1acb      	subs	r3, r1, r3
 8006f98:	69f9      	ldr	r1, [r7, #28]
 8006f9a:	fb01 f303 	mul.w	r3, r1, r3
 8006f9e:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8006fa0:	68f9      	ldr	r1, [r7, #12]
 8006fa2:	6809      	ldr	r1, [r1, #0]
 8006fa4:	4608      	mov	r0, r1
 8006fa6:	6879      	ldr	r1, [r7, #4]
 8006fa8:	01c9      	lsls	r1, r1, #7
 8006faa:	4401      	add	r1, r0
 8006fac:	3184      	adds	r1, #132	; 0x84
 8006fae:	4313      	orrs	r3, r2
 8006fb0:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	461a      	mov	r2, r3
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	01db      	lsls	r3, r3, #7
 8006fbc:	4413      	add	r3, r2
 8006fbe:	3384      	adds	r3, #132	; 0x84
 8006fc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4619      	mov	r1, r3
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	01db      	lsls	r3, r3, #7
 8006fcc:	440b      	add	r3, r1
 8006fce:	3384      	adds	r3, #132	; 0x84
 8006fd0:	4619      	mov	r1, r3
 8006fd2:	4b14      	ldr	r3, [pc, #80]	; (8007024 <LTDC_SetConfig+0x330>)
 8006fd4:	4013      	ands	r3, r2
 8006fd6:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	461a      	mov	r2, r3
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	01db      	lsls	r3, r3, #7
 8006fe2:	4413      	add	r3, r2
 8006fe4:	3384      	adds	r3, #132	; 0x84
 8006fe6:	461a      	mov	r2, r3
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fec:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	461a      	mov	r2, r3
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	01db      	lsls	r3, r3, #7
 8006ff8:	4413      	add	r3, r2
 8006ffa:	3384      	adds	r3, #132	; 0x84
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	68fa      	ldr	r2, [r7, #12]
 8007000:	6812      	ldr	r2, [r2, #0]
 8007002:	4611      	mov	r1, r2
 8007004:	687a      	ldr	r2, [r7, #4]
 8007006:	01d2      	lsls	r2, r2, #7
 8007008:	440a      	add	r2, r1
 800700a:	3284      	adds	r2, #132	; 0x84
 800700c:	f043 0301 	orr.w	r3, r3, #1
 8007010:	6013      	str	r3, [r2, #0]
}
 8007012:	bf00      	nop
 8007014:	3724      	adds	r7, #36	; 0x24
 8007016:	46bd      	mov	sp, r7
 8007018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701c:	4770      	bx	lr
 800701e:	bf00      	nop
 8007020:	fffff8f8 	.word	0xfffff8f8
 8007024:	fffff800 	.word	0xfffff800

08007028 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007028:	b480      	push	{r7}
 800702a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800702c:	4b05      	ldr	r3, [pc, #20]	; (8007044 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a04      	ldr	r2, [pc, #16]	; (8007044 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007032:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007036:	6013      	str	r3, [r2, #0]
}
 8007038:	bf00      	nop
 800703a:	46bd      	mov	sp, r7
 800703c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007040:	4770      	bx	lr
 8007042:	bf00      	nop
 8007044:	40007000 	.word	0x40007000

08007048 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b082      	sub	sp, #8
 800704c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800704e:	2300      	movs	r3, #0
 8007050:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8007052:	4b23      	ldr	r3, [pc, #140]	; (80070e0 <HAL_PWREx_EnableOverDrive+0x98>)
 8007054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007056:	4a22      	ldr	r2, [pc, #136]	; (80070e0 <HAL_PWREx_EnableOverDrive+0x98>)
 8007058:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800705c:	6413      	str	r3, [r2, #64]	; 0x40
 800705e:	4b20      	ldr	r3, [pc, #128]	; (80070e0 <HAL_PWREx_EnableOverDrive+0x98>)
 8007060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007062:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007066:	603b      	str	r3, [r7, #0]
 8007068:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800706a:	4b1e      	ldr	r3, [pc, #120]	; (80070e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	4a1d      	ldr	r2, [pc, #116]	; (80070e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007070:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007074:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007076:	f7fc fdb7 	bl	8003be8 <HAL_GetTick>
 800707a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800707c:	e009      	b.n	8007092 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800707e:	f7fc fdb3 	bl	8003be8 <HAL_GetTick>
 8007082:	4602      	mov	r2, r0
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	1ad3      	subs	r3, r2, r3
 8007088:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800708c:	d901      	bls.n	8007092 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800708e:	2303      	movs	r3, #3
 8007090:	e022      	b.n	80070d8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007092:	4b14      	ldr	r3, [pc, #80]	; (80070e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007094:	685b      	ldr	r3, [r3, #4]
 8007096:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800709a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800709e:	d1ee      	bne.n	800707e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80070a0:	4b10      	ldr	r3, [pc, #64]	; (80070e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4a0f      	ldr	r2, [pc, #60]	; (80070e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80070a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80070aa:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80070ac:	f7fc fd9c 	bl	8003be8 <HAL_GetTick>
 80070b0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80070b2:	e009      	b.n	80070c8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80070b4:	f7fc fd98 	bl	8003be8 <HAL_GetTick>
 80070b8:	4602      	mov	r2, r0
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	1ad3      	subs	r3, r2, r3
 80070be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80070c2:	d901      	bls.n	80070c8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80070c4:	2303      	movs	r3, #3
 80070c6:	e007      	b.n	80070d8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80070c8:	4b06      	ldr	r3, [pc, #24]	; (80070e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80070ca:	685b      	ldr	r3, [r3, #4]
 80070cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80070d4:	d1ee      	bne.n	80070b4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80070d6:	2300      	movs	r3, #0
}
 80070d8:	4618      	mov	r0, r3
 80070da:	3708      	adds	r7, #8
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd80      	pop	{r7, pc}
 80070e0:	40023800 	.word	0x40023800
 80070e4:	40007000 	.word	0x40007000

080070e8 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b086      	sub	sp, #24
 80070ec:	af02      	add	r7, sp, #8
 80070ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80070f0:	f7fc fd7a 	bl	8003be8 <HAL_GetTick>
 80070f4:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d101      	bne.n	8007100 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80070fc:	2301      	movs	r3, #1
 80070fe:	e067      	b.n	80071d0 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007106:	b2db      	uxtb	r3, r3
 8007108:	2b00      	cmp	r3, #0
 800710a:	d10b      	bne.n	8007124 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2200      	movs	r2, #0
 8007110:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	f7fa f8c9 	bl	80012ac <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800711a:	f241 3188 	movw	r1, #5000	; 0x1388
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f000 fb6b 	bl	80077fa <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	689b      	ldr	r3, [r3, #8]
 8007132:	3b01      	subs	r3, #1
 8007134:	021a      	lsls	r2, r3, #8
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	430a      	orrs	r2, r1
 800713c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007142:	9300      	str	r3, [sp, #0]
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	2200      	movs	r2, #0
 8007148:	2120      	movs	r1, #32
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f000 fb63 	bl	8007816 <QSPI_WaitFlagStateUntilTimeout>
 8007150:	4603      	mov	r3, r0
 8007152:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8007154:	7afb      	ldrb	r3, [r7, #11]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d135      	bne.n	80071c6 <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	681a      	ldr	r2, [r3, #0]
 8007160:	4b1d      	ldr	r3, [pc, #116]	; (80071d8 <HAL_QSPI_Init+0xf0>)
 8007162:	4013      	ands	r3, r2
 8007164:	687a      	ldr	r2, [r7, #4]
 8007166:	6852      	ldr	r2, [r2, #4]
 8007168:	0611      	lsls	r1, r2, #24
 800716a:	687a      	ldr	r2, [r7, #4]
 800716c:	68d2      	ldr	r2, [r2, #12]
 800716e:	4311      	orrs	r1, r2
 8007170:	687a      	ldr	r2, [r7, #4]
 8007172:	69d2      	ldr	r2, [r2, #28]
 8007174:	4311      	orrs	r1, r2
 8007176:	687a      	ldr	r2, [r7, #4]
 8007178:	6a12      	ldr	r2, [r2, #32]
 800717a:	4311      	orrs	r1, r2
 800717c:	687a      	ldr	r2, [r7, #4]
 800717e:	6812      	ldr	r2, [r2, #0]
 8007180:	430b      	orrs	r3, r1
 8007182:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	685a      	ldr	r2, [r3, #4]
 800718a:	4b14      	ldr	r3, [pc, #80]	; (80071dc <HAL_QSPI_Init+0xf4>)
 800718c:	4013      	ands	r3, r2
 800718e:	687a      	ldr	r2, [r7, #4]
 8007190:	6912      	ldr	r2, [r2, #16]
 8007192:	0411      	lsls	r1, r2, #16
 8007194:	687a      	ldr	r2, [r7, #4]
 8007196:	6952      	ldr	r2, [r2, #20]
 8007198:	4311      	orrs	r1, r2
 800719a:	687a      	ldr	r2, [r7, #4]
 800719c:	6992      	ldr	r2, [r2, #24]
 800719e:	4311      	orrs	r1, r2
 80071a0:	687a      	ldr	r2, [r7, #4]
 80071a2:	6812      	ldr	r2, [r2, #0]
 80071a4:	430b      	orrs	r3, r1
 80071a6:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	681a      	ldr	r2, [r3, #0]
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f042 0201 	orr.w	r2, r2, #1
 80071b6:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2200      	movs	r2, #0
 80071bc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2201      	movs	r2, #1
 80071c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2200      	movs	r2, #0
 80071ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80071ce:	7afb      	ldrb	r3, [r7, #11]
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	3710      	adds	r7, #16
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd80      	pop	{r7, pc}
 80071d8:	00ffff2f 	.word	0x00ffff2f
 80071dc:	ffe0f8fe 	.word	0xffe0f8fe

080071e0 <HAL_QSPI_DeInit>:
  * @brief De-Initialize the QSPI peripheral.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_DeInit(QSPI_HandleTypeDef *hqspi)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b082      	sub	sp, #8
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d101      	bne.n	80071f2 <HAL_QSPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80071ee:	2301      	movs	r3, #1
 80071f0:	e016      	b.n	8007220 <HAL_QSPI_DeInit+0x40>
  }

  /* Disable the QSPI Peripheral Clock */
  __HAL_QSPI_DISABLE(hqspi);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	681a      	ldr	r2, [r3, #0]
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f022 0201 	bic.w	r2, r2, #1
 8007200:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hqspi->MspDeInitCallback(hqspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_QSPI_MspDeInit(hqspi);
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f7fa f8e2 	bl	80013cc <HAL_QSPI_MspDeInit>
#endif

  /* Set QSPI error code to none */
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2200      	movs	r2, #0
 800720c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Initialize the QSPI state */
  hqspi->State = HAL_QSPI_STATE_RESET;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2200      	movs	r2, #0
 8007212:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2200      	movs	r2, #0
 800721a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800721e:	2300      	movs	r3, #0
}
 8007220:	4618      	mov	r0, r3
 8007222:	3708      	adds	r7, #8
 8007224:	46bd      	mov	sp, r7
 8007226:	bd80      	pop	{r7, pc}

08007228 <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b088      	sub	sp, #32
 800722c:	af02      	add	r7, sp, #8
 800722e:	60f8      	str	r0, [r7, #12]
 8007230:	60b9      	str	r1, [r7, #8]
 8007232:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8007234:	f7fc fcd8 	bl	8003be8 <HAL_GetTick>
 8007238:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007240:	b2db      	uxtb	r3, r3
 8007242:	2b01      	cmp	r3, #1
 8007244:	d101      	bne.n	800724a <HAL_QSPI_Command+0x22>
 8007246:	2302      	movs	r3, #2
 8007248:	e048      	b.n	80072dc <HAL_QSPI_Command+0xb4>
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	2201      	movs	r2, #1
 800724e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007258:	b2db      	uxtb	r3, r3
 800725a:	2b01      	cmp	r3, #1
 800725c:	d137      	bne.n	80072ce <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	2200      	movs	r2, #0
 8007262:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	2202      	movs	r2, #2
 8007268:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	9300      	str	r3, [sp, #0]
 8007270:	693b      	ldr	r3, [r7, #16]
 8007272:	2200      	movs	r2, #0
 8007274:	2120      	movs	r1, #32
 8007276:	68f8      	ldr	r0, [r7, #12]
 8007278:	f000 facd 	bl	8007816 <QSPI_WaitFlagStateUntilTimeout>
 800727c:	4603      	mov	r3, r0
 800727e:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8007280:	7dfb      	ldrb	r3, [r7, #23]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d125      	bne.n	80072d2 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8007286:	2200      	movs	r2, #0
 8007288:	68b9      	ldr	r1, [r7, #8]
 800728a:	68f8      	ldr	r0, [r7, #12]
 800728c:	f000 fafa 	bl	8007884 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007294:	2b00      	cmp	r3, #0
 8007296:	d115      	bne.n	80072c4 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	9300      	str	r3, [sp, #0]
 800729c:	693b      	ldr	r3, [r7, #16]
 800729e:	2201      	movs	r2, #1
 80072a0:	2102      	movs	r1, #2
 80072a2:	68f8      	ldr	r0, [r7, #12]
 80072a4:	f000 fab7 	bl	8007816 <QSPI_WaitFlagStateUntilTimeout>
 80072a8:	4603      	mov	r3, r0
 80072aa:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 80072ac:	7dfb      	ldrb	r3, [r7, #23]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d10f      	bne.n	80072d2 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	2202      	movs	r2, #2
 80072b8:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	2201      	movs	r2, #1
 80072be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80072c2:	e006      	b.n	80072d2 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	2201      	movs	r2, #1
 80072c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80072cc:	e001      	b.n	80072d2 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 80072ce:	2302      	movs	r3, #2
 80072d0:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	2200      	movs	r2, #0
 80072d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80072da:	7dfb      	ldrb	r3, [r7, #23]
}
 80072dc:	4618      	mov	r0, r3
 80072de:	3718      	adds	r7, #24
 80072e0:	46bd      	mov	sp, r7
 80072e2:	bd80      	pop	{r7, pc}

080072e4 <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b08a      	sub	sp, #40	; 0x28
 80072e8:	af02      	add	r7, sp, #8
 80072ea:	60f8      	str	r0, [r7, #12]
 80072ec:	60b9      	str	r1, [r7, #8]
 80072ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80072f0:	2300      	movs	r3, #0
 80072f2:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 80072f4:	f7fc fc78 	bl	8003be8 <HAL_GetTick>
 80072f8:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	3320      	adds	r3, #32
 8007300:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007308:	b2db      	uxtb	r3, r3
 800730a:	2b01      	cmp	r3, #1
 800730c:	d101      	bne.n	8007312 <HAL_QSPI_Transmit+0x2e>
 800730e:	2302      	movs	r3, #2
 8007310:	e07b      	b.n	800740a <HAL_QSPI_Transmit+0x126>
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	2201      	movs	r2, #1
 8007316:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007320:	b2db      	uxtb	r3, r3
 8007322:	2b01      	cmp	r3, #1
 8007324:	d16a      	bne.n	80073fc <HAL_QSPI_Transmit+0x118>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	2200      	movs	r2, #0
 800732a:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d05b      	beq.n	80073ea <HAL_QSPI_Transmit+0x106>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	2212      	movs	r2, #18
 8007336:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	691b      	ldr	r3, [r3, #16]
 8007340:	1c5a      	adds	r2, r3, #1
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	691b      	ldr	r3, [r3, #16]
 800734c:	1c5a      	adds	r2, r3, #1
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	68ba      	ldr	r2, [r7, #8]
 8007356:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	695a      	ldr	r2, [r3, #20]
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8007366:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 8007368:	e01b      	b.n	80073a2 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	9300      	str	r3, [sp, #0]
 800736e:	69bb      	ldr	r3, [r7, #24]
 8007370:	2201      	movs	r2, #1
 8007372:	2104      	movs	r1, #4
 8007374:	68f8      	ldr	r0, [r7, #12]
 8007376:	f000 fa4e 	bl	8007816 <QSPI_WaitFlagStateUntilTimeout>
 800737a:	4603      	mov	r3, r0
 800737c:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 800737e:	7ffb      	ldrb	r3, [r7, #31]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d113      	bne.n	80073ac <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007388:	781a      	ldrb	r2, [r3, #0]
 800738a:	697b      	ldr	r3, [r7, #20]
 800738c:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007392:	1c5a      	adds	r2, r3, #1
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800739c:	1e5a      	subs	r2, r3, #1
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d1df      	bne.n	800736a <HAL_QSPI_Transmit+0x86>
 80073aa:	e000      	b.n	80073ae <HAL_QSPI_Transmit+0xca>
          break;
 80073ac:	bf00      	nop
      }

      if (status == HAL_OK)
 80073ae:	7ffb      	ldrb	r3, [r7, #31]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d115      	bne.n	80073e0 <HAL_QSPI_Transmit+0xfc>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	9300      	str	r3, [sp, #0]
 80073b8:	69bb      	ldr	r3, [r7, #24]
 80073ba:	2201      	movs	r2, #1
 80073bc:	2102      	movs	r1, #2
 80073be:	68f8      	ldr	r0, [r7, #12]
 80073c0:	f000 fa29 	bl	8007816 <QSPI_WaitFlagStateUntilTimeout>
 80073c4:	4603      	mov	r3, r0
 80073c6:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 80073c8:	7ffb      	ldrb	r3, [r7, #31]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d108      	bne.n	80073e0 <HAL_QSPI_Transmit+0xfc>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	2202      	movs	r2, #2
 80073d4:	60da      	str	r2, [r3, #12]

#if  defined(QSPI1_V1_0)
          /* Clear Busy bit */
          status = HAL_QSPI_Abort(hqspi);
 80073d6:	68f8      	ldr	r0, [r7, #12]
 80073d8:	f000 f996 	bl	8007708 <HAL_QSPI_Abort>
 80073dc:	4603      	mov	r3, r0
 80073de:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	2201      	movs	r2, #1
 80073e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80073e8:	e00a      	b.n	8007400 <HAL_QSPI_Transmit+0x11c>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073ee:	f043 0208 	orr.w	r2, r3, #8
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 80073f6:	2301      	movs	r3, #1
 80073f8:	77fb      	strb	r3, [r7, #31]
 80073fa:	e001      	b.n	8007400 <HAL_QSPI_Transmit+0x11c>
    }
  }
  else
  {
    status = HAL_BUSY;
 80073fc:	2302      	movs	r3, #2
 80073fe:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	2200      	movs	r2, #0
 8007404:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 8007408:	7ffb      	ldrb	r3, [r7, #31]
}
 800740a:	4618      	mov	r0, r3
 800740c:	3720      	adds	r7, #32
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}

08007412 <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8007412:	b580      	push	{r7, lr}
 8007414:	b08a      	sub	sp, #40	; 0x28
 8007416:	af02      	add	r7, sp, #8
 8007418:	60f8      	str	r0, [r7, #12]
 800741a:	60b9      	str	r1, [r7, #8]
 800741c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800741e:	2300      	movs	r3, #0
 8007420:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8007422:	f7fc fbe1 	bl	8003be8 <HAL_GetTick>
 8007426:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	699b      	ldr	r3, [r3, #24]
 800742e:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	3320      	adds	r3, #32
 8007436:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800743e:	b2db      	uxtb	r3, r3
 8007440:	2b01      	cmp	r3, #1
 8007442:	d101      	bne.n	8007448 <HAL_QSPI_Receive+0x36>
 8007444:	2302      	movs	r3, #2
 8007446:	e082      	b.n	800754e <HAL_QSPI_Receive+0x13c>
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	2201      	movs	r2, #1
 800744c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007456:	b2db      	uxtb	r3, r3
 8007458:	2b01      	cmp	r3, #1
 800745a:	d171      	bne.n	8007540 <HAL_QSPI_Receive+0x12e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	2200      	movs	r2, #0
 8007460:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d062      	beq.n	800752e <HAL_QSPI_Receive+0x11c>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	2222      	movs	r2, #34	; 0x22
 800746c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	691b      	ldr	r3, [r3, #16]
 8007476:	1c5a      	adds	r2, r3, #1
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	691b      	ldr	r3, [r3, #16]
 8007482:	1c5a      	adds	r2, r3, #1
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	68ba      	ldr	r2, [r7, #8]
 800748c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	695b      	ldr	r3, [r3, #20]
 8007494:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80074a0:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	697a      	ldr	r2, [r7, #20]
 80074a8:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 80074aa:	e01c      	b.n	80074e6 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	9300      	str	r3, [sp, #0]
 80074b0:	69bb      	ldr	r3, [r7, #24]
 80074b2:	2201      	movs	r2, #1
 80074b4:	2106      	movs	r1, #6
 80074b6:	68f8      	ldr	r0, [r7, #12]
 80074b8:	f000 f9ad 	bl	8007816 <QSPI_WaitFlagStateUntilTimeout>
 80074bc:	4603      	mov	r3, r0
 80074be:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 80074c0:	7ffb      	ldrb	r3, [r7, #31]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d114      	bne.n	80074f0 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074ca:	693a      	ldr	r2, [r7, #16]
 80074cc:	7812      	ldrb	r2, [r2, #0]
 80074ce:	b2d2      	uxtb	r2, r2
 80074d0:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074d6:	1c5a      	adds	r2, r3, #1
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074e0:	1e5a      	subs	r2, r3, #1
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d1de      	bne.n	80074ac <HAL_QSPI_Receive+0x9a>
 80074ee:	e000      	b.n	80074f2 <HAL_QSPI_Receive+0xe0>
          break;
 80074f0:	bf00      	nop
      }

      if (status == HAL_OK)
 80074f2:	7ffb      	ldrb	r3, [r7, #31]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d115      	bne.n	8007524 <HAL_QSPI_Receive+0x112>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	9300      	str	r3, [sp, #0]
 80074fc:	69bb      	ldr	r3, [r7, #24]
 80074fe:	2201      	movs	r2, #1
 8007500:	2102      	movs	r1, #2
 8007502:	68f8      	ldr	r0, [r7, #12]
 8007504:	f000 f987 	bl	8007816 <QSPI_WaitFlagStateUntilTimeout>
 8007508:	4603      	mov	r3, r0
 800750a:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 800750c:	7ffb      	ldrb	r3, [r7, #31]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d108      	bne.n	8007524 <HAL_QSPI_Receive+0x112>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	2202      	movs	r2, #2
 8007518:	60da      	str	r2, [r3, #12]

#if  defined(QSPI1_V1_0)
          /* Workaround - Extra data written in the FIFO at the end of a read transfer */
          status = HAL_QSPI_Abort(hqspi);
 800751a:	68f8      	ldr	r0, [r7, #12]
 800751c:	f000 f8f4 	bl	8007708 <HAL_QSPI_Abort>
 8007520:	4603      	mov	r3, r0
 8007522:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	2201      	movs	r2, #1
 8007528:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800752c:	e00a      	b.n	8007544 <HAL_QSPI_Receive+0x132>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007532:	f043 0208 	orr.w	r2, r3, #8
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 800753a:	2301      	movs	r3, #1
 800753c:	77fb      	strb	r3, [r7, #31]
 800753e:	e001      	b.n	8007544 <HAL_QSPI_Receive+0x132>
    }
  }
  else
  {
    status = HAL_BUSY;
 8007540:	2302      	movs	r3, #2
 8007542:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	2200      	movs	r2, #0
 8007548:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 800754c:	7ffb      	ldrb	r3, [r7, #31]
}
 800754e:	4618      	mov	r0, r3
 8007550:	3720      	adds	r7, #32
 8007552:	46bd      	mov	sp, r7
 8007554:	bd80      	pop	{r7, pc}

08007556 <HAL_QSPI_AutoPolling>:
  * @param  Timeout Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 8007556:	b580      	push	{r7, lr}
 8007558:	b088      	sub	sp, #32
 800755a:	af02      	add	r7, sp, #8
 800755c:	60f8      	str	r0, [r7, #12]
 800755e:	60b9      	str	r1, [r7, #8]
 8007560:	607a      	str	r2, [r7, #4]
 8007562:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8007564:	f7fc fb40 	bl	8003be8 <HAL_GetTick>
 8007568:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007570:	b2db      	uxtb	r3, r3
 8007572:	2b01      	cmp	r3, #1
 8007574:	d101      	bne.n	800757a <HAL_QSPI_AutoPolling+0x24>
 8007576:	2302      	movs	r3, #2
 8007578:	e060      	b.n	800763c <HAL_QSPI_AutoPolling+0xe6>
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	2201      	movs	r2, #1
 800757e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007588:	b2db      	uxtb	r3, r3
 800758a:	2b01      	cmp	r3, #1
 800758c:	d14f      	bne.n	800762e <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	2200      	movs	r2, #0
 8007592:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	2242      	movs	r2, #66	; 0x42
 8007598:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	9300      	str	r3, [sp, #0]
 80075a0:	693b      	ldr	r3, [r7, #16]
 80075a2:	2200      	movs	r2, #0
 80075a4:	2120      	movs	r1, #32
 80075a6:	68f8      	ldr	r0, [r7, #12]
 80075a8:	f000 f935 	bl	8007816 <QSPI_WaitFlagStateUntilTimeout>
 80075ac:	4603      	mov	r3, r0
 80075ae:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 80075b0:	7dfb      	ldrb	r3, [r7, #23]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d13d      	bne.n	8007632 <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	687a      	ldr	r2, [r7, #4]
 80075bc:	6812      	ldr	r2, [r2, #0]
 80075be:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	687a      	ldr	r2, [r7, #4]
 80075c6:	6852      	ldr	r2, [r2, #4]
 80075c8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	687a      	ldr	r2, [r7, #4]
 80075d0:	6892      	ldr	r2, [r2, #8]
 80075d2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	691b      	ldr	r3, [r3, #16]
 80075e2:	431a      	orrs	r2, r3
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80075ec:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	68da      	ldr	r2, [r3, #12]
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 80075f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80075fa:	68b9      	ldr	r1, [r7, #8]
 80075fc:	68f8      	ldr	r0, [r7, #12]
 80075fe:	f000 f941 	bl	8007884 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	9300      	str	r3, [sp, #0]
 8007606:	693b      	ldr	r3, [r7, #16]
 8007608:	2201      	movs	r2, #1
 800760a:	2108      	movs	r1, #8
 800760c:	68f8      	ldr	r0, [r7, #12]
 800760e:	f000 f902 	bl	8007816 <QSPI_WaitFlagStateUntilTimeout>
 8007612:	4603      	mov	r3, r0
 8007614:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8007616:	7dfb      	ldrb	r3, [r7, #23]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d10a      	bne.n	8007632 <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	2208      	movs	r2, #8
 8007622:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	2201      	movs	r2, #1
 8007628:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800762c:	e001      	b.n	8007632 <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800762e:	2302      	movs	r3, #2
 8007630:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	2200      	movs	r2, #0
 8007636:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800763a:	7dfb      	ldrb	r3, [r7, #23]
}
 800763c:	4618      	mov	r0, r3
 800763e:	3718      	adds	r7, #24
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}

08007644 <HAL_QSPI_MemoryMapped>:
  * @param  cfg structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_MemoryMapped(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_MemoryMappedTypeDef *cfg)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b088      	sub	sp, #32
 8007648:	af02      	add	r7, sp, #8
 800764a:	60f8      	str	r0, [r7, #12]
 800764c:	60b9      	str	r1, [r7, #8]
 800764e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8007650:	f7fc faca 	bl	8003be8 <HAL_GetTick>
 8007654:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  assert_param(IS_QSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800765c:	b2db      	uxtb	r3, r3
 800765e:	2b01      	cmp	r3, #1
 8007660:	d101      	bne.n	8007666 <HAL_QSPI_MemoryMapped+0x22>
 8007662:	2302      	movs	r3, #2
 8007664:	e04c      	b.n	8007700 <HAL_QSPI_MemoryMapped+0xbc>
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	2201      	movs	r2, #1
 800766a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007674:	b2db      	uxtb	r3, r3
 8007676:	2b01      	cmp	r3, #1
 8007678:	d13b      	bne.n	80076f2 <HAL_QSPI_MemoryMapped+0xae>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	2200      	movs	r2, #0
 800767e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	2282      	movs	r2, #130	; 0x82
 8007684:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800768c:	9300      	str	r3, [sp, #0]
 800768e:	693b      	ldr	r3, [r7, #16]
 8007690:	2200      	movs	r2, #0
 8007692:	2120      	movs	r1, #32
 8007694:	68f8      	ldr	r0, [r7, #12]
 8007696:	f000 f8be 	bl	8007816 <QSPI_WaitFlagStateUntilTimeout>
 800769a:	4603      	mov	r3, r0
 800769c:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800769e:	7dfb      	ldrb	r3, [r7, #23]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d128      	bne.n	80076f6 <HAL_QSPI_MemoryMapped+0xb2>
    {
      /* Configure QSPI: CR register with timeout counter enable */
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f023 0108 	bic.w	r1, r3, #8
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	685a      	ldr	r2, [r3, #4]
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	430a      	orrs	r2, r1
 80076b8:	601a      	str	r2, [r3, #0]

    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	685b      	ldr	r3, [r3, #4]
 80076be:	2b08      	cmp	r3, #8
 80076c0:	d110      	bne.n	80076e4 <HAL_QSPI_MemoryMapped+0xa0>
      {
        assert_param(IS_QSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure QSPI: LPTR register with the low-power timeout value */
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	687a      	ldr	r2, [r7, #4]
 80076c8:	6812      	ldr	r2, [r2, #0]
 80076ca:	631a      	str	r2, [r3, #48]	; 0x30

        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	2210      	movs	r2, #16
 80076d2:	60da      	str	r2, [r3, #12]

        /* Enable the QSPI TimeOut Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	681a      	ldr	r2, [r3, #0]
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80076e2:	601a      	str	r2, [r3, #0]
      }

      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 80076e4:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80076e8:	68b9      	ldr	r1, [r7, #8]
 80076ea:	68f8      	ldr	r0, [r7, #12]
 80076ec:	f000 f8ca 	bl	8007884 <QSPI_Config>
 80076f0:	e001      	b.n	80076f6 <HAL_QSPI_MemoryMapped+0xb2>
    }
  }
  else
  {
    status = HAL_BUSY;
 80076f2:	2302      	movs	r3, #2
 80076f4:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	2200      	movs	r2, #0
 80076fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80076fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8007700:	4618      	mov	r0, r3
 8007702:	3718      	adds	r7, #24
 8007704:	46bd      	mov	sp, r7
 8007706:	bd80      	pop	{r7, pc}

08007708 <HAL_QSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hqspi QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b086      	sub	sp, #24
 800770c:	af02      	add	r7, sp, #8
 800770e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007710:	2300      	movs	r3, #0
 8007712:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8007714:	f7fc fa68 	bl	8003be8 <HAL_GetTick>
 8007718:	60b8      	str	r0, [r7, #8]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007720:	b2db      	uxtb	r3, r3
 8007722:	f003 0302 	and.w	r3, r3, #2
 8007726:	2b00      	cmp	r3, #0
 8007728:	d062      	beq.n	80077f0 <HAL_QSPI_Abort+0xe8>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2200      	movs	r2, #0
 800772e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f003 0304 	and.w	r3, r3, #4
 800773c:	2b00      	cmp	r3, #0
 800773e:	d017      	beq.n	8007770 <HAL_QSPI_Abort+0x68>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	681a      	ldr	r2, [r3, #0]
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f022 0204 	bic.w	r2, r2, #4
 800774e:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      status = HAL_DMA_Abort(hqspi->hdma);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007754:	4618      	mov	r0, r3
 8007756:	f7fc fc95 	bl	8004084 <HAL_DMA_Abort>
 800775a:	4603      	mov	r3, r0
 800775c:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
 800775e:	7bfb      	ldrb	r3, [r7, #15]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d005      	beq.n	8007770 <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007768:	f043 0204 	orr.w	r2, r3, #4
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    if (__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_BUSY) != RESET)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	689b      	ldr	r3, [r3, #8]
 8007776:	f003 0320 	and.w	r3, r3, #32
 800777a:	2b00      	cmp	r3, #0
 800777c:	d034      	beq.n	80077e8 <HAL_QSPI_Abort+0xe0>
    {
      /* Configure QSPI: CR register with Abort request */
      SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	681a      	ldr	r2, [r3, #0]
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f042 0202 	orr.w	r2, r2, #2
 800778c:	601a      	str	r2, [r3, #0]
      
      /* Wait until TC flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007792:	9300      	str	r3, [sp, #0]
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	2201      	movs	r2, #1
 8007798:	2102      	movs	r1, #2
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f000 f83b 	bl	8007816 <QSPI_WaitFlagStateUntilTimeout>
 80077a0:	4603      	mov	r3, r0
 80077a2:	73fb      	strb	r3, [r7, #15]
      
      if (status == HAL_OK)
 80077a4:	7bfb      	ldrb	r3, [r7, #15]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d10e      	bne.n	80077c8 <HAL_QSPI_Abort+0xc0>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	2202      	movs	r2, #2
 80077b0:	60da      	str	r2, [r3, #12]
        
        /* Wait until BUSY flag is reset */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077b6:	9300      	str	r3, [sp, #0]
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	2200      	movs	r2, #0
 80077bc:	2120      	movs	r1, #32
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f000 f829 	bl	8007816 <QSPI_WaitFlagStateUntilTimeout>
 80077c4:	4603      	mov	r3, r0
 80077c6:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 80077c8:	7bfb      	ldrb	r3, [r7, #15]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d110      	bne.n	80077f0 <HAL_QSPI_Abort+0xe8>
      {
        /* Reset functional mode configuration to indirect write mode by default */
        CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	695a      	ldr	r2, [r3, #20]
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80077dc:	615a      	str	r2, [r3, #20]
        
        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2201      	movs	r2, #1
 80077e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80077e6:	e003      	b.n	80077f0 <HAL_QSPI_Abort+0xe8>
      }
    }
    else
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2201      	movs	r2, #1
 80077ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
  }

  return status;
 80077f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	3710      	adds	r7, #16
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}

080077fa <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80077fa:	b480      	push	{r7}
 80077fc:	b083      	sub	sp, #12
 80077fe:	af00      	add	r7, sp, #0
 8007800:	6078      	str	r0, [r7, #4]
 8007802:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	683a      	ldr	r2, [r7, #0]
 8007808:	649a      	str	r2, [r3, #72]	; 0x48
}
 800780a:	bf00      	nop
 800780c:	370c      	adds	r7, #12
 800780e:	46bd      	mov	sp, r7
 8007810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007814:	4770      	bx	lr

08007816 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8007816:	b580      	push	{r7, lr}
 8007818:	b084      	sub	sp, #16
 800781a:	af00      	add	r7, sp, #0
 800781c:	60f8      	str	r0, [r7, #12]
 800781e:	60b9      	str	r1, [r7, #8]
 8007820:	603b      	str	r3, [r7, #0]
 8007822:	4613      	mov	r3, r2
 8007824:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8007826:	e01a      	b.n	800785e <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007828:	69bb      	ldr	r3, [r7, #24]
 800782a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800782e:	d016      	beq.n	800785e <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007830:	f7fc f9da 	bl	8003be8 <HAL_GetTick>
 8007834:	4602      	mov	r2, r0
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	1ad3      	subs	r3, r2, r3
 800783a:	69ba      	ldr	r2, [r7, #24]
 800783c:	429a      	cmp	r2, r3
 800783e:	d302      	bcc.n	8007846 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8007840:	69bb      	ldr	r3, [r7, #24]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d10b      	bne.n	800785e <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	2204      	movs	r2, #4
 800784a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007852:	f043 0201 	orr.w	r2, r3, #1
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 800785a:	2301      	movs	r3, #1
 800785c:	e00e      	b.n	800787c <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	689a      	ldr	r2, [r3, #8]
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	4013      	ands	r3, r2
 8007868:	2b00      	cmp	r3, #0
 800786a:	bf14      	ite	ne
 800786c:	2301      	movne	r3, #1
 800786e:	2300      	moveq	r3, #0
 8007870:	b2db      	uxtb	r3, r3
 8007872:	461a      	mov	r2, r3
 8007874:	79fb      	ldrb	r3, [r7, #7]
 8007876:	429a      	cmp	r2, r3
 8007878:	d1d6      	bne.n	8007828 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800787a:	2300      	movs	r3, #0
}
 800787c:	4618      	mov	r0, r3
 800787e:	3710      	adds	r7, #16
 8007880:	46bd      	mov	sp, r7
 8007882:	bd80      	pop	{r7, pc}

08007884 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8007884:	b480      	push	{r7}
 8007886:	b085      	sub	sp, #20
 8007888:	af00      	add	r7, sp, #0
 800788a:	60f8      	str	r0, [r7, #12]
 800788c:	60b9      	str	r1, [r7, #8]
 800788e:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007894:	2b00      	cmp	r3, #0
 8007896:	d009      	beq.n	80078ac <QSPI_Config+0x28>
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800789e:	d005      	beq.n	80078ac <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	3a01      	subs	r2, #1
 80078aa:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 80078ac:	68bb      	ldr	r3, [r7, #8]
 80078ae:	699b      	ldr	r3, [r3, #24]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	f000 80b9 	beq.w	8007a28 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	6a1b      	ldr	r3, [r3, #32]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d05f      	beq.n	800797e <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	68ba      	ldr	r2, [r7, #8]
 80078c4:	6892      	ldr	r2, [r2, #8]
 80078c6:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	69db      	ldr	r3, [r3, #28]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d031      	beq.n	8007934 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078d4:	68bb      	ldr	r3, [r7, #8]
 80078d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078d8:	431a      	orrs	r2, r3
 80078da:	68bb      	ldr	r3, [r7, #8]
 80078dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078de:	431a      	orrs	r2, r3
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078e4:	431a      	orrs	r2, r3
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	695b      	ldr	r3, [r3, #20]
 80078ea:	049b      	lsls	r3, r3, #18
 80078ec:	431a      	orrs	r2, r3
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	691b      	ldr	r3, [r3, #16]
 80078f2:	431a      	orrs	r2, r3
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	6a1b      	ldr	r3, [r3, #32]
 80078f8:	431a      	orrs	r2, r3
 80078fa:	68bb      	ldr	r3, [r7, #8]
 80078fc:	68db      	ldr	r3, [r3, #12]
 80078fe:	431a      	orrs	r2, r3
 8007900:	68bb      	ldr	r3, [r7, #8]
 8007902:	69db      	ldr	r3, [r3, #28]
 8007904:	431a      	orrs	r2, r3
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	699b      	ldr	r3, [r3, #24]
 800790a:	431a      	orrs	r2, r3
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	ea42 0103 	orr.w	r1, r2, r3
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	687a      	ldr	r2, [r7, #4]
 800791a:	430a      	orrs	r2, r1
 800791c:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007924:	f000 812e 	beq.w	8007b84 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	68ba      	ldr	r2, [r7, #8]
 800792e:	6852      	ldr	r2, [r2, #4]
 8007930:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8007932:	e127      	b.n	8007b84 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800793c:	431a      	orrs	r2, r3
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007942:	431a      	orrs	r2, r3
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007948:	431a      	orrs	r2, r3
 800794a:	68bb      	ldr	r3, [r7, #8]
 800794c:	695b      	ldr	r3, [r3, #20]
 800794e:	049b      	lsls	r3, r3, #18
 8007950:	431a      	orrs	r2, r3
 8007952:	68bb      	ldr	r3, [r7, #8]
 8007954:	691b      	ldr	r3, [r3, #16]
 8007956:	431a      	orrs	r2, r3
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	6a1b      	ldr	r3, [r3, #32]
 800795c:	431a      	orrs	r2, r3
 800795e:	68bb      	ldr	r3, [r7, #8]
 8007960:	69db      	ldr	r3, [r3, #28]
 8007962:	431a      	orrs	r2, r3
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	699b      	ldr	r3, [r3, #24]
 8007968:	431a      	orrs	r2, r3
 800796a:	68bb      	ldr	r3, [r7, #8]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	ea42 0103 	orr.w	r1, r2, r3
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	687a      	ldr	r2, [r7, #4]
 8007978:	430a      	orrs	r2, r1
 800797a:	615a      	str	r2, [r3, #20]
}
 800797c:	e102      	b.n	8007b84 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800797e:	68bb      	ldr	r3, [r7, #8]
 8007980:	69db      	ldr	r3, [r3, #28]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d02e      	beq.n	80079e4 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800798e:	431a      	orrs	r2, r3
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007994:	431a      	orrs	r2, r3
 8007996:	68bb      	ldr	r3, [r7, #8]
 8007998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800799a:	431a      	orrs	r2, r3
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	695b      	ldr	r3, [r3, #20]
 80079a0:	049b      	lsls	r3, r3, #18
 80079a2:	431a      	orrs	r2, r3
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	6a1b      	ldr	r3, [r3, #32]
 80079a8:	431a      	orrs	r2, r3
 80079aa:	68bb      	ldr	r3, [r7, #8]
 80079ac:	68db      	ldr	r3, [r3, #12]
 80079ae:	431a      	orrs	r2, r3
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	69db      	ldr	r3, [r3, #28]
 80079b4:	431a      	orrs	r2, r3
 80079b6:	68bb      	ldr	r3, [r7, #8]
 80079b8:	699b      	ldr	r3, [r3, #24]
 80079ba:	431a      	orrs	r2, r3
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	ea42 0103 	orr.w	r1, r2, r3
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	687a      	ldr	r2, [r7, #4]
 80079ca:	430a      	orrs	r2, r1
 80079cc:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80079d4:	f000 80d6 	beq.w	8007b84 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	68ba      	ldr	r2, [r7, #8]
 80079de:	6852      	ldr	r2, [r2, #4]
 80079e0:	619a      	str	r2, [r3, #24]
}
 80079e2:	e0cf      	b.n	8007b84 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079e8:	68bb      	ldr	r3, [r7, #8]
 80079ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079ec:	431a      	orrs	r2, r3
 80079ee:	68bb      	ldr	r3, [r7, #8]
 80079f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079f2:	431a      	orrs	r2, r3
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079f8:	431a      	orrs	r2, r3
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	695b      	ldr	r3, [r3, #20]
 80079fe:	049b      	lsls	r3, r3, #18
 8007a00:	431a      	orrs	r2, r3
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	6a1b      	ldr	r3, [r3, #32]
 8007a06:	431a      	orrs	r2, r3
 8007a08:	68bb      	ldr	r3, [r7, #8]
 8007a0a:	69db      	ldr	r3, [r3, #28]
 8007a0c:	431a      	orrs	r2, r3
 8007a0e:	68bb      	ldr	r3, [r7, #8]
 8007a10:	699b      	ldr	r3, [r3, #24]
 8007a12:	431a      	orrs	r2, r3
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	ea42 0103 	orr.w	r1, r2, r3
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	687a      	ldr	r2, [r7, #4]
 8007a22:	430a      	orrs	r2, r1
 8007a24:	615a      	str	r2, [r3, #20]
}
 8007a26:	e0ad      	b.n	8007b84 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	6a1b      	ldr	r3, [r3, #32]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d058      	beq.n	8007ae2 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	68ba      	ldr	r2, [r7, #8]
 8007a36:	6892      	ldr	r2, [r2, #8]
 8007a38:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8007a3a:	68bb      	ldr	r3, [r7, #8]
 8007a3c:	69db      	ldr	r3, [r3, #28]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d02d      	beq.n	8007a9e <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a46:	68bb      	ldr	r3, [r7, #8]
 8007a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a4a:	431a      	orrs	r2, r3
 8007a4c:	68bb      	ldr	r3, [r7, #8]
 8007a4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a50:	431a      	orrs	r2, r3
 8007a52:	68bb      	ldr	r3, [r7, #8]
 8007a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a56:	431a      	orrs	r2, r3
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	695b      	ldr	r3, [r3, #20]
 8007a5c:	049b      	lsls	r3, r3, #18
 8007a5e:	431a      	orrs	r2, r3
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	691b      	ldr	r3, [r3, #16]
 8007a64:	431a      	orrs	r2, r3
 8007a66:	68bb      	ldr	r3, [r7, #8]
 8007a68:	6a1b      	ldr	r3, [r3, #32]
 8007a6a:	431a      	orrs	r2, r3
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	68db      	ldr	r3, [r3, #12]
 8007a70:	431a      	orrs	r2, r3
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	69db      	ldr	r3, [r3, #28]
 8007a76:	431a      	orrs	r2, r3
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	699b      	ldr	r3, [r3, #24]
 8007a7c:	ea42 0103 	orr.w	r1, r2, r3
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	687a      	ldr	r2, [r7, #4]
 8007a86:	430a      	orrs	r2, r1
 8007a88:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007a90:	d078      	beq.n	8007b84 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	68ba      	ldr	r2, [r7, #8]
 8007a98:	6852      	ldr	r2, [r2, #4]
 8007a9a:	619a      	str	r2, [r3, #24]
}
 8007a9c:	e072      	b.n	8007b84 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007aa2:	68bb      	ldr	r3, [r7, #8]
 8007aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aa6:	431a      	orrs	r2, r3
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007aac:	431a      	orrs	r2, r3
 8007aae:	68bb      	ldr	r3, [r7, #8]
 8007ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ab2:	431a      	orrs	r2, r3
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	695b      	ldr	r3, [r3, #20]
 8007ab8:	049b      	lsls	r3, r3, #18
 8007aba:	431a      	orrs	r2, r3
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	691b      	ldr	r3, [r3, #16]
 8007ac0:	431a      	orrs	r2, r3
 8007ac2:	68bb      	ldr	r3, [r7, #8]
 8007ac4:	6a1b      	ldr	r3, [r3, #32]
 8007ac6:	431a      	orrs	r2, r3
 8007ac8:	68bb      	ldr	r3, [r7, #8]
 8007aca:	69db      	ldr	r3, [r3, #28]
 8007acc:	431a      	orrs	r2, r3
 8007ace:	68bb      	ldr	r3, [r7, #8]
 8007ad0:	699b      	ldr	r3, [r3, #24]
 8007ad2:	ea42 0103 	orr.w	r1, r2, r3
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	687a      	ldr	r2, [r7, #4]
 8007adc:	430a      	orrs	r2, r1
 8007ade:	615a      	str	r2, [r3, #20]
}
 8007ae0:	e050      	b.n	8007b84 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8007ae2:	68bb      	ldr	r3, [r7, #8]
 8007ae4:	69db      	ldr	r3, [r3, #28]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d02a      	beq.n	8007b40 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007af2:	431a      	orrs	r2, r3
 8007af4:	68bb      	ldr	r3, [r7, #8]
 8007af6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007af8:	431a      	orrs	r2, r3
 8007afa:	68bb      	ldr	r3, [r7, #8]
 8007afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007afe:	431a      	orrs	r2, r3
 8007b00:	68bb      	ldr	r3, [r7, #8]
 8007b02:	695b      	ldr	r3, [r3, #20]
 8007b04:	049b      	lsls	r3, r3, #18
 8007b06:	431a      	orrs	r2, r3
 8007b08:	68bb      	ldr	r3, [r7, #8]
 8007b0a:	6a1b      	ldr	r3, [r3, #32]
 8007b0c:	431a      	orrs	r2, r3
 8007b0e:	68bb      	ldr	r3, [r7, #8]
 8007b10:	68db      	ldr	r3, [r3, #12]
 8007b12:	431a      	orrs	r2, r3
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	69db      	ldr	r3, [r3, #28]
 8007b18:	431a      	orrs	r2, r3
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	699b      	ldr	r3, [r3, #24]
 8007b1e:	ea42 0103 	orr.w	r1, r2, r3
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	687a      	ldr	r2, [r7, #4]
 8007b28:	430a      	orrs	r2, r1
 8007b2a:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007b32:	d027      	beq.n	8007b84 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	68ba      	ldr	r2, [r7, #8]
 8007b3a:	6852      	ldr	r2, [r2, #4]
 8007b3c:	619a      	str	r2, [r3, #24]
}
 8007b3e:	e021      	b.n	8007b84 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d01d      	beq.n	8007b84 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b50:	431a      	orrs	r2, r3
 8007b52:	68bb      	ldr	r3, [r7, #8]
 8007b54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b56:	431a      	orrs	r2, r3
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b5c:	431a      	orrs	r2, r3
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	695b      	ldr	r3, [r3, #20]
 8007b62:	049b      	lsls	r3, r3, #18
 8007b64:	431a      	orrs	r2, r3
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	6a1b      	ldr	r3, [r3, #32]
 8007b6a:	431a      	orrs	r2, r3
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	69db      	ldr	r3, [r3, #28]
 8007b70:	431a      	orrs	r2, r3
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	699b      	ldr	r3, [r3, #24]
 8007b76:	ea42 0103 	orr.w	r1, r2, r3
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	687a      	ldr	r2, [r7, #4]
 8007b80:	430a      	orrs	r2, r1
 8007b82:	615a      	str	r2, [r3, #20]
}
 8007b84:	bf00      	nop
 8007b86:	3714      	adds	r7, #20
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8e:	4770      	bx	lr

08007b90 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b086      	sub	sp, #24
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8007b98:	2300      	movs	r3, #0
 8007b9a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d101      	bne.n	8007ba6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8007ba2:	2301      	movs	r3, #1
 8007ba4:	e291      	b.n	80080ca <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f003 0301 	and.w	r3, r3, #1
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	f000 8087 	beq.w	8007cc2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007bb4:	4b96      	ldr	r3, [pc, #600]	; (8007e10 <HAL_RCC_OscConfig+0x280>)
 8007bb6:	689b      	ldr	r3, [r3, #8]
 8007bb8:	f003 030c 	and.w	r3, r3, #12
 8007bbc:	2b04      	cmp	r3, #4
 8007bbe:	d00c      	beq.n	8007bda <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007bc0:	4b93      	ldr	r3, [pc, #588]	; (8007e10 <HAL_RCC_OscConfig+0x280>)
 8007bc2:	689b      	ldr	r3, [r3, #8]
 8007bc4:	f003 030c 	and.w	r3, r3, #12
 8007bc8:	2b08      	cmp	r3, #8
 8007bca:	d112      	bne.n	8007bf2 <HAL_RCC_OscConfig+0x62>
 8007bcc:	4b90      	ldr	r3, [pc, #576]	; (8007e10 <HAL_RCC_OscConfig+0x280>)
 8007bce:	685b      	ldr	r3, [r3, #4]
 8007bd0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007bd4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007bd8:	d10b      	bne.n	8007bf2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007bda:	4b8d      	ldr	r3, [pc, #564]	; (8007e10 <HAL_RCC_OscConfig+0x280>)
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d06c      	beq.n	8007cc0 <HAL_RCC_OscConfig+0x130>
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	685b      	ldr	r3, [r3, #4]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d168      	bne.n	8007cc0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007bee:	2301      	movs	r3, #1
 8007bf0:	e26b      	b.n	80080ca <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	685b      	ldr	r3, [r3, #4]
 8007bf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007bfa:	d106      	bne.n	8007c0a <HAL_RCC_OscConfig+0x7a>
 8007bfc:	4b84      	ldr	r3, [pc, #528]	; (8007e10 <HAL_RCC_OscConfig+0x280>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	4a83      	ldr	r2, [pc, #524]	; (8007e10 <HAL_RCC_OscConfig+0x280>)
 8007c02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c06:	6013      	str	r3, [r2, #0]
 8007c08:	e02e      	b.n	8007c68 <HAL_RCC_OscConfig+0xd8>
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	685b      	ldr	r3, [r3, #4]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d10c      	bne.n	8007c2c <HAL_RCC_OscConfig+0x9c>
 8007c12:	4b7f      	ldr	r3, [pc, #508]	; (8007e10 <HAL_RCC_OscConfig+0x280>)
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	4a7e      	ldr	r2, [pc, #504]	; (8007e10 <HAL_RCC_OscConfig+0x280>)
 8007c18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c1c:	6013      	str	r3, [r2, #0]
 8007c1e:	4b7c      	ldr	r3, [pc, #496]	; (8007e10 <HAL_RCC_OscConfig+0x280>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	4a7b      	ldr	r2, [pc, #492]	; (8007e10 <HAL_RCC_OscConfig+0x280>)
 8007c24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007c28:	6013      	str	r3, [r2, #0]
 8007c2a:	e01d      	b.n	8007c68 <HAL_RCC_OscConfig+0xd8>
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	685b      	ldr	r3, [r3, #4]
 8007c30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007c34:	d10c      	bne.n	8007c50 <HAL_RCC_OscConfig+0xc0>
 8007c36:	4b76      	ldr	r3, [pc, #472]	; (8007e10 <HAL_RCC_OscConfig+0x280>)
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	4a75      	ldr	r2, [pc, #468]	; (8007e10 <HAL_RCC_OscConfig+0x280>)
 8007c3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007c40:	6013      	str	r3, [r2, #0]
 8007c42:	4b73      	ldr	r3, [pc, #460]	; (8007e10 <HAL_RCC_OscConfig+0x280>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	4a72      	ldr	r2, [pc, #456]	; (8007e10 <HAL_RCC_OscConfig+0x280>)
 8007c48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c4c:	6013      	str	r3, [r2, #0]
 8007c4e:	e00b      	b.n	8007c68 <HAL_RCC_OscConfig+0xd8>
 8007c50:	4b6f      	ldr	r3, [pc, #444]	; (8007e10 <HAL_RCC_OscConfig+0x280>)
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	4a6e      	ldr	r2, [pc, #440]	; (8007e10 <HAL_RCC_OscConfig+0x280>)
 8007c56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c5a:	6013      	str	r3, [r2, #0]
 8007c5c:	4b6c      	ldr	r3, [pc, #432]	; (8007e10 <HAL_RCC_OscConfig+0x280>)
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	4a6b      	ldr	r2, [pc, #428]	; (8007e10 <HAL_RCC_OscConfig+0x280>)
 8007c62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007c66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	685b      	ldr	r3, [r3, #4]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d013      	beq.n	8007c98 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c70:	f7fb ffba 	bl	8003be8 <HAL_GetTick>
 8007c74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007c76:	e008      	b.n	8007c8a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007c78:	f7fb ffb6 	bl	8003be8 <HAL_GetTick>
 8007c7c:	4602      	mov	r2, r0
 8007c7e:	693b      	ldr	r3, [r7, #16]
 8007c80:	1ad3      	subs	r3, r2, r3
 8007c82:	2b64      	cmp	r3, #100	; 0x64
 8007c84:	d901      	bls.n	8007c8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007c86:	2303      	movs	r3, #3
 8007c88:	e21f      	b.n	80080ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007c8a:	4b61      	ldr	r3, [pc, #388]	; (8007e10 <HAL_RCC_OscConfig+0x280>)
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d0f0      	beq.n	8007c78 <HAL_RCC_OscConfig+0xe8>
 8007c96:	e014      	b.n	8007cc2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c98:	f7fb ffa6 	bl	8003be8 <HAL_GetTick>
 8007c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007c9e:	e008      	b.n	8007cb2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007ca0:	f7fb ffa2 	bl	8003be8 <HAL_GetTick>
 8007ca4:	4602      	mov	r2, r0
 8007ca6:	693b      	ldr	r3, [r7, #16]
 8007ca8:	1ad3      	subs	r3, r2, r3
 8007caa:	2b64      	cmp	r3, #100	; 0x64
 8007cac:	d901      	bls.n	8007cb2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007cae:	2303      	movs	r3, #3
 8007cb0:	e20b      	b.n	80080ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007cb2:	4b57      	ldr	r3, [pc, #348]	; (8007e10 <HAL_RCC_OscConfig+0x280>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d1f0      	bne.n	8007ca0 <HAL_RCC_OscConfig+0x110>
 8007cbe:	e000      	b.n	8007cc2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007cc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f003 0302 	and.w	r3, r3, #2
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d069      	beq.n	8007da2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007cce:	4b50      	ldr	r3, [pc, #320]	; (8007e10 <HAL_RCC_OscConfig+0x280>)
 8007cd0:	689b      	ldr	r3, [r3, #8]
 8007cd2:	f003 030c 	and.w	r3, r3, #12
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d00b      	beq.n	8007cf2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007cda:	4b4d      	ldr	r3, [pc, #308]	; (8007e10 <HAL_RCC_OscConfig+0x280>)
 8007cdc:	689b      	ldr	r3, [r3, #8]
 8007cde:	f003 030c 	and.w	r3, r3, #12
 8007ce2:	2b08      	cmp	r3, #8
 8007ce4:	d11c      	bne.n	8007d20 <HAL_RCC_OscConfig+0x190>
 8007ce6:	4b4a      	ldr	r3, [pc, #296]	; (8007e10 <HAL_RCC_OscConfig+0x280>)
 8007ce8:	685b      	ldr	r3, [r3, #4]
 8007cea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d116      	bne.n	8007d20 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007cf2:	4b47      	ldr	r3, [pc, #284]	; (8007e10 <HAL_RCC_OscConfig+0x280>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f003 0302 	and.w	r3, r3, #2
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d005      	beq.n	8007d0a <HAL_RCC_OscConfig+0x17a>
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	68db      	ldr	r3, [r3, #12]
 8007d02:	2b01      	cmp	r3, #1
 8007d04:	d001      	beq.n	8007d0a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007d06:	2301      	movs	r3, #1
 8007d08:	e1df      	b.n	80080ca <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007d0a:	4b41      	ldr	r3, [pc, #260]	; (8007e10 <HAL_RCC_OscConfig+0x280>)
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	691b      	ldr	r3, [r3, #16]
 8007d16:	00db      	lsls	r3, r3, #3
 8007d18:	493d      	ldr	r1, [pc, #244]	; (8007e10 <HAL_RCC_OscConfig+0x280>)
 8007d1a:	4313      	orrs	r3, r2
 8007d1c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007d1e:	e040      	b.n	8007da2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	68db      	ldr	r3, [r3, #12]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d023      	beq.n	8007d70 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007d28:	4b39      	ldr	r3, [pc, #228]	; (8007e10 <HAL_RCC_OscConfig+0x280>)
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	4a38      	ldr	r2, [pc, #224]	; (8007e10 <HAL_RCC_OscConfig+0x280>)
 8007d2e:	f043 0301 	orr.w	r3, r3, #1
 8007d32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d34:	f7fb ff58 	bl	8003be8 <HAL_GetTick>
 8007d38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007d3a:	e008      	b.n	8007d4e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007d3c:	f7fb ff54 	bl	8003be8 <HAL_GetTick>
 8007d40:	4602      	mov	r2, r0
 8007d42:	693b      	ldr	r3, [r7, #16]
 8007d44:	1ad3      	subs	r3, r2, r3
 8007d46:	2b02      	cmp	r3, #2
 8007d48:	d901      	bls.n	8007d4e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8007d4a:	2303      	movs	r3, #3
 8007d4c:	e1bd      	b.n	80080ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007d4e:	4b30      	ldr	r3, [pc, #192]	; (8007e10 <HAL_RCC_OscConfig+0x280>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f003 0302 	and.w	r3, r3, #2
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d0f0      	beq.n	8007d3c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007d5a:	4b2d      	ldr	r3, [pc, #180]	; (8007e10 <HAL_RCC_OscConfig+0x280>)
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	691b      	ldr	r3, [r3, #16]
 8007d66:	00db      	lsls	r3, r3, #3
 8007d68:	4929      	ldr	r1, [pc, #164]	; (8007e10 <HAL_RCC_OscConfig+0x280>)
 8007d6a:	4313      	orrs	r3, r2
 8007d6c:	600b      	str	r3, [r1, #0]
 8007d6e:	e018      	b.n	8007da2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007d70:	4b27      	ldr	r3, [pc, #156]	; (8007e10 <HAL_RCC_OscConfig+0x280>)
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	4a26      	ldr	r2, [pc, #152]	; (8007e10 <HAL_RCC_OscConfig+0x280>)
 8007d76:	f023 0301 	bic.w	r3, r3, #1
 8007d7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d7c:	f7fb ff34 	bl	8003be8 <HAL_GetTick>
 8007d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007d82:	e008      	b.n	8007d96 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007d84:	f7fb ff30 	bl	8003be8 <HAL_GetTick>
 8007d88:	4602      	mov	r2, r0
 8007d8a:	693b      	ldr	r3, [r7, #16]
 8007d8c:	1ad3      	subs	r3, r2, r3
 8007d8e:	2b02      	cmp	r3, #2
 8007d90:	d901      	bls.n	8007d96 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007d92:	2303      	movs	r3, #3
 8007d94:	e199      	b.n	80080ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007d96:	4b1e      	ldr	r3, [pc, #120]	; (8007e10 <HAL_RCC_OscConfig+0x280>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f003 0302 	and.w	r3, r3, #2
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d1f0      	bne.n	8007d84 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f003 0308 	and.w	r3, r3, #8
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d038      	beq.n	8007e20 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	695b      	ldr	r3, [r3, #20]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d019      	beq.n	8007dea <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007db6:	4b16      	ldr	r3, [pc, #88]	; (8007e10 <HAL_RCC_OscConfig+0x280>)
 8007db8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007dba:	4a15      	ldr	r2, [pc, #84]	; (8007e10 <HAL_RCC_OscConfig+0x280>)
 8007dbc:	f043 0301 	orr.w	r3, r3, #1
 8007dc0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007dc2:	f7fb ff11 	bl	8003be8 <HAL_GetTick>
 8007dc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007dc8:	e008      	b.n	8007ddc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007dca:	f7fb ff0d 	bl	8003be8 <HAL_GetTick>
 8007dce:	4602      	mov	r2, r0
 8007dd0:	693b      	ldr	r3, [r7, #16]
 8007dd2:	1ad3      	subs	r3, r2, r3
 8007dd4:	2b02      	cmp	r3, #2
 8007dd6:	d901      	bls.n	8007ddc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007dd8:	2303      	movs	r3, #3
 8007dda:	e176      	b.n	80080ca <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007ddc:	4b0c      	ldr	r3, [pc, #48]	; (8007e10 <HAL_RCC_OscConfig+0x280>)
 8007dde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007de0:	f003 0302 	and.w	r3, r3, #2
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d0f0      	beq.n	8007dca <HAL_RCC_OscConfig+0x23a>
 8007de8:	e01a      	b.n	8007e20 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007dea:	4b09      	ldr	r3, [pc, #36]	; (8007e10 <HAL_RCC_OscConfig+0x280>)
 8007dec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007dee:	4a08      	ldr	r2, [pc, #32]	; (8007e10 <HAL_RCC_OscConfig+0x280>)
 8007df0:	f023 0301 	bic.w	r3, r3, #1
 8007df4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007df6:	f7fb fef7 	bl	8003be8 <HAL_GetTick>
 8007dfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007dfc:	e00a      	b.n	8007e14 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007dfe:	f7fb fef3 	bl	8003be8 <HAL_GetTick>
 8007e02:	4602      	mov	r2, r0
 8007e04:	693b      	ldr	r3, [r7, #16]
 8007e06:	1ad3      	subs	r3, r2, r3
 8007e08:	2b02      	cmp	r3, #2
 8007e0a:	d903      	bls.n	8007e14 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007e0c:	2303      	movs	r3, #3
 8007e0e:	e15c      	b.n	80080ca <HAL_RCC_OscConfig+0x53a>
 8007e10:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007e14:	4b91      	ldr	r3, [pc, #580]	; (800805c <HAL_RCC_OscConfig+0x4cc>)
 8007e16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e18:	f003 0302 	and.w	r3, r3, #2
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d1ee      	bne.n	8007dfe <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f003 0304 	and.w	r3, r3, #4
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	f000 80a4 	beq.w	8007f76 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007e2e:	4b8b      	ldr	r3, [pc, #556]	; (800805c <HAL_RCC_OscConfig+0x4cc>)
 8007e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d10d      	bne.n	8007e56 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8007e3a:	4b88      	ldr	r3, [pc, #544]	; (800805c <HAL_RCC_OscConfig+0x4cc>)
 8007e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e3e:	4a87      	ldr	r2, [pc, #540]	; (800805c <HAL_RCC_OscConfig+0x4cc>)
 8007e40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e44:	6413      	str	r3, [r2, #64]	; 0x40
 8007e46:	4b85      	ldr	r3, [pc, #532]	; (800805c <HAL_RCC_OscConfig+0x4cc>)
 8007e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e4e:	60bb      	str	r3, [r7, #8]
 8007e50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007e52:	2301      	movs	r3, #1
 8007e54:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007e56:	4b82      	ldr	r3, [pc, #520]	; (8008060 <HAL_RCC_OscConfig+0x4d0>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d118      	bne.n	8007e94 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8007e62:	4b7f      	ldr	r3, [pc, #508]	; (8008060 <HAL_RCC_OscConfig+0x4d0>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	4a7e      	ldr	r2, [pc, #504]	; (8008060 <HAL_RCC_OscConfig+0x4d0>)
 8007e68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007e6e:	f7fb febb 	bl	8003be8 <HAL_GetTick>
 8007e72:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007e74:	e008      	b.n	8007e88 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007e76:	f7fb feb7 	bl	8003be8 <HAL_GetTick>
 8007e7a:	4602      	mov	r2, r0
 8007e7c:	693b      	ldr	r3, [r7, #16]
 8007e7e:	1ad3      	subs	r3, r2, r3
 8007e80:	2b64      	cmp	r3, #100	; 0x64
 8007e82:	d901      	bls.n	8007e88 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007e84:	2303      	movs	r3, #3
 8007e86:	e120      	b.n	80080ca <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007e88:	4b75      	ldr	r3, [pc, #468]	; (8008060 <HAL_RCC_OscConfig+0x4d0>)
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d0f0      	beq.n	8007e76 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	689b      	ldr	r3, [r3, #8]
 8007e98:	2b01      	cmp	r3, #1
 8007e9a:	d106      	bne.n	8007eaa <HAL_RCC_OscConfig+0x31a>
 8007e9c:	4b6f      	ldr	r3, [pc, #444]	; (800805c <HAL_RCC_OscConfig+0x4cc>)
 8007e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ea0:	4a6e      	ldr	r2, [pc, #440]	; (800805c <HAL_RCC_OscConfig+0x4cc>)
 8007ea2:	f043 0301 	orr.w	r3, r3, #1
 8007ea6:	6713      	str	r3, [r2, #112]	; 0x70
 8007ea8:	e02d      	b.n	8007f06 <HAL_RCC_OscConfig+0x376>
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	689b      	ldr	r3, [r3, #8]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d10c      	bne.n	8007ecc <HAL_RCC_OscConfig+0x33c>
 8007eb2:	4b6a      	ldr	r3, [pc, #424]	; (800805c <HAL_RCC_OscConfig+0x4cc>)
 8007eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007eb6:	4a69      	ldr	r2, [pc, #420]	; (800805c <HAL_RCC_OscConfig+0x4cc>)
 8007eb8:	f023 0301 	bic.w	r3, r3, #1
 8007ebc:	6713      	str	r3, [r2, #112]	; 0x70
 8007ebe:	4b67      	ldr	r3, [pc, #412]	; (800805c <HAL_RCC_OscConfig+0x4cc>)
 8007ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ec2:	4a66      	ldr	r2, [pc, #408]	; (800805c <HAL_RCC_OscConfig+0x4cc>)
 8007ec4:	f023 0304 	bic.w	r3, r3, #4
 8007ec8:	6713      	str	r3, [r2, #112]	; 0x70
 8007eca:	e01c      	b.n	8007f06 <HAL_RCC_OscConfig+0x376>
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	689b      	ldr	r3, [r3, #8]
 8007ed0:	2b05      	cmp	r3, #5
 8007ed2:	d10c      	bne.n	8007eee <HAL_RCC_OscConfig+0x35e>
 8007ed4:	4b61      	ldr	r3, [pc, #388]	; (800805c <HAL_RCC_OscConfig+0x4cc>)
 8007ed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ed8:	4a60      	ldr	r2, [pc, #384]	; (800805c <HAL_RCC_OscConfig+0x4cc>)
 8007eda:	f043 0304 	orr.w	r3, r3, #4
 8007ede:	6713      	str	r3, [r2, #112]	; 0x70
 8007ee0:	4b5e      	ldr	r3, [pc, #376]	; (800805c <HAL_RCC_OscConfig+0x4cc>)
 8007ee2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ee4:	4a5d      	ldr	r2, [pc, #372]	; (800805c <HAL_RCC_OscConfig+0x4cc>)
 8007ee6:	f043 0301 	orr.w	r3, r3, #1
 8007eea:	6713      	str	r3, [r2, #112]	; 0x70
 8007eec:	e00b      	b.n	8007f06 <HAL_RCC_OscConfig+0x376>
 8007eee:	4b5b      	ldr	r3, [pc, #364]	; (800805c <HAL_RCC_OscConfig+0x4cc>)
 8007ef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ef2:	4a5a      	ldr	r2, [pc, #360]	; (800805c <HAL_RCC_OscConfig+0x4cc>)
 8007ef4:	f023 0301 	bic.w	r3, r3, #1
 8007ef8:	6713      	str	r3, [r2, #112]	; 0x70
 8007efa:	4b58      	ldr	r3, [pc, #352]	; (800805c <HAL_RCC_OscConfig+0x4cc>)
 8007efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007efe:	4a57      	ldr	r2, [pc, #348]	; (800805c <HAL_RCC_OscConfig+0x4cc>)
 8007f00:	f023 0304 	bic.w	r3, r3, #4
 8007f04:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	689b      	ldr	r3, [r3, #8]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d015      	beq.n	8007f3a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f0e:	f7fb fe6b 	bl	8003be8 <HAL_GetTick>
 8007f12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007f14:	e00a      	b.n	8007f2c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007f16:	f7fb fe67 	bl	8003be8 <HAL_GetTick>
 8007f1a:	4602      	mov	r2, r0
 8007f1c:	693b      	ldr	r3, [r7, #16]
 8007f1e:	1ad3      	subs	r3, r2, r3
 8007f20:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f24:	4293      	cmp	r3, r2
 8007f26:	d901      	bls.n	8007f2c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8007f28:	2303      	movs	r3, #3
 8007f2a:	e0ce      	b.n	80080ca <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007f2c:	4b4b      	ldr	r3, [pc, #300]	; (800805c <HAL_RCC_OscConfig+0x4cc>)
 8007f2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f30:	f003 0302 	and.w	r3, r3, #2
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d0ee      	beq.n	8007f16 <HAL_RCC_OscConfig+0x386>
 8007f38:	e014      	b.n	8007f64 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f3a:	f7fb fe55 	bl	8003be8 <HAL_GetTick>
 8007f3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007f40:	e00a      	b.n	8007f58 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007f42:	f7fb fe51 	bl	8003be8 <HAL_GetTick>
 8007f46:	4602      	mov	r2, r0
 8007f48:	693b      	ldr	r3, [r7, #16]
 8007f4a:	1ad3      	subs	r3, r2, r3
 8007f4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f50:	4293      	cmp	r3, r2
 8007f52:	d901      	bls.n	8007f58 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8007f54:	2303      	movs	r3, #3
 8007f56:	e0b8      	b.n	80080ca <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007f58:	4b40      	ldr	r3, [pc, #256]	; (800805c <HAL_RCC_OscConfig+0x4cc>)
 8007f5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f5c:	f003 0302 	and.w	r3, r3, #2
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d1ee      	bne.n	8007f42 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007f64:	7dfb      	ldrb	r3, [r7, #23]
 8007f66:	2b01      	cmp	r3, #1
 8007f68:	d105      	bne.n	8007f76 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007f6a:	4b3c      	ldr	r3, [pc, #240]	; (800805c <HAL_RCC_OscConfig+0x4cc>)
 8007f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f6e:	4a3b      	ldr	r2, [pc, #236]	; (800805c <HAL_RCC_OscConfig+0x4cc>)
 8007f70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007f74:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	699b      	ldr	r3, [r3, #24]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	f000 80a4 	beq.w	80080c8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007f80:	4b36      	ldr	r3, [pc, #216]	; (800805c <HAL_RCC_OscConfig+0x4cc>)
 8007f82:	689b      	ldr	r3, [r3, #8]
 8007f84:	f003 030c 	and.w	r3, r3, #12
 8007f88:	2b08      	cmp	r3, #8
 8007f8a:	d06b      	beq.n	8008064 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	699b      	ldr	r3, [r3, #24]
 8007f90:	2b02      	cmp	r3, #2
 8007f92:	d149      	bne.n	8008028 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007f94:	4b31      	ldr	r3, [pc, #196]	; (800805c <HAL_RCC_OscConfig+0x4cc>)
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	4a30      	ldr	r2, [pc, #192]	; (800805c <HAL_RCC_OscConfig+0x4cc>)
 8007f9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007f9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fa0:	f7fb fe22 	bl	8003be8 <HAL_GetTick>
 8007fa4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007fa6:	e008      	b.n	8007fba <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007fa8:	f7fb fe1e 	bl	8003be8 <HAL_GetTick>
 8007fac:	4602      	mov	r2, r0
 8007fae:	693b      	ldr	r3, [r7, #16]
 8007fb0:	1ad3      	subs	r3, r2, r3
 8007fb2:	2b02      	cmp	r3, #2
 8007fb4:	d901      	bls.n	8007fba <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8007fb6:	2303      	movs	r3, #3
 8007fb8:	e087      	b.n	80080ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007fba:	4b28      	ldr	r3, [pc, #160]	; (800805c <HAL_RCC_OscConfig+0x4cc>)
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d1f0      	bne.n	8007fa8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	69da      	ldr	r2, [r3, #28]
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	6a1b      	ldr	r3, [r3, #32]
 8007fce:	431a      	orrs	r2, r3
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fd4:	019b      	lsls	r3, r3, #6
 8007fd6:	431a      	orrs	r2, r3
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fdc:	085b      	lsrs	r3, r3, #1
 8007fde:	3b01      	subs	r3, #1
 8007fe0:	041b      	lsls	r3, r3, #16
 8007fe2:	431a      	orrs	r2, r3
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fe8:	061b      	lsls	r3, r3, #24
 8007fea:	4313      	orrs	r3, r2
 8007fec:	4a1b      	ldr	r2, [pc, #108]	; (800805c <HAL_RCC_OscConfig+0x4cc>)
 8007fee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007ff2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007ff4:	4b19      	ldr	r3, [pc, #100]	; (800805c <HAL_RCC_OscConfig+0x4cc>)
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	4a18      	ldr	r2, [pc, #96]	; (800805c <HAL_RCC_OscConfig+0x4cc>)
 8007ffa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007ffe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008000:	f7fb fdf2 	bl	8003be8 <HAL_GetTick>
 8008004:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008006:	e008      	b.n	800801a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008008:	f7fb fdee 	bl	8003be8 <HAL_GetTick>
 800800c:	4602      	mov	r2, r0
 800800e:	693b      	ldr	r3, [r7, #16]
 8008010:	1ad3      	subs	r3, r2, r3
 8008012:	2b02      	cmp	r3, #2
 8008014:	d901      	bls.n	800801a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8008016:	2303      	movs	r3, #3
 8008018:	e057      	b.n	80080ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800801a:	4b10      	ldr	r3, [pc, #64]	; (800805c <HAL_RCC_OscConfig+0x4cc>)
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008022:	2b00      	cmp	r3, #0
 8008024:	d0f0      	beq.n	8008008 <HAL_RCC_OscConfig+0x478>
 8008026:	e04f      	b.n	80080c8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008028:	4b0c      	ldr	r3, [pc, #48]	; (800805c <HAL_RCC_OscConfig+0x4cc>)
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	4a0b      	ldr	r2, [pc, #44]	; (800805c <HAL_RCC_OscConfig+0x4cc>)
 800802e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008032:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008034:	f7fb fdd8 	bl	8003be8 <HAL_GetTick>
 8008038:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800803a:	e008      	b.n	800804e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800803c:	f7fb fdd4 	bl	8003be8 <HAL_GetTick>
 8008040:	4602      	mov	r2, r0
 8008042:	693b      	ldr	r3, [r7, #16]
 8008044:	1ad3      	subs	r3, r2, r3
 8008046:	2b02      	cmp	r3, #2
 8008048:	d901      	bls.n	800804e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800804a:	2303      	movs	r3, #3
 800804c:	e03d      	b.n	80080ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800804e:	4b03      	ldr	r3, [pc, #12]	; (800805c <HAL_RCC_OscConfig+0x4cc>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008056:	2b00      	cmp	r3, #0
 8008058:	d1f0      	bne.n	800803c <HAL_RCC_OscConfig+0x4ac>
 800805a:	e035      	b.n	80080c8 <HAL_RCC_OscConfig+0x538>
 800805c:	40023800 	.word	0x40023800
 8008060:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8008064:	4b1b      	ldr	r3, [pc, #108]	; (80080d4 <HAL_RCC_OscConfig+0x544>)
 8008066:	685b      	ldr	r3, [r3, #4]
 8008068:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	699b      	ldr	r3, [r3, #24]
 800806e:	2b01      	cmp	r3, #1
 8008070:	d028      	beq.n	80080c4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800807c:	429a      	cmp	r2, r3
 800807e:	d121      	bne.n	80080c4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800808a:	429a      	cmp	r2, r3
 800808c:	d11a      	bne.n	80080c4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800808e:	68fa      	ldr	r2, [r7, #12]
 8008090:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008094:	4013      	ands	r3, r2
 8008096:	687a      	ldr	r2, [r7, #4]
 8008098:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800809a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800809c:	4293      	cmp	r3, r2
 800809e:	d111      	bne.n	80080c4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080aa:	085b      	lsrs	r3, r3, #1
 80080ac:	3b01      	subs	r3, #1
 80080ae:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80080b0:	429a      	cmp	r2, r3
 80080b2:	d107      	bne.n	80080c4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080be:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80080c0:	429a      	cmp	r2, r3
 80080c2:	d001      	beq.n	80080c8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80080c4:	2301      	movs	r3, #1
 80080c6:	e000      	b.n	80080ca <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80080c8:	2300      	movs	r3, #0
}
 80080ca:	4618      	mov	r0, r3
 80080cc:	3718      	adds	r7, #24
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bd80      	pop	{r7, pc}
 80080d2:	bf00      	nop
 80080d4:	40023800 	.word	0x40023800

080080d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b084      	sub	sp, #16
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
 80080e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80080e2:	2300      	movs	r3, #0
 80080e4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d101      	bne.n	80080f0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80080ec:	2301      	movs	r3, #1
 80080ee:	e0d0      	b.n	8008292 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80080f0:	4b6a      	ldr	r3, [pc, #424]	; (800829c <HAL_RCC_ClockConfig+0x1c4>)
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f003 030f 	and.w	r3, r3, #15
 80080f8:	683a      	ldr	r2, [r7, #0]
 80080fa:	429a      	cmp	r2, r3
 80080fc:	d910      	bls.n	8008120 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80080fe:	4b67      	ldr	r3, [pc, #412]	; (800829c <HAL_RCC_ClockConfig+0x1c4>)
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f023 020f 	bic.w	r2, r3, #15
 8008106:	4965      	ldr	r1, [pc, #404]	; (800829c <HAL_RCC_ClockConfig+0x1c4>)
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	4313      	orrs	r3, r2
 800810c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800810e:	4b63      	ldr	r3, [pc, #396]	; (800829c <HAL_RCC_ClockConfig+0x1c4>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f003 030f 	and.w	r3, r3, #15
 8008116:	683a      	ldr	r2, [r7, #0]
 8008118:	429a      	cmp	r2, r3
 800811a:	d001      	beq.n	8008120 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800811c:	2301      	movs	r3, #1
 800811e:	e0b8      	b.n	8008292 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f003 0302 	and.w	r3, r3, #2
 8008128:	2b00      	cmp	r3, #0
 800812a:	d020      	beq.n	800816e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f003 0304 	and.w	r3, r3, #4
 8008134:	2b00      	cmp	r3, #0
 8008136:	d005      	beq.n	8008144 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008138:	4b59      	ldr	r3, [pc, #356]	; (80082a0 <HAL_RCC_ClockConfig+0x1c8>)
 800813a:	689b      	ldr	r3, [r3, #8]
 800813c:	4a58      	ldr	r2, [pc, #352]	; (80082a0 <HAL_RCC_ClockConfig+0x1c8>)
 800813e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008142:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	f003 0308 	and.w	r3, r3, #8
 800814c:	2b00      	cmp	r3, #0
 800814e:	d005      	beq.n	800815c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008150:	4b53      	ldr	r3, [pc, #332]	; (80082a0 <HAL_RCC_ClockConfig+0x1c8>)
 8008152:	689b      	ldr	r3, [r3, #8]
 8008154:	4a52      	ldr	r2, [pc, #328]	; (80082a0 <HAL_RCC_ClockConfig+0x1c8>)
 8008156:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800815a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800815c:	4b50      	ldr	r3, [pc, #320]	; (80082a0 <HAL_RCC_ClockConfig+0x1c8>)
 800815e:	689b      	ldr	r3, [r3, #8]
 8008160:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	689b      	ldr	r3, [r3, #8]
 8008168:	494d      	ldr	r1, [pc, #308]	; (80082a0 <HAL_RCC_ClockConfig+0x1c8>)
 800816a:	4313      	orrs	r3, r2
 800816c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f003 0301 	and.w	r3, r3, #1
 8008176:	2b00      	cmp	r3, #0
 8008178:	d040      	beq.n	80081fc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	685b      	ldr	r3, [r3, #4]
 800817e:	2b01      	cmp	r3, #1
 8008180:	d107      	bne.n	8008192 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008182:	4b47      	ldr	r3, [pc, #284]	; (80082a0 <HAL_RCC_ClockConfig+0x1c8>)
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800818a:	2b00      	cmp	r3, #0
 800818c:	d115      	bne.n	80081ba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800818e:	2301      	movs	r3, #1
 8008190:	e07f      	b.n	8008292 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	685b      	ldr	r3, [r3, #4]
 8008196:	2b02      	cmp	r3, #2
 8008198:	d107      	bne.n	80081aa <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800819a:	4b41      	ldr	r3, [pc, #260]	; (80082a0 <HAL_RCC_ClockConfig+0x1c8>)
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d109      	bne.n	80081ba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80081a6:	2301      	movs	r3, #1
 80081a8:	e073      	b.n	8008292 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80081aa:	4b3d      	ldr	r3, [pc, #244]	; (80082a0 <HAL_RCC_ClockConfig+0x1c8>)
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f003 0302 	and.w	r3, r3, #2
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d101      	bne.n	80081ba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80081b6:	2301      	movs	r3, #1
 80081b8:	e06b      	b.n	8008292 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80081ba:	4b39      	ldr	r3, [pc, #228]	; (80082a0 <HAL_RCC_ClockConfig+0x1c8>)
 80081bc:	689b      	ldr	r3, [r3, #8]
 80081be:	f023 0203 	bic.w	r2, r3, #3
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	685b      	ldr	r3, [r3, #4]
 80081c6:	4936      	ldr	r1, [pc, #216]	; (80082a0 <HAL_RCC_ClockConfig+0x1c8>)
 80081c8:	4313      	orrs	r3, r2
 80081ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80081cc:	f7fb fd0c 	bl	8003be8 <HAL_GetTick>
 80081d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80081d2:	e00a      	b.n	80081ea <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80081d4:	f7fb fd08 	bl	8003be8 <HAL_GetTick>
 80081d8:	4602      	mov	r2, r0
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	1ad3      	subs	r3, r2, r3
 80081de:	f241 3288 	movw	r2, #5000	; 0x1388
 80081e2:	4293      	cmp	r3, r2
 80081e4:	d901      	bls.n	80081ea <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80081e6:	2303      	movs	r3, #3
 80081e8:	e053      	b.n	8008292 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80081ea:	4b2d      	ldr	r3, [pc, #180]	; (80082a0 <HAL_RCC_ClockConfig+0x1c8>)
 80081ec:	689b      	ldr	r3, [r3, #8]
 80081ee:	f003 020c 	and.w	r2, r3, #12
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	685b      	ldr	r3, [r3, #4]
 80081f6:	009b      	lsls	r3, r3, #2
 80081f8:	429a      	cmp	r2, r3
 80081fa:	d1eb      	bne.n	80081d4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80081fc:	4b27      	ldr	r3, [pc, #156]	; (800829c <HAL_RCC_ClockConfig+0x1c4>)
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	f003 030f 	and.w	r3, r3, #15
 8008204:	683a      	ldr	r2, [r7, #0]
 8008206:	429a      	cmp	r2, r3
 8008208:	d210      	bcs.n	800822c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800820a:	4b24      	ldr	r3, [pc, #144]	; (800829c <HAL_RCC_ClockConfig+0x1c4>)
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f023 020f 	bic.w	r2, r3, #15
 8008212:	4922      	ldr	r1, [pc, #136]	; (800829c <HAL_RCC_ClockConfig+0x1c4>)
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	4313      	orrs	r3, r2
 8008218:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800821a:	4b20      	ldr	r3, [pc, #128]	; (800829c <HAL_RCC_ClockConfig+0x1c4>)
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f003 030f 	and.w	r3, r3, #15
 8008222:	683a      	ldr	r2, [r7, #0]
 8008224:	429a      	cmp	r2, r3
 8008226:	d001      	beq.n	800822c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8008228:	2301      	movs	r3, #1
 800822a:	e032      	b.n	8008292 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f003 0304 	and.w	r3, r3, #4
 8008234:	2b00      	cmp	r3, #0
 8008236:	d008      	beq.n	800824a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008238:	4b19      	ldr	r3, [pc, #100]	; (80082a0 <HAL_RCC_ClockConfig+0x1c8>)
 800823a:	689b      	ldr	r3, [r3, #8]
 800823c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	68db      	ldr	r3, [r3, #12]
 8008244:	4916      	ldr	r1, [pc, #88]	; (80082a0 <HAL_RCC_ClockConfig+0x1c8>)
 8008246:	4313      	orrs	r3, r2
 8008248:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f003 0308 	and.w	r3, r3, #8
 8008252:	2b00      	cmp	r3, #0
 8008254:	d009      	beq.n	800826a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008256:	4b12      	ldr	r3, [pc, #72]	; (80082a0 <HAL_RCC_ClockConfig+0x1c8>)
 8008258:	689b      	ldr	r3, [r3, #8]
 800825a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	691b      	ldr	r3, [r3, #16]
 8008262:	00db      	lsls	r3, r3, #3
 8008264:	490e      	ldr	r1, [pc, #56]	; (80082a0 <HAL_RCC_ClockConfig+0x1c8>)
 8008266:	4313      	orrs	r3, r2
 8008268:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800826a:	f000 f821 	bl	80082b0 <HAL_RCC_GetSysClockFreq>
 800826e:	4602      	mov	r2, r0
 8008270:	4b0b      	ldr	r3, [pc, #44]	; (80082a0 <HAL_RCC_ClockConfig+0x1c8>)
 8008272:	689b      	ldr	r3, [r3, #8]
 8008274:	091b      	lsrs	r3, r3, #4
 8008276:	f003 030f 	and.w	r3, r3, #15
 800827a:	490a      	ldr	r1, [pc, #40]	; (80082a4 <HAL_RCC_ClockConfig+0x1cc>)
 800827c:	5ccb      	ldrb	r3, [r1, r3]
 800827e:	fa22 f303 	lsr.w	r3, r2, r3
 8008282:	4a09      	ldr	r2, [pc, #36]	; (80082a8 <HAL_RCC_ClockConfig+0x1d0>)
 8008284:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8008286:	4b09      	ldr	r3, [pc, #36]	; (80082ac <HAL_RCC_ClockConfig+0x1d4>)
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	4618      	mov	r0, r3
 800828c:	f7fb fc68 	bl	8003b60 <HAL_InitTick>

  return HAL_OK;
 8008290:	2300      	movs	r3, #0
}
 8008292:	4618      	mov	r0, r3
 8008294:	3710      	adds	r7, #16
 8008296:	46bd      	mov	sp, r7
 8008298:	bd80      	pop	{r7, pc}
 800829a:	bf00      	nop
 800829c:	40023c00 	.word	0x40023c00
 80082a0:	40023800 	.word	0x40023800
 80082a4:	0801b0c0 	.word	0x0801b0c0
 80082a8:	20000004 	.word	0x20000004
 80082ac:	20000044 	.word	0x20000044

080082b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80082b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80082b4:	b090      	sub	sp, #64	; 0x40
 80082b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80082b8:	2300      	movs	r3, #0
 80082ba:	637b      	str	r3, [r7, #52]	; 0x34
 80082bc:	2300      	movs	r3, #0
 80082be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80082c0:	2300      	movs	r3, #0
 80082c2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 80082c4:	2300      	movs	r3, #0
 80082c6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80082c8:	4b59      	ldr	r3, [pc, #356]	; (8008430 <HAL_RCC_GetSysClockFreq+0x180>)
 80082ca:	689b      	ldr	r3, [r3, #8]
 80082cc:	f003 030c 	and.w	r3, r3, #12
 80082d0:	2b08      	cmp	r3, #8
 80082d2:	d00d      	beq.n	80082f0 <HAL_RCC_GetSysClockFreq+0x40>
 80082d4:	2b08      	cmp	r3, #8
 80082d6:	f200 80a1 	bhi.w	800841c <HAL_RCC_GetSysClockFreq+0x16c>
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d002      	beq.n	80082e4 <HAL_RCC_GetSysClockFreq+0x34>
 80082de:	2b04      	cmp	r3, #4
 80082e0:	d003      	beq.n	80082ea <HAL_RCC_GetSysClockFreq+0x3a>
 80082e2:	e09b      	b.n	800841c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80082e4:	4b53      	ldr	r3, [pc, #332]	; (8008434 <HAL_RCC_GetSysClockFreq+0x184>)
 80082e6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80082e8:	e09b      	b.n	8008422 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80082ea:	4b53      	ldr	r3, [pc, #332]	; (8008438 <HAL_RCC_GetSysClockFreq+0x188>)
 80082ec:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80082ee:	e098      	b.n	8008422 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80082f0:	4b4f      	ldr	r3, [pc, #316]	; (8008430 <HAL_RCC_GetSysClockFreq+0x180>)
 80082f2:	685b      	ldr	r3, [r3, #4]
 80082f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80082f8:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80082fa:	4b4d      	ldr	r3, [pc, #308]	; (8008430 <HAL_RCC_GetSysClockFreq+0x180>)
 80082fc:	685b      	ldr	r3, [r3, #4]
 80082fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008302:	2b00      	cmp	r3, #0
 8008304:	d028      	beq.n	8008358 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008306:	4b4a      	ldr	r3, [pc, #296]	; (8008430 <HAL_RCC_GetSysClockFreq+0x180>)
 8008308:	685b      	ldr	r3, [r3, #4]
 800830a:	099b      	lsrs	r3, r3, #6
 800830c:	2200      	movs	r2, #0
 800830e:	623b      	str	r3, [r7, #32]
 8008310:	627a      	str	r2, [r7, #36]	; 0x24
 8008312:	6a3b      	ldr	r3, [r7, #32]
 8008314:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8008318:	2100      	movs	r1, #0
 800831a:	4b47      	ldr	r3, [pc, #284]	; (8008438 <HAL_RCC_GetSysClockFreq+0x188>)
 800831c:	fb03 f201 	mul.w	r2, r3, r1
 8008320:	2300      	movs	r3, #0
 8008322:	fb00 f303 	mul.w	r3, r0, r3
 8008326:	4413      	add	r3, r2
 8008328:	4a43      	ldr	r2, [pc, #268]	; (8008438 <HAL_RCC_GetSysClockFreq+0x188>)
 800832a:	fba0 1202 	umull	r1, r2, r0, r2
 800832e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008330:	460a      	mov	r2, r1
 8008332:	62ba      	str	r2, [r7, #40]	; 0x28
 8008334:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008336:	4413      	add	r3, r2
 8008338:	62fb      	str	r3, [r7, #44]	; 0x2c
 800833a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800833c:	2200      	movs	r2, #0
 800833e:	61bb      	str	r3, [r7, #24]
 8008340:	61fa      	str	r2, [r7, #28]
 8008342:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008346:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800834a:	f7f7 ffb9 	bl	80002c0 <__aeabi_uldivmod>
 800834e:	4602      	mov	r2, r0
 8008350:	460b      	mov	r3, r1
 8008352:	4613      	mov	r3, r2
 8008354:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008356:	e053      	b.n	8008400 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008358:	4b35      	ldr	r3, [pc, #212]	; (8008430 <HAL_RCC_GetSysClockFreq+0x180>)
 800835a:	685b      	ldr	r3, [r3, #4]
 800835c:	099b      	lsrs	r3, r3, #6
 800835e:	2200      	movs	r2, #0
 8008360:	613b      	str	r3, [r7, #16]
 8008362:	617a      	str	r2, [r7, #20]
 8008364:	693b      	ldr	r3, [r7, #16]
 8008366:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800836a:	f04f 0b00 	mov.w	fp, #0
 800836e:	4652      	mov	r2, sl
 8008370:	465b      	mov	r3, fp
 8008372:	f04f 0000 	mov.w	r0, #0
 8008376:	f04f 0100 	mov.w	r1, #0
 800837a:	0159      	lsls	r1, r3, #5
 800837c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008380:	0150      	lsls	r0, r2, #5
 8008382:	4602      	mov	r2, r0
 8008384:	460b      	mov	r3, r1
 8008386:	ebb2 080a 	subs.w	r8, r2, sl
 800838a:	eb63 090b 	sbc.w	r9, r3, fp
 800838e:	f04f 0200 	mov.w	r2, #0
 8008392:	f04f 0300 	mov.w	r3, #0
 8008396:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800839a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800839e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80083a2:	ebb2 0408 	subs.w	r4, r2, r8
 80083a6:	eb63 0509 	sbc.w	r5, r3, r9
 80083aa:	f04f 0200 	mov.w	r2, #0
 80083ae:	f04f 0300 	mov.w	r3, #0
 80083b2:	00eb      	lsls	r3, r5, #3
 80083b4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80083b8:	00e2      	lsls	r2, r4, #3
 80083ba:	4614      	mov	r4, r2
 80083bc:	461d      	mov	r5, r3
 80083be:	eb14 030a 	adds.w	r3, r4, sl
 80083c2:	603b      	str	r3, [r7, #0]
 80083c4:	eb45 030b 	adc.w	r3, r5, fp
 80083c8:	607b      	str	r3, [r7, #4]
 80083ca:	f04f 0200 	mov.w	r2, #0
 80083ce:	f04f 0300 	mov.w	r3, #0
 80083d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80083d6:	4629      	mov	r1, r5
 80083d8:	028b      	lsls	r3, r1, #10
 80083da:	4621      	mov	r1, r4
 80083dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80083e0:	4621      	mov	r1, r4
 80083e2:	028a      	lsls	r2, r1, #10
 80083e4:	4610      	mov	r0, r2
 80083e6:	4619      	mov	r1, r3
 80083e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083ea:	2200      	movs	r2, #0
 80083ec:	60bb      	str	r3, [r7, #8]
 80083ee:	60fa      	str	r2, [r7, #12]
 80083f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80083f4:	f7f7 ff64 	bl	80002c0 <__aeabi_uldivmod>
 80083f8:	4602      	mov	r2, r0
 80083fa:	460b      	mov	r3, r1
 80083fc:	4613      	mov	r3, r2
 80083fe:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8008400:	4b0b      	ldr	r3, [pc, #44]	; (8008430 <HAL_RCC_GetSysClockFreq+0x180>)
 8008402:	685b      	ldr	r3, [r3, #4]
 8008404:	0c1b      	lsrs	r3, r3, #16
 8008406:	f003 0303 	and.w	r3, r3, #3
 800840a:	3301      	adds	r3, #1
 800840c:	005b      	lsls	r3, r3, #1
 800840e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8008410:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008414:	fbb2 f3f3 	udiv	r3, r2, r3
 8008418:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800841a:	e002      	b.n	8008422 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800841c:	4b05      	ldr	r3, [pc, #20]	; (8008434 <HAL_RCC_GetSysClockFreq+0x184>)
 800841e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008420:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8008424:	4618      	mov	r0, r3
 8008426:	3740      	adds	r7, #64	; 0x40
 8008428:	46bd      	mov	sp, r7
 800842a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800842e:	bf00      	nop
 8008430:	40023800 	.word	0x40023800
 8008434:	00f42400 	.word	0x00f42400
 8008438:	017d7840 	.word	0x017d7840

0800843c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800843c:	b480      	push	{r7}
 800843e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008440:	4b03      	ldr	r3, [pc, #12]	; (8008450 <HAL_RCC_GetHCLKFreq+0x14>)
 8008442:	681b      	ldr	r3, [r3, #0]
}
 8008444:	4618      	mov	r0, r3
 8008446:	46bd      	mov	sp, r7
 8008448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844c:	4770      	bx	lr
 800844e:	bf00      	nop
 8008450:	20000004 	.word	0x20000004

08008454 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008454:	b580      	push	{r7, lr}
 8008456:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008458:	f7ff fff0 	bl	800843c <HAL_RCC_GetHCLKFreq>
 800845c:	4602      	mov	r2, r0
 800845e:	4b05      	ldr	r3, [pc, #20]	; (8008474 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008460:	689b      	ldr	r3, [r3, #8]
 8008462:	0a9b      	lsrs	r3, r3, #10
 8008464:	f003 0307 	and.w	r3, r3, #7
 8008468:	4903      	ldr	r1, [pc, #12]	; (8008478 <HAL_RCC_GetPCLK1Freq+0x24>)
 800846a:	5ccb      	ldrb	r3, [r1, r3]
 800846c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008470:	4618      	mov	r0, r3
 8008472:	bd80      	pop	{r7, pc}
 8008474:	40023800 	.word	0x40023800
 8008478:	0801b0d0 	.word	0x0801b0d0

0800847c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800847c:	b580      	push	{r7, lr}
 800847e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008480:	f7ff ffdc 	bl	800843c <HAL_RCC_GetHCLKFreq>
 8008484:	4602      	mov	r2, r0
 8008486:	4b05      	ldr	r3, [pc, #20]	; (800849c <HAL_RCC_GetPCLK2Freq+0x20>)
 8008488:	689b      	ldr	r3, [r3, #8]
 800848a:	0b5b      	lsrs	r3, r3, #13
 800848c:	f003 0307 	and.w	r3, r3, #7
 8008490:	4903      	ldr	r1, [pc, #12]	; (80084a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008492:	5ccb      	ldrb	r3, [r1, r3]
 8008494:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008498:	4618      	mov	r0, r3
 800849a:	bd80      	pop	{r7, pc}
 800849c:	40023800 	.word	0x40023800
 80084a0:	0801b0d0 	.word	0x0801b0d0

080084a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b088      	sub	sp, #32
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80084ac:	2300      	movs	r3, #0
 80084ae:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80084b0:	2300      	movs	r3, #0
 80084b2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80084b4:	2300      	movs	r3, #0
 80084b6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80084b8:	2300      	movs	r3, #0
 80084ba:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80084bc:	2300      	movs	r3, #0
 80084be:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f003 0301 	and.w	r3, r3, #1
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d012      	beq.n	80084f2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80084cc:	4b69      	ldr	r3, [pc, #420]	; (8008674 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80084ce:	689b      	ldr	r3, [r3, #8]
 80084d0:	4a68      	ldr	r2, [pc, #416]	; (8008674 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80084d2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80084d6:	6093      	str	r3, [r2, #8]
 80084d8:	4b66      	ldr	r3, [pc, #408]	; (8008674 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80084da:	689a      	ldr	r2, [r3, #8]
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084e0:	4964      	ldr	r1, [pc, #400]	; (8008674 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80084e2:	4313      	orrs	r3, r2
 80084e4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d101      	bne.n	80084f2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80084ee:	2301      	movs	r3, #1
 80084f0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d017      	beq.n	800852e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80084fe:	4b5d      	ldr	r3, [pc, #372]	; (8008674 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008500:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008504:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800850c:	4959      	ldr	r1, [pc, #356]	; (8008674 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800850e:	4313      	orrs	r3, r2
 8008510:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008518:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800851c:	d101      	bne.n	8008522 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800851e:	2301      	movs	r3, #1
 8008520:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008526:	2b00      	cmp	r3, #0
 8008528:	d101      	bne.n	800852e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800852a:	2301      	movs	r3, #1
 800852c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008536:	2b00      	cmp	r3, #0
 8008538:	d017      	beq.n	800856a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800853a:	4b4e      	ldr	r3, [pc, #312]	; (8008674 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800853c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008540:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008548:	494a      	ldr	r1, [pc, #296]	; (8008674 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800854a:	4313      	orrs	r3, r2
 800854c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008554:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008558:	d101      	bne.n	800855e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800855a:	2301      	movs	r3, #1
 800855c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008562:	2b00      	cmp	r3, #0
 8008564:	d101      	bne.n	800856a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8008566:	2301      	movs	r3, #1
 8008568:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008572:	2b00      	cmp	r3, #0
 8008574:	d001      	beq.n	800857a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8008576:	2301      	movs	r3, #1
 8008578:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f003 0320 	and.w	r3, r3, #32
 8008582:	2b00      	cmp	r3, #0
 8008584:	f000 808b 	beq.w	800869e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008588:	4b3a      	ldr	r3, [pc, #232]	; (8008674 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800858a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800858c:	4a39      	ldr	r2, [pc, #228]	; (8008674 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800858e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008592:	6413      	str	r3, [r2, #64]	; 0x40
 8008594:	4b37      	ldr	r3, [pc, #220]	; (8008674 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008598:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800859c:	60bb      	str	r3, [r7, #8]
 800859e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80085a0:	4b35      	ldr	r3, [pc, #212]	; (8008678 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	4a34      	ldr	r2, [pc, #208]	; (8008678 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80085a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80085aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80085ac:	f7fb fb1c 	bl	8003be8 <HAL_GetTick>
 80085b0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80085b2:	e008      	b.n	80085c6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80085b4:	f7fb fb18 	bl	8003be8 <HAL_GetTick>
 80085b8:	4602      	mov	r2, r0
 80085ba:	697b      	ldr	r3, [r7, #20]
 80085bc:	1ad3      	subs	r3, r2, r3
 80085be:	2b64      	cmp	r3, #100	; 0x64
 80085c0:	d901      	bls.n	80085c6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80085c2:	2303      	movs	r3, #3
 80085c4:	e357      	b.n	8008c76 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80085c6:	4b2c      	ldr	r3, [pc, #176]	; (8008678 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d0f0      	beq.n	80085b4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80085d2:	4b28      	ldr	r3, [pc, #160]	; (8008674 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80085d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80085da:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80085dc:	693b      	ldr	r3, [r7, #16]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d035      	beq.n	800864e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80085ea:	693a      	ldr	r2, [r7, #16]
 80085ec:	429a      	cmp	r2, r3
 80085ee:	d02e      	beq.n	800864e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80085f0:	4b20      	ldr	r3, [pc, #128]	; (8008674 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80085f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80085f8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80085fa:	4b1e      	ldr	r3, [pc, #120]	; (8008674 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80085fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085fe:	4a1d      	ldr	r2, [pc, #116]	; (8008674 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008600:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008604:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008606:	4b1b      	ldr	r3, [pc, #108]	; (8008674 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800860a:	4a1a      	ldr	r2, [pc, #104]	; (8008674 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800860c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008610:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8008612:	4a18      	ldr	r2, [pc, #96]	; (8008674 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008614:	693b      	ldr	r3, [r7, #16]
 8008616:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008618:	4b16      	ldr	r3, [pc, #88]	; (8008674 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800861a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800861c:	f003 0301 	and.w	r3, r3, #1
 8008620:	2b01      	cmp	r3, #1
 8008622:	d114      	bne.n	800864e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008624:	f7fb fae0 	bl	8003be8 <HAL_GetTick>
 8008628:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800862a:	e00a      	b.n	8008642 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800862c:	f7fb fadc 	bl	8003be8 <HAL_GetTick>
 8008630:	4602      	mov	r2, r0
 8008632:	697b      	ldr	r3, [r7, #20]
 8008634:	1ad3      	subs	r3, r2, r3
 8008636:	f241 3288 	movw	r2, #5000	; 0x1388
 800863a:	4293      	cmp	r3, r2
 800863c:	d901      	bls.n	8008642 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800863e:	2303      	movs	r3, #3
 8008640:	e319      	b.n	8008c76 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008642:	4b0c      	ldr	r3, [pc, #48]	; (8008674 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008646:	f003 0302 	and.w	r3, r3, #2
 800864a:	2b00      	cmp	r3, #0
 800864c:	d0ee      	beq.n	800862c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008652:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008656:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800865a:	d111      	bne.n	8008680 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800865c:	4b05      	ldr	r3, [pc, #20]	; (8008674 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800865e:	689b      	ldr	r3, [r3, #8]
 8008660:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008668:	4b04      	ldr	r3, [pc, #16]	; (800867c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800866a:	400b      	ands	r3, r1
 800866c:	4901      	ldr	r1, [pc, #4]	; (8008674 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800866e:	4313      	orrs	r3, r2
 8008670:	608b      	str	r3, [r1, #8]
 8008672:	e00b      	b.n	800868c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8008674:	40023800 	.word	0x40023800
 8008678:	40007000 	.word	0x40007000
 800867c:	0ffffcff 	.word	0x0ffffcff
 8008680:	4baa      	ldr	r3, [pc, #680]	; (800892c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008682:	689b      	ldr	r3, [r3, #8]
 8008684:	4aa9      	ldr	r2, [pc, #676]	; (800892c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008686:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800868a:	6093      	str	r3, [r2, #8]
 800868c:	4ba7      	ldr	r3, [pc, #668]	; (800892c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800868e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008694:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008698:	49a4      	ldr	r1, [pc, #656]	; (800892c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800869a:	4313      	orrs	r3, r2
 800869c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	f003 0310 	and.w	r3, r3, #16
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d010      	beq.n	80086cc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80086aa:	4ba0      	ldr	r3, [pc, #640]	; (800892c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80086ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80086b0:	4a9e      	ldr	r2, [pc, #632]	; (800892c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80086b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80086b6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80086ba:	4b9c      	ldr	r3, [pc, #624]	; (800892c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80086bc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086c4:	4999      	ldr	r1, [pc, #612]	; (800892c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80086c6:	4313      	orrs	r3, r2
 80086c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d00a      	beq.n	80086ee <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80086d8:	4b94      	ldr	r3, [pc, #592]	; (800892c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80086da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086de:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80086e6:	4991      	ldr	r1, [pc, #580]	; (800892c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80086e8:	4313      	orrs	r3, r2
 80086ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d00a      	beq.n	8008710 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80086fa:	4b8c      	ldr	r3, [pc, #560]	; (800892c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80086fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008700:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008708:	4988      	ldr	r1, [pc, #544]	; (800892c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800870a:	4313      	orrs	r3, r2
 800870c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008718:	2b00      	cmp	r3, #0
 800871a:	d00a      	beq.n	8008732 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800871c:	4b83      	ldr	r3, [pc, #524]	; (800892c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800871e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008722:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800872a:	4980      	ldr	r1, [pc, #512]	; (800892c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800872c:	4313      	orrs	r3, r2
 800872e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800873a:	2b00      	cmp	r3, #0
 800873c:	d00a      	beq.n	8008754 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800873e:	4b7b      	ldr	r3, [pc, #492]	; (800892c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008740:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008744:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800874c:	4977      	ldr	r1, [pc, #476]	; (800892c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800874e:	4313      	orrs	r3, r2
 8008750:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800875c:	2b00      	cmp	r3, #0
 800875e:	d00a      	beq.n	8008776 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008760:	4b72      	ldr	r3, [pc, #456]	; (800892c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008762:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008766:	f023 0203 	bic.w	r2, r3, #3
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800876e:	496f      	ldr	r1, [pc, #444]	; (800892c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008770:	4313      	orrs	r3, r2
 8008772:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800877e:	2b00      	cmp	r3, #0
 8008780:	d00a      	beq.n	8008798 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008782:	4b6a      	ldr	r3, [pc, #424]	; (800892c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008784:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008788:	f023 020c 	bic.w	r2, r3, #12
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008790:	4966      	ldr	r1, [pc, #408]	; (800892c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008792:	4313      	orrs	r3, r2
 8008794:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d00a      	beq.n	80087ba <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80087a4:	4b61      	ldr	r3, [pc, #388]	; (800892c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80087a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087aa:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087b2:	495e      	ldr	r1, [pc, #376]	; (800892c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80087b4:	4313      	orrs	r3, r2
 80087b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d00a      	beq.n	80087dc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80087c6:	4b59      	ldr	r3, [pc, #356]	; (800892c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80087c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087cc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087d4:	4955      	ldr	r1, [pc, #340]	; (800892c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80087d6:	4313      	orrs	r3, r2
 80087d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d00a      	beq.n	80087fe <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80087e8:	4b50      	ldr	r3, [pc, #320]	; (800892c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80087ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087ee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087f6:	494d      	ldr	r1, [pc, #308]	; (800892c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80087f8:	4313      	orrs	r3, r2
 80087fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008806:	2b00      	cmp	r3, #0
 8008808:	d00a      	beq.n	8008820 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800880a:	4b48      	ldr	r3, [pc, #288]	; (800892c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800880c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008810:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008818:	4944      	ldr	r1, [pc, #272]	; (800892c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800881a:	4313      	orrs	r3, r2
 800881c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008828:	2b00      	cmp	r3, #0
 800882a:	d00a      	beq.n	8008842 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800882c:	4b3f      	ldr	r3, [pc, #252]	; (800892c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800882e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008832:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800883a:	493c      	ldr	r1, [pc, #240]	; (800892c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800883c:	4313      	orrs	r3, r2
 800883e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800884a:	2b00      	cmp	r3, #0
 800884c:	d00a      	beq.n	8008864 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800884e:	4b37      	ldr	r3, [pc, #220]	; (800892c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008850:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008854:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800885c:	4933      	ldr	r1, [pc, #204]	; (800892c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800885e:	4313      	orrs	r3, r2
 8008860:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800886c:	2b00      	cmp	r3, #0
 800886e:	d00a      	beq.n	8008886 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008870:	4b2e      	ldr	r3, [pc, #184]	; (800892c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008872:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008876:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800887e:	492b      	ldr	r1, [pc, #172]	; (800892c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008880:	4313      	orrs	r3, r2
 8008882:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800888e:	2b00      	cmp	r3, #0
 8008890:	d011      	beq.n	80088b6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8008892:	4b26      	ldr	r3, [pc, #152]	; (800892c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008894:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008898:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80088a0:	4922      	ldr	r1, [pc, #136]	; (800892c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80088a2:	4313      	orrs	r3, r2
 80088a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80088ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80088b0:	d101      	bne.n	80088b6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80088b2:	2301      	movs	r3, #1
 80088b4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	f003 0308 	and.w	r3, r3, #8
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d001      	beq.n	80088c6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80088c2:	2301      	movs	r3, #1
 80088c4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d00a      	beq.n	80088e8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80088d2:	4b16      	ldr	r3, [pc, #88]	; (800892c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80088d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088d8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80088e0:	4912      	ldr	r1, [pc, #72]	; (800892c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80088e2:	4313      	orrs	r3, r2
 80088e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d00b      	beq.n	800890c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80088f4:	4b0d      	ldr	r3, [pc, #52]	; (800892c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80088f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088fa:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008904:	4909      	ldr	r1, [pc, #36]	; (800892c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008906:	4313      	orrs	r3, r2
 8008908:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800890c:	69fb      	ldr	r3, [r7, #28]
 800890e:	2b01      	cmp	r3, #1
 8008910:	d006      	beq.n	8008920 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800891a:	2b00      	cmp	r3, #0
 800891c:	f000 80d9 	beq.w	8008ad2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008920:	4b02      	ldr	r3, [pc, #8]	; (800892c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	4a01      	ldr	r2, [pc, #4]	; (800892c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008926:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800892a:	e001      	b.n	8008930 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800892c:	40023800 	.word	0x40023800
 8008930:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008932:	f7fb f959 	bl	8003be8 <HAL_GetTick>
 8008936:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008938:	e008      	b.n	800894c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800893a:	f7fb f955 	bl	8003be8 <HAL_GetTick>
 800893e:	4602      	mov	r2, r0
 8008940:	697b      	ldr	r3, [r7, #20]
 8008942:	1ad3      	subs	r3, r2, r3
 8008944:	2b64      	cmp	r3, #100	; 0x64
 8008946:	d901      	bls.n	800894c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008948:	2303      	movs	r3, #3
 800894a:	e194      	b.n	8008c76 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800894c:	4b6c      	ldr	r3, [pc, #432]	; (8008b00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008954:	2b00      	cmp	r3, #0
 8008956:	d1f0      	bne.n	800893a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f003 0301 	and.w	r3, r3, #1
 8008960:	2b00      	cmp	r3, #0
 8008962:	d021      	beq.n	80089a8 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008968:	2b00      	cmp	r3, #0
 800896a:	d11d      	bne.n	80089a8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800896c:	4b64      	ldr	r3, [pc, #400]	; (8008b00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800896e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008972:	0c1b      	lsrs	r3, r3, #16
 8008974:	f003 0303 	and.w	r3, r3, #3
 8008978:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800897a:	4b61      	ldr	r3, [pc, #388]	; (8008b00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800897c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008980:	0e1b      	lsrs	r3, r3, #24
 8008982:	f003 030f 	and.w	r3, r3, #15
 8008986:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	685b      	ldr	r3, [r3, #4]
 800898c:	019a      	lsls	r2, r3, #6
 800898e:	693b      	ldr	r3, [r7, #16]
 8008990:	041b      	lsls	r3, r3, #16
 8008992:	431a      	orrs	r2, r3
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	061b      	lsls	r3, r3, #24
 8008998:	431a      	orrs	r2, r3
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	689b      	ldr	r3, [r3, #8]
 800899e:	071b      	lsls	r3, r3, #28
 80089a0:	4957      	ldr	r1, [pc, #348]	; (8008b00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80089a2:	4313      	orrs	r3, r2
 80089a4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d004      	beq.n	80089be <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80089bc:	d00a      	beq.n	80089d4 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d02e      	beq.n	8008a28 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80089d2:	d129      	bne.n	8008a28 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80089d4:	4b4a      	ldr	r3, [pc, #296]	; (8008b00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80089d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80089da:	0c1b      	lsrs	r3, r3, #16
 80089dc:	f003 0303 	and.w	r3, r3, #3
 80089e0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80089e2:	4b47      	ldr	r3, [pc, #284]	; (8008b00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80089e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80089e8:	0f1b      	lsrs	r3, r3, #28
 80089ea:	f003 0307 	and.w	r3, r3, #7
 80089ee:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	685b      	ldr	r3, [r3, #4]
 80089f4:	019a      	lsls	r2, r3, #6
 80089f6:	693b      	ldr	r3, [r7, #16]
 80089f8:	041b      	lsls	r3, r3, #16
 80089fa:	431a      	orrs	r2, r3
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	68db      	ldr	r3, [r3, #12]
 8008a00:	061b      	lsls	r3, r3, #24
 8008a02:	431a      	orrs	r2, r3
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	071b      	lsls	r3, r3, #28
 8008a08:	493d      	ldr	r1, [pc, #244]	; (8008b00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008a0a:	4313      	orrs	r3, r2
 8008a0c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008a10:	4b3b      	ldr	r3, [pc, #236]	; (8008b00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008a12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a16:	f023 021f 	bic.w	r2, r3, #31
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a1e:	3b01      	subs	r3, #1
 8008a20:	4937      	ldr	r1, [pc, #220]	; (8008b00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008a22:	4313      	orrs	r3, r2
 8008a24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d01d      	beq.n	8008a70 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008a34:	4b32      	ldr	r3, [pc, #200]	; (8008b00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008a36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008a3a:	0e1b      	lsrs	r3, r3, #24
 8008a3c:	f003 030f 	and.w	r3, r3, #15
 8008a40:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008a42:	4b2f      	ldr	r3, [pc, #188]	; (8008b00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008a44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008a48:	0f1b      	lsrs	r3, r3, #28
 8008a4a:	f003 0307 	and.w	r3, r3, #7
 8008a4e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	685b      	ldr	r3, [r3, #4]
 8008a54:	019a      	lsls	r2, r3, #6
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	691b      	ldr	r3, [r3, #16]
 8008a5a:	041b      	lsls	r3, r3, #16
 8008a5c:	431a      	orrs	r2, r3
 8008a5e:	693b      	ldr	r3, [r7, #16]
 8008a60:	061b      	lsls	r3, r3, #24
 8008a62:	431a      	orrs	r2, r3
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	071b      	lsls	r3, r3, #28
 8008a68:	4925      	ldr	r1, [pc, #148]	; (8008b00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008a6a:	4313      	orrs	r3, r2
 8008a6c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d011      	beq.n	8008aa0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	685b      	ldr	r3, [r3, #4]
 8008a80:	019a      	lsls	r2, r3, #6
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	691b      	ldr	r3, [r3, #16]
 8008a86:	041b      	lsls	r3, r3, #16
 8008a88:	431a      	orrs	r2, r3
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	68db      	ldr	r3, [r3, #12]
 8008a8e:	061b      	lsls	r3, r3, #24
 8008a90:	431a      	orrs	r2, r3
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	689b      	ldr	r3, [r3, #8]
 8008a96:	071b      	lsls	r3, r3, #28
 8008a98:	4919      	ldr	r1, [pc, #100]	; (8008b00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008a9a:	4313      	orrs	r3, r2
 8008a9c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008aa0:	4b17      	ldr	r3, [pc, #92]	; (8008b00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	4a16      	ldr	r2, [pc, #88]	; (8008b00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008aa6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008aaa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008aac:	f7fb f89c 	bl	8003be8 <HAL_GetTick>
 8008ab0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008ab2:	e008      	b.n	8008ac6 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008ab4:	f7fb f898 	bl	8003be8 <HAL_GetTick>
 8008ab8:	4602      	mov	r2, r0
 8008aba:	697b      	ldr	r3, [r7, #20]
 8008abc:	1ad3      	subs	r3, r2, r3
 8008abe:	2b64      	cmp	r3, #100	; 0x64
 8008ac0:	d901      	bls.n	8008ac6 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008ac2:	2303      	movs	r3, #3
 8008ac4:	e0d7      	b.n	8008c76 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008ac6:	4b0e      	ldr	r3, [pc, #56]	; (8008b00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d0f0      	beq.n	8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8008ad2:	69bb      	ldr	r3, [r7, #24]
 8008ad4:	2b01      	cmp	r3, #1
 8008ad6:	f040 80cd 	bne.w	8008c74 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8008ada:	4b09      	ldr	r3, [pc, #36]	; (8008b00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	4a08      	ldr	r2, [pc, #32]	; (8008b00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008ae0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008ae4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008ae6:	f7fb f87f 	bl	8003be8 <HAL_GetTick>
 8008aea:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008aec:	e00a      	b.n	8008b04 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008aee:	f7fb f87b 	bl	8003be8 <HAL_GetTick>
 8008af2:	4602      	mov	r2, r0
 8008af4:	697b      	ldr	r3, [r7, #20]
 8008af6:	1ad3      	subs	r3, r2, r3
 8008af8:	2b64      	cmp	r3, #100	; 0x64
 8008afa:	d903      	bls.n	8008b04 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008afc:	2303      	movs	r3, #3
 8008afe:	e0ba      	b.n	8008c76 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8008b00:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008b04:	4b5e      	ldr	r3, [pc, #376]	; (8008c80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008b0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b10:	d0ed      	beq.n	8008aee <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d003      	beq.n	8008b26 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d009      	beq.n	8008b3a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d02e      	beq.n	8008b90 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d12a      	bne.n	8008b90 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008b3a:	4b51      	ldr	r3, [pc, #324]	; (8008c80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008b3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b40:	0c1b      	lsrs	r3, r3, #16
 8008b42:	f003 0303 	and.w	r3, r3, #3
 8008b46:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008b48:	4b4d      	ldr	r3, [pc, #308]	; (8008c80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b4e:	0f1b      	lsrs	r3, r3, #28
 8008b50:	f003 0307 	and.w	r3, r3, #7
 8008b54:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	695b      	ldr	r3, [r3, #20]
 8008b5a:	019a      	lsls	r2, r3, #6
 8008b5c:	693b      	ldr	r3, [r7, #16]
 8008b5e:	041b      	lsls	r3, r3, #16
 8008b60:	431a      	orrs	r2, r3
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	699b      	ldr	r3, [r3, #24]
 8008b66:	061b      	lsls	r3, r3, #24
 8008b68:	431a      	orrs	r2, r3
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	071b      	lsls	r3, r3, #28
 8008b6e:	4944      	ldr	r1, [pc, #272]	; (8008c80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008b70:	4313      	orrs	r3, r2
 8008b72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008b76:	4b42      	ldr	r3, [pc, #264]	; (8008c80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008b78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b7c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b84:	3b01      	subs	r3, #1
 8008b86:	021b      	lsls	r3, r3, #8
 8008b88:	493d      	ldr	r1, [pc, #244]	; (8008c80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008b8a:	4313      	orrs	r3, r2
 8008b8c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d022      	beq.n	8008be2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ba0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008ba4:	d11d      	bne.n	8008be2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008ba6:	4b36      	ldr	r3, [pc, #216]	; (8008c80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008ba8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008bac:	0e1b      	lsrs	r3, r3, #24
 8008bae:	f003 030f 	and.w	r3, r3, #15
 8008bb2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008bb4:	4b32      	ldr	r3, [pc, #200]	; (8008c80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008bba:	0f1b      	lsrs	r3, r3, #28
 8008bbc:	f003 0307 	and.w	r3, r3, #7
 8008bc0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	695b      	ldr	r3, [r3, #20]
 8008bc6:	019a      	lsls	r2, r3, #6
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	6a1b      	ldr	r3, [r3, #32]
 8008bcc:	041b      	lsls	r3, r3, #16
 8008bce:	431a      	orrs	r2, r3
 8008bd0:	693b      	ldr	r3, [r7, #16]
 8008bd2:	061b      	lsls	r3, r3, #24
 8008bd4:	431a      	orrs	r2, r3
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	071b      	lsls	r3, r3, #28
 8008bda:	4929      	ldr	r1, [pc, #164]	; (8008c80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008bdc:	4313      	orrs	r3, r2
 8008bde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	f003 0308 	and.w	r3, r3, #8
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d028      	beq.n	8008c40 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008bee:	4b24      	ldr	r3, [pc, #144]	; (8008c80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008bf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008bf4:	0e1b      	lsrs	r3, r3, #24
 8008bf6:	f003 030f 	and.w	r3, r3, #15
 8008bfa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008bfc:	4b20      	ldr	r3, [pc, #128]	; (8008c80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c02:	0c1b      	lsrs	r3, r3, #16
 8008c04:	f003 0303 	and.w	r3, r3, #3
 8008c08:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	695b      	ldr	r3, [r3, #20]
 8008c0e:	019a      	lsls	r2, r3, #6
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	041b      	lsls	r3, r3, #16
 8008c14:	431a      	orrs	r2, r3
 8008c16:	693b      	ldr	r3, [r7, #16]
 8008c18:	061b      	lsls	r3, r3, #24
 8008c1a:	431a      	orrs	r2, r3
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	69db      	ldr	r3, [r3, #28]
 8008c20:	071b      	lsls	r3, r3, #28
 8008c22:	4917      	ldr	r1, [pc, #92]	; (8008c80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008c24:	4313      	orrs	r3, r2
 8008c26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8008c2a:	4b15      	ldr	r3, [pc, #84]	; (8008c80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008c2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008c30:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c38:	4911      	ldr	r1, [pc, #68]	; (8008c80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008c3a:	4313      	orrs	r3, r2
 8008c3c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008c40:	4b0f      	ldr	r3, [pc, #60]	; (8008c80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	4a0e      	ldr	r2, [pc, #56]	; (8008c80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008c46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c4a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008c4c:	f7fa ffcc 	bl	8003be8 <HAL_GetTick>
 8008c50:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008c52:	e008      	b.n	8008c66 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008c54:	f7fa ffc8 	bl	8003be8 <HAL_GetTick>
 8008c58:	4602      	mov	r2, r0
 8008c5a:	697b      	ldr	r3, [r7, #20]
 8008c5c:	1ad3      	subs	r3, r2, r3
 8008c5e:	2b64      	cmp	r3, #100	; 0x64
 8008c60:	d901      	bls.n	8008c66 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008c62:	2303      	movs	r3, #3
 8008c64:	e007      	b.n	8008c76 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008c66:	4b06      	ldr	r3, [pc, #24]	; (8008c80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008c6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c72:	d1ef      	bne.n	8008c54 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8008c74:	2300      	movs	r3, #0
}
 8008c76:	4618      	mov	r0, r3
 8008c78:	3720      	adds	r7, #32
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bd80      	pop	{r7, pc}
 8008c7e:	bf00      	nop
 8008c80:	40023800 	.word	0x40023800

08008c84 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b082      	sub	sp, #8
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
 8008c8c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d101      	bne.n	8008c98 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8008c94:	2301      	movs	r3, #1
 8008c96:	e025      	b.n	8008ce4 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008c9e:	b2db      	uxtb	r3, r3
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d106      	bne.n	8008cb2 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8008cac:	6878      	ldr	r0, [r7, #4]
 8008cae:	f7f8 fcb9 	bl	8001624 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	2202      	movs	r2, #2
 8008cb6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681a      	ldr	r2, [r3, #0]
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	3304      	adds	r3, #4
 8008cc2:	4619      	mov	r1, r3
 8008cc4:	4610      	mov	r0, r2
 8008cc6:	f000 fd43 	bl	8009750 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	6818      	ldr	r0, [r3, #0]
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	685b      	ldr	r3, [r3, #4]
 8008cd2:	461a      	mov	r2, r3
 8008cd4:	6839      	ldr	r1, [r7, #0]
 8008cd6:	f000 fd97 	bl	8009808 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	2201      	movs	r2, #1
 8008cde:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008ce2:	2300      	movs	r3, #0
}
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	3708      	adds	r7, #8
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	bd80      	pop	{r7, pc}

08008cec <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b086      	sub	sp, #24
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	60f8      	str	r0, [r7, #12]
 8008cf4:	60b9      	str	r1, [r7, #8]
 8008cf6:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008cfe:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8008d00:	7dfb      	ldrb	r3, [r7, #23]
 8008d02:	2b02      	cmp	r3, #2
 8008d04:	d101      	bne.n	8008d0a <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8008d06:	2302      	movs	r3, #2
 8008d08:	e021      	b.n	8008d4e <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8008d0a:	7dfb      	ldrb	r3, [r7, #23]
 8008d0c:	2b01      	cmp	r3, #1
 8008d0e:	d002      	beq.n	8008d16 <HAL_SDRAM_SendCommand+0x2a>
 8008d10:	7dfb      	ldrb	r3, [r7, #23]
 8008d12:	2b05      	cmp	r3, #5
 8008d14:	d118      	bne.n	8008d48 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	2202      	movs	r2, #2
 8008d1a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	687a      	ldr	r2, [r7, #4]
 8008d24:	68b9      	ldr	r1, [r7, #8]
 8008d26:	4618      	mov	r0, r3
 8008d28:	f000 fdd8 	bl	80098dc <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8008d2c:	68bb      	ldr	r3, [r7, #8]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	2b02      	cmp	r3, #2
 8008d32:	d104      	bne.n	8008d3e <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	2205      	movs	r2, #5
 8008d38:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8008d3c:	e006      	b.n	8008d4c <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	2201      	movs	r2, #1
 8008d42:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8008d46:	e001      	b.n	8008d4c <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8008d48:	2301      	movs	r3, #1
 8008d4a:	e000      	b.n	8008d4e <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8008d4c:	2300      	movs	r3, #0
}
 8008d4e:	4618      	mov	r0, r3
 8008d50:	3718      	adds	r7, #24
 8008d52:	46bd      	mov	sp, r7
 8008d54:	bd80      	pop	{r7, pc}

08008d56 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8008d56:	b580      	push	{r7, lr}
 8008d58:	b082      	sub	sp, #8
 8008d5a:	af00      	add	r7, sp, #0
 8008d5c:	6078      	str	r0, [r7, #4]
 8008d5e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008d66:	b2db      	uxtb	r3, r3
 8008d68:	2b02      	cmp	r3, #2
 8008d6a:	d101      	bne.n	8008d70 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8008d6c:	2302      	movs	r3, #2
 8008d6e:	e016      	b.n	8008d9e <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008d76:	b2db      	uxtb	r3, r3
 8008d78:	2b01      	cmp	r3, #1
 8008d7a:	d10f      	bne.n	8008d9c <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	2202      	movs	r2, #2
 8008d80:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	6839      	ldr	r1, [r7, #0]
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	f000 fdca 	bl	8009924 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2201      	movs	r2, #1
 8008d94:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8008d98:	2300      	movs	r3, #0
 8008d9a:	e000      	b.n	8008d9e <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8008d9c:	2301      	movs	r3, #1
}
 8008d9e:	4618      	mov	r0, r3
 8008da0:	3708      	adds	r7, #8
 8008da2:	46bd      	mov	sp, r7
 8008da4:	bd80      	pop	{r7, pc}

08008da6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008da6:	b580      	push	{r7, lr}
 8008da8:	b082      	sub	sp, #8
 8008daa:	af00      	add	r7, sp, #0
 8008dac:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d101      	bne.n	8008db8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008db4:	2301      	movs	r3, #1
 8008db6:	e040      	b.n	8008e3a <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d106      	bne.n	8008dce <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008dc8:	6878      	ldr	r0, [r7, #4]
 8008dca:	f7f8 fb29 	bl	8001420 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	2224      	movs	r2, #36	; 0x24
 8008dd2:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	681a      	ldr	r2, [r3, #0]
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	f022 0201 	bic.w	r2, r2, #1
 8008de2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008de4:	6878      	ldr	r0, [r7, #4]
 8008de6:	f000 f8af 	bl	8008f48 <UART_SetConfig>
 8008dea:	4603      	mov	r3, r0
 8008dec:	2b01      	cmp	r3, #1
 8008dee:	d101      	bne.n	8008df4 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008df0:	2301      	movs	r3, #1
 8008df2:	e022      	b.n	8008e3a <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d002      	beq.n	8008e02 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008dfc:	6878      	ldr	r0, [r7, #4]
 8008dfe:	f000 fb07 	bl	8009410 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	685a      	ldr	r2, [r3, #4]
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008e10:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	689a      	ldr	r2, [r3, #8]
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008e20:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	681a      	ldr	r2, [r3, #0]
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	f042 0201 	orr.w	r2, r2, #1
 8008e30:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008e32:	6878      	ldr	r0, [r7, #4]
 8008e34:	f000 fb8e 	bl	8009554 <UART_CheckIdleState>
 8008e38:	4603      	mov	r3, r0
}
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	3708      	adds	r7, #8
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	bd80      	pop	{r7, pc}

08008e42 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008e42:	b580      	push	{r7, lr}
 8008e44:	b08a      	sub	sp, #40	; 0x28
 8008e46:	af02      	add	r7, sp, #8
 8008e48:	60f8      	str	r0, [r7, #12]
 8008e4a:	60b9      	str	r1, [r7, #8]
 8008e4c:	603b      	str	r3, [r7, #0]
 8008e4e:	4613      	mov	r3, r2
 8008e50:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008e56:	2b20      	cmp	r3, #32
 8008e58:	d171      	bne.n	8008f3e <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8008e5a:	68bb      	ldr	r3, [r7, #8]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d002      	beq.n	8008e66 <HAL_UART_Transmit+0x24>
 8008e60:	88fb      	ldrh	r3, [r7, #6]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d101      	bne.n	8008e6a <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8008e66:	2301      	movs	r3, #1
 8008e68:	e06a      	b.n	8008f40 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	2221      	movs	r2, #33	; 0x21
 8008e76:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008e78:	f7fa feb6 	bl	8003be8 <HAL_GetTick>
 8008e7c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	88fa      	ldrh	r2, [r7, #6]
 8008e82:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	88fa      	ldrh	r2, [r7, #6]
 8008e8a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	689b      	ldr	r3, [r3, #8]
 8008e92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e96:	d108      	bne.n	8008eaa <HAL_UART_Transmit+0x68>
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	691b      	ldr	r3, [r3, #16]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d104      	bne.n	8008eaa <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008ea4:	68bb      	ldr	r3, [r7, #8]
 8008ea6:	61bb      	str	r3, [r7, #24]
 8008ea8:	e003      	b.n	8008eb2 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8008eaa:	68bb      	ldr	r3, [r7, #8]
 8008eac:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008eae:	2300      	movs	r3, #0
 8008eb0:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008eb2:	e02c      	b.n	8008f0e <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	9300      	str	r3, [sp, #0]
 8008eb8:	697b      	ldr	r3, [r7, #20]
 8008eba:	2200      	movs	r2, #0
 8008ebc:	2180      	movs	r1, #128	; 0x80
 8008ebe:	68f8      	ldr	r0, [r7, #12]
 8008ec0:	f000 fb7f 	bl	80095c2 <UART_WaitOnFlagUntilTimeout>
 8008ec4:	4603      	mov	r3, r0
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d001      	beq.n	8008ece <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8008eca:	2303      	movs	r3, #3
 8008ecc:	e038      	b.n	8008f40 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8008ece:	69fb      	ldr	r3, [r7, #28]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d10b      	bne.n	8008eec <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008ed4:	69bb      	ldr	r3, [r7, #24]
 8008ed6:	881b      	ldrh	r3, [r3, #0]
 8008ed8:	461a      	mov	r2, r3
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008ee2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008ee4:	69bb      	ldr	r3, [r7, #24]
 8008ee6:	3302      	adds	r3, #2
 8008ee8:	61bb      	str	r3, [r7, #24]
 8008eea:	e007      	b.n	8008efc <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008eec:	69fb      	ldr	r3, [r7, #28]
 8008eee:	781a      	ldrb	r2, [r3, #0]
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008ef6:	69fb      	ldr	r3, [r7, #28]
 8008ef8:	3301      	adds	r3, #1
 8008efa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008f02:	b29b      	uxth	r3, r3
 8008f04:	3b01      	subs	r3, #1
 8008f06:	b29a      	uxth	r2, r3
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008f14:	b29b      	uxth	r3, r3
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d1cc      	bne.n	8008eb4 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	9300      	str	r3, [sp, #0]
 8008f1e:	697b      	ldr	r3, [r7, #20]
 8008f20:	2200      	movs	r2, #0
 8008f22:	2140      	movs	r1, #64	; 0x40
 8008f24:	68f8      	ldr	r0, [r7, #12]
 8008f26:	f000 fb4c 	bl	80095c2 <UART_WaitOnFlagUntilTimeout>
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d001      	beq.n	8008f34 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8008f30:	2303      	movs	r3, #3
 8008f32:	e005      	b.n	8008f40 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	2220      	movs	r2, #32
 8008f38:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	e000      	b.n	8008f40 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8008f3e:	2302      	movs	r3, #2
  }
}
 8008f40:	4618      	mov	r0, r3
 8008f42:	3720      	adds	r7, #32
 8008f44:	46bd      	mov	sp, r7
 8008f46:	bd80      	pop	{r7, pc}

08008f48 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b088      	sub	sp, #32
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008f50:	2300      	movs	r3, #0
 8008f52:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	689a      	ldr	r2, [r3, #8]
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	691b      	ldr	r3, [r3, #16]
 8008f5c:	431a      	orrs	r2, r3
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	695b      	ldr	r3, [r3, #20]
 8008f62:	431a      	orrs	r2, r3
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	69db      	ldr	r3, [r3, #28]
 8008f68:	4313      	orrs	r3, r2
 8008f6a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	681a      	ldr	r2, [r3, #0]
 8008f72:	4ba6      	ldr	r3, [pc, #664]	; (800920c <UART_SetConfig+0x2c4>)
 8008f74:	4013      	ands	r3, r2
 8008f76:	687a      	ldr	r2, [r7, #4]
 8008f78:	6812      	ldr	r2, [r2, #0]
 8008f7a:	6979      	ldr	r1, [r7, #20]
 8008f7c:	430b      	orrs	r3, r1
 8008f7e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	685b      	ldr	r3, [r3, #4]
 8008f86:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	68da      	ldr	r2, [r3, #12]
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	430a      	orrs	r2, r1
 8008f94:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	699b      	ldr	r3, [r3, #24]
 8008f9a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	6a1b      	ldr	r3, [r3, #32]
 8008fa0:	697a      	ldr	r2, [r7, #20]
 8008fa2:	4313      	orrs	r3, r2
 8008fa4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	689b      	ldr	r3, [r3, #8]
 8008fac:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	697a      	ldr	r2, [r7, #20]
 8008fb6:	430a      	orrs	r2, r1
 8008fb8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	4a94      	ldr	r2, [pc, #592]	; (8009210 <UART_SetConfig+0x2c8>)
 8008fc0:	4293      	cmp	r3, r2
 8008fc2:	d120      	bne.n	8009006 <UART_SetConfig+0xbe>
 8008fc4:	4b93      	ldr	r3, [pc, #588]	; (8009214 <UART_SetConfig+0x2cc>)
 8008fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008fca:	f003 0303 	and.w	r3, r3, #3
 8008fce:	2b03      	cmp	r3, #3
 8008fd0:	d816      	bhi.n	8009000 <UART_SetConfig+0xb8>
 8008fd2:	a201      	add	r2, pc, #4	; (adr r2, 8008fd8 <UART_SetConfig+0x90>)
 8008fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fd8:	08008fe9 	.word	0x08008fe9
 8008fdc:	08008ff5 	.word	0x08008ff5
 8008fe0:	08008fef 	.word	0x08008fef
 8008fe4:	08008ffb 	.word	0x08008ffb
 8008fe8:	2301      	movs	r3, #1
 8008fea:	77fb      	strb	r3, [r7, #31]
 8008fec:	e150      	b.n	8009290 <UART_SetConfig+0x348>
 8008fee:	2302      	movs	r3, #2
 8008ff0:	77fb      	strb	r3, [r7, #31]
 8008ff2:	e14d      	b.n	8009290 <UART_SetConfig+0x348>
 8008ff4:	2304      	movs	r3, #4
 8008ff6:	77fb      	strb	r3, [r7, #31]
 8008ff8:	e14a      	b.n	8009290 <UART_SetConfig+0x348>
 8008ffa:	2308      	movs	r3, #8
 8008ffc:	77fb      	strb	r3, [r7, #31]
 8008ffe:	e147      	b.n	8009290 <UART_SetConfig+0x348>
 8009000:	2310      	movs	r3, #16
 8009002:	77fb      	strb	r3, [r7, #31]
 8009004:	e144      	b.n	8009290 <UART_SetConfig+0x348>
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	4a83      	ldr	r2, [pc, #524]	; (8009218 <UART_SetConfig+0x2d0>)
 800900c:	4293      	cmp	r3, r2
 800900e:	d132      	bne.n	8009076 <UART_SetConfig+0x12e>
 8009010:	4b80      	ldr	r3, [pc, #512]	; (8009214 <UART_SetConfig+0x2cc>)
 8009012:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009016:	f003 030c 	and.w	r3, r3, #12
 800901a:	2b0c      	cmp	r3, #12
 800901c:	d828      	bhi.n	8009070 <UART_SetConfig+0x128>
 800901e:	a201      	add	r2, pc, #4	; (adr r2, 8009024 <UART_SetConfig+0xdc>)
 8009020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009024:	08009059 	.word	0x08009059
 8009028:	08009071 	.word	0x08009071
 800902c:	08009071 	.word	0x08009071
 8009030:	08009071 	.word	0x08009071
 8009034:	08009065 	.word	0x08009065
 8009038:	08009071 	.word	0x08009071
 800903c:	08009071 	.word	0x08009071
 8009040:	08009071 	.word	0x08009071
 8009044:	0800905f 	.word	0x0800905f
 8009048:	08009071 	.word	0x08009071
 800904c:	08009071 	.word	0x08009071
 8009050:	08009071 	.word	0x08009071
 8009054:	0800906b 	.word	0x0800906b
 8009058:	2300      	movs	r3, #0
 800905a:	77fb      	strb	r3, [r7, #31]
 800905c:	e118      	b.n	8009290 <UART_SetConfig+0x348>
 800905e:	2302      	movs	r3, #2
 8009060:	77fb      	strb	r3, [r7, #31]
 8009062:	e115      	b.n	8009290 <UART_SetConfig+0x348>
 8009064:	2304      	movs	r3, #4
 8009066:	77fb      	strb	r3, [r7, #31]
 8009068:	e112      	b.n	8009290 <UART_SetConfig+0x348>
 800906a:	2308      	movs	r3, #8
 800906c:	77fb      	strb	r3, [r7, #31]
 800906e:	e10f      	b.n	8009290 <UART_SetConfig+0x348>
 8009070:	2310      	movs	r3, #16
 8009072:	77fb      	strb	r3, [r7, #31]
 8009074:	e10c      	b.n	8009290 <UART_SetConfig+0x348>
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	4a68      	ldr	r2, [pc, #416]	; (800921c <UART_SetConfig+0x2d4>)
 800907c:	4293      	cmp	r3, r2
 800907e:	d120      	bne.n	80090c2 <UART_SetConfig+0x17a>
 8009080:	4b64      	ldr	r3, [pc, #400]	; (8009214 <UART_SetConfig+0x2cc>)
 8009082:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009086:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800908a:	2b30      	cmp	r3, #48	; 0x30
 800908c:	d013      	beq.n	80090b6 <UART_SetConfig+0x16e>
 800908e:	2b30      	cmp	r3, #48	; 0x30
 8009090:	d814      	bhi.n	80090bc <UART_SetConfig+0x174>
 8009092:	2b20      	cmp	r3, #32
 8009094:	d009      	beq.n	80090aa <UART_SetConfig+0x162>
 8009096:	2b20      	cmp	r3, #32
 8009098:	d810      	bhi.n	80090bc <UART_SetConfig+0x174>
 800909a:	2b00      	cmp	r3, #0
 800909c:	d002      	beq.n	80090a4 <UART_SetConfig+0x15c>
 800909e:	2b10      	cmp	r3, #16
 80090a0:	d006      	beq.n	80090b0 <UART_SetConfig+0x168>
 80090a2:	e00b      	b.n	80090bc <UART_SetConfig+0x174>
 80090a4:	2300      	movs	r3, #0
 80090a6:	77fb      	strb	r3, [r7, #31]
 80090a8:	e0f2      	b.n	8009290 <UART_SetConfig+0x348>
 80090aa:	2302      	movs	r3, #2
 80090ac:	77fb      	strb	r3, [r7, #31]
 80090ae:	e0ef      	b.n	8009290 <UART_SetConfig+0x348>
 80090b0:	2304      	movs	r3, #4
 80090b2:	77fb      	strb	r3, [r7, #31]
 80090b4:	e0ec      	b.n	8009290 <UART_SetConfig+0x348>
 80090b6:	2308      	movs	r3, #8
 80090b8:	77fb      	strb	r3, [r7, #31]
 80090ba:	e0e9      	b.n	8009290 <UART_SetConfig+0x348>
 80090bc:	2310      	movs	r3, #16
 80090be:	77fb      	strb	r3, [r7, #31]
 80090c0:	e0e6      	b.n	8009290 <UART_SetConfig+0x348>
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	4a56      	ldr	r2, [pc, #344]	; (8009220 <UART_SetConfig+0x2d8>)
 80090c8:	4293      	cmp	r3, r2
 80090ca:	d120      	bne.n	800910e <UART_SetConfig+0x1c6>
 80090cc:	4b51      	ldr	r3, [pc, #324]	; (8009214 <UART_SetConfig+0x2cc>)
 80090ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80090d2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80090d6:	2bc0      	cmp	r3, #192	; 0xc0
 80090d8:	d013      	beq.n	8009102 <UART_SetConfig+0x1ba>
 80090da:	2bc0      	cmp	r3, #192	; 0xc0
 80090dc:	d814      	bhi.n	8009108 <UART_SetConfig+0x1c0>
 80090de:	2b80      	cmp	r3, #128	; 0x80
 80090e0:	d009      	beq.n	80090f6 <UART_SetConfig+0x1ae>
 80090e2:	2b80      	cmp	r3, #128	; 0x80
 80090e4:	d810      	bhi.n	8009108 <UART_SetConfig+0x1c0>
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d002      	beq.n	80090f0 <UART_SetConfig+0x1a8>
 80090ea:	2b40      	cmp	r3, #64	; 0x40
 80090ec:	d006      	beq.n	80090fc <UART_SetConfig+0x1b4>
 80090ee:	e00b      	b.n	8009108 <UART_SetConfig+0x1c0>
 80090f0:	2300      	movs	r3, #0
 80090f2:	77fb      	strb	r3, [r7, #31]
 80090f4:	e0cc      	b.n	8009290 <UART_SetConfig+0x348>
 80090f6:	2302      	movs	r3, #2
 80090f8:	77fb      	strb	r3, [r7, #31]
 80090fa:	e0c9      	b.n	8009290 <UART_SetConfig+0x348>
 80090fc:	2304      	movs	r3, #4
 80090fe:	77fb      	strb	r3, [r7, #31]
 8009100:	e0c6      	b.n	8009290 <UART_SetConfig+0x348>
 8009102:	2308      	movs	r3, #8
 8009104:	77fb      	strb	r3, [r7, #31]
 8009106:	e0c3      	b.n	8009290 <UART_SetConfig+0x348>
 8009108:	2310      	movs	r3, #16
 800910a:	77fb      	strb	r3, [r7, #31]
 800910c:	e0c0      	b.n	8009290 <UART_SetConfig+0x348>
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	4a44      	ldr	r2, [pc, #272]	; (8009224 <UART_SetConfig+0x2dc>)
 8009114:	4293      	cmp	r3, r2
 8009116:	d125      	bne.n	8009164 <UART_SetConfig+0x21c>
 8009118:	4b3e      	ldr	r3, [pc, #248]	; (8009214 <UART_SetConfig+0x2cc>)
 800911a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800911e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009122:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009126:	d017      	beq.n	8009158 <UART_SetConfig+0x210>
 8009128:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800912c:	d817      	bhi.n	800915e <UART_SetConfig+0x216>
 800912e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009132:	d00b      	beq.n	800914c <UART_SetConfig+0x204>
 8009134:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009138:	d811      	bhi.n	800915e <UART_SetConfig+0x216>
 800913a:	2b00      	cmp	r3, #0
 800913c:	d003      	beq.n	8009146 <UART_SetConfig+0x1fe>
 800913e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009142:	d006      	beq.n	8009152 <UART_SetConfig+0x20a>
 8009144:	e00b      	b.n	800915e <UART_SetConfig+0x216>
 8009146:	2300      	movs	r3, #0
 8009148:	77fb      	strb	r3, [r7, #31]
 800914a:	e0a1      	b.n	8009290 <UART_SetConfig+0x348>
 800914c:	2302      	movs	r3, #2
 800914e:	77fb      	strb	r3, [r7, #31]
 8009150:	e09e      	b.n	8009290 <UART_SetConfig+0x348>
 8009152:	2304      	movs	r3, #4
 8009154:	77fb      	strb	r3, [r7, #31]
 8009156:	e09b      	b.n	8009290 <UART_SetConfig+0x348>
 8009158:	2308      	movs	r3, #8
 800915a:	77fb      	strb	r3, [r7, #31]
 800915c:	e098      	b.n	8009290 <UART_SetConfig+0x348>
 800915e:	2310      	movs	r3, #16
 8009160:	77fb      	strb	r3, [r7, #31]
 8009162:	e095      	b.n	8009290 <UART_SetConfig+0x348>
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	4a2f      	ldr	r2, [pc, #188]	; (8009228 <UART_SetConfig+0x2e0>)
 800916a:	4293      	cmp	r3, r2
 800916c:	d125      	bne.n	80091ba <UART_SetConfig+0x272>
 800916e:	4b29      	ldr	r3, [pc, #164]	; (8009214 <UART_SetConfig+0x2cc>)
 8009170:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009174:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009178:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800917c:	d017      	beq.n	80091ae <UART_SetConfig+0x266>
 800917e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009182:	d817      	bhi.n	80091b4 <UART_SetConfig+0x26c>
 8009184:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009188:	d00b      	beq.n	80091a2 <UART_SetConfig+0x25a>
 800918a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800918e:	d811      	bhi.n	80091b4 <UART_SetConfig+0x26c>
 8009190:	2b00      	cmp	r3, #0
 8009192:	d003      	beq.n	800919c <UART_SetConfig+0x254>
 8009194:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009198:	d006      	beq.n	80091a8 <UART_SetConfig+0x260>
 800919a:	e00b      	b.n	80091b4 <UART_SetConfig+0x26c>
 800919c:	2301      	movs	r3, #1
 800919e:	77fb      	strb	r3, [r7, #31]
 80091a0:	e076      	b.n	8009290 <UART_SetConfig+0x348>
 80091a2:	2302      	movs	r3, #2
 80091a4:	77fb      	strb	r3, [r7, #31]
 80091a6:	e073      	b.n	8009290 <UART_SetConfig+0x348>
 80091a8:	2304      	movs	r3, #4
 80091aa:	77fb      	strb	r3, [r7, #31]
 80091ac:	e070      	b.n	8009290 <UART_SetConfig+0x348>
 80091ae:	2308      	movs	r3, #8
 80091b0:	77fb      	strb	r3, [r7, #31]
 80091b2:	e06d      	b.n	8009290 <UART_SetConfig+0x348>
 80091b4:	2310      	movs	r3, #16
 80091b6:	77fb      	strb	r3, [r7, #31]
 80091b8:	e06a      	b.n	8009290 <UART_SetConfig+0x348>
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	4a1b      	ldr	r2, [pc, #108]	; (800922c <UART_SetConfig+0x2e4>)
 80091c0:	4293      	cmp	r3, r2
 80091c2:	d138      	bne.n	8009236 <UART_SetConfig+0x2ee>
 80091c4:	4b13      	ldr	r3, [pc, #76]	; (8009214 <UART_SetConfig+0x2cc>)
 80091c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091ca:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80091ce:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80091d2:	d017      	beq.n	8009204 <UART_SetConfig+0x2bc>
 80091d4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80091d8:	d82a      	bhi.n	8009230 <UART_SetConfig+0x2e8>
 80091da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80091de:	d00b      	beq.n	80091f8 <UART_SetConfig+0x2b0>
 80091e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80091e4:	d824      	bhi.n	8009230 <UART_SetConfig+0x2e8>
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d003      	beq.n	80091f2 <UART_SetConfig+0x2aa>
 80091ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80091ee:	d006      	beq.n	80091fe <UART_SetConfig+0x2b6>
 80091f0:	e01e      	b.n	8009230 <UART_SetConfig+0x2e8>
 80091f2:	2300      	movs	r3, #0
 80091f4:	77fb      	strb	r3, [r7, #31]
 80091f6:	e04b      	b.n	8009290 <UART_SetConfig+0x348>
 80091f8:	2302      	movs	r3, #2
 80091fa:	77fb      	strb	r3, [r7, #31]
 80091fc:	e048      	b.n	8009290 <UART_SetConfig+0x348>
 80091fe:	2304      	movs	r3, #4
 8009200:	77fb      	strb	r3, [r7, #31]
 8009202:	e045      	b.n	8009290 <UART_SetConfig+0x348>
 8009204:	2308      	movs	r3, #8
 8009206:	77fb      	strb	r3, [r7, #31]
 8009208:	e042      	b.n	8009290 <UART_SetConfig+0x348>
 800920a:	bf00      	nop
 800920c:	efff69f3 	.word	0xefff69f3
 8009210:	40011000 	.word	0x40011000
 8009214:	40023800 	.word	0x40023800
 8009218:	40004400 	.word	0x40004400
 800921c:	40004800 	.word	0x40004800
 8009220:	40004c00 	.word	0x40004c00
 8009224:	40005000 	.word	0x40005000
 8009228:	40011400 	.word	0x40011400
 800922c:	40007800 	.word	0x40007800
 8009230:	2310      	movs	r3, #16
 8009232:	77fb      	strb	r3, [r7, #31]
 8009234:	e02c      	b.n	8009290 <UART_SetConfig+0x348>
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	4a72      	ldr	r2, [pc, #456]	; (8009404 <UART_SetConfig+0x4bc>)
 800923c:	4293      	cmp	r3, r2
 800923e:	d125      	bne.n	800928c <UART_SetConfig+0x344>
 8009240:	4b71      	ldr	r3, [pc, #452]	; (8009408 <UART_SetConfig+0x4c0>)
 8009242:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009246:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800924a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800924e:	d017      	beq.n	8009280 <UART_SetConfig+0x338>
 8009250:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009254:	d817      	bhi.n	8009286 <UART_SetConfig+0x33e>
 8009256:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800925a:	d00b      	beq.n	8009274 <UART_SetConfig+0x32c>
 800925c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009260:	d811      	bhi.n	8009286 <UART_SetConfig+0x33e>
 8009262:	2b00      	cmp	r3, #0
 8009264:	d003      	beq.n	800926e <UART_SetConfig+0x326>
 8009266:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800926a:	d006      	beq.n	800927a <UART_SetConfig+0x332>
 800926c:	e00b      	b.n	8009286 <UART_SetConfig+0x33e>
 800926e:	2300      	movs	r3, #0
 8009270:	77fb      	strb	r3, [r7, #31]
 8009272:	e00d      	b.n	8009290 <UART_SetConfig+0x348>
 8009274:	2302      	movs	r3, #2
 8009276:	77fb      	strb	r3, [r7, #31]
 8009278:	e00a      	b.n	8009290 <UART_SetConfig+0x348>
 800927a:	2304      	movs	r3, #4
 800927c:	77fb      	strb	r3, [r7, #31]
 800927e:	e007      	b.n	8009290 <UART_SetConfig+0x348>
 8009280:	2308      	movs	r3, #8
 8009282:	77fb      	strb	r3, [r7, #31]
 8009284:	e004      	b.n	8009290 <UART_SetConfig+0x348>
 8009286:	2310      	movs	r3, #16
 8009288:	77fb      	strb	r3, [r7, #31]
 800928a:	e001      	b.n	8009290 <UART_SetConfig+0x348>
 800928c:	2310      	movs	r3, #16
 800928e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	69db      	ldr	r3, [r3, #28]
 8009294:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009298:	d15b      	bne.n	8009352 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800929a:	7ffb      	ldrb	r3, [r7, #31]
 800929c:	2b08      	cmp	r3, #8
 800929e:	d828      	bhi.n	80092f2 <UART_SetConfig+0x3aa>
 80092a0:	a201      	add	r2, pc, #4	; (adr r2, 80092a8 <UART_SetConfig+0x360>)
 80092a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092a6:	bf00      	nop
 80092a8:	080092cd 	.word	0x080092cd
 80092ac:	080092d5 	.word	0x080092d5
 80092b0:	080092dd 	.word	0x080092dd
 80092b4:	080092f3 	.word	0x080092f3
 80092b8:	080092e3 	.word	0x080092e3
 80092bc:	080092f3 	.word	0x080092f3
 80092c0:	080092f3 	.word	0x080092f3
 80092c4:	080092f3 	.word	0x080092f3
 80092c8:	080092eb 	.word	0x080092eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80092cc:	f7ff f8c2 	bl	8008454 <HAL_RCC_GetPCLK1Freq>
 80092d0:	61b8      	str	r0, [r7, #24]
        break;
 80092d2:	e013      	b.n	80092fc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80092d4:	f7ff f8d2 	bl	800847c <HAL_RCC_GetPCLK2Freq>
 80092d8:	61b8      	str	r0, [r7, #24]
        break;
 80092da:	e00f      	b.n	80092fc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80092dc:	4b4b      	ldr	r3, [pc, #300]	; (800940c <UART_SetConfig+0x4c4>)
 80092de:	61bb      	str	r3, [r7, #24]
        break;
 80092e0:	e00c      	b.n	80092fc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80092e2:	f7fe ffe5 	bl	80082b0 <HAL_RCC_GetSysClockFreq>
 80092e6:	61b8      	str	r0, [r7, #24]
        break;
 80092e8:	e008      	b.n	80092fc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80092ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80092ee:	61bb      	str	r3, [r7, #24]
        break;
 80092f0:	e004      	b.n	80092fc <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80092f2:	2300      	movs	r3, #0
 80092f4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80092f6:	2301      	movs	r3, #1
 80092f8:	77bb      	strb	r3, [r7, #30]
        break;
 80092fa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80092fc:	69bb      	ldr	r3, [r7, #24]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d074      	beq.n	80093ec <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009302:	69bb      	ldr	r3, [r7, #24]
 8009304:	005a      	lsls	r2, r3, #1
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	685b      	ldr	r3, [r3, #4]
 800930a:	085b      	lsrs	r3, r3, #1
 800930c:	441a      	add	r2, r3
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	685b      	ldr	r3, [r3, #4]
 8009312:	fbb2 f3f3 	udiv	r3, r2, r3
 8009316:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009318:	693b      	ldr	r3, [r7, #16]
 800931a:	2b0f      	cmp	r3, #15
 800931c:	d916      	bls.n	800934c <UART_SetConfig+0x404>
 800931e:	693b      	ldr	r3, [r7, #16]
 8009320:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009324:	d212      	bcs.n	800934c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009326:	693b      	ldr	r3, [r7, #16]
 8009328:	b29b      	uxth	r3, r3
 800932a:	f023 030f 	bic.w	r3, r3, #15
 800932e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009330:	693b      	ldr	r3, [r7, #16]
 8009332:	085b      	lsrs	r3, r3, #1
 8009334:	b29b      	uxth	r3, r3
 8009336:	f003 0307 	and.w	r3, r3, #7
 800933a:	b29a      	uxth	r2, r3
 800933c:	89fb      	ldrh	r3, [r7, #14]
 800933e:	4313      	orrs	r3, r2
 8009340:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	89fa      	ldrh	r2, [r7, #14]
 8009348:	60da      	str	r2, [r3, #12]
 800934a:	e04f      	b.n	80093ec <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800934c:	2301      	movs	r3, #1
 800934e:	77bb      	strb	r3, [r7, #30]
 8009350:	e04c      	b.n	80093ec <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009352:	7ffb      	ldrb	r3, [r7, #31]
 8009354:	2b08      	cmp	r3, #8
 8009356:	d828      	bhi.n	80093aa <UART_SetConfig+0x462>
 8009358:	a201      	add	r2, pc, #4	; (adr r2, 8009360 <UART_SetConfig+0x418>)
 800935a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800935e:	bf00      	nop
 8009360:	08009385 	.word	0x08009385
 8009364:	0800938d 	.word	0x0800938d
 8009368:	08009395 	.word	0x08009395
 800936c:	080093ab 	.word	0x080093ab
 8009370:	0800939b 	.word	0x0800939b
 8009374:	080093ab 	.word	0x080093ab
 8009378:	080093ab 	.word	0x080093ab
 800937c:	080093ab 	.word	0x080093ab
 8009380:	080093a3 	.word	0x080093a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009384:	f7ff f866 	bl	8008454 <HAL_RCC_GetPCLK1Freq>
 8009388:	61b8      	str	r0, [r7, #24]
        break;
 800938a:	e013      	b.n	80093b4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800938c:	f7ff f876 	bl	800847c <HAL_RCC_GetPCLK2Freq>
 8009390:	61b8      	str	r0, [r7, #24]
        break;
 8009392:	e00f      	b.n	80093b4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009394:	4b1d      	ldr	r3, [pc, #116]	; (800940c <UART_SetConfig+0x4c4>)
 8009396:	61bb      	str	r3, [r7, #24]
        break;
 8009398:	e00c      	b.n	80093b4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800939a:	f7fe ff89 	bl	80082b0 <HAL_RCC_GetSysClockFreq>
 800939e:	61b8      	str	r0, [r7, #24]
        break;
 80093a0:	e008      	b.n	80093b4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80093a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80093a6:	61bb      	str	r3, [r7, #24]
        break;
 80093a8:	e004      	b.n	80093b4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80093aa:	2300      	movs	r3, #0
 80093ac:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80093ae:	2301      	movs	r3, #1
 80093b0:	77bb      	strb	r3, [r7, #30]
        break;
 80093b2:	bf00      	nop
    }

    if (pclk != 0U)
 80093b4:	69bb      	ldr	r3, [r7, #24]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d018      	beq.n	80093ec <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	685b      	ldr	r3, [r3, #4]
 80093be:	085a      	lsrs	r2, r3, #1
 80093c0:	69bb      	ldr	r3, [r7, #24]
 80093c2:	441a      	add	r2, r3
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	685b      	ldr	r3, [r3, #4]
 80093c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80093cc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80093ce:	693b      	ldr	r3, [r7, #16]
 80093d0:	2b0f      	cmp	r3, #15
 80093d2:	d909      	bls.n	80093e8 <UART_SetConfig+0x4a0>
 80093d4:	693b      	ldr	r3, [r7, #16]
 80093d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80093da:	d205      	bcs.n	80093e8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80093dc:	693b      	ldr	r3, [r7, #16]
 80093de:	b29a      	uxth	r2, r3
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	60da      	str	r2, [r3, #12]
 80093e6:	e001      	b.n	80093ec <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80093e8:	2301      	movs	r3, #1
 80093ea:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	2200      	movs	r2, #0
 80093f0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	2200      	movs	r2, #0
 80093f6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80093f8:	7fbb      	ldrb	r3, [r7, #30]
}
 80093fa:	4618      	mov	r0, r3
 80093fc:	3720      	adds	r7, #32
 80093fe:	46bd      	mov	sp, r7
 8009400:	bd80      	pop	{r7, pc}
 8009402:	bf00      	nop
 8009404:	40007c00 	.word	0x40007c00
 8009408:	40023800 	.word	0x40023800
 800940c:	00f42400 	.word	0x00f42400

08009410 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009410:	b480      	push	{r7}
 8009412:	b083      	sub	sp, #12
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800941c:	f003 0301 	and.w	r3, r3, #1
 8009420:	2b00      	cmp	r3, #0
 8009422:	d00a      	beq.n	800943a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	685b      	ldr	r3, [r3, #4]
 800942a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	430a      	orrs	r2, r1
 8009438:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800943e:	f003 0302 	and.w	r3, r3, #2
 8009442:	2b00      	cmp	r3, #0
 8009444:	d00a      	beq.n	800945c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	685b      	ldr	r3, [r3, #4]
 800944c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	430a      	orrs	r2, r1
 800945a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009460:	f003 0304 	and.w	r3, r3, #4
 8009464:	2b00      	cmp	r3, #0
 8009466:	d00a      	beq.n	800947e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	685b      	ldr	r3, [r3, #4]
 800946e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	430a      	orrs	r2, r1
 800947c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009482:	f003 0308 	and.w	r3, r3, #8
 8009486:	2b00      	cmp	r3, #0
 8009488:	d00a      	beq.n	80094a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	685b      	ldr	r3, [r3, #4]
 8009490:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	430a      	orrs	r2, r1
 800949e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094a4:	f003 0310 	and.w	r3, r3, #16
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d00a      	beq.n	80094c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	689b      	ldr	r3, [r3, #8]
 80094b2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	430a      	orrs	r2, r1
 80094c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094c6:	f003 0320 	and.w	r3, r3, #32
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d00a      	beq.n	80094e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	689b      	ldr	r3, [r3, #8]
 80094d4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	430a      	orrs	r2, r1
 80094e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d01a      	beq.n	8009526 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	685b      	ldr	r3, [r3, #4]
 80094f6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	430a      	orrs	r2, r1
 8009504:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800950a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800950e:	d10a      	bne.n	8009526 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	685b      	ldr	r3, [r3, #4]
 8009516:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	430a      	orrs	r2, r1
 8009524:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800952a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800952e:	2b00      	cmp	r3, #0
 8009530:	d00a      	beq.n	8009548 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	685b      	ldr	r3, [r3, #4]
 8009538:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	430a      	orrs	r2, r1
 8009546:	605a      	str	r2, [r3, #4]
  }
}
 8009548:	bf00      	nop
 800954a:	370c      	adds	r7, #12
 800954c:	46bd      	mov	sp, r7
 800954e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009552:	4770      	bx	lr

08009554 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009554:	b580      	push	{r7, lr}
 8009556:	b086      	sub	sp, #24
 8009558:	af02      	add	r7, sp, #8
 800955a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	2200      	movs	r2, #0
 8009560:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009564:	f7fa fb40 	bl	8003be8 <HAL_GetTick>
 8009568:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	f003 0308 	and.w	r3, r3, #8
 8009574:	2b08      	cmp	r3, #8
 8009576:	d10e      	bne.n	8009596 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009578:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800957c:	9300      	str	r3, [sp, #0]
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	2200      	movs	r2, #0
 8009582:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009586:	6878      	ldr	r0, [r7, #4]
 8009588:	f000 f81b 	bl	80095c2 <UART_WaitOnFlagUntilTimeout>
 800958c:	4603      	mov	r3, r0
 800958e:	2b00      	cmp	r3, #0
 8009590:	d001      	beq.n	8009596 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009592:	2303      	movs	r3, #3
 8009594:	e011      	b.n	80095ba <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	2220      	movs	r2, #32
 800959a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	2220      	movs	r2, #32
 80095a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	2200      	movs	r2, #0
 80095a8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	2200      	movs	r2, #0
 80095ae:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2200      	movs	r2, #0
 80095b4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80095b8:	2300      	movs	r3, #0
}
 80095ba:	4618      	mov	r0, r3
 80095bc:	3710      	adds	r7, #16
 80095be:	46bd      	mov	sp, r7
 80095c0:	bd80      	pop	{r7, pc}

080095c2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80095c2:	b580      	push	{r7, lr}
 80095c4:	b09c      	sub	sp, #112	; 0x70
 80095c6:	af00      	add	r7, sp, #0
 80095c8:	60f8      	str	r0, [r7, #12]
 80095ca:	60b9      	str	r1, [r7, #8]
 80095cc:	603b      	str	r3, [r7, #0]
 80095ce:	4613      	mov	r3, r2
 80095d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80095d2:	e0a7      	b.n	8009724 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80095d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80095d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095da:	f000 80a3 	beq.w	8009724 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80095de:	f7fa fb03 	bl	8003be8 <HAL_GetTick>
 80095e2:	4602      	mov	r2, r0
 80095e4:	683b      	ldr	r3, [r7, #0]
 80095e6:	1ad3      	subs	r3, r2, r3
 80095e8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80095ea:	429a      	cmp	r2, r3
 80095ec:	d302      	bcc.n	80095f4 <UART_WaitOnFlagUntilTimeout+0x32>
 80095ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d13f      	bne.n	8009674 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80095fc:	e853 3f00 	ldrex	r3, [r3]
 8009600:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009602:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009604:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009608:	667b      	str	r3, [r7, #100]	; 0x64
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	461a      	mov	r2, r3
 8009610:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009612:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009614:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009616:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009618:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800961a:	e841 2300 	strex	r3, r2, [r1]
 800961e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009620:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009622:	2b00      	cmp	r3, #0
 8009624:	d1e6      	bne.n	80095f4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	3308      	adds	r3, #8
 800962c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800962e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009630:	e853 3f00 	ldrex	r3, [r3]
 8009634:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009638:	f023 0301 	bic.w	r3, r3, #1
 800963c:	663b      	str	r3, [r7, #96]	; 0x60
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	3308      	adds	r3, #8
 8009644:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009646:	64ba      	str	r2, [r7, #72]	; 0x48
 8009648:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800964a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800964c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800964e:	e841 2300 	strex	r3, r2, [r1]
 8009652:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009654:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009656:	2b00      	cmp	r3, #0
 8009658:	d1e5      	bne.n	8009626 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	2220      	movs	r2, #32
 800965e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	2220      	movs	r2, #32
 8009664:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	2200      	movs	r2, #0
 800966c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8009670:	2303      	movs	r3, #3
 8009672:	e068      	b.n	8009746 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	f003 0304 	and.w	r3, r3, #4
 800967e:	2b00      	cmp	r3, #0
 8009680:	d050      	beq.n	8009724 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	69db      	ldr	r3, [r3, #28]
 8009688:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800968c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009690:	d148      	bne.n	8009724 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800969a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096a4:	e853 3f00 	ldrex	r3, [r3]
 80096a8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80096aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80096b0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	461a      	mov	r2, r3
 80096b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80096ba:	637b      	str	r3, [r7, #52]	; 0x34
 80096bc:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096be:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80096c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80096c2:	e841 2300 	strex	r3, r2, [r1]
 80096c6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80096c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d1e6      	bne.n	800969c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	3308      	adds	r3, #8
 80096d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096d6:	697b      	ldr	r3, [r7, #20]
 80096d8:	e853 3f00 	ldrex	r3, [r3]
 80096dc:	613b      	str	r3, [r7, #16]
   return(result);
 80096de:	693b      	ldr	r3, [r7, #16]
 80096e0:	f023 0301 	bic.w	r3, r3, #1
 80096e4:	66bb      	str	r3, [r7, #104]	; 0x68
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	3308      	adds	r3, #8
 80096ec:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80096ee:	623a      	str	r2, [r7, #32]
 80096f0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096f2:	69f9      	ldr	r1, [r7, #28]
 80096f4:	6a3a      	ldr	r2, [r7, #32]
 80096f6:	e841 2300 	strex	r3, r2, [r1]
 80096fa:	61bb      	str	r3, [r7, #24]
   return(result);
 80096fc:	69bb      	ldr	r3, [r7, #24]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d1e5      	bne.n	80096ce <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	2220      	movs	r2, #32
 8009706:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	2220      	movs	r2, #32
 800970c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	2220      	movs	r2, #32
 8009714:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	2200      	movs	r2, #0
 800971c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8009720:	2303      	movs	r3, #3
 8009722:	e010      	b.n	8009746 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	69da      	ldr	r2, [r3, #28]
 800972a:	68bb      	ldr	r3, [r7, #8]
 800972c:	4013      	ands	r3, r2
 800972e:	68ba      	ldr	r2, [r7, #8]
 8009730:	429a      	cmp	r2, r3
 8009732:	bf0c      	ite	eq
 8009734:	2301      	moveq	r3, #1
 8009736:	2300      	movne	r3, #0
 8009738:	b2db      	uxtb	r3, r3
 800973a:	461a      	mov	r2, r3
 800973c:	79fb      	ldrb	r3, [r7, #7]
 800973e:	429a      	cmp	r2, r3
 8009740:	f43f af48 	beq.w	80095d4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009744:	2300      	movs	r3, #0
}
 8009746:	4618      	mov	r0, r3
 8009748:	3770      	adds	r7, #112	; 0x70
 800974a:	46bd      	mov	sp, r7
 800974c:	bd80      	pop	{r7, pc}
	...

08009750 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8009750:	b480      	push	{r7}
 8009752:	b083      	sub	sp, #12
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
 8009758:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d121      	bne.n	80097a6 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681a      	ldr	r2, [r3, #0]
 8009766:	4b27      	ldr	r3, [pc, #156]	; (8009804 <FMC_SDRAM_Init+0xb4>)
 8009768:	4013      	ands	r3, r2
 800976a:	683a      	ldr	r2, [r7, #0]
 800976c:	6851      	ldr	r1, [r2, #4]
 800976e:	683a      	ldr	r2, [r7, #0]
 8009770:	6892      	ldr	r2, [r2, #8]
 8009772:	4311      	orrs	r1, r2
 8009774:	683a      	ldr	r2, [r7, #0]
 8009776:	68d2      	ldr	r2, [r2, #12]
 8009778:	4311      	orrs	r1, r2
 800977a:	683a      	ldr	r2, [r7, #0]
 800977c:	6912      	ldr	r2, [r2, #16]
 800977e:	4311      	orrs	r1, r2
 8009780:	683a      	ldr	r2, [r7, #0]
 8009782:	6952      	ldr	r2, [r2, #20]
 8009784:	4311      	orrs	r1, r2
 8009786:	683a      	ldr	r2, [r7, #0]
 8009788:	6992      	ldr	r2, [r2, #24]
 800978a:	4311      	orrs	r1, r2
 800978c:	683a      	ldr	r2, [r7, #0]
 800978e:	69d2      	ldr	r2, [r2, #28]
 8009790:	4311      	orrs	r1, r2
 8009792:	683a      	ldr	r2, [r7, #0]
 8009794:	6a12      	ldr	r2, [r2, #32]
 8009796:	4311      	orrs	r1, r2
 8009798:	683a      	ldr	r2, [r7, #0]
 800979a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800979c:	430a      	orrs	r2, r1
 800979e:	431a      	orrs	r2, r3
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	601a      	str	r2, [r3, #0]
 80097a4:	e026      	b.n	80097f4 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80097ae:	683b      	ldr	r3, [r7, #0]
 80097b0:	69d9      	ldr	r1, [r3, #28]
 80097b2:	683b      	ldr	r3, [r7, #0]
 80097b4:	6a1b      	ldr	r3, [r3, #32]
 80097b6:	4319      	orrs	r1, r3
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097bc:	430b      	orrs	r3, r1
 80097be:	431a      	orrs	r2, r3
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	685a      	ldr	r2, [r3, #4]
 80097c8:	4b0e      	ldr	r3, [pc, #56]	; (8009804 <FMC_SDRAM_Init+0xb4>)
 80097ca:	4013      	ands	r3, r2
 80097cc:	683a      	ldr	r2, [r7, #0]
 80097ce:	6851      	ldr	r1, [r2, #4]
 80097d0:	683a      	ldr	r2, [r7, #0]
 80097d2:	6892      	ldr	r2, [r2, #8]
 80097d4:	4311      	orrs	r1, r2
 80097d6:	683a      	ldr	r2, [r7, #0]
 80097d8:	68d2      	ldr	r2, [r2, #12]
 80097da:	4311      	orrs	r1, r2
 80097dc:	683a      	ldr	r2, [r7, #0]
 80097de:	6912      	ldr	r2, [r2, #16]
 80097e0:	4311      	orrs	r1, r2
 80097e2:	683a      	ldr	r2, [r7, #0]
 80097e4:	6952      	ldr	r2, [r2, #20]
 80097e6:	4311      	orrs	r1, r2
 80097e8:	683a      	ldr	r2, [r7, #0]
 80097ea:	6992      	ldr	r2, [r2, #24]
 80097ec:	430a      	orrs	r2, r1
 80097ee:	431a      	orrs	r2, r3
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 80097f4:	2300      	movs	r3, #0
}
 80097f6:	4618      	mov	r0, r3
 80097f8:	370c      	adds	r7, #12
 80097fa:	46bd      	mov	sp, r7
 80097fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009800:	4770      	bx	lr
 8009802:	bf00      	nop
 8009804:	ffff8000 	.word	0xffff8000

08009808 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8009808:	b480      	push	{r7}
 800980a:	b085      	sub	sp, #20
 800980c:	af00      	add	r7, sp, #0
 800980e:	60f8      	str	r0, [r7, #12]
 8009810:	60b9      	str	r1, [r7, #8]
 8009812:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d128      	bne.n	800986c <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	689b      	ldr	r3, [r3, #8]
 800981e:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8009822:	68bb      	ldr	r3, [r7, #8]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	1e59      	subs	r1, r3, #1
 8009828:	68bb      	ldr	r3, [r7, #8]
 800982a:	685b      	ldr	r3, [r3, #4]
 800982c:	3b01      	subs	r3, #1
 800982e:	011b      	lsls	r3, r3, #4
 8009830:	4319      	orrs	r1, r3
 8009832:	68bb      	ldr	r3, [r7, #8]
 8009834:	689b      	ldr	r3, [r3, #8]
 8009836:	3b01      	subs	r3, #1
 8009838:	021b      	lsls	r3, r3, #8
 800983a:	4319      	orrs	r1, r3
 800983c:	68bb      	ldr	r3, [r7, #8]
 800983e:	68db      	ldr	r3, [r3, #12]
 8009840:	3b01      	subs	r3, #1
 8009842:	031b      	lsls	r3, r3, #12
 8009844:	4319      	orrs	r1, r3
 8009846:	68bb      	ldr	r3, [r7, #8]
 8009848:	691b      	ldr	r3, [r3, #16]
 800984a:	3b01      	subs	r3, #1
 800984c:	041b      	lsls	r3, r3, #16
 800984e:	4319      	orrs	r1, r3
 8009850:	68bb      	ldr	r3, [r7, #8]
 8009852:	695b      	ldr	r3, [r3, #20]
 8009854:	3b01      	subs	r3, #1
 8009856:	051b      	lsls	r3, r3, #20
 8009858:	4319      	orrs	r1, r3
 800985a:	68bb      	ldr	r3, [r7, #8]
 800985c:	699b      	ldr	r3, [r3, #24]
 800985e:	3b01      	subs	r3, #1
 8009860:	061b      	lsls	r3, r3, #24
 8009862:	430b      	orrs	r3, r1
 8009864:	431a      	orrs	r2, r3
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	609a      	str	r2, [r3, #8]
 800986a:	e02d      	b.n	80098c8 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	689a      	ldr	r2, [r3, #8]
 8009870:	4b19      	ldr	r3, [pc, #100]	; (80098d8 <FMC_SDRAM_Timing_Init+0xd0>)
 8009872:	4013      	ands	r3, r2
 8009874:	68ba      	ldr	r2, [r7, #8]
 8009876:	68d2      	ldr	r2, [r2, #12]
 8009878:	3a01      	subs	r2, #1
 800987a:	0311      	lsls	r1, r2, #12
 800987c:	68ba      	ldr	r2, [r7, #8]
 800987e:	6952      	ldr	r2, [r2, #20]
 8009880:	3a01      	subs	r2, #1
 8009882:	0512      	lsls	r2, r2, #20
 8009884:	430a      	orrs	r2, r1
 8009886:	431a      	orrs	r2, r3
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	68db      	ldr	r3, [r3, #12]
 8009890:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8009894:	68bb      	ldr	r3, [r7, #8]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	1e59      	subs	r1, r3, #1
 800989a:	68bb      	ldr	r3, [r7, #8]
 800989c:	685b      	ldr	r3, [r3, #4]
 800989e:	3b01      	subs	r3, #1
 80098a0:	011b      	lsls	r3, r3, #4
 80098a2:	4319      	orrs	r1, r3
 80098a4:	68bb      	ldr	r3, [r7, #8]
 80098a6:	689b      	ldr	r3, [r3, #8]
 80098a8:	3b01      	subs	r3, #1
 80098aa:	021b      	lsls	r3, r3, #8
 80098ac:	4319      	orrs	r1, r3
 80098ae:	68bb      	ldr	r3, [r7, #8]
 80098b0:	691b      	ldr	r3, [r3, #16]
 80098b2:	3b01      	subs	r3, #1
 80098b4:	041b      	lsls	r3, r3, #16
 80098b6:	4319      	orrs	r1, r3
 80098b8:	68bb      	ldr	r3, [r7, #8]
 80098ba:	699b      	ldr	r3, [r3, #24]
 80098bc:	3b01      	subs	r3, #1
 80098be:	061b      	lsls	r3, r3, #24
 80098c0:	430b      	orrs	r3, r1
 80098c2:	431a      	orrs	r2, r3
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 80098c8:	2300      	movs	r3, #0
}
 80098ca:	4618      	mov	r0, r3
 80098cc:	3714      	adds	r7, #20
 80098ce:	46bd      	mov	sp, r7
 80098d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d4:	4770      	bx	lr
 80098d6:	bf00      	nop
 80098d8:	ff0f0fff 	.word	0xff0f0fff

080098dc <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80098dc:	b480      	push	{r7}
 80098de:	b085      	sub	sp, #20
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	60f8      	str	r0, [r7, #12]
 80098e4:	60b9      	str	r1, [r7, #8]
 80098e6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	691a      	ldr	r2, [r3, #16]
 80098ec:	4b0c      	ldr	r3, [pc, #48]	; (8009920 <FMC_SDRAM_SendCommand+0x44>)
 80098ee:	4013      	ands	r3, r2
 80098f0:	68ba      	ldr	r2, [r7, #8]
 80098f2:	6811      	ldr	r1, [r2, #0]
 80098f4:	68ba      	ldr	r2, [r7, #8]
 80098f6:	6852      	ldr	r2, [r2, #4]
 80098f8:	4311      	orrs	r1, r2
 80098fa:	68ba      	ldr	r2, [r7, #8]
 80098fc:	6892      	ldr	r2, [r2, #8]
 80098fe:	3a01      	subs	r2, #1
 8009900:	0152      	lsls	r2, r2, #5
 8009902:	4311      	orrs	r1, r2
 8009904:	68ba      	ldr	r2, [r7, #8]
 8009906:	68d2      	ldr	r2, [r2, #12]
 8009908:	0252      	lsls	r2, r2, #9
 800990a:	430a      	orrs	r2, r1
 800990c:	431a      	orrs	r2, r3
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 8009912:	2300      	movs	r3, #0
}
 8009914:	4618      	mov	r0, r3
 8009916:	3714      	adds	r7, #20
 8009918:	46bd      	mov	sp, r7
 800991a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991e:	4770      	bx	lr
 8009920:	ffc00000 	.word	0xffc00000

08009924 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8009924:	b480      	push	{r7}
 8009926:	b083      	sub	sp, #12
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
 800992c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	695a      	ldr	r2, [r3, #20]
 8009932:	4b07      	ldr	r3, [pc, #28]	; (8009950 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 8009934:	4013      	ands	r3, r2
 8009936:	683a      	ldr	r2, [r7, #0]
 8009938:	0052      	lsls	r2, r2, #1
 800993a:	431a      	orrs	r2, r3
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8009940:	2300      	movs	r3, #0
}
 8009942:	4618      	mov	r0, r3
 8009944:	370c      	adds	r7, #12
 8009946:	46bd      	mov	sp, r7
 8009948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994c:	4770      	bx	lr
 800994e:	bf00      	nop
 8009950:	ffffc001 	.word	0xffffc001

08009954 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8009954:	b580      	push	{r7, lr}
 8009956:	b084      	sub	sp, #16
 8009958:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800995a:	4b8d      	ldr	r3, [pc, #564]	; (8009b90 <MX_LWIP_Init+0x23c>)
 800995c:	22c0      	movs	r2, #192	; 0xc0
 800995e:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8009960:	4b8b      	ldr	r3, [pc, #556]	; (8009b90 <MX_LWIP_Init+0x23c>)
 8009962:	22a8      	movs	r2, #168	; 0xa8
 8009964:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 8009966:	4b8a      	ldr	r3, [pc, #552]	; (8009b90 <MX_LWIP_Init+0x23c>)
 8009968:	2200      	movs	r2, #0
 800996a:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 10;
 800996c:	4b88      	ldr	r3, [pc, #544]	; (8009b90 <MX_LWIP_Init+0x23c>)
 800996e:	220a      	movs	r2, #10
 8009970:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8009972:	4b88      	ldr	r3, [pc, #544]	; (8009b94 <MX_LWIP_Init+0x240>)
 8009974:	22ff      	movs	r2, #255	; 0xff
 8009976:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8009978:	4b86      	ldr	r3, [pc, #536]	; (8009b94 <MX_LWIP_Init+0x240>)
 800997a:	22ff      	movs	r2, #255	; 0xff
 800997c:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800997e:	4b85      	ldr	r3, [pc, #532]	; (8009b94 <MX_LWIP_Init+0x240>)
 8009980:	22ff      	movs	r2, #255	; 0xff
 8009982:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8009984:	4b83      	ldr	r3, [pc, #524]	; (8009b94 <MX_LWIP_Init+0x240>)
 8009986:	2200      	movs	r2, #0
 8009988:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 800998a:	4b83      	ldr	r3, [pc, #524]	; (8009b98 <MX_LWIP_Init+0x244>)
 800998c:	2200      	movs	r2, #0
 800998e:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 8009990:	4b81      	ldr	r3, [pc, #516]	; (8009b98 <MX_LWIP_Init+0x244>)
 8009992:	2200      	movs	r2, #0
 8009994:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8009996:	4b80      	ldr	r3, [pc, #512]	; (8009b98 <MX_LWIP_Init+0x244>)
 8009998:	2200      	movs	r2, #0
 800999a:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 800999c:	4b7e      	ldr	r3, [pc, #504]	; (8009b98 <MX_LWIP_Init+0x244>)
 800999e:	2200      	movs	r2, #0
 80099a0:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 80099a2:	f002 f921 	bl	800bbe8 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80099a6:	4b7a      	ldr	r3, [pc, #488]	; (8009b90 <MX_LWIP_Init+0x23c>)
 80099a8:	781b      	ldrb	r3, [r3, #0]
 80099aa:	061a      	lsls	r2, r3, #24
 80099ac:	4b78      	ldr	r3, [pc, #480]	; (8009b90 <MX_LWIP_Init+0x23c>)
 80099ae:	785b      	ldrb	r3, [r3, #1]
 80099b0:	041b      	lsls	r3, r3, #16
 80099b2:	431a      	orrs	r2, r3
 80099b4:	4b76      	ldr	r3, [pc, #472]	; (8009b90 <MX_LWIP_Init+0x23c>)
 80099b6:	789b      	ldrb	r3, [r3, #2]
 80099b8:	021b      	lsls	r3, r3, #8
 80099ba:	4313      	orrs	r3, r2
 80099bc:	4a74      	ldr	r2, [pc, #464]	; (8009b90 <MX_LWIP_Init+0x23c>)
 80099be:	78d2      	ldrb	r2, [r2, #3]
 80099c0:	4313      	orrs	r3, r2
 80099c2:	061a      	lsls	r2, r3, #24
 80099c4:	4b72      	ldr	r3, [pc, #456]	; (8009b90 <MX_LWIP_Init+0x23c>)
 80099c6:	781b      	ldrb	r3, [r3, #0]
 80099c8:	0619      	lsls	r1, r3, #24
 80099ca:	4b71      	ldr	r3, [pc, #452]	; (8009b90 <MX_LWIP_Init+0x23c>)
 80099cc:	785b      	ldrb	r3, [r3, #1]
 80099ce:	041b      	lsls	r3, r3, #16
 80099d0:	4319      	orrs	r1, r3
 80099d2:	4b6f      	ldr	r3, [pc, #444]	; (8009b90 <MX_LWIP_Init+0x23c>)
 80099d4:	789b      	ldrb	r3, [r3, #2]
 80099d6:	021b      	lsls	r3, r3, #8
 80099d8:	430b      	orrs	r3, r1
 80099da:	496d      	ldr	r1, [pc, #436]	; (8009b90 <MX_LWIP_Init+0x23c>)
 80099dc:	78c9      	ldrb	r1, [r1, #3]
 80099de:	430b      	orrs	r3, r1
 80099e0:	021b      	lsls	r3, r3, #8
 80099e2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80099e6:	431a      	orrs	r2, r3
 80099e8:	4b69      	ldr	r3, [pc, #420]	; (8009b90 <MX_LWIP_Init+0x23c>)
 80099ea:	781b      	ldrb	r3, [r3, #0]
 80099ec:	0619      	lsls	r1, r3, #24
 80099ee:	4b68      	ldr	r3, [pc, #416]	; (8009b90 <MX_LWIP_Init+0x23c>)
 80099f0:	785b      	ldrb	r3, [r3, #1]
 80099f2:	041b      	lsls	r3, r3, #16
 80099f4:	4319      	orrs	r1, r3
 80099f6:	4b66      	ldr	r3, [pc, #408]	; (8009b90 <MX_LWIP_Init+0x23c>)
 80099f8:	789b      	ldrb	r3, [r3, #2]
 80099fa:	021b      	lsls	r3, r3, #8
 80099fc:	430b      	orrs	r3, r1
 80099fe:	4964      	ldr	r1, [pc, #400]	; (8009b90 <MX_LWIP_Init+0x23c>)
 8009a00:	78c9      	ldrb	r1, [r1, #3]
 8009a02:	430b      	orrs	r3, r1
 8009a04:	0a1b      	lsrs	r3, r3, #8
 8009a06:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009a0a:	431a      	orrs	r2, r3
 8009a0c:	4b60      	ldr	r3, [pc, #384]	; (8009b90 <MX_LWIP_Init+0x23c>)
 8009a0e:	781b      	ldrb	r3, [r3, #0]
 8009a10:	0619      	lsls	r1, r3, #24
 8009a12:	4b5f      	ldr	r3, [pc, #380]	; (8009b90 <MX_LWIP_Init+0x23c>)
 8009a14:	785b      	ldrb	r3, [r3, #1]
 8009a16:	041b      	lsls	r3, r3, #16
 8009a18:	4319      	orrs	r1, r3
 8009a1a:	4b5d      	ldr	r3, [pc, #372]	; (8009b90 <MX_LWIP_Init+0x23c>)
 8009a1c:	789b      	ldrb	r3, [r3, #2]
 8009a1e:	021b      	lsls	r3, r3, #8
 8009a20:	430b      	orrs	r3, r1
 8009a22:	495b      	ldr	r1, [pc, #364]	; (8009b90 <MX_LWIP_Init+0x23c>)
 8009a24:	78c9      	ldrb	r1, [r1, #3]
 8009a26:	430b      	orrs	r3, r1
 8009a28:	0e1b      	lsrs	r3, r3, #24
 8009a2a:	4313      	orrs	r3, r2
 8009a2c:	4a5b      	ldr	r2, [pc, #364]	; (8009b9c <MX_LWIP_Init+0x248>)
 8009a2e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8009a30:	4b58      	ldr	r3, [pc, #352]	; (8009b94 <MX_LWIP_Init+0x240>)
 8009a32:	781b      	ldrb	r3, [r3, #0]
 8009a34:	061a      	lsls	r2, r3, #24
 8009a36:	4b57      	ldr	r3, [pc, #348]	; (8009b94 <MX_LWIP_Init+0x240>)
 8009a38:	785b      	ldrb	r3, [r3, #1]
 8009a3a:	041b      	lsls	r3, r3, #16
 8009a3c:	431a      	orrs	r2, r3
 8009a3e:	4b55      	ldr	r3, [pc, #340]	; (8009b94 <MX_LWIP_Init+0x240>)
 8009a40:	789b      	ldrb	r3, [r3, #2]
 8009a42:	021b      	lsls	r3, r3, #8
 8009a44:	4313      	orrs	r3, r2
 8009a46:	4a53      	ldr	r2, [pc, #332]	; (8009b94 <MX_LWIP_Init+0x240>)
 8009a48:	78d2      	ldrb	r2, [r2, #3]
 8009a4a:	4313      	orrs	r3, r2
 8009a4c:	061a      	lsls	r2, r3, #24
 8009a4e:	4b51      	ldr	r3, [pc, #324]	; (8009b94 <MX_LWIP_Init+0x240>)
 8009a50:	781b      	ldrb	r3, [r3, #0]
 8009a52:	0619      	lsls	r1, r3, #24
 8009a54:	4b4f      	ldr	r3, [pc, #316]	; (8009b94 <MX_LWIP_Init+0x240>)
 8009a56:	785b      	ldrb	r3, [r3, #1]
 8009a58:	041b      	lsls	r3, r3, #16
 8009a5a:	4319      	orrs	r1, r3
 8009a5c:	4b4d      	ldr	r3, [pc, #308]	; (8009b94 <MX_LWIP_Init+0x240>)
 8009a5e:	789b      	ldrb	r3, [r3, #2]
 8009a60:	021b      	lsls	r3, r3, #8
 8009a62:	430b      	orrs	r3, r1
 8009a64:	494b      	ldr	r1, [pc, #300]	; (8009b94 <MX_LWIP_Init+0x240>)
 8009a66:	78c9      	ldrb	r1, [r1, #3]
 8009a68:	430b      	orrs	r3, r1
 8009a6a:	021b      	lsls	r3, r3, #8
 8009a6c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009a70:	431a      	orrs	r2, r3
 8009a72:	4b48      	ldr	r3, [pc, #288]	; (8009b94 <MX_LWIP_Init+0x240>)
 8009a74:	781b      	ldrb	r3, [r3, #0]
 8009a76:	0619      	lsls	r1, r3, #24
 8009a78:	4b46      	ldr	r3, [pc, #280]	; (8009b94 <MX_LWIP_Init+0x240>)
 8009a7a:	785b      	ldrb	r3, [r3, #1]
 8009a7c:	041b      	lsls	r3, r3, #16
 8009a7e:	4319      	orrs	r1, r3
 8009a80:	4b44      	ldr	r3, [pc, #272]	; (8009b94 <MX_LWIP_Init+0x240>)
 8009a82:	789b      	ldrb	r3, [r3, #2]
 8009a84:	021b      	lsls	r3, r3, #8
 8009a86:	430b      	orrs	r3, r1
 8009a88:	4942      	ldr	r1, [pc, #264]	; (8009b94 <MX_LWIP_Init+0x240>)
 8009a8a:	78c9      	ldrb	r1, [r1, #3]
 8009a8c:	430b      	orrs	r3, r1
 8009a8e:	0a1b      	lsrs	r3, r3, #8
 8009a90:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009a94:	431a      	orrs	r2, r3
 8009a96:	4b3f      	ldr	r3, [pc, #252]	; (8009b94 <MX_LWIP_Init+0x240>)
 8009a98:	781b      	ldrb	r3, [r3, #0]
 8009a9a:	0619      	lsls	r1, r3, #24
 8009a9c:	4b3d      	ldr	r3, [pc, #244]	; (8009b94 <MX_LWIP_Init+0x240>)
 8009a9e:	785b      	ldrb	r3, [r3, #1]
 8009aa0:	041b      	lsls	r3, r3, #16
 8009aa2:	4319      	orrs	r1, r3
 8009aa4:	4b3b      	ldr	r3, [pc, #236]	; (8009b94 <MX_LWIP_Init+0x240>)
 8009aa6:	789b      	ldrb	r3, [r3, #2]
 8009aa8:	021b      	lsls	r3, r3, #8
 8009aaa:	430b      	orrs	r3, r1
 8009aac:	4939      	ldr	r1, [pc, #228]	; (8009b94 <MX_LWIP_Init+0x240>)
 8009aae:	78c9      	ldrb	r1, [r1, #3]
 8009ab0:	430b      	orrs	r3, r1
 8009ab2:	0e1b      	lsrs	r3, r3, #24
 8009ab4:	4313      	orrs	r3, r2
 8009ab6:	4a3a      	ldr	r2, [pc, #232]	; (8009ba0 <MX_LWIP_Init+0x24c>)
 8009ab8:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8009aba:	4b37      	ldr	r3, [pc, #220]	; (8009b98 <MX_LWIP_Init+0x244>)
 8009abc:	781b      	ldrb	r3, [r3, #0]
 8009abe:	061a      	lsls	r2, r3, #24
 8009ac0:	4b35      	ldr	r3, [pc, #212]	; (8009b98 <MX_LWIP_Init+0x244>)
 8009ac2:	785b      	ldrb	r3, [r3, #1]
 8009ac4:	041b      	lsls	r3, r3, #16
 8009ac6:	431a      	orrs	r2, r3
 8009ac8:	4b33      	ldr	r3, [pc, #204]	; (8009b98 <MX_LWIP_Init+0x244>)
 8009aca:	789b      	ldrb	r3, [r3, #2]
 8009acc:	021b      	lsls	r3, r3, #8
 8009ace:	4313      	orrs	r3, r2
 8009ad0:	4a31      	ldr	r2, [pc, #196]	; (8009b98 <MX_LWIP_Init+0x244>)
 8009ad2:	78d2      	ldrb	r2, [r2, #3]
 8009ad4:	4313      	orrs	r3, r2
 8009ad6:	061a      	lsls	r2, r3, #24
 8009ad8:	4b2f      	ldr	r3, [pc, #188]	; (8009b98 <MX_LWIP_Init+0x244>)
 8009ada:	781b      	ldrb	r3, [r3, #0]
 8009adc:	0619      	lsls	r1, r3, #24
 8009ade:	4b2e      	ldr	r3, [pc, #184]	; (8009b98 <MX_LWIP_Init+0x244>)
 8009ae0:	785b      	ldrb	r3, [r3, #1]
 8009ae2:	041b      	lsls	r3, r3, #16
 8009ae4:	4319      	orrs	r1, r3
 8009ae6:	4b2c      	ldr	r3, [pc, #176]	; (8009b98 <MX_LWIP_Init+0x244>)
 8009ae8:	789b      	ldrb	r3, [r3, #2]
 8009aea:	021b      	lsls	r3, r3, #8
 8009aec:	430b      	orrs	r3, r1
 8009aee:	492a      	ldr	r1, [pc, #168]	; (8009b98 <MX_LWIP_Init+0x244>)
 8009af0:	78c9      	ldrb	r1, [r1, #3]
 8009af2:	430b      	orrs	r3, r1
 8009af4:	021b      	lsls	r3, r3, #8
 8009af6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009afa:	431a      	orrs	r2, r3
 8009afc:	4b26      	ldr	r3, [pc, #152]	; (8009b98 <MX_LWIP_Init+0x244>)
 8009afe:	781b      	ldrb	r3, [r3, #0]
 8009b00:	0619      	lsls	r1, r3, #24
 8009b02:	4b25      	ldr	r3, [pc, #148]	; (8009b98 <MX_LWIP_Init+0x244>)
 8009b04:	785b      	ldrb	r3, [r3, #1]
 8009b06:	041b      	lsls	r3, r3, #16
 8009b08:	4319      	orrs	r1, r3
 8009b0a:	4b23      	ldr	r3, [pc, #140]	; (8009b98 <MX_LWIP_Init+0x244>)
 8009b0c:	789b      	ldrb	r3, [r3, #2]
 8009b0e:	021b      	lsls	r3, r3, #8
 8009b10:	430b      	orrs	r3, r1
 8009b12:	4921      	ldr	r1, [pc, #132]	; (8009b98 <MX_LWIP_Init+0x244>)
 8009b14:	78c9      	ldrb	r1, [r1, #3]
 8009b16:	430b      	orrs	r3, r1
 8009b18:	0a1b      	lsrs	r3, r3, #8
 8009b1a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009b1e:	431a      	orrs	r2, r3
 8009b20:	4b1d      	ldr	r3, [pc, #116]	; (8009b98 <MX_LWIP_Init+0x244>)
 8009b22:	781b      	ldrb	r3, [r3, #0]
 8009b24:	0619      	lsls	r1, r3, #24
 8009b26:	4b1c      	ldr	r3, [pc, #112]	; (8009b98 <MX_LWIP_Init+0x244>)
 8009b28:	785b      	ldrb	r3, [r3, #1]
 8009b2a:	041b      	lsls	r3, r3, #16
 8009b2c:	4319      	orrs	r1, r3
 8009b2e:	4b1a      	ldr	r3, [pc, #104]	; (8009b98 <MX_LWIP_Init+0x244>)
 8009b30:	789b      	ldrb	r3, [r3, #2]
 8009b32:	021b      	lsls	r3, r3, #8
 8009b34:	430b      	orrs	r3, r1
 8009b36:	4918      	ldr	r1, [pc, #96]	; (8009b98 <MX_LWIP_Init+0x244>)
 8009b38:	78c9      	ldrb	r1, [r1, #3]
 8009b3a:	430b      	orrs	r3, r1
 8009b3c:	0e1b      	lsrs	r3, r3, #24
 8009b3e:	4313      	orrs	r3, r2
 8009b40:	4a18      	ldr	r2, [pc, #96]	; (8009ba4 <MX_LWIP_Init+0x250>)
 8009b42:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8009b44:	4b18      	ldr	r3, [pc, #96]	; (8009ba8 <MX_LWIP_Init+0x254>)
 8009b46:	9302      	str	r3, [sp, #8]
 8009b48:	4b18      	ldr	r3, [pc, #96]	; (8009bac <MX_LWIP_Init+0x258>)
 8009b4a:	9301      	str	r3, [sp, #4]
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	9300      	str	r3, [sp, #0]
 8009b50:	4b14      	ldr	r3, [pc, #80]	; (8009ba4 <MX_LWIP_Init+0x250>)
 8009b52:	4a13      	ldr	r2, [pc, #76]	; (8009ba0 <MX_LWIP_Init+0x24c>)
 8009b54:	4911      	ldr	r1, [pc, #68]	; (8009b9c <MX_LWIP_Init+0x248>)
 8009b56:	4816      	ldr	r0, [pc, #88]	; (8009bb0 <MX_LWIP_Init+0x25c>)
 8009b58:	f002 fd5a 	bl	800c610 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8009b5c:	4814      	ldr	r0, [pc, #80]	; (8009bb0 <MX_LWIP_Init+0x25c>)
 8009b5e:	f002 ff09 	bl	800c974 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8009b62:	4b13      	ldr	r3, [pc, #76]	; (8009bb0 <MX_LWIP_Init+0x25c>)
 8009b64:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009b68:	089b      	lsrs	r3, r3, #2
 8009b6a:	f003 0301 	and.w	r3, r3, #1
 8009b6e:	b2db      	uxtb	r3, r3
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d003      	beq.n	8009b7c <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8009b74:	480e      	ldr	r0, [pc, #56]	; (8009bb0 <MX_LWIP_Init+0x25c>)
 8009b76:	f002 ff0d 	bl	800c994 <netif_set_up>
 8009b7a:	e002      	b.n	8009b82 <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8009b7c:	480c      	ldr	r0, [pc, #48]	; (8009bb0 <MX_LWIP_Init+0x25c>)
 8009b7e:	f002 ff75 	bl	800ca6c <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8009b82:	490c      	ldr	r1, [pc, #48]	; (8009bb4 <MX_LWIP_Init+0x260>)
 8009b84:	480a      	ldr	r0, [pc, #40]	; (8009bb0 <MX_LWIP_Init+0x25c>)
 8009b86:	f003 f807 	bl	800cb98 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8009b8a:	bf00      	nop
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	bd80      	pop	{r7, pc}
 8009b90:	20000b98 	.word	0x20000b98
 8009b94:	20000b9c 	.word	0x20000b9c
 8009b98:	20000ba0 	.word	0x20000ba0
 8009b9c:	20000b8c 	.word	0x20000b8c
 8009ba0:	20000b90 	.word	0x20000b90
 8009ba4:	20000b94 	.word	0x20000b94
 8009ba8:	080165cd 	.word	0x080165cd
 8009bac:	08009f1d 	.word	0x08009f1d
 8009bb0:	20000b58 	.word	0x20000b58
 8009bb4:	08009c09 	.word	0x08009c09

08009bb8 <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b082      	sub	sp, #8
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 8009bc0:	f7fa f812 	bl	8003be8 <HAL_GetTick>
 8009bc4:	4602      	mov	r2, r0
 8009bc6:	4b08      	ldr	r3, [pc, #32]	; (8009be8 <Ethernet_Link_Periodic_Handle+0x30>)
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	1ad3      	subs	r3, r2, r3
 8009bcc:	2b63      	cmp	r3, #99	; 0x63
 8009bce:	d907      	bls.n	8009be0 <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 8009bd0:	f7fa f80a 	bl	8003be8 <HAL_GetTick>
 8009bd4:	4603      	mov	r3, r0
 8009bd6:	4a04      	ldr	r2, [pc, #16]	; (8009be8 <Ethernet_Link_Periodic_Handle+0x30>)
 8009bd8:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 8009bda:	6878      	ldr	r0, [r7, #4]
 8009bdc:	f000 fad4 	bl	800a188 <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 8009be0:	bf00      	nop
 8009be2:	3708      	adds	r7, #8
 8009be4:	46bd      	mov	sp, r7
 8009be6:	bd80      	pop	{r7, pc}
 8009be8:	20000b54 	.word	0x20000b54

08009bec <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8009bec:	b580      	push	{r7, lr}
 8009bee:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8009bf0:	4804      	ldr	r0, [pc, #16]	; (8009c04 <MX_LWIP_Process+0x18>)
 8009bf2:	f000 f973 	bl	8009edc <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 8009bf6:	f00a f8fd 	bl	8013df4 <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 8009bfa:	4802      	ldr	r0, [pc, #8]	; (8009c04 <MX_LWIP_Process+0x18>)
 8009bfc:	f7ff ffdc 	bl	8009bb8 <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8009c00:	bf00      	nop
 8009c02:	bd80      	pop	{r7, pc}
 8009c04:	20000b58 	.word	0x20000b58

08009c08 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8009c08:	b480      	push	{r7}
 8009c0a:	b083      	sub	sp, #12
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8009c10:	bf00      	nop
 8009c12:	370c      	adds	r7, #12
 8009c14:	46bd      	mov	sp, r7
 8009c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1a:	4770      	bx	lr

08009c1c <SCB_InvalidateDCache_by_Addr>:
{
 8009c1c:	b480      	push	{r7}
 8009c1e:	b087      	sub	sp, #28
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
 8009c24:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 8009c26:	683b      	ldr	r3, [r7, #0]
 8009c28:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8009c2e:	2320      	movs	r3, #32
 8009c30:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8009c32:	f3bf 8f4f 	dsb	sy
}
 8009c36:	bf00      	nop
    while (op_size > 0) {
 8009c38:	e00b      	b.n	8009c52 <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 8009c3a:	4a0d      	ldr	r2, [pc, #52]	; (8009c70 <SCB_InvalidateDCache_by_Addr+0x54>)
 8009c3c:	693b      	ldr	r3, [r7, #16]
 8009c3e:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	693a      	ldr	r2, [r7, #16]
 8009c46:	4413      	add	r3, r2
 8009c48:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8009c4a:	697a      	ldr	r2, [r7, #20]
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	1ad3      	subs	r3, r2, r3
 8009c50:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8009c52:	697b      	ldr	r3, [r7, #20]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	dcf0      	bgt.n	8009c3a <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8009c58:	f3bf 8f4f 	dsb	sy
}
 8009c5c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8009c5e:	f3bf 8f6f 	isb	sy
}
 8009c62:	bf00      	nop
}
 8009c64:	bf00      	nop
 8009c66:	371c      	adds	r7, #28
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6e:	4770      	bx	lr
 8009c70:	e000ed00 	.word	0xe000ed00

08009c74 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b084      	sub	sp, #16
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8009c80:	4b40      	ldr	r3, [pc, #256]	; (8009d84 <low_level_init+0x110>)
 8009c82:	4a41      	ldr	r2, [pc, #260]	; (8009d88 <low_level_init+0x114>)
 8009c84:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8009c86:	2300      	movs	r3, #0
 8009c88:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8009c8a:	2380      	movs	r3, #128	; 0x80
 8009c8c:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8009c8e:	23e1      	movs	r3, #225	; 0xe1
 8009c90:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8009c92:	2300      	movs	r3, #0
 8009c94:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8009c96:	2300      	movs	r3, #0
 8009c98:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x44;
 8009c9a:	2344      	movs	r3, #68	; 0x44
 8009c9c:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8009c9e:	4a39      	ldr	r2, [pc, #228]	; (8009d84 <low_level_init+0x110>)
 8009ca0:	f107 0308 	add.w	r3, r7, #8
 8009ca4:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8009ca6:	4b37      	ldr	r3, [pc, #220]	; (8009d84 <low_level_init+0x110>)
 8009ca8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8009cac:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8009cae:	4b35      	ldr	r3, [pc, #212]	; (8009d84 <low_level_init+0x110>)
 8009cb0:	4a36      	ldr	r2, [pc, #216]	; (8009d8c <low_level_init+0x118>)
 8009cb2:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8009cb4:	4b33      	ldr	r3, [pc, #204]	; (8009d84 <low_level_init+0x110>)
 8009cb6:	4a36      	ldr	r2, [pc, #216]	; (8009d90 <low_level_init+0x11c>)
 8009cb8:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8009cba:	4b32      	ldr	r3, [pc, #200]	; (8009d84 <low_level_init+0x110>)
 8009cbc:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8009cc0:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8009cc2:	4830      	ldr	r0, [pc, #192]	; (8009d84 <low_level_init+0x110>)
 8009cc4:	f7fa fd8c 	bl	80047e0 <HAL_ETH_Init>
 8009cc8:	4603      	mov	r3, r0
 8009cca:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8009ccc:	2238      	movs	r2, #56	; 0x38
 8009cce:	2100      	movs	r1, #0
 8009cd0:	4830      	ldr	r0, [pc, #192]	; (8009d94 <low_level_init+0x120>)
 8009cd2:	f00c fdad 	bl	8016830 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8009cd6:	4b2f      	ldr	r3, [pc, #188]	; (8009d94 <low_level_init+0x120>)
 8009cd8:	2221      	movs	r2, #33	; 0x21
 8009cda:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8009cdc:	4b2d      	ldr	r3, [pc, #180]	; (8009d94 <low_level_init+0x120>)
 8009cde:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8009ce2:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8009ce4:	4b2b      	ldr	r3, [pc, #172]	; (8009d94 <low_level_init+0x120>)
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8009cea:	482b      	ldr	r0, [pc, #172]	; (8009d98 <low_level_init+0x124>)
 8009cec:	f002 fb58 	bl	800c3a0 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	2206      	movs	r2, #6
 8009cf4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8009cf8:	4b22      	ldr	r3, [pc, #136]	; (8009d84 <low_level_init+0x110>)
 8009cfa:	685b      	ldr	r3, [r3, #4]
 8009cfc:	781a      	ldrb	r2, [r3, #0]
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8009d04:	4b1f      	ldr	r3, [pc, #124]	; (8009d84 <low_level_init+0x110>)
 8009d06:	685b      	ldr	r3, [r3, #4]
 8009d08:	785a      	ldrb	r2, [r3, #1]
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8009d10:	4b1c      	ldr	r3, [pc, #112]	; (8009d84 <low_level_init+0x110>)
 8009d12:	685b      	ldr	r3, [r3, #4]
 8009d14:	789a      	ldrb	r2, [r3, #2]
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8009d1c:	4b19      	ldr	r3, [pc, #100]	; (8009d84 <low_level_init+0x110>)
 8009d1e:	685b      	ldr	r3, [r3, #4]
 8009d20:	78da      	ldrb	r2, [r3, #3]
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8009d28:	4b16      	ldr	r3, [pc, #88]	; (8009d84 <low_level_init+0x110>)
 8009d2a:	685b      	ldr	r3, [r3, #4]
 8009d2c:	791a      	ldrb	r2, [r3, #4]
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8009d34:	4b13      	ldr	r3, [pc, #76]	; (8009d84 <low_level_init+0x110>)
 8009d36:	685b      	ldr	r3, [r3, #4]
 8009d38:	795a      	ldrb	r2, [r3, #5]
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8009d46:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009d4e:	f043 030a 	orr.w	r3, r3, #10
 8009d52:	b2da      	uxtb	r2, r3
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8009d5a:	4910      	ldr	r1, [pc, #64]	; (8009d9c <low_level_init+0x128>)
 8009d5c:	4810      	ldr	r0, [pc, #64]	; (8009da0 <low_level_init+0x12c>)
 8009d5e:	f7f7 fd68 	bl	8001832 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8009d62:	480f      	ldr	r0, [pc, #60]	; (8009da0 <low_level_init+0x12c>)
 8009d64:	f7f7 fd97 	bl	8001896 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8009d68:	7bfb      	ldrb	r3, [r7, #15]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d103      	bne.n	8009d76 <low_level_init+0x102>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 8009d6e:	6878      	ldr	r0, [r7, #4]
 8009d70:	f000 fa0a 	bl	800a188 <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8009d74:	e001      	b.n	8009d7a <low_level_init+0x106>
    Error_Handler();
 8009d76:	f7f7 f957 	bl	8001028 <Error_Handler>
}
 8009d7a:	bf00      	nop
 8009d7c:	3710      	adds	r7, #16
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	bd80      	pop	{r7, pc}
 8009d82:	bf00      	nop
 8009d84:	20005530 	.word	0x20005530
 8009d88:	40028000 	.word	0x40028000
 8009d8c:	20000170 	.word	0x20000170
 8009d90:	200000d0 	.word	0x200000d0
 8009d94:	200055e0 	.word	0x200055e0
 8009d98:	0801d00c 	.word	0x0801d00c
 8009d9c:	2000004c 	.word	0x2000004c
 8009da0:	20005618 	.word	0x20005618

08009da4 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8009da4:	b580      	push	{r7, lr}
 8009da6:	b092      	sub	sp, #72	; 0x48
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
 8009dac:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8009dae:	2300      	movs	r3, #0
 8009db0:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8009db2:	2300      	movs	r3, #0
 8009db4:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8009db6:	2300      	movs	r3, #0
 8009db8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8009dbc:	f107 030c 	add.w	r3, r7, #12
 8009dc0:	2230      	movs	r2, #48	; 0x30
 8009dc2:	2100      	movs	r1, #0
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	f00c fd33 	bl	8016830 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8009dca:	f107 030c 	add.w	r3, r7, #12
 8009dce:	2230      	movs	r2, #48	; 0x30
 8009dd0:	2100      	movs	r1, #0
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	f00c fd2c 	bl	8016830 <memset>

  for(q = p; q != NULL; q = q->next)
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	643b      	str	r3, [r7, #64]	; 0x40
 8009ddc:	e045      	b.n	8009e6a <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8009dde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009de0:	2b03      	cmp	r3, #3
 8009de2:	d902      	bls.n	8009dea <low_level_output+0x46>
      return ERR_IF;
 8009de4:	f06f 030b 	mvn.w	r3, #11
 8009de8:	e055      	b.n	8009e96 <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 8009dea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009dec:	6859      	ldr	r1, [r3, #4]
 8009dee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009df0:	4613      	mov	r3, r2
 8009df2:	005b      	lsls	r3, r3, #1
 8009df4:	4413      	add	r3, r2
 8009df6:	009b      	lsls	r3, r3, #2
 8009df8:	3348      	adds	r3, #72	; 0x48
 8009dfa:	443b      	add	r3, r7
 8009dfc:	3b3c      	subs	r3, #60	; 0x3c
 8009dfe:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8009e00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e02:	895b      	ldrh	r3, [r3, #10]
 8009e04:	4619      	mov	r1, r3
 8009e06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009e08:	4613      	mov	r3, r2
 8009e0a:	005b      	lsls	r3, r3, #1
 8009e0c:	4413      	add	r3, r2
 8009e0e:	009b      	lsls	r3, r3, #2
 8009e10:	3348      	adds	r3, #72	; 0x48
 8009e12:	443b      	add	r3, r7
 8009e14:	3b38      	subs	r3, #56	; 0x38
 8009e16:	6019      	str	r1, [r3, #0]

    if(i>0)
 8009e18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d011      	beq.n	8009e42 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8009e1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e20:	1e5a      	subs	r2, r3, #1
 8009e22:	f107 000c 	add.w	r0, r7, #12
 8009e26:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009e28:	460b      	mov	r3, r1
 8009e2a:	005b      	lsls	r3, r3, #1
 8009e2c:	440b      	add	r3, r1
 8009e2e:	009b      	lsls	r3, r3, #2
 8009e30:	18c1      	adds	r1, r0, r3
 8009e32:	4613      	mov	r3, r2
 8009e34:	005b      	lsls	r3, r3, #1
 8009e36:	4413      	add	r3, r2
 8009e38:	009b      	lsls	r3, r3, #2
 8009e3a:	3348      	adds	r3, #72	; 0x48
 8009e3c:	443b      	add	r3, r7
 8009e3e:	3b34      	subs	r3, #52	; 0x34
 8009e40:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8009e42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d109      	bne.n	8009e5e <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8009e4a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009e4c:	4613      	mov	r3, r2
 8009e4e:	005b      	lsls	r3, r3, #1
 8009e50:	4413      	add	r3, r2
 8009e52:	009b      	lsls	r3, r3, #2
 8009e54:	3348      	adds	r3, #72	; 0x48
 8009e56:	443b      	add	r3, r7
 8009e58:	3b34      	subs	r3, #52	; 0x34
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	601a      	str	r2, [r3, #0]
    }

    i++;
 8009e5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e60:	3301      	adds	r3, #1
 8009e62:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8009e64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	643b      	str	r3, [r7, #64]	; 0x40
 8009e6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d1b6      	bne.n	8009dde <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8009e70:	683b      	ldr	r3, [r7, #0]
 8009e72:	891b      	ldrh	r3, [r3, #8]
 8009e74:	461a      	mov	r2, r3
 8009e76:	4b0a      	ldr	r3, [pc, #40]	; (8009ea0 <low_level_output+0xfc>)
 8009e78:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8009e7a:	4a09      	ldr	r2, [pc, #36]	; (8009ea0 <low_level_output+0xfc>)
 8009e7c:	f107 030c 	add.w	r3, r7, #12
 8009e80:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8009e82:	4a07      	ldr	r2, [pc, #28]	; (8009ea0 <low_level_output+0xfc>)
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8009e88:	2214      	movs	r2, #20
 8009e8a:	4905      	ldr	r1, [pc, #20]	; (8009ea0 <low_level_output+0xfc>)
 8009e8c:	4805      	ldr	r0, [pc, #20]	; (8009ea4 <low_level_output+0x100>)
 8009e8e:	f7fa fddb 	bl	8004a48 <HAL_ETH_Transmit>

  return errval;
 8009e92:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8009e96:	4618      	mov	r0, r3
 8009e98:	3748      	adds	r7, #72	; 0x48
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	bd80      	pop	{r7, pc}
 8009e9e:	bf00      	nop
 8009ea0:	200055e0 	.word	0x200055e0
 8009ea4:	20005530 	.word	0x20005530

08009ea8 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b084      	sub	sp, #16
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8009eb4:	4b07      	ldr	r3, [pc, #28]	; (8009ed4 <low_level_input+0x2c>)
 8009eb6:	781b      	ldrb	r3, [r3, #0]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d105      	bne.n	8009ec8 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8009ebc:	f107 030c 	add.w	r3, r7, #12
 8009ec0:	4619      	mov	r1, r3
 8009ec2:	4805      	ldr	r0, [pc, #20]	; (8009ed8 <low_level_input+0x30>)
 8009ec4:	f7fa fe54 	bl	8004b70 <HAL_ETH_ReadData>
  }

  return p;
 8009ec8:	68fb      	ldr	r3, [r7, #12]
}
 8009eca:	4618      	mov	r0, r3
 8009ecc:	3710      	adds	r7, #16
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	bd80      	pop	{r7, pc}
 8009ed2:	bf00      	nop
 8009ed4:	2000552c 	.word	0x2000552c
 8009ed8:	20005530 	.word	0x20005530

08009edc <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8009edc:	b580      	push	{r7, lr}
 8009ede:	b084      	sub	sp, #16
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 8009ee8:	6878      	ldr	r0, [r7, #4]
 8009eea:	f7ff ffdd 	bl	8009ea8 <low_level_input>
 8009eee:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d00a      	beq.n	8009f0c <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	691b      	ldr	r3, [r3, #16]
 8009efa:	6879      	ldr	r1, [r7, #4]
 8009efc:	68f8      	ldr	r0, [r7, #12]
 8009efe:	4798      	blx	r3
 8009f00:	4603      	mov	r3, r0
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d002      	beq.n	8009f0c <ethernetif_input+0x30>
      {
        pbuf_free(p);
 8009f06:	68f8      	ldr	r0, [r7, #12]
 8009f08:	f003 f9c6 	bl	800d298 <pbuf_free>
      }
    }
  } while(p!=NULL);
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d1ea      	bne.n	8009ee8 <ethernetif_input+0xc>
}
 8009f12:	bf00      	nop
 8009f14:	bf00      	nop
 8009f16:	3710      	adds	r7, #16
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	bd80      	pop	{r7, pc}

08009f1c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	b082      	sub	sp, #8
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d106      	bne.n	8009f38 <ethernetif_init+0x1c>
 8009f2a:	4b0e      	ldr	r3, [pc, #56]	; (8009f64 <ethernetif_init+0x48>)
 8009f2c:	f240 127b 	movw	r2, #379	; 0x17b
 8009f30:	490d      	ldr	r1, [pc, #52]	; (8009f68 <ethernetif_init+0x4c>)
 8009f32:	480e      	ldr	r0, [pc, #56]	; (8009f6c <ethernetif_init+0x50>)
 8009f34:	f00c fc84 	bl	8016840 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	2273      	movs	r2, #115	; 0x73
 8009f3c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	2274      	movs	r2, #116	; 0x74
 8009f44:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	4a09      	ldr	r2, [pc, #36]	; (8009f70 <ethernetif_init+0x54>)
 8009f4c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	4a08      	ldr	r2, [pc, #32]	; (8009f74 <ethernetif_init+0x58>)
 8009f52:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8009f54:	6878      	ldr	r0, [r7, #4]
 8009f56:	f7ff fe8d 	bl	8009c74 <low_level_init>

  return ERR_OK;
 8009f5a:	2300      	movs	r3, #0
}
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	3708      	adds	r7, #8
 8009f60:	46bd      	mov	sp, r7
 8009f62:	bd80      	pop	{r7, pc}
 8009f64:	08017f30 	.word	0x08017f30
 8009f68:	08017f4c 	.word	0x08017f4c
 8009f6c:	08017f5c 	.word	0x08017f5c
 8009f70:	08014a85 	.word	0x08014a85
 8009f74:	08009da5 	.word	0x08009da5

08009f78 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b084      	sub	sp, #16
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8009f84:	68f9      	ldr	r1, [r7, #12]
 8009f86:	4807      	ldr	r0, [pc, #28]	; (8009fa4 <pbuf_free_custom+0x2c>)
 8009f88:	f002 faec 	bl	800c564 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8009f8c:	4b06      	ldr	r3, [pc, #24]	; (8009fa8 <pbuf_free_custom+0x30>)
 8009f8e:	781b      	ldrb	r3, [r3, #0]
 8009f90:	2b01      	cmp	r3, #1
 8009f92:	d102      	bne.n	8009f9a <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8009f94:	4b04      	ldr	r3, [pc, #16]	; (8009fa8 <pbuf_free_custom+0x30>)
 8009f96:	2200      	movs	r2, #0
 8009f98:	701a      	strb	r2, [r3, #0]
  }
}
 8009f9a:	bf00      	nop
 8009f9c:	3710      	adds	r7, #16
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	bd80      	pop	{r7, pc}
 8009fa2:	bf00      	nop
 8009fa4:	0801d00c 	.word	0x0801d00c
 8009fa8:	2000552c 	.word	0x2000552c

08009fac <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8009fac:	b580      	push	{r7, lr}
 8009fae:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8009fb0:	f7f9 fe1a 	bl	8003be8 <HAL_GetTick>
 8009fb4:	4603      	mov	r3, r0
}
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	bd80      	pop	{r7, pc}
	...

08009fbc <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b08e      	sub	sp, #56	; 0x38
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009fc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009fc8:	2200      	movs	r2, #0
 8009fca:	601a      	str	r2, [r3, #0]
 8009fcc:	605a      	str	r2, [r3, #4]
 8009fce:	609a      	str	r2, [r3, #8]
 8009fd0:	60da      	str	r2, [r3, #12]
 8009fd2:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	4a3f      	ldr	r2, [pc, #252]	; (800a0d8 <HAL_ETH_MspInit+0x11c>)
 8009fda:	4293      	cmp	r3, r2
 8009fdc:	d178      	bne.n	800a0d0 <HAL_ETH_MspInit+0x114>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8009fde:	4b3f      	ldr	r3, [pc, #252]	; (800a0dc <HAL_ETH_MspInit+0x120>)
 8009fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fe2:	4a3e      	ldr	r2, [pc, #248]	; (800a0dc <HAL_ETH_MspInit+0x120>)
 8009fe4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8009fea:	4b3c      	ldr	r3, [pc, #240]	; (800a0dc <HAL_ETH_MspInit+0x120>)
 8009fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ff2:	623b      	str	r3, [r7, #32]
 8009ff4:	6a3b      	ldr	r3, [r7, #32]
 8009ff6:	4b39      	ldr	r3, [pc, #228]	; (800a0dc <HAL_ETH_MspInit+0x120>)
 8009ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ffa:	4a38      	ldr	r2, [pc, #224]	; (800a0dc <HAL_ETH_MspInit+0x120>)
 8009ffc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a000:	6313      	str	r3, [r2, #48]	; 0x30
 800a002:	4b36      	ldr	r3, [pc, #216]	; (800a0dc <HAL_ETH_MspInit+0x120>)
 800a004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a006:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a00a:	61fb      	str	r3, [r7, #28]
 800a00c:	69fb      	ldr	r3, [r7, #28]
 800a00e:	4b33      	ldr	r3, [pc, #204]	; (800a0dc <HAL_ETH_MspInit+0x120>)
 800a010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a012:	4a32      	ldr	r2, [pc, #200]	; (800a0dc <HAL_ETH_MspInit+0x120>)
 800a014:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a018:	6313      	str	r3, [r2, #48]	; 0x30
 800a01a:	4b30      	ldr	r3, [pc, #192]	; (800a0dc <HAL_ETH_MspInit+0x120>)
 800a01c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a01e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a022:	61bb      	str	r3, [r7, #24]
 800a024:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800a026:	4b2d      	ldr	r3, [pc, #180]	; (800a0dc <HAL_ETH_MspInit+0x120>)
 800a028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a02a:	4a2c      	ldr	r2, [pc, #176]	; (800a0dc <HAL_ETH_MspInit+0x120>)
 800a02c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a030:	6313      	str	r3, [r2, #48]	; 0x30
 800a032:	4b2a      	ldr	r3, [pc, #168]	; (800a0dc <HAL_ETH_MspInit+0x120>)
 800a034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a036:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a03a:	617b      	str	r3, [r7, #20]
 800a03c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a03e:	4b27      	ldr	r3, [pc, #156]	; (800a0dc <HAL_ETH_MspInit+0x120>)
 800a040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a042:	4a26      	ldr	r2, [pc, #152]	; (800a0dc <HAL_ETH_MspInit+0x120>)
 800a044:	f043 0304 	orr.w	r3, r3, #4
 800a048:	6313      	str	r3, [r2, #48]	; 0x30
 800a04a:	4b24      	ldr	r3, [pc, #144]	; (800a0dc <HAL_ETH_MspInit+0x120>)
 800a04c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a04e:	f003 0304 	and.w	r3, r3, #4
 800a052:	613b      	str	r3, [r7, #16]
 800a054:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a056:	4b21      	ldr	r3, [pc, #132]	; (800a0dc <HAL_ETH_MspInit+0x120>)
 800a058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a05a:	4a20      	ldr	r2, [pc, #128]	; (800a0dc <HAL_ETH_MspInit+0x120>)
 800a05c:	f043 0301 	orr.w	r3, r3, #1
 800a060:	6313      	str	r3, [r2, #48]	; 0x30
 800a062:	4b1e      	ldr	r3, [pc, #120]	; (800a0dc <HAL_ETH_MspInit+0x120>)
 800a064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a066:	f003 0301 	and.w	r3, r3, #1
 800a06a:	60fb      	str	r3, [r7, #12]
 800a06c:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PA2     ------> ETH_MDIO
    PC5     ------> ETH_RXD1
    PA7     ------> ETH_CRS_DV
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_11;
 800a06e:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 800a072:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a074:	2302      	movs	r3, #2
 800a076:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a078:	2300      	movs	r3, #0
 800a07a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a07c:	2303      	movs	r3, #3
 800a07e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a080:	230b      	movs	r3, #11
 800a082:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800a084:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a088:	4619      	mov	r1, r3
 800a08a:	4815      	ldr	r0, [pc, #84]	; (800a0e0 <HAL_ETH_MspInit+0x124>)
 800a08c:	f7fb fc9a 	bl	80059c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800a090:	2332      	movs	r3, #50	; 0x32
 800a092:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a094:	2302      	movs	r3, #2
 800a096:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a098:	2300      	movs	r3, #0
 800a09a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a09c:	2303      	movs	r3, #3
 800a09e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a0a0:	230b      	movs	r3, #11
 800a0a2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a0a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a0a8:	4619      	mov	r1, r3
 800a0aa:	480e      	ldr	r0, [pc, #56]	; (800a0e4 <HAL_ETH_MspInit+0x128>)
 800a0ac:	f7fb fc8a 	bl	80059c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800a0b0:	2386      	movs	r3, #134	; 0x86
 800a0b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a0b4:	2302      	movs	r3, #2
 800a0b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a0bc:	2303      	movs	r3, #3
 800a0be:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a0c0:	230b      	movs	r3, #11
 800a0c2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a0c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a0c8:	4619      	mov	r1, r3
 800a0ca:	4807      	ldr	r0, [pc, #28]	; (800a0e8 <HAL_ETH_MspInit+0x12c>)
 800a0cc:	f7fb fc7a 	bl	80059c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800a0d0:	bf00      	nop
 800a0d2:	3738      	adds	r7, #56	; 0x38
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	bd80      	pop	{r7, pc}
 800a0d8:	40028000 	.word	0x40028000
 800a0dc:	40023800 	.word	0x40023800
 800a0e0:	40021800 	.word	0x40021800
 800a0e4:	40020800 	.word	0x40020800
 800a0e8:	40020000 	.word	0x40020000

0800a0ec <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800a0f0:	4802      	ldr	r0, [pc, #8]	; (800a0fc <ETH_PHY_IO_Init+0x10>)
 800a0f2:	f7fb f80d 	bl	8005110 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800a0f6:	2300      	movs	r3, #0
}
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	bd80      	pop	{r7, pc}
 800a0fc:	20005530 	.word	0x20005530

0800a100 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800a100:	b480      	push	{r7}
 800a102:	af00      	add	r7, sp, #0
  return 0;
 800a104:	2300      	movs	r3, #0
}
 800a106:	4618      	mov	r0, r3
 800a108:	46bd      	mov	sp, r7
 800a10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10e:	4770      	bx	lr

0800a110 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800a110:	b580      	push	{r7, lr}
 800a112:	b084      	sub	sp, #16
 800a114:	af00      	add	r7, sp, #0
 800a116:	60f8      	str	r0, [r7, #12]
 800a118:	60b9      	str	r1, [r7, #8]
 800a11a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	68ba      	ldr	r2, [r7, #8]
 800a120:	68f9      	ldr	r1, [r7, #12]
 800a122:	4807      	ldr	r0, [pc, #28]	; (800a140 <ETH_PHY_IO_ReadReg+0x30>)
 800a124:	f7fa fe5c 	bl	8004de0 <HAL_ETH_ReadPHYRegister>
 800a128:	4603      	mov	r3, r0
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d002      	beq.n	800a134 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800a12e:	f04f 33ff 	mov.w	r3, #4294967295
 800a132:	e000      	b.n	800a136 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800a134:	2300      	movs	r3, #0
}
 800a136:	4618      	mov	r0, r3
 800a138:	3710      	adds	r7, #16
 800a13a:	46bd      	mov	sp, r7
 800a13c:	bd80      	pop	{r7, pc}
 800a13e:	bf00      	nop
 800a140:	20005530 	.word	0x20005530

0800a144 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800a144:	b580      	push	{r7, lr}
 800a146:	b084      	sub	sp, #16
 800a148:	af00      	add	r7, sp, #0
 800a14a:	60f8      	str	r0, [r7, #12]
 800a14c:	60b9      	str	r1, [r7, #8]
 800a14e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	68ba      	ldr	r2, [r7, #8]
 800a154:	68f9      	ldr	r1, [r7, #12]
 800a156:	4807      	ldr	r0, [pc, #28]	; (800a174 <ETH_PHY_IO_WriteReg+0x30>)
 800a158:	f7fa fe8d 	bl	8004e76 <HAL_ETH_WritePHYRegister>
 800a15c:	4603      	mov	r3, r0
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d002      	beq.n	800a168 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800a162:	f04f 33ff 	mov.w	r3, #4294967295
 800a166:	e000      	b.n	800a16a <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800a168:	2300      	movs	r3, #0
}
 800a16a:	4618      	mov	r0, r3
 800a16c:	3710      	adds	r7, #16
 800a16e:	46bd      	mov	sp, r7
 800a170:	bd80      	pop	{r7, pc}
 800a172:	bf00      	nop
 800a174:	20005530 	.word	0x20005530

0800a178 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800a178:	b580      	push	{r7, lr}
 800a17a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800a17c:	f7f9 fd34 	bl	8003be8 <HAL_GetTick>
 800a180:	4603      	mov	r3, r0
}
 800a182:	4618      	mov	r0, r3
 800a184:	bd80      	pop	{r7, pc}
	...

0800a188 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b0a0      	sub	sp, #128	; 0x80
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800a190:	f107 030c 	add.w	r3, r7, #12
 800a194:	2264      	movs	r2, #100	; 0x64
 800a196:	2100      	movs	r1, #0
 800a198:	4618      	mov	r0, r3
 800a19a:	f00c fb49 	bl	8016830 <memset>
  int32_t PHYLinkState = 0;
 800a19e:	2300      	movs	r3, #0
 800a1a0:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	67bb      	str	r3, [r7, #120]	; 0x78
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800a1ae:	483a      	ldr	r0, [pc, #232]	; (800a298 <ethernet_link_check_state+0x110>)
 800a1b0:	f7f7 fc19 	bl	80019e6 <LAN8742_GetLinkState>
 800a1b4:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a1bc:	089b      	lsrs	r3, r3, #2
 800a1be:	f003 0301 	and.w	r3, r3, #1
 800a1c2:	b2db      	uxtb	r3, r3
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d00c      	beq.n	800a1e2 <ethernet_link_check_state+0x5a>
 800a1c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a1ca:	2b01      	cmp	r3, #1
 800a1cc:	dc09      	bgt.n	800a1e2 <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 800a1ce:	4833      	ldr	r0, [pc, #204]	; (800a29c <ethernet_link_check_state+0x114>)
 800a1d0:	f7fa fbe1 	bl	8004996 <HAL_ETH_Stop>
    netif_set_down(netif);
 800a1d4:	6878      	ldr	r0, [r7, #4]
 800a1d6:	f002 fc49 	bl	800ca6c <netif_set_down>
    netif_set_link_down(netif);
 800a1da:	6878      	ldr	r0, [r7, #4]
 800a1dc:	f002 fcac 	bl	800cb38 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 800a1e0:	e055      	b.n	800a28e <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a1e8:	f003 0304 	and.w	r3, r3, #4
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d14e      	bne.n	800a28e <ethernet_link_check_state+0x106>
 800a1f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a1f2:	2b01      	cmp	r3, #1
 800a1f4:	dd4b      	ble.n	800a28e <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 800a1f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a1f8:	3b02      	subs	r3, #2
 800a1fa:	2b03      	cmp	r3, #3
 800a1fc:	d82a      	bhi.n	800a254 <ethernet_link_check_state+0xcc>
 800a1fe:	a201      	add	r2, pc, #4	; (adr r2, 800a204 <ethernet_link_check_state+0x7c>)
 800a200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a204:	0800a215 	.word	0x0800a215
 800a208:	0800a227 	.word	0x0800a227
 800a20c:	0800a237 	.word	0x0800a237
 800a210:	0800a247 	.word	0x0800a247
      duplex = ETH_FULLDUPLEX_MODE;
 800a214:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a218:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800a21a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a21e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800a220:	2301      	movs	r3, #1
 800a222:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800a224:	e017      	b.n	800a256 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800a226:	2300      	movs	r3, #0
 800a228:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800a22a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a22e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800a230:	2301      	movs	r3, #1
 800a232:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800a234:	e00f      	b.n	800a256 <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 800a236:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a23a:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800a23c:	2300      	movs	r3, #0
 800a23e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800a240:	2301      	movs	r3, #1
 800a242:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800a244:	e007      	b.n	800a256 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800a246:	2300      	movs	r3, #0
 800a248:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800a24a:	2300      	movs	r3, #0
 800a24c:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800a24e:	2301      	movs	r3, #1
 800a250:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800a252:	e000      	b.n	800a256 <ethernet_link_check_state+0xce>
      break;
 800a254:	bf00      	nop
    if(linkchanged)
 800a256:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d018      	beq.n	800a28e <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800a25c:	f107 030c 	add.w	r3, r7, #12
 800a260:	4619      	mov	r1, r3
 800a262:	480e      	ldr	r0, [pc, #56]	; (800a29c <ethernet_link_check_state+0x114>)
 800a264:	f7fa fe50 	bl	8004f08 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800a268:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a26a:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 800a26c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a26e:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800a270:	f107 030c 	add.w	r3, r7, #12
 800a274:	4619      	mov	r1, r3
 800a276:	4809      	ldr	r0, [pc, #36]	; (800a29c <ethernet_link_check_state+0x114>)
 800a278:	f7fa ff30 	bl	80050dc <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 800a27c:	4807      	ldr	r0, [pc, #28]	; (800a29c <ethernet_link_check_state+0x114>)
 800a27e:	f7fa fb2b 	bl	80048d8 <HAL_ETH_Start>
      netif_set_up(netif);
 800a282:	6878      	ldr	r0, [r7, #4]
 800a284:	f002 fb86 	bl	800c994 <netif_set_up>
      netif_set_link_up(netif);
 800a288:	6878      	ldr	r0, [r7, #4]
 800a28a:	f002 fc21 	bl	800cad0 <netif_set_link_up>
}
 800a28e:	bf00      	nop
 800a290:	3780      	adds	r7, #128	; 0x80
 800a292:	46bd      	mov	sp, r7
 800a294:	bd80      	pop	{r7, pc}
 800a296:	bf00      	nop
 800a298:	20005618 	.word	0x20005618
 800a29c:	20005530 	.word	0x20005530

0800a2a0 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	b086      	sub	sp, #24
 800a2a4:	af02      	add	r7, sp, #8
 800a2a6:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800a2a8:	4812      	ldr	r0, [pc, #72]	; (800a2f4 <HAL_ETH_RxAllocateCallback+0x54>)
 800a2aa:	f002 f8ed 	bl	800c488 <memp_malloc_pool>
 800a2ae:	60f8      	str	r0, [r7, #12]
  if (p)
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d014      	beq.n	800a2e0 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	f103 0220 	add.w	r2, r3, #32
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	4a0d      	ldr	r2, [pc, #52]	; (800a2f8 <HAL_ETH_RxAllocateCallback+0x58>)
 800a2c4:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800a2ce:	9201      	str	r2, [sp, #4]
 800a2d0:	9300      	str	r3, [sp, #0]
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	2241      	movs	r2, #65	; 0x41
 800a2d6:	2100      	movs	r1, #0
 800a2d8:	2000      	movs	r0, #0
 800a2da:	f002 fe23 	bl	800cf24 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800a2de:	e005      	b.n	800a2ec <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800a2e0:	4b06      	ldr	r3, [pc, #24]	; (800a2fc <HAL_ETH_RxAllocateCallback+0x5c>)
 800a2e2:	2201      	movs	r2, #1
 800a2e4:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	2200      	movs	r2, #0
 800a2ea:	601a      	str	r2, [r3, #0]
}
 800a2ec:	bf00      	nop
 800a2ee:	3710      	adds	r7, #16
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	bd80      	pop	{r7, pc}
 800a2f4:	0801d00c 	.word	0x0801d00c
 800a2f8:	08009f79 	.word	0x08009f79
 800a2fc:	2000552c 	.word	0x2000552c

0800a300 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800a300:	b580      	push	{r7, lr}
 800a302:	b088      	sub	sp, #32
 800a304:	af00      	add	r7, sp, #0
 800a306:	60f8      	str	r0, [r7, #12]
 800a308:	60b9      	str	r1, [r7, #8]
 800a30a:	607a      	str	r2, [r7, #4]
 800a30c:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800a312:	68bb      	ldr	r3, [r7, #8]
 800a314:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800a316:	2300      	movs	r3, #0
 800a318:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	3b20      	subs	r3, #32
 800a31e:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 800a320:	69fb      	ldr	r3, [r7, #28]
 800a322:	2200      	movs	r2, #0
 800a324:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800a326:	69fb      	ldr	r3, [r7, #28]
 800a328:	2200      	movs	r2, #0
 800a32a:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800a32c:	69fb      	ldr	r3, [r7, #28]
 800a32e:	887a      	ldrh	r2, [r7, #2]
 800a330:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800a332:	69bb      	ldr	r3, [r7, #24]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d103      	bne.n	800a342 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800a33a:	69bb      	ldr	r3, [r7, #24]
 800a33c:	69fa      	ldr	r2, [r7, #28]
 800a33e:	601a      	str	r2, [r3, #0]
 800a340:	e003      	b.n	800a34a <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800a342:	697b      	ldr	r3, [r7, #20]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	69fa      	ldr	r2, [r7, #28]
 800a348:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800a34a:	697b      	ldr	r3, [r7, #20]
 800a34c:	69fa      	ldr	r2, [r7, #28]
 800a34e:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800a350:	69bb      	ldr	r3, [r7, #24]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	61fb      	str	r3, [r7, #28]
 800a356:	e009      	b.n	800a36c <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800a358:	69fb      	ldr	r3, [r7, #28]
 800a35a:	891a      	ldrh	r2, [r3, #8]
 800a35c:	887b      	ldrh	r3, [r7, #2]
 800a35e:	4413      	add	r3, r2
 800a360:	b29a      	uxth	r2, r3
 800a362:	69fb      	ldr	r3, [r7, #28]
 800a364:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800a366:	69fb      	ldr	r3, [r7, #28]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	61fb      	str	r3, [r7, #28]
 800a36c:	69fb      	ldr	r3, [r7, #28]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d1f2      	bne.n	800a358 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 800a372:	887b      	ldrh	r3, [r7, #2]
 800a374:	4619      	mov	r1, r3
 800a376:	6878      	ldr	r0, [r7, #4]
 800a378:	f7ff fc50 	bl	8009c1c <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 800a37c:	bf00      	nop
 800a37e:	3720      	adds	r7, #32
 800a380:	46bd      	mov	sp, r7
 800a382:	bd80      	pop	{r7, pc}

0800a384 <msg_generate_packet_id>:
 * @param client MQTT client
 * @return New packet identifier, range 1 to 65535
 */
static u16_t
msg_generate_packet_id(mqtt_client_t *client)
{
 800a384:	b480      	push	{r7}
 800a386:	b083      	sub	sp, #12
 800a388:	af00      	add	r7, sp, #0
 800a38a:	6078      	str	r0, [r7, #4]
  client->pkt_id_seq++;
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	88db      	ldrh	r3, [r3, #6]
 800a390:	3301      	adds	r3, #1
 800a392:	b29a      	uxth	r2, r3
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	80da      	strh	r2, [r3, #6]
  if (client->pkt_id_seq == 0) {
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	88db      	ldrh	r3, [r3, #6]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d105      	bne.n	800a3ac <msg_generate_packet_id+0x28>
    client->pkt_id_seq++;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	88db      	ldrh	r3, [r3, #6]
 800a3a4:	3301      	adds	r3, #1
 800a3a6:	b29a      	uxth	r2, r3
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	80da      	strh	r2, [r3, #6]
  }
  return client->pkt_id_seq;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	88db      	ldrh	r3, [r3, #6]
}
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	370c      	adds	r7, #12
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ba:	4770      	bx	lr

0800a3bc <mqtt_ringbuf_put>:
/* Output ring buffer */

/** Add single item to ring buffer */
static void
mqtt_ringbuf_put(struct mqtt_ringbuf_t *rb, u8_t item)
{
 800a3bc:	b480      	push	{r7}
 800a3be:	b083      	sub	sp, #12
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
 800a3c4:	460b      	mov	r3, r1
 800a3c6:	70fb      	strb	r3, [r7, #3]
  rb->buf[rb->put] = item;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	881b      	ldrh	r3, [r3, #0]
 800a3cc:	461a      	mov	r2, r3
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	4413      	add	r3, r2
 800a3d2:	78fa      	ldrb	r2, [r7, #3]
 800a3d4:	711a      	strb	r2, [r3, #4]
  rb->put++;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	881b      	ldrh	r3, [r3, #0]
 800a3da:	3301      	adds	r3, #1
 800a3dc:	b29a      	uxth	r2, r3
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	801a      	strh	r2, [r3, #0]
  if (rb->put >= MQTT_OUTPUT_RINGBUF_SIZE) {
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	881b      	ldrh	r3, [r3, #0]
 800a3e6:	2bff      	cmp	r3, #255	; 0xff
 800a3e8:	d902      	bls.n	800a3f0 <mqtt_ringbuf_put+0x34>
    rb->put = 0;
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	2200      	movs	r2, #0
 800a3ee:	801a      	strh	r2, [r3, #0]
  }
}
 800a3f0:	bf00      	nop
 800a3f2:	370c      	adds	r7, #12
 800a3f4:	46bd      	mov	sp, r7
 800a3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fa:	4770      	bx	lr

0800a3fc <mqtt_ringbuf_get_ptr>:

/** Return pointer to ring buffer get position */
static u8_t *
mqtt_ringbuf_get_ptr(struct mqtt_ringbuf_t *rb)
{
 800a3fc:	b480      	push	{r7}
 800a3fe:	b083      	sub	sp, #12
 800a400:	af00      	add	r7, sp, #0
 800a402:	6078      	str	r0, [r7, #4]
  return &rb->buf[rb->get];
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	885b      	ldrh	r3, [r3, #2]
 800a408:	461a      	mov	r2, r3
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	4413      	add	r3, r2
 800a40e:	3304      	adds	r3, #4
}
 800a410:	4618      	mov	r0, r3
 800a412:	370c      	adds	r7, #12
 800a414:	46bd      	mov	sp, r7
 800a416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41a:	4770      	bx	lr

0800a41c <mqtt_ringbuf_advance_get_idx>:

static void
mqtt_ringbuf_advance_get_idx(struct mqtt_ringbuf_t *rb, u16_t len)
{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b082      	sub	sp, #8
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
 800a424:	460b      	mov	r3, r1
 800a426:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("mqtt_ringbuf_advance_get_idx: len < MQTT_OUTPUT_RINGBUF_SIZE", len < MQTT_OUTPUT_RINGBUF_SIZE);
 800a428:	887b      	ldrh	r3, [r7, #2]
 800a42a:	2bff      	cmp	r3, #255	; 0xff
 800a42c:	d905      	bls.n	800a43a <mqtt_ringbuf_advance_get_idx+0x1e>
 800a42e:	4b0e      	ldr	r3, [pc, #56]	; (800a468 <mqtt_ringbuf_advance_get_idx+0x4c>)
 800a430:	22cb      	movs	r2, #203	; 0xcb
 800a432:	490e      	ldr	r1, [pc, #56]	; (800a46c <mqtt_ringbuf_advance_get_idx+0x50>)
 800a434:	480e      	ldr	r0, [pc, #56]	; (800a470 <mqtt_ringbuf_advance_get_idx+0x54>)
 800a436:	f00c fa03 	bl	8016840 <iprintf>

  rb->get += len;
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	885a      	ldrh	r2, [r3, #2]
 800a43e:	887b      	ldrh	r3, [r7, #2]
 800a440:	4413      	add	r3, r2
 800a442:	b29a      	uxth	r2, r3
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	805a      	strh	r2, [r3, #2]
  if (rb->get >= MQTT_OUTPUT_RINGBUF_SIZE) {
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	885b      	ldrh	r3, [r3, #2]
 800a44c:	2bff      	cmp	r3, #255	; 0xff
 800a44e:	d906      	bls.n	800a45e <mqtt_ringbuf_advance_get_idx+0x42>
    rb->get = rb->get - MQTT_OUTPUT_RINGBUF_SIZE;
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	885b      	ldrh	r3, [r3, #2]
 800a454:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800a458:	b29a      	uxth	r2, r3
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	805a      	strh	r2, [r3, #2]
  }
}
 800a45e:	bf00      	nop
 800a460:	3708      	adds	r7, #8
 800a462:	46bd      	mov	sp, r7
 800a464:	bd80      	pop	{r7, pc}
 800a466:	bf00      	nop
 800a468:	08017f84 	.word	0x08017f84
 800a46c:	08017fbc 	.word	0x08017fbc
 800a470:	08017ffc 	.word	0x08017ffc

0800a474 <mqtt_ringbuf_len>:

/** Return number of bytes in ring buffer */
static u16_t
mqtt_ringbuf_len(struct mqtt_ringbuf_t *rb)
{
 800a474:	b480      	push	{r7}
 800a476:	b085      	sub	sp, #20
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
  u32_t len = rb->put - rb->get;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	881b      	ldrh	r3, [r3, #0]
 800a480:	461a      	mov	r2, r3
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	885b      	ldrh	r3, [r3, #2]
 800a486:	1ad3      	subs	r3, r2, r3
 800a488:	60fb      	str	r3, [r7, #12]
  if (len > 0xFFFF) {
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a490:	d303      	bcc.n	800a49a <mqtt_ringbuf_len+0x26>
    len += MQTT_OUTPUT_RINGBUF_SIZE;
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800a498:	60fb      	str	r3, [r7, #12]
  }
  return (u16_t)len;
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	b29b      	uxth	r3, r3
}
 800a49e:	4618      	mov	r0, r3
 800a4a0:	3714      	adds	r7, #20
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a8:	4770      	bx	lr
	...

0800a4ac <mqtt_output_send>:
 * @param rb Output ring buffer
 * @param tpcb TCP connection handle
 */
static void
mqtt_output_send(struct mqtt_ringbuf_t *rb, struct altcp_pcb *tpcb)
{
 800a4ac:	b590      	push	{r4, r7, lr}
 800a4ae:	b085      	sub	sp, #20
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6078      	str	r0, [r7, #4]
 800a4b4:	6039      	str	r1, [r7, #0]
  err_t err;
  u8_t wrap = 0;
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	73bb      	strb	r3, [r7, #14]
  u16_t ringbuf_lin_len = mqtt_ringbuf_linear_read_length(rb);
 800a4ba:	6878      	ldr	r0, [r7, #4]
 800a4bc:	f7ff ffda 	bl	800a474 <mqtt_ringbuf_len>
 800a4c0:	4603      	mov	r3, r0
 800a4c2:	461a      	mov	r2, r3
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	885b      	ldrh	r3, [r3, #2]
 800a4c8:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800a4cc:	429a      	cmp	r2, r3
 800a4ce:	da04      	bge.n	800a4da <mqtt_output_send+0x2e>
 800a4d0:	6878      	ldr	r0, [r7, #4]
 800a4d2:	f7ff ffcf 	bl	800a474 <mqtt_ringbuf_len>
 800a4d6:	4603      	mov	r3, r0
 800a4d8:	e004      	b.n	800a4e4 <mqtt_output_send+0x38>
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	885b      	ldrh	r3, [r3, #2]
 800a4de:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800a4e2:	b29b      	uxth	r3, r3
 800a4e4:	817b      	strh	r3, [r7, #10]
  u16_t send_len = altcp_sndbuf(tpcb);
 800a4e6:	683b      	ldr	r3, [r7, #0]
 800a4e8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a4ec:	81bb      	strh	r3, [r7, #12]
  LWIP_ASSERT("mqtt_output_send: tpcb != NULL", tpcb != NULL);
 800a4ee:	683b      	ldr	r3, [r7, #0]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d105      	bne.n	800a500 <mqtt_output_send+0x54>
 800a4f4:	4b44      	ldr	r3, [pc, #272]	; (800a608 <mqtt_output_send+0x15c>)
 800a4f6:	22f0      	movs	r2, #240	; 0xf0
 800a4f8:	4944      	ldr	r1, [pc, #272]	; (800a60c <mqtt_output_send+0x160>)
 800a4fa:	4845      	ldr	r0, [pc, #276]	; (800a610 <mqtt_output_send+0x164>)
 800a4fc:	f00c f9a0 	bl	8016840 <iprintf>

  if (send_len == 0 || ringbuf_lin_len == 0) {
 800a500:	89bb      	ldrh	r3, [r7, #12]
 800a502:	2b00      	cmp	r3, #0
 800a504:	d07c      	beq.n	800a600 <mqtt_output_send+0x154>
 800a506:	897b      	ldrh	r3, [r7, #10]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d079      	beq.n	800a600 <mqtt_output_send+0x154>
  }

  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_output_send: tcp_sndbuf: %d bytes, ringbuf_linear_available: %d, get %d, put %d\n",
                                 send_len, ringbuf_lin_len, rb->get, rb->put));

  if (send_len > ringbuf_lin_len) {
 800a50c:	89ba      	ldrh	r2, [r7, #12]
 800a50e:	897b      	ldrh	r3, [r7, #10]
 800a510:	429a      	cmp	r2, r3
 800a512:	d90d      	bls.n	800a530 <mqtt_output_send+0x84>
    /* Space in TCP output buffer is larger than available in ring buffer linear portion */
    send_len = ringbuf_lin_len;
 800a514:	897b      	ldrh	r3, [r7, #10]
 800a516:	81bb      	strh	r3, [r7, #12]
    /* Wrap around if more data in ring buffer after linear portion */
    wrap = (mqtt_ringbuf_len(rb) > ringbuf_lin_len);
 800a518:	6878      	ldr	r0, [r7, #4]
 800a51a:	f7ff ffab 	bl	800a474 <mqtt_ringbuf_len>
 800a51e:	4603      	mov	r3, r0
 800a520:	461a      	mov	r2, r3
 800a522:	897b      	ldrh	r3, [r7, #10]
 800a524:	4293      	cmp	r3, r2
 800a526:	bf34      	ite	cc
 800a528:	2301      	movcc	r3, #1
 800a52a:	2300      	movcs	r3, #0
 800a52c:	b2db      	uxtb	r3, r3
 800a52e:	73bb      	strb	r3, [r7, #14]
  }
  err = altcp_write(tpcb, mqtt_ringbuf_get_ptr(rb), send_len, TCP_WRITE_FLAG_COPY | (wrap ? TCP_WRITE_FLAG_MORE : 0));
 800a530:	6878      	ldr	r0, [r7, #4]
 800a532:	f7ff ff63 	bl	800a3fc <mqtt_ringbuf_get_ptr>
 800a536:	4601      	mov	r1, r0
 800a538:	7bbb      	ldrb	r3, [r7, #14]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d001      	beq.n	800a542 <mqtt_output_send+0x96>
 800a53e:	2303      	movs	r3, #3
 800a540:	e000      	b.n	800a544 <mqtt_output_send+0x98>
 800a542:	2301      	movs	r3, #1
 800a544:	89ba      	ldrh	r2, [r7, #12]
 800a546:	6838      	ldr	r0, [r7, #0]
 800a548:	f007 fdb2 	bl	80120b0 <tcp_write>
 800a54c:	4603      	mov	r3, r0
 800a54e:	73fb      	strb	r3, [r7, #15]
  if ((err == ERR_OK) && wrap) {
 800a550:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a554:	2b00      	cmp	r3, #0
 800a556:	d146      	bne.n	800a5e6 <mqtt_output_send+0x13a>
 800a558:	7bbb      	ldrb	r3, [r7, #14]
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d043      	beq.n	800a5e6 <mqtt_output_send+0x13a>
    mqtt_ringbuf_advance_get_idx(rb, send_len);
 800a55e:	89bb      	ldrh	r3, [r7, #12]
 800a560:	4619      	mov	r1, r3
 800a562:	6878      	ldr	r0, [r7, #4]
 800a564:	f7ff ff5a 	bl	800a41c <mqtt_ringbuf_advance_get_idx>
    /* Use the lesser one of ring buffer linear length and TCP send buffer size */
    send_len = LWIP_MIN(altcp_sndbuf(tpcb), mqtt_ringbuf_linear_read_length(rb));
 800a568:	683b      	ldr	r3, [r7, #0]
 800a56a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a56e:	461c      	mov	r4, r3
 800a570:	6878      	ldr	r0, [r7, #4]
 800a572:	f7ff ff7f 	bl	800a474 <mqtt_ringbuf_len>
 800a576:	4603      	mov	r3, r0
 800a578:	461a      	mov	r2, r3
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	885b      	ldrh	r3, [r3, #2]
 800a57e:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800a582:	429a      	cmp	r2, r3
 800a584:	da04      	bge.n	800a590 <mqtt_output_send+0xe4>
 800a586:	6878      	ldr	r0, [r7, #4]
 800a588:	f7ff ff74 	bl	800a474 <mqtt_ringbuf_len>
 800a58c:	4603      	mov	r3, r0
 800a58e:	e003      	b.n	800a598 <mqtt_output_send+0xec>
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	885b      	ldrh	r3, [r3, #2]
 800a594:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800a598:	42a3      	cmp	r3, r4
 800a59a:	dd03      	ble.n	800a5a4 <mqtt_output_send+0xf8>
 800a59c:	683b      	ldr	r3, [r7, #0]
 800a59e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a5a2:	e014      	b.n	800a5ce <mqtt_output_send+0x122>
 800a5a4:	6878      	ldr	r0, [r7, #4]
 800a5a6:	f7ff ff65 	bl	800a474 <mqtt_ringbuf_len>
 800a5aa:	4603      	mov	r3, r0
 800a5ac:	461a      	mov	r2, r3
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	885b      	ldrh	r3, [r3, #2]
 800a5b2:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800a5b6:	429a      	cmp	r2, r3
 800a5b8:	da04      	bge.n	800a5c4 <mqtt_output_send+0x118>
 800a5ba:	6878      	ldr	r0, [r7, #4]
 800a5bc:	f7ff ff5a 	bl	800a474 <mqtt_ringbuf_len>
 800a5c0:	4603      	mov	r3, r0
 800a5c2:	e004      	b.n	800a5ce <mqtt_output_send+0x122>
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	885b      	ldrh	r3, [r3, #2]
 800a5c8:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800a5cc:	b29b      	uxth	r3, r3
 800a5ce:	81bb      	strh	r3, [r7, #12]
    err = altcp_write(tpcb, mqtt_ringbuf_get_ptr(rb), send_len, TCP_WRITE_FLAG_COPY);
 800a5d0:	6878      	ldr	r0, [r7, #4]
 800a5d2:	f7ff ff13 	bl	800a3fc <mqtt_ringbuf_get_ptr>
 800a5d6:	4601      	mov	r1, r0
 800a5d8:	89ba      	ldrh	r2, [r7, #12]
 800a5da:	2301      	movs	r3, #1
 800a5dc:	6838      	ldr	r0, [r7, #0]
 800a5de:	f007 fd67 	bl	80120b0 <tcp_write>
 800a5e2:	4603      	mov	r3, r0
 800a5e4:	73fb      	strb	r3, [r7, #15]
  }

  if (err == ERR_OK) {
 800a5e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d109      	bne.n	800a602 <mqtt_output_send+0x156>
    mqtt_ringbuf_advance_get_idx(rb, send_len);
 800a5ee:	89bb      	ldrh	r3, [r7, #12]
 800a5f0:	4619      	mov	r1, r3
 800a5f2:	6878      	ldr	r0, [r7, #4]
 800a5f4:	f7ff ff12 	bl	800a41c <mqtt_ringbuf_advance_get_idx>
    /* Flush */
    altcp_output(tpcb);
 800a5f8:	6838      	ldr	r0, [r7, #0]
 800a5fa:	f008 fb43 	bl	8012c84 <tcp_output>
 800a5fe:	e000      	b.n	800a602 <mqtt_output_send+0x156>
    return;
 800a600:	bf00      	nop
  } else {
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_output_send: Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
  }
}
 800a602:	3714      	adds	r7, #20
 800a604:	46bd      	mov	sp, r7
 800a606:	bd90      	pop	{r4, r7, pc}
 800a608:	08017f84 	.word	0x08017f84
 800a60c:	08018024 	.word	0x08018024
 800a610:	08017ffc 	.word	0x08017ffc

0800a614 <mqtt_create_request>:
 * @param arg Parameter following callback
 * @return Request or NULL if failed to create
 */
static struct mqtt_request_t *
mqtt_create_request(struct mqtt_request_t *r_objs, size_t r_objs_len, u16_t pkt_id, mqtt_request_cb_t cb, void *arg)
{
 800a614:	b580      	push	{r7, lr}
 800a616:	b086      	sub	sp, #24
 800a618:	af00      	add	r7, sp, #0
 800a61a:	60f8      	str	r0, [r7, #12]
 800a61c:	60b9      	str	r1, [r7, #8]
 800a61e:	603b      	str	r3, [r7, #0]
 800a620:	4613      	mov	r3, r2
 800a622:	80fb      	strh	r3, [r7, #6]
  struct mqtt_request_t *r = NULL;
 800a624:	2300      	movs	r3, #0
 800a626:	617b      	str	r3, [r7, #20]
  u8_t n;
  LWIP_ASSERT("mqtt_create_request: r_objs != NULL", r_objs != NULL);
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d106      	bne.n	800a63c <mqtt_create_request+0x28>
 800a62e:	4b19      	ldr	r3, [pc, #100]	; (800a694 <mqtt_create_request+0x80>)
 800a630:	f240 1223 	movw	r2, #291	; 0x123
 800a634:	4918      	ldr	r1, [pc, #96]	; (800a698 <mqtt_create_request+0x84>)
 800a636:	4819      	ldr	r0, [pc, #100]	; (800a69c <mqtt_create_request+0x88>)
 800a638:	f00c f902 	bl	8016840 <iprintf>
  for (n = 0; n < r_objs_len; n++) {
 800a63c:	2300      	movs	r3, #0
 800a63e:	74fb      	strb	r3, [r7, #19]
 800a640:	e01f      	b.n	800a682 <mqtt_create_request+0x6e>
    /* Item point to itself if not in use */
    if (r_objs[n].next == &r_objs[n]) {
 800a642:	7cfb      	ldrb	r3, [r7, #19]
 800a644:	011b      	lsls	r3, r3, #4
 800a646:	68fa      	ldr	r2, [r7, #12]
 800a648:	4413      	add	r3, r2
 800a64a:	681a      	ldr	r2, [r3, #0]
 800a64c:	7cfb      	ldrb	r3, [r7, #19]
 800a64e:	011b      	lsls	r3, r3, #4
 800a650:	68f9      	ldr	r1, [r7, #12]
 800a652:	440b      	add	r3, r1
 800a654:	429a      	cmp	r2, r3
 800a656:	d111      	bne.n	800a67c <mqtt_create_request+0x68>
      r = &r_objs[n];
 800a658:	7cfb      	ldrb	r3, [r7, #19]
 800a65a:	011b      	lsls	r3, r3, #4
 800a65c:	68fa      	ldr	r2, [r7, #12]
 800a65e:	4413      	add	r3, r2
 800a660:	617b      	str	r3, [r7, #20]
      r->next = NULL;
 800a662:	697b      	ldr	r3, [r7, #20]
 800a664:	2200      	movs	r2, #0
 800a666:	601a      	str	r2, [r3, #0]
      r->cb = cb;
 800a668:	697b      	ldr	r3, [r7, #20]
 800a66a:	683a      	ldr	r2, [r7, #0]
 800a66c:	605a      	str	r2, [r3, #4]
      r->arg = arg;
 800a66e:	697b      	ldr	r3, [r7, #20]
 800a670:	6a3a      	ldr	r2, [r7, #32]
 800a672:	609a      	str	r2, [r3, #8]
      r->pkt_id = pkt_id;
 800a674:	697b      	ldr	r3, [r7, #20]
 800a676:	88fa      	ldrh	r2, [r7, #6]
 800a678:	819a      	strh	r2, [r3, #12]
      break;
 800a67a:	e006      	b.n	800a68a <mqtt_create_request+0x76>
  for (n = 0; n < r_objs_len; n++) {
 800a67c:	7cfb      	ldrb	r3, [r7, #19]
 800a67e:	3301      	adds	r3, #1
 800a680:	74fb      	strb	r3, [r7, #19]
 800a682:	7cfb      	ldrb	r3, [r7, #19]
 800a684:	68ba      	ldr	r2, [r7, #8]
 800a686:	429a      	cmp	r2, r3
 800a688:	d8db      	bhi.n	800a642 <mqtt_create_request+0x2e>
    }
  }
  return r;
 800a68a:	697b      	ldr	r3, [r7, #20]
}
 800a68c:	4618      	mov	r0, r3
 800a68e:	3718      	adds	r7, #24
 800a690:	46bd      	mov	sp, r7
 800a692:	bd80      	pop	{r7, pc}
 800a694:	08017f84 	.word	0x08017f84
 800a698:	08018044 	.word	0x08018044
 800a69c:	08017ffc 	.word	0x08017ffc

0800a6a0 <mqtt_append_request>:
 * @param tail Pointer to request queue tail pointer
 * @param r Request to append
 */
static void
mqtt_append_request(struct mqtt_request_t **tail, struct mqtt_request_t *r)
{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b086      	sub	sp, #24
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	6078      	str	r0, [r7, #4]
 800a6a8:	6039      	str	r1, [r7, #0]
  struct mqtt_request_t *head = NULL;
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	617b      	str	r3, [r7, #20]
  s16_t time_before = 0;
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	827b      	strh	r3, [r7, #18]
  struct mqtt_request_t *iter;

  LWIP_ASSERT("mqtt_append_request: tail != NULL", tail != NULL);
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d106      	bne.n	800a6c6 <mqtt_append_request+0x26>
 800a6b8:	4b1b      	ldr	r3, [pc, #108]	; (800a728 <mqtt_append_request+0x88>)
 800a6ba:	f240 123f 	movw	r2, #319	; 0x13f
 800a6be:	491b      	ldr	r1, [pc, #108]	; (800a72c <mqtt_append_request+0x8c>)
 800a6c0:	481b      	ldr	r0, [pc, #108]	; (800a730 <mqtt_append_request+0x90>)
 800a6c2:	f00c f8bd 	bl	8016840 <iprintf>

  /* Iterate trough queue to find head, and count total timeout time */
  for (iter = *tail; iter != NULL; iter = iter->next) {
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	60fb      	str	r3, [r7, #12]
 800a6cc:	e00a      	b.n	800a6e4 <mqtt_append_request+0x44>
    time_before += iter->timeout_diff;
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	89da      	ldrh	r2, [r3, #14]
 800a6d2:	8a7b      	ldrh	r3, [r7, #18]
 800a6d4:	4413      	add	r3, r2
 800a6d6:	b29b      	uxth	r3, r3
 800a6d8:	827b      	strh	r3, [r7, #18]
    head = iter;
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	617b      	str	r3, [r7, #20]
  for (iter = *tail; iter != NULL; iter = iter->next) {
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	60fb      	str	r3, [r7, #12]
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d1f1      	bne.n	800a6ce <mqtt_append_request+0x2e>
  }

  LWIP_ASSERT("mqtt_append_request: time_before <= MQTT_REQ_TIMEOUT", time_before <= MQTT_REQ_TIMEOUT);
 800a6ea:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a6ee:	2b1e      	cmp	r3, #30
 800a6f0:	dd06      	ble.n	800a700 <mqtt_append_request+0x60>
 800a6f2:	4b0d      	ldr	r3, [pc, #52]	; (800a728 <mqtt_append_request+0x88>)
 800a6f4:	f240 1247 	movw	r2, #327	; 0x147
 800a6f8:	490e      	ldr	r1, [pc, #56]	; (800a734 <mqtt_append_request+0x94>)
 800a6fa:	480d      	ldr	r0, [pc, #52]	; (800a730 <mqtt_append_request+0x90>)
 800a6fc:	f00c f8a0 	bl	8016840 <iprintf>
  r->timeout_diff = MQTT_REQ_TIMEOUT - time_before;
 800a700:	8a7b      	ldrh	r3, [r7, #18]
 800a702:	f1c3 031e 	rsb	r3, r3, #30
 800a706:	b29a      	uxth	r2, r3
 800a708:	683b      	ldr	r3, [r7, #0]
 800a70a:	81da      	strh	r2, [r3, #14]
  if (head == NULL) {
 800a70c:	697b      	ldr	r3, [r7, #20]
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d103      	bne.n	800a71a <mqtt_append_request+0x7a>
    *tail = r;
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	683a      	ldr	r2, [r7, #0]
 800a716:	601a      	str	r2, [r3, #0]
  } else {
    head->next = r;
  }
}
 800a718:	e002      	b.n	800a720 <mqtt_append_request+0x80>
    head->next = r;
 800a71a:	697b      	ldr	r3, [r7, #20]
 800a71c:	683a      	ldr	r2, [r7, #0]
 800a71e:	601a      	str	r2, [r3, #0]
}
 800a720:	bf00      	nop
 800a722:	3718      	adds	r7, #24
 800a724:	46bd      	mov	sp, r7
 800a726:	bd80      	pop	{r7, pc}
 800a728:	08017f84 	.word	0x08017f84
 800a72c:	08018068 	.word	0x08018068
 800a730:	08017ffc 	.word	0x08017ffc
 800a734:	0801808c 	.word	0x0801808c

0800a738 <mqtt_delete_request>:
 * Delete request item
 * @param r Request item to delete
 */
static void
mqtt_delete_request(struct mqtt_request_t *r)
{
 800a738:	b480      	push	{r7}
 800a73a:	b083      	sub	sp, #12
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	6078      	str	r0, [r7, #4]
  if (r != NULL) {
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d002      	beq.n	800a74c <mqtt_delete_request+0x14>
    r->next = r;
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	687a      	ldr	r2, [r7, #4]
 800a74a:	601a      	str	r2, [r3, #0]
  }
}
 800a74c:	bf00      	nop
 800a74e:	370c      	adds	r7, #12
 800a750:	46bd      	mov	sp, r7
 800a752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a756:	4770      	bx	lr

0800a758 <mqtt_take_request>:
 * @param pkt_id Packet identifier of request to take
 * @return Request item if found, NULL if not
 */
static struct mqtt_request_t *
mqtt_take_request(struct mqtt_request_t **tail, u16_t pkt_id)
{
 800a758:	b580      	push	{r7, lr}
 800a75a:	b084      	sub	sp, #16
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	6078      	str	r0, [r7, #4]
 800a760:	460b      	mov	r3, r1
 800a762:	807b      	strh	r3, [r7, #2]
  struct mqtt_request_t *iter = NULL, *prev = NULL;
 800a764:	2300      	movs	r3, #0
 800a766:	60fb      	str	r3, [r7, #12]
 800a768:	2300      	movs	r3, #0
 800a76a:	60bb      	str	r3, [r7, #8]
  LWIP_ASSERT("mqtt_take_request: tail != NULL", tail != NULL);
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d106      	bne.n	800a780 <mqtt_take_request+0x28>
 800a772:	4b1f      	ldr	r3, [pc, #124]	; (800a7f0 <mqtt_take_request+0x98>)
 800a774:	f240 1267 	movw	r2, #359	; 0x167
 800a778:	491e      	ldr	r1, [pc, #120]	; (800a7f4 <mqtt_take_request+0x9c>)
 800a77a:	481f      	ldr	r0, [pc, #124]	; (800a7f8 <mqtt_take_request+0xa0>)
 800a77c:	f00c f860 	bl	8016840 <iprintf>
  /* Search all request for pkt_id */
  for (iter = *tail; iter != NULL; iter = iter->next) {
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	60fb      	str	r3, [r7, #12]
 800a786:	e009      	b.n	800a79c <mqtt_take_request+0x44>
    if (iter->pkt_id == pkt_id) {
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	899b      	ldrh	r3, [r3, #12]
 800a78c:	887a      	ldrh	r2, [r7, #2]
 800a78e:	429a      	cmp	r2, r3
 800a790:	d008      	beq.n	800a7a4 <mqtt_take_request+0x4c>
      break;
    }
    prev = iter;
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	60bb      	str	r3, [r7, #8]
  for (iter = *tail; iter != NULL; iter = iter->next) {
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	60fb      	str	r3, [r7, #12]
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d1f2      	bne.n	800a788 <mqtt_take_request+0x30>
 800a7a2:	e000      	b.n	800a7a6 <mqtt_take_request+0x4e>
      break;
 800a7a4:	bf00      	nop
  }

  /* If request was found */
  if (iter != NULL) {
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d01c      	beq.n	800a7e6 <mqtt_take_request+0x8e>
    /* unchain */
    if (prev == NULL) {
 800a7ac:	68bb      	ldr	r3, [r7, #8]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d104      	bne.n	800a7bc <mqtt_take_request+0x64>
      *tail = iter->next;
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	681a      	ldr	r2, [r3, #0]
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	601a      	str	r2, [r3, #0]
 800a7ba:	e003      	b.n	800a7c4 <mqtt_take_request+0x6c>
    } else {
      prev->next = iter->next;
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	681a      	ldr	r2, [r3, #0]
 800a7c0:	68bb      	ldr	r3, [r7, #8]
 800a7c2:	601a      	str	r2, [r3, #0]
    }
    /* If exists, add remaining timeout time for the request to next */
    if (iter->next != NULL) {
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d009      	beq.n	800a7e0 <mqtt_take_request+0x88>
      iter->next->timeout_diff += iter->timeout_diff;
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	89d9      	ldrh	r1, [r3, #14]
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	89da      	ldrh	r2, [r3, #14]
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	440a      	add	r2, r1
 800a7dc:	b292      	uxth	r2, r2
 800a7de:	81da      	strh	r2, [r3, #14]
    }
    iter->next = NULL;
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	2200      	movs	r2, #0
 800a7e4:	601a      	str	r2, [r3, #0]
  }
  return iter;
 800a7e6:	68fb      	ldr	r3, [r7, #12]
}
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	3710      	adds	r7, #16
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	bd80      	pop	{r7, pc}
 800a7f0:	08017f84 	.word	0x08017f84
 800a7f4:	080180c4 	.word	0x080180c4
 800a7f8:	08017ffc 	.word	0x08017ffc

0800a7fc <mqtt_request_time_elapsed>:
 * @param tail Pointer to request queue tail pointer
 * @param t Time since last call in seconds
 */
static void
mqtt_request_time_elapsed(struct mqtt_request_t **tail, u8_t t)
{
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	b084      	sub	sp, #16
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
 800a804:	460b      	mov	r3, r1
 800a806:	70fb      	strb	r3, [r7, #3]
  struct mqtt_request_t *r;
  LWIP_ASSERT("mqtt_request_time_elapsed: tail != NULL", tail != NULL);
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d106      	bne.n	800a81c <mqtt_request_time_elapsed+0x20>
 800a80e:	4b21      	ldr	r3, [pc, #132]	; (800a894 <mqtt_request_time_elapsed+0x98>)
 800a810:	f44f 72c5 	mov.w	r2, #394	; 0x18a
 800a814:	4920      	ldr	r1, [pc, #128]	; (800a898 <mqtt_request_time_elapsed+0x9c>)
 800a816:	4821      	ldr	r0, [pc, #132]	; (800a89c <mqtt_request_time_elapsed+0xa0>)
 800a818:	f00c f812 	bl	8016840 <iprintf>
  r = *tail;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	60fb      	str	r3, [r7, #12]
  while (t > 0 && r != NULL) {
 800a822:	e02c      	b.n	800a87e <mqtt_request_time_elapsed+0x82>
    if (t >= r->timeout_diff) {
 800a824:	78fb      	ldrb	r3, [r7, #3]
 800a826:	b29a      	uxth	r2, r3
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	89db      	ldrh	r3, [r3, #14]
 800a82c:	429a      	cmp	r2, r3
 800a82e:	d31c      	bcc.n	800a86a <mqtt_request_time_elapsed+0x6e>
      t -= (u8_t)r->timeout_diff;
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	89db      	ldrh	r3, [r3, #14]
 800a834:	b2db      	uxtb	r3, r3
 800a836:	78fa      	ldrb	r2, [r7, #3]
 800a838:	1ad3      	subs	r3, r2, r3
 800a83a:	70fb      	strb	r3, [r7, #3]
      /* Unchain */
      *tail = r->next;
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	681a      	ldr	r2, [r3, #0]
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	601a      	str	r2, [r3, #0]
      /* Notify upper layer about timeout */
      if (r->cb != NULL) {
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	685b      	ldr	r3, [r3, #4]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d007      	beq.n	800a85c <mqtt_request_time_elapsed+0x60>
        r->cb(r->arg, ERR_TIMEOUT);
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	685b      	ldr	r3, [r3, #4]
 800a850:	68fa      	ldr	r2, [r7, #12]
 800a852:	6892      	ldr	r2, [r2, #8]
 800a854:	f06f 0102 	mvn.w	r1, #2
 800a858:	4610      	mov	r0, r2
 800a85a:	4798      	blx	r3
      }
      mqtt_delete_request(r);
 800a85c:	68f8      	ldr	r0, [r7, #12]
 800a85e:	f7ff ff6b 	bl	800a738 <mqtt_delete_request>
      /* Tail might be be modified in callback, so re-read it in every iteration */
      r = *(struct mqtt_request_t *const volatile *)tail;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	60fb      	str	r3, [r7, #12]
 800a868:	e009      	b.n	800a87e <mqtt_request_time_elapsed+0x82>
    } else {
      r->timeout_diff -= t;
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	89da      	ldrh	r2, [r3, #14]
 800a86e:	78fb      	ldrb	r3, [r7, #3]
 800a870:	b29b      	uxth	r3, r3
 800a872:	1ad3      	subs	r3, r2, r3
 800a874:	b29a      	uxth	r2, r3
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	81da      	strh	r2, [r3, #14]
      t = 0;
 800a87a:	2300      	movs	r3, #0
 800a87c:	70fb      	strb	r3, [r7, #3]
  while (t > 0 && r != NULL) {
 800a87e:	78fb      	ldrb	r3, [r7, #3]
 800a880:	2b00      	cmp	r3, #0
 800a882:	d002      	beq.n	800a88a <mqtt_request_time_elapsed+0x8e>
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	2b00      	cmp	r3, #0
 800a888:	d1cc      	bne.n	800a824 <mqtt_request_time_elapsed+0x28>
    }
  }
}
 800a88a:	bf00      	nop
 800a88c:	3710      	adds	r7, #16
 800a88e:	46bd      	mov	sp, r7
 800a890:	bd80      	pop	{r7, pc}
 800a892:	bf00      	nop
 800a894:	08017f84 	.word	0x08017f84
 800a898:	080180e4 	.word	0x080180e4
 800a89c:	08017ffc 	.word	0x08017ffc

0800a8a0 <mqtt_clear_requests>:
 * Free all request items
 * @param tail Pointer to request queue tail pointer
 */
static void
mqtt_clear_requests(struct mqtt_request_t **tail)
{
 800a8a0:	b580      	push	{r7, lr}
 800a8a2:	b084      	sub	sp, #16
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]
  struct mqtt_request_t *iter, *next;
  LWIP_ASSERT("mqtt_clear_requests: tail != NULL", tail != NULL);
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d106      	bne.n	800a8bc <mqtt_clear_requests+0x1c>
 800a8ae:	4b0e      	ldr	r3, [pc, #56]	; (800a8e8 <mqtt_clear_requests+0x48>)
 800a8b0:	f240 12a7 	movw	r2, #423	; 0x1a7
 800a8b4:	490d      	ldr	r1, [pc, #52]	; (800a8ec <mqtt_clear_requests+0x4c>)
 800a8b6:	480e      	ldr	r0, [pc, #56]	; (800a8f0 <mqtt_clear_requests+0x50>)
 800a8b8:	f00b ffc2 	bl	8016840 <iprintf>
  for (iter = *tail; iter != NULL; iter = next) {
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	60fb      	str	r3, [r7, #12]
 800a8c2:	e007      	b.n	800a8d4 <mqtt_clear_requests+0x34>
    next = iter->next;
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	60bb      	str	r3, [r7, #8]
    mqtt_delete_request(iter);
 800a8ca:	68f8      	ldr	r0, [r7, #12]
 800a8cc:	f7ff ff34 	bl	800a738 <mqtt_delete_request>
  for (iter = *tail; iter != NULL; iter = next) {
 800a8d0:	68bb      	ldr	r3, [r7, #8]
 800a8d2:	60fb      	str	r3, [r7, #12]
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d1f4      	bne.n	800a8c4 <mqtt_clear_requests+0x24>
  }
  *tail = NULL;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	2200      	movs	r2, #0
 800a8de:	601a      	str	r2, [r3, #0]
}
 800a8e0:	bf00      	nop
 800a8e2:	3710      	adds	r7, #16
 800a8e4:	46bd      	mov	sp, r7
 800a8e6:	bd80      	pop	{r7, pc}
 800a8e8:	08017f84 	.word	0x08017f84
 800a8ec:	0801810c 	.word	0x0801810c
 800a8f0:	08017ffc 	.word	0x08017ffc

0800a8f4 <mqtt_init_requests>:
 * @param r_objs Pointer to request objects
 * @param r_objs_len Number of array entries
 */
static void
mqtt_init_requests(struct mqtt_request_t *r_objs, size_t r_objs_len)
{
 800a8f4:	b580      	push	{r7, lr}
 800a8f6:	b084      	sub	sp, #16
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	6078      	str	r0, [r7, #4]
 800a8fc:	6039      	str	r1, [r7, #0]
  u8_t n;
  LWIP_ASSERT("mqtt_init_requests: r_objs != NULL", r_objs != NULL);
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	2b00      	cmp	r3, #0
 800a902:	d106      	bne.n	800a912 <mqtt_init_requests+0x1e>
 800a904:	4b0f      	ldr	r3, [pc, #60]	; (800a944 <mqtt_init_requests+0x50>)
 800a906:	f240 12b7 	movw	r2, #439	; 0x1b7
 800a90a:	490f      	ldr	r1, [pc, #60]	; (800a948 <mqtt_init_requests+0x54>)
 800a90c:	480f      	ldr	r0, [pc, #60]	; (800a94c <mqtt_init_requests+0x58>)
 800a90e:	f00b ff97 	bl	8016840 <iprintf>
  for (n = 0; n < r_objs_len; n++) {
 800a912:	2300      	movs	r3, #0
 800a914:	73fb      	strb	r3, [r7, #15]
 800a916:	e00b      	b.n	800a930 <mqtt_init_requests+0x3c>
    /* Item pointing to itself indicates unused */
    r_objs[n].next = &r_objs[n];
 800a918:	7bfb      	ldrb	r3, [r7, #15]
 800a91a:	011a      	lsls	r2, r3, #4
 800a91c:	7bfb      	ldrb	r3, [r7, #15]
 800a91e:	011b      	lsls	r3, r3, #4
 800a920:	6879      	ldr	r1, [r7, #4]
 800a922:	440b      	add	r3, r1
 800a924:	6879      	ldr	r1, [r7, #4]
 800a926:	440a      	add	r2, r1
 800a928:	601a      	str	r2, [r3, #0]
  for (n = 0; n < r_objs_len; n++) {
 800a92a:	7bfb      	ldrb	r3, [r7, #15]
 800a92c:	3301      	adds	r3, #1
 800a92e:	73fb      	strb	r3, [r7, #15]
 800a930:	7bfb      	ldrb	r3, [r7, #15]
 800a932:	683a      	ldr	r2, [r7, #0]
 800a934:	429a      	cmp	r2, r3
 800a936:	d8ef      	bhi.n	800a918 <mqtt_init_requests+0x24>
  }
}
 800a938:	bf00      	nop
 800a93a:	bf00      	nop
 800a93c:	3710      	adds	r7, #16
 800a93e:	46bd      	mov	sp, r7
 800a940:	bd80      	pop	{r7, pc}
 800a942:	bf00      	nop
 800a944:	08017f84 	.word	0x08017f84
 800a948:	08018130 	.word	0x08018130
 800a94c:	08017ffc 	.word	0x08017ffc

0800a950 <mqtt_output_append_u8>:
/* Output message build helpers */


static void
mqtt_output_append_u8(struct mqtt_ringbuf_t *rb, u8_t value)
{
 800a950:	b580      	push	{r7, lr}
 800a952:	b082      	sub	sp, #8
 800a954:	af00      	add	r7, sp, #0
 800a956:	6078      	str	r0, [r7, #4]
 800a958:	460b      	mov	r3, r1
 800a95a:	70fb      	strb	r3, [r7, #3]
  mqtt_ringbuf_put(rb, value);
 800a95c:	78fb      	ldrb	r3, [r7, #3]
 800a95e:	4619      	mov	r1, r3
 800a960:	6878      	ldr	r0, [r7, #4]
 800a962:	f7ff fd2b 	bl	800a3bc <mqtt_ringbuf_put>
}
 800a966:	bf00      	nop
 800a968:	3708      	adds	r7, #8
 800a96a:	46bd      	mov	sp, r7
 800a96c:	bd80      	pop	{r7, pc}

0800a96e <mqtt_output_append_u16>:

static
void mqtt_output_append_u16(struct mqtt_ringbuf_t *rb, u16_t value)
{
 800a96e:	b580      	push	{r7, lr}
 800a970:	b082      	sub	sp, #8
 800a972:	af00      	add	r7, sp, #0
 800a974:	6078      	str	r0, [r7, #4]
 800a976:	460b      	mov	r3, r1
 800a978:	807b      	strh	r3, [r7, #2]
  mqtt_ringbuf_put(rb, value >> 8);
 800a97a:	887b      	ldrh	r3, [r7, #2]
 800a97c:	0a1b      	lsrs	r3, r3, #8
 800a97e:	b29b      	uxth	r3, r3
 800a980:	b2db      	uxtb	r3, r3
 800a982:	4619      	mov	r1, r3
 800a984:	6878      	ldr	r0, [r7, #4]
 800a986:	f7ff fd19 	bl	800a3bc <mqtt_ringbuf_put>
  mqtt_ringbuf_put(rb, value & 0xff);
 800a98a:	887b      	ldrh	r3, [r7, #2]
 800a98c:	b2db      	uxtb	r3, r3
 800a98e:	4619      	mov	r1, r3
 800a990:	6878      	ldr	r0, [r7, #4]
 800a992:	f7ff fd13 	bl	800a3bc <mqtt_ringbuf_put>
}
 800a996:	bf00      	nop
 800a998:	3708      	adds	r7, #8
 800a99a:	46bd      	mov	sp, r7
 800a99c:	bd80      	pop	{r7, pc}

0800a99e <mqtt_output_append_string>:
  }
}

static void
mqtt_output_append_string(struct mqtt_ringbuf_t *rb, const char *str, u16_t length)
{
 800a99e:	b580      	push	{r7, lr}
 800a9a0:	b086      	sub	sp, #24
 800a9a2:	af00      	add	r7, sp, #0
 800a9a4:	60f8      	str	r0, [r7, #12]
 800a9a6:	60b9      	str	r1, [r7, #8]
 800a9a8:	4613      	mov	r3, r2
 800a9aa:	80fb      	strh	r3, [r7, #6]
  u16_t n;
  mqtt_ringbuf_put(rb, length >> 8);
 800a9ac:	88fb      	ldrh	r3, [r7, #6]
 800a9ae:	0a1b      	lsrs	r3, r3, #8
 800a9b0:	b29b      	uxth	r3, r3
 800a9b2:	b2db      	uxtb	r3, r3
 800a9b4:	4619      	mov	r1, r3
 800a9b6:	68f8      	ldr	r0, [r7, #12]
 800a9b8:	f7ff fd00 	bl	800a3bc <mqtt_ringbuf_put>
  mqtt_ringbuf_put(rb, length & 0xff);
 800a9bc:	88fb      	ldrh	r3, [r7, #6]
 800a9be:	b2db      	uxtb	r3, r3
 800a9c0:	4619      	mov	r1, r3
 800a9c2:	68f8      	ldr	r0, [r7, #12]
 800a9c4:	f7ff fcfa 	bl	800a3bc <mqtt_ringbuf_put>
  for (n = 0; n < length; n++) {
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	82fb      	strh	r3, [r7, #22]
 800a9cc:	e00a      	b.n	800a9e4 <mqtt_output_append_string+0x46>
    mqtt_ringbuf_put(rb, str[n]);
 800a9ce:	8afb      	ldrh	r3, [r7, #22]
 800a9d0:	68ba      	ldr	r2, [r7, #8]
 800a9d2:	4413      	add	r3, r2
 800a9d4:	781b      	ldrb	r3, [r3, #0]
 800a9d6:	4619      	mov	r1, r3
 800a9d8:	68f8      	ldr	r0, [r7, #12]
 800a9da:	f7ff fcef 	bl	800a3bc <mqtt_ringbuf_put>
  for (n = 0; n < length; n++) {
 800a9de:	8afb      	ldrh	r3, [r7, #22]
 800a9e0:	3301      	adds	r3, #1
 800a9e2:	82fb      	strh	r3, [r7, #22]
 800a9e4:	8afa      	ldrh	r2, [r7, #22]
 800a9e6:	88fb      	ldrh	r3, [r7, #6]
 800a9e8:	429a      	cmp	r2, r3
 800a9ea:	d3f0      	bcc.n	800a9ce <mqtt_output_append_string+0x30>
  }
}
 800a9ec:	bf00      	nop
 800a9ee:	bf00      	nop
 800a9f0:	3718      	adds	r7, #24
 800a9f2:	46bd      	mov	sp, r7
 800a9f4:	bd80      	pop	{r7, pc}

0800a9f6 <mqtt_output_append_fixed_header>:
 */

static void
mqtt_output_append_fixed_header(struct mqtt_ringbuf_t *rb, u8_t msg_type, u8_t fdup,
                                u8_t fqos, u8_t fretain, u16_t r_length)
{
 800a9f6:	b580      	push	{r7, lr}
 800a9f8:	b082      	sub	sp, #8
 800a9fa:	af00      	add	r7, sp, #0
 800a9fc:	6078      	str	r0, [r7, #4]
 800a9fe:	4608      	mov	r0, r1
 800aa00:	4611      	mov	r1, r2
 800aa02:	461a      	mov	r2, r3
 800aa04:	4603      	mov	r3, r0
 800aa06:	70fb      	strb	r3, [r7, #3]
 800aa08:	460b      	mov	r3, r1
 800aa0a:	70bb      	strb	r3, [r7, #2]
 800aa0c:	4613      	mov	r3, r2
 800aa0e:	707b      	strb	r3, [r7, #1]
  /* Start with control byte */
  mqtt_output_append_u8(rb, (((msg_type & 0x0f) << 4) | ((fdup & 1) << 3) | ((fqos & 3) << 1) | (fretain & 1)));
 800aa10:	78fb      	ldrb	r3, [r7, #3]
 800aa12:	011b      	lsls	r3, r3, #4
 800aa14:	b25a      	sxtb	r2, r3
 800aa16:	78bb      	ldrb	r3, [r7, #2]
 800aa18:	00db      	lsls	r3, r3, #3
 800aa1a:	b25b      	sxtb	r3, r3
 800aa1c:	f003 0308 	and.w	r3, r3, #8
 800aa20:	b25b      	sxtb	r3, r3
 800aa22:	4313      	orrs	r3, r2
 800aa24:	b25a      	sxtb	r2, r3
 800aa26:	787b      	ldrb	r3, [r7, #1]
 800aa28:	005b      	lsls	r3, r3, #1
 800aa2a:	b25b      	sxtb	r3, r3
 800aa2c:	f003 0306 	and.w	r3, r3, #6
 800aa30:	b25b      	sxtb	r3, r3
 800aa32:	4313      	orrs	r3, r2
 800aa34:	b25a      	sxtb	r2, r3
 800aa36:	f997 3010 	ldrsb.w	r3, [r7, #16]
 800aa3a:	f003 0301 	and.w	r3, r3, #1
 800aa3e:	b25b      	sxtb	r3, r3
 800aa40:	4313      	orrs	r3, r2
 800aa42:	b25b      	sxtb	r3, r3
 800aa44:	b2db      	uxtb	r3, r3
 800aa46:	4619      	mov	r1, r3
 800aa48:	6878      	ldr	r0, [r7, #4]
 800aa4a:	f7ff ff81 	bl	800a950 <mqtt_output_append_u8>
  /* Encode remaining length field */
  do {
    mqtt_output_append_u8(rb, (r_length & 0x7f) | (r_length >= 128 ? 0x80 : 0));
 800aa4e:	8abb      	ldrh	r3, [r7, #20]
 800aa50:	b25b      	sxtb	r3, r3
 800aa52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aa56:	b25b      	sxtb	r3, r3
 800aa58:	8aba      	ldrh	r2, [r7, #20]
 800aa5a:	2a7f      	cmp	r2, #127	; 0x7f
 800aa5c:	d902      	bls.n	800aa64 <mqtt_output_append_fixed_header+0x6e>
 800aa5e:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 800aa62:	e000      	b.n	800aa66 <mqtt_output_append_fixed_header+0x70>
 800aa64:	2200      	movs	r2, #0
 800aa66:	4313      	orrs	r3, r2
 800aa68:	b25b      	sxtb	r3, r3
 800aa6a:	b2db      	uxtb	r3, r3
 800aa6c:	4619      	mov	r1, r3
 800aa6e:	6878      	ldr	r0, [r7, #4]
 800aa70:	f7ff ff6e 	bl	800a950 <mqtt_output_append_u8>
    r_length >>= 7;
 800aa74:	8abb      	ldrh	r3, [r7, #20]
 800aa76:	09db      	lsrs	r3, r3, #7
 800aa78:	82bb      	strh	r3, [r7, #20]
  } while (r_length > 0);
 800aa7a:	8abb      	ldrh	r3, [r7, #20]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d1e6      	bne.n	800aa4e <mqtt_output_append_fixed_header+0x58>
}
 800aa80:	bf00      	nop
 800aa82:	bf00      	nop
 800aa84:	3708      	adds	r7, #8
 800aa86:	46bd      	mov	sp, r7
 800aa88:	bd80      	pop	{r7, pc}
	...

0800aa8c <mqtt_output_check_space>:
 * @param r_length Remaining length after fixed header
 * @return 1 if message will fit, 0 if not enough buffer space
 */
static u8_t
mqtt_output_check_space(struct mqtt_ringbuf_t *rb, u16_t r_length)
{
 800aa8c:	b590      	push	{r4, r7, lr}
 800aa8e:	b085      	sub	sp, #20
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	6078      	str	r0, [r7, #4]
 800aa94:	460b      	mov	r3, r1
 800aa96:	807b      	strh	r3, [r7, #2]
  /* Start with length of type byte + remaining length */
  u16_t total_len = 1 + r_length;
 800aa98:	887b      	ldrh	r3, [r7, #2]
 800aa9a:	3301      	adds	r3, #1
 800aa9c:	81fb      	strh	r3, [r7, #14]

  LWIP_ASSERT("mqtt_output_check_space: rb != NULL", rb != NULL);
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d106      	bne.n	800aab2 <mqtt_output_check_space+0x26>
 800aaa4:	4b0f      	ldr	r3, [pc, #60]	; (800aae4 <mqtt_output_check_space+0x58>)
 800aaa6:	f240 2207 	movw	r2, #519	; 0x207
 800aaaa:	490f      	ldr	r1, [pc, #60]	; (800aae8 <mqtt_output_check_space+0x5c>)
 800aaac:	480f      	ldr	r0, [pc, #60]	; (800aaec <mqtt_output_check_space+0x60>)
 800aaae:	f00b fec7 	bl	8016840 <iprintf>

  /* Calculate number of required bytes to contain the remaining bytes field and add to total*/
  do {
    total_len++;
 800aab2:	89fb      	ldrh	r3, [r7, #14]
 800aab4:	3301      	adds	r3, #1
 800aab6:	81fb      	strh	r3, [r7, #14]
    r_length >>= 7;
 800aab8:	887b      	ldrh	r3, [r7, #2]
 800aaba:	09db      	lsrs	r3, r3, #7
 800aabc:	807b      	strh	r3, [r7, #2]
  } while (r_length > 0);
 800aabe:	887b      	ldrh	r3, [r7, #2]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d1f6      	bne.n	800aab2 <mqtt_output_check_space+0x26>

  return (total_len <= mqtt_ringbuf_free(rb));
 800aac4:	89fc      	ldrh	r4, [r7, #14]
 800aac6:	6878      	ldr	r0, [r7, #4]
 800aac8:	f7ff fcd4 	bl	800a474 <mqtt_ringbuf_len>
 800aacc:	4603      	mov	r3, r0
 800aace:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800aad2:	429c      	cmp	r4, r3
 800aad4:	bfd4      	ite	le
 800aad6:	2301      	movle	r3, #1
 800aad8:	2300      	movgt	r3, #0
 800aada:	b2db      	uxtb	r3, r3
}
 800aadc:	4618      	mov	r0, r3
 800aade:	3714      	adds	r7, #20
 800aae0:	46bd      	mov	sp, r7
 800aae2:	bd90      	pop	{r4, r7, pc}
 800aae4:	08017f84 	.word	0x08017f84
 800aae8:	08018154 	.word	0x08018154
 800aaec:	08017ffc 	.word	0x08017ffc

0800aaf0 <mqtt_close>:
 * @param client MQTT client
 * @param reason Reason for disconnection
 */
static void
mqtt_close(mqtt_client_t *client, mqtt_connection_status_t reason)
{
 800aaf0:	b580      	push	{r7, lr}
 800aaf2:	b084      	sub	sp, #16
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
 800aaf8:	460b      	mov	r3, r1
 800aafa:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("mqtt_close: client != NULL", client != NULL);
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d106      	bne.n	800ab10 <mqtt_close+0x20>
 800ab02:	4b27      	ldr	r3, [pc, #156]	; (800aba0 <mqtt_close+0xb0>)
 800ab04:	f240 221b 	movw	r2, #539	; 0x21b
 800ab08:	4926      	ldr	r1, [pc, #152]	; (800aba4 <mqtt_close+0xb4>)
 800ab0a:	4827      	ldr	r0, [pc, #156]	; (800aba8 <mqtt_close+0xb8>)
 800ab0c:	f00b fe98 	bl	8016840 <iprintf>

  /* Bring down TCP connection if not already done */
  if (client->conn != NULL) {
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	68db      	ldr	r3, [r3, #12]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d024      	beq.n	800ab62 <mqtt_close+0x72>
    err_t res;
    altcp_recv(client->conn, NULL);
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	68db      	ldr	r3, [r3, #12]
 800ab1c:	2100      	movs	r1, #0
 800ab1e:	4618      	mov	r0, r3
 800ab20:	f004 fb96 	bl	800f250 <tcp_recv>
    altcp_err(client->conn,  NULL);
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	68db      	ldr	r3, [r3, #12]
 800ab28:	2100      	movs	r1, #0
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	f004 fbd4 	bl	800f2d8 <tcp_err>
    altcp_sent(client->conn, NULL);
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	68db      	ldr	r3, [r3, #12]
 800ab34:	2100      	movs	r1, #0
 800ab36:	4618      	mov	r0, r3
 800ab38:	f004 fbac 	bl	800f294 <tcp_sent>
    res = altcp_close(client->conn);
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	68db      	ldr	r3, [r3, #12]
 800ab40:	4618      	mov	r0, r3
 800ab42:	f003 f8ab 	bl	800dc9c <tcp_close>
 800ab46:	4603      	mov	r3, r0
 800ab48:	73fb      	strb	r3, [r7, #15]
    if (res != ERR_OK) {
 800ab4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d004      	beq.n	800ab5c <mqtt_close+0x6c>
      altcp_abort(client->conn);
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	68db      	ldr	r3, [r3, #12]
 800ab56:	4618      	mov	r0, r3
 800ab58:	f003 f98a 	bl	800de70 <tcp_abort>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_close: Close err=%s\n", lwip_strerr(res)));
    }
    client->conn = NULL;
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	2200      	movs	r2, #0
 800ab60:	60da      	str	r2, [r3, #12]
  }

  /* Remove all pending requests */
  mqtt_clear_requests(&client->pend_req_queue);
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	3318      	adds	r3, #24
 800ab66:	4618      	mov	r0, r3
 800ab68:	f7ff fe9a 	bl	800a8a0 <mqtt_clear_requests>
  /* Stop cyclic timer */
  sys_untimeout(mqtt_cyclic_timer, client);
 800ab6c:	6879      	ldr	r1, [r7, #4]
 800ab6e:	480f      	ldr	r0, [pc, #60]	; (800abac <mqtt_close+0xbc>)
 800ab70:	f009 f906 	bl	8013d80 <sys_untimeout>

  /* Notify upper layer of disconnection if changed state */
  if (client->conn_state != TCP_DISCONNECTED) {
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	7a9b      	ldrb	r3, [r3, #10]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d00d      	beq.n	800ab98 <mqtt_close+0xa8>

    client->conn_state = TCP_DISCONNECTED;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	2200      	movs	r2, #0
 800ab80:	729a      	strb	r2, [r3, #10]
    if (client->connect_cb != NULL) {
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	695b      	ldr	r3, [r3, #20]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d006      	beq.n	800ab98 <mqtt_close+0xa8>
      client->connect_cb(client, client->connect_arg, reason);
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	695b      	ldr	r3, [r3, #20]
 800ab8e:	687a      	ldr	r2, [r7, #4]
 800ab90:	6911      	ldr	r1, [r2, #16]
 800ab92:	887a      	ldrh	r2, [r7, #2]
 800ab94:	6878      	ldr	r0, [r7, #4]
 800ab96:	4798      	blx	r3
    }
  }
}
 800ab98:	bf00      	nop
 800ab9a:	3710      	adds	r7, #16
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	bd80      	pop	{r7, pc}
 800aba0:	08017f84 	.word	0x08017f84
 800aba4:	08018178 	.word	0x08018178
 800aba8:	08017ffc 	.word	0x08017ffc
 800abac:	0800abb1 	.word	0x0800abb1

0800abb0 <mqtt_cyclic_timer>:
 * Interval timer, called every MQTT_CYCLIC_TIMER_INTERVAL seconds in MQTT_CONNECTING and MQTT_CONNECTED states
 * @param arg MQTT client
 */
static void
mqtt_cyclic_timer(void *arg)
{
 800abb0:	b580      	push	{r7, lr}
 800abb2:	b086      	sub	sp, #24
 800abb4:	af02      	add	r7, sp, #8
 800abb6:	6078      	str	r0, [r7, #4]
  u8_t restart_timer = 1;
 800abb8:	2301      	movs	r3, #1
 800abba:	73fb      	strb	r3, [r7, #15]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	60bb      	str	r3, [r7, #8]
  LWIP_ASSERT("mqtt_cyclic_timer: client != NULL", client != NULL);
 800abc0:	68bb      	ldr	r3, [r7, #8]
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d106      	bne.n	800abd4 <mqtt_cyclic_timer+0x24>
 800abc6:	4b42      	ldr	r3, [pc, #264]	; (800acd0 <mqtt_cyclic_timer+0x120>)
 800abc8:	f44f 7211 	mov.w	r2, #580	; 0x244
 800abcc:	4941      	ldr	r1, [pc, #260]	; (800acd4 <mqtt_cyclic_timer+0x124>)
 800abce:	4842      	ldr	r0, [pc, #264]	; (800acd8 <mqtt_cyclic_timer+0x128>)
 800abd0:	f00b fe36 	bl	8016840 <iprintf>

  if (client->conn_state == MQTT_CONNECTING) {
 800abd4:	68bb      	ldr	r3, [r7, #8]
 800abd6:	7a9b      	ldrb	r3, [r3, #10]
 800abd8:	2b02      	cmp	r3, #2
 800abda:	d115      	bne.n	800ac08 <mqtt_cyclic_timer+0x58>
    client->cyclic_tick++;
 800abdc:	68bb      	ldr	r3, [r7, #8]
 800abde:	881b      	ldrh	r3, [r3, #0]
 800abe0:	3301      	adds	r3, #1
 800abe2:	b29a      	uxth	r2, r3
 800abe4:	68bb      	ldr	r3, [r7, #8]
 800abe6:	801a      	strh	r2, [r3, #0]
    if ((client->cyclic_tick * MQTT_CYCLIC_TIMER_INTERVAL) >= MQTT_CONNECT_TIMOUT) {
 800abe8:	68bb      	ldr	r3, [r7, #8]
 800abea:	881b      	ldrh	r3, [r3, #0]
 800abec:	461a      	mov	r2, r3
 800abee:	4613      	mov	r3, r2
 800abf0:	009b      	lsls	r3, r3, #2
 800abf2:	4413      	add	r3, r2
 800abf4:	2b63      	cmp	r3, #99	; 0x63
 800abf6:	dd5e      	ble.n	800acb6 <mqtt_cyclic_timer+0x106>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_cyclic_timer: CONNECT attempt to server timed out\n"));
      /* Disconnect TCP */
      mqtt_close(client, MQTT_CONNECT_TIMEOUT);
 800abf8:	f240 1101 	movw	r1, #257	; 0x101
 800abfc:	68b8      	ldr	r0, [r7, #8]
 800abfe:	f7ff ff77 	bl	800aaf0 <mqtt_close>
      restart_timer = 0;
 800ac02:	2300      	movs	r3, #0
 800ac04:	73fb      	strb	r3, [r7, #15]
 800ac06:	e056      	b.n	800acb6 <mqtt_cyclic_timer+0x106>
    }
  } else if (client->conn_state == MQTT_CONNECTED) {
 800ac08:	68bb      	ldr	r3, [r7, #8]
 800ac0a:	7a9b      	ldrb	r3, [r3, #10]
 800ac0c:	2b03      	cmp	r3, #3
 800ac0e:	d150      	bne.n	800acb2 <mqtt_cyclic_timer+0x102>
    /* Handle timeout for pending requests */
    mqtt_request_time_elapsed(&client->pend_req_queue, MQTT_CYCLIC_TIMER_INTERVAL);
 800ac10:	68bb      	ldr	r3, [r7, #8]
 800ac12:	3318      	adds	r3, #24
 800ac14:	2105      	movs	r1, #5
 800ac16:	4618      	mov	r0, r3
 800ac18:	f7ff fdf0 	bl	800a7fc <mqtt_request_time_elapsed>

    /* keep_alive > 0 means keep alive functionality shall be used */
    if (client->keep_alive > 0) {
 800ac1c:	68bb      	ldr	r3, [r7, #8]
 800ac1e:	885b      	ldrh	r3, [r3, #2]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d048      	beq.n	800acb6 <mqtt_cyclic_timer+0x106>

      client->server_watchdog++;
 800ac24:	68bb      	ldr	r3, [r7, #8]
 800ac26:	889b      	ldrh	r3, [r3, #4]
 800ac28:	3301      	adds	r3, #1
 800ac2a:	b29a      	uxth	r2, r3
 800ac2c:	68bb      	ldr	r3, [r7, #8]
 800ac2e:	809a      	strh	r2, [r3, #4]
      /* If reception from server has been idle for 1.5*keep_alive time, server is considered unresponsive */
      if ((client->server_watchdog * MQTT_CYCLIC_TIMER_INTERVAL) > (client->keep_alive + client->keep_alive / 2)) {
 800ac30:	68bb      	ldr	r3, [r7, #8]
 800ac32:	889b      	ldrh	r3, [r3, #4]
 800ac34:	461a      	mov	r2, r3
 800ac36:	4613      	mov	r3, r2
 800ac38:	009b      	lsls	r3, r3, #2
 800ac3a:	441a      	add	r2, r3
 800ac3c:	68bb      	ldr	r3, [r7, #8]
 800ac3e:	885b      	ldrh	r3, [r3, #2]
 800ac40:	4619      	mov	r1, r3
 800ac42:	68bb      	ldr	r3, [r7, #8]
 800ac44:	885b      	ldrh	r3, [r3, #2]
 800ac46:	085b      	lsrs	r3, r3, #1
 800ac48:	b29b      	uxth	r3, r3
 800ac4a:	440b      	add	r3, r1
 800ac4c:	429a      	cmp	r2, r3
 800ac4e:	dd06      	ble.n	800ac5e <mqtt_cyclic_timer+0xae>
        LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_cyclic_timer: Server incoming keep-alive timeout\n"));
        mqtt_close(client, MQTT_CONNECT_TIMEOUT);
 800ac50:	f240 1101 	movw	r1, #257	; 0x101
 800ac54:	68b8      	ldr	r0, [r7, #8]
 800ac56:	f7ff ff4b 	bl	800aaf0 <mqtt_close>
        restart_timer = 0;
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	73fb      	strb	r3, [r7, #15]
      }

      /* If time for a keep alive message to be sent, transmission has been idle for keep_alive time */
      if ((client->cyclic_tick * MQTT_CYCLIC_TIMER_INTERVAL) >= client->keep_alive) {
 800ac5e:	68bb      	ldr	r3, [r7, #8]
 800ac60:	881b      	ldrh	r3, [r3, #0]
 800ac62:	461a      	mov	r2, r3
 800ac64:	4613      	mov	r3, r2
 800ac66:	009b      	lsls	r3, r3, #2
 800ac68:	4413      	add	r3, r2
 800ac6a:	68ba      	ldr	r2, [r7, #8]
 800ac6c:	8852      	ldrh	r2, [r2, #2]
 800ac6e:	4293      	cmp	r3, r2
 800ac70:	db18      	blt.n	800aca4 <mqtt_cyclic_timer+0xf4>
        LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_cyclic_timer: Sending keep-alive message to server\n"));
        if (mqtt_output_check_space(&client->output, 0) != 0) {
 800ac72:	68bb      	ldr	r3, [r7, #8]
 800ac74:	33ec      	adds	r3, #236	; 0xec
 800ac76:	2100      	movs	r1, #0
 800ac78:	4618      	mov	r0, r3
 800ac7a:	f7ff ff07 	bl	800aa8c <mqtt_output_check_space>
 800ac7e:	4603      	mov	r3, r0
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d018      	beq.n	800acb6 <mqtt_cyclic_timer+0x106>
          mqtt_output_append_fixed_header(&client->output, MQTT_MSG_TYPE_PINGREQ, 0, 0, 0, 0);
 800ac84:	68bb      	ldr	r3, [r7, #8]
 800ac86:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 800ac8a:	2300      	movs	r3, #0
 800ac8c:	9301      	str	r3, [sp, #4]
 800ac8e:	2300      	movs	r3, #0
 800ac90:	9300      	str	r3, [sp, #0]
 800ac92:	2300      	movs	r3, #0
 800ac94:	2200      	movs	r2, #0
 800ac96:	210c      	movs	r1, #12
 800ac98:	f7ff fead 	bl	800a9f6 <mqtt_output_append_fixed_header>
          client->cyclic_tick = 0;
 800ac9c:	68bb      	ldr	r3, [r7, #8]
 800ac9e:	2200      	movs	r2, #0
 800aca0:	801a      	strh	r2, [r3, #0]
 800aca2:	e008      	b.n	800acb6 <mqtt_cyclic_timer+0x106>
        }
      } else {
        client->cyclic_tick++;
 800aca4:	68bb      	ldr	r3, [r7, #8]
 800aca6:	881b      	ldrh	r3, [r3, #0]
 800aca8:	3301      	adds	r3, #1
 800acaa:	b29a      	uxth	r2, r3
 800acac:	68bb      	ldr	r3, [r7, #8]
 800acae:	801a      	strh	r2, [r3, #0]
 800acb0:	e001      	b.n	800acb6 <mqtt_cyclic_timer+0x106>
      }
    }
  } else {
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_cyclic_timer: Timer should not be running in state %d\n", client->conn_state));
    restart_timer = 0;
 800acb2:	2300      	movs	r3, #0
 800acb4:	73fb      	strb	r3, [r7, #15]
  }
  if (restart_timer) {
 800acb6:	7bfb      	ldrb	r3, [r7, #15]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d005      	beq.n	800acc8 <mqtt_cyclic_timer+0x118>
    sys_timeout(MQTT_CYCLIC_TIMER_INTERVAL * 1000, mqtt_cyclic_timer, arg);
 800acbc:	687a      	ldr	r2, [r7, #4]
 800acbe:	4907      	ldr	r1, [pc, #28]	; (800acdc <mqtt_cyclic_timer+0x12c>)
 800acc0:	f241 3088 	movw	r0, #5000	; 0x1388
 800acc4:	f009 f836 	bl	8013d34 <sys_timeout>
  }
}
 800acc8:	bf00      	nop
 800acca:	3710      	adds	r7, #16
 800accc:	46bd      	mov	sp, r7
 800acce:	bd80      	pop	{r7, pc}
 800acd0:	08017f84 	.word	0x08017f84
 800acd4:	08018194 	.word	0x08018194
 800acd8:	08017ffc 	.word	0x08017ffc
 800acdc:	0800abb1 	.word	0x0800abb1

0800ace0 <pub_ack_rec_rel_response>:
 * @param qos QoS value
 * @return ERR_OK if successful, ERR_MEM if out of memory
 */
static err_t
pub_ack_rec_rel_response(mqtt_client_t *client, u8_t msg, u16_t pkt_id, u8_t qos)
{
 800ace0:	b580      	push	{r7, lr}
 800ace2:	b086      	sub	sp, #24
 800ace4:	af02      	add	r7, sp, #8
 800ace6:	6078      	str	r0, [r7, #4]
 800ace8:	4608      	mov	r0, r1
 800acea:	4611      	mov	r1, r2
 800acec:	461a      	mov	r2, r3
 800acee:	4603      	mov	r3, r0
 800acf0:	70fb      	strb	r3, [r7, #3]
 800acf2:	460b      	mov	r3, r1
 800acf4:	803b      	strh	r3, [r7, #0]
 800acf6:	4613      	mov	r3, r2
 800acf8:	70bb      	strb	r3, [r7, #2]
  err_t err = ERR_OK;
 800acfa:	2300      	movs	r3, #0
 800acfc:	73fb      	strb	r3, [r7, #15]
  if (mqtt_output_check_space(&client->output, 2)) {
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	33ec      	adds	r3, #236	; 0xec
 800ad02:	2102      	movs	r1, #2
 800ad04:	4618      	mov	r0, r3
 800ad06:	f7ff fec1 	bl	800aa8c <mqtt_output_check_space>
 800ad0a:	4603      	mov	r3, r0
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d01c      	beq.n	800ad4a <pub_ack_rec_rel_response+0x6a>
    mqtt_output_append_fixed_header(&client->output, msg, 0, qos, 0, 2);
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 800ad16:	78bb      	ldrb	r3, [r7, #2]
 800ad18:	78f9      	ldrb	r1, [r7, #3]
 800ad1a:	2202      	movs	r2, #2
 800ad1c:	9201      	str	r2, [sp, #4]
 800ad1e:	2200      	movs	r2, #0
 800ad20:	9200      	str	r2, [sp, #0]
 800ad22:	2200      	movs	r2, #0
 800ad24:	f7ff fe67 	bl	800a9f6 <mqtt_output_append_fixed_header>
    mqtt_output_append_u16(&client->output, pkt_id);
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	33ec      	adds	r3, #236	; 0xec
 800ad2c:	883a      	ldrh	r2, [r7, #0]
 800ad2e:	4611      	mov	r1, r2
 800ad30:	4618      	mov	r0, r3
 800ad32:	f7ff fe1c 	bl	800a96e <mqtt_output_append_u16>
    mqtt_output_send(&client->output, client->conn);
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	68db      	ldr	r3, [r3, #12]
 800ad40:	4619      	mov	r1, r3
 800ad42:	4610      	mov	r0, r2
 800ad44:	f7ff fbb2 	bl	800a4ac <mqtt_output_send>
 800ad48:	e001      	b.n	800ad4e <pub_ack_rec_rel_response+0x6e>
  } else {
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("pub_ack_rec_rel_response: OOM creating response: %s with pkt_id: %d\n",
                                   mqtt_msg_type_to_str(msg), pkt_id));
    err = ERR_MEM;
 800ad4a:	23ff      	movs	r3, #255	; 0xff
 800ad4c:	73fb      	strb	r3, [r7, #15]
  }
  return err;
 800ad4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ad52:	4618      	mov	r0, r3
 800ad54:	3710      	adds	r7, #16
 800ad56:	46bd      	mov	sp, r7
 800ad58:	bd80      	pop	{r7, pc}

0800ad5a <mqtt_incomming_suback>:
 * @param r Matching request
 * @param result Result code from server
 */
static void
mqtt_incomming_suback(struct mqtt_request_t *r, u8_t result)
{
 800ad5a:	b580      	push	{r7, lr}
 800ad5c:	b082      	sub	sp, #8
 800ad5e:	af00      	add	r7, sp, #0
 800ad60:	6078      	str	r0, [r7, #4]
 800ad62:	460b      	mov	r3, r1
 800ad64:	70fb      	strb	r3, [r7, #3]
  if (r->cb != NULL) {
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	685b      	ldr	r3, [r3, #4]
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d00c      	beq.n	800ad88 <mqtt_incomming_suback+0x2e>
    r->cb(r->arg, result < 3 ? ERR_OK : ERR_ABRT);
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	685b      	ldr	r3, [r3, #4]
 800ad72:	687a      	ldr	r2, [r7, #4]
 800ad74:	6890      	ldr	r0, [r2, #8]
 800ad76:	78fa      	ldrb	r2, [r7, #3]
 800ad78:	2a02      	cmp	r2, #2
 800ad7a:	d801      	bhi.n	800ad80 <mqtt_incomming_suback+0x26>
 800ad7c:	2200      	movs	r2, #0
 800ad7e:	e001      	b.n	800ad84 <mqtt_incomming_suback+0x2a>
 800ad80:	f06f 020c 	mvn.w	r2, #12
 800ad84:	4611      	mov	r1, r2
 800ad86:	4798      	blx	r3
  }
}
 800ad88:	bf00      	nop
 800ad8a:	3708      	adds	r7, #8
 800ad8c:	46bd      	mov	sp, r7
 800ad8e:	bd80      	pop	{r7, pc}

0800ad90 <mqtt_message_received>:
 * @param length length received part
 * @param remaining_length Remaining length of complete message
 */
static mqtt_connection_status_t
mqtt_message_received(mqtt_client_t *client, u8_t fixed_hdr_idx, u16_t length, u32_t remaining_length)
{
 800ad90:	b590      	push	{r4, r7, lr}
 800ad92:	b08f      	sub	sp, #60	; 0x3c
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	60f8      	str	r0, [r7, #12]
 800ad98:	607b      	str	r3, [r7, #4]
 800ad9a:	460b      	mov	r3, r1
 800ad9c:	72fb      	strb	r3, [r7, #11]
 800ad9e:	4613      	mov	r3, r2
 800ada0:	813b      	strh	r3, [r7, #8]
  mqtt_connection_status_t res = MQTT_CONNECT_ACCEPTED;
 800ada2:	2300      	movs	r3, #0
 800ada4:	86fb      	strh	r3, [r7, #54]	; 0x36

  u8_t *var_hdr_payload = client->rx_buffer + fixed_hdr_idx;
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 800adac:	7afb      	ldrb	r3, [r7, #11]
 800adae:	4413      	add	r3, r2
 800adb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  size_t var_hdr_payload_bufsize = sizeof(client->rx_buffer) - fixed_hdr_idx;
 800adb2:	7afb      	ldrb	r3, [r7, #11]
 800adb4:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800adb8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Control packet type */
  u8_t pkt_type = MQTT_CTL_PACKET_TYPE(client->rx_buffer[0]);
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800adc0:	091b      	lsrs	r3, r3, #4
 800adc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  u16_t pkt_id = 0;
 800adc6:	2300      	movs	r3, #0
 800adc8:	84bb      	strh	r3, [r7, #36]	; 0x24

  LWIP_ASSERT("client->msg_idx < MQTT_VAR_HEADER_BUFFER_LEN", client->msg_idx < MQTT_VAR_HEADER_BUFFER_LEN);
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800adce:	2b7f      	cmp	r3, #127	; 0x7f
 800add0:	d906      	bls.n	800ade0 <mqtt_message_received+0x50>
 800add2:	4b97      	ldr	r3, [pc, #604]	; (800b030 <mqtt_message_received+0x2a0>)
 800add4:	f240 22ab 	movw	r2, #683	; 0x2ab
 800add8:	4996      	ldr	r1, [pc, #600]	; (800b034 <mqtt_message_received+0x2a4>)
 800adda:	4897      	ldr	r0, [pc, #604]	; (800b038 <mqtt_message_received+0x2a8>)
 800addc:	f00b fd30 	bl	8016840 <iprintf>
  LWIP_ASSERT("fixed_hdr_idx <= client->msg_idx", fixed_hdr_idx <= client->msg_idx);
 800ade0:	7afa      	ldrb	r2, [r7, #11]
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ade6:	429a      	cmp	r2, r3
 800ade8:	d906      	bls.n	800adf8 <mqtt_message_received+0x68>
 800adea:	4b91      	ldr	r3, [pc, #580]	; (800b030 <mqtt_message_received+0x2a0>)
 800adec:	f44f 722b 	mov.w	r2, #684	; 0x2ac
 800adf0:	4992      	ldr	r1, [pc, #584]	; (800b03c <mqtt_message_received+0x2ac>)
 800adf2:	4891      	ldr	r0, [pc, #580]	; (800b038 <mqtt_message_received+0x2a8>)
 800adf4:	f00b fd24 	bl	8016840 <iprintf>
  LWIP_ERROR("buffer length mismatch", fixed_hdr_idx + length <= MQTT_VAR_HEADER_BUFFER_LEN,
 800adf8:	7afa      	ldrb	r2, [r7, #11]
 800adfa:	893b      	ldrh	r3, [r7, #8]
 800adfc:	4413      	add	r3, r2
 800adfe:	2b80      	cmp	r3, #128	; 0x80
 800ae00:	dd09      	ble.n	800ae16 <mqtt_message_received+0x86>
 800ae02:	4b8b      	ldr	r3, [pc, #556]	; (800b030 <mqtt_message_received+0x2a0>)
 800ae04:	f240 22ad 	movw	r2, #685	; 0x2ad
 800ae08:	498d      	ldr	r1, [pc, #564]	; (800b040 <mqtt_message_received+0x2b0>)
 800ae0a:	488b      	ldr	r0, [pc, #556]	; (800b038 <mqtt_message_received+0x2a8>)
 800ae0c:	f00b fd18 	bl	8016840 <iprintf>
 800ae10:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ae14:	e16f      	b.n	800b0f6 <mqtt_message_received+0x366>
             return MQTT_CONNECT_DISCONNECTED);

  if (pkt_type == MQTT_MSG_TYPE_CONNACK) {
 800ae16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ae1a:	2b02      	cmp	r3, #2
 800ae1c:	d123      	bne.n	800ae66 <mqtt_message_received+0xd6>
    if (client->conn_state == MQTT_CONNECTING) {
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	7a9b      	ldrb	r3, [r3, #10]
 800ae22:	2b02      	cmp	r3, #2
 800ae24:	f040 8152 	bne.w	800b0cc <mqtt_message_received+0x33c>
      if (length < 2) {
 800ae28:	893b      	ldrh	r3, [r7, #8]
 800ae2a:	2b01      	cmp	r3, #1
 800ae2c:	f240 8150 	bls.w	800b0d0 <mqtt_message_received+0x340>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short CONNACK message\n"));
        goto out_disconnect;
      }
      /* Get result code from CONNACK */
      res = (mqtt_connection_status_t)var_hdr_payload[1];
 800ae30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae32:	3301      	adds	r3, #1
 800ae34:	781b      	ldrb	r3, [r3, #0]
 800ae36:	86fb      	strh	r3, [r7, #54]	; 0x36
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: Connect response code %d\n", res));
      if (res == MQTT_CONNECT_ACCEPTED) {
 800ae38:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	f040 8146 	bne.w	800b0cc <mqtt_message_received+0x33c>
        /* Reset cyclic_tick when changing to connected state */
        client->cyclic_tick = 0;
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	2200      	movs	r2, #0
 800ae44:	801a      	strh	r2, [r3, #0]
        client->conn_state = MQTT_CONNECTED;
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	2203      	movs	r2, #3
 800ae4a:	729a      	strb	r2, [r3, #10]
        /* Notify upper layer */
        if (client->connect_cb != 0) {
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	695b      	ldr	r3, [r3, #20]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	f000 813b 	beq.w	800b0cc <mqtt_message_received+0x33c>
          client->connect_cb(client, client->connect_arg, res);
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	695b      	ldr	r3, [r3, #20]
 800ae5a:	68fa      	ldr	r2, [r7, #12]
 800ae5c:	6911      	ldr	r1, [r2, #16]
 800ae5e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800ae60:	68f8      	ldr	r0, [r7, #12]
 800ae62:	4798      	blx	r3
 800ae64:	e132      	b.n	800b0cc <mqtt_message_received+0x33c>
        }
      }
    } else {
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: Received CONNACK in connected state\n"));
    }
  } else if (pkt_type == MQTT_MSG_TYPE_PINGRESP) {
 800ae66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ae6a:	2b0d      	cmp	r3, #13
 800ae6c:	f000 812e 	beq.w	800b0cc <mqtt_message_received+0x33c>
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ( "mqtt_message_received: Received PINGRESP from server\n"));

  } else if (pkt_type == MQTT_MSG_TYPE_PUBLISH) {
 800ae70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ae74:	2b03      	cmp	r3, #3
 800ae76:	f040 80c0 	bne.w	800affa <mqtt_message_received+0x26a>
    u16_t payload_offset = 0;
 800ae7a:	2300      	movs	r3, #0
 800ae7c:	86bb      	strh	r3, [r7, #52]	; 0x34
    u16_t payload_length = length;
 800ae7e:	893b      	ldrh	r3, [r7, #8]
 800ae80:	867b      	strh	r3, [r7, #50]	; 0x32
    u8_t qos = MQTT_CTL_PACKET_QOS(client->rx_buffer[0]);
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800ae88:	105b      	asrs	r3, r3, #1
 800ae8a:	b2db      	uxtb	r3, r3
 800ae8c:	f003 0303 	and.w	r3, r3, #3
 800ae90:	77fb      	strb	r3, [r7, #31]

    if (client->msg_idx <= MQTT_VAR_HEADER_BUFFER_LEN) {
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ae96:	2b80      	cmp	r3, #128	; 0x80
 800ae98:	d87d      	bhi.n	800af96 <mqtt_message_received+0x206>
      /* Should have topic and pkt id*/
      u8_t *topic;
      u16_t after_topic;
      u8_t bkp;
      u16_t topic_len;
      u16_t qos_len = (qos ? 2U : 0U);
 800ae9a:	7ffb      	ldrb	r3, [r7, #31]
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d001      	beq.n	800aea4 <mqtt_message_received+0x114>
 800aea0:	2302      	movs	r3, #2
 800aea2:	e000      	b.n	800aea6 <mqtt_message_received+0x116>
 800aea4:	2300      	movs	r3, #0
 800aea6:	83bb      	strh	r3, [r7, #28]
      if (length < 2 + qos_len) {
 800aea8:	8bbb      	ldrh	r3, [r7, #28]
 800aeaa:	1c5a      	adds	r2, r3, #1
 800aeac:	893b      	ldrh	r3, [r7, #8]
 800aeae:	429a      	cmp	r2, r3
 800aeb0:	f280 8110 	bge.w	800b0d4 <mqtt_message_received+0x344>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short PUBLISH packet\n"));
        goto out_disconnect;
      }
      topic_len = var_hdr_payload[0];
 800aeb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aeb6:	781b      	ldrb	r3, [r3, #0]
 800aeb8:	837b      	strh	r3, [r7, #26]
      topic_len = (topic_len << 8) + (u16_t)(var_hdr_payload[1]);
 800aeba:	8b7b      	ldrh	r3, [r7, #26]
 800aebc:	021b      	lsls	r3, r3, #8
 800aebe:	b29a      	uxth	r2, r3
 800aec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aec2:	3301      	adds	r3, #1
 800aec4:	781b      	ldrb	r3, [r3, #0]
 800aec6:	b29b      	uxth	r3, r3
 800aec8:	4413      	add	r3, r2
 800aeca:	837b      	strh	r3, [r7, #26]
      if ((topic_len > length - (2 + qos_len)) ||
 800aecc:	8b7a      	ldrh	r2, [r7, #26]
 800aece:	8939      	ldrh	r1, [r7, #8]
 800aed0:	8bbb      	ldrh	r3, [r7, #28]
 800aed2:	3302      	adds	r3, #2
 800aed4:	1acb      	subs	r3, r1, r3
 800aed6:	429a      	cmp	r2, r3
 800aed8:	f300 80fe 	bgt.w	800b0d8 <mqtt_message_received+0x348>
          (topic_len > var_hdr_payload_bufsize - (2 + qos_len))) {
 800aedc:	8b7a      	ldrh	r2, [r7, #26]
 800aede:	8bbb      	ldrh	r3, [r7, #28]
 800aee0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aee2:	1acb      	subs	r3, r1, r3
 800aee4:	3b02      	subs	r3, #2
      if ((topic_len > length - (2 + qos_len)) ||
 800aee6:	429a      	cmp	r2, r3
 800aee8:	f200 80f6 	bhi.w	800b0d8 <mqtt_message_received+0x348>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short PUBLISH packet (topic)\n"));
        goto out_disconnect;
      }

      topic = var_hdr_payload + 2;
 800aeec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aeee:	3302      	adds	r3, #2
 800aef0:	617b      	str	r3, [r7, #20]
      after_topic = 2 + topic_len;
 800aef2:	8b7b      	ldrh	r3, [r7, #26]
 800aef4:	3302      	adds	r3, #2
 800aef6:	863b      	strh	r3, [r7, #48]	; 0x30
      /* Check buffer length, add one byte even for QoS 0 so that zero termination will fit */
      if ((after_topic + (qos ? 2U : 1U)) > var_hdr_payload_bufsize) {
 800aef8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800aefa:	7ffa      	ldrb	r2, [r7, #31]
 800aefc:	2a00      	cmp	r2, #0
 800aefe:	d001      	beq.n	800af04 <mqtt_message_received+0x174>
 800af00:	2202      	movs	r2, #2
 800af02:	e000      	b.n	800af06 <mqtt_message_received+0x176>
 800af04:	2201      	movs	r2, #1
 800af06:	4413      	add	r3, r2
 800af08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800af0a:	429a      	cmp	r2, r3
 800af0c:	f0c0 80e6 	bcc.w	800b0dc <mqtt_message_received+0x34c>
        LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: Receive buffer can not fit topic + pkt_id\n"));
        goto out_disconnect;
      }

      /* id for QoS 1 and 2 */
      if (qos > 0) {
 800af10:	7ffb      	ldrb	r3, [r7, #31]
 800af12:	2b00      	cmp	r3, #0
 800af14:	d01a      	beq.n	800af4c <mqtt_message_received+0x1bc>
        if (length < after_topic + 2U) {
 800af16:	893a      	ldrh	r2, [r7, #8]
 800af18:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800af1a:	3302      	adds	r3, #2
 800af1c:	429a      	cmp	r2, r3
 800af1e:	f0c0 80df 	bcc.w	800b0e0 <mqtt_message_received+0x350>
          LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short PUBLISH packet (after_topic)\n"));
          goto out_disconnect;
        }
        client->inpub_pkt_id = ((u16_t)var_hdr_payload[after_topic] << 8) + (u16_t)var_hdr_payload[after_topic + 1];
 800af22:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800af24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800af26:	4413      	add	r3, r2
 800af28:	781b      	ldrb	r3, [r3, #0]
 800af2a:	b29b      	uxth	r3, r3
 800af2c:	021b      	lsls	r3, r3, #8
 800af2e:	b29a      	uxth	r2, r3
 800af30:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800af32:	3301      	adds	r3, #1
 800af34:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800af36:	440b      	add	r3, r1
 800af38:	781b      	ldrb	r3, [r3, #0]
 800af3a:	b29b      	uxth	r3, r3
 800af3c:	4413      	add	r3, r2
 800af3e:	b29a      	uxth	r2, r3
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	811a      	strh	r2, [r3, #8]
        after_topic += 2;
 800af44:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800af46:	3302      	adds	r3, #2
 800af48:	863b      	strh	r3, [r7, #48]	; 0x30
 800af4a:	e002      	b.n	800af52 <mqtt_message_received+0x1c2>
      } else {
        client->inpub_pkt_id = 0;
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	2200      	movs	r2, #0
 800af50:	811a      	strh	r2, [r3, #8]
      }
      /* Take backup of byte after topic */
      bkp = topic[topic_len];
 800af52:	8b7b      	ldrh	r3, [r7, #26]
 800af54:	697a      	ldr	r2, [r7, #20]
 800af56:	4413      	add	r3, r2
 800af58:	781b      	ldrb	r3, [r3, #0]
 800af5a:	74fb      	strb	r3, [r7, #19]
      /* Zero terminate string */
      topic[topic_len] = 0;
 800af5c:	8b7b      	ldrh	r3, [r7, #26]
 800af5e:	697a      	ldr	r2, [r7, #20]
 800af60:	4413      	add	r3, r2
 800af62:	2200      	movs	r2, #0
 800af64:	701a      	strb	r2, [r3, #0]
      /* Payload data remaining in receive buffer */
      payload_length = length - after_topic;
 800af66:	893a      	ldrh	r2, [r7, #8]
 800af68:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800af6a:	1ad3      	subs	r3, r2, r3
 800af6c:	867b      	strh	r3, [r7, #50]	; 0x32
      payload_offset = after_topic;
 800af6e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800af70:	86bb      	strh	r3, [r7, #52]	; 0x34

      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_incomming_publish: Received message with QoS %d at topic: %s, payload length %"U32_F"\n",
                                     qos, topic, remaining_length + payload_length));
      if (client->pub_cb != NULL) {
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800af76:	2b00      	cmp	r3, #0
 800af78:	d008      	beq.n	800af8c <mqtt_message_received+0x1fc>
        client->pub_cb(client->inpub_arg, (const char *)topic, remaining_length + payload_length);
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800af7e:	68fa      	ldr	r2, [r7, #12]
 800af80:	6dd0      	ldr	r0, [r2, #92]	; 0x5c
 800af82:	8e79      	ldrh	r1, [r7, #50]	; 0x32
 800af84:	687a      	ldr	r2, [r7, #4]
 800af86:	440a      	add	r2, r1
 800af88:	6979      	ldr	r1, [r7, #20]
 800af8a:	4798      	blx	r3
      }
      /* Restore byte after topic */
      topic[topic_len] = bkp;
 800af8c:	8b7b      	ldrh	r3, [r7, #26]
 800af8e:	697a      	ldr	r2, [r7, #20]
 800af90:	4413      	add	r3, r2
 800af92:	7cfa      	ldrb	r2, [r7, #19]
 800af94:	701a      	strb	r2, [r3, #0]
    }
    if (payload_length > 0 || remaining_length == 0) {
 800af96:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d103      	bne.n	800afa4 <mqtt_message_received+0x214>
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	f040 8094 	bne.w	800b0cc <mqtt_message_received+0x33c>
      if (length < (size_t)(payload_offset + payload_length)) {
 800afa4:	893b      	ldrh	r3, [r7, #8]
 800afa6:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 800afa8:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800afaa:	440a      	add	r2, r1
 800afac:	4293      	cmp	r3, r2
 800afae:	f0c0 8099 	bcc.w	800b0e4 <mqtt_message_received+0x354>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short packet (payload)\n"));
        goto out_disconnect;
      }
      client->data_cb(client->inpub_arg, var_hdr_payload + payload_offset, payload_length, remaining_length == 0 ? MQTT_DATA_FLAG_LAST : 0);
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 800afba:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800afbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800afbe:	18d1      	adds	r1, r2, r3
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	bf0c      	ite	eq
 800afc6:	2301      	moveq	r3, #1
 800afc8:	2300      	movne	r3, #0
 800afca:	b2db      	uxtb	r3, r3
 800afcc:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800afce:	47a0      	blx	r4
      /* Reply if QoS > 0 */
      if (remaining_length == 0 && qos > 0) {
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d17a      	bne.n	800b0cc <mqtt_message_received+0x33c>
 800afd6:	7ffb      	ldrb	r3, [r7, #31]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d077      	beq.n	800b0cc <mqtt_message_received+0x33c>
        /* Send PUBACK for QoS 1 or PUBREC for QoS 2 */
        u8_t resp_msg = (qos == 1) ? MQTT_MSG_TYPE_PUBACK : MQTT_MSG_TYPE_PUBREC;
 800afdc:	7ffb      	ldrb	r3, [r7, #31]
 800afde:	2b01      	cmp	r3, #1
 800afe0:	d101      	bne.n	800afe6 <mqtt_message_received+0x256>
 800afe2:	2304      	movs	r3, #4
 800afe4:	e000      	b.n	800afe8 <mqtt_message_received+0x258>
 800afe6:	2305      	movs	r3, #5
 800afe8:	74bb      	strb	r3, [r7, #18]
        LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_incomming_publish: Sending publish response: %s with pkt_id: %d\n",
                                       mqtt_msg_type_to_str(resp_msg), client->inpub_pkt_id));
        pub_ack_rec_rel_response(client, resp_msg, client->inpub_pkt_id, 0);
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	891a      	ldrh	r2, [r3, #8]
 800afee:	7cb9      	ldrb	r1, [r7, #18]
 800aff0:	2300      	movs	r3, #0
 800aff2:	68f8      	ldr	r0, [r7, #12]
 800aff4:	f7ff fe74 	bl	800ace0 <pub_ack_rec_rel_response>
 800aff8:	e068      	b.n	800b0cc <mqtt_message_received+0x33c>
      }
    }
  } else {
    /* Get packet identifier */
    pkt_id = (u16_t)var_hdr_payload[0] << 8;
 800affa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800affc:	781b      	ldrb	r3, [r3, #0]
 800affe:	b29b      	uxth	r3, r3
 800b000:	021b      	lsls	r3, r3, #8
 800b002:	84bb      	strh	r3, [r7, #36]	; 0x24
    pkt_id |= (u16_t)var_hdr_payload[1];
 800b004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b006:	3301      	adds	r3, #1
 800b008:	781b      	ldrb	r3, [r3, #0]
 800b00a:	b29a      	uxth	r2, r3
 800b00c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b00e:	4313      	orrs	r3, r2
 800b010:	84bb      	strh	r3, [r7, #36]	; 0x24
    if (pkt_id == 0) {
 800b012:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b014:	2b00      	cmp	r3, #0
 800b016:	d067      	beq.n	800b0e8 <mqtt_message_received+0x358>
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: Got message with illegal packet identifier: 0\n"));
      goto out_disconnect;
    }
    if (pkt_type == MQTT_MSG_TYPE_PUBREC) {
 800b018:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b01c:	2b05      	cmp	r3, #5
 800b01e:	d111      	bne.n	800b044 <mqtt_message_received+0x2b4>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: PUBREC, sending PUBREL with pkt_id: %d\n", pkt_id));
      pub_ack_rec_rel_response(client, MQTT_MSG_TYPE_PUBREL, pkt_id, 1);
 800b020:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b022:	2301      	movs	r3, #1
 800b024:	2106      	movs	r1, #6
 800b026:	68f8      	ldr	r0, [r7, #12]
 800b028:	f7ff fe5a 	bl	800ace0 <pub_ack_rec_rel_response>
 800b02c:	e04e      	b.n	800b0cc <mqtt_message_received+0x33c>
 800b02e:	bf00      	nop
 800b030:	08017f84 	.word	0x08017f84
 800b034:	080181b8 	.word	0x080181b8
 800b038:	08017ffc 	.word	0x08017ffc
 800b03c:	080181e8 	.word	0x080181e8
 800b040:	0801820c 	.word	0x0801820c

    } else if (pkt_type == MQTT_MSG_TYPE_PUBREL) {
 800b044:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b048:	2b06      	cmp	r3, #6
 800b04a:	d106      	bne.n	800b05a <mqtt_message_received+0x2ca>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: PUBREL, sending PUBCOMP response with pkt_id: %d\n", pkt_id));
      pub_ack_rec_rel_response(client, MQTT_MSG_TYPE_PUBCOMP, pkt_id, 0);
 800b04c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b04e:	2300      	movs	r3, #0
 800b050:	2107      	movs	r1, #7
 800b052:	68f8      	ldr	r0, [r7, #12]
 800b054:	f7ff fe44 	bl	800ace0 <pub_ack_rec_rel_response>
 800b058:	e038      	b.n	800b0cc <mqtt_message_received+0x33c>

    } else if (pkt_type == MQTT_MSG_TYPE_SUBACK || pkt_type == MQTT_MSG_TYPE_UNSUBACK ||
 800b05a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b05e:	2b09      	cmp	r3, #9
 800b060:	d00b      	beq.n	800b07a <mqtt_message_received+0x2ea>
 800b062:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b066:	2b0b      	cmp	r3, #11
 800b068:	d007      	beq.n	800b07a <mqtt_message_received+0x2ea>
 800b06a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b06e:	2b07      	cmp	r3, #7
 800b070:	d003      	beq.n	800b07a <mqtt_message_received+0x2ea>
               pkt_type == MQTT_MSG_TYPE_PUBCOMP || pkt_type == MQTT_MSG_TYPE_PUBACK) {
 800b072:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b076:	2b04      	cmp	r3, #4
 800b078:	d138      	bne.n	800b0ec <mqtt_message_received+0x35c>
      struct mqtt_request_t *r = mqtt_take_request(&client->pend_req_queue, pkt_id);
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	3318      	adds	r3, #24
 800b07e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b080:	4611      	mov	r1, r2
 800b082:	4618      	mov	r0, r3
 800b084:	f7ff fb68 	bl	800a758 <mqtt_take_request>
 800b088:	6238      	str	r0, [r7, #32]
      if (r != NULL) {
 800b08a:	6a3b      	ldr	r3, [r7, #32]
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d01c      	beq.n	800b0ca <mqtt_message_received+0x33a>
        LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: %s response with id %d\n", mqtt_msg_type_to_str(pkt_type), pkt_id));
        if (pkt_type == MQTT_MSG_TYPE_SUBACK) {
 800b090:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b094:	2b09      	cmp	r3, #9
 800b096:	d10a      	bne.n	800b0ae <mqtt_message_received+0x31e>
          if (length < 3) {
 800b098:	893b      	ldrh	r3, [r7, #8]
 800b09a:	2b02      	cmp	r3, #2
 800b09c:	d928      	bls.n	800b0f0 <mqtt_message_received+0x360>
            LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: To small SUBACK packet\n"));
            goto out_disconnect;
          } else {
            mqtt_incomming_suback(r, var_hdr_payload[2]);
 800b09e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0a0:	3302      	adds	r3, #2
 800b0a2:	781b      	ldrb	r3, [r3, #0]
 800b0a4:	4619      	mov	r1, r3
 800b0a6:	6a38      	ldr	r0, [r7, #32]
 800b0a8:	f7ff fe57 	bl	800ad5a <mqtt_incomming_suback>
 800b0ac:	e00a      	b.n	800b0c4 <mqtt_message_received+0x334>
          }
        } else if (r->cb != NULL) {
 800b0ae:	6a3b      	ldr	r3, [r7, #32]
 800b0b0:	685b      	ldr	r3, [r3, #4]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d006      	beq.n	800b0c4 <mqtt_message_received+0x334>
          r->cb(r->arg, ERR_OK);
 800b0b6:	6a3b      	ldr	r3, [r7, #32]
 800b0b8:	685b      	ldr	r3, [r3, #4]
 800b0ba:	6a3a      	ldr	r2, [r7, #32]
 800b0bc:	6892      	ldr	r2, [r2, #8]
 800b0be:	2100      	movs	r1, #0
 800b0c0:	4610      	mov	r0, r2
 800b0c2:	4798      	blx	r3
        }
        mqtt_delete_request(r);
 800b0c4:	6a38      	ldr	r0, [r7, #32]
 800b0c6:	f7ff fb37 	bl	800a738 <mqtt_delete_request>
               pkt_type == MQTT_MSG_TYPE_PUBCOMP || pkt_type == MQTT_MSG_TYPE_PUBACK) {
 800b0ca:	bf00      	nop
    } else {
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ( "mqtt_message_received: Received unknown message type: %d\n", pkt_type));
      goto out_disconnect;
    }
  }
  return res;
 800b0cc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b0ce:	e012      	b.n	800b0f6 <mqtt_message_received+0x366>
        goto out_disconnect;
 800b0d0:	bf00      	nop
 800b0d2:	e00e      	b.n	800b0f2 <mqtt_message_received+0x362>
        goto out_disconnect;
 800b0d4:	bf00      	nop
 800b0d6:	e00c      	b.n	800b0f2 <mqtt_message_received+0x362>
        goto out_disconnect;
 800b0d8:	bf00      	nop
 800b0da:	e00a      	b.n	800b0f2 <mqtt_message_received+0x362>
        goto out_disconnect;
 800b0dc:	bf00      	nop
 800b0de:	e008      	b.n	800b0f2 <mqtt_message_received+0x362>
          goto out_disconnect;
 800b0e0:	bf00      	nop
 800b0e2:	e006      	b.n	800b0f2 <mqtt_message_received+0x362>
        goto out_disconnect;
 800b0e4:	bf00      	nop
 800b0e6:	e004      	b.n	800b0f2 <mqtt_message_received+0x362>
      goto out_disconnect;
 800b0e8:	bf00      	nop
 800b0ea:	e002      	b.n	800b0f2 <mqtt_message_received+0x362>
      goto out_disconnect;
 800b0ec:	bf00      	nop
 800b0ee:	e000      	b.n	800b0f2 <mqtt_message_received+0x362>
            goto out_disconnect;
 800b0f0:	bf00      	nop
out_disconnect:
  return MQTT_CONNECT_DISCONNECTED;
 800b0f2:	f44f 7380 	mov.w	r3, #256	; 0x100
}
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	373c      	adds	r7, #60	; 0x3c
 800b0fa:	46bd      	mov	sp, r7
 800b0fc:	bd90      	pop	{r4, r7, pc}
 800b0fe:	bf00      	nop

0800b100 <mqtt_parse_incoming>:
 * @param p PBUF chain of received data
 * @return Connection status
 */
static mqtt_connection_status_t
mqtt_parse_incoming(mqtt_client_t *client, struct pbuf *p)
{
 800b100:	b580      	push	{r7, lr}
 800b102:	b088      	sub	sp, #32
 800b104:	af00      	add	r7, sp, #0
 800b106:	6078      	str	r0, [r7, #4]
 800b108:	6039      	str	r1, [r7, #0]
  u16_t in_offset = 0;
 800b10a:	2300      	movs	r3, #0
 800b10c:	83fb      	strh	r3, [r7, #30]
  u32_t msg_rem_len = 0;
 800b10e:	2300      	movs	r3, #0
 800b110:	61bb      	str	r3, [r7, #24]
  u8_t fixed_hdr_idx = 0;
 800b112:	2300      	movs	r3, #0
 800b114:	75fb      	strb	r3, [r7, #23]
  u8_t b = 0;
 800b116:	2300      	movs	r3, #0
 800b118:	75bb      	strb	r3, [r7, #22]

  while (p->tot_len > in_offset) {
 800b11a:	e0bc      	b.n	800b296 <mqtt_parse_incoming+0x196>
    /* We ALWAYS parse the header here first. Even if the header was not
       included in this segment, we re-parse it here by buffering it in
       client->rx_buffer. client->msg_idx keeps track of this. */
    if ((fixed_hdr_idx < 2) || ((b & 0x80) != 0)) {
 800b11c:	7dfb      	ldrb	r3, [r7, #23]
 800b11e:	2b01      	cmp	r3, #1
 800b120:	d903      	bls.n	800b12a <mqtt_parse_incoming+0x2a>
 800b122:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800b126:	2b00      	cmp	r3, #0
 800b128:	da4d      	bge.n	800b1c6 <mqtt_parse_incoming+0xc6>

      if (fixed_hdr_idx < client->msg_idx) {
 800b12a:	7dfa      	ldrb	r2, [r7, #23]
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b130:	429a      	cmp	r2, r3
 800b132:	d206      	bcs.n	800b142 <mqtt_parse_incoming+0x42>
        /* parse header from old pbuf (buffered in client->rx_buffer) */
        b = client->rx_buffer[fixed_hdr_idx];
 800b134:	7dfb      	ldrb	r3, [r7, #23]
 800b136:	687a      	ldr	r2, [r7, #4]
 800b138:	4413      	add	r3, r2
 800b13a:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800b13e:	75bb      	strb	r3, [r7, #22]
 800b140:	e012      	b.n	800b168 <mqtt_parse_incoming+0x68>
      } else {
        /* parse header from this pbuf and save it in client->rx_buffer in case
           it comes in segmented */
        b = pbuf_get_at(p, in_offset++);
 800b142:	8bfb      	ldrh	r3, [r7, #30]
 800b144:	1c5a      	adds	r2, r3, #1
 800b146:	83fa      	strh	r2, [r7, #30]
 800b148:	4619      	mov	r1, r3
 800b14a:	6838      	ldr	r0, [r7, #0]
 800b14c:	f002 fb5c 	bl	800d808 <pbuf_get_at>
 800b150:	4603      	mov	r3, r0
 800b152:	75bb      	strb	r3, [r7, #22]
        client->rx_buffer[client->msg_idx++] = b;
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b158:	1c59      	adds	r1, r3, #1
 800b15a:	687a      	ldr	r2, [r7, #4]
 800b15c:	6691      	str	r1, [r2, #104]	; 0x68
 800b15e:	687a      	ldr	r2, [r7, #4]
 800b160:	4413      	add	r3, r2
 800b162:	7dba      	ldrb	r2, [r7, #22]
 800b164:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
      }
      fixed_hdr_idx++;
 800b168:	7dfb      	ldrb	r3, [r7, #23]
 800b16a:	3301      	adds	r3, #1
 800b16c:	75fb      	strb	r3, [r7, #23]

      if (fixed_hdr_idx >= 2) {
 800b16e:	7dfb      	ldrb	r3, [r7, #23]
 800b170:	2b01      	cmp	r3, #1
 800b172:	f240 8090 	bls.w	800b296 <mqtt_parse_incoming+0x196>
        /* fixed header contains at least 2 bytes but can contain more, depending on
           'remaining length'. All bytes but the last of this have 0x80 set to
           indicate more bytes are coming. */
        msg_rem_len |= (u32_t)(b & 0x7f) << ((fixed_hdr_idx - 2) * 7);
 800b176:	7dbb      	ldrb	r3, [r7, #22]
 800b178:	f003 017f 	and.w	r1, r3, #127	; 0x7f
 800b17c:	7dfb      	ldrb	r3, [r7, #23]
 800b17e:	1e9a      	subs	r2, r3, #2
 800b180:	4613      	mov	r3, r2
 800b182:	00db      	lsls	r3, r3, #3
 800b184:	1a9b      	subs	r3, r3, r2
 800b186:	fa01 f303 	lsl.w	r3, r1, r3
 800b18a:	69ba      	ldr	r2, [r7, #24]
 800b18c:	4313      	orrs	r3, r2
 800b18e:	61bb      	str	r3, [r7, #24]
        if ((b & 0x80) == 0) {
 800b190:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800b194:	2b00      	cmp	r3, #0
 800b196:	db7e      	blt.n	800b296 <mqtt_parse_incoming+0x196>
          /* fixed header is done */
          LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_parse_incoming: Remaining length after fixed header: %"U32_F"\n", msg_rem_len));
          if (msg_rem_len == 0) {
 800b198:	69bb      	ldr	r3, [r7, #24]
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d10b      	bne.n	800b1b6 <mqtt_parse_incoming+0xb6>
            /* Complete message with no extra headers of payload received */
            mqtt_message_received(client, fixed_hdr_idx, 0, 0);
 800b19e:	7df9      	ldrb	r1, [r7, #23]
 800b1a0:	2300      	movs	r3, #0
 800b1a2:	2200      	movs	r2, #0
 800b1a4:	6878      	ldr	r0, [r7, #4]
 800b1a6:	f7ff fdf3 	bl	800ad90 <mqtt_message_received>
            client->msg_idx = 0;
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	2200      	movs	r2, #0
 800b1ae:	669a      	str	r2, [r3, #104]	; 0x68
            fixed_hdr_idx = 0;
 800b1b0:	2300      	movs	r3, #0
 800b1b2:	75fb      	strb	r3, [r7, #23]
 800b1b4:	e06f      	b.n	800b296 <mqtt_parse_incoming+0x196>
          } else {
            /* Bytes remaining in message (changes remaining length if this is
               not the first segment of this message) */
            msg_rem_len = (msg_rem_len + fixed_hdr_idx) - client->msg_idx;
 800b1b6:	7dfa      	ldrb	r2, [r7, #23]
 800b1b8:	69bb      	ldr	r3, [r7, #24]
 800b1ba:	441a      	add	r2, r3
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b1c0:	1ad3      	subs	r3, r2, r3
 800b1c2:	61bb      	str	r3, [r7, #24]
      if (fixed_hdr_idx >= 2) {
 800b1c4:	e067      	b.n	800b296 <mqtt_parse_incoming+0x196>
      }
    } else {
      /* Fixed header has been parsed, parse variable header */
      u16_t cpy_len, cpy_start, buffer_space;

      cpy_start = (client->msg_idx - fixed_hdr_idx) % (MQTT_VAR_HEADER_BUFFER_LEN - fixed_hdr_idx) + fixed_hdr_idx;
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800b1ca:	7dfb      	ldrb	r3, [r7, #23]
 800b1cc:	1ad3      	subs	r3, r2, r3
 800b1ce:	7dfa      	ldrb	r2, [r7, #23]
 800b1d0:	f1c2 0280 	rsb	r2, r2, #128	; 0x80
 800b1d4:	fbb3 f1f2 	udiv	r1, r3, r2
 800b1d8:	fb01 f202 	mul.w	r2, r1, r2
 800b1dc:	1a9b      	subs	r3, r3, r2
 800b1de:	b29a      	uxth	r2, r3
 800b1e0:	7dfb      	ldrb	r3, [r7, #23]
 800b1e2:	b29b      	uxth	r3, r3
 800b1e4:	4413      	add	r3, r2
 800b1e6:	827b      	strh	r3, [r7, #18]

      /* Allow to copy the lesser one of available length in input data or bytes remaining in message */
      cpy_len = (u16_t)LWIP_MIN((u16_t)(p->tot_len - in_offset), msg_rem_len);
 800b1e8:	683b      	ldr	r3, [r7, #0]
 800b1ea:	891a      	ldrh	r2, [r3, #8]
 800b1ec:	8bfb      	ldrh	r3, [r7, #30]
 800b1ee:	1ad3      	subs	r3, r2, r3
 800b1f0:	b29b      	uxth	r3, r3
 800b1f2:	461a      	mov	r2, r3
 800b1f4:	69bb      	ldr	r3, [r7, #24]
 800b1f6:	4293      	cmp	r3, r2
 800b1f8:	d905      	bls.n	800b206 <mqtt_parse_incoming+0x106>
 800b1fa:	683b      	ldr	r3, [r7, #0]
 800b1fc:	891a      	ldrh	r2, [r3, #8]
 800b1fe:	8bfb      	ldrh	r3, [r7, #30]
 800b200:	1ad3      	subs	r3, r2, r3
 800b202:	b29b      	uxth	r3, r3
 800b204:	e001      	b.n	800b20a <mqtt_parse_incoming+0x10a>
 800b206:	69bb      	ldr	r3, [r7, #24]
 800b208:	b29b      	uxth	r3, r3
 800b20a:	82bb      	strh	r3, [r7, #20]

      /* Limit to available space in buffer */
      buffer_space = MQTT_VAR_HEADER_BUFFER_LEN - cpy_start;
 800b20c:	8a7b      	ldrh	r3, [r7, #18]
 800b20e:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800b212:	823b      	strh	r3, [r7, #16]
      if (cpy_len > buffer_space) {
 800b214:	8aba      	ldrh	r2, [r7, #20]
 800b216:	8a3b      	ldrh	r3, [r7, #16]
 800b218:	429a      	cmp	r2, r3
 800b21a:	d901      	bls.n	800b220 <mqtt_parse_incoming+0x120>
        cpy_len = buffer_space;
 800b21c:	8a3b      	ldrh	r3, [r7, #16]
 800b21e:	82bb      	strh	r3, [r7, #20]
      }
      pbuf_copy_partial(p, client->rx_buffer + cpy_start, cpy_len, in_offset);
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 800b226:	8a7b      	ldrh	r3, [r7, #18]
 800b228:	18d1      	adds	r1, r2, r3
 800b22a:	8bfb      	ldrh	r3, [r7, #30]
 800b22c:	8aba      	ldrh	r2, [r7, #20]
 800b22e:	6838      	ldr	r0, [r7, #0]
 800b230:	f002 fa1c 	bl	800d66c <pbuf_copy_partial>

      /* Advance get and put indexes  */
      client->msg_idx += cpy_len;
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800b238:	8abb      	ldrh	r3, [r7, #20]
 800b23a:	441a      	add	r2, r3
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	669a      	str	r2, [r3, #104]	; 0x68
      in_offset += cpy_len;
 800b240:	8bfa      	ldrh	r2, [r7, #30]
 800b242:	8abb      	ldrh	r3, [r7, #20]
 800b244:	4413      	add	r3, r2
 800b246:	83fb      	strh	r3, [r7, #30]
      msg_rem_len -= cpy_len;
 800b248:	8abb      	ldrh	r3, [r7, #20]
 800b24a:	69ba      	ldr	r2, [r7, #24]
 800b24c:	1ad3      	subs	r3, r2, r3
 800b24e:	61bb      	str	r3, [r7, #24]

      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_parse_incoming: msg_idx: %"U32_F", cpy_len: %"U16_F", remaining %"U32_F"\n", client->msg_idx, cpy_len, msg_rem_len));
      if ((msg_rem_len == 0) || (cpy_len == buffer_space)) {
 800b250:	69bb      	ldr	r3, [r7, #24]
 800b252:	2b00      	cmp	r3, #0
 800b254:	d003      	beq.n	800b25e <mqtt_parse_incoming+0x15e>
 800b256:	8aba      	ldrh	r2, [r7, #20]
 800b258:	8a3b      	ldrh	r3, [r7, #16]
 800b25a:	429a      	cmp	r2, r3
 800b25c:	d11b      	bne.n	800b296 <mqtt_parse_incoming+0x196>
        /* Whole message received or buffer is full */
        mqtt_connection_status_t res = mqtt_message_received(client, fixed_hdr_idx, (cpy_start + cpy_len) - fixed_hdr_idx, msg_rem_len);
 800b25e:	8a7a      	ldrh	r2, [r7, #18]
 800b260:	8abb      	ldrh	r3, [r7, #20]
 800b262:	4413      	add	r3, r2
 800b264:	b29a      	uxth	r2, r3
 800b266:	7dfb      	ldrb	r3, [r7, #23]
 800b268:	b29b      	uxth	r3, r3
 800b26a:	1ad3      	subs	r3, r2, r3
 800b26c:	b29a      	uxth	r2, r3
 800b26e:	7df9      	ldrb	r1, [r7, #23]
 800b270:	69bb      	ldr	r3, [r7, #24]
 800b272:	6878      	ldr	r0, [r7, #4]
 800b274:	f7ff fd8c 	bl	800ad90 <mqtt_message_received>
 800b278:	4603      	mov	r3, r0
 800b27a:	81fb      	strh	r3, [r7, #14]
        if (res != MQTT_CONNECT_ACCEPTED) {
 800b27c:	89fb      	ldrh	r3, [r7, #14]
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d001      	beq.n	800b286 <mqtt_parse_incoming+0x186>
          return res;
 800b282:	89fb      	ldrh	r3, [r7, #14]
 800b284:	e00e      	b.n	800b2a4 <mqtt_parse_incoming+0x1a4>
        }
        if (msg_rem_len == 0) {
 800b286:	69bb      	ldr	r3, [r7, #24]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d104      	bne.n	800b296 <mqtt_parse_incoming+0x196>
          /* Reset parser state */
          client->msg_idx = 0;
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	2200      	movs	r2, #0
 800b290:	669a      	str	r2, [r3, #104]	; 0x68
          /* msg_tot_len = 0; */
          fixed_hdr_idx = 0;
 800b292:	2300      	movs	r3, #0
 800b294:	75fb      	strb	r3, [r7, #23]
  while (p->tot_len > in_offset) {
 800b296:	683b      	ldr	r3, [r7, #0]
 800b298:	891b      	ldrh	r3, [r3, #8]
 800b29a:	8bfa      	ldrh	r2, [r7, #30]
 800b29c:	429a      	cmp	r2, r3
 800b29e:	f4ff af3d 	bcc.w	800b11c <mqtt_parse_incoming+0x1c>
        }
      }
    }
  }
  return MQTT_CONNECT_ACCEPTED;
 800b2a2:	2300      	movs	r3, #0
}
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	3720      	adds	r7, #32
 800b2a8:	46bd      	mov	sp, r7
 800b2aa:	bd80      	pop	{r7, pc}

0800b2ac <mqtt_tcp_recv_cb>:
 * @param err Passed as return value if not ERR_OK
 * @return ERR_OK or err passed into callback
 */
static err_t
mqtt_tcp_recv_cb(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800b2ac:	b580      	push	{r7, lr}
 800b2ae:	b086      	sub	sp, #24
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	60f8      	str	r0, [r7, #12]
 800b2b4:	60b9      	str	r1, [r7, #8]
 800b2b6:	607a      	str	r2, [r7, #4]
 800b2b8:	70fb      	strb	r3, [r7, #3]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	617b      	str	r3, [r7, #20]
  LWIP_ASSERT("mqtt_tcp_recv_cb: client != NULL", client != NULL);
 800b2be:	697b      	ldr	r3, [r7, #20]
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d106      	bne.n	800b2d2 <mqtt_tcp_recv_cb+0x26>
 800b2c4:	4b24      	ldr	r3, [pc, #144]	; (800b358 <mqtt_tcp_recv_cb+0xac>)
 800b2c6:	f240 32a7 	movw	r2, #935	; 0x3a7
 800b2ca:	4924      	ldr	r1, [pc, #144]	; (800b35c <mqtt_tcp_recv_cb+0xb0>)
 800b2cc:	4824      	ldr	r0, [pc, #144]	; (800b360 <mqtt_tcp_recv_cb+0xb4>)
 800b2ce:	f00b fab7 	bl	8016840 <iprintf>
  LWIP_ASSERT("mqtt_tcp_recv_cb: client->conn == pcb", client->conn == pcb);
 800b2d2:	697b      	ldr	r3, [r7, #20]
 800b2d4:	68db      	ldr	r3, [r3, #12]
 800b2d6:	68ba      	ldr	r2, [r7, #8]
 800b2d8:	429a      	cmp	r2, r3
 800b2da:	d006      	beq.n	800b2ea <mqtt_tcp_recv_cb+0x3e>
 800b2dc:	4b1e      	ldr	r3, [pc, #120]	; (800b358 <mqtt_tcp_recv_cb+0xac>)
 800b2de:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800b2e2:	4920      	ldr	r1, [pc, #128]	; (800b364 <mqtt_tcp_recv_cb+0xb8>)
 800b2e4:	481e      	ldr	r0, [pc, #120]	; (800b360 <mqtt_tcp_recv_cb+0xb4>)
 800b2e6:	f00b faab 	bl	8016840 <iprintf>

  if (p == NULL) {
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d105      	bne.n	800b2fc <mqtt_tcp_recv_cb+0x50>
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_recv_cb: Recv pbuf=NULL, remote has closed connection\n"));
    mqtt_close(client, MQTT_CONNECT_DISCONNECTED);
 800b2f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b2f4:	6978      	ldr	r0, [r7, #20]
 800b2f6:	f7ff fbfb 	bl	800aaf0 <mqtt_close>
 800b2fa:	e027      	b.n	800b34c <mqtt_tcp_recv_cb+0xa0>
  } else {
    mqtt_connection_status_t res;
    if (err != ERR_OK) {
 800b2fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b300:	2b00      	cmp	r3, #0
 800b302:	d005      	beq.n	800b310 <mqtt_tcp_recv_cb+0x64>
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_tcp_recv_cb: Recv err=%d\n", err));
      pbuf_free(p);
 800b304:	6878      	ldr	r0, [r7, #4]
 800b306:	f001 ffc7 	bl	800d298 <pbuf_free>
      return err;
 800b30a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b30e:	e01e      	b.n	800b34e <mqtt_tcp_recv_cb+0xa2>
    }

    /* Tell remote that data has been received */
    altcp_recved(pcb, p->tot_len);
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	891b      	ldrh	r3, [r3, #8]
 800b314:	4619      	mov	r1, r3
 800b316:	68b8      	ldr	r0, [r7, #8]
 800b318:	f002 ff84 	bl	800e224 <tcp_recved>
    res = mqtt_parse_incoming(client, p);
 800b31c:	6879      	ldr	r1, [r7, #4]
 800b31e:	6978      	ldr	r0, [r7, #20]
 800b320:	f7ff feee 	bl	800b100 <mqtt_parse_incoming>
 800b324:	4603      	mov	r3, r0
 800b326:	827b      	strh	r3, [r7, #18]
    pbuf_free(p);
 800b328:	6878      	ldr	r0, [r7, #4]
 800b32a:	f001 ffb5 	bl	800d298 <pbuf_free>

    if (res != MQTT_CONNECT_ACCEPTED) {
 800b32e:	8a7b      	ldrh	r3, [r7, #18]
 800b330:	2b00      	cmp	r3, #0
 800b332:	d004      	beq.n	800b33e <mqtt_tcp_recv_cb+0x92>
      mqtt_close(client, res);
 800b334:	8a7b      	ldrh	r3, [r7, #18]
 800b336:	4619      	mov	r1, r3
 800b338:	6978      	ldr	r0, [r7, #20]
 800b33a:	f7ff fbd9 	bl	800aaf0 <mqtt_close>
    }
    /* If keep alive functionality is used */
    if (client->keep_alive != 0) {
 800b33e:	697b      	ldr	r3, [r7, #20]
 800b340:	885b      	ldrh	r3, [r3, #2]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d002      	beq.n	800b34c <mqtt_tcp_recv_cb+0xa0>
      /* Reset server alive watchdog */
      client->server_watchdog = 0;
 800b346:	697b      	ldr	r3, [r7, #20]
 800b348:	2200      	movs	r2, #0
 800b34a:	809a      	strh	r2, [r3, #4]
    }

  }
  return ERR_OK;
 800b34c:	2300      	movs	r3, #0
}
 800b34e:	4618      	mov	r0, r3
 800b350:	3718      	adds	r7, #24
 800b352:	46bd      	mov	sp, r7
 800b354:	bd80      	pop	{r7, pc}
 800b356:	bf00      	nop
 800b358:	08017f84 	.word	0x08017f84
 800b35c:	08018224 	.word	0x08018224
 800b360:	08017ffc 	.word	0x08017ffc
 800b364:	08018248 	.word	0x08018248

0800b368 <mqtt_tcp_sent_cb>:
 * @param len Number of bytes sent
 * @return ERR_OK
 */
static err_t
mqtt_tcp_sent_cb(void *arg, struct altcp_pcb *tpcb, u16_t len)
{
 800b368:	b580      	push	{r7, lr}
 800b36a:	b086      	sub	sp, #24
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	60f8      	str	r0, [r7, #12]
 800b370:	60b9      	str	r1, [r7, #8]
 800b372:	4613      	mov	r3, r2
 800b374:	80fb      	strh	r3, [r7, #6]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(tpcb);
  LWIP_UNUSED_ARG(len);

  if (client->conn_state == MQTT_CONNECTED) {
 800b37a:	697b      	ldr	r3, [r7, #20]
 800b37c:	7a9b      	ldrb	r3, [r3, #10]
 800b37e:	2b03      	cmp	r3, #3
 800b380:	d127      	bne.n	800b3d2 <mqtt_tcp_sent_cb+0x6a>
    struct mqtt_request_t *r;

    /* Reset keep-alive send timer and server watchdog */
    client->cyclic_tick = 0;
 800b382:	697b      	ldr	r3, [r7, #20]
 800b384:	2200      	movs	r2, #0
 800b386:	801a      	strh	r2, [r3, #0]
    client->server_watchdog = 0;
 800b388:	697b      	ldr	r3, [r7, #20]
 800b38a:	2200      	movs	r2, #0
 800b38c:	809a      	strh	r2, [r3, #4]
    /* QoS 0 publish has no response from server, so call its callbacks here */
    while ((r = mqtt_take_request(&client->pend_req_queue, 0)) != NULL) {
 800b38e:	e00d      	b.n	800b3ac <mqtt_tcp_sent_cb+0x44>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_sent_cb: Calling QoS 0 publish complete callback\n"));
      if (r->cb != NULL) {
 800b390:	693b      	ldr	r3, [r7, #16]
 800b392:	685b      	ldr	r3, [r3, #4]
 800b394:	2b00      	cmp	r3, #0
 800b396:	d006      	beq.n	800b3a6 <mqtt_tcp_sent_cb+0x3e>
        r->cb(r->arg, ERR_OK);
 800b398:	693b      	ldr	r3, [r7, #16]
 800b39a:	685b      	ldr	r3, [r3, #4]
 800b39c:	693a      	ldr	r2, [r7, #16]
 800b39e:	6892      	ldr	r2, [r2, #8]
 800b3a0:	2100      	movs	r1, #0
 800b3a2:	4610      	mov	r0, r2
 800b3a4:	4798      	blx	r3
      }
      mqtt_delete_request(r);
 800b3a6:	6938      	ldr	r0, [r7, #16]
 800b3a8:	f7ff f9c6 	bl	800a738 <mqtt_delete_request>
    while ((r = mqtt_take_request(&client->pend_req_queue, 0)) != NULL) {
 800b3ac:	697b      	ldr	r3, [r7, #20]
 800b3ae:	3318      	adds	r3, #24
 800b3b0:	2100      	movs	r1, #0
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	f7ff f9d0 	bl	800a758 <mqtt_take_request>
 800b3b8:	6138      	str	r0, [r7, #16]
 800b3ba:	693b      	ldr	r3, [r7, #16]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d1e7      	bne.n	800b390 <mqtt_tcp_sent_cb+0x28>
    }
    /* Try send any remaining buffers from output queue */
    mqtt_output_send(&client->output, client->conn);
 800b3c0:	697b      	ldr	r3, [r7, #20]
 800b3c2:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 800b3c6:	697b      	ldr	r3, [r7, #20]
 800b3c8:	68db      	ldr	r3, [r3, #12]
 800b3ca:	4619      	mov	r1, r3
 800b3cc:	4610      	mov	r0, r2
 800b3ce:	f7ff f86d 	bl	800a4ac <mqtt_output_send>
  }
  return ERR_OK;
 800b3d2:	2300      	movs	r3, #0
}
 800b3d4:	4618      	mov	r0, r3
 800b3d6:	3718      	adds	r7, #24
 800b3d8:	46bd      	mov	sp, r7
 800b3da:	bd80      	pop	{r7, pc}

0800b3dc <mqtt_tcp_err_cb>:
 * @param arg MQTT client
 * @param err Error encountered
 */
static void
mqtt_tcp_err_cb(void *arg, err_t err)
{
 800b3dc:	b580      	push	{r7, lr}
 800b3de:	b084      	sub	sp, #16
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	6078      	str	r0, [r7, #4]
 800b3e4:	460b      	mov	r3, r1
 800b3e6:	70fb      	strb	r3, [r7, #3]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err); /* only used for debug output */
  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_err_cb: TCP error callback: error %d, arg: %p\n", err, arg));
  LWIP_ASSERT("mqtt_tcp_err_cb: client != NULL", client != NULL);
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d106      	bne.n	800b400 <mqtt_tcp_err_cb+0x24>
 800b3f2:	4b09      	ldr	r3, [pc, #36]	; (800b418 <mqtt_tcp_err_cb+0x3c>)
 800b3f4:	f240 32f6 	movw	r2, #1014	; 0x3f6
 800b3f8:	4908      	ldr	r1, [pc, #32]	; (800b41c <mqtt_tcp_err_cb+0x40>)
 800b3fa:	4809      	ldr	r0, [pc, #36]	; (800b420 <mqtt_tcp_err_cb+0x44>)
 800b3fc:	f00b fa20 	bl	8016840 <iprintf>
  /* Set conn to null before calling close as pcb is already deallocated*/
  client->conn = 0;
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	2200      	movs	r2, #0
 800b404:	60da      	str	r2, [r3, #12]
  mqtt_close(client, MQTT_CONNECT_DISCONNECTED);
 800b406:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b40a:	68f8      	ldr	r0, [r7, #12]
 800b40c:	f7ff fb70 	bl	800aaf0 <mqtt_close>
}
 800b410:	bf00      	nop
 800b412:	3710      	adds	r7, #16
 800b414:	46bd      	mov	sp, r7
 800b416:	bd80      	pop	{r7, pc}
 800b418:	08017f84 	.word	0x08017f84
 800b41c:	08018270 	.word	0x08018270
 800b420:	08017ffc 	.word	0x08017ffc

0800b424 <mqtt_tcp_poll_cb>:
 * @param tpcb TCP connection handle
 * @return err ERR_OK
 */
static err_t
mqtt_tcp_poll_cb(void *arg, struct altcp_pcb *tpcb)
{
 800b424:	b580      	push	{r7, lr}
 800b426:	b084      	sub	sp, #16
 800b428:	af00      	add	r7, sp, #0
 800b42a:	6078      	str	r0, [r7, #4]
 800b42c:	6039      	str	r1, [r7, #0]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	60fb      	str	r3, [r7, #12]
  if (client->conn_state == MQTT_CONNECTED) {
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	7a9b      	ldrb	r3, [r3, #10]
 800b436:	2b03      	cmp	r3, #3
 800b438:	d105      	bne.n	800b446 <mqtt_tcp_poll_cb+0x22>
    /* Try send any remaining buffers from output queue */
    mqtt_output_send(&client->output, tpcb);
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	33ec      	adds	r3, #236	; 0xec
 800b43e:	6839      	ldr	r1, [r7, #0]
 800b440:	4618      	mov	r0, r3
 800b442:	f7ff f833 	bl	800a4ac <mqtt_output_send>
  }
  return ERR_OK;
 800b446:	2300      	movs	r3, #0
}
 800b448:	4618      	mov	r0, r3
 800b44a:	3710      	adds	r7, #16
 800b44c:	46bd      	mov	sp, r7
 800b44e:	bd80      	pop	{r7, pc}

0800b450 <mqtt_tcp_connect_cb>:
 * @param err Always ERR_OK, mqtt_tcp_err_cb is called in case of error
 * @return ERR_OK
 */
static err_t
mqtt_tcp_connect_cb(void *arg, struct altcp_pcb *tpcb, err_t err)
{
 800b450:	b580      	push	{r7, lr}
 800b452:	b086      	sub	sp, #24
 800b454:	af00      	add	r7, sp, #0
 800b456:	60f8      	str	r0, [r7, #12]
 800b458:	60b9      	str	r1, [r7, #8]
 800b45a:	4613      	mov	r3, r2
 800b45c:	71fb      	strb	r3, [r7, #7]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	617b      	str	r3, [r7, #20]

  if (err != ERR_OK) {
 800b462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d002      	beq.n	800b470 <mqtt_tcp_connect_cb+0x20>
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_tcp_connect_cb: TCP connect error %d\n", err));
    return err;
 800b46a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b46e:	e025      	b.n	800b4bc <mqtt_tcp_connect_cb+0x6c>
  }

  /* Initiate receiver state */
  client->msg_idx = 0;
 800b470:	697b      	ldr	r3, [r7, #20]
 800b472:	2200      	movs	r2, #0
 800b474:	669a      	str	r2, [r3, #104]	; 0x68

  /* Setup TCP callbacks */
  altcp_recv(tpcb, mqtt_tcp_recv_cb);
 800b476:	4913      	ldr	r1, [pc, #76]	; (800b4c4 <mqtt_tcp_connect_cb+0x74>)
 800b478:	68b8      	ldr	r0, [r7, #8]
 800b47a:	f003 fee9 	bl	800f250 <tcp_recv>
  altcp_sent(tpcb, mqtt_tcp_sent_cb);
 800b47e:	4912      	ldr	r1, [pc, #72]	; (800b4c8 <mqtt_tcp_connect_cb+0x78>)
 800b480:	68b8      	ldr	r0, [r7, #8]
 800b482:	f003 ff07 	bl	800f294 <tcp_sent>
  altcp_poll(tpcb, mqtt_tcp_poll_cb, 2);
 800b486:	2202      	movs	r2, #2
 800b488:	4910      	ldr	r1, [pc, #64]	; (800b4cc <mqtt_tcp_connect_cb+0x7c>)
 800b48a:	68b8      	ldr	r0, [r7, #8]
 800b48c:	f003 ff5e 	bl	800f34c <tcp_poll>

  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_connect_cb: TCP connection established to server\n"));
  /* Enter MQTT connect state */
  client->conn_state = MQTT_CONNECTING;
 800b490:	697b      	ldr	r3, [r7, #20]
 800b492:	2202      	movs	r2, #2
 800b494:	729a      	strb	r2, [r3, #10]

  /* Start cyclic timer */
  sys_timeout(MQTT_CYCLIC_TIMER_INTERVAL * 1000, mqtt_cyclic_timer, client);
 800b496:	697a      	ldr	r2, [r7, #20]
 800b498:	490d      	ldr	r1, [pc, #52]	; (800b4d0 <mqtt_tcp_connect_cb+0x80>)
 800b49a:	f241 3088 	movw	r0, #5000	; 0x1388
 800b49e:	f008 fc49 	bl	8013d34 <sys_timeout>
  client->cyclic_tick = 0;
 800b4a2:	697b      	ldr	r3, [r7, #20]
 800b4a4:	2200      	movs	r2, #0
 800b4a6:	801a      	strh	r2, [r3, #0]

  /* Start transmission from output queue, connect message is the first one out*/
  mqtt_output_send(&client->output, client->conn);
 800b4a8:	697b      	ldr	r3, [r7, #20]
 800b4aa:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 800b4ae:	697b      	ldr	r3, [r7, #20]
 800b4b0:	68db      	ldr	r3, [r3, #12]
 800b4b2:	4619      	mov	r1, r3
 800b4b4:	4610      	mov	r0, r2
 800b4b6:	f7fe fff9 	bl	800a4ac <mqtt_output_send>

  return ERR_OK;
 800b4ba:	2300      	movs	r3, #0
}
 800b4bc:	4618      	mov	r0, r3
 800b4be:	3718      	adds	r7, #24
 800b4c0:	46bd      	mov	sp, r7
 800b4c2:	bd80      	pop	{r7, pc}
 800b4c4:	0800b2ad 	.word	0x0800b2ad
 800b4c8:	0800b369 	.word	0x0800b369
 800b4cc:	0800b425 	.word	0x0800b425
 800b4d0:	0800abb1 	.word	0x0800abb1

0800b4d4 <mqtt_sub_unsub>:
 * @param sub 1 for subscribe, 0 for unsubscribe
 * @return ERR_OK if successful, @see err_t enum for other results
 */
err_t
mqtt_sub_unsub(mqtt_client_t *client, const char *topic, u8_t qos, mqtt_request_cb_t cb, void *arg, u8_t sub)
{
 800b4d4:	b580      	push	{r7, lr}
 800b4d6:	b08c      	sub	sp, #48	; 0x30
 800b4d8:	af02      	add	r7, sp, #8
 800b4da:	60f8      	str	r0, [r7, #12]
 800b4dc:	60b9      	str	r1, [r7, #8]
 800b4de:	603b      	str	r3, [r7, #0]
 800b4e0:	4613      	mov	r3, r2
 800b4e2:	71fb      	strb	r3, [r7, #7]
  u16_t remaining_length;
  u16_t pkt_id;
  struct mqtt_request_t *r;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("mqtt_sub_unsub: client != NULL", client);
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d106      	bne.n	800b4f8 <mqtt_sub_unsub+0x24>
 800b4ea:	4b5e      	ldr	r3, [pc, #376]	; (800b664 <mqtt_sub_unsub+0x190>)
 800b4ec:	f240 429f 	movw	r2, #1183	; 0x49f
 800b4f0:	495d      	ldr	r1, [pc, #372]	; (800b668 <mqtt_sub_unsub+0x194>)
 800b4f2:	485e      	ldr	r0, [pc, #376]	; (800b66c <mqtt_sub_unsub+0x198>)
 800b4f4:	f00b f9a4 	bl	8016840 <iprintf>
  LWIP_ASSERT("mqtt_sub_unsub: topic != NULL", topic);
 800b4f8:	68bb      	ldr	r3, [r7, #8]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d106      	bne.n	800b50c <mqtt_sub_unsub+0x38>
 800b4fe:	4b59      	ldr	r3, [pc, #356]	; (800b664 <mqtt_sub_unsub+0x190>)
 800b500:	f44f 6294 	mov.w	r2, #1184	; 0x4a0
 800b504:	495a      	ldr	r1, [pc, #360]	; (800b670 <mqtt_sub_unsub+0x19c>)
 800b506:	4859      	ldr	r0, [pc, #356]	; (800b66c <mqtt_sub_unsub+0x198>)
 800b508:	f00b f99a 	bl	8016840 <iprintf>

  topic_strlen = strlen(topic);
 800b50c:	68b8      	ldr	r0, [r7, #8]
 800b50e:	f7f4 fe7f 	bl	8000210 <strlen>
 800b512:	6278      	str	r0, [r7, #36]	; 0x24
  LWIP_ERROR("mqtt_sub_unsub: topic length overflow", (topic_strlen <= (0xFFFF - 2)), return ERR_ARG);
 800b514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b516:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 800b51a:	4293      	cmp	r3, r2
 800b51c:	d909      	bls.n	800b532 <mqtt_sub_unsub+0x5e>
 800b51e:	4b51      	ldr	r3, [pc, #324]	; (800b664 <mqtt_sub_unsub+0x190>)
 800b520:	f240 42a3 	movw	r2, #1187	; 0x4a3
 800b524:	4953      	ldr	r1, [pc, #332]	; (800b674 <mqtt_sub_unsub+0x1a0>)
 800b526:	4851      	ldr	r0, [pc, #324]	; (800b66c <mqtt_sub_unsub+0x198>)
 800b528:	f00b f98a 	bl	8016840 <iprintf>
 800b52c:	f06f 030f 	mvn.w	r3, #15
 800b530:	e093      	b.n	800b65a <mqtt_sub_unsub+0x186>
  topic_len = (u16_t)topic_strlen;
 800b532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b534:	847b      	strh	r3, [r7, #34]	; 0x22
  /* Topic string, pkt_id, qos for subscribe */
  total_len =  topic_len + 2 + 2 + (sub != 0);
 800b536:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b538:	3304      	adds	r3, #4
 800b53a:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 800b53e:	2a00      	cmp	r2, #0
 800b540:	bf14      	ite	ne
 800b542:	2201      	movne	r2, #1
 800b544:	2200      	moveq	r2, #0
 800b546:	b2d2      	uxtb	r2, r2
 800b548:	4413      	add	r3, r2
 800b54a:	61fb      	str	r3, [r7, #28]
  LWIP_ERROR("mqtt_sub_unsub: total length overflow", (total_len <= 0xFFFF), return ERR_ARG);
 800b54c:	69fb      	ldr	r3, [r7, #28]
 800b54e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b552:	d309      	bcc.n	800b568 <mqtt_sub_unsub+0x94>
 800b554:	4b43      	ldr	r3, [pc, #268]	; (800b664 <mqtt_sub_unsub+0x190>)
 800b556:	f240 42a7 	movw	r2, #1191	; 0x4a7
 800b55a:	4947      	ldr	r1, [pc, #284]	; (800b678 <mqtt_sub_unsub+0x1a4>)
 800b55c:	4843      	ldr	r0, [pc, #268]	; (800b66c <mqtt_sub_unsub+0x198>)
 800b55e:	f00b f96f 	bl	8016840 <iprintf>
 800b562:	f06f 030f 	mvn.w	r3, #15
 800b566:	e078      	b.n	800b65a <mqtt_sub_unsub+0x186>
  remaining_length = (u16_t)total_len;
 800b568:	69fb      	ldr	r3, [r7, #28]
 800b56a:	837b      	strh	r3, [r7, #26]

  LWIP_ASSERT("mqtt_sub_unsub: qos < 3", qos < 3);
 800b56c:	79fb      	ldrb	r3, [r7, #7]
 800b56e:	2b02      	cmp	r3, #2
 800b570:	d906      	bls.n	800b580 <mqtt_sub_unsub+0xac>
 800b572:	4b3c      	ldr	r3, [pc, #240]	; (800b664 <mqtt_sub_unsub+0x190>)
 800b574:	f240 42aa 	movw	r2, #1194	; 0x4aa
 800b578:	4940      	ldr	r1, [pc, #256]	; (800b67c <mqtt_sub_unsub+0x1a8>)
 800b57a:	483c      	ldr	r0, [pc, #240]	; (800b66c <mqtt_sub_unsub+0x198>)
 800b57c:	f00b f960 	bl	8016840 <iprintf>
  if (client->conn_state == TCP_DISCONNECTED) {
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	7a9b      	ldrb	r3, [r3, #10]
 800b584:	2b00      	cmp	r3, #0
 800b586:	d102      	bne.n	800b58e <mqtt_sub_unsub+0xba>
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_sub_unsub: Can not (un)subscribe in disconnected state\n"));
    return ERR_CONN;
 800b588:	f06f 030a 	mvn.w	r3, #10
 800b58c:	e065      	b.n	800b65a <mqtt_sub_unsub+0x186>
  }

  pkt_id = msg_generate_packet_id(client);
 800b58e:	68f8      	ldr	r0, [r7, #12]
 800b590:	f7fe fef8 	bl	800a384 <msg_generate_packet_id>
 800b594:	4603      	mov	r3, r0
 800b596:	833b      	strh	r3, [r7, #24]
  r = mqtt_create_request(client->req_list, LWIP_ARRAYSIZE(client->req_list), pkt_id, cb, arg);
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	f103 001c 	add.w	r0, r3, #28
 800b59e:	8b3a      	ldrh	r2, [r7, #24]
 800b5a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5a2:	9300      	str	r3, [sp, #0]
 800b5a4:	683b      	ldr	r3, [r7, #0]
 800b5a6:	2104      	movs	r1, #4
 800b5a8:	f7ff f834 	bl	800a614 <mqtt_create_request>
 800b5ac:	6178      	str	r0, [r7, #20]
  if (r == NULL) {
 800b5ae:	697b      	ldr	r3, [r7, #20]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d102      	bne.n	800b5ba <mqtt_sub_unsub+0xe6>
    return ERR_MEM;
 800b5b4:	f04f 33ff 	mov.w	r3, #4294967295
 800b5b8:	e04f      	b.n	800b65a <mqtt_sub_unsub+0x186>
  }

  if (mqtt_output_check_space(&client->output, remaining_length) == 0) {
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	33ec      	adds	r3, #236	; 0xec
 800b5be:	8b7a      	ldrh	r2, [r7, #26]
 800b5c0:	4611      	mov	r1, r2
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	f7ff fa62 	bl	800aa8c <mqtt_output_check_space>
 800b5c8:	4603      	mov	r3, r0
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d105      	bne.n	800b5da <mqtt_sub_unsub+0x106>
    mqtt_delete_request(r);
 800b5ce:	6978      	ldr	r0, [r7, #20]
 800b5d0:	f7ff f8b2 	bl	800a738 <mqtt_delete_request>
    return ERR_MEM;
 800b5d4:	f04f 33ff 	mov.w	r3, #4294967295
 800b5d8:	e03f      	b.n	800b65a <mqtt_sub_unsub+0x186>
  }

  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_sub_unsub: Client (un)subscribe to topic \"%s\", id: %d\n", topic, pkt_id));

  mqtt_output_append_fixed_header(&client->output, sub ? MQTT_MSG_TYPE_SUBSCRIBE : MQTT_MSG_TYPE_UNSUBSCRIBE, 0, 1, 0, remaining_length);
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 800b5e0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d001      	beq.n	800b5ec <mqtt_sub_unsub+0x118>
 800b5e8:	2108      	movs	r1, #8
 800b5ea:	e000      	b.n	800b5ee <mqtt_sub_unsub+0x11a>
 800b5ec:	210a      	movs	r1, #10
 800b5ee:	8b7b      	ldrh	r3, [r7, #26]
 800b5f0:	9301      	str	r3, [sp, #4]
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	9300      	str	r3, [sp, #0]
 800b5f6:	2301      	movs	r3, #1
 800b5f8:	2200      	movs	r2, #0
 800b5fa:	f7ff f9fc 	bl	800a9f6 <mqtt_output_append_fixed_header>
  /* Packet id */
  mqtt_output_append_u16(&client->output, pkt_id);
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	33ec      	adds	r3, #236	; 0xec
 800b602:	8b3a      	ldrh	r2, [r7, #24]
 800b604:	4611      	mov	r1, r2
 800b606:	4618      	mov	r0, r3
 800b608:	f7ff f9b1 	bl	800a96e <mqtt_output_append_u16>
  /* Topic */
  mqtt_output_append_string(&client->output, topic, topic_len);
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	33ec      	adds	r3, #236	; 0xec
 800b610:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800b612:	68b9      	ldr	r1, [r7, #8]
 800b614:	4618      	mov	r0, r3
 800b616:	f7ff f9c2 	bl	800a99e <mqtt_output_append_string>
  /* QoS */
  if (sub != 0) {
 800b61a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d00b      	beq.n	800b63a <mqtt_sub_unsub+0x166>
    mqtt_output_append_u8(&client->output, LWIP_MIN(qos, 2));
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 800b628:	79fb      	ldrb	r3, [r7, #7]
 800b62a:	2b02      	cmp	r3, #2
 800b62c:	bf28      	it	cs
 800b62e:	2302      	movcs	r3, #2
 800b630:	b2db      	uxtb	r3, r3
 800b632:	4619      	mov	r1, r3
 800b634:	4610      	mov	r0, r2
 800b636:	f7ff f98b 	bl	800a950 <mqtt_output_append_u8>
  }

  mqtt_append_request(&client->pend_req_queue, r);
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	3318      	adds	r3, #24
 800b63e:	6979      	ldr	r1, [r7, #20]
 800b640:	4618      	mov	r0, r3
 800b642:	f7ff f82d 	bl	800a6a0 <mqtt_append_request>
  mqtt_output_send(&client->output, client->conn);
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	68db      	ldr	r3, [r3, #12]
 800b650:	4619      	mov	r1, r3
 800b652:	4610      	mov	r0, r2
 800b654:	f7fe ff2a 	bl	800a4ac <mqtt_output_send>
  return ERR_OK;
 800b658:	2300      	movs	r3, #0
}
 800b65a:	4618      	mov	r0, r3
 800b65c:	3728      	adds	r7, #40	; 0x28
 800b65e:	46bd      	mov	sp, r7
 800b660:	bd80      	pop	{r7, pc}
 800b662:	bf00      	nop
 800b664:	08017f84 	.word	0x08017f84
 800b668:	08018334 	.word	0x08018334
 800b66c:	08017ffc 	.word	0x08017ffc
 800b670:	08018354 	.word	0x08018354
 800b674:	08018374 	.word	0x08018374
 800b678:	0801839c 	.word	0x0801839c
 800b67c:	080183c4 	.word	0x080183c4

0800b680 <mqtt_client_new>:
 * Create a new MQTT client instance
 * @return Pointer to instance on success, NULL otherwise
 */
mqtt_client_t *
mqtt_client_new(void)
{
 800b680:	b580      	push	{r7, lr}
 800b682:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();
  return (mqtt_client_t *)mem_calloc(1, sizeof(mqtt_client_t));
 800b684:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 800b688:	2001      	movs	r0, #1
 800b68a:	f000 fe61 	bl	800c350 <mem_calloc>
 800b68e:	4603      	mov	r3, r0
}
 800b690:	4618      	mov	r0, r3
 800b692:	bd80      	pop	{r7, pc}

0800b694 <mqtt_client_connect>:
 * @return ERR_OK if successful, @see err_t enum for other results
 */
err_t
mqtt_client_connect(mqtt_client_t *client, const ip_addr_t *ip_addr, u16_t port, mqtt_connection_cb_t cb, void *arg,
                    const struct mqtt_connect_client_info_t *client_info)
{
 800b694:	b580      	push	{r7, lr}
 800b696:	b08c      	sub	sp, #48	; 0x30
 800b698:	af02      	add	r7, sp, #8
 800b69a:	60f8      	str	r0, [r7, #12]
 800b69c:	60b9      	str	r1, [r7, #8]
 800b69e:	603b      	str	r3, [r7, #0]
 800b6a0:	4613      	mov	r3, r2
 800b6a2:	80fb      	strh	r3, [r7, #6]
  err_t err;
  size_t len;
  u16_t client_id_length;
  /* Length is the sum of 2+"MQTT", protocol level, flags and keep alive */
  u16_t remaining_length = 2 + 4 + 1 + 1 + 2;
 800b6a4:	230a      	movs	r3, #10
 800b6a6:	84bb      	strh	r3, [r7, #36]	; 0x24
  u8_t flags = 0, will_topic_len = 0, will_msg_len = 0;
 800b6a8:	2300      	movs	r3, #0
 800b6aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b6ae:	2300      	movs	r3, #0
 800b6b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800b6b4:	2300      	movs	r3, #0
 800b6b6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  u16_t client_user_len = 0, client_pass_len = 0;
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	83fb      	strh	r3, [r7, #30]
 800b6be:	2300      	movs	r3, #0
 800b6c0:	83bb      	strh	r3, [r7, #28]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("mqtt_client_connect: client != NULL", client != NULL);
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d106      	bne.n	800b6d6 <mqtt_client_connect+0x42>
 800b6c8:	4b9e      	ldr	r3, [pc, #632]	; (800b944 <mqtt_client_connect+0x2b0>)
 800b6ca:	f240 520f 	movw	r2, #1295	; 0x50f
 800b6ce:	499e      	ldr	r1, [pc, #632]	; (800b948 <mqtt_client_connect+0x2b4>)
 800b6d0:	489e      	ldr	r0, [pc, #632]	; (800b94c <mqtt_client_connect+0x2b8>)
 800b6d2:	f00b f8b5 	bl	8016840 <iprintf>
  LWIP_ASSERT("mqtt_client_connect: ip_addr != NULL", ip_addr != NULL);
 800b6d6:	68bb      	ldr	r3, [r7, #8]
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d106      	bne.n	800b6ea <mqtt_client_connect+0x56>
 800b6dc:	4b99      	ldr	r3, [pc, #612]	; (800b944 <mqtt_client_connect+0x2b0>)
 800b6de:	f44f 62a2 	mov.w	r2, #1296	; 0x510
 800b6e2:	499b      	ldr	r1, [pc, #620]	; (800b950 <mqtt_client_connect+0x2bc>)
 800b6e4:	4899      	ldr	r0, [pc, #612]	; (800b94c <mqtt_client_connect+0x2b8>)
 800b6e6:	f00b f8ab 	bl	8016840 <iprintf>
  LWIP_ASSERT("mqtt_client_connect: client_info != NULL", client_info != NULL);
 800b6ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d106      	bne.n	800b6fe <mqtt_client_connect+0x6a>
 800b6f0:	4b94      	ldr	r3, [pc, #592]	; (800b944 <mqtt_client_connect+0x2b0>)
 800b6f2:	f240 5211 	movw	r2, #1297	; 0x511
 800b6f6:	4997      	ldr	r1, [pc, #604]	; (800b954 <mqtt_client_connect+0x2c0>)
 800b6f8:	4894      	ldr	r0, [pc, #592]	; (800b94c <mqtt_client_connect+0x2b8>)
 800b6fa:	f00b f8a1 	bl	8016840 <iprintf>
  LWIP_ASSERT("mqtt_client_connect: client_info->client_id != NULL", client_info->client_id != NULL);
 800b6fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	2b00      	cmp	r3, #0
 800b704:	d106      	bne.n	800b714 <mqtt_client_connect+0x80>
 800b706:	4b8f      	ldr	r3, [pc, #572]	; (800b944 <mqtt_client_connect+0x2b0>)
 800b708:	f240 5212 	movw	r2, #1298	; 0x512
 800b70c:	4992      	ldr	r1, [pc, #584]	; (800b958 <mqtt_client_connect+0x2c4>)
 800b70e:	488f      	ldr	r0, [pc, #572]	; (800b94c <mqtt_client_connect+0x2b8>)
 800b710:	f00b f896 	bl	8016840 <iprintf>

  if (client->conn_state != TCP_DISCONNECTED) {
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	7a9b      	ldrb	r3, [r3, #10]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d002      	beq.n	800b722 <mqtt_client_connect+0x8e>
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_client_connect: Already connected\n"));
    return ERR_ISCONN;
 800b71c:	f06f 0309 	mvn.w	r3, #9
 800b720:	e21f      	b.n	800bb62 <mqtt_client_connect+0x4ce>
  }

  /* Wipe clean */
  memset(client, 0, sizeof(mqtt_client_t));
 800b722:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
 800b726:	2100      	movs	r1, #0
 800b728:	68f8      	ldr	r0, [r7, #12]
 800b72a:	f00b f881 	bl	8016830 <memset>
  client->connect_arg = arg;
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b732:	611a      	str	r2, [r3, #16]
  client->connect_cb = cb;
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	683a      	ldr	r2, [r7, #0]
 800b738:	615a      	str	r2, [r3, #20]
  client->keep_alive = client_info->keep_alive;
 800b73a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b73c:	899a      	ldrh	r2, [r3, #12]
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	805a      	strh	r2, [r3, #2]
  mqtt_init_requests(client->req_list, LWIP_ARRAYSIZE(client->req_list));
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	331c      	adds	r3, #28
 800b746:	2104      	movs	r1, #4
 800b748:	4618      	mov	r0, r3
 800b74a:	f7ff f8d3 	bl	800a8f4 <mqtt_init_requests>

  /* Build connect message */
  if (client_info->will_topic != NULL && client_info->will_msg != NULL) {
 800b74e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b750:	691b      	ldr	r3, [r3, #16]
 800b752:	2b00      	cmp	r3, #0
 800b754:	d073      	beq.n	800b83e <mqtt_client_connect+0x1aa>
 800b756:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b758:	695b      	ldr	r3, [r3, #20]
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d06f      	beq.n	800b83e <mqtt_client_connect+0x1aa>
    flags |= MQTT_CONNECT_FLAG_WILL;
 800b75e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b762:	f043 0304 	orr.w	r3, r3, #4
 800b766:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    flags |= (client_info->will_qos & 3) << 3;
 800b76a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b76c:	7e1b      	ldrb	r3, [r3, #24]
 800b76e:	00db      	lsls	r3, r3, #3
 800b770:	b25b      	sxtb	r3, r3
 800b772:	f003 0318 	and.w	r3, r3, #24
 800b776:	b25a      	sxtb	r2, r3
 800b778:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800b77c:	4313      	orrs	r3, r2
 800b77e:	b25b      	sxtb	r3, r3
 800b780:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (client_info->will_retain) {
 800b784:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b786:	7e5b      	ldrb	r3, [r3, #25]
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d005      	beq.n	800b798 <mqtt_client_connect+0x104>
      flags |= MQTT_CONNECT_FLAG_WILL_RETAIN;
 800b78c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b790:	f043 0320 	orr.w	r3, r3, #32
 800b794:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    }
    len = strlen(client_info->will_topic);
 800b798:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b79a:	691b      	ldr	r3, [r3, #16]
 800b79c:	4618      	mov	r0, r3
 800b79e:	f7f4 fd37 	bl	8000210 <strlen>
 800b7a2:	61b8      	str	r0, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: client_info->will_topic length overflow", len <= 0xFF, return ERR_VAL);
 800b7a4:	69bb      	ldr	r3, [r7, #24]
 800b7a6:	2bff      	cmp	r3, #255	; 0xff
 800b7a8:	d909      	bls.n	800b7be <mqtt_client_connect+0x12a>
 800b7aa:	4b66      	ldr	r3, [pc, #408]	; (800b944 <mqtt_client_connect+0x2b0>)
 800b7ac:	f44f 62a5 	mov.w	r2, #1320	; 0x528
 800b7b0:	496a      	ldr	r1, [pc, #424]	; (800b95c <mqtt_client_connect+0x2c8>)
 800b7b2:	4866      	ldr	r0, [pc, #408]	; (800b94c <mqtt_client_connect+0x2b8>)
 800b7b4:	f00b f844 	bl	8016840 <iprintf>
 800b7b8:	f06f 0305 	mvn.w	r3, #5
 800b7bc:	e1d1      	b.n	800bb62 <mqtt_client_connect+0x4ce>
    LWIP_ERROR("mqtt_client_connect: client_info->will_topic length must be > 0", len > 0, return ERR_VAL);
 800b7be:	69bb      	ldr	r3, [r7, #24]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d109      	bne.n	800b7d8 <mqtt_client_connect+0x144>
 800b7c4:	4b5f      	ldr	r3, [pc, #380]	; (800b944 <mqtt_client_connect+0x2b0>)
 800b7c6:	f240 5229 	movw	r2, #1321	; 0x529
 800b7ca:	4965      	ldr	r1, [pc, #404]	; (800b960 <mqtt_client_connect+0x2cc>)
 800b7cc:	485f      	ldr	r0, [pc, #380]	; (800b94c <mqtt_client_connect+0x2b8>)
 800b7ce:	f00b f837 	bl	8016840 <iprintf>
 800b7d2:	f06f 0305 	mvn.w	r3, #5
 800b7d6:	e1c4      	b.n	800bb62 <mqtt_client_connect+0x4ce>
    will_topic_len = (u8_t)len;
 800b7d8:	69bb      	ldr	r3, [r7, #24]
 800b7da:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    len = strlen(client_info->will_msg);
 800b7de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7e0:	695b      	ldr	r3, [r3, #20]
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	f7f4 fd14 	bl	8000210 <strlen>
 800b7e8:	61b8      	str	r0, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: client_info->will_msg length overflow", len <= 0xFF, return ERR_VAL);
 800b7ea:	69bb      	ldr	r3, [r7, #24]
 800b7ec:	2bff      	cmp	r3, #255	; 0xff
 800b7ee:	d909      	bls.n	800b804 <mqtt_client_connect+0x170>
 800b7f0:	4b54      	ldr	r3, [pc, #336]	; (800b944 <mqtt_client_connect+0x2b0>)
 800b7f2:	f240 522c 	movw	r2, #1324	; 0x52c
 800b7f6:	495b      	ldr	r1, [pc, #364]	; (800b964 <mqtt_client_connect+0x2d0>)
 800b7f8:	4854      	ldr	r0, [pc, #336]	; (800b94c <mqtt_client_connect+0x2b8>)
 800b7fa:	f00b f821 	bl	8016840 <iprintf>
 800b7fe:	f06f 0305 	mvn.w	r3, #5
 800b802:	e1ae      	b.n	800bb62 <mqtt_client_connect+0x4ce>
    will_msg_len = (u8_t)len;
 800b804:	69bb      	ldr	r3, [r7, #24]
 800b806:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    len = remaining_length + 2 + will_topic_len + 2 + will_msg_len;
 800b80a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b80c:	1c9a      	adds	r2, r3, #2
 800b80e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b812:	4413      	add	r3, r2
 800b814:	1c9a      	adds	r2, r3, #2
 800b816:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800b81a:	4413      	add	r3, r2
 800b81c:	61bb      	str	r3, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 800b81e:	69bb      	ldr	r3, [r7, #24]
 800b820:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b824:	d309      	bcc.n	800b83a <mqtt_client_connect+0x1a6>
 800b826:	4b47      	ldr	r3, [pc, #284]	; (800b944 <mqtt_client_connect+0x2b0>)
 800b828:	f240 522f 	movw	r2, #1327	; 0x52f
 800b82c:	494e      	ldr	r1, [pc, #312]	; (800b968 <mqtt_client_connect+0x2d4>)
 800b82e:	4847      	ldr	r0, [pc, #284]	; (800b94c <mqtt_client_connect+0x2b8>)
 800b830:	f00b f806 	bl	8016840 <iprintf>
 800b834:	f06f 0305 	mvn.w	r3, #5
 800b838:	e193      	b.n	800bb62 <mqtt_client_connect+0x4ce>
    remaining_length = (u16_t)len;
 800b83a:	69bb      	ldr	r3, [r7, #24]
 800b83c:	84bb      	strh	r3, [r7, #36]	; 0x24
  }
  if (client_info->client_user != NULL) {
 800b83e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b840:	685b      	ldr	r3, [r3, #4]
 800b842:	2b00      	cmp	r3, #0
 800b844:	d03d      	beq.n	800b8c2 <mqtt_client_connect+0x22e>
    flags |= MQTT_CONNECT_FLAG_USERNAME;
 800b846:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b84a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b84e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    len = strlen(client_info->client_user);
 800b852:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b854:	685b      	ldr	r3, [r3, #4]
 800b856:	4618      	mov	r0, r3
 800b858:	f7f4 fcda 	bl	8000210 <strlen>
 800b85c:	61b8      	str	r0, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: client_info->client_user length overflow", len <= 0xFFFF, return ERR_VAL);
 800b85e:	69bb      	ldr	r3, [r7, #24]
 800b860:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b864:	d309      	bcc.n	800b87a <mqtt_client_connect+0x1e6>
 800b866:	4b37      	ldr	r3, [pc, #220]	; (800b944 <mqtt_client_connect+0x2b0>)
 800b868:	f240 5235 	movw	r2, #1333	; 0x535
 800b86c:	493f      	ldr	r1, [pc, #252]	; (800b96c <mqtt_client_connect+0x2d8>)
 800b86e:	4837      	ldr	r0, [pc, #220]	; (800b94c <mqtt_client_connect+0x2b8>)
 800b870:	f00a ffe6 	bl	8016840 <iprintf>
 800b874:	f06f 0305 	mvn.w	r3, #5
 800b878:	e173      	b.n	800bb62 <mqtt_client_connect+0x4ce>
    LWIP_ERROR("mqtt_client_connect: client_info->client_user length must be > 0", len > 0, return ERR_VAL);
 800b87a:	69bb      	ldr	r3, [r7, #24]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d109      	bne.n	800b894 <mqtt_client_connect+0x200>
 800b880:	4b30      	ldr	r3, [pc, #192]	; (800b944 <mqtt_client_connect+0x2b0>)
 800b882:	f240 5236 	movw	r2, #1334	; 0x536
 800b886:	493a      	ldr	r1, [pc, #232]	; (800b970 <mqtt_client_connect+0x2dc>)
 800b888:	4830      	ldr	r0, [pc, #192]	; (800b94c <mqtt_client_connect+0x2b8>)
 800b88a:	f00a ffd9 	bl	8016840 <iprintf>
 800b88e:	f06f 0305 	mvn.w	r3, #5
 800b892:	e166      	b.n	800bb62 <mqtt_client_connect+0x4ce>
    client_user_len = (u16_t)len;
 800b894:	69bb      	ldr	r3, [r7, #24]
 800b896:	83fb      	strh	r3, [r7, #30]
    len = remaining_length + 2 + client_user_len;
 800b898:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b89a:	1c9a      	adds	r2, r3, #2
 800b89c:	8bfb      	ldrh	r3, [r7, #30]
 800b89e:	4413      	add	r3, r2
 800b8a0:	61bb      	str	r3, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 800b8a2:	69bb      	ldr	r3, [r7, #24]
 800b8a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b8a8:	d309      	bcc.n	800b8be <mqtt_client_connect+0x22a>
 800b8aa:	4b26      	ldr	r3, [pc, #152]	; (800b944 <mqtt_client_connect+0x2b0>)
 800b8ac:	f240 5239 	movw	r2, #1337	; 0x539
 800b8b0:	492d      	ldr	r1, [pc, #180]	; (800b968 <mqtt_client_connect+0x2d4>)
 800b8b2:	4826      	ldr	r0, [pc, #152]	; (800b94c <mqtt_client_connect+0x2b8>)
 800b8b4:	f00a ffc4 	bl	8016840 <iprintf>
 800b8b8:	f06f 0305 	mvn.w	r3, #5
 800b8bc:	e151      	b.n	800bb62 <mqtt_client_connect+0x4ce>
    remaining_length = (u16_t)len;
 800b8be:	69bb      	ldr	r3, [r7, #24]
 800b8c0:	84bb      	strh	r3, [r7, #36]	; 0x24
  }
  if (client_info->client_pass != NULL) {
 800b8c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8c4:	689b      	ldr	r3, [r3, #8]
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d05a      	beq.n	800b980 <mqtt_client_connect+0x2ec>
    flags |= MQTT_CONNECT_FLAG_PASSWORD;
 800b8ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b8ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b8d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    len = strlen(client_info->client_pass);
 800b8d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8d8:	689b      	ldr	r3, [r3, #8]
 800b8da:	4618      	mov	r0, r3
 800b8dc:	f7f4 fc98 	bl	8000210 <strlen>
 800b8e0:	61b8      	str	r0, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: client_info->client_pass length overflow", len <= 0xFFFF, return ERR_VAL);
 800b8e2:	69bb      	ldr	r3, [r7, #24]
 800b8e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b8e8:	d309      	bcc.n	800b8fe <mqtt_client_connect+0x26a>
 800b8ea:	4b16      	ldr	r3, [pc, #88]	; (800b944 <mqtt_client_connect+0x2b0>)
 800b8ec:	f240 523f 	movw	r2, #1343	; 0x53f
 800b8f0:	4920      	ldr	r1, [pc, #128]	; (800b974 <mqtt_client_connect+0x2e0>)
 800b8f2:	4816      	ldr	r0, [pc, #88]	; (800b94c <mqtt_client_connect+0x2b8>)
 800b8f4:	f00a ffa4 	bl	8016840 <iprintf>
 800b8f8:	f06f 0305 	mvn.w	r3, #5
 800b8fc:	e131      	b.n	800bb62 <mqtt_client_connect+0x4ce>
    LWIP_ERROR("mqtt_client_connect: client_info->client_pass length must be > 0", len > 0, return ERR_VAL);
 800b8fe:	69bb      	ldr	r3, [r7, #24]
 800b900:	2b00      	cmp	r3, #0
 800b902:	d109      	bne.n	800b918 <mqtt_client_connect+0x284>
 800b904:	4b0f      	ldr	r3, [pc, #60]	; (800b944 <mqtt_client_connect+0x2b0>)
 800b906:	f44f 62a8 	mov.w	r2, #1344	; 0x540
 800b90a:	491b      	ldr	r1, [pc, #108]	; (800b978 <mqtt_client_connect+0x2e4>)
 800b90c:	480f      	ldr	r0, [pc, #60]	; (800b94c <mqtt_client_connect+0x2b8>)
 800b90e:	f00a ff97 	bl	8016840 <iprintf>
 800b912:	f06f 0305 	mvn.w	r3, #5
 800b916:	e124      	b.n	800bb62 <mqtt_client_connect+0x4ce>
    client_pass_len = (u16_t)len;
 800b918:	69bb      	ldr	r3, [r7, #24]
 800b91a:	83bb      	strh	r3, [r7, #28]
    len = remaining_length + 2 + client_pass_len;
 800b91c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b91e:	1c9a      	adds	r2, r3, #2
 800b920:	8bbb      	ldrh	r3, [r7, #28]
 800b922:	4413      	add	r3, r2
 800b924:	61bb      	str	r3, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 800b926:	69bb      	ldr	r3, [r7, #24]
 800b928:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b92c:	d326      	bcc.n	800b97c <mqtt_client_connect+0x2e8>
 800b92e:	4b05      	ldr	r3, [pc, #20]	; (800b944 <mqtt_client_connect+0x2b0>)
 800b930:	f240 5243 	movw	r2, #1347	; 0x543
 800b934:	490c      	ldr	r1, [pc, #48]	; (800b968 <mqtt_client_connect+0x2d4>)
 800b936:	4805      	ldr	r0, [pc, #20]	; (800b94c <mqtt_client_connect+0x2b8>)
 800b938:	f00a ff82 	bl	8016840 <iprintf>
 800b93c:	f06f 0305 	mvn.w	r3, #5
 800b940:	e10f      	b.n	800bb62 <mqtt_client_connect+0x4ce>
 800b942:	bf00      	nop
 800b944:	08017f84 	.word	0x08017f84
 800b948:	08018404 	.word	0x08018404
 800b94c:	08017ffc 	.word	0x08017ffc
 800b950:	08018428 	.word	0x08018428
 800b954:	08018450 	.word	0x08018450
 800b958:	0801847c 	.word	0x0801847c
 800b95c:	080184b0 	.word	0x080184b0
 800b960:	080184f0 	.word	0x080184f0
 800b964:	08018530 	.word	0x08018530
 800b968:	0801856c 	.word	0x0801856c
 800b96c:	0801859c 	.word	0x0801859c
 800b970:	080185dc 	.word	0x080185dc
 800b974:	08018620 	.word	0x08018620
 800b978:	08018660 	.word	0x08018660
    remaining_length = (u16_t)len;
 800b97c:	69bb      	ldr	r3, [r7, #24]
 800b97e:	84bb      	strh	r3, [r7, #36]	; 0x24
  }

  /* Don't complicate things, always connect using clean session */
  flags |= MQTT_CONNECT_FLAG_CLEAN_SESSION;
 800b980:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b984:	f043 0302 	orr.w	r3, r3, #2
 800b988:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  len = strlen(client_info->client_id);
 800b98c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	4618      	mov	r0, r3
 800b992:	f7f4 fc3d 	bl	8000210 <strlen>
 800b996:	61b8      	str	r0, [r7, #24]
  LWIP_ERROR("mqtt_client_connect: client_info->client_id length overflow", len <= 0xFFFF, return ERR_VAL);
 800b998:	69bb      	ldr	r3, [r7, #24]
 800b99a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b99e:	d309      	bcc.n	800b9b4 <mqtt_client_connect+0x320>
 800b9a0:	4b72      	ldr	r3, [pc, #456]	; (800bb6c <mqtt_client_connect+0x4d8>)
 800b9a2:	f240 524b 	movw	r2, #1355	; 0x54b
 800b9a6:	4972      	ldr	r1, [pc, #456]	; (800bb70 <mqtt_client_connect+0x4dc>)
 800b9a8:	4872      	ldr	r0, [pc, #456]	; (800bb74 <mqtt_client_connect+0x4e0>)
 800b9aa:	f00a ff49 	bl	8016840 <iprintf>
 800b9ae:	f06f 0305 	mvn.w	r3, #5
 800b9b2:	e0d6      	b.n	800bb62 <mqtt_client_connect+0x4ce>
  client_id_length = (u16_t)len;
 800b9b4:	69bb      	ldr	r3, [r7, #24]
 800b9b6:	82fb      	strh	r3, [r7, #22]
  len = remaining_length + 2 + client_id_length;
 800b9b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b9ba:	1c9a      	adds	r2, r3, #2
 800b9bc:	8afb      	ldrh	r3, [r7, #22]
 800b9be:	4413      	add	r3, r2
 800b9c0:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 800b9c2:	69bb      	ldr	r3, [r7, #24]
 800b9c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b9c8:	d309      	bcc.n	800b9de <mqtt_client_connect+0x34a>
 800b9ca:	4b68      	ldr	r3, [pc, #416]	; (800bb6c <mqtt_client_connect+0x4d8>)
 800b9cc:	f240 524e 	movw	r2, #1358	; 0x54e
 800b9d0:	4969      	ldr	r1, [pc, #420]	; (800bb78 <mqtt_client_connect+0x4e4>)
 800b9d2:	4868      	ldr	r0, [pc, #416]	; (800bb74 <mqtt_client_connect+0x4e0>)
 800b9d4:	f00a ff34 	bl	8016840 <iprintf>
 800b9d8:	f06f 0305 	mvn.w	r3, #5
 800b9dc:	e0c1      	b.n	800bb62 <mqtt_client_connect+0x4ce>
  remaining_length = (u16_t)len;
 800b9de:	69bb      	ldr	r3, [r7, #24]
 800b9e0:	84bb      	strh	r3, [r7, #36]	; 0x24

  if (mqtt_output_check_space(&client->output, remaining_length) == 0) {
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	33ec      	adds	r3, #236	; 0xec
 800b9e6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b9e8:	4611      	mov	r1, r2
 800b9ea:	4618      	mov	r0, r3
 800b9ec:	f7ff f84e 	bl	800aa8c <mqtt_output_check_space>
 800b9f0:	4603      	mov	r3, r0
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d102      	bne.n	800b9fc <mqtt_client_connect+0x368>
    return ERR_MEM;
 800b9f6:	f04f 33ff 	mov.w	r3, #4294967295
 800b9fa:	e0b2      	b.n	800bb62 <mqtt_client_connect+0x4ce>
  if (client_info->tls_config) {
    client->conn = altcp_tls_new(client_info->tls_config, IP_GET_TYPE(ip_addr));
  } else
#endif
  {
    client->conn = altcp_tcp_new_ip_type(IP_GET_TYPE(ip_addr));
 800b9fc:	2000      	movs	r0, #0
 800b9fe:	f003 fc07 	bl	800f210 <tcp_new_ip_type>
 800ba02:	4602      	mov	r2, r0
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	60da      	str	r2, [r3, #12]
  }
  if (client->conn == NULL) {
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	68db      	ldr	r3, [r3, #12]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d102      	bne.n	800ba16 <mqtt_client_connect+0x382>
    return ERR_MEM;
 800ba10:	f04f 33ff 	mov.w	r3, #4294967295
 800ba14:	e0a5      	b.n	800bb62 <mqtt_client_connect+0x4ce>
  }

  /* Set arg pointer for callbacks */
  altcp_arg(client->conn, client);
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	68db      	ldr	r3, [r3, #12]
 800ba1a:	68f9      	ldr	r1, [r7, #12]
 800ba1c:	4618      	mov	r0, r3
 800ba1e:	f003 fc05 	bl	800f22c <tcp_arg>
  /* Any local address, pick random local port number */
  err = altcp_bind(client->conn, IP_ADDR_ANY, 0);
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	68db      	ldr	r3, [r3, #12]
 800ba26:	2200      	movs	r2, #0
 800ba28:	4954      	ldr	r1, [pc, #336]	; (800bb7c <mqtt_client_connect+0x4e8>)
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	f002 fa2c 	bl	800de88 <tcp_bind>
 800ba30:	4603      	mov	r3, r0
 800ba32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (err != ERR_OK) {
 800ba36:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	f040 8084 	bne.w	800bb48 <mqtt_client_connect+0x4b4>
    goto tcp_fail;
  }
  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_client_connect: Connecting to host: %s at port:%"U16_F"\n", ipaddr_ntoa(ip_addr), port));

  /* Connect to server */
  err = altcp_connect(client->conn, ip_addr, port, mqtt_tcp_connect_cb);
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	68d8      	ldr	r0, [r3, #12]
 800ba44:	88fa      	ldrh	r2, [r7, #6]
 800ba46:	4b4e      	ldr	r3, [pc, #312]	; (800bb80 <mqtt_client_connect+0x4ec>)
 800ba48:	68b9      	ldr	r1, [r7, #8]
 800ba4a:	f002 fc81 	bl	800e350 <tcp_connect>
 800ba4e:	4603      	mov	r3, r0
 800ba50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (err != ERR_OK) {
 800ba54:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d177      	bne.n	800bb4c <mqtt_client_connect+0x4b8>
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_client_connect: Error connecting to remote ip/port, %d\n", err));
    goto tcp_fail;
  }
  /* Set error callback */
  altcp_err(client->conn, mqtt_tcp_err_cb);
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	68db      	ldr	r3, [r3, #12]
 800ba60:	4948      	ldr	r1, [pc, #288]	; (800bb84 <mqtt_client_connect+0x4f0>)
 800ba62:	4618      	mov	r0, r3
 800ba64:	f003 fc38 	bl	800f2d8 <tcp_err>
  client->conn_state = TCP_CONNECTING;
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	2201      	movs	r2, #1
 800ba6c:	729a      	strb	r2, [r3, #10]

  /* Append fixed header */
  mqtt_output_append_fixed_header(&client->output, MQTT_MSG_TYPE_CONNECT, 0, 0, 0, remaining_length);
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 800ba74:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ba76:	9301      	str	r3, [sp, #4]
 800ba78:	2300      	movs	r3, #0
 800ba7a:	9300      	str	r3, [sp, #0]
 800ba7c:	2300      	movs	r3, #0
 800ba7e:	2200      	movs	r2, #0
 800ba80:	2101      	movs	r1, #1
 800ba82:	f7fe ffb8 	bl	800a9f6 <mqtt_output_append_fixed_header>
  /* Append Protocol string */
  mqtt_output_append_string(&client->output, "MQTT", 4);
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	33ec      	adds	r3, #236	; 0xec
 800ba8a:	2204      	movs	r2, #4
 800ba8c:	493e      	ldr	r1, [pc, #248]	; (800bb88 <mqtt_client_connect+0x4f4>)
 800ba8e:	4618      	mov	r0, r3
 800ba90:	f7fe ff85 	bl	800a99e <mqtt_output_append_string>
  /* Append Protocol level */
  mqtt_output_append_u8(&client->output, 4);
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	33ec      	adds	r3, #236	; 0xec
 800ba98:	2104      	movs	r1, #4
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	f7fe ff58 	bl	800a950 <mqtt_output_append_u8>
  /* Append connect flags */
  mqtt_output_append_u8(&client->output, flags);
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	33ec      	adds	r3, #236	; 0xec
 800baa4:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800baa8:	4611      	mov	r1, r2
 800baaa:	4618      	mov	r0, r3
 800baac:	f7fe ff50 	bl	800a950 <mqtt_output_append_u8>
  /* Append keep-alive */
  mqtt_output_append_u16(&client->output, client_info->keep_alive);
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 800bab6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bab8:	899b      	ldrh	r3, [r3, #12]
 800baba:	4619      	mov	r1, r3
 800babc:	4610      	mov	r0, r2
 800babe:	f7fe ff56 	bl	800a96e <mqtt_output_append_u16>
  /* Append client id */
  mqtt_output_append_string(&client->output, client_info->client_id, client_id_length);
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 800bac8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	8afa      	ldrh	r2, [r7, #22]
 800bace:	4619      	mov	r1, r3
 800bad0:	f7fe ff65 	bl	800a99e <mqtt_output_append_string>
  /* Append will message if used */
  if ((flags & MQTT_CONNECT_FLAG_WILL) != 0) {
 800bad4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bad8:	f003 0304 	and.w	r3, r3, #4
 800badc:	2b00      	cmp	r3, #0
 800bade:	d015      	beq.n	800bb0c <mqtt_client_connect+0x478>
    mqtt_output_append_string(&client->output, client_info->will_topic, will_topic_len);
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 800bae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bae8:	691b      	ldr	r3, [r3, #16]
 800baea:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800baee:	b292      	uxth	r2, r2
 800baf0:	4619      	mov	r1, r3
 800baf2:	f7fe ff54 	bl	800a99e <mqtt_output_append_string>
    mqtt_output_append_string(&client->output, client_info->will_msg, will_msg_len);
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 800bafc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bafe:	695b      	ldr	r3, [r3, #20]
 800bb00:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800bb04:	b292      	uxth	r2, r2
 800bb06:	4619      	mov	r1, r3
 800bb08:	f7fe ff49 	bl	800a99e <mqtt_output_append_string>
  }
  /* Append user name if given */
  if ((flags & MQTT_CONNECT_FLAG_USERNAME) != 0) {
 800bb0c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	da08      	bge.n	800bb26 <mqtt_client_connect+0x492>
    mqtt_output_append_string(&client->output, client_info->client_user, client_user_len);
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 800bb1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb1c:	685b      	ldr	r3, [r3, #4]
 800bb1e:	8bfa      	ldrh	r2, [r7, #30]
 800bb20:	4619      	mov	r1, r3
 800bb22:	f7fe ff3c 	bl	800a99e <mqtt_output_append_string>
  }
  /* Append password if given */
  if ((flags & MQTT_CONNECT_FLAG_PASSWORD) != 0) {
 800bb26:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bb2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d008      	beq.n	800bb44 <mqtt_client_connect+0x4b0>
    mqtt_output_append_string(&client->output, client_info->client_pass, client_pass_len);
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 800bb38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb3a:	689b      	ldr	r3, [r3, #8]
 800bb3c:	8bba      	ldrh	r2, [r7, #28]
 800bb3e:	4619      	mov	r1, r3
 800bb40:	f7fe ff2d 	bl	800a99e <mqtt_output_append_string>
  }
  return ERR_OK;
 800bb44:	2300      	movs	r3, #0
 800bb46:	e00c      	b.n	800bb62 <mqtt_client_connect+0x4ce>
    goto tcp_fail;
 800bb48:	bf00      	nop
 800bb4a:	e000      	b.n	800bb4e <mqtt_client_connect+0x4ba>
    goto tcp_fail;
 800bb4c:	bf00      	nop

tcp_fail:
  altcp_abort(client->conn);
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	68db      	ldr	r3, [r3, #12]
 800bb52:	4618      	mov	r0, r3
 800bb54:	f002 f98c 	bl	800de70 <tcp_abort>
  client->conn = NULL;
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	2200      	movs	r2, #0
 800bb5c:	60da      	str	r2, [r3, #12]
  return err;
 800bb5e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800bb62:	4618      	mov	r0, r3
 800bb64:	3728      	adds	r7, #40	; 0x28
 800bb66:	46bd      	mov	sp, r7
 800bb68:	bd80      	pop	{r7, pc}
 800bb6a:	bf00      	nop
 800bb6c:	08017f84 	.word	0x08017f84
 800bb70:	080186a4 	.word	0x080186a4
 800bb74:	08017ffc 	.word	0x08017ffc
 800bb78:	0801856c 	.word	0x0801856c
 800bb7c:	0801d0e8 	.word	0x0801d0e8
 800bb80:	0800b451 	.word	0x0800b451
 800bb84:	0800b3dd 	.word	0x0800b3dd
 800bb88:	080186e0 	.word	0x080186e0

0800bb8c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800bb8c:	b480      	push	{r7}
 800bb8e:	b083      	sub	sp, #12
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	4603      	mov	r3, r0
 800bb94:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800bb96:	88fb      	ldrh	r3, [r7, #6]
 800bb98:	021b      	lsls	r3, r3, #8
 800bb9a:	b21a      	sxth	r2, r3
 800bb9c:	88fb      	ldrh	r3, [r7, #6]
 800bb9e:	0a1b      	lsrs	r3, r3, #8
 800bba0:	b29b      	uxth	r3, r3
 800bba2:	b21b      	sxth	r3, r3
 800bba4:	4313      	orrs	r3, r2
 800bba6:	b21b      	sxth	r3, r3
 800bba8:	b29b      	uxth	r3, r3
}
 800bbaa:	4618      	mov	r0, r3
 800bbac:	370c      	adds	r7, #12
 800bbae:	46bd      	mov	sp, r7
 800bbb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb4:	4770      	bx	lr

0800bbb6 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800bbb6:	b480      	push	{r7}
 800bbb8:	b083      	sub	sp, #12
 800bbba:	af00      	add	r7, sp, #0
 800bbbc:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	061a      	lsls	r2, r3, #24
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	021b      	lsls	r3, r3, #8
 800bbc6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800bbca:	431a      	orrs	r2, r3
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	0a1b      	lsrs	r3, r3, #8
 800bbd0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800bbd4:	431a      	orrs	r2, r3
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	0e1b      	lsrs	r3, r3, #24
 800bbda:	4313      	orrs	r3, r2
}
 800bbdc:	4618      	mov	r0, r3
 800bbde:	370c      	adds	r7, #12
 800bbe0:	46bd      	mov	sp, r7
 800bbe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe6:	4770      	bx	lr

0800bbe8 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800bbe8:	b580      	push	{r7, lr}
 800bbea:	b082      	sub	sp, #8
 800bbec:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800bbee:	2300      	movs	r3, #0
 800bbf0:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800bbf2:	f000 f8d5 	bl	800bda0 <mem_init>
  memp_init();
 800bbf6:	f000 fc03 	bl	800c400 <memp_init>
  pbuf_init();
  netif_init();
 800bbfa:	f000 fd01 	bl	800c600 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800bbfe:	f008 f93b 	bl	8013e78 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800bc02:	f001 fe3b 	bl	800d87c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800bc06:	f008 f873 	bl	8013cf0 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800bc0a:	bf00      	nop
 800bc0c:	3708      	adds	r7, #8
 800bc0e:	46bd      	mov	sp, r7
 800bc10:	bd80      	pop	{r7, pc}
	...

0800bc14 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800bc14:	b480      	push	{r7}
 800bc16:	b083      	sub	sp, #12
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	4603      	mov	r3, r0
 800bc1c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800bc1e:	4b05      	ldr	r3, [pc, #20]	; (800bc34 <ptr_to_mem+0x20>)
 800bc20:	681a      	ldr	r2, [r3, #0]
 800bc22:	88fb      	ldrh	r3, [r7, #6]
 800bc24:	4413      	add	r3, r2
}
 800bc26:	4618      	mov	r0, r3
 800bc28:	370c      	adds	r7, #12
 800bc2a:	46bd      	mov	sp, r7
 800bc2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc30:	4770      	bx	lr
 800bc32:	bf00      	nop
 800bc34:	20005ca4 	.word	0x20005ca4

0800bc38 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800bc38:	b480      	push	{r7}
 800bc3a:	b083      	sub	sp, #12
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800bc40:	4b05      	ldr	r3, [pc, #20]	; (800bc58 <mem_to_ptr+0x20>)
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	687a      	ldr	r2, [r7, #4]
 800bc46:	1ad3      	subs	r3, r2, r3
 800bc48:	b29b      	uxth	r3, r3
}
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	370c      	adds	r7, #12
 800bc4e:	46bd      	mov	sp, r7
 800bc50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc54:	4770      	bx	lr
 800bc56:	bf00      	nop
 800bc58:	20005ca4 	.word	0x20005ca4

0800bc5c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800bc5c:	b590      	push	{r4, r7, lr}
 800bc5e:	b085      	sub	sp, #20
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800bc64:	4b45      	ldr	r3, [pc, #276]	; (800bd7c <plug_holes+0x120>)
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	687a      	ldr	r2, [r7, #4]
 800bc6a:	429a      	cmp	r2, r3
 800bc6c:	d206      	bcs.n	800bc7c <plug_holes+0x20>
 800bc6e:	4b44      	ldr	r3, [pc, #272]	; (800bd80 <plug_holes+0x124>)
 800bc70:	f240 12df 	movw	r2, #479	; 0x1df
 800bc74:	4943      	ldr	r1, [pc, #268]	; (800bd84 <plug_holes+0x128>)
 800bc76:	4844      	ldr	r0, [pc, #272]	; (800bd88 <plug_holes+0x12c>)
 800bc78:	f00a fde2 	bl	8016840 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800bc7c:	4b43      	ldr	r3, [pc, #268]	; (800bd8c <plug_holes+0x130>)
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	687a      	ldr	r2, [r7, #4]
 800bc82:	429a      	cmp	r2, r3
 800bc84:	d306      	bcc.n	800bc94 <plug_holes+0x38>
 800bc86:	4b3e      	ldr	r3, [pc, #248]	; (800bd80 <plug_holes+0x124>)
 800bc88:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800bc8c:	4940      	ldr	r1, [pc, #256]	; (800bd90 <plug_holes+0x134>)
 800bc8e:	483e      	ldr	r0, [pc, #248]	; (800bd88 <plug_holes+0x12c>)
 800bc90:	f00a fdd6 	bl	8016840 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	791b      	ldrb	r3, [r3, #4]
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d006      	beq.n	800bcaa <plug_holes+0x4e>
 800bc9c:	4b38      	ldr	r3, [pc, #224]	; (800bd80 <plug_holes+0x124>)
 800bc9e:	f240 12e1 	movw	r2, #481	; 0x1e1
 800bca2:	493c      	ldr	r1, [pc, #240]	; (800bd94 <plug_holes+0x138>)
 800bca4:	4838      	ldr	r0, [pc, #224]	; (800bd88 <plug_holes+0x12c>)
 800bca6:	f00a fdcb 	bl	8016840 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	881b      	ldrh	r3, [r3, #0]
 800bcae:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bcb2:	d906      	bls.n	800bcc2 <plug_holes+0x66>
 800bcb4:	4b32      	ldr	r3, [pc, #200]	; (800bd80 <plug_holes+0x124>)
 800bcb6:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800bcba:	4937      	ldr	r1, [pc, #220]	; (800bd98 <plug_holes+0x13c>)
 800bcbc:	4832      	ldr	r0, [pc, #200]	; (800bd88 <plug_holes+0x12c>)
 800bcbe:	f00a fdbf 	bl	8016840 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	881b      	ldrh	r3, [r3, #0]
 800bcc6:	4618      	mov	r0, r3
 800bcc8:	f7ff ffa4 	bl	800bc14 <ptr_to_mem>
 800bccc:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800bcce:	687a      	ldr	r2, [r7, #4]
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	429a      	cmp	r2, r3
 800bcd4:	d024      	beq.n	800bd20 <plug_holes+0xc4>
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	791b      	ldrb	r3, [r3, #4]
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d120      	bne.n	800bd20 <plug_holes+0xc4>
 800bcde:	4b2b      	ldr	r3, [pc, #172]	; (800bd8c <plug_holes+0x130>)
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	68fa      	ldr	r2, [r7, #12]
 800bce4:	429a      	cmp	r2, r3
 800bce6:	d01b      	beq.n	800bd20 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800bce8:	4b2c      	ldr	r3, [pc, #176]	; (800bd9c <plug_holes+0x140>)
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	68fa      	ldr	r2, [r7, #12]
 800bcee:	429a      	cmp	r2, r3
 800bcf0:	d102      	bne.n	800bcf8 <plug_holes+0x9c>
      lfree = mem;
 800bcf2:	4a2a      	ldr	r2, [pc, #168]	; (800bd9c <plug_holes+0x140>)
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	881a      	ldrh	r2, [r3, #0]
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	881b      	ldrh	r3, [r3, #0]
 800bd04:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bd08:	d00a      	beq.n	800bd20 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	881b      	ldrh	r3, [r3, #0]
 800bd0e:	4618      	mov	r0, r3
 800bd10:	f7ff ff80 	bl	800bc14 <ptr_to_mem>
 800bd14:	4604      	mov	r4, r0
 800bd16:	6878      	ldr	r0, [r7, #4]
 800bd18:	f7ff ff8e 	bl	800bc38 <mem_to_ptr>
 800bd1c:	4603      	mov	r3, r0
 800bd1e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	885b      	ldrh	r3, [r3, #2]
 800bd24:	4618      	mov	r0, r3
 800bd26:	f7ff ff75 	bl	800bc14 <ptr_to_mem>
 800bd2a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800bd2c:	68ba      	ldr	r2, [r7, #8]
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	429a      	cmp	r2, r3
 800bd32:	d01f      	beq.n	800bd74 <plug_holes+0x118>
 800bd34:	68bb      	ldr	r3, [r7, #8]
 800bd36:	791b      	ldrb	r3, [r3, #4]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d11b      	bne.n	800bd74 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800bd3c:	4b17      	ldr	r3, [pc, #92]	; (800bd9c <plug_holes+0x140>)
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	687a      	ldr	r2, [r7, #4]
 800bd42:	429a      	cmp	r2, r3
 800bd44:	d102      	bne.n	800bd4c <plug_holes+0xf0>
      lfree = pmem;
 800bd46:	4a15      	ldr	r2, [pc, #84]	; (800bd9c <plug_holes+0x140>)
 800bd48:	68bb      	ldr	r3, [r7, #8]
 800bd4a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	881a      	ldrh	r2, [r3, #0]
 800bd50:	68bb      	ldr	r3, [r7, #8]
 800bd52:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	881b      	ldrh	r3, [r3, #0]
 800bd58:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bd5c:	d00a      	beq.n	800bd74 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	881b      	ldrh	r3, [r3, #0]
 800bd62:	4618      	mov	r0, r3
 800bd64:	f7ff ff56 	bl	800bc14 <ptr_to_mem>
 800bd68:	4604      	mov	r4, r0
 800bd6a:	68b8      	ldr	r0, [r7, #8]
 800bd6c:	f7ff ff64 	bl	800bc38 <mem_to_ptr>
 800bd70:	4603      	mov	r3, r0
 800bd72:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800bd74:	bf00      	nop
 800bd76:	3714      	adds	r7, #20
 800bd78:	46bd      	mov	sp, r7
 800bd7a:	bd90      	pop	{r4, r7, pc}
 800bd7c:	20005ca4 	.word	0x20005ca4
 800bd80:	08018734 	.word	0x08018734
 800bd84:	08018764 	.word	0x08018764
 800bd88:	0801877c 	.word	0x0801877c
 800bd8c:	20005ca8 	.word	0x20005ca8
 800bd90:	080187a4 	.word	0x080187a4
 800bd94:	080187c0 	.word	0x080187c0
 800bd98:	080187dc 	.word	0x080187dc
 800bd9c:	20005cac 	.word	0x20005cac

0800bda0 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800bda0:	b580      	push	{r7, lr}
 800bda2:	b082      	sub	sp, #8
 800bda4:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800bda6:	4b18      	ldr	r3, [pc, #96]	; (800be08 <mem_init+0x68>)
 800bda8:	3303      	adds	r3, #3
 800bdaa:	f023 0303 	bic.w	r3, r3, #3
 800bdae:	461a      	mov	r2, r3
 800bdb0:	4b16      	ldr	r3, [pc, #88]	; (800be0c <mem_init+0x6c>)
 800bdb2:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800bdb4:	4b15      	ldr	r3, [pc, #84]	; (800be0c <mem_init+0x6c>)
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800bdc0:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	2200      	movs	r2, #0
 800bdc6:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	2200      	movs	r2, #0
 800bdcc:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800bdce:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800bdd2:	f7ff ff1f 	bl	800bc14 <ptr_to_mem>
 800bdd6:	4603      	mov	r3, r0
 800bdd8:	4a0d      	ldr	r2, [pc, #52]	; (800be10 <mem_init+0x70>)
 800bdda:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800bddc:	4b0c      	ldr	r3, [pc, #48]	; (800be10 <mem_init+0x70>)
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	2201      	movs	r2, #1
 800bde2:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800bde4:	4b0a      	ldr	r3, [pc, #40]	; (800be10 <mem_init+0x70>)
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800bdec:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800bdee:	4b08      	ldr	r3, [pc, #32]	; (800be10 <mem_init+0x70>)
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800bdf6:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800bdf8:	4b04      	ldr	r3, [pc, #16]	; (800be0c <mem_init+0x6c>)
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	4a05      	ldr	r2, [pc, #20]	; (800be14 <mem_init+0x74>)
 800bdfe:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800be00:	bf00      	nop
 800be02:	3708      	adds	r7, #8
 800be04:	46bd      	mov	sp, r7
 800be06:	bd80      	pop	{r7, pc}
 800be08:	20005650 	.word	0x20005650
 800be0c:	20005ca4 	.word	0x20005ca4
 800be10:	20005ca8 	.word	0x20005ca8
 800be14:	20005cac 	.word	0x20005cac

0800be18 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800be18:	b580      	push	{r7, lr}
 800be1a:	b086      	sub	sp, #24
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800be20:	6878      	ldr	r0, [r7, #4]
 800be22:	f7ff ff09 	bl	800bc38 <mem_to_ptr>
 800be26:	4603      	mov	r3, r0
 800be28:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	881b      	ldrh	r3, [r3, #0]
 800be2e:	4618      	mov	r0, r3
 800be30:	f7ff fef0 	bl	800bc14 <ptr_to_mem>
 800be34:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	885b      	ldrh	r3, [r3, #2]
 800be3a:	4618      	mov	r0, r3
 800be3c:	f7ff feea 	bl	800bc14 <ptr_to_mem>
 800be40:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	881b      	ldrh	r3, [r3, #0]
 800be46:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800be4a:	d818      	bhi.n	800be7e <mem_link_valid+0x66>
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	885b      	ldrh	r3, [r3, #2]
 800be50:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800be54:	d813      	bhi.n	800be7e <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800be5a:	8afa      	ldrh	r2, [r7, #22]
 800be5c:	429a      	cmp	r2, r3
 800be5e:	d004      	beq.n	800be6a <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	881b      	ldrh	r3, [r3, #0]
 800be64:	8afa      	ldrh	r2, [r7, #22]
 800be66:	429a      	cmp	r2, r3
 800be68:	d109      	bne.n	800be7e <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800be6a:	4b08      	ldr	r3, [pc, #32]	; (800be8c <mem_link_valid+0x74>)
 800be6c:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800be6e:	693a      	ldr	r2, [r7, #16]
 800be70:	429a      	cmp	r2, r3
 800be72:	d006      	beq.n	800be82 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800be74:	693b      	ldr	r3, [r7, #16]
 800be76:	885b      	ldrh	r3, [r3, #2]
 800be78:	8afa      	ldrh	r2, [r7, #22]
 800be7a:	429a      	cmp	r2, r3
 800be7c:	d001      	beq.n	800be82 <mem_link_valid+0x6a>
    return 0;
 800be7e:	2300      	movs	r3, #0
 800be80:	e000      	b.n	800be84 <mem_link_valid+0x6c>
  }
  return 1;
 800be82:	2301      	movs	r3, #1
}
 800be84:	4618      	mov	r0, r3
 800be86:	3718      	adds	r7, #24
 800be88:	46bd      	mov	sp, r7
 800be8a:	bd80      	pop	{r7, pc}
 800be8c:	20005ca8 	.word	0x20005ca8

0800be90 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800be90:	b580      	push	{r7, lr}
 800be92:	b084      	sub	sp, #16
 800be94:	af00      	add	r7, sp, #0
 800be96:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d04c      	beq.n	800bf38 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	f003 0303 	and.w	r3, r3, #3
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d007      	beq.n	800beb8 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800bea8:	4b25      	ldr	r3, [pc, #148]	; (800bf40 <mem_free+0xb0>)
 800beaa:	f240 2273 	movw	r2, #627	; 0x273
 800beae:	4925      	ldr	r1, [pc, #148]	; (800bf44 <mem_free+0xb4>)
 800beb0:	4825      	ldr	r0, [pc, #148]	; (800bf48 <mem_free+0xb8>)
 800beb2:	f00a fcc5 	bl	8016840 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800beb6:	e040      	b.n	800bf3a <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	3b08      	subs	r3, #8
 800bebc:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800bebe:	4b23      	ldr	r3, [pc, #140]	; (800bf4c <mem_free+0xbc>)
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	68fa      	ldr	r2, [r7, #12]
 800bec4:	429a      	cmp	r2, r3
 800bec6:	d306      	bcc.n	800bed6 <mem_free+0x46>
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	f103 020c 	add.w	r2, r3, #12
 800bece:	4b20      	ldr	r3, [pc, #128]	; (800bf50 <mem_free+0xc0>)
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	429a      	cmp	r2, r3
 800bed4:	d907      	bls.n	800bee6 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800bed6:	4b1a      	ldr	r3, [pc, #104]	; (800bf40 <mem_free+0xb0>)
 800bed8:	f240 227f 	movw	r2, #639	; 0x27f
 800bedc:	491d      	ldr	r1, [pc, #116]	; (800bf54 <mem_free+0xc4>)
 800bede:	481a      	ldr	r0, [pc, #104]	; (800bf48 <mem_free+0xb8>)
 800bee0:	f00a fcae 	bl	8016840 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800bee4:	e029      	b.n	800bf3a <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	791b      	ldrb	r3, [r3, #4]
 800beea:	2b00      	cmp	r3, #0
 800beec:	d107      	bne.n	800befe <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800beee:	4b14      	ldr	r3, [pc, #80]	; (800bf40 <mem_free+0xb0>)
 800bef0:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800bef4:	4918      	ldr	r1, [pc, #96]	; (800bf58 <mem_free+0xc8>)
 800bef6:	4814      	ldr	r0, [pc, #80]	; (800bf48 <mem_free+0xb8>)
 800bef8:	f00a fca2 	bl	8016840 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800befc:	e01d      	b.n	800bf3a <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800befe:	68f8      	ldr	r0, [r7, #12]
 800bf00:	f7ff ff8a 	bl	800be18 <mem_link_valid>
 800bf04:	4603      	mov	r3, r0
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d107      	bne.n	800bf1a <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800bf0a:	4b0d      	ldr	r3, [pc, #52]	; (800bf40 <mem_free+0xb0>)
 800bf0c:	f240 2295 	movw	r2, #661	; 0x295
 800bf10:	4912      	ldr	r1, [pc, #72]	; (800bf5c <mem_free+0xcc>)
 800bf12:	480d      	ldr	r0, [pc, #52]	; (800bf48 <mem_free+0xb8>)
 800bf14:	f00a fc94 	bl	8016840 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800bf18:	e00f      	b.n	800bf3a <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	2200      	movs	r2, #0
 800bf1e:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800bf20:	4b0f      	ldr	r3, [pc, #60]	; (800bf60 <mem_free+0xd0>)
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	68fa      	ldr	r2, [r7, #12]
 800bf26:	429a      	cmp	r2, r3
 800bf28:	d202      	bcs.n	800bf30 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800bf2a:	4a0d      	ldr	r2, [pc, #52]	; (800bf60 <mem_free+0xd0>)
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800bf30:	68f8      	ldr	r0, [r7, #12]
 800bf32:	f7ff fe93 	bl	800bc5c <plug_holes>
 800bf36:	e000      	b.n	800bf3a <mem_free+0xaa>
    return;
 800bf38:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800bf3a:	3710      	adds	r7, #16
 800bf3c:	46bd      	mov	sp, r7
 800bf3e:	bd80      	pop	{r7, pc}
 800bf40:	08018734 	.word	0x08018734
 800bf44:	08018808 	.word	0x08018808
 800bf48:	0801877c 	.word	0x0801877c
 800bf4c:	20005ca4 	.word	0x20005ca4
 800bf50:	20005ca8 	.word	0x20005ca8
 800bf54:	0801882c 	.word	0x0801882c
 800bf58:	08018848 	.word	0x08018848
 800bf5c:	08018870 	.word	0x08018870
 800bf60:	20005cac 	.word	0x20005cac

0800bf64 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800bf64:	b580      	push	{r7, lr}
 800bf66:	b088      	sub	sp, #32
 800bf68:	af00      	add	r7, sp, #0
 800bf6a:	6078      	str	r0, [r7, #4]
 800bf6c:	460b      	mov	r3, r1
 800bf6e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800bf70:	887b      	ldrh	r3, [r7, #2]
 800bf72:	3303      	adds	r3, #3
 800bf74:	b29b      	uxth	r3, r3
 800bf76:	f023 0303 	bic.w	r3, r3, #3
 800bf7a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800bf7c:	8bfb      	ldrh	r3, [r7, #30]
 800bf7e:	2b0b      	cmp	r3, #11
 800bf80:	d801      	bhi.n	800bf86 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800bf82:	230c      	movs	r3, #12
 800bf84:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800bf86:	8bfb      	ldrh	r3, [r7, #30]
 800bf88:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bf8c:	d803      	bhi.n	800bf96 <mem_trim+0x32>
 800bf8e:	8bfa      	ldrh	r2, [r7, #30]
 800bf90:	887b      	ldrh	r3, [r7, #2]
 800bf92:	429a      	cmp	r2, r3
 800bf94:	d201      	bcs.n	800bf9a <mem_trim+0x36>
    return NULL;
 800bf96:	2300      	movs	r3, #0
 800bf98:	e0cc      	b.n	800c134 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800bf9a:	4b68      	ldr	r3, [pc, #416]	; (800c13c <mem_trim+0x1d8>)
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	687a      	ldr	r2, [r7, #4]
 800bfa0:	429a      	cmp	r2, r3
 800bfa2:	d304      	bcc.n	800bfae <mem_trim+0x4a>
 800bfa4:	4b66      	ldr	r3, [pc, #408]	; (800c140 <mem_trim+0x1dc>)
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	687a      	ldr	r2, [r7, #4]
 800bfaa:	429a      	cmp	r2, r3
 800bfac:	d306      	bcc.n	800bfbc <mem_trim+0x58>
 800bfae:	4b65      	ldr	r3, [pc, #404]	; (800c144 <mem_trim+0x1e0>)
 800bfb0:	f240 22d1 	movw	r2, #721	; 0x2d1
 800bfb4:	4964      	ldr	r1, [pc, #400]	; (800c148 <mem_trim+0x1e4>)
 800bfb6:	4865      	ldr	r0, [pc, #404]	; (800c14c <mem_trim+0x1e8>)
 800bfb8:	f00a fc42 	bl	8016840 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800bfbc:	4b5f      	ldr	r3, [pc, #380]	; (800c13c <mem_trim+0x1d8>)
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	687a      	ldr	r2, [r7, #4]
 800bfc2:	429a      	cmp	r2, r3
 800bfc4:	d304      	bcc.n	800bfd0 <mem_trim+0x6c>
 800bfc6:	4b5e      	ldr	r3, [pc, #376]	; (800c140 <mem_trim+0x1dc>)
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	687a      	ldr	r2, [r7, #4]
 800bfcc:	429a      	cmp	r2, r3
 800bfce:	d301      	bcc.n	800bfd4 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	e0af      	b.n	800c134 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	3b08      	subs	r3, #8
 800bfd8:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800bfda:	69b8      	ldr	r0, [r7, #24]
 800bfdc:	f7ff fe2c 	bl	800bc38 <mem_to_ptr>
 800bfe0:	4603      	mov	r3, r0
 800bfe2:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800bfe4:	69bb      	ldr	r3, [r7, #24]
 800bfe6:	881a      	ldrh	r2, [r3, #0]
 800bfe8:	8afb      	ldrh	r3, [r7, #22]
 800bfea:	1ad3      	subs	r3, r2, r3
 800bfec:	b29b      	uxth	r3, r3
 800bfee:	3b08      	subs	r3, #8
 800bff0:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800bff2:	8bfa      	ldrh	r2, [r7, #30]
 800bff4:	8abb      	ldrh	r3, [r7, #20]
 800bff6:	429a      	cmp	r2, r3
 800bff8:	d906      	bls.n	800c008 <mem_trim+0xa4>
 800bffa:	4b52      	ldr	r3, [pc, #328]	; (800c144 <mem_trim+0x1e0>)
 800bffc:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800c000:	4953      	ldr	r1, [pc, #332]	; (800c150 <mem_trim+0x1ec>)
 800c002:	4852      	ldr	r0, [pc, #328]	; (800c14c <mem_trim+0x1e8>)
 800c004:	f00a fc1c 	bl	8016840 <iprintf>
  if (newsize > size) {
 800c008:	8bfa      	ldrh	r2, [r7, #30]
 800c00a:	8abb      	ldrh	r3, [r7, #20]
 800c00c:	429a      	cmp	r2, r3
 800c00e:	d901      	bls.n	800c014 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 800c010:	2300      	movs	r3, #0
 800c012:	e08f      	b.n	800c134 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 800c014:	8bfa      	ldrh	r2, [r7, #30]
 800c016:	8abb      	ldrh	r3, [r7, #20]
 800c018:	429a      	cmp	r2, r3
 800c01a:	d101      	bne.n	800c020 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	e089      	b.n	800c134 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800c020:	69bb      	ldr	r3, [r7, #24]
 800c022:	881b      	ldrh	r3, [r3, #0]
 800c024:	4618      	mov	r0, r3
 800c026:	f7ff fdf5 	bl	800bc14 <ptr_to_mem>
 800c02a:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800c02c:	693b      	ldr	r3, [r7, #16]
 800c02e:	791b      	ldrb	r3, [r3, #4]
 800c030:	2b00      	cmp	r3, #0
 800c032:	d13f      	bne.n	800c0b4 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800c034:	69bb      	ldr	r3, [r7, #24]
 800c036:	881b      	ldrh	r3, [r3, #0]
 800c038:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c03c:	d106      	bne.n	800c04c <mem_trim+0xe8>
 800c03e:	4b41      	ldr	r3, [pc, #260]	; (800c144 <mem_trim+0x1e0>)
 800c040:	f240 22f5 	movw	r2, #757	; 0x2f5
 800c044:	4943      	ldr	r1, [pc, #268]	; (800c154 <mem_trim+0x1f0>)
 800c046:	4841      	ldr	r0, [pc, #260]	; (800c14c <mem_trim+0x1e8>)
 800c048:	f00a fbfa 	bl	8016840 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800c04c:	693b      	ldr	r3, [r7, #16]
 800c04e:	881b      	ldrh	r3, [r3, #0]
 800c050:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800c052:	8afa      	ldrh	r2, [r7, #22]
 800c054:	8bfb      	ldrh	r3, [r7, #30]
 800c056:	4413      	add	r3, r2
 800c058:	b29b      	uxth	r3, r3
 800c05a:	3308      	adds	r3, #8
 800c05c:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800c05e:	4b3e      	ldr	r3, [pc, #248]	; (800c158 <mem_trim+0x1f4>)
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	693a      	ldr	r2, [r7, #16]
 800c064:	429a      	cmp	r2, r3
 800c066:	d106      	bne.n	800c076 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 800c068:	89fb      	ldrh	r3, [r7, #14]
 800c06a:	4618      	mov	r0, r3
 800c06c:	f7ff fdd2 	bl	800bc14 <ptr_to_mem>
 800c070:	4603      	mov	r3, r0
 800c072:	4a39      	ldr	r2, [pc, #228]	; (800c158 <mem_trim+0x1f4>)
 800c074:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800c076:	89fb      	ldrh	r3, [r7, #14]
 800c078:	4618      	mov	r0, r3
 800c07a:	f7ff fdcb 	bl	800bc14 <ptr_to_mem>
 800c07e:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800c080:	693b      	ldr	r3, [r7, #16]
 800c082:	2200      	movs	r2, #0
 800c084:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800c086:	693b      	ldr	r3, [r7, #16]
 800c088:	89ba      	ldrh	r2, [r7, #12]
 800c08a:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800c08c:	693b      	ldr	r3, [r7, #16]
 800c08e:	8afa      	ldrh	r2, [r7, #22]
 800c090:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800c092:	69bb      	ldr	r3, [r7, #24]
 800c094:	89fa      	ldrh	r2, [r7, #14]
 800c096:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800c098:	693b      	ldr	r3, [r7, #16]
 800c09a:	881b      	ldrh	r3, [r3, #0]
 800c09c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c0a0:	d047      	beq.n	800c132 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800c0a2:	693b      	ldr	r3, [r7, #16]
 800c0a4:	881b      	ldrh	r3, [r3, #0]
 800c0a6:	4618      	mov	r0, r3
 800c0a8:	f7ff fdb4 	bl	800bc14 <ptr_to_mem>
 800c0ac:	4602      	mov	r2, r0
 800c0ae:	89fb      	ldrh	r3, [r7, #14]
 800c0b0:	8053      	strh	r3, [r2, #2]
 800c0b2:	e03e      	b.n	800c132 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800c0b4:	8bfb      	ldrh	r3, [r7, #30]
 800c0b6:	f103 0214 	add.w	r2, r3, #20
 800c0ba:	8abb      	ldrh	r3, [r7, #20]
 800c0bc:	429a      	cmp	r2, r3
 800c0be:	d838      	bhi.n	800c132 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800c0c0:	8afa      	ldrh	r2, [r7, #22]
 800c0c2:	8bfb      	ldrh	r3, [r7, #30]
 800c0c4:	4413      	add	r3, r2
 800c0c6:	b29b      	uxth	r3, r3
 800c0c8:	3308      	adds	r3, #8
 800c0ca:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800c0cc:	69bb      	ldr	r3, [r7, #24]
 800c0ce:	881b      	ldrh	r3, [r3, #0]
 800c0d0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c0d4:	d106      	bne.n	800c0e4 <mem_trim+0x180>
 800c0d6:	4b1b      	ldr	r3, [pc, #108]	; (800c144 <mem_trim+0x1e0>)
 800c0d8:	f240 3216 	movw	r2, #790	; 0x316
 800c0dc:	491d      	ldr	r1, [pc, #116]	; (800c154 <mem_trim+0x1f0>)
 800c0de:	481b      	ldr	r0, [pc, #108]	; (800c14c <mem_trim+0x1e8>)
 800c0e0:	f00a fbae 	bl	8016840 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800c0e4:	89fb      	ldrh	r3, [r7, #14]
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	f7ff fd94 	bl	800bc14 <ptr_to_mem>
 800c0ec:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800c0ee:	4b1a      	ldr	r3, [pc, #104]	; (800c158 <mem_trim+0x1f4>)
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	693a      	ldr	r2, [r7, #16]
 800c0f4:	429a      	cmp	r2, r3
 800c0f6:	d202      	bcs.n	800c0fe <mem_trim+0x19a>
      lfree = mem2;
 800c0f8:	4a17      	ldr	r2, [pc, #92]	; (800c158 <mem_trim+0x1f4>)
 800c0fa:	693b      	ldr	r3, [r7, #16]
 800c0fc:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800c0fe:	693b      	ldr	r3, [r7, #16]
 800c100:	2200      	movs	r2, #0
 800c102:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800c104:	69bb      	ldr	r3, [r7, #24]
 800c106:	881a      	ldrh	r2, [r3, #0]
 800c108:	693b      	ldr	r3, [r7, #16]
 800c10a:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800c10c:	693b      	ldr	r3, [r7, #16]
 800c10e:	8afa      	ldrh	r2, [r7, #22]
 800c110:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800c112:	69bb      	ldr	r3, [r7, #24]
 800c114:	89fa      	ldrh	r2, [r7, #14]
 800c116:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800c118:	693b      	ldr	r3, [r7, #16]
 800c11a:	881b      	ldrh	r3, [r3, #0]
 800c11c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c120:	d007      	beq.n	800c132 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800c122:	693b      	ldr	r3, [r7, #16]
 800c124:	881b      	ldrh	r3, [r3, #0]
 800c126:	4618      	mov	r0, r3
 800c128:	f7ff fd74 	bl	800bc14 <ptr_to_mem>
 800c12c:	4602      	mov	r2, r0
 800c12e:	89fb      	ldrh	r3, [r7, #14]
 800c130:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800c132:	687b      	ldr	r3, [r7, #4]
}
 800c134:	4618      	mov	r0, r3
 800c136:	3720      	adds	r7, #32
 800c138:	46bd      	mov	sp, r7
 800c13a:	bd80      	pop	{r7, pc}
 800c13c:	20005ca4 	.word	0x20005ca4
 800c140:	20005ca8 	.word	0x20005ca8
 800c144:	08018734 	.word	0x08018734
 800c148:	080188a4 	.word	0x080188a4
 800c14c:	0801877c 	.word	0x0801877c
 800c150:	080188bc 	.word	0x080188bc
 800c154:	080188dc 	.word	0x080188dc
 800c158:	20005cac 	.word	0x20005cac

0800c15c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800c15c:	b580      	push	{r7, lr}
 800c15e:	b088      	sub	sp, #32
 800c160:	af00      	add	r7, sp, #0
 800c162:	4603      	mov	r3, r0
 800c164:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800c166:	88fb      	ldrh	r3, [r7, #6]
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d101      	bne.n	800c170 <mem_malloc+0x14>
    return NULL;
 800c16c:	2300      	movs	r3, #0
 800c16e:	e0d9      	b.n	800c324 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800c170:	88fb      	ldrh	r3, [r7, #6]
 800c172:	3303      	adds	r3, #3
 800c174:	b29b      	uxth	r3, r3
 800c176:	f023 0303 	bic.w	r3, r3, #3
 800c17a:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800c17c:	8bbb      	ldrh	r3, [r7, #28]
 800c17e:	2b0b      	cmp	r3, #11
 800c180:	d801      	bhi.n	800c186 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800c182:	230c      	movs	r3, #12
 800c184:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800c186:	8bbb      	ldrh	r3, [r7, #28]
 800c188:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c18c:	d803      	bhi.n	800c196 <mem_malloc+0x3a>
 800c18e:	8bba      	ldrh	r2, [r7, #28]
 800c190:	88fb      	ldrh	r3, [r7, #6]
 800c192:	429a      	cmp	r2, r3
 800c194:	d201      	bcs.n	800c19a <mem_malloc+0x3e>
    return NULL;
 800c196:	2300      	movs	r3, #0
 800c198:	e0c4      	b.n	800c324 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800c19a:	4b64      	ldr	r3, [pc, #400]	; (800c32c <mem_malloc+0x1d0>)
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	4618      	mov	r0, r3
 800c1a0:	f7ff fd4a 	bl	800bc38 <mem_to_ptr>
 800c1a4:	4603      	mov	r3, r0
 800c1a6:	83fb      	strh	r3, [r7, #30]
 800c1a8:	e0b4      	b.n	800c314 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800c1aa:	8bfb      	ldrh	r3, [r7, #30]
 800c1ac:	4618      	mov	r0, r3
 800c1ae:	f7ff fd31 	bl	800bc14 <ptr_to_mem>
 800c1b2:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800c1b4:	697b      	ldr	r3, [r7, #20]
 800c1b6:	791b      	ldrb	r3, [r3, #4]
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	f040 80a4 	bne.w	800c306 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800c1be:	697b      	ldr	r3, [r7, #20]
 800c1c0:	881b      	ldrh	r3, [r3, #0]
 800c1c2:	461a      	mov	r2, r3
 800c1c4:	8bfb      	ldrh	r3, [r7, #30]
 800c1c6:	1ad3      	subs	r3, r2, r3
 800c1c8:	f1a3 0208 	sub.w	r2, r3, #8
 800c1cc:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800c1ce:	429a      	cmp	r2, r3
 800c1d0:	f0c0 8099 	bcc.w	800c306 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800c1d4:	697b      	ldr	r3, [r7, #20]
 800c1d6:	881b      	ldrh	r3, [r3, #0]
 800c1d8:	461a      	mov	r2, r3
 800c1da:	8bfb      	ldrh	r3, [r7, #30]
 800c1dc:	1ad3      	subs	r3, r2, r3
 800c1de:	f1a3 0208 	sub.w	r2, r3, #8
 800c1e2:	8bbb      	ldrh	r3, [r7, #28]
 800c1e4:	3314      	adds	r3, #20
 800c1e6:	429a      	cmp	r2, r3
 800c1e8:	d333      	bcc.n	800c252 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800c1ea:	8bfa      	ldrh	r2, [r7, #30]
 800c1ec:	8bbb      	ldrh	r3, [r7, #28]
 800c1ee:	4413      	add	r3, r2
 800c1f0:	b29b      	uxth	r3, r3
 800c1f2:	3308      	adds	r3, #8
 800c1f4:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800c1f6:	8a7b      	ldrh	r3, [r7, #18]
 800c1f8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c1fc:	d106      	bne.n	800c20c <mem_malloc+0xb0>
 800c1fe:	4b4c      	ldr	r3, [pc, #304]	; (800c330 <mem_malloc+0x1d4>)
 800c200:	f240 3287 	movw	r2, #903	; 0x387
 800c204:	494b      	ldr	r1, [pc, #300]	; (800c334 <mem_malloc+0x1d8>)
 800c206:	484c      	ldr	r0, [pc, #304]	; (800c338 <mem_malloc+0x1dc>)
 800c208:	f00a fb1a 	bl	8016840 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800c20c:	8a7b      	ldrh	r3, [r7, #18]
 800c20e:	4618      	mov	r0, r3
 800c210:	f7ff fd00 	bl	800bc14 <ptr_to_mem>
 800c214:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	2200      	movs	r2, #0
 800c21a:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800c21c:	697b      	ldr	r3, [r7, #20]
 800c21e:	881a      	ldrh	r2, [r3, #0]
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	8bfa      	ldrh	r2, [r7, #30]
 800c228:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800c22a:	697b      	ldr	r3, [r7, #20]
 800c22c:	8a7a      	ldrh	r2, [r7, #18]
 800c22e:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800c230:	697b      	ldr	r3, [r7, #20]
 800c232:	2201      	movs	r2, #1
 800c234:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	881b      	ldrh	r3, [r3, #0]
 800c23a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c23e:	d00b      	beq.n	800c258 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	881b      	ldrh	r3, [r3, #0]
 800c244:	4618      	mov	r0, r3
 800c246:	f7ff fce5 	bl	800bc14 <ptr_to_mem>
 800c24a:	4602      	mov	r2, r0
 800c24c:	8a7b      	ldrh	r3, [r7, #18]
 800c24e:	8053      	strh	r3, [r2, #2]
 800c250:	e002      	b.n	800c258 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800c252:	697b      	ldr	r3, [r7, #20]
 800c254:	2201      	movs	r2, #1
 800c256:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800c258:	4b34      	ldr	r3, [pc, #208]	; (800c32c <mem_malloc+0x1d0>)
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	697a      	ldr	r2, [r7, #20]
 800c25e:	429a      	cmp	r2, r3
 800c260:	d127      	bne.n	800c2b2 <mem_malloc+0x156>
          struct mem *cur = lfree;
 800c262:	4b32      	ldr	r3, [pc, #200]	; (800c32c <mem_malloc+0x1d0>)
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800c268:	e005      	b.n	800c276 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800c26a:	69bb      	ldr	r3, [r7, #24]
 800c26c:	881b      	ldrh	r3, [r3, #0]
 800c26e:	4618      	mov	r0, r3
 800c270:	f7ff fcd0 	bl	800bc14 <ptr_to_mem>
 800c274:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800c276:	69bb      	ldr	r3, [r7, #24]
 800c278:	791b      	ldrb	r3, [r3, #4]
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d004      	beq.n	800c288 <mem_malloc+0x12c>
 800c27e:	4b2f      	ldr	r3, [pc, #188]	; (800c33c <mem_malloc+0x1e0>)
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	69ba      	ldr	r2, [r7, #24]
 800c284:	429a      	cmp	r2, r3
 800c286:	d1f0      	bne.n	800c26a <mem_malloc+0x10e>
          }
          lfree = cur;
 800c288:	4a28      	ldr	r2, [pc, #160]	; (800c32c <mem_malloc+0x1d0>)
 800c28a:	69bb      	ldr	r3, [r7, #24]
 800c28c:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800c28e:	4b27      	ldr	r3, [pc, #156]	; (800c32c <mem_malloc+0x1d0>)
 800c290:	681a      	ldr	r2, [r3, #0]
 800c292:	4b2a      	ldr	r3, [pc, #168]	; (800c33c <mem_malloc+0x1e0>)
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	429a      	cmp	r2, r3
 800c298:	d00b      	beq.n	800c2b2 <mem_malloc+0x156>
 800c29a:	4b24      	ldr	r3, [pc, #144]	; (800c32c <mem_malloc+0x1d0>)
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	791b      	ldrb	r3, [r3, #4]
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d006      	beq.n	800c2b2 <mem_malloc+0x156>
 800c2a4:	4b22      	ldr	r3, [pc, #136]	; (800c330 <mem_malloc+0x1d4>)
 800c2a6:	f240 32b5 	movw	r2, #949	; 0x3b5
 800c2aa:	4925      	ldr	r1, [pc, #148]	; (800c340 <mem_malloc+0x1e4>)
 800c2ac:	4822      	ldr	r0, [pc, #136]	; (800c338 <mem_malloc+0x1dc>)
 800c2ae:	f00a fac7 	bl	8016840 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800c2b2:	8bba      	ldrh	r2, [r7, #28]
 800c2b4:	697b      	ldr	r3, [r7, #20]
 800c2b6:	4413      	add	r3, r2
 800c2b8:	3308      	adds	r3, #8
 800c2ba:	4a20      	ldr	r2, [pc, #128]	; (800c33c <mem_malloc+0x1e0>)
 800c2bc:	6812      	ldr	r2, [r2, #0]
 800c2be:	4293      	cmp	r3, r2
 800c2c0:	d906      	bls.n	800c2d0 <mem_malloc+0x174>
 800c2c2:	4b1b      	ldr	r3, [pc, #108]	; (800c330 <mem_malloc+0x1d4>)
 800c2c4:	f240 32b9 	movw	r2, #953	; 0x3b9
 800c2c8:	491e      	ldr	r1, [pc, #120]	; (800c344 <mem_malloc+0x1e8>)
 800c2ca:	481b      	ldr	r0, [pc, #108]	; (800c338 <mem_malloc+0x1dc>)
 800c2cc:	f00a fab8 	bl	8016840 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800c2d0:	697b      	ldr	r3, [r7, #20]
 800c2d2:	f003 0303 	and.w	r3, r3, #3
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d006      	beq.n	800c2e8 <mem_malloc+0x18c>
 800c2da:	4b15      	ldr	r3, [pc, #84]	; (800c330 <mem_malloc+0x1d4>)
 800c2dc:	f240 32bb 	movw	r2, #955	; 0x3bb
 800c2e0:	4919      	ldr	r1, [pc, #100]	; (800c348 <mem_malloc+0x1ec>)
 800c2e2:	4815      	ldr	r0, [pc, #84]	; (800c338 <mem_malloc+0x1dc>)
 800c2e4:	f00a faac 	bl	8016840 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800c2e8:	697b      	ldr	r3, [r7, #20]
 800c2ea:	f003 0303 	and.w	r3, r3, #3
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d006      	beq.n	800c300 <mem_malloc+0x1a4>
 800c2f2:	4b0f      	ldr	r3, [pc, #60]	; (800c330 <mem_malloc+0x1d4>)
 800c2f4:	f240 32bd 	movw	r2, #957	; 0x3bd
 800c2f8:	4914      	ldr	r1, [pc, #80]	; (800c34c <mem_malloc+0x1f0>)
 800c2fa:	480f      	ldr	r0, [pc, #60]	; (800c338 <mem_malloc+0x1dc>)
 800c2fc:	f00a faa0 	bl	8016840 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800c300:	697b      	ldr	r3, [r7, #20]
 800c302:	3308      	adds	r3, #8
 800c304:	e00e      	b.n	800c324 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800c306:	8bfb      	ldrh	r3, [r7, #30]
 800c308:	4618      	mov	r0, r3
 800c30a:	f7ff fc83 	bl	800bc14 <ptr_to_mem>
 800c30e:	4603      	mov	r3, r0
 800c310:	881b      	ldrh	r3, [r3, #0]
 800c312:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800c314:	8bfa      	ldrh	r2, [r7, #30]
 800c316:	8bbb      	ldrh	r3, [r7, #28]
 800c318:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800c31c:	429a      	cmp	r2, r3
 800c31e:	f4ff af44 	bcc.w	800c1aa <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800c322:	2300      	movs	r3, #0
}
 800c324:	4618      	mov	r0, r3
 800c326:	3720      	adds	r7, #32
 800c328:	46bd      	mov	sp, r7
 800c32a:	bd80      	pop	{r7, pc}
 800c32c:	20005cac 	.word	0x20005cac
 800c330:	08018734 	.word	0x08018734
 800c334:	080188dc 	.word	0x080188dc
 800c338:	0801877c 	.word	0x0801877c
 800c33c:	20005ca8 	.word	0x20005ca8
 800c340:	080188f0 	.word	0x080188f0
 800c344:	0801890c 	.word	0x0801890c
 800c348:	0801893c 	.word	0x0801893c
 800c34c:	0801896c 	.word	0x0801896c

0800c350 <mem_calloc>:
 * @param size size of the objects to allocate
 * @return pointer to allocated memory / NULL pointer if there is an error
 */
void *
mem_calloc(mem_size_t count, mem_size_t size)
{
 800c350:	b580      	push	{r7, lr}
 800c352:	b084      	sub	sp, #16
 800c354:	af00      	add	r7, sp, #0
 800c356:	4603      	mov	r3, r0
 800c358:	460a      	mov	r2, r1
 800c35a:	80fb      	strh	r3, [r7, #6]
 800c35c:	4613      	mov	r3, r2
 800c35e:	80bb      	strh	r3, [r7, #4]
  void *p;
  size_t alloc_size = (size_t)count * (size_t)size;
 800c360:	88fb      	ldrh	r3, [r7, #6]
 800c362:	88ba      	ldrh	r2, [r7, #4]
 800c364:	fb02 f303 	mul.w	r3, r2, r3
 800c368:	60fb      	str	r3, [r7, #12]

  if ((size_t)(mem_size_t)alloc_size != alloc_size) {
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	b29b      	uxth	r3, r3
 800c36e:	461a      	mov	r2, r3
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	4293      	cmp	r3, r2
 800c374:	d001      	beq.n	800c37a <mem_calloc+0x2a>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_calloc: could not allocate %"SZT_F" bytes\n", alloc_size));
    return NULL;
 800c376:	2300      	movs	r3, #0
 800c378:	e00e      	b.n	800c398 <mem_calloc+0x48>
  }

  /* allocate 'count' objects of size 'size' */
  p = mem_malloc((mem_size_t)alloc_size);
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	b29b      	uxth	r3, r3
 800c37e:	4618      	mov	r0, r3
 800c380:	f7ff feec 	bl	800c15c <mem_malloc>
 800c384:	60b8      	str	r0, [r7, #8]
  if (p) {
 800c386:	68bb      	ldr	r3, [r7, #8]
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d004      	beq.n	800c396 <mem_calloc+0x46>
    /* zero the memory */
    memset(p, 0, alloc_size);
 800c38c:	68fa      	ldr	r2, [r7, #12]
 800c38e:	2100      	movs	r1, #0
 800c390:	68b8      	ldr	r0, [r7, #8]
 800c392:	f00a fa4d 	bl	8016830 <memset>
  }
  return p;
 800c396:	68bb      	ldr	r3, [r7, #8]
}
 800c398:	4618      	mov	r0, r3
 800c39a:	3710      	adds	r7, #16
 800c39c:	46bd      	mov	sp, r7
 800c39e:	bd80      	pop	{r7, pc}

0800c3a0 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800c3a0:	b480      	push	{r7}
 800c3a2:	b085      	sub	sp, #20
 800c3a4:	af00      	add	r7, sp, #0
 800c3a6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	689b      	ldr	r3, [r3, #8]
 800c3ac:	2200      	movs	r2, #0
 800c3ae:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	685b      	ldr	r3, [r3, #4]
 800c3b4:	3303      	adds	r3, #3
 800c3b6:	f023 0303 	bic.w	r3, r3, #3
 800c3ba:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800c3bc:	2300      	movs	r3, #0
 800c3be:	60fb      	str	r3, [r7, #12]
 800c3c0:	e011      	b.n	800c3e6 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	689b      	ldr	r3, [r3, #8]
 800c3c6:	681a      	ldr	r2, [r3, #0]
 800c3c8:	68bb      	ldr	r3, [r7, #8]
 800c3ca:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	689b      	ldr	r3, [r3, #8]
 800c3d0:	68ba      	ldr	r2, [r7, #8]
 800c3d2:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	881b      	ldrh	r3, [r3, #0]
 800c3d8:	461a      	mov	r2, r3
 800c3da:	68bb      	ldr	r3, [r7, #8]
 800c3dc:	4413      	add	r3, r2
 800c3de:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	3301      	adds	r3, #1
 800c3e4:	60fb      	str	r3, [r7, #12]
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	885b      	ldrh	r3, [r3, #2]
 800c3ea:	461a      	mov	r2, r3
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	4293      	cmp	r3, r2
 800c3f0:	dbe7      	blt.n	800c3c2 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800c3f2:	bf00      	nop
 800c3f4:	bf00      	nop
 800c3f6:	3714      	adds	r7, #20
 800c3f8:	46bd      	mov	sp, r7
 800c3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3fe:	4770      	bx	lr

0800c400 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800c400:	b580      	push	{r7, lr}
 800c402:	b082      	sub	sp, #8
 800c404:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800c406:	2300      	movs	r3, #0
 800c408:	80fb      	strh	r3, [r7, #6]
 800c40a:	e009      	b.n	800c420 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800c40c:	88fb      	ldrh	r3, [r7, #6]
 800c40e:	4a08      	ldr	r2, [pc, #32]	; (800c430 <memp_init+0x30>)
 800c410:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c414:	4618      	mov	r0, r3
 800c416:	f7ff ffc3 	bl	800c3a0 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800c41a:	88fb      	ldrh	r3, [r7, #6]
 800c41c:	3301      	adds	r3, #1
 800c41e:	80fb      	strh	r3, [r7, #6]
 800c420:	88fb      	ldrh	r3, [r7, #6]
 800c422:	2b08      	cmp	r3, #8
 800c424:	d9f2      	bls.n	800c40c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800c426:	bf00      	nop
 800c428:	bf00      	nop
 800c42a:	3708      	adds	r7, #8
 800c42c:	46bd      	mov	sp, r7
 800c42e:	bd80      	pop	{r7, pc}
 800c430:	0801d084 	.word	0x0801d084

0800c434 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800c434:	b580      	push	{r7, lr}
 800c436:	b084      	sub	sp, #16
 800c438:	af00      	add	r7, sp, #0
 800c43a:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	689b      	ldr	r3, [r3, #8]
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	2b00      	cmp	r3, #0
 800c448:	d012      	beq.n	800c470 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	689b      	ldr	r3, [r3, #8]
 800c44e:	68fa      	ldr	r2, [r7, #12]
 800c450:	6812      	ldr	r2, [r2, #0]
 800c452:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	f003 0303 	and.w	r3, r3, #3
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d006      	beq.n	800c46c <do_memp_malloc_pool+0x38>
 800c45e:	4b07      	ldr	r3, [pc, #28]	; (800c47c <do_memp_malloc_pool+0x48>)
 800c460:	f44f 728c 	mov.w	r2, #280	; 0x118
 800c464:	4906      	ldr	r1, [pc, #24]	; (800c480 <do_memp_malloc_pool+0x4c>)
 800c466:	4807      	ldr	r0, [pc, #28]	; (800c484 <do_memp_malloc_pool+0x50>)
 800c468:	f00a f9ea 	bl	8016840 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	e000      	b.n	800c472 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800c470:	2300      	movs	r3, #0
}
 800c472:	4618      	mov	r0, r3
 800c474:	3710      	adds	r7, #16
 800c476:	46bd      	mov	sp, r7
 800c478:	bd80      	pop	{r7, pc}
 800c47a:	bf00      	nop
 800c47c:	08018990 	.word	0x08018990
 800c480:	080189c0 	.word	0x080189c0
 800c484:	080189e4 	.word	0x080189e4

0800c488 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800c488:	b580      	push	{r7, lr}
 800c48a:	b082      	sub	sp, #8
 800c48c:	af00      	add	r7, sp, #0
 800c48e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	2b00      	cmp	r3, #0
 800c494:	d106      	bne.n	800c4a4 <memp_malloc_pool+0x1c>
 800c496:	4b0a      	ldr	r3, [pc, #40]	; (800c4c0 <memp_malloc_pool+0x38>)
 800c498:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800c49c:	4909      	ldr	r1, [pc, #36]	; (800c4c4 <memp_malloc_pool+0x3c>)
 800c49e:	480a      	ldr	r0, [pc, #40]	; (800c4c8 <memp_malloc_pool+0x40>)
 800c4a0:	f00a f9ce 	bl	8016840 <iprintf>
  if (desc == NULL) {
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d101      	bne.n	800c4ae <memp_malloc_pool+0x26>
    return NULL;
 800c4aa:	2300      	movs	r3, #0
 800c4ac:	e003      	b.n	800c4b6 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800c4ae:	6878      	ldr	r0, [r7, #4]
 800c4b0:	f7ff ffc0 	bl	800c434 <do_memp_malloc_pool>
 800c4b4:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800c4b6:	4618      	mov	r0, r3
 800c4b8:	3708      	adds	r7, #8
 800c4ba:	46bd      	mov	sp, r7
 800c4bc:	bd80      	pop	{r7, pc}
 800c4be:	bf00      	nop
 800c4c0:	08018990 	.word	0x08018990
 800c4c4:	08018a0c 	.word	0x08018a0c
 800c4c8:	080189e4 	.word	0x080189e4

0800c4cc <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800c4cc:	b580      	push	{r7, lr}
 800c4ce:	b084      	sub	sp, #16
 800c4d0:	af00      	add	r7, sp, #0
 800c4d2:	4603      	mov	r3, r0
 800c4d4:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800c4d6:	79fb      	ldrb	r3, [r7, #7]
 800c4d8:	2b08      	cmp	r3, #8
 800c4da:	d908      	bls.n	800c4ee <memp_malloc+0x22>
 800c4dc:	4b0a      	ldr	r3, [pc, #40]	; (800c508 <memp_malloc+0x3c>)
 800c4de:	f240 1257 	movw	r2, #343	; 0x157
 800c4e2:	490a      	ldr	r1, [pc, #40]	; (800c50c <memp_malloc+0x40>)
 800c4e4:	480a      	ldr	r0, [pc, #40]	; (800c510 <memp_malloc+0x44>)
 800c4e6:	f00a f9ab 	bl	8016840 <iprintf>
 800c4ea:	2300      	movs	r3, #0
 800c4ec:	e008      	b.n	800c500 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800c4ee:	79fb      	ldrb	r3, [r7, #7]
 800c4f0:	4a08      	ldr	r2, [pc, #32]	; (800c514 <memp_malloc+0x48>)
 800c4f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c4f6:	4618      	mov	r0, r3
 800c4f8:	f7ff ff9c 	bl	800c434 <do_memp_malloc_pool>
 800c4fc:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800c4fe:	68fb      	ldr	r3, [r7, #12]
}
 800c500:	4618      	mov	r0, r3
 800c502:	3710      	adds	r7, #16
 800c504:	46bd      	mov	sp, r7
 800c506:	bd80      	pop	{r7, pc}
 800c508:	08018990 	.word	0x08018990
 800c50c:	08018a20 	.word	0x08018a20
 800c510:	080189e4 	.word	0x080189e4
 800c514:	0801d084 	.word	0x0801d084

0800c518 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800c518:	b580      	push	{r7, lr}
 800c51a:	b084      	sub	sp, #16
 800c51c:	af00      	add	r7, sp, #0
 800c51e:	6078      	str	r0, [r7, #4]
 800c520:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800c522:	683b      	ldr	r3, [r7, #0]
 800c524:	f003 0303 	and.w	r3, r3, #3
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d006      	beq.n	800c53a <do_memp_free_pool+0x22>
 800c52c:	4b0a      	ldr	r3, [pc, #40]	; (800c558 <do_memp_free_pool+0x40>)
 800c52e:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800c532:	490a      	ldr	r1, [pc, #40]	; (800c55c <do_memp_free_pool+0x44>)
 800c534:	480a      	ldr	r0, [pc, #40]	; (800c560 <do_memp_free_pool+0x48>)
 800c536:	f00a f983 	bl	8016840 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800c53a:	683b      	ldr	r3, [r7, #0]
 800c53c:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	689b      	ldr	r3, [r3, #8]
 800c542:	681a      	ldr	r2, [r3, #0]
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	689b      	ldr	r3, [r3, #8]
 800c54c:	68fa      	ldr	r2, [r7, #12]
 800c54e:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800c550:	bf00      	nop
 800c552:	3710      	adds	r7, #16
 800c554:	46bd      	mov	sp, r7
 800c556:	bd80      	pop	{r7, pc}
 800c558:	08018990 	.word	0x08018990
 800c55c:	08018a40 	.word	0x08018a40
 800c560:	080189e4 	.word	0x080189e4

0800c564 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800c564:	b580      	push	{r7, lr}
 800c566:	b082      	sub	sp, #8
 800c568:	af00      	add	r7, sp, #0
 800c56a:	6078      	str	r0, [r7, #4]
 800c56c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	2b00      	cmp	r3, #0
 800c572:	d106      	bne.n	800c582 <memp_free_pool+0x1e>
 800c574:	4b0a      	ldr	r3, [pc, #40]	; (800c5a0 <memp_free_pool+0x3c>)
 800c576:	f240 1295 	movw	r2, #405	; 0x195
 800c57a:	490a      	ldr	r1, [pc, #40]	; (800c5a4 <memp_free_pool+0x40>)
 800c57c:	480a      	ldr	r0, [pc, #40]	; (800c5a8 <memp_free_pool+0x44>)
 800c57e:	f00a f95f 	bl	8016840 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	2b00      	cmp	r3, #0
 800c586:	d007      	beq.n	800c598 <memp_free_pool+0x34>
 800c588:	683b      	ldr	r3, [r7, #0]
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d004      	beq.n	800c598 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800c58e:	6839      	ldr	r1, [r7, #0]
 800c590:	6878      	ldr	r0, [r7, #4]
 800c592:	f7ff ffc1 	bl	800c518 <do_memp_free_pool>
 800c596:	e000      	b.n	800c59a <memp_free_pool+0x36>
    return;
 800c598:	bf00      	nop
}
 800c59a:	3708      	adds	r7, #8
 800c59c:	46bd      	mov	sp, r7
 800c59e:	bd80      	pop	{r7, pc}
 800c5a0:	08018990 	.word	0x08018990
 800c5a4:	08018a0c 	.word	0x08018a0c
 800c5a8:	080189e4 	.word	0x080189e4

0800c5ac <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800c5ac:	b580      	push	{r7, lr}
 800c5ae:	b082      	sub	sp, #8
 800c5b0:	af00      	add	r7, sp, #0
 800c5b2:	4603      	mov	r3, r0
 800c5b4:	6039      	str	r1, [r7, #0]
 800c5b6:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800c5b8:	79fb      	ldrb	r3, [r7, #7]
 800c5ba:	2b08      	cmp	r3, #8
 800c5bc:	d907      	bls.n	800c5ce <memp_free+0x22>
 800c5be:	4b0c      	ldr	r3, [pc, #48]	; (800c5f0 <memp_free+0x44>)
 800c5c0:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800c5c4:	490b      	ldr	r1, [pc, #44]	; (800c5f4 <memp_free+0x48>)
 800c5c6:	480c      	ldr	r0, [pc, #48]	; (800c5f8 <memp_free+0x4c>)
 800c5c8:	f00a f93a 	bl	8016840 <iprintf>
 800c5cc:	e00c      	b.n	800c5e8 <memp_free+0x3c>

  if (mem == NULL) {
 800c5ce:	683b      	ldr	r3, [r7, #0]
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d008      	beq.n	800c5e6 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800c5d4:	79fb      	ldrb	r3, [r7, #7]
 800c5d6:	4a09      	ldr	r2, [pc, #36]	; (800c5fc <memp_free+0x50>)
 800c5d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c5dc:	6839      	ldr	r1, [r7, #0]
 800c5de:	4618      	mov	r0, r3
 800c5e0:	f7ff ff9a 	bl	800c518 <do_memp_free_pool>
 800c5e4:	e000      	b.n	800c5e8 <memp_free+0x3c>
    return;
 800c5e6:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800c5e8:	3708      	adds	r7, #8
 800c5ea:	46bd      	mov	sp, r7
 800c5ec:	bd80      	pop	{r7, pc}
 800c5ee:	bf00      	nop
 800c5f0:	08018990 	.word	0x08018990
 800c5f4:	08018a60 	.word	0x08018a60
 800c5f8:	080189e4 	.word	0x080189e4
 800c5fc:	0801d084 	.word	0x0801d084

0800c600 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800c600:	b480      	push	{r7}
 800c602:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800c604:	bf00      	nop
 800c606:	46bd      	mov	sp, r7
 800c608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c60c:	4770      	bx	lr
	...

0800c610 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800c610:	b580      	push	{r7, lr}
 800c612:	b086      	sub	sp, #24
 800c614:	af00      	add	r7, sp, #0
 800c616:	60f8      	str	r0, [r7, #12]
 800c618:	60b9      	str	r1, [r7, #8]
 800c61a:	607a      	str	r2, [r7, #4]
 800c61c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	2b00      	cmp	r3, #0
 800c622:	d108      	bne.n	800c636 <netif_add+0x26>
 800c624:	4b57      	ldr	r3, [pc, #348]	; (800c784 <netif_add+0x174>)
 800c626:	f240 1227 	movw	r2, #295	; 0x127
 800c62a:	4957      	ldr	r1, [pc, #348]	; (800c788 <netif_add+0x178>)
 800c62c:	4857      	ldr	r0, [pc, #348]	; (800c78c <netif_add+0x17c>)
 800c62e:	f00a f907 	bl	8016840 <iprintf>
 800c632:	2300      	movs	r3, #0
 800c634:	e0a2      	b.n	800c77c <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800c636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d108      	bne.n	800c64e <netif_add+0x3e>
 800c63c:	4b51      	ldr	r3, [pc, #324]	; (800c784 <netif_add+0x174>)
 800c63e:	f44f 7294 	mov.w	r2, #296	; 0x128
 800c642:	4953      	ldr	r1, [pc, #332]	; (800c790 <netif_add+0x180>)
 800c644:	4851      	ldr	r0, [pc, #324]	; (800c78c <netif_add+0x17c>)
 800c646:	f00a f8fb 	bl	8016840 <iprintf>
 800c64a:	2300      	movs	r3, #0
 800c64c:	e096      	b.n	800c77c <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800c64e:	68bb      	ldr	r3, [r7, #8]
 800c650:	2b00      	cmp	r3, #0
 800c652:	d101      	bne.n	800c658 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800c654:	4b4f      	ldr	r3, [pc, #316]	; (800c794 <netif_add+0x184>)
 800c656:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d101      	bne.n	800c662 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800c65e:	4b4d      	ldr	r3, [pc, #308]	; (800c794 <netif_add+0x184>)
 800c660:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800c662:	683b      	ldr	r3, [r7, #0]
 800c664:	2b00      	cmp	r3, #0
 800c666:	d101      	bne.n	800c66c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800c668:	4b4a      	ldr	r3, [pc, #296]	; (800c794 <netif_add+0x184>)
 800c66a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	2200      	movs	r2, #0
 800c670:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	2200      	movs	r2, #0
 800c676:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	2200      	movs	r2, #0
 800c67c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	4a45      	ldr	r2, [pc, #276]	; (800c798 <netif_add+0x188>)
 800c682:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	2200      	movs	r2, #0
 800c688:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	2200      	movs	r2, #0
 800c68e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	2200      	movs	r2, #0
 800c696:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	6a3a      	ldr	r2, [r7, #32]
 800c69c:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800c69e:	4b3f      	ldr	r3, [pc, #252]	; (800c79c <netif_add+0x18c>)
 800c6a0:	781a      	ldrb	r2, [r3, #0]
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c6ac:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800c6ae:	683b      	ldr	r3, [r7, #0]
 800c6b0:	687a      	ldr	r2, [r7, #4]
 800c6b2:	68b9      	ldr	r1, [r7, #8]
 800c6b4:	68f8      	ldr	r0, [r7, #12]
 800c6b6:	f000 f913 	bl	800c8e0 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800c6ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6bc:	68f8      	ldr	r0, [r7, #12]
 800c6be:	4798      	blx	r3
 800c6c0:	4603      	mov	r3, r0
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d001      	beq.n	800c6ca <netif_add+0xba>
    return NULL;
 800c6c6:	2300      	movs	r3, #0
 800c6c8:	e058      	b.n	800c77c <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c6d0:	2bff      	cmp	r3, #255	; 0xff
 800c6d2:	d103      	bne.n	800c6dc <netif_add+0xcc>
        netif->num = 0;
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	2200      	movs	r2, #0
 800c6d8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800c6dc:	2300      	movs	r3, #0
 800c6de:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800c6e0:	4b2f      	ldr	r3, [pc, #188]	; (800c7a0 <netif_add+0x190>)
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	617b      	str	r3, [r7, #20]
 800c6e6:	e02b      	b.n	800c740 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800c6e8:	697a      	ldr	r2, [r7, #20]
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	429a      	cmp	r2, r3
 800c6ee:	d106      	bne.n	800c6fe <netif_add+0xee>
 800c6f0:	4b24      	ldr	r3, [pc, #144]	; (800c784 <netif_add+0x174>)
 800c6f2:	f240 128b 	movw	r2, #395	; 0x18b
 800c6f6:	492b      	ldr	r1, [pc, #172]	; (800c7a4 <netif_add+0x194>)
 800c6f8:	4824      	ldr	r0, [pc, #144]	; (800c78c <netif_add+0x17c>)
 800c6fa:	f00a f8a1 	bl	8016840 <iprintf>
        num_netifs++;
 800c6fe:	693b      	ldr	r3, [r7, #16]
 800c700:	3301      	adds	r3, #1
 800c702:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800c704:	693b      	ldr	r3, [r7, #16]
 800c706:	2bff      	cmp	r3, #255	; 0xff
 800c708:	dd06      	ble.n	800c718 <netif_add+0x108>
 800c70a:	4b1e      	ldr	r3, [pc, #120]	; (800c784 <netif_add+0x174>)
 800c70c:	f240 128d 	movw	r2, #397	; 0x18d
 800c710:	4925      	ldr	r1, [pc, #148]	; (800c7a8 <netif_add+0x198>)
 800c712:	481e      	ldr	r0, [pc, #120]	; (800c78c <netif_add+0x17c>)
 800c714:	f00a f894 	bl	8016840 <iprintf>
        if (netif2->num == netif->num) {
 800c718:	697b      	ldr	r3, [r7, #20]
 800c71a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c724:	429a      	cmp	r2, r3
 800c726:	d108      	bne.n	800c73a <netif_add+0x12a>
          netif->num++;
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c72e:	3301      	adds	r3, #1
 800c730:	b2da      	uxtb	r2, r3
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800c738:	e005      	b.n	800c746 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800c73a:	697b      	ldr	r3, [r7, #20]
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	617b      	str	r3, [r7, #20]
 800c740:	697b      	ldr	r3, [r7, #20]
 800c742:	2b00      	cmp	r3, #0
 800c744:	d1d0      	bne.n	800c6e8 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800c746:	697b      	ldr	r3, [r7, #20]
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d1be      	bne.n	800c6ca <netif_add+0xba>
  }
  if (netif->num == 254) {
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c752:	2bfe      	cmp	r3, #254	; 0xfe
 800c754:	d103      	bne.n	800c75e <netif_add+0x14e>
    netif_num = 0;
 800c756:	4b11      	ldr	r3, [pc, #68]	; (800c79c <netif_add+0x18c>)
 800c758:	2200      	movs	r2, #0
 800c75a:	701a      	strb	r2, [r3, #0]
 800c75c:	e006      	b.n	800c76c <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c764:	3301      	adds	r3, #1
 800c766:	b2da      	uxtb	r2, r3
 800c768:	4b0c      	ldr	r3, [pc, #48]	; (800c79c <netif_add+0x18c>)
 800c76a:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800c76c:	4b0c      	ldr	r3, [pc, #48]	; (800c7a0 <netif_add+0x190>)
 800c76e:	681a      	ldr	r2, [r3, #0]
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800c774:	4a0a      	ldr	r2, [pc, #40]	; (800c7a0 <netif_add+0x190>)
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800c77a:	68fb      	ldr	r3, [r7, #12]
}
 800c77c:	4618      	mov	r0, r3
 800c77e:	3718      	adds	r7, #24
 800c780:	46bd      	mov	sp, r7
 800c782:	bd80      	pop	{r7, pc}
 800c784:	08018a7c 	.word	0x08018a7c
 800c788:	08018b10 	.word	0x08018b10
 800c78c:	08018acc 	.word	0x08018acc
 800c790:	08018b2c 	.word	0x08018b2c
 800c794:	0801d0e8 	.word	0x0801d0e8
 800c798:	0800cbbb 	.word	0x0800cbbb
 800c79c:	20008ba4 	.word	0x20008ba4
 800c7a0:	20008b9c 	.word	0x20008b9c
 800c7a4:	08018b50 	.word	0x08018b50
 800c7a8:	08018b64 	.word	0x08018b64

0800c7ac <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c7ac:	b580      	push	{r7, lr}
 800c7ae:	b082      	sub	sp, #8
 800c7b0:	af00      	add	r7, sp, #0
 800c7b2:	6078      	str	r0, [r7, #4]
 800c7b4:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800c7b6:	6839      	ldr	r1, [r7, #0]
 800c7b8:	6878      	ldr	r0, [r7, #4]
 800c7ba:	f002 ff6d 	bl	800f698 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800c7be:	6839      	ldr	r1, [r7, #0]
 800c7c0:	6878      	ldr	r0, [r7, #4]
 800c7c2:	f007 fce3 	bl	801418c <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800c7c6:	bf00      	nop
 800c7c8:	3708      	adds	r7, #8
 800c7ca:	46bd      	mov	sp, r7
 800c7cc:	bd80      	pop	{r7, pc}
	...

0800c7d0 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800c7d0:	b580      	push	{r7, lr}
 800c7d2:	b086      	sub	sp, #24
 800c7d4:	af00      	add	r7, sp, #0
 800c7d6:	60f8      	str	r0, [r7, #12]
 800c7d8:	60b9      	str	r1, [r7, #8]
 800c7da:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800c7dc:	68bb      	ldr	r3, [r7, #8]
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d106      	bne.n	800c7f0 <netif_do_set_ipaddr+0x20>
 800c7e2:	4b1d      	ldr	r3, [pc, #116]	; (800c858 <netif_do_set_ipaddr+0x88>)
 800c7e4:	f240 12cb 	movw	r2, #459	; 0x1cb
 800c7e8:	491c      	ldr	r1, [pc, #112]	; (800c85c <netif_do_set_ipaddr+0x8c>)
 800c7ea:	481d      	ldr	r0, [pc, #116]	; (800c860 <netif_do_set_ipaddr+0x90>)
 800c7ec:	f00a f828 	bl	8016840 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d106      	bne.n	800c804 <netif_do_set_ipaddr+0x34>
 800c7f6:	4b18      	ldr	r3, [pc, #96]	; (800c858 <netif_do_set_ipaddr+0x88>)
 800c7f8:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800c7fc:	4917      	ldr	r1, [pc, #92]	; (800c85c <netif_do_set_ipaddr+0x8c>)
 800c7fe:	4818      	ldr	r0, [pc, #96]	; (800c860 <netif_do_set_ipaddr+0x90>)
 800c800:	f00a f81e 	bl	8016840 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800c804:	68bb      	ldr	r3, [r7, #8]
 800c806:	681a      	ldr	r2, [r3, #0]
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	3304      	adds	r3, #4
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	429a      	cmp	r2, r3
 800c810:	d01c      	beq.n	800c84c <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800c812:	68bb      	ldr	r3, [r7, #8]
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	3304      	adds	r3, #4
 800c81c:	681a      	ldr	r2, [r3, #0]
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800c822:	f107 0314 	add.w	r3, r7, #20
 800c826:	4619      	mov	r1, r3
 800c828:	6878      	ldr	r0, [r7, #4]
 800c82a:	f7ff ffbf 	bl	800c7ac <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800c82e:	68bb      	ldr	r3, [r7, #8]
 800c830:	2b00      	cmp	r3, #0
 800c832:	d002      	beq.n	800c83a <netif_do_set_ipaddr+0x6a>
 800c834:	68bb      	ldr	r3, [r7, #8]
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	e000      	b.n	800c83c <netif_do_set_ipaddr+0x6c>
 800c83a:	2300      	movs	r3, #0
 800c83c:	68fa      	ldr	r2, [r7, #12]
 800c83e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800c840:	2101      	movs	r1, #1
 800c842:	68f8      	ldr	r0, [r7, #12]
 800c844:	f000 f8d2 	bl	800c9ec <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800c848:	2301      	movs	r3, #1
 800c84a:	e000      	b.n	800c84e <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800c84c:	2300      	movs	r3, #0
}
 800c84e:	4618      	mov	r0, r3
 800c850:	3718      	adds	r7, #24
 800c852:	46bd      	mov	sp, r7
 800c854:	bd80      	pop	{r7, pc}
 800c856:	bf00      	nop
 800c858:	08018a7c 	.word	0x08018a7c
 800c85c:	08018b94 	.word	0x08018b94
 800c860:	08018acc 	.word	0x08018acc

0800c864 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800c864:	b480      	push	{r7}
 800c866:	b085      	sub	sp, #20
 800c868:	af00      	add	r7, sp, #0
 800c86a:	60f8      	str	r0, [r7, #12]
 800c86c:	60b9      	str	r1, [r7, #8]
 800c86e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800c870:	68bb      	ldr	r3, [r7, #8]
 800c872:	681a      	ldr	r2, [r3, #0]
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	3308      	adds	r3, #8
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	429a      	cmp	r2, r3
 800c87c:	d00a      	beq.n	800c894 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800c87e:	68bb      	ldr	r3, [r7, #8]
 800c880:	2b00      	cmp	r3, #0
 800c882:	d002      	beq.n	800c88a <netif_do_set_netmask+0x26>
 800c884:	68bb      	ldr	r3, [r7, #8]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	e000      	b.n	800c88c <netif_do_set_netmask+0x28>
 800c88a:	2300      	movs	r3, #0
 800c88c:	68fa      	ldr	r2, [r7, #12]
 800c88e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800c890:	2301      	movs	r3, #1
 800c892:	e000      	b.n	800c896 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800c894:	2300      	movs	r3, #0
}
 800c896:	4618      	mov	r0, r3
 800c898:	3714      	adds	r7, #20
 800c89a:	46bd      	mov	sp, r7
 800c89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a0:	4770      	bx	lr

0800c8a2 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800c8a2:	b480      	push	{r7}
 800c8a4:	b085      	sub	sp, #20
 800c8a6:	af00      	add	r7, sp, #0
 800c8a8:	60f8      	str	r0, [r7, #12]
 800c8aa:	60b9      	str	r1, [r7, #8]
 800c8ac:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800c8ae:	68bb      	ldr	r3, [r7, #8]
 800c8b0:	681a      	ldr	r2, [r3, #0]
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	330c      	adds	r3, #12
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	429a      	cmp	r2, r3
 800c8ba:	d00a      	beq.n	800c8d2 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800c8bc:	68bb      	ldr	r3, [r7, #8]
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d002      	beq.n	800c8c8 <netif_do_set_gw+0x26>
 800c8c2:	68bb      	ldr	r3, [r7, #8]
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	e000      	b.n	800c8ca <netif_do_set_gw+0x28>
 800c8c8:	2300      	movs	r3, #0
 800c8ca:	68fa      	ldr	r2, [r7, #12]
 800c8cc:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800c8ce:	2301      	movs	r3, #1
 800c8d0:	e000      	b.n	800c8d4 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800c8d2:	2300      	movs	r3, #0
}
 800c8d4:	4618      	mov	r0, r3
 800c8d6:	3714      	adds	r7, #20
 800c8d8:	46bd      	mov	sp, r7
 800c8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8de:	4770      	bx	lr

0800c8e0 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800c8e0:	b580      	push	{r7, lr}
 800c8e2:	b088      	sub	sp, #32
 800c8e4:	af00      	add	r7, sp, #0
 800c8e6:	60f8      	str	r0, [r7, #12]
 800c8e8:	60b9      	str	r1, [r7, #8]
 800c8ea:	607a      	str	r2, [r7, #4]
 800c8ec:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800c8ee:	2300      	movs	r3, #0
 800c8f0:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800c8f2:	2300      	movs	r3, #0
 800c8f4:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800c8f6:	68bb      	ldr	r3, [r7, #8]
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d101      	bne.n	800c900 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800c8fc:	4b1c      	ldr	r3, [pc, #112]	; (800c970 <netif_set_addr+0x90>)
 800c8fe:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	2b00      	cmp	r3, #0
 800c904:	d101      	bne.n	800c90a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800c906:	4b1a      	ldr	r3, [pc, #104]	; (800c970 <netif_set_addr+0x90>)
 800c908:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800c90a:	683b      	ldr	r3, [r7, #0]
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d101      	bne.n	800c914 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800c910:	4b17      	ldr	r3, [pc, #92]	; (800c970 <netif_set_addr+0x90>)
 800c912:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800c914:	68bb      	ldr	r3, [r7, #8]
 800c916:	2b00      	cmp	r3, #0
 800c918:	d003      	beq.n	800c922 <netif_set_addr+0x42>
 800c91a:	68bb      	ldr	r3, [r7, #8]
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d101      	bne.n	800c926 <netif_set_addr+0x46>
 800c922:	2301      	movs	r3, #1
 800c924:	e000      	b.n	800c928 <netif_set_addr+0x48>
 800c926:	2300      	movs	r3, #0
 800c928:	617b      	str	r3, [r7, #20]
  if (remove) {
 800c92a:	697b      	ldr	r3, [r7, #20]
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d006      	beq.n	800c93e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800c930:	f107 0310 	add.w	r3, r7, #16
 800c934:	461a      	mov	r2, r3
 800c936:	68b9      	ldr	r1, [r7, #8]
 800c938:	68f8      	ldr	r0, [r7, #12]
 800c93a:	f7ff ff49 	bl	800c7d0 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800c93e:	69fa      	ldr	r2, [r7, #28]
 800c940:	6879      	ldr	r1, [r7, #4]
 800c942:	68f8      	ldr	r0, [r7, #12]
 800c944:	f7ff ff8e 	bl	800c864 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800c948:	69ba      	ldr	r2, [r7, #24]
 800c94a:	6839      	ldr	r1, [r7, #0]
 800c94c:	68f8      	ldr	r0, [r7, #12]
 800c94e:	f7ff ffa8 	bl	800c8a2 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800c952:	697b      	ldr	r3, [r7, #20]
 800c954:	2b00      	cmp	r3, #0
 800c956:	d106      	bne.n	800c966 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800c958:	f107 0310 	add.w	r3, r7, #16
 800c95c:	461a      	mov	r2, r3
 800c95e:	68b9      	ldr	r1, [r7, #8]
 800c960:	68f8      	ldr	r0, [r7, #12]
 800c962:	f7ff ff35 	bl	800c7d0 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800c966:	bf00      	nop
 800c968:	3720      	adds	r7, #32
 800c96a:	46bd      	mov	sp, r7
 800c96c:	bd80      	pop	{r7, pc}
 800c96e:	bf00      	nop
 800c970:	0801d0e8 	.word	0x0801d0e8

0800c974 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800c974:	b480      	push	{r7}
 800c976:	b083      	sub	sp, #12
 800c978:	af00      	add	r7, sp, #0
 800c97a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800c97c:	4a04      	ldr	r2, [pc, #16]	; (800c990 <netif_set_default+0x1c>)
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800c982:	bf00      	nop
 800c984:	370c      	adds	r7, #12
 800c986:	46bd      	mov	sp, r7
 800c988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c98c:	4770      	bx	lr
 800c98e:	bf00      	nop
 800c990:	20008ba0 	.word	0x20008ba0

0800c994 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800c994:	b580      	push	{r7, lr}
 800c996:	b082      	sub	sp, #8
 800c998:	af00      	add	r7, sp, #0
 800c99a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d107      	bne.n	800c9b2 <netif_set_up+0x1e>
 800c9a2:	4b0f      	ldr	r3, [pc, #60]	; (800c9e0 <netif_set_up+0x4c>)
 800c9a4:	f44f 7254 	mov.w	r2, #848	; 0x350
 800c9a8:	490e      	ldr	r1, [pc, #56]	; (800c9e4 <netif_set_up+0x50>)
 800c9aa:	480f      	ldr	r0, [pc, #60]	; (800c9e8 <netif_set_up+0x54>)
 800c9ac:	f009 ff48 	bl	8016840 <iprintf>
 800c9b0:	e013      	b.n	800c9da <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c9b8:	f003 0301 	and.w	r3, r3, #1
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d10c      	bne.n	800c9da <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c9c6:	f043 0301 	orr.w	r3, r3, #1
 800c9ca:	b2da      	uxtb	r2, r3
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800c9d2:	2103      	movs	r1, #3
 800c9d4:	6878      	ldr	r0, [r7, #4]
 800c9d6:	f000 f809 	bl	800c9ec <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800c9da:	3708      	adds	r7, #8
 800c9dc:	46bd      	mov	sp, r7
 800c9de:	bd80      	pop	{r7, pc}
 800c9e0:	08018a7c 	.word	0x08018a7c
 800c9e4:	08018c04 	.word	0x08018c04
 800c9e8:	08018acc 	.word	0x08018acc

0800c9ec <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800c9ec:	b580      	push	{r7, lr}
 800c9ee:	b082      	sub	sp, #8
 800c9f0:	af00      	add	r7, sp, #0
 800c9f2:	6078      	str	r0, [r7, #4]
 800c9f4:	460b      	mov	r3, r1
 800c9f6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d106      	bne.n	800ca0c <netif_issue_reports+0x20>
 800c9fe:	4b18      	ldr	r3, [pc, #96]	; (800ca60 <netif_issue_reports+0x74>)
 800ca00:	f240 326d 	movw	r2, #877	; 0x36d
 800ca04:	4917      	ldr	r1, [pc, #92]	; (800ca64 <netif_issue_reports+0x78>)
 800ca06:	4818      	ldr	r0, [pc, #96]	; (800ca68 <netif_issue_reports+0x7c>)
 800ca08:	f009 ff1a 	bl	8016840 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ca12:	f003 0304 	and.w	r3, r3, #4
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d01e      	beq.n	800ca58 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ca20:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d017      	beq.n	800ca58 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800ca28:	78fb      	ldrb	r3, [r7, #3]
 800ca2a:	f003 0301 	and.w	r3, r3, #1
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d013      	beq.n	800ca5a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	3304      	adds	r3, #4
 800ca36:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d00e      	beq.n	800ca5a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ca42:	f003 0308 	and.w	r3, r3, #8
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d007      	beq.n	800ca5a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	3304      	adds	r3, #4
 800ca4e:	4619      	mov	r1, r3
 800ca50:	6878      	ldr	r0, [r7, #4]
 800ca52:	f008 fb05 	bl	8015060 <etharp_request>
 800ca56:	e000      	b.n	800ca5a <netif_issue_reports+0x6e>
    return;
 800ca58:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800ca5a:	3708      	adds	r7, #8
 800ca5c:	46bd      	mov	sp, r7
 800ca5e:	bd80      	pop	{r7, pc}
 800ca60:	08018a7c 	.word	0x08018a7c
 800ca64:	08018c20 	.word	0x08018c20
 800ca68:	08018acc 	.word	0x08018acc

0800ca6c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800ca6c:	b580      	push	{r7, lr}
 800ca6e:	b082      	sub	sp, #8
 800ca70:	af00      	add	r7, sp, #0
 800ca72:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d107      	bne.n	800ca8a <netif_set_down+0x1e>
 800ca7a:	4b12      	ldr	r3, [pc, #72]	; (800cac4 <netif_set_down+0x58>)
 800ca7c:	f240 329b 	movw	r2, #923	; 0x39b
 800ca80:	4911      	ldr	r1, [pc, #68]	; (800cac8 <netif_set_down+0x5c>)
 800ca82:	4812      	ldr	r0, [pc, #72]	; (800cacc <netif_set_down+0x60>)
 800ca84:	f009 fedc 	bl	8016840 <iprintf>
 800ca88:	e019      	b.n	800cabe <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ca90:	f003 0301 	and.w	r3, r3, #1
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d012      	beq.n	800cabe <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ca9e:	f023 0301 	bic.w	r3, r3, #1
 800caa2:	b2da      	uxtb	r2, r3
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cab0:	f003 0308 	and.w	r3, r3, #8
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d002      	beq.n	800cabe <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800cab8:	6878      	ldr	r0, [r7, #4]
 800caba:	f007 fe8f 	bl	80147dc <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800cabe:	3708      	adds	r7, #8
 800cac0:	46bd      	mov	sp, r7
 800cac2:	bd80      	pop	{r7, pc}
 800cac4:	08018a7c 	.word	0x08018a7c
 800cac8:	08018c44 	.word	0x08018c44
 800cacc:	08018acc 	.word	0x08018acc

0800cad0 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800cad0:	b580      	push	{r7, lr}
 800cad2:	b082      	sub	sp, #8
 800cad4:	af00      	add	r7, sp, #0
 800cad6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d107      	bne.n	800caee <netif_set_link_up+0x1e>
 800cade:	4b13      	ldr	r3, [pc, #76]	; (800cb2c <netif_set_link_up+0x5c>)
 800cae0:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800cae4:	4912      	ldr	r1, [pc, #72]	; (800cb30 <netif_set_link_up+0x60>)
 800cae6:	4813      	ldr	r0, [pc, #76]	; (800cb34 <netif_set_link_up+0x64>)
 800cae8:	f009 feaa 	bl	8016840 <iprintf>
 800caec:	e01b      	b.n	800cb26 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800caf4:	f003 0304 	and.w	r3, r3, #4
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d114      	bne.n	800cb26 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cb02:	f043 0304 	orr.w	r3, r3, #4
 800cb06:	b2da      	uxtb	r2, r3
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800cb0e:	2103      	movs	r1, #3
 800cb10:	6878      	ldr	r0, [r7, #4]
 800cb12:	f7ff ff6b 	bl	800c9ec <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	69db      	ldr	r3, [r3, #28]
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d003      	beq.n	800cb26 <netif_set_link_up+0x56>
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	69db      	ldr	r3, [r3, #28]
 800cb22:	6878      	ldr	r0, [r7, #4]
 800cb24:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800cb26:	3708      	adds	r7, #8
 800cb28:	46bd      	mov	sp, r7
 800cb2a:	bd80      	pop	{r7, pc}
 800cb2c:	08018a7c 	.word	0x08018a7c
 800cb30:	08018c64 	.word	0x08018c64
 800cb34:	08018acc 	.word	0x08018acc

0800cb38 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800cb38:	b580      	push	{r7, lr}
 800cb3a:	b082      	sub	sp, #8
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d107      	bne.n	800cb56 <netif_set_link_down+0x1e>
 800cb46:	4b11      	ldr	r3, [pc, #68]	; (800cb8c <netif_set_link_down+0x54>)
 800cb48:	f240 4206 	movw	r2, #1030	; 0x406
 800cb4c:	4910      	ldr	r1, [pc, #64]	; (800cb90 <netif_set_link_down+0x58>)
 800cb4e:	4811      	ldr	r0, [pc, #68]	; (800cb94 <netif_set_link_down+0x5c>)
 800cb50:	f009 fe76 	bl	8016840 <iprintf>
 800cb54:	e017      	b.n	800cb86 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cb5c:	f003 0304 	and.w	r3, r3, #4
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d010      	beq.n	800cb86 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cb6a:	f023 0304 	bic.w	r3, r3, #4
 800cb6e:	b2da      	uxtb	r2, r3
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	69db      	ldr	r3, [r3, #28]
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d003      	beq.n	800cb86 <netif_set_link_down+0x4e>
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	69db      	ldr	r3, [r3, #28]
 800cb82:	6878      	ldr	r0, [r7, #4]
 800cb84:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800cb86:	3708      	adds	r7, #8
 800cb88:	46bd      	mov	sp, r7
 800cb8a:	bd80      	pop	{r7, pc}
 800cb8c:	08018a7c 	.word	0x08018a7c
 800cb90:	08018c88 	.word	0x08018c88
 800cb94:	08018acc 	.word	0x08018acc

0800cb98 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800cb98:	b480      	push	{r7}
 800cb9a:	b083      	sub	sp, #12
 800cb9c:	af00      	add	r7, sp, #0
 800cb9e:	6078      	str	r0, [r7, #4]
 800cba0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d002      	beq.n	800cbae <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	683a      	ldr	r2, [r7, #0]
 800cbac:	61da      	str	r2, [r3, #28]
  }
}
 800cbae:	bf00      	nop
 800cbb0:	370c      	adds	r7, #12
 800cbb2:	46bd      	mov	sp, r7
 800cbb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb8:	4770      	bx	lr

0800cbba <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800cbba:	b480      	push	{r7}
 800cbbc:	b085      	sub	sp, #20
 800cbbe:	af00      	add	r7, sp, #0
 800cbc0:	60f8      	str	r0, [r7, #12]
 800cbc2:	60b9      	str	r1, [r7, #8]
 800cbc4:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800cbc6:	f06f 030b 	mvn.w	r3, #11
}
 800cbca:	4618      	mov	r0, r3
 800cbcc:	3714      	adds	r7, #20
 800cbce:	46bd      	mov	sp, r7
 800cbd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbd4:	4770      	bx	lr
	...

0800cbd8 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800cbd8:	b480      	push	{r7}
 800cbda:	b085      	sub	sp, #20
 800cbdc:	af00      	add	r7, sp, #0
 800cbde:	4603      	mov	r3, r0
 800cbe0:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800cbe2:	79fb      	ldrb	r3, [r7, #7]
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d013      	beq.n	800cc10 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800cbe8:	4b0d      	ldr	r3, [pc, #52]	; (800cc20 <netif_get_by_index+0x48>)
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	60fb      	str	r3, [r7, #12]
 800cbee:	e00c      	b.n	800cc0a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cbf6:	3301      	adds	r3, #1
 800cbf8:	b2db      	uxtb	r3, r3
 800cbfa:	79fa      	ldrb	r2, [r7, #7]
 800cbfc:	429a      	cmp	r2, r3
 800cbfe:	d101      	bne.n	800cc04 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	e006      	b.n	800cc12 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	60fb      	str	r3, [r7, #12]
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d1ef      	bne.n	800cbf0 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800cc10:	2300      	movs	r3, #0
}
 800cc12:	4618      	mov	r0, r3
 800cc14:	3714      	adds	r7, #20
 800cc16:	46bd      	mov	sp, r7
 800cc18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc1c:	4770      	bx	lr
 800cc1e:	bf00      	nop
 800cc20:	20008b9c 	.word	0x20008b9c

0800cc24 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800cc24:	b580      	push	{r7, lr}
 800cc26:	b082      	sub	sp, #8
 800cc28:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800cc2a:	4b0c      	ldr	r3, [pc, #48]	; (800cc5c <pbuf_free_ooseq+0x38>)
 800cc2c:	2200      	movs	r2, #0
 800cc2e:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800cc30:	4b0b      	ldr	r3, [pc, #44]	; (800cc60 <pbuf_free_ooseq+0x3c>)
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	607b      	str	r3, [r7, #4]
 800cc36:	e00a      	b.n	800cc4e <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d003      	beq.n	800cc48 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800cc40:	6878      	ldr	r0, [r7, #4]
 800cc42:	f002 fd67 	bl	800f714 <tcp_free_ooseq>
      return;
 800cc46:	e005      	b.n	800cc54 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	68db      	ldr	r3, [r3, #12]
 800cc4c:	607b      	str	r3, [r7, #4]
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d1f1      	bne.n	800cc38 <pbuf_free_ooseq+0x14>
    }
  }
}
 800cc54:	3708      	adds	r7, #8
 800cc56:	46bd      	mov	sp, r7
 800cc58:	bd80      	pop	{r7, pc}
 800cc5a:	bf00      	nop
 800cc5c:	20008ba5 	.word	0x20008ba5
 800cc60:	20008bb4 	.word	0x20008bb4

0800cc64 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800cc64:	b480      	push	{r7}
 800cc66:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800cc68:	4b03      	ldr	r3, [pc, #12]	; (800cc78 <pbuf_pool_is_empty+0x14>)
 800cc6a:	2201      	movs	r2, #1
 800cc6c:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800cc6e:	bf00      	nop
 800cc70:	46bd      	mov	sp, r7
 800cc72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc76:	4770      	bx	lr
 800cc78:	20008ba5 	.word	0x20008ba5

0800cc7c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800cc7c:	b480      	push	{r7}
 800cc7e:	b085      	sub	sp, #20
 800cc80:	af00      	add	r7, sp, #0
 800cc82:	60f8      	str	r0, [r7, #12]
 800cc84:	60b9      	str	r1, [r7, #8]
 800cc86:	4611      	mov	r1, r2
 800cc88:	461a      	mov	r2, r3
 800cc8a:	460b      	mov	r3, r1
 800cc8c:	80fb      	strh	r3, [r7, #6]
 800cc8e:	4613      	mov	r3, r2
 800cc90:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	2200      	movs	r2, #0
 800cc96:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	68ba      	ldr	r2, [r7, #8]
 800cc9c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	88fa      	ldrh	r2, [r7, #6]
 800cca2:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	88ba      	ldrh	r2, [r7, #4]
 800cca8:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800ccaa:	8b3b      	ldrh	r3, [r7, #24]
 800ccac:	b2da      	uxtb	r2, r3
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	7f3a      	ldrb	r2, [r7, #28]
 800ccb6:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	2201      	movs	r2, #1
 800ccbc:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	2200      	movs	r2, #0
 800ccc2:	73da      	strb	r2, [r3, #15]
}
 800ccc4:	bf00      	nop
 800ccc6:	3714      	adds	r7, #20
 800ccc8:	46bd      	mov	sp, r7
 800ccca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccce:	4770      	bx	lr

0800ccd0 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800ccd0:	b580      	push	{r7, lr}
 800ccd2:	b08c      	sub	sp, #48	; 0x30
 800ccd4:	af02      	add	r7, sp, #8
 800ccd6:	4603      	mov	r3, r0
 800ccd8:	71fb      	strb	r3, [r7, #7]
 800ccda:	460b      	mov	r3, r1
 800ccdc:	80bb      	strh	r3, [r7, #4]
 800ccde:	4613      	mov	r3, r2
 800cce0:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800cce2:	79fb      	ldrb	r3, [r7, #7]
 800cce4:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800cce6:	887b      	ldrh	r3, [r7, #2]
 800cce8:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800ccec:	d07f      	beq.n	800cdee <pbuf_alloc+0x11e>
 800ccee:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800ccf2:	f300 80c8 	bgt.w	800ce86 <pbuf_alloc+0x1b6>
 800ccf6:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800ccfa:	d010      	beq.n	800cd1e <pbuf_alloc+0x4e>
 800ccfc:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800cd00:	f300 80c1 	bgt.w	800ce86 <pbuf_alloc+0x1b6>
 800cd04:	2b01      	cmp	r3, #1
 800cd06:	d002      	beq.n	800cd0e <pbuf_alloc+0x3e>
 800cd08:	2b41      	cmp	r3, #65	; 0x41
 800cd0a:	f040 80bc 	bne.w	800ce86 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800cd0e:	887a      	ldrh	r2, [r7, #2]
 800cd10:	88bb      	ldrh	r3, [r7, #4]
 800cd12:	4619      	mov	r1, r3
 800cd14:	2000      	movs	r0, #0
 800cd16:	f000 f8d1 	bl	800cebc <pbuf_alloc_reference>
 800cd1a:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800cd1c:	e0bd      	b.n	800ce9a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800cd1e:	2300      	movs	r3, #0
 800cd20:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800cd22:	2300      	movs	r3, #0
 800cd24:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800cd26:	88bb      	ldrh	r3, [r7, #4]
 800cd28:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800cd2a:	2008      	movs	r0, #8
 800cd2c:	f7ff fbce 	bl	800c4cc <memp_malloc>
 800cd30:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800cd32:	693b      	ldr	r3, [r7, #16]
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d109      	bne.n	800cd4c <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800cd38:	f7ff ff94 	bl	800cc64 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800cd3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d002      	beq.n	800cd48 <pbuf_alloc+0x78>
            pbuf_free(p);
 800cd42:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cd44:	f000 faa8 	bl	800d298 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800cd48:	2300      	movs	r3, #0
 800cd4a:	e0a7      	b.n	800ce9c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800cd4c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cd4e:	3303      	adds	r3, #3
 800cd50:	b29b      	uxth	r3, r3
 800cd52:	f023 0303 	bic.w	r3, r3, #3
 800cd56:	b29b      	uxth	r3, r3
 800cd58:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800cd5c:	b29b      	uxth	r3, r3
 800cd5e:	8b7a      	ldrh	r2, [r7, #26]
 800cd60:	4293      	cmp	r3, r2
 800cd62:	bf28      	it	cs
 800cd64:	4613      	movcs	r3, r2
 800cd66:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800cd68:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cd6a:	3310      	adds	r3, #16
 800cd6c:	693a      	ldr	r2, [r7, #16]
 800cd6e:	4413      	add	r3, r2
 800cd70:	3303      	adds	r3, #3
 800cd72:	f023 0303 	bic.w	r3, r3, #3
 800cd76:	4618      	mov	r0, r3
 800cd78:	89f9      	ldrh	r1, [r7, #14]
 800cd7a:	8b7a      	ldrh	r2, [r7, #26]
 800cd7c:	2300      	movs	r3, #0
 800cd7e:	9301      	str	r3, [sp, #4]
 800cd80:	887b      	ldrh	r3, [r7, #2]
 800cd82:	9300      	str	r3, [sp, #0]
 800cd84:	460b      	mov	r3, r1
 800cd86:	4601      	mov	r1, r0
 800cd88:	6938      	ldr	r0, [r7, #16]
 800cd8a:	f7ff ff77 	bl	800cc7c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800cd8e:	693b      	ldr	r3, [r7, #16]
 800cd90:	685b      	ldr	r3, [r3, #4]
 800cd92:	f003 0303 	and.w	r3, r3, #3
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d006      	beq.n	800cda8 <pbuf_alloc+0xd8>
 800cd9a:	4b42      	ldr	r3, [pc, #264]	; (800cea4 <pbuf_alloc+0x1d4>)
 800cd9c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cda0:	4941      	ldr	r1, [pc, #260]	; (800cea8 <pbuf_alloc+0x1d8>)
 800cda2:	4842      	ldr	r0, [pc, #264]	; (800ceac <pbuf_alloc+0x1dc>)
 800cda4:	f009 fd4c 	bl	8016840 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800cda8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cdaa:	3303      	adds	r3, #3
 800cdac:	f023 0303 	bic.w	r3, r3, #3
 800cdb0:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800cdb4:	d106      	bne.n	800cdc4 <pbuf_alloc+0xf4>
 800cdb6:	4b3b      	ldr	r3, [pc, #236]	; (800cea4 <pbuf_alloc+0x1d4>)
 800cdb8:	f44f 7281 	mov.w	r2, #258	; 0x102
 800cdbc:	493c      	ldr	r1, [pc, #240]	; (800ceb0 <pbuf_alloc+0x1e0>)
 800cdbe:	483b      	ldr	r0, [pc, #236]	; (800ceac <pbuf_alloc+0x1dc>)
 800cdc0:	f009 fd3e 	bl	8016840 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800cdc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d102      	bne.n	800cdd0 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800cdca:	693b      	ldr	r3, [r7, #16]
 800cdcc:	627b      	str	r3, [r7, #36]	; 0x24
 800cdce:	e002      	b.n	800cdd6 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800cdd0:	69fb      	ldr	r3, [r7, #28]
 800cdd2:	693a      	ldr	r2, [r7, #16]
 800cdd4:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800cdd6:	693b      	ldr	r3, [r7, #16]
 800cdd8:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800cdda:	8b7a      	ldrh	r2, [r7, #26]
 800cddc:	89fb      	ldrh	r3, [r7, #14]
 800cdde:	1ad3      	subs	r3, r2, r3
 800cde0:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800cde2:	2300      	movs	r3, #0
 800cde4:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800cde6:	8b7b      	ldrh	r3, [r7, #26]
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d19e      	bne.n	800cd2a <pbuf_alloc+0x5a>
      break;
 800cdec:	e055      	b.n	800ce9a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800cdee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cdf0:	3303      	adds	r3, #3
 800cdf2:	b29b      	uxth	r3, r3
 800cdf4:	f023 0303 	bic.w	r3, r3, #3
 800cdf8:	b29a      	uxth	r2, r3
 800cdfa:	88bb      	ldrh	r3, [r7, #4]
 800cdfc:	3303      	adds	r3, #3
 800cdfe:	b29b      	uxth	r3, r3
 800ce00:	f023 0303 	bic.w	r3, r3, #3
 800ce04:	b29b      	uxth	r3, r3
 800ce06:	4413      	add	r3, r2
 800ce08:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800ce0a:	8b3b      	ldrh	r3, [r7, #24]
 800ce0c:	3310      	adds	r3, #16
 800ce0e:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800ce10:	8b3a      	ldrh	r2, [r7, #24]
 800ce12:	88bb      	ldrh	r3, [r7, #4]
 800ce14:	3303      	adds	r3, #3
 800ce16:	f023 0303 	bic.w	r3, r3, #3
 800ce1a:	429a      	cmp	r2, r3
 800ce1c:	d306      	bcc.n	800ce2c <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800ce1e:	8afa      	ldrh	r2, [r7, #22]
 800ce20:	88bb      	ldrh	r3, [r7, #4]
 800ce22:	3303      	adds	r3, #3
 800ce24:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800ce28:	429a      	cmp	r2, r3
 800ce2a:	d201      	bcs.n	800ce30 <pbuf_alloc+0x160>
        return NULL;
 800ce2c:	2300      	movs	r3, #0
 800ce2e:	e035      	b.n	800ce9c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800ce30:	8afb      	ldrh	r3, [r7, #22]
 800ce32:	4618      	mov	r0, r3
 800ce34:	f7ff f992 	bl	800c15c <mem_malloc>
 800ce38:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800ce3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d101      	bne.n	800ce44 <pbuf_alloc+0x174>
        return NULL;
 800ce40:	2300      	movs	r3, #0
 800ce42:	e02b      	b.n	800ce9c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800ce44:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ce46:	3310      	adds	r3, #16
 800ce48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ce4a:	4413      	add	r3, r2
 800ce4c:	3303      	adds	r3, #3
 800ce4e:	f023 0303 	bic.w	r3, r3, #3
 800ce52:	4618      	mov	r0, r3
 800ce54:	88b9      	ldrh	r1, [r7, #4]
 800ce56:	88ba      	ldrh	r2, [r7, #4]
 800ce58:	2300      	movs	r3, #0
 800ce5a:	9301      	str	r3, [sp, #4]
 800ce5c:	887b      	ldrh	r3, [r7, #2]
 800ce5e:	9300      	str	r3, [sp, #0]
 800ce60:	460b      	mov	r3, r1
 800ce62:	4601      	mov	r1, r0
 800ce64:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ce66:	f7ff ff09 	bl	800cc7c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800ce6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce6c:	685b      	ldr	r3, [r3, #4]
 800ce6e:	f003 0303 	and.w	r3, r3, #3
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d010      	beq.n	800ce98 <pbuf_alloc+0x1c8>
 800ce76:	4b0b      	ldr	r3, [pc, #44]	; (800cea4 <pbuf_alloc+0x1d4>)
 800ce78:	f44f 7291 	mov.w	r2, #290	; 0x122
 800ce7c:	490d      	ldr	r1, [pc, #52]	; (800ceb4 <pbuf_alloc+0x1e4>)
 800ce7e:	480b      	ldr	r0, [pc, #44]	; (800ceac <pbuf_alloc+0x1dc>)
 800ce80:	f009 fcde 	bl	8016840 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800ce84:	e008      	b.n	800ce98 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800ce86:	4b07      	ldr	r3, [pc, #28]	; (800cea4 <pbuf_alloc+0x1d4>)
 800ce88:	f240 1227 	movw	r2, #295	; 0x127
 800ce8c:	490a      	ldr	r1, [pc, #40]	; (800ceb8 <pbuf_alloc+0x1e8>)
 800ce8e:	4807      	ldr	r0, [pc, #28]	; (800ceac <pbuf_alloc+0x1dc>)
 800ce90:	f009 fcd6 	bl	8016840 <iprintf>
      return NULL;
 800ce94:	2300      	movs	r3, #0
 800ce96:	e001      	b.n	800ce9c <pbuf_alloc+0x1cc>
      break;
 800ce98:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800ce9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ce9c:	4618      	mov	r0, r3
 800ce9e:	3728      	adds	r7, #40	; 0x28
 800cea0:	46bd      	mov	sp, r7
 800cea2:	bd80      	pop	{r7, pc}
 800cea4:	08018cac 	.word	0x08018cac
 800cea8:	08018cdc 	.word	0x08018cdc
 800ceac:	08018d0c 	.word	0x08018d0c
 800ceb0:	08018d34 	.word	0x08018d34
 800ceb4:	08018d68 	.word	0x08018d68
 800ceb8:	08018d94 	.word	0x08018d94

0800cebc <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800cebc:	b580      	push	{r7, lr}
 800cebe:	b086      	sub	sp, #24
 800cec0:	af02      	add	r7, sp, #8
 800cec2:	6078      	str	r0, [r7, #4]
 800cec4:	460b      	mov	r3, r1
 800cec6:	807b      	strh	r3, [r7, #2]
 800cec8:	4613      	mov	r3, r2
 800ceca:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800cecc:	883b      	ldrh	r3, [r7, #0]
 800cece:	2b41      	cmp	r3, #65	; 0x41
 800ced0:	d009      	beq.n	800cee6 <pbuf_alloc_reference+0x2a>
 800ced2:	883b      	ldrh	r3, [r7, #0]
 800ced4:	2b01      	cmp	r3, #1
 800ced6:	d006      	beq.n	800cee6 <pbuf_alloc_reference+0x2a>
 800ced8:	4b0f      	ldr	r3, [pc, #60]	; (800cf18 <pbuf_alloc_reference+0x5c>)
 800ceda:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800cede:	490f      	ldr	r1, [pc, #60]	; (800cf1c <pbuf_alloc_reference+0x60>)
 800cee0:	480f      	ldr	r0, [pc, #60]	; (800cf20 <pbuf_alloc_reference+0x64>)
 800cee2:	f009 fcad 	bl	8016840 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800cee6:	2007      	movs	r0, #7
 800cee8:	f7ff faf0 	bl	800c4cc <memp_malloc>
 800ceec:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d101      	bne.n	800cef8 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800cef4:	2300      	movs	r3, #0
 800cef6:	e00b      	b.n	800cf10 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800cef8:	8879      	ldrh	r1, [r7, #2]
 800cefa:	887a      	ldrh	r2, [r7, #2]
 800cefc:	2300      	movs	r3, #0
 800cefe:	9301      	str	r3, [sp, #4]
 800cf00:	883b      	ldrh	r3, [r7, #0]
 800cf02:	9300      	str	r3, [sp, #0]
 800cf04:	460b      	mov	r3, r1
 800cf06:	6879      	ldr	r1, [r7, #4]
 800cf08:	68f8      	ldr	r0, [r7, #12]
 800cf0a:	f7ff feb7 	bl	800cc7c <pbuf_init_alloced_pbuf>
  return p;
 800cf0e:	68fb      	ldr	r3, [r7, #12]
}
 800cf10:	4618      	mov	r0, r3
 800cf12:	3710      	adds	r7, #16
 800cf14:	46bd      	mov	sp, r7
 800cf16:	bd80      	pop	{r7, pc}
 800cf18:	08018cac 	.word	0x08018cac
 800cf1c:	08018db0 	.word	0x08018db0
 800cf20:	08018d0c 	.word	0x08018d0c

0800cf24 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800cf24:	b580      	push	{r7, lr}
 800cf26:	b088      	sub	sp, #32
 800cf28:	af02      	add	r7, sp, #8
 800cf2a:	607b      	str	r3, [r7, #4]
 800cf2c:	4603      	mov	r3, r0
 800cf2e:	73fb      	strb	r3, [r7, #15]
 800cf30:	460b      	mov	r3, r1
 800cf32:	81bb      	strh	r3, [r7, #12]
 800cf34:	4613      	mov	r3, r2
 800cf36:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800cf38:	7bfb      	ldrb	r3, [r7, #15]
 800cf3a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800cf3c:	8a7b      	ldrh	r3, [r7, #18]
 800cf3e:	3303      	adds	r3, #3
 800cf40:	f023 0203 	bic.w	r2, r3, #3
 800cf44:	89bb      	ldrh	r3, [r7, #12]
 800cf46:	441a      	add	r2, r3
 800cf48:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cf4a:	429a      	cmp	r2, r3
 800cf4c:	d901      	bls.n	800cf52 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800cf4e:	2300      	movs	r3, #0
 800cf50:	e018      	b.n	800cf84 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800cf52:	6a3b      	ldr	r3, [r7, #32]
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d007      	beq.n	800cf68 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800cf58:	8a7b      	ldrh	r3, [r7, #18]
 800cf5a:	3303      	adds	r3, #3
 800cf5c:	f023 0303 	bic.w	r3, r3, #3
 800cf60:	6a3a      	ldr	r2, [r7, #32]
 800cf62:	4413      	add	r3, r2
 800cf64:	617b      	str	r3, [r7, #20]
 800cf66:	e001      	b.n	800cf6c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800cf68:	2300      	movs	r3, #0
 800cf6a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800cf6c:	6878      	ldr	r0, [r7, #4]
 800cf6e:	89b9      	ldrh	r1, [r7, #12]
 800cf70:	89ba      	ldrh	r2, [r7, #12]
 800cf72:	2302      	movs	r3, #2
 800cf74:	9301      	str	r3, [sp, #4]
 800cf76:	897b      	ldrh	r3, [r7, #10]
 800cf78:	9300      	str	r3, [sp, #0]
 800cf7a:	460b      	mov	r3, r1
 800cf7c:	6979      	ldr	r1, [r7, #20]
 800cf7e:	f7ff fe7d 	bl	800cc7c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800cf82:	687b      	ldr	r3, [r7, #4]
}
 800cf84:	4618      	mov	r0, r3
 800cf86:	3718      	adds	r7, #24
 800cf88:	46bd      	mov	sp, r7
 800cf8a:	bd80      	pop	{r7, pc}

0800cf8c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800cf8c:	b580      	push	{r7, lr}
 800cf8e:	b084      	sub	sp, #16
 800cf90:	af00      	add	r7, sp, #0
 800cf92:	6078      	str	r0, [r7, #4]
 800cf94:	460b      	mov	r3, r1
 800cf96:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d106      	bne.n	800cfac <pbuf_realloc+0x20>
 800cf9e:	4b3a      	ldr	r3, [pc, #232]	; (800d088 <pbuf_realloc+0xfc>)
 800cfa0:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800cfa4:	4939      	ldr	r1, [pc, #228]	; (800d08c <pbuf_realloc+0x100>)
 800cfa6:	483a      	ldr	r0, [pc, #232]	; (800d090 <pbuf_realloc+0x104>)
 800cfa8:	f009 fc4a 	bl	8016840 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	891b      	ldrh	r3, [r3, #8]
 800cfb0:	887a      	ldrh	r2, [r7, #2]
 800cfb2:	429a      	cmp	r2, r3
 800cfb4:	d263      	bcs.n	800d07e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	891a      	ldrh	r2, [r3, #8]
 800cfba:	887b      	ldrh	r3, [r7, #2]
 800cfbc:	1ad3      	subs	r3, r2, r3
 800cfbe:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800cfc0:	887b      	ldrh	r3, [r7, #2]
 800cfc2:	817b      	strh	r3, [r7, #10]
  q = p;
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800cfc8:	e018      	b.n	800cffc <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	895b      	ldrh	r3, [r3, #10]
 800cfce:	897a      	ldrh	r2, [r7, #10]
 800cfd0:	1ad3      	subs	r3, r2, r3
 800cfd2:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	891a      	ldrh	r2, [r3, #8]
 800cfd8:	893b      	ldrh	r3, [r7, #8]
 800cfda:	1ad3      	subs	r3, r2, r3
 800cfdc:	b29a      	uxth	r2, r3
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d106      	bne.n	800cffc <pbuf_realloc+0x70>
 800cfee:	4b26      	ldr	r3, [pc, #152]	; (800d088 <pbuf_realloc+0xfc>)
 800cff0:	f240 12af 	movw	r2, #431	; 0x1af
 800cff4:	4927      	ldr	r1, [pc, #156]	; (800d094 <pbuf_realloc+0x108>)
 800cff6:	4826      	ldr	r0, [pc, #152]	; (800d090 <pbuf_realloc+0x104>)
 800cff8:	f009 fc22 	bl	8016840 <iprintf>
  while (rem_len > q->len) {
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	895b      	ldrh	r3, [r3, #10]
 800d000:	897a      	ldrh	r2, [r7, #10]
 800d002:	429a      	cmp	r2, r3
 800d004:	d8e1      	bhi.n	800cfca <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	7b1b      	ldrb	r3, [r3, #12]
 800d00a:	f003 030f 	and.w	r3, r3, #15
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d121      	bne.n	800d056 <pbuf_realloc+0xca>
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	895b      	ldrh	r3, [r3, #10]
 800d016:	897a      	ldrh	r2, [r7, #10]
 800d018:	429a      	cmp	r2, r3
 800d01a:	d01c      	beq.n	800d056 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	7b5b      	ldrb	r3, [r3, #13]
 800d020:	f003 0302 	and.w	r3, r3, #2
 800d024:	2b00      	cmp	r3, #0
 800d026:	d116      	bne.n	800d056 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	685a      	ldr	r2, [r3, #4]
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	1ad3      	subs	r3, r2, r3
 800d030:	b29a      	uxth	r2, r3
 800d032:	897b      	ldrh	r3, [r7, #10]
 800d034:	4413      	add	r3, r2
 800d036:	b29b      	uxth	r3, r3
 800d038:	4619      	mov	r1, r3
 800d03a:	68f8      	ldr	r0, [r7, #12]
 800d03c:	f7fe ff92 	bl	800bf64 <mem_trim>
 800d040:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	2b00      	cmp	r3, #0
 800d046:	d106      	bne.n	800d056 <pbuf_realloc+0xca>
 800d048:	4b0f      	ldr	r3, [pc, #60]	; (800d088 <pbuf_realloc+0xfc>)
 800d04a:	f240 12bd 	movw	r2, #445	; 0x1bd
 800d04e:	4912      	ldr	r1, [pc, #72]	; (800d098 <pbuf_realloc+0x10c>)
 800d050:	480f      	ldr	r0, [pc, #60]	; (800d090 <pbuf_realloc+0x104>)
 800d052:	f009 fbf5 	bl	8016840 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	897a      	ldrh	r2, [r7, #10]
 800d05a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	895a      	ldrh	r2, [r3, #10]
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d004      	beq.n	800d076 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	4618      	mov	r0, r3
 800d072:	f000 f911 	bl	800d298 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	2200      	movs	r2, #0
 800d07a:	601a      	str	r2, [r3, #0]
 800d07c:	e000      	b.n	800d080 <pbuf_realloc+0xf4>
    return;
 800d07e:	bf00      	nop

}
 800d080:	3710      	adds	r7, #16
 800d082:	46bd      	mov	sp, r7
 800d084:	bd80      	pop	{r7, pc}
 800d086:	bf00      	nop
 800d088:	08018cac 	.word	0x08018cac
 800d08c:	08018dc4 	.word	0x08018dc4
 800d090:	08018d0c 	.word	0x08018d0c
 800d094:	08018ddc 	.word	0x08018ddc
 800d098:	08018df4 	.word	0x08018df4

0800d09c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800d09c:	b580      	push	{r7, lr}
 800d09e:	b086      	sub	sp, #24
 800d0a0:	af00      	add	r7, sp, #0
 800d0a2:	60f8      	str	r0, [r7, #12]
 800d0a4:	60b9      	str	r1, [r7, #8]
 800d0a6:	4613      	mov	r3, r2
 800d0a8:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d106      	bne.n	800d0be <pbuf_add_header_impl+0x22>
 800d0b0:	4b2b      	ldr	r3, [pc, #172]	; (800d160 <pbuf_add_header_impl+0xc4>)
 800d0b2:	f240 12df 	movw	r2, #479	; 0x1df
 800d0b6:	492b      	ldr	r1, [pc, #172]	; (800d164 <pbuf_add_header_impl+0xc8>)
 800d0b8:	482b      	ldr	r0, [pc, #172]	; (800d168 <pbuf_add_header_impl+0xcc>)
 800d0ba:	f009 fbc1 	bl	8016840 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d003      	beq.n	800d0cc <pbuf_add_header_impl+0x30>
 800d0c4:	68bb      	ldr	r3, [r7, #8]
 800d0c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d0ca:	d301      	bcc.n	800d0d0 <pbuf_add_header_impl+0x34>
    return 1;
 800d0cc:	2301      	movs	r3, #1
 800d0ce:	e043      	b.n	800d158 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800d0d0:	68bb      	ldr	r3, [r7, #8]
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d101      	bne.n	800d0da <pbuf_add_header_impl+0x3e>
    return 0;
 800d0d6:	2300      	movs	r3, #0
 800d0d8:	e03e      	b.n	800d158 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800d0da:	68bb      	ldr	r3, [r7, #8]
 800d0dc:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	891a      	ldrh	r2, [r3, #8]
 800d0e2:	8a7b      	ldrh	r3, [r7, #18]
 800d0e4:	4413      	add	r3, r2
 800d0e6:	b29b      	uxth	r3, r3
 800d0e8:	8a7a      	ldrh	r2, [r7, #18]
 800d0ea:	429a      	cmp	r2, r3
 800d0ec:	d901      	bls.n	800d0f2 <pbuf_add_header_impl+0x56>
    return 1;
 800d0ee:	2301      	movs	r3, #1
 800d0f0:	e032      	b.n	800d158 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	7b1b      	ldrb	r3, [r3, #12]
 800d0f6:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800d0f8:	8a3b      	ldrh	r3, [r7, #16]
 800d0fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d00c      	beq.n	800d11c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	685a      	ldr	r2, [r3, #4]
 800d106:	68bb      	ldr	r3, [r7, #8]
 800d108:	425b      	negs	r3, r3
 800d10a:	4413      	add	r3, r2
 800d10c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	3310      	adds	r3, #16
 800d112:	697a      	ldr	r2, [r7, #20]
 800d114:	429a      	cmp	r2, r3
 800d116:	d20d      	bcs.n	800d134 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800d118:	2301      	movs	r3, #1
 800d11a:	e01d      	b.n	800d158 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800d11c:	79fb      	ldrb	r3, [r7, #7]
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d006      	beq.n	800d130 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	685a      	ldr	r2, [r3, #4]
 800d126:	68bb      	ldr	r3, [r7, #8]
 800d128:	425b      	negs	r3, r3
 800d12a:	4413      	add	r3, r2
 800d12c:	617b      	str	r3, [r7, #20]
 800d12e:	e001      	b.n	800d134 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800d130:	2301      	movs	r3, #1
 800d132:	e011      	b.n	800d158 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	697a      	ldr	r2, [r7, #20]
 800d138:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	895a      	ldrh	r2, [r3, #10]
 800d13e:	8a7b      	ldrh	r3, [r7, #18]
 800d140:	4413      	add	r3, r2
 800d142:	b29a      	uxth	r2, r3
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	891a      	ldrh	r2, [r3, #8]
 800d14c:	8a7b      	ldrh	r3, [r7, #18]
 800d14e:	4413      	add	r3, r2
 800d150:	b29a      	uxth	r2, r3
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	811a      	strh	r2, [r3, #8]


  return 0;
 800d156:	2300      	movs	r3, #0
}
 800d158:	4618      	mov	r0, r3
 800d15a:	3718      	adds	r7, #24
 800d15c:	46bd      	mov	sp, r7
 800d15e:	bd80      	pop	{r7, pc}
 800d160:	08018cac 	.word	0x08018cac
 800d164:	08018e10 	.word	0x08018e10
 800d168:	08018d0c 	.word	0x08018d0c

0800d16c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800d16c:	b580      	push	{r7, lr}
 800d16e:	b082      	sub	sp, #8
 800d170:	af00      	add	r7, sp, #0
 800d172:	6078      	str	r0, [r7, #4]
 800d174:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800d176:	2200      	movs	r2, #0
 800d178:	6839      	ldr	r1, [r7, #0]
 800d17a:	6878      	ldr	r0, [r7, #4]
 800d17c:	f7ff ff8e 	bl	800d09c <pbuf_add_header_impl>
 800d180:	4603      	mov	r3, r0
}
 800d182:	4618      	mov	r0, r3
 800d184:	3708      	adds	r7, #8
 800d186:	46bd      	mov	sp, r7
 800d188:	bd80      	pop	{r7, pc}
	...

0800d18c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800d18c:	b580      	push	{r7, lr}
 800d18e:	b084      	sub	sp, #16
 800d190:	af00      	add	r7, sp, #0
 800d192:	6078      	str	r0, [r7, #4]
 800d194:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d106      	bne.n	800d1aa <pbuf_remove_header+0x1e>
 800d19c:	4b20      	ldr	r3, [pc, #128]	; (800d220 <pbuf_remove_header+0x94>)
 800d19e:	f240 224b 	movw	r2, #587	; 0x24b
 800d1a2:	4920      	ldr	r1, [pc, #128]	; (800d224 <pbuf_remove_header+0x98>)
 800d1a4:	4820      	ldr	r0, [pc, #128]	; (800d228 <pbuf_remove_header+0x9c>)
 800d1a6:	f009 fb4b 	bl	8016840 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d003      	beq.n	800d1b8 <pbuf_remove_header+0x2c>
 800d1b0:	683b      	ldr	r3, [r7, #0]
 800d1b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d1b6:	d301      	bcc.n	800d1bc <pbuf_remove_header+0x30>
    return 1;
 800d1b8:	2301      	movs	r3, #1
 800d1ba:	e02c      	b.n	800d216 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800d1bc:	683b      	ldr	r3, [r7, #0]
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d101      	bne.n	800d1c6 <pbuf_remove_header+0x3a>
    return 0;
 800d1c2:	2300      	movs	r3, #0
 800d1c4:	e027      	b.n	800d216 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800d1c6:	683b      	ldr	r3, [r7, #0]
 800d1c8:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	895b      	ldrh	r3, [r3, #10]
 800d1ce:	89fa      	ldrh	r2, [r7, #14]
 800d1d0:	429a      	cmp	r2, r3
 800d1d2:	d908      	bls.n	800d1e6 <pbuf_remove_header+0x5a>
 800d1d4:	4b12      	ldr	r3, [pc, #72]	; (800d220 <pbuf_remove_header+0x94>)
 800d1d6:	f240 2255 	movw	r2, #597	; 0x255
 800d1da:	4914      	ldr	r1, [pc, #80]	; (800d22c <pbuf_remove_header+0xa0>)
 800d1dc:	4812      	ldr	r0, [pc, #72]	; (800d228 <pbuf_remove_header+0x9c>)
 800d1de:	f009 fb2f 	bl	8016840 <iprintf>
 800d1e2:	2301      	movs	r3, #1
 800d1e4:	e017      	b.n	800d216 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	685b      	ldr	r3, [r3, #4]
 800d1ea:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	685a      	ldr	r2, [r3, #4]
 800d1f0:	683b      	ldr	r3, [r7, #0]
 800d1f2:	441a      	add	r2, r3
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	895a      	ldrh	r2, [r3, #10]
 800d1fc:	89fb      	ldrh	r3, [r7, #14]
 800d1fe:	1ad3      	subs	r3, r2, r3
 800d200:	b29a      	uxth	r2, r3
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	891a      	ldrh	r2, [r3, #8]
 800d20a:	89fb      	ldrh	r3, [r7, #14]
 800d20c:	1ad3      	subs	r3, r2, r3
 800d20e:	b29a      	uxth	r2, r3
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800d214:	2300      	movs	r3, #0
}
 800d216:	4618      	mov	r0, r3
 800d218:	3710      	adds	r7, #16
 800d21a:	46bd      	mov	sp, r7
 800d21c:	bd80      	pop	{r7, pc}
 800d21e:	bf00      	nop
 800d220:	08018cac 	.word	0x08018cac
 800d224:	08018e10 	.word	0x08018e10
 800d228:	08018d0c 	.word	0x08018d0c
 800d22c:	08018e1c 	.word	0x08018e1c

0800d230 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800d230:	b580      	push	{r7, lr}
 800d232:	b082      	sub	sp, #8
 800d234:	af00      	add	r7, sp, #0
 800d236:	6078      	str	r0, [r7, #4]
 800d238:	460b      	mov	r3, r1
 800d23a:	807b      	strh	r3, [r7, #2]
 800d23c:	4613      	mov	r3, r2
 800d23e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800d240:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d244:	2b00      	cmp	r3, #0
 800d246:	da08      	bge.n	800d25a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800d248:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d24c:	425b      	negs	r3, r3
 800d24e:	4619      	mov	r1, r3
 800d250:	6878      	ldr	r0, [r7, #4]
 800d252:	f7ff ff9b 	bl	800d18c <pbuf_remove_header>
 800d256:	4603      	mov	r3, r0
 800d258:	e007      	b.n	800d26a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800d25a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d25e:	787a      	ldrb	r2, [r7, #1]
 800d260:	4619      	mov	r1, r3
 800d262:	6878      	ldr	r0, [r7, #4]
 800d264:	f7ff ff1a 	bl	800d09c <pbuf_add_header_impl>
 800d268:	4603      	mov	r3, r0
  }
}
 800d26a:	4618      	mov	r0, r3
 800d26c:	3708      	adds	r7, #8
 800d26e:	46bd      	mov	sp, r7
 800d270:	bd80      	pop	{r7, pc}

0800d272 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800d272:	b580      	push	{r7, lr}
 800d274:	b082      	sub	sp, #8
 800d276:	af00      	add	r7, sp, #0
 800d278:	6078      	str	r0, [r7, #4]
 800d27a:	460b      	mov	r3, r1
 800d27c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800d27e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d282:	2201      	movs	r2, #1
 800d284:	4619      	mov	r1, r3
 800d286:	6878      	ldr	r0, [r7, #4]
 800d288:	f7ff ffd2 	bl	800d230 <pbuf_header_impl>
 800d28c:	4603      	mov	r3, r0
}
 800d28e:	4618      	mov	r0, r3
 800d290:	3708      	adds	r7, #8
 800d292:	46bd      	mov	sp, r7
 800d294:	bd80      	pop	{r7, pc}
	...

0800d298 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800d298:	b580      	push	{r7, lr}
 800d29a:	b086      	sub	sp, #24
 800d29c:	af00      	add	r7, sp, #0
 800d29e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d10b      	bne.n	800d2be <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d106      	bne.n	800d2ba <pbuf_free+0x22>
 800d2ac:	4b38      	ldr	r3, [pc, #224]	; (800d390 <pbuf_free+0xf8>)
 800d2ae:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800d2b2:	4938      	ldr	r1, [pc, #224]	; (800d394 <pbuf_free+0xfc>)
 800d2b4:	4838      	ldr	r0, [pc, #224]	; (800d398 <pbuf_free+0x100>)
 800d2b6:	f009 fac3 	bl	8016840 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800d2ba:	2300      	movs	r3, #0
 800d2bc:	e063      	b.n	800d386 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800d2be:	2300      	movs	r3, #0
 800d2c0:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800d2c2:	e05c      	b.n	800d37e <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	7b9b      	ldrb	r3, [r3, #14]
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d106      	bne.n	800d2da <pbuf_free+0x42>
 800d2cc:	4b30      	ldr	r3, [pc, #192]	; (800d390 <pbuf_free+0xf8>)
 800d2ce:	f240 22f1 	movw	r2, #753	; 0x2f1
 800d2d2:	4932      	ldr	r1, [pc, #200]	; (800d39c <pbuf_free+0x104>)
 800d2d4:	4830      	ldr	r0, [pc, #192]	; (800d398 <pbuf_free+0x100>)
 800d2d6:	f009 fab3 	bl	8016840 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	7b9b      	ldrb	r3, [r3, #14]
 800d2de:	3b01      	subs	r3, #1
 800d2e0:	b2da      	uxtb	r2, r3
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	739a      	strb	r2, [r3, #14]
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	7b9b      	ldrb	r3, [r3, #14]
 800d2ea:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800d2ec:	7dbb      	ldrb	r3, [r7, #22]
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d143      	bne.n	800d37a <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	7b1b      	ldrb	r3, [r3, #12]
 800d2fc:	f003 030f 	and.w	r3, r3, #15
 800d300:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	7b5b      	ldrb	r3, [r3, #13]
 800d306:	f003 0302 	and.w	r3, r3, #2
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d011      	beq.n	800d332 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800d312:	68bb      	ldr	r3, [r7, #8]
 800d314:	691b      	ldr	r3, [r3, #16]
 800d316:	2b00      	cmp	r3, #0
 800d318:	d106      	bne.n	800d328 <pbuf_free+0x90>
 800d31a:	4b1d      	ldr	r3, [pc, #116]	; (800d390 <pbuf_free+0xf8>)
 800d31c:	f240 22ff 	movw	r2, #767	; 0x2ff
 800d320:	491f      	ldr	r1, [pc, #124]	; (800d3a0 <pbuf_free+0x108>)
 800d322:	481d      	ldr	r0, [pc, #116]	; (800d398 <pbuf_free+0x100>)
 800d324:	f009 fa8c 	bl	8016840 <iprintf>
        pc->custom_free_function(p);
 800d328:	68bb      	ldr	r3, [r7, #8]
 800d32a:	691b      	ldr	r3, [r3, #16]
 800d32c:	6878      	ldr	r0, [r7, #4]
 800d32e:	4798      	blx	r3
 800d330:	e01d      	b.n	800d36e <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800d332:	7bfb      	ldrb	r3, [r7, #15]
 800d334:	2b02      	cmp	r3, #2
 800d336:	d104      	bne.n	800d342 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800d338:	6879      	ldr	r1, [r7, #4]
 800d33a:	2008      	movs	r0, #8
 800d33c:	f7ff f936 	bl	800c5ac <memp_free>
 800d340:	e015      	b.n	800d36e <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800d342:	7bfb      	ldrb	r3, [r7, #15]
 800d344:	2b01      	cmp	r3, #1
 800d346:	d104      	bne.n	800d352 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800d348:	6879      	ldr	r1, [r7, #4]
 800d34a:	2007      	movs	r0, #7
 800d34c:	f7ff f92e 	bl	800c5ac <memp_free>
 800d350:	e00d      	b.n	800d36e <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800d352:	7bfb      	ldrb	r3, [r7, #15]
 800d354:	2b00      	cmp	r3, #0
 800d356:	d103      	bne.n	800d360 <pbuf_free+0xc8>
          mem_free(p);
 800d358:	6878      	ldr	r0, [r7, #4]
 800d35a:	f7fe fd99 	bl	800be90 <mem_free>
 800d35e:	e006      	b.n	800d36e <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800d360:	4b0b      	ldr	r3, [pc, #44]	; (800d390 <pbuf_free+0xf8>)
 800d362:	f240 320f 	movw	r2, #783	; 0x30f
 800d366:	490f      	ldr	r1, [pc, #60]	; (800d3a4 <pbuf_free+0x10c>)
 800d368:	480b      	ldr	r0, [pc, #44]	; (800d398 <pbuf_free+0x100>)
 800d36a:	f009 fa69 	bl	8016840 <iprintf>
        }
      }
      count++;
 800d36e:	7dfb      	ldrb	r3, [r7, #23]
 800d370:	3301      	adds	r3, #1
 800d372:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800d374:	693b      	ldr	r3, [r7, #16]
 800d376:	607b      	str	r3, [r7, #4]
 800d378:	e001      	b.n	800d37e <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800d37a:	2300      	movs	r3, #0
 800d37c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	2b00      	cmp	r3, #0
 800d382:	d19f      	bne.n	800d2c4 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800d384:	7dfb      	ldrb	r3, [r7, #23]
}
 800d386:	4618      	mov	r0, r3
 800d388:	3718      	adds	r7, #24
 800d38a:	46bd      	mov	sp, r7
 800d38c:	bd80      	pop	{r7, pc}
 800d38e:	bf00      	nop
 800d390:	08018cac 	.word	0x08018cac
 800d394:	08018e10 	.word	0x08018e10
 800d398:	08018d0c 	.word	0x08018d0c
 800d39c:	08018e3c 	.word	0x08018e3c
 800d3a0:	08018e54 	.word	0x08018e54
 800d3a4:	08018e78 	.word	0x08018e78

0800d3a8 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800d3a8:	b480      	push	{r7}
 800d3aa:	b085      	sub	sp, #20
 800d3ac:	af00      	add	r7, sp, #0
 800d3ae:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800d3b0:	2300      	movs	r3, #0
 800d3b2:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800d3b4:	e005      	b.n	800d3c2 <pbuf_clen+0x1a>
    ++len;
 800d3b6:	89fb      	ldrh	r3, [r7, #14]
 800d3b8:	3301      	adds	r3, #1
 800d3ba:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d1f6      	bne.n	800d3b6 <pbuf_clen+0xe>
  }
  return len;
 800d3c8:	89fb      	ldrh	r3, [r7, #14]
}
 800d3ca:	4618      	mov	r0, r3
 800d3cc:	3714      	adds	r7, #20
 800d3ce:	46bd      	mov	sp, r7
 800d3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3d4:	4770      	bx	lr
	...

0800d3d8 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800d3d8:	b580      	push	{r7, lr}
 800d3da:	b082      	sub	sp, #8
 800d3dc:	af00      	add	r7, sp, #0
 800d3de:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d010      	beq.n	800d408 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	7b9b      	ldrb	r3, [r3, #14]
 800d3ea:	3301      	adds	r3, #1
 800d3ec:	b2da      	uxtb	r2, r3
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	7b9b      	ldrb	r3, [r3, #14]
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d106      	bne.n	800d408 <pbuf_ref+0x30>
 800d3fa:	4b05      	ldr	r3, [pc, #20]	; (800d410 <pbuf_ref+0x38>)
 800d3fc:	f240 3242 	movw	r2, #834	; 0x342
 800d400:	4904      	ldr	r1, [pc, #16]	; (800d414 <pbuf_ref+0x3c>)
 800d402:	4805      	ldr	r0, [pc, #20]	; (800d418 <pbuf_ref+0x40>)
 800d404:	f009 fa1c 	bl	8016840 <iprintf>
  }
}
 800d408:	bf00      	nop
 800d40a:	3708      	adds	r7, #8
 800d40c:	46bd      	mov	sp, r7
 800d40e:	bd80      	pop	{r7, pc}
 800d410:	08018cac 	.word	0x08018cac
 800d414:	08018e8c 	.word	0x08018e8c
 800d418:	08018d0c 	.word	0x08018d0c

0800d41c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800d41c:	b580      	push	{r7, lr}
 800d41e:	b084      	sub	sp, #16
 800d420:	af00      	add	r7, sp, #0
 800d422:	6078      	str	r0, [r7, #4]
 800d424:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d002      	beq.n	800d432 <pbuf_cat+0x16>
 800d42c:	683b      	ldr	r3, [r7, #0]
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d107      	bne.n	800d442 <pbuf_cat+0x26>
 800d432:	4b20      	ldr	r3, [pc, #128]	; (800d4b4 <pbuf_cat+0x98>)
 800d434:	f240 3259 	movw	r2, #857	; 0x359
 800d438:	491f      	ldr	r1, [pc, #124]	; (800d4b8 <pbuf_cat+0x9c>)
 800d43a:	4820      	ldr	r0, [pc, #128]	; (800d4bc <pbuf_cat+0xa0>)
 800d43c:	f009 fa00 	bl	8016840 <iprintf>
 800d440:	e034      	b.n	800d4ac <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	60fb      	str	r3, [r7, #12]
 800d446:	e00a      	b.n	800d45e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	891a      	ldrh	r2, [r3, #8]
 800d44c:	683b      	ldr	r3, [r7, #0]
 800d44e:	891b      	ldrh	r3, [r3, #8]
 800d450:	4413      	add	r3, r2
 800d452:	b29a      	uxth	r2, r3
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	60fb      	str	r3, [r7, #12]
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	2b00      	cmp	r3, #0
 800d464:	d1f0      	bne.n	800d448 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	891a      	ldrh	r2, [r3, #8]
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	895b      	ldrh	r3, [r3, #10]
 800d46e:	429a      	cmp	r2, r3
 800d470:	d006      	beq.n	800d480 <pbuf_cat+0x64>
 800d472:	4b10      	ldr	r3, [pc, #64]	; (800d4b4 <pbuf_cat+0x98>)
 800d474:	f240 3262 	movw	r2, #866	; 0x362
 800d478:	4911      	ldr	r1, [pc, #68]	; (800d4c0 <pbuf_cat+0xa4>)
 800d47a:	4810      	ldr	r0, [pc, #64]	; (800d4bc <pbuf_cat+0xa0>)
 800d47c:	f009 f9e0 	bl	8016840 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	2b00      	cmp	r3, #0
 800d486:	d006      	beq.n	800d496 <pbuf_cat+0x7a>
 800d488:	4b0a      	ldr	r3, [pc, #40]	; (800d4b4 <pbuf_cat+0x98>)
 800d48a:	f240 3263 	movw	r2, #867	; 0x363
 800d48e:	490d      	ldr	r1, [pc, #52]	; (800d4c4 <pbuf_cat+0xa8>)
 800d490:	480a      	ldr	r0, [pc, #40]	; (800d4bc <pbuf_cat+0xa0>)
 800d492:	f009 f9d5 	bl	8016840 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	891a      	ldrh	r2, [r3, #8]
 800d49a:	683b      	ldr	r3, [r7, #0]
 800d49c:	891b      	ldrh	r3, [r3, #8]
 800d49e:	4413      	add	r3, r2
 800d4a0:	b29a      	uxth	r2, r3
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	683a      	ldr	r2, [r7, #0]
 800d4aa:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800d4ac:	3710      	adds	r7, #16
 800d4ae:	46bd      	mov	sp, r7
 800d4b0:	bd80      	pop	{r7, pc}
 800d4b2:	bf00      	nop
 800d4b4:	08018cac 	.word	0x08018cac
 800d4b8:	08018ea0 	.word	0x08018ea0
 800d4bc:	08018d0c 	.word	0x08018d0c
 800d4c0:	08018ed8 	.word	0x08018ed8
 800d4c4:	08018f08 	.word	0x08018f08

0800d4c8 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800d4c8:	b580      	push	{r7, lr}
 800d4ca:	b086      	sub	sp, #24
 800d4cc:	af00      	add	r7, sp, #0
 800d4ce:	6078      	str	r0, [r7, #4]
 800d4d0:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800d4d2:	2300      	movs	r3, #0
 800d4d4:	617b      	str	r3, [r7, #20]
 800d4d6:	2300      	movs	r3, #0
 800d4d8:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d008      	beq.n	800d4f2 <pbuf_copy+0x2a>
 800d4e0:	683b      	ldr	r3, [r7, #0]
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d005      	beq.n	800d4f2 <pbuf_copy+0x2a>
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	891a      	ldrh	r2, [r3, #8]
 800d4ea:	683b      	ldr	r3, [r7, #0]
 800d4ec:	891b      	ldrh	r3, [r3, #8]
 800d4ee:	429a      	cmp	r2, r3
 800d4f0:	d209      	bcs.n	800d506 <pbuf_copy+0x3e>
 800d4f2:	4b57      	ldr	r3, [pc, #348]	; (800d650 <pbuf_copy+0x188>)
 800d4f4:	f240 32c9 	movw	r2, #969	; 0x3c9
 800d4f8:	4956      	ldr	r1, [pc, #344]	; (800d654 <pbuf_copy+0x18c>)
 800d4fa:	4857      	ldr	r0, [pc, #348]	; (800d658 <pbuf_copy+0x190>)
 800d4fc:	f009 f9a0 	bl	8016840 <iprintf>
 800d500:	f06f 030f 	mvn.w	r3, #15
 800d504:	e09f      	b.n	800d646 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	895b      	ldrh	r3, [r3, #10]
 800d50a:	461a      	mov	r2, r3
 800d50c:	697b      	ldr	r3, [r7, #20]
 800d50e:	1ad2      	subs	r2, r2, r3
 800d510:	683b      	ldr	r3, [r7, #0]
 800d512:	895b      	ldrh	r3, [r3, #10]
 800d514:	4619      	mov	r1, r3
 800d516:	693b      	ldr	r3, [r7, #16]
 800d518:	1acb      	subs	r3, r1, r3
 800d51a:	429a      	cmp	r2, r3
 800d51c:	d306      	bcc.n	800d52c <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800d51e:	683b      	ldr	r3, [r7, #0]
 800d520:	895b      	ldrh	r3, [r3, #10]
 800d522:	461a      	mov	r2, r3
 800d524:	693b      	ldr	r3, [r7, #16]
 800d526:	1ad3      	subs	r3, r2, r3
 800d528:	60fb      	str	r3, [r7, #12]
 800d52a:	e005      	b.n	800d538 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	895b      	ldrh	r3, [r3, #10]
 800d530:	461a      	mov	r2, r3
 800d532:	697b      	ldr	r3, [r7, #20]
 800d534:	1ad3      	subs	r3, r2, r3
 800d536:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	685a      	ldr	r2, [r3, #4]
 800d53c:	697b      	ldr	r3, [r7, #20]
 800d53e:	18d0      	adds	r0, r2, r3
 800d540:	683b      	ldr	r3, [r7, #0]
 800d542:	685a      	ldr	r2, [r3, #4]
 800d544:	693b      	ldr	r3, [r7, #16]
 800d546:	4413      	add	r3, r2
 800d548:	68fa      	ldr	r2, [r7, #12]
 800d54a:	4619      	mov	r1, r3
 800d54c:	f009 f948 	bl	80167e0 <memcpy>
    offset_to += len;
 800d550:	697a      	ldr	r2, [r7, #20]
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	4413      	add	r3, r2
 800d556:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800d558:	693a      	ldr	r2, [r7, #16]
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	4413      	add	r3, r2
 800d55e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	895b      	ldrh	r3, [r3, #10]
 800d564:	461a      	mov	r2, r3
 800d566:	697b      	ldr	r3, [r7, #20]
 800d568:	4293      	cmp	r3, r2
 800d56a:	d906      	bls.n	800d57a <pbuf_copy+0xb2>
 800d56c:	4b38      	ldr	r3, [pc, #224]	; (800d650 <pbuf_copy+0x188>)
 800d56e:	f240 32d9 	movw	r2, #985	; 0x3d9
 800d572:	493a      	ldr	r1, [pc, #232]	; (800d65c <pbuf_copy+0x194>)
 800d574:	4838      	ldr	r0, [pc, #224]	; (800d658 <pbuf_copy+0x190>)
 800d576:	f009 f963 	bl	8016840 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800d57a:	683b      	ldr	r3, [r7, #0]
 800d57c:	895b      	ldrh	r3, [r3, #10]
 800d57e:	461a      	mov	r2, r3
 800d580:	693b      	ldr	r3, [r7, #16]
 800d582:	4293      	cmp	r3, r2
 800d584:	d906      	bls.n	800d594 <pbuf_copy+0xcc>
 800d586:	4b32      	ldr	r3, [pc, #200]	; (800d650 <pbuf_copy+0x188>)
 800d588:	f240 32da 	movw	r2, #986	; 0x3da
 800d58c:	4934      	ldr	r1, [pc, #208]	; (800d660 <pbuf_copy+0x198>)
 800d58e:	4832      	ldr	r0, [pc, #200]	; (800d658 <pbuf_copy+0x190>)
 800d590:	f009 f956 	bl	8016840 <iprintf>
    if (offset_from >= p_from->len) {
 800d594:	683b      	ldr	r3, [r7, #0]
 800d596:	895b      	ldrh	r3, [r3, #10]
 800d598:	461a      	mov	r2, r3
 800d59a:	693b      	ldr	r3, [r7, #16]
 800d59c:	4293      	cmp	r3, r2
 800d59e:	d304      	bcc.n	800d5aa <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800d5a0:	2300      	movs	r3, #0
 800d5a2:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800d5a4:	683b      	ldr	r3, [r7, #0]
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	895b      	ldrh	r3, [r3, #10]
 800d5ae:	461a      	mov	r2, r3
 800d5b0:	697b      	ldr	r3, [r7, #20]
 800d5b2:	4293      	cmp	r3, r2
 800d5b4:	d114      	bne.n	800d5e0 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800d5b6:	2300      	movs	r3, #0
 800d5b8:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d10c      	bne.n	800d5e0 <pbuf_copy+0x118>
 800d5c6:	683b      	ldr	r3, [r7, #0]
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d009      	beq.n	800d5e0 <pbuf_copy+0x118>
 800d5cc:	4b20      	ldr	r3, [pc, #128]	; (800d650 <pbuf_copy+0x188>)
 800d5ce:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800d5d2:	4924      	ldr	r1, [pc, #144]	; (800d664 <pbuf_copy+0x19c>)
 800d5d4:	4820      	ldr	r0, [pc, #128]	; (800d658 <pbuf_copy+0x190>)
 800d5d6:	f009 f933 	bl	8016840 <iprintf>
 800d5da:	f06f 030f 	mvn.w	r3, #15
 800d5de:	e032      	b.n	800d646 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800d5e0:	683b      	ldr	r3, [r7, #0]
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d013      	beq.n	800d60e <pbuf_copy+0x146>
 800d5e6:	683b      	ldr	r3, [r7, #0]
 800d5e8:	895a      	ldrh	r2, [r3, #10]
 800d5ea:	683b      	ldr	r3, [r7, #0]
 800d5ec:	891b      	ldrh	r3, [r3, #8]
 800d5ee:	429a      	cmp	r2, r3
 800d5f0:	d10d      	bne.n	800d60e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d5f2:	683b      	ldr	r3, [r7, #0]
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d009      	beq.n	800d60e <pbuf_copy+0x146>
 800d5fa:	4b15      	ldr	r3, [pc, #84]	; (800d650 <pbuf_copy+0x188>)
 800d5fc:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800d600:	4919      	ldr	r1, [pc, #100]	; (800d668 <pbuf_copy+0x1a0>)
 800d602:	4815      	ldr	r0, [pc, #84]	; (800d658 <pbuf_copy+0x190>)
 800d604:	f009 f91c 	bl	8016840 <iprintf>
 800d608:	f06f 0305 	mvn.w	r3, #5
 800d60c:	e01b      	b.n	800d646 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	2b00      	cmp	r3, #0
 800d612:	d013      	beq.n	800d63c <pbuf_copy+0x174>
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	895a      	ldrh	r2, [r3, #10]
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	891b      	ldrh	r3, [r3, #8]
 800d61c:	429a      	cmp	r2, r3
 800d61e:	d10d      	bne.n	800d63c <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	2b00      	cmp	r3, #0
 800d626:	d009      	beq.n	800d63c <pbuf_copy+0x174>
 800d628:	4b09      	ldr	r3, [pc, #36]	; (800d650 <pbuf_copy+0x188>)
 800d62a:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800d62e:	490e      	ldr	r1, [pc, #56]	; (800d668 <pbuf_copy+0x1a0>)
 800d630:	4809      	ldr	r0, [pc, #36]	; (800d658 <pbuf_copy+0x190>)
 800d632:	f009 f905 	bl	8016840 <iprintf>
 800d636:	f06f 0305 	mvn.w	r3, #5
 800d63a:	e004      	b.n	800d646 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800d63c:	683b      	ldr	r3, [r7, #0]
 800d63e:	2b00      	cmp	r3, #0
 800d640:	f47f af61 	bne.w	800d506 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800d644:	2300      	movs	r3, #0
}
 800d646:	4618      	mov	r0, r3
 800d648:	3718      	adds	r7, #24
 800d64a:	46bd      	mov	sp, r7
 800d64c:	bd80      	pop	{r7, pc}
 800d64e:	bf00      	nop
 800d650:	08018cac 	.word	0x08018cac
 800d654:	08018f54 	.word	0x08018f54
 800d658:	08018d0c 	.word	0x08018d0c
 800d65c:	08018f84 	.word	0x08018f84
 800d660:	08018f9c 	.word	0x08018f9c
 800d664:	08018fb8 	.word	0x08018fb8
 800d668:	08018fc8 	.word	0x08018fc8

0800d66c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800d66c:	b580      	push	{r7, lr}
 800d66e:	b088      	sub	sp, #32
 800d670:	af00      	add	r7, sp, #0
 800d672:	60f8      	str	r0, [r7, #12]
 800d674:	60b9      	str	r1, [r7, #8]
 800d676:	4611      	mov	r1, r2
 800d678:	461a      	mov	r2, r3
 800d67a:	460b      	mov	r3, r1
 800d67c:	80fb      	strh	r3, [r7, #6]
 800d67e:	4613      	mov	r3, r2
 800d680:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800d682:	2300      	movs	r3, #0
 800d684:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800d686:	2300      	movs	r3, #0
 800d688:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d108      	bne.n	800d6a2 <pbuf_copy_partial+0x36>
 800d690:	4b2b      	ldr	r3, [pc, #172]	; (800d740 <pbuf_copy_partial+0xd4>)
 800d692:	f240 420a 	movw	r2, #1034	; 0x40a
 800d696:	492b      	ldr	r1, [pc, #172]	; (800d744 <pbuf_copy_partial+0xd8>)
 800d698:	482b      	ldr	r0, [pc, #172]	; (800d748 <pbuf_copy_partial+0xdc>)
 800d69a:	f009 f8d1 	bl	8016840 <iprintf>
 800d69e:	2300      	movs	r3, #0
 800d6a0:	e04a      	b.n	800d738 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800d6a2:	68bb      	ldr	r3, [r7, #8]
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d108      	bne.n	800d6ba <pbuf_copy_partial+0x4e>
 800d6a8:	4b25      	ldr	r3, [pc, #148]	; (800d740 <pbuf_copy_partial+0xd4>)
 800d6aa:	f240 420b 	movw	r2, #1035	; 0x40b
 800d6ae:	4927      	ldr	r1, [pc, #156]	; (800d74c <pbuf_copy_partial+0xe0>)
 800d6b0:	4825      	ldr	r0, [pc, #148]	; (800d748 <pbuf_copy_partial+0xdc>)
 800d6b2:	f009 f8c5 	bl	8016840 <iprintf>
 800d6b6:	2300      	movs	r3, #0
 800d6b8:	e03e      	b.n	800d738 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	61fb      	str	r3, [r7, #28]
 800d6be:	e034      	b.n	800d72a <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800d6c0:	88bb      	ldrh	r3, [r7, #4]
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d00a      	beq.n	800d6dc <pbuf_copy_partial+0x70>
 800d6c6:	69fb      	ldr	r3, [r7, #28]
 800d6c8:	895b      	ldrh	r3, [r3, #10]
 800d6ca:	88ba      	ldrh	r2, [r7, #4]
 800d6cc:	429a      	cmp	r2, r3
 800d6ce:	d305      	bcc.n	800d6dc <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800d6d0:	69fb      	ldr	r3, [r7, #28]
 800d6d2:	895b      	ldrh	r3, [r3, #10]
 800d6d4:	88ba      	ldrh	r2, [r7, #4]
 800d6d6:	1ad3      	subs	r3, r2, r3
 800d6d8:	80bb      	strh	r3, [r7, #4]
 800d6da:	e023      	b.n	800d724 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800d6dc:	69fb      	ldr	r3, [r7, #28]
 800d6de:	895a      	ldrh	r2, [r3, #10]
 800d6e0:	88bb      	ldrh	r3, [r7, #4]
 800d6e2:	1ad3      	subs	r3, r2, r3
 800d6e4:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800d6e6:	8b3a      	ldrh	r2, [r7, #24]
 800d6e8:	88fb      	ldrh	r3, [r7, #6]
 800d6ea:	429a      	cmp	r2, r3
 800d6ec:	d901      	bls.n	800d6f2 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800d6ee:	88fb      	ldrh	r3, [r7, #6]
 800d6f0:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800d6f2:	8b7b      	ldrh	r3, [r7, #26]
 800d6f4:	68ba      	ldr	r2, [r7, #8]
 800d6f6:	18d0      	adds	r0, r2, r3
 800d6f8:	69fb      	ldr	r3, [r7, #28]
 800d6fa:	685a      	ldr	r2, [r3, #4]
 800d6fc:	88bb      	ldrh	r3, [r7, #4]
 800d6fe:	4413      	add	r3, r2
 800d700:	8b3a      	ldrh	r2, [r7, #24]
 800d702:	4619      	mov	r1, r3
 800d704:	f009 f86c 	bl	80167e0 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800d708:	8afa      	ldrh	r2, [r7, #22]
 800d70a:	8b3b      	ldrh	r3, [r7, #24]
 800d70c:	4413      	add	r3, r2
 800d70e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800d710:	8b7a      	ldrh	r2, [r7, #26]
 800d712:	8b3b      	ldrh	r3, [r7, #24]
 800d714:	4413      	add	r3, r2
 800d716:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800d718:	88fa      	ldrh	r2, [r7, #6]
 800d71a:	8b3b      	ldrh	r3, [r7, #24]
 800d71c:	1ad3      	subs	r3, r2, r3
 800d71e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800d720:	2300      	movs	r3, #0
 800d722:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d724:	69fb      	ldr	r3, [r7, #28]
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	61fb      	str	r3, [r7, #28]
 800d72a:	88fb      	ldrh	r3, [r7, #6]
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d002      	beq.n	800d736 <pbuf_copy_partial+0xca>
 800d730:	69fb      	ldr	r3, [r7, #28]
 800d732:	2b00      	cmp	r3, #0
 800d734:	d1c4      	bne.n	800d6c0 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800d736:	8afb      	ldrh	r3, [r7, #22]
}
 800d738:	4618      	mov	r0, r3
 800d73a:	3720      	adds	r7, #32
 800d73c:	46bd      	mov	sp, r7
 800d73e:	bd80      	pop	{r7, pc}
 800d740:	08018cac 	.word	0x08018cac
 800d744:	08018ff4 	.word	0x08018ff4
 800d748:	08018d0c 	.word	0x08018d0c
 800d74c:	08019014 	.word	0x08019014

0800d750 <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf *
pbuf_skip_const(const struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 800d750:	b480      	push	{r7}
 800d752:	b087      	sub	sp, #28
 800d754:	af00      	add	r7, sp, #0
 800d756:	60f8      	str	r0, [r7, #12]
 800d758:	460b      	mov	r3, r1
 800d75a:	607a      	str	r2, [r7, #4]
 800d75c:	817b      	strh	r3, [r7, #10]
  u16_t offset_left = in_offset;
 800d75e:	897b      	ldrh	r3, [r7, #10]
 800d760:	82fb      	strh	r3, [r7, #22]
  const struct pbuf *q = in;
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	613b      	str	r3, [r7, #16]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 800d766:	e007      	b.n	800d778 <pbuf_skip_const+0x28>
    offset_left = (u16_t)(offset_left - q->len);
 800d768:	693b      	ldr	r3, [r7, #16]
 800d76a:	895b      	ldrh	r3, [r3, #10]
 800d76c:	8afa      	ldrh	r2, [r7, #22]
 800d76e:	1ad3      	subs	r3, r2, r3
 800d770:	82fb      	strh	r3, [r7, #22]
    q = q->next;
 800d772:	693b      	ldr	r3, [r7, #16]
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	613b      	str	r3, [r7, #16]
  while ((q != NULL) && (q->len <= offset_left)) {
 800d778:	693b      	ldr	r3, [r7, #16]
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d004      	beq.n	800d788 <pbuf_skip_const+0x38>
 800d77e:	693b      	ldr	r3, [r7, #16]
 800d780:	895b      	ldrh	r3, [r3, #10]
 800d782:	8afa      	ldrh	r2, [r7, #22]
 800d784:	429a      	cmp	r2, r3
 800d786:	d2ef      	bcs.n	800d768 <pbuf_skip_const+0x18>
  }
  if (out_offset != NULL) {
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d002      	beq.n	800d794 <pbuf_skip_const+0x44>
    *out_offset = offset_left;
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	8afa      	ldrh	r2, [r7, #22]
 800d792:	801a      	strh	r2, [r3, #0]
  }
  return q;
 800d794:	693b      	ldr	r3, [r7, #16]
}
 800d796:	4618      	mov	r0, r3
 800d798:	371c      	adds	r7, #28
 800d79a:	46bd      	mov	sp, r7
 800d79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a0:	4770      	bx	lr
	...

0800d7a4 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800d7a4:	b580      	push	{r7, lr}
 800d7a6:	b084      	sub	sp, #16
 800d7a8:	af00      	add	r7, sp, #0
 800d7aa:	4603      	mov	r3, r0
 800d7ac:	603a      	str	r2, [r7, #0]
 800d7ae:	71fb      	strb	r3, [r7, #7]
 800d7b0:	460b      	mov	r3, r1
 800d7b2:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800d7b4:	683b      	ldr	r3, [r7, #0]
 800d7b6:	8919      	ldrh	r1, [r3, #8]
 800d7b8:	88ba      	ldrh	r2, [r7, #4]
 800d7ba:	79fb      	ldrb	r3, [r7, #7]
 800d7bc:	4618      	mov	r0, r3
 800d7be:	f7ff fa87 	bl	800ccd0 <pbuf_alloc>
 800d7c2:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d101      	bne.n	800d7ce <pbuf_clone+0x2a>
    return NULL;
 800d7ca:	2300      	movs	r3, #0
 800d7cc:	e011      	b.n	800d7f2 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800d7ce:	6839      	ldr	r1, [r7, #0]
 800d7d0:	68f8      	ldr	r0, [r7, #12]
 800d7d2:	f7ff fe79 	bl	800d4c8 <pbuf_copy>
 800d7d6:	4603      	mov	r3, r0
 800d7d8:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800d7da:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d006      	beq.n	800d7f0 <pbuf_clone+0x4c>
 800d7e2:	4b06      	ldr	r3, [pc, #24]	; (800d7fc <pbuf_clone+0x58>)
 800d7e4:	f240 5224 	movw	r2, #1316	; 0x524
 800d7e8:	4905      	ldr	r1, [pc, #20]	; (800d800 <pbuf_clone+0x5c>)
 800d7ea:	4806      	ldr	r0, [pc, #24]	; (800d804 <pbuf_clone+0x60>)
 800d7ec:	f009 f828 	bl	8016840 <iprintf>
  return q;
 800d7f0:	68fb      	ldr	r3, [r7, #12]
}
 800d7f2:	4618      	mov	r0, r3
 800d7f4:	3710      	adds	r7, #16
 800d7f6:	46bd      	mov	sp, r7
 800d7f8:	bd80      	pop	{r7, pc}
 800d7fa:	bf00      	nop
 800d7fc:	08018cac 	.word	0x08018cac
 800d800:	08019120 	.word	0x08019120
 800d804:	08018d0c 	.word	0x08018d0c

0800d808 <pbuf_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p OR ZERO IF 'offset' >= p->tot_len
 */
u8_t
pbuf_get_at(const struct pbuf *p, u16_t offset)
{
 800d808:	b580      	push	{r7, lr}
 800d80a:	b084      	sub	sp, #16
 800d80c:	af00      	add	r7, sp, #0
 800d80e:	6078      	str	r0, [r7, #4]
 800d810:	460b      	mov	r3, r1
 800d812:	807b      	strh	r3, [r7, #2]
  int ret = pbuf_try_get_at(p, offset);
 800d814:	887b      	ldrh	r3, [r7, #2]
 800d816:	4619      	mov	r1, r3
 800d818:	6878      	ldr	r0, [r7, #4]
 800d81a:	f000 f80c 	bl	800d836 <pbuf_try_get_at>
 800d81e:	60f8      	str	r0, [r7, #12]
  if (ret >= 0) {
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	2b00      	cmp	r3, #0
 800d824:	db02      	blt.n	800d82c <pbuf_get_at+0x24>
    return (u8_t)ret;
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	b2db      	uxtb	r3, r3
 800d82a:	e000      	b.n	800d82e <pbuf_get_at+0x26>
  }
  return 0;
 800d82c:	2300      	movs	r3, #0
}
 800d82e:	4618      	mov	r0, r3
 800d830:	3710      	adds	r7, #16
 800d832:	46bd      	mov	sp, r7
 800d834:	bd80      	pop	{r7, pc}

0800d836 <pbuf_try_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p [0..0xFF] OR negative if 'offset' >= p->tot_len
 */
int
pbuf_try_get_at(const struct pbuf *p, u16_t offset)
{
 800d836:	b580      	push	{r7, lr}
 800d838:	b084      	sub	sp, #16
 800d83a:	af00      	add	r7, sp, #0
 800d83c:	6078      	str	r0, [r7, #4]
 800d83e:	460b      	mov	r3, r1
 800d840:	807b      	strh	r3, [r7, #2]
  u16_t q_idx;
  const struct pbuf *q = pbuf_skip_const(p, offset, &q_idx);
 800d842:	f107 020a 	add.w	r2, r7, #10
 800d846:	887b      	ldrh	r3, [r7, #2]
 800d848:	4619      	mov	r1, r3
 800d84a:	6878      	ldr	r0, [r7, #4]
 800d84c:	f7ff ff80 	bl	800d750 <pbuf_skip_const>
 800d850:	60f8      	str	r0, [r7, #12]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	2b00      	cmp	r3, #0
 800d856:	d00a      	beq.n	800d86e <pbuf_try_get_at+0x38>
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	895a      	ldrh	r2, [r3, #10]
 800d85c:	897b      	ldrh	r3, [r7, #10]
 800d85e:	429a      	cmp	r2, r3
 800d860:	d905      	bls.n	800d86e <pbuf_try_get_at+0x38>
    return ((u8_t *)q->payload)[q_idx];
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	685b      	ldr	r3, [r3, #4]
 800d866:	897a      	ldrh	r2, [r7, #10]
 800d868:	4413      	add	r3, r2
 800d86a:	781b      	ldrb	r3, [r3, #0]
 800d86c:	e001      	b.n	800d872 <pbuf_try_get_at+0x3c>
  }
  return -1;
 800d86e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d872:	4618      	mov	r0, r3
 800d874:	3710      	adds	r7, #16
 800d876:	46bd      	mov	sp, r7
 800d878:	bd80      	pop	{r7, pc}
	...

0800d87c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800d87c:	b580      	push	{r7, lr}
 800d87e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800d880:	f009 f86c 	bl	801695c <rand>
 800d884:	4603      	mov	r3, r0
 800d886:	b29b      	uxth	r3, r3
 800d888:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800d88c:	b29b      	uxth	r3, r3
 800d88e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800d892:	b29a      	uxth	r2, r3
 800d894:	4b01      	ldr	r3, [pc, #4]	; (800d89c <tcp_init+0x20>)
 800d896:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800d898:	bf00      	nop
 800d89a:	bd80      	pop	{r7, pc}
 800d89c:	20000060 	.word	0x20000060

0800d8a0 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800d8a0:	b580      	push	{r7, lr}
 800d8a2:	b082      	sub	sp, #8
 800d8a4:	af00      	add	r7, sp, #0
 800d8a6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	7d1b      	ldrb	r3, [r3, #20]
 800d8ac:	2b01      	cmp	r3, #1
 800d8ae:	d105      	bne.n	800d8bc <tcp_free+0x1c>
 800d8b0:	4b06      	ldr	r3, [pc, #24]	; (800d8cc <tcp_free+0x2c>)
 800d8b2:	22d4      	movs	r2, #212	; 0xd4
 800d8b4:	4906      	ldr	r1, [pc, #24]	; (800d8d0 <tcp_free+0x30>)
 800d8b6:	4807      	ldr	r0, [pc, #28]	; (800d8d4 <tcp_free+0x34>)
 800d8b8:	f008 ffc2 	bl	8016840 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800d8bc:	6879      	ldr	r1, [r7, #4]
 800d8be:	2001      	movs	r0, #1
 800d8c0:	f7fe fe74 	bl	800c5ac <memp_free>
}
 800d8c4:	bf00      	nop
 800d8c6:	3708      	adds	r7, #8
 800d8c8:	46bd      	mov	sp, r7
 800d8ca:	bd80      	pop	{r7, pc}
 800d8cc:	080191ac 	.word	0x080191ac
 800d8d0:	080191dc 	.word	0x080191dc
 800d8d4:	080191f0 	.word	0x080191f0

0800d8d8 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800d8d8:	b580      	push	{r7, lr}
 800d8da:	b082      	sub	sp, #8
 800d8dc:	af00      	add	r7, sp, #0
 800d8de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	7d1b      	ldrb	r3, [r3, #20]
 800d8e4:	2b01      	cmp	r3, #1
 800d8e6:	d105      	bne.n	800d8f4 <tcp_free_listen+0x1c>
 800d8e8:	4b06      	ldr	r3, [pc, #24]	; (800d904 <tcp_free_listen+0x2c>)
 800d8ea:	22df      	movs	r2, #223	; 0xdf
 800d8ec:	4906      	ldr	r1, [pc, #24]	; (800d908 <tcp_free_listen+0x30>)
 800d8ee:	4807      	ldr	r0, [pc, #28]	; (800d90c <tcp_free_listen+0x34>)
 800d8f0:	f008 ffa6 	bl	8016840 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800d8f4:	6879      	ldr	r1, [r7, #4]
 800d8f6:	2002      	movs	r0, #2
 800d8f8:	f7fe fe58 	bl	800c5ac <memp_free>
}
 800d8fc:	bf00      	nop
 800d8fe:	3708      	adds	r7, #8
 800d900:	46bd      	mov	sp, r7
 800d902:	bd80      	pop	{r7, pc}
 800d904:	080191ac 	.word	0x080191ac
 800d908:	08019218 	.word	0x08019218
 800d90c:	080191f0 	.word	0x080191f0

0800d910 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800d910:	b580      	push	{r7, lr}
 800d912:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800d914:	f001 f974 	bl	800ec00 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800d918:	4b07      	ldr	r3, [pc, #28]	; (800d938 <tcp_tmr+0x28>)
 800d91a:	781b      	ldrb	r3, [r3, #0]
 800d91c:	3301      	adds	r3, #1
 800d91e:	b2da      	uxtb	r2, r3
 800d920:	4b05      	ldr	r3, [pc, #20]	; (800d938 <tcp_tmr+0x28>)
 800d922:	701a      	strb	r2, [r3, #0]
 800d924:	4b04      	ldr	r3, [pc, #16]	; (800d938 <tcp_tmr+0x28>)
 800d926:	781b      	ldrb	r3, [r3, #0]
 800d928:	f003 0301 	and.w	r3, r3, #1
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d001      	beq.n	800d934 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800d930:	f000 fe26 	bl	800e580 <tcp_slowtmr>
  }
}
 800d934:	bf00      	nop
 800d936:	bd80      	pop	{r7, pc}
 800d938:	20008bbd 	.word	0x20008bbd

0800d93c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800d93c:	b580      	push	{r7, lr}
 800d93e:	b084      	sub	sp, #16
 800d940:	af00      	add	r7, sp, #0
 800d942:	6078      	str	r0, [r7, #4]
 800d944:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800d946:	683b      	ldr	r3, [r7, #0]
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d105      	bne.n	800d958 <tcp_remove_listener+0x1c>
 800d94c:	4b0d      	ldr	r3, [pc, #52]	; (800d984 <tcp_remove_listener+0x48>)
 800d94e:	22ff      	movs	r2, #255	; 0xff
 800d950:	490d      	ldr	r1, [pc, #52]	; (800d988 <tcp_remove_listener+0x4c>)
 800d952:	480e      	ldr	r0, [pc, #56]	; (800d98c <tcp_remove_listener+0x50>)
 800d954:	f008 ff74 	bl	8016840 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	60fb      	str	r3, [r7, #12]
 800d95c:	e00a      	b.n	800d974 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d962:	683a      	ldr	r2, [r7, #0]
 800d964:	429a      	cmp	r2, r3
 800d966:	d102      	bne.n	800d96e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	2200      	movs	r2, #0
 800d96c:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	68db      	ldr	r3, [r3, #12]
 800d972:	60fb      	str	r3, [r7, #12]
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	2b00      	cmp	r3, #0
 800d978:	d1f1      	bne.n	800d95e <tcp_remove_listener+0x22>
    }
  }
}
 800d97a:	bf00      	nop
 800d97c:	bf00      	nop
 800d97e:	3710      	adds	r7, #16
 800d980:	46bd      	mov	sp, r7
 800d982:	bd80      	pop	{r7, pc}
 800d984:	080191ac 	.word	0x080191ac
 800d988:	08019234 	.word	0x08019234
 800d98c:	080191f0 	.word	0x080191f0

0800d990 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800d990:	b580      	push	{r7, lr}
 800d992:	b084      	sub	sp, #16
 800d994:	af00      	add	r7, sp, #0
 800d996:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d106      	bne.n	800d9ac <tcp_listen_closed+0x1c>
 800d99e:	4b14      	ldr	r3, [pc, #80]	; (800d9f0 <tcp_listen_closed+0x60>)
 800d9a0:	f240 1211 	movw	r2, #273	; 0x111
 800d9a4:	4913      	ldr	r1, [pc, #76]	; (800d9f4 <tcp_listen_closed+0x64>)
 800d9a6:	4814      	ldr	r0, [pc, #80]	; (800d9f8 <tcp_listen_closed+0x68>)
 800d9a8:	f008 ff4a 	bl	8016840 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	7d1b      	ldrb	r3, [r3, #20]
 800d9b0:	2b01      	cmp	r3, #1
 800d9b2:	d006      	beq.n	800d9c2 <tcp_listen_closed+0x32>
 800d9b4:	4b0e      	ldr	r3, [pc, #56]	; (800d9f0 <tcp_listen_closed+0x60>)
 800d9b6:	f44f 7289 	mov.w	r2, #274	; 0x112
 800d9ba:	4910      	ldr	r1, [pc, #64]	; (800d9fc <tcp_listen_closed+0x6c>)
 800d9bc:	480e      	ldr	r0, [pc, #56]	; (800d9f8 <tcp_listen_closed+0x68>)
 800d9be:	f008 ff3f 	bl	8016840 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800d9c2:	2301      	movs	r3, #1
 800d9c4:	60fb      	str	r3, [r7, #12]
 800d9c6:	e00b      	b.n	800d9e0 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800d9c8:	4a0d      	ldr	r2, [pc, #52]	; (800da00 <tcp_listen_closed+0x70>)
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	6879      	ldr	r1, [r7, #4]
 800d9d4:	4618      	mov	r0, r3
 800d9d6:	f7ff ffb1 	bl	800d93c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	3301      	adds	r3, #1
 800d9de:	60fb      	str	r3, [r7, #12]
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	2b03      	cmp	r3, #3
 800d9e4:	d9f0      	bls.n	800d9c8 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800d9e6:	bf00      	nop
 800d9e8:	bf00      	nop
 800d9ea:	3710      	adds	r7, #16
 800d9ec:	46bd      	mov	sp, r7
 800d9ee:	bd80      	pop	{r7, pc}
 800d9f0:	080191ac 	.word	0x080191ac
 800d9f4:	0801925c 	.word	0x0801925c
 800d9f8:	080191f0 	.word	0x080191f0
 800d9fc:	08019268 	.word	0x08019268
 800da00:	0801d0c0 	.word	0x0801d0c0

0800da04 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800da04:	b5b0      	push	{r4, r5, r7, lr}
 800da06:	b088      	sub	sp, #32
 800da08:	af04      	add	r7, sp, #16
 800da0a:	6078      	str	r0, [r7, #4]
 800da0c:	460b      	mov	r3, r1
 800da0e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	2b00      	cmp	r3, #0
 800da14:	d106      	bne.n	800da24 <tcp_close_shutdown+0x20>
 800da16:	4b63      	ldr	r3, [pc, #396]	; (800dba4 <tcp_close_shutdown+0x1a0>)
 800da18:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800da1c:	4962      	ldr	r1, [pc, #392]	; (800dba8 <tcp_close_shutdown+0x1a4>)
 800da1e:	4863      	ldr	r0, [pc, #396]	; (800dbac <tcp_close_shutdown+0x1a8>)
 800da20:	f008 ff0e 	bl	8016840 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800da24:	78fb      	ldrb	r3, [r7, #3]
 800da26:	2b00      	cmp	r3, #0
 800da28:	d066      	beq.n	800daf8 <tcp_close_shutdown+0xf4>
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	7d1b      	ldrb	r3, [r3, #20]
 800da2e:	2b04      	cmp	r3, #4
 800da30:	d003      	beq.n	800da3a <tcp_close_shutdown+0x36>
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	7d1b      	ldrb	r3, [r3, #20]
 800da36:	2b07      	cmp	r3, #7
 800da38:	d15e      	bne.n	800daf8 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d104      	bne.n	800da4c <tcp_close_shutdown+0x48>
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800da46:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800da4a:	d055      	beq.n	800daf8 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	8b5b      	ldrh	r3, [r3, #26]
 800da50:	f003 0310 	and.w	r3, r3, #16
 800da54:	2b00      	cmp	r3, #0
 800da56:	d106      	bne.n	800da66 <tcp_close_shutdown+0x62>
 800da58:	4b52      	ldr	r3, [pc, #328]	; (800dba4 <tcp_close_shutdown+0x1a0>)
 800da5a:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800da5e:	4954      	ldr	r1, [pc, #336]	; (800dbb0 <tcp_close_shutdown+0x1ac>)
 800da60:	4852      	ldr	r0, [pc, #328]	; (800dbac <tcp_close_shutdown+0x1a8>)
 800da62:	f008 feed 	bl	8016840 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800da6e:	687d      	ldr	r5, [r7, #4]
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	3304      	adds	r3, #4
 800da74:	687a      	ldr	r2, [r7, #4]
 800da76:	8ad2      	ldrh	r2, [r2, #22]
 800da78:	6879      	ldr	r1, [r7, #4]
 800da7a:	8b09      	ldrh	r1, [r1, #24]
 800da7c:	9102      	str	r1, [sp, #8]
 800da7e:	9201      	str	r2, [sp, #4]
 800da80:	9300      	str	r3, [sp, #0]
 800da82:	462b      	mov	r3, r5
 800da84:	4622      	mov	r2, r4
 800da86:	4601      	mov	r1, r0
 800da88:	6878      	ldr	r0, [r7, #4]
 800da8a:	f005 feaf 	bl	80137ec <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800da8e:	6878      	ldr	r0, [r7, #4]
 800da90:	f001 fc8c 	bl	800f3ac <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800da94:	4b47      	ldr	r3, [pc, #284]	; (800dbb4 <tcp_close_shutdown+0x1b0>)
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	687a      	ldr	r2, [r7, #4]
 800da9a:	429a      	cmp	r2, r3
 800da9c:	d105      	bne.n	800daaa <tcp_close_shutdown+0xa6>
 800da9e:	4b45      	ldr	r3, [pc, #276]	; (800dbb4 <tcp_close_shutdown+0x1b0>)
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	68db      	ldr	r3, [r3, #12]
 800daa4:	4a43      	ldr	r2, [pc, #268]	; (800dbb4 <tcp_close_shutdown+0x1b0>)
 800daa6:	6013      	str	r3, [r2, #0]
 800daa8:	e013      	b.n	800dad2 <tcp_close_shutdown+0xce>
 800daaa:	4b42      	ldr	r3, [pc, #264]	; (800dbb4 <tcp_close_shutdown+0x1b0>)
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	60fb      	str	r3, [r7, #12]
 800dab0:	e00c      	b.n	800dacc <tcp_close_shutdown+0xc8>
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	68db      	ldr	r3, [r3, #12]
 800dab6:	687a      	ldr	r2, [r7, #4]
 800dab8:	429a      	cmp	r2, r3
 800daba:	d104      	bne.n	800dac6 <tcp_close_shutdown+0xc2>
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	68da      	ldr	r2, [r3, #12]
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	60da      	str	r2, [r3, #12]
 800dac4:	e005      	b.n	800dad2 <tcp_close_shutdown+0xce>
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	68db      	ldr	r3, [r3, #12]
 800daca:	60fb      	str	r3, [r7, #12]
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d1ef      	bne.n	800dab2 <tcp_close_shutdown+0xae>
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	2200      	movs	r2, #0
 800dad6:	60da      	str	r2, [r3, #12]
 800dad8:	4b37      	ldr	r3, [pc, #220]	; (800dbb8 <tcp_close_shutdown+0x1b4>)
 800dada:	2201      	movs	r2, #1
 800dadc:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800dade:	4b37      	ldr	r3, [pc, #220]	; (800dbbc <tcp_close_shutdown+0x1b8>)
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	687a      	ldr	r2, [r7, #4]
 800dae4:	429a      	cmp	r2, r3
 800dae6:	d102      	bne.n	800daee <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800dae8:	f004 f924 	bl	8011d34 <tcp_trigger_input_pcb_close>
 800daec:	e002      	b.n	800daf4 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800daee:	6878      	ldr	r0, [r7, #4]
 800daf0:	f7ff fed6 	bl	800d8a0 <tcp_free>
      }
      return ERR_OK;
 800daf4:	2300      	movs	r3, #0
 800daf6:	e050      	b.n	800db9a <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	7d1b      	ldrb	r3, [r3, #20]
 800dafc:	2b02      	cmp	r3, #2
 800dafe:	d03b      	beq.n	800db78 <tcp_close_shutdown+0x174>
 800db00:	2b02      	cmp	r3, #2
 800db02:	dc44      	bgt.n	800db8e <tcp_close_shutdown+0x18a>
 800db04:	2b00      	cmp	r3, #0
 800db06:	d002      	beq.n	800db0e <tcp_close_shutdown+0x10a>
 800db08:	2b01      	cmp	r3, #1
 800db0a:	d02a      	beq.n	800db62 <tcp_close_shutdown+0x15e>
 800db0c:	e03f      	b.n	800db8e <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	8adb      	ldrh	r3, [r3, #22]
 800db12:	2b00      	cmp	r3, #0
 800db14:	d021      	beq.n	800db5a <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800db16:	4b2a      	ldr	r3, [pc, #168]	; (800dbc0 <tcp_close_shutdown+0x1bc>)
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	687a      	ldr	r2, [r7, #4]
 800db1c:	429a      	cmp	r2, r3
 800db1e:	d105      	bne.n	800db2c <tcp_close_shutdown+0x128>
 800db20:	4b27      	ldr	r3, [pc, #156]	; (800dbc0 <tcp_close_shutdown+0x1bc>)
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	68db      	ldr	r3, [r3, #12]
 800db26:	4a26      	ldr	r2, [pc, #152]	; (800dbc0 <tcp_close_shutdown+0x1bc>)
 800db28:	6013      	str	r3, [r2, #0]
 800db2a:	e013      	b.n	800db54 <tcp_close_shutdown+0x150>
 800db2c:	4b24      	ldr	r3, [pc, #144]	; (800dbc0 <tcp_close_shutdown+0x1bc>)
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	60bb      	str	r3, [r7, #8]
 800db32:	e00c      	b.n	800db4e <tcp_close_shutdown+0x14a>
 800db34:	68bb      	ldr	r3, [r7, #8]
 800db36:	68db      	ldr	r3, [r3, #12]
 800db38:	687a      	ldr	r2, [r7, #4]
 800db3a:	429a      	cmp	r2, r3
 800db3c:	d104      	bne.n	800db48 <tcp_close_shutdown+0x144>
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	68da      	ldr	r2, [r3, #12]
 800db42:	68bb      	ldr	r3, [r7, #8]
 800db44:	60da      	str	r2, [r3, #12]
 800db46:	e005      	b.n	800db54 <tcp_close_shutdown+0x150>
 800db48:	68bb      	ldr	r3, [r7, #8]
 800db4a:	68db      	ldr	r3, [r3, #12]
 800db4c:	60bb      	str	r3, [r7, #8]
 800db4e:	68bb      	ldr	r3, [r7, #8]
 800db50:	2b00      	cmp	r3, #0
 800db52:	d1ef      	bne.n	800db34 <tcp_close_shutdown+0x130>
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	2200      	movs	r2, #0
 800db58:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800db5a:	6878      	ldr	r0, [r7, #4]
 800db5c:	f7ff fea0 	bl	800d8a0 <tcp_free>
      break;
 800db60:	e01a      	b.n	800db98 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800db62:	6878      	ldr	r0, [r7, #4]
 800db64:	f7ff ff14 	bl	800d990 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800db68:	6879      	ldr	r1, [r7, #4]
 800db6a:	4816      	ldr	r0, [pc, #88]	; (800dbc4 <tcp_close_shutdown+0x1c0>)
 800db6c:	f001 fc6e 	bl	800f44c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800db70:	6878      	ldr	r0, [r7, #4]
 800db72:	f7ff feb1 	bl	800d8d8 <tcp_free_listen>
      break;
 800db76:	e00f      	b.n	800db98 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800db78:	6879      	ldr	r1, [r7, #4]
 800db7a:	480e      	ldr	r0, [pc, #56]	; (800dbb4 <tcp_close_shutdown+0x1b0>)
 800db7c:	f001 fc66 	bl	800f44c <tcp_pcb_remove>
 800db80:	4b0d      	ldr	r3, [pc, #52]	; (800dbb8 <tcp_close_shutdown+0x1b4>)
 800db82:	2201      	movs	r2, #1
 800db84:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800db86:	6878      	ldr	r0, [r7, #4]
 800db88:	f7ff fe8a 	bl	800d8a0 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800db8c:	e004      	b.n	800db98 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800db8e:	6878      	ldr	r0, [r7, #4]
 800db90:	f000 f81a 	bl	800dbc8 <tcp_close_shutdown_fin>
 800db94:	4603      	mov	r3, r0
 800db96:	e000      	b.n	800db9a <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800db98:	2300      	movs	r3, #0
}
 800db9a:	4618      	mov	r0, r3
 800db9c:	3710      	adds	r7, #16
 800db9e:	46bd      	mov	sp, r7
 800dba0:	bdb0      	pop	{r4, r5, r7, pc}
 800dba2:	bf00      	nop
 800dba4:	080191ac 	.word	0x080191ac
 800dba8:	08019280 	.word	0x08019280
 800dbac:	080191f0 	.word	0x080191f0
 800dbb0:	080192a0 	.word	0x080192a0
 800dbb4:	20008bb4 	.word	0x20008bb4
 800dbb8:	20008bbc 	.word	0x20008bbc
 800dbbc:	20008bf4 	.word	0x20008bf4
 800dbc0:	20008bac 	.word	0x20008bac
 800dbc4:	20008bb0 	.word	0x20008bb0

0800dbc8 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800dbc8:	b580      	push	{r7, lr}
 800dbca:	b084      	sub	sp, #16
 800dbcc:	af00      	add	r7, sp, #0
 800dbce:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d106      	bne.n	800dbe4 <tcp_close_shutdown_fin+0x1c>
 800dbd6:	4b2e      	ldr	r3, [pc, #184]	; (800dc90 <tcp_close_shutdown_fin+0xc8>)
 800dbd8:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800dbdc:	492d      	ldr	r1, [pc, #180]	; (800dc94 <tcp_close_shutdown_fin+0xcc>)
 800dbde:	482e      	ldr	r0, [pc, #184]	; (800dc98 <tcp_close_shutdown_fin+0xd0>)
 800dbe0:	f008 fe2e 	bl	8016840 <iprintf>

  switch (pcb->state) {
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	7d1b      	ldrb	r3, [r3, #20]
 800dbe8:	2b07      	cmp	r3, #7
 800dbea:	d020      	beq.n	800dc2e <tcp_close_shutdown_fin+0x66>
 800dbec:	2b07      	cmp	r3, #7
 800dbee:	dc2b      	bgt.n	800dc48 <tcp_close_shutdown_fin+0x80>
 800dbf0:	2b03      	cmp	r3, #3
 800dbf2:	d002      	beq.n	800dbfa <tcp_close_shutdown_fin+0x32>
 800dbf4:	2b04      	cmp	r3, #4
 800dbf6:	d00d      	beq.n	800dc14 <tcp_close_shutdown_fin+0x4c>
 800dbf8:	e026      	b.n	800dc48 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800dbfa:	6878      	ldr	r0, [r7, #4]
 800dbfc:	f004 ff04 	bl	8012a08 <tcp_send_fin>
 800dc00:	4603      	mov	r3, r0
 800dc02:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800dc04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d11f      	bne.n	800dc4c <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	2205      	movs	r2, #5
 800dc10:	751a      	strb	r2, [r3, #20]
      }
      break;
 800dc12:	e01b      	b.n	800dc4c <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800dc14:	6878      	ldr	r0, [r7, #4]
 800dc16:	f004 fef7 	bl	8012a08 <tcp_send_fin>
 800dc1a:	4603      	mov	r3, r0
 800dc1c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800dc1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d114      	bne.n	800dc50 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	2205      	movs	r2, #5
 800dc2a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800dc2c:	e010      	b.n	800dc50 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800dc2e:	6878      	ldr	r0, [r7, #4]
 800dc30:	f004 feea 	bl	8012a08 <tcp_send_fin>
 800dc34:	4603      	mov	r3, r0
 800dc36:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800dc38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d109      	bne.n	800dc54 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	2209      	movs	r2, #9
 800dc44:	751a      	strb	r2, [r3, #20]
      }
      break;
 800dc46:	e005      	b.n	800dc54 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800dc48:	2300      	movs	r3, #0
 800dc4a:	e01c      	b.n	800dc86 <tcp_close_shutdown_fin+0xbe>
      break;
 800dc4c:	bf00      	nop
 800dc4e:	e002      	b.n	800dc56 <tcp_close_shutdown_fin+0x8e>
      break;
 800dc50:	bf00      	nop
 800dc52:	e000      	b.n	800dc56 <tcp_close_shutdown_fin+0x8e>
      break;
 800dc54:	bf00      	nop
  }

  if (err == ERR_OK) {
 800dc56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d103      	bne.n	800dc66 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800dc5e:	6878      	ldr	r0, [r7, #4]
 800dc60:	f005 f810 	bl	8012c84 <tcp_output>
 800dc64:	e00d      	b.n	800dc82 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800dc66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dc6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc6e:	d108      	bne.n	800dc82 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	8b5b      	ldrh	r3, [r3, #26]
 800dc74:	f043 0308 	orr.w	r3, r3, #8
 800dc78:	b29a      	uxth	r2, r3
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800dc7e:	2300      	movs	r3, #0
 800dc80:	e001      	b.n	800dc86 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800dc82:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800dc86:	4618      	mov	r0, r3
 800dc88:	3710      	adds	r7, #16
 800dc8a:	46bd      	mov	sp, r7
 800dc8c:	bd80      	pop	{r7, pc}
 800dc8e:	bf00      	nop
 800dc90:	080191ac 	.word	0x080191ac
 800dc94:	0801925c 	.word	0x0801925c
 800dc98:	080191f0 	.word	0x080191f0

0800dc9c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800dc9c:	b580      	push	{r7, lr}
 800dc9e:	b082      	sub	sp, #8
 800dca0:	af00      	add	r7, sp, #0
 800dca2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d109      	bne.n	800dcbe <tcp_close+0x22>
 800dcaa:	4b0f      	ldr	r3, [pc, #60]	; (800dce8 <tcp_close+0x4c>)
 800dcac:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800dcb0:	490e      	ldr	r1, [pc, #56]	; (800dcec <tcp_close+0x50>)
 800dcb2:	480f      	ldr	r0, [pc, #60]	; (800dcf0 <tcp_close+0x54>)
 800dcb4:	f008 fdc4 	bl	8016840 <iprintf>
 800dcb8:	f06f 030f 	mvn.w	r3, #15
 800dcbc:	e00f      	b.n	800dcde <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	7d1b      	ldrb	r3, [r3, #20]
 800dcc2:	2b01      	cmp	r3, #1
 800dcc4:	d006      	beq.n	800dcd4 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	8b5b      	ldrh	r3, [r3, #26]
 800dcca:	f043 0310 	orr.w	r3, r3, #16
 800dcce:	b29a      	uxth	r2, r3
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800dcd4:	2101      	movs	r1, #1
 800dcd6:	6878      	ldr	r0, [r7, #4]
 800dcd8:	f7ff fe94 	bl	800da04 <tcp_close_shutdown>
 800dcdc:	4603      	mov	r3, r0
}
 800dcde:	4618      	mov	r0, r3
 800dce0:	3708      	adds	r7, #8
 800dce2:	46bd      	mov	sp, r7
 800dce4:	bd80      	pop	{r7, pc}
 800dce6:	bf00      	nop
 800dce8:	080191ac 	.word	0x080191ac
 800dcec:	080192bc 	.word	0x080192bc
 800dcf0:	080191f0 	.word	0x080191f0

0800dcf4 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800dcf4:	b580      	push	{r7, lr}
 800dcf6:	b08e      	sub	sp, #56	; 0x38
 800dcf8:	af04      	add	r7, sp, #16
 800dcfa:	6078      	str	r0, [r7, #4]
 800dcfc:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d107      	bne.n	800dd14 <tcp_abandon+0x20>
 800dd04:	4b52      	ldr	r3, [pc, #328]	; (800de50 <tcp_abandon+0x15c>)
 800dd06:	f240 223d 	movw	r2, #573	; 0x23d
 800dd0a:	4952      	ldr	r1, [pc, #328]	; (800de54 <tcp_abandon+0x160>)
 800dd0c:	4852      	ldr	r0, [pc, #328]	; (800de58 <tcp_abandon+0x164>)
 800dd0e:	f008 fd97 	bl	8016840 <iprintf>
 800dd12:	e099      	b.n	800de48 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	7d1b      	ldrb	r3, [r3, #20]
 800dd18:	2b01      	cmp	r3, #1
 800dd1a:	d106      	bne.n	800dd2a <tcp_abandon+0x36>
 800dd1c:	4b4c      	ldr	r3, [pc, #304]	; (800de50 <tcp_abandon+0x15c>)
 800dd1e:	f44f 7210 	mov.w	r2, #576	; 0x240
 800dd22:	494e      	ldr	r1, [pc, #312]	; (800de5c <tcp_abandon+0x168>)
 800dd24:	484c      	ldr	r0, [pc, #304]	; (800de58 <tcp_abandon+0x164>)
 800dd26:	f008 fd8b 	bl	8016840 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	7d1b      	ldrb	r3, [r3, #20]
 800dd2e:	2b0a      	cmp	r3, #10
 800dd30:	d107      	bne.n	800dd42 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800dd32:	6879      	ldr	r1, [r7, #4]
 800dd34:	484a      	ldr	r0, [pc, #296]	; (800de60 <tcp_abandon+0x16c>)
 800dd36:	f001 fb89 	bl	800f44c <tcp_pcb_remove>
    tcp_free(pcb);
 800dd3a:	6878      	ldr	r0, [r7, #4]
 800dd3c:	f7ff fdb0 	bl	800d8a0 <tcp_free>
 800dd40:	e082      	b.n	800de48 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800dd42:	2300      	movs	r3, #0
 800dd44:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800dd46:	2300      	movs	r3, #0
 800dd48:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dd4e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd54:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dd5c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	691b      	ldr	r3, [r3, #16]
 800dd62:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	7d1b      	ldrb	r3, [r3, #20]
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d126      	bne.n	800ddba <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	8adb      	ldrh	r3, [r3, #22]
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d02e      	beq.n	800ddd2 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800dd74:	4b3b      	ldr	r3, [pc, #236]	; (800de64 <tcp_abandon+0x170>)
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	687a      	ldr	r2, [r7, #4]
 800dd7a:	429a      	cmp	r2, r3
 800dd7c:	d105      	bne.n	800dd8a <tcp_abandon+0x96>
 800dd7e:	4b39      	ldr	r3, [pc, #228]	; (800de64 <tcp_abandon+0x170>)
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	68db      	ldr	r3, [r3, #12]
 800dd84:	4a37      	ldr	r2, [pc, #220]	; (800de64 <tcp_abandon+0x170>)
 800dd86:	6013      	str	r3, [r2, #0]
 800dd88:	e013      	b.n	800ddb2 <tcp_abandon+0xbe>
 800dd8a:	4b36      	ldr	r3, [pc, #216]	; (800de64 <tcp_abandon+0x170>)
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	61fb      	str	r3, [r7, #28]
 800dd90:	e00c      	b.n	800ddac <tcp_abandon+0xb8>
 800dd92:	69fb      	ldr	r3, [r7, #28]
 800dd94:	68db      	ldr	r3, [r3, #12]
 800dd96:	687a      	ldr	r2, [r7, #4]
 800dd98:	429a      	cmp	r2, r3
 800dd9a:	d104      	bne.n	800dda6 <tcp_abandon+0xb2>
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	68da      	ldr	r2, [r3, #12]
 800dda0:	69fb      	ldr	r3, [r7, #28]
 800dda2:	60da      	str	r2, [r3, #12]
 800dda4:	e005      	b.n	800ddb2 <tcp_abandon+0xbe>
 800dda6:	69fb      	ldr	r3, [r7, #28]
 800dda8:	68db      	ldr	r3, [r3, #12]
 800ddaa:	61fb      	str	r3, [r7, #28]
 800ddac:	69fb      	ldr	r3, [r7, #28]
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d1ef      	bne.n	800dd92 <tcp_abandon+0x9e>
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	2200      	movs	r2, #0
 800ddb6:	60da      	str	r2, [r3, #12]
 800ddb8:	e00b      	b.n	800ddd2 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800ddba:	683b      	ldr	r3, [r7, #0]
 800ddbc:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	8adb      	ldrh	r3, [r3, #22]
 800ddc2:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800ddc4:	6879      	ldr	r1, [r7, #4]
 800ddc6:	4828      	ldr	r0, [pc, #160]	; (800de68 <tcp_abandon+0x174>)
 800ddc8:	f001 fb40 	bl	800f44c <tcp_pcb_remove>
 800ddcc:	4b27      	ldr	r3, [pc, #156]	; (800de6c <tcp_abandon+0x178>)
 800ddce:	2201      	movs	r2, #1
 800ddd0:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d004      	beq.n	800dde4 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ddde:	4618      	mov	r0, r3
 800dde0:	f000 ffee 	bl	800edc0 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d004      	beq.n	800ddf6 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ddf0:	4618      	mov	r0, r3
 800ddf2:	f000 ffe5 	bl	800edc0 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d004      	beq.n	800de08 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800de02:	4618      	mov	r0, r3
 800de04:	f000 ffdc 	bl	800edc0 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800de08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d00e      	beq.n	800de2c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800de0e:	6879      	ldr	r1, [r7, #4]
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	3304      	adds	r3, #4
 800de14:	687a      	ldr	r2, [r7, #4]
 800de16:	8b12      	ldrh	r2, [r2, #24]
 800de18:	9202      	str	r2, [sp, #8]
 800de1a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800de1c:	9201      	str	r2, [sp, #4]
 800de1e:	9300      	str	r3, [sp, #0]
 800de20:	460b      	mov	r3, r1
 800de22:	697a      	ldr	r2, [r7, #20]
 800de24:	69b9      	ldr	r1, [r7, #24]
 800de26:	6878      	ldr	r0, [r7, #4]
 800de28:	f005 fce0 	bl	80137ec <tcp_rst>
    }
    last_state = pcb->state;
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	7d1b      	ldrb	r3, [r3, #20]
 800de30:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800de32:	6878      	ldr	r0, [r7, #4]
 800de34:	f7ff fd34 	bl	800d8a0 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800de38:	693b      	ldr	r3, [r7, #16]
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d004      	beq.n	800de48 <tcp_abandon+0x154>
 800de3e:	693b      	ldr	r3, [r7, #16]
 800de40:	f06f 010c 	mvn.w	r1, #12
 800de44:	68f8      	ldr	r0, [r7, #12]
 800de46:	4798      	blx	r3
  }
}
 800de48:	3728      	adds	r7, #40	; 0x28
 800de4a:	46bd      	mov	sp, r7
 800de4c:	bd80      	pop	{r7, pc}
 800de4e:	bf00      	nop
 800de50:	080191ac 	.word	0x080191ac
 800de54:	080192f0 	.word	0x080192f0
 800de58:	080191f0 	.word	0x080191f0
 800de5c:	0801930c 	.word	0x0801930c
 800de60:	20008bb8 	.word	0x20008bb8
 800de64:	20008bac 	.word	0x20008bac
 800de68:	20008bb4 	.word	0x20008bb4
 800de6c:	20008bbc 	.word	0x20008bbc

0800de70 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800de70:	b580      	push	{r7, lr}
 800de72:	b082      	sub	sp, #8
 800de74:	af00      	add	r7, sp, #0
 800de76:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800de78:	2101      	movs	r1, #1
 800de7a:	6878      	ldr	r0, [r7, #4]
 800de7c:	f7ff ff3a 	bl	800dcf4 <tcp_abandon>
}
 800de80:	bf00      	nop
 800de82:	3708      	adds	r7, #8
 800de84:	46bd      	mov	sp, r7
 800de86:	bd80      	pop	{r7, pc}

0800de88 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800de88:	b580      	push	{r7, lr}
 800de8a:	b088      	sub	sp, #32
 800de8c:	af00      	add	r7, sp, #0
 800de8e:	60f8      	str	r0, [r7, #12]
 800de90:	60b9      	str	r1, [r7, #8]
 800de92:	4613      	mov	r3, r2
 800de94:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800de96:	2304      	movs	r3, #4
 800de98:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800de9a:	68bb      	ldr	r3, [r7, #8]
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d101      	bne.n	800dea4 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800dea0:	4b3e      	ldr	r3, [pc, #248]	; (800df9c <tcp_bind+0x114>)
 800dea2:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d109      	bne.n	800debe <tcp_bind+0x36>
 800deaa:	4b3d      	ldr	r3, [pc, #244]	; (800dfa0 <tcp_bind+0x118>)
 800deac:	f240 22a9 	movw	r2, #681	; 0x2a9
 800deb0:	493c      	ldr	r1, [pc, #240]	; (800dfa4 <tcp_bind+0x11c>)
 800deb2:	483d      	ldr	r0, [pc, #244]	; (800dfa8 <tcp_bind+0x120>)
 800deb4:	f008 fcc4 	bl	8016840 <iprintf>
 800deb8:	f06f 030f 	mvn.w	r3, #15
 800debc:	e06a      	b.n	800df94 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	7d1b      	ldrb	r3, [r3, #20]
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d009      	beq.n	800deda <tcp_bind+0x52>
 800dec6:	4b36      	ldr	r3, [pc, #216]	; (800dfa0 <tcp_bind+0x118>)
 800dec8:	f240 22ab 	movw	r2, #683	; 0x2ab
 800decc:	4937      	ldr	r1, [pc, #220]	; (800dfac <tcp_bind+0x124>)
 800dece:	4836      	ldr	r0, [pc, #216]	; (800dfa8 <tcp_bind+0x120>)
 800ded0:	f008 fcb6 	bl	8016840 <iprintf>
 800ded4:	f06f 0305 	mvn.w	r3, #5
 800ded8:	e05c      	b.n	800df94 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800deda:	88fb      	ldrh	r3, [r7, #6]
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d109      	bne.n	800def4 <tcp_bind+0x6c>
    port = tcp_new_port();
 800dee0:	f000 f9f0 	bl	800e2c4 <tcp_new_port>
 800dee4:	4603      	mov	r3, r0
 800dee6:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800dee8:	88fb      	ldrh	r3, [r7, #6]
 800deea:	2b00      	cmp	r3, #0
 800deec:	d135      	bne.n	800df5a <tcp_bind+0xd2>
      return ERR_BUF;
 800deee:	f06f 0301 	mvn.w	r3, #1
 800def2:	e04f      	b.n	800df94 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800def4:	2300      	movs	r3, #0
 800def6:	61fb      	str	r3, [r7, #28]
 800def8:	e02b      	b.n	800df52 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800defa:	4a2d      	ldr	r2, [pc, #180]	; (800dfb0 <tcp_bind+0x128>)
 800defc:	69fb      	ldr	r3, [r7, #28]
 800defe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	61bb      	str	r3, [r7, #24]
 800df06:	e01e      	b.n	800df46 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800df08:	69bb      	ldr	r3, [r7, #24]
 800df0a:	8adb      	ldrh	r3, [r3, #22]
 800df0c:	88fa      	ldrh	r2, [r7, #6]
 800df0e:	429a      	cmp	r2, r3
 800df10:	d116      	bne.n	800df40 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800df12:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800df14:	2b00      	cmp	r3, #0
 800df16:	d010      	beq.n	800df3a <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800df18:	69bb      	ldr	r3, [r7, #24]
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d00c      	beq.n	800df3a <tcp_bind+0xb2>
 800df20:	68bb      	ldr	r3, [r7, #8]
 800df22:	2b00      	cmp	r3, #0
 800df24:	d009      	beq.n	800df3a <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800df26:	68bb      	ldr	r3, [r7, #8]
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d005      	beq.n	800df3a <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800df2e:	69bb      	ldr	r3, [r7, #24]
 800df30:	681a      	ldr	r2, [r3, #0]
 800df32:	68bb      	ldr	r3, [r7, #8]
 800df34:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800df36:	429a      	cmp	r2, r3
 800df38:	d102      	bne.n	800df40 <tcp_bind+0xb8>
              return ERR_USE;
 800df3a:	f06f 0307 	mvn.w	r3, #7
 800df3e:	e029      	b.n	800df94 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800df40:	69bb      	ldr	r3, [r7, #24]
 800df42:	68db      	ldr	r3, [r3, #12]
 800df44:	61bb      	str	r3, [r7, #24]
 800df46:	69bb      	ldr	r3, [r7, #24]
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d1dd      	bne.n	800df08 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800df4c:	69fb      	ldr	r3, [r7, #28]
 800df4e:	3301      	adds	r3, #1
 800df50:	61fb      	str	r3, [r7, #28]
 800df52:	69fa      	ldr	r2, [r7, #28]
 800df54:	697b      	ldr	r3, [r7, #20]
 800df56:	429a      	cmp	r2, r3
 800df58:	dbcf      	blt.n	800defa <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800df5a:	68bb      	ldr	r3, [r7, #8]
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d00c      	beq.n	800df7a <tcp_bind+0xf2>
 800df60:	68bb      	ldr	r3, [r7, #8]
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	2b00      	cmp	r3, #0
 800df66:	d008      	beq.n	800df7a <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800df68:	68bb      	ldr	r3, [r7, #8]
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d002      	beq.n	800df74 <tcp_bind+0xec>
 800df6e:	68bb      	ldr	r3, [r7, #8]
 800df70:	681b      	ldr	r3, [r3, #0]
 800df72:	e000      	b.n	800df76 <tcp_bind+0xee>
 800df74:	2300      	movs	r3, #0
 800df76:	68fa      	ldr	r2, [r7, #12]
 800df78:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	88fa      	ldrh	r2, [r7, #6]
 800df7e:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800df80:	4b0c      	ldr	r3, [pc, #48]	; (800dfb4 <tcp_bind+0x12c>)
 800df82:	681a      	ldr	r2, [r3, #0]
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	60da      	str	r2, [r3, #12]
 800df88:	4a0a      	ldr	r2, [pc, #40]	; (800dfb4 <tcp_bind+0x12c>)
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	6013      	str	r3, [r2, #0]
 800df8e:	f005 fdef 	bl	8013b70 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800df92:	2300      	movs	r3, #0
}
 800df94:	4618      	mov	r0, r3
 800df96:	3720      	adds	r7, #32
 800df98:	46bd      	mov	sp, r7
 800df9a:	bd80      	pop	{r7, pc}
 800df9c:	0801d0e8 	.word	0x0801d0e8
 800dfa0:	080191ac 	.word	0x080191ac
 800dfa4:	08019340 	.word	0x08019340
 800dfa8:	080191f0 	.word	0x080191f0
 800dfac:	08019358 	.word	0x08019358
 800dfb0:	0801d0c0 	.word	0x0801d0c0
 800dfb4:	20008bac 	.word	0x20008bac

0800dfb8 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800dfb8:	b580      	push	{r7, lr}
 800dfba:	b084      	sub	sp, #16
 800dfbc:	af00      	add	r7, sp, #0
 800dfbe:	60f8      	str	r0, [r7, #12]
 800dfc0:	60b9      	str	r1, [r7, #8]
 800dfc2:	4613      	mov	r3, r2
 800dfc4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800dfc6:	68bb      	ldr	r3, [r7, #8]
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d106      	bne.n	800dfda <tcp_accept_null+0x22>
 800dfcc:	4b07      	ldr	r3, [pc, #28]	; (800dfec <tcp_accept_null+0x34>)
 800dfce:	f240 320f 	movw	r2, #783	; 0x30f
 800dfd2:	4907      	ldr	r1, [pc, #28]	; (800dff0 <tcp_accept_null+0x38>)
 800dfd4:	4807      	ldr	r0, [pc, #28]	; (800dff4 <tcp_accept_null+0x3c>)
 800dfd6:	f008 fc33 	bl	8016840 <iprintf>

  tcp_abort(pcb);
 800dfda:	68b8      	ldr	r0, [r7, #8]
 800dfdc:	f7ff ff48 	bl	800de70 <tcp_abort>

  return ERR_ABRT;
 800dfe0:	f06f 030c 	mvn.w	r3, #12
}
 800dfe4:	4618      	mov	r0, r3
 800dfe6:	3710      	adds	r7, #16
 800dfe8:	46bd      	mov	sp, r7
 800dfea:	bd80      	pop	{r7, pc}
 800dfec:	080191ac 	.word	0x080191ac
 800dff0:	08019380 	.word	0x08019380
 800dff4:	080191f0 	.word	0x080191f0

0800dff8 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 800dff8:	b580      	push	{r7, lr}
 800dffa:	b082      	sub	sp, #8
 800dffc:	af00      	add	r7, sp, #0
 800dffe:	6078      	str	r0, [r7, #4]
 800e000:	460b      	mov	r3, r1
 800e002:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 800e004:	78fb      	ldrb	r3, [r7, #3]
 800e006:	2200      	movs	r2, #0
 800e008:	4619      	mov	r1, r3
 800e00a:	6878      	ldr	r0, [r7, #4]
 800e00c:	f000 f806 	bl	800e01c <tcp_listen_with_backlog_and_err>
 800e010:	4603      	mov	r3, r0
}
 800e012:	4618      	mov	r0, r3
 800e014:	3708      	adds	r7, #8
 800e016:	46bd      	mov	sp, r7
 800e018:	bd80      	pop	{r7, pc}
	...

0800e01c <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800e01c:	b580      	push	{r7, lr}
 800e01e:	b088      	sub	sp, #32
 800e020:	af00      	add	r7, sp, #0
 800e022:	60f8      	str	r0, [r7, #12]
 800e024:	460b      	mov	r3, r1
 800e026:	607a      	str	r2, [r7, #4]
 800e028:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800e02a:	2300      	movs	r3, #0
 800e02c:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	2b00      	cmp	r3, #0
 800e032:	d109      	bne.n	800e048 <tcp_listen_with_backlog_and_err+0x2c>
 800e034:	4b47      	ldr	r3, [pc, #284]	; (800e154 <tcp_listen_with_backlog_and_err+0x138>)
 800e036:	f240 3259 	movw	r2, #857	; 0x359
 800e03a:	4947      	ldr	r1, [pc, #284]	; (800e158 <tcp_listen_with_backlog_and_err+0x13c>)
 800e03c:	4847      	ldr	r0, [pc, #284]	; (800e15c <tcp_listen_with_backlog_and_err+0x140>)
 800e03e:	f008 fbff 	bl	8016840 <iprintf>
 800e042:	23f0      	movs	r3, #240	; 0xf0
 800e044:	76fb      	strb	r3, [r7, #27]
 800e046:	e079      	b.n	800e13c <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800e048:	68fb      	ldr	r3, [r7, #12]
 800e04a:	7d1b      	ldrb	r3, [r3, #20]
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d009      	beq.n	800e064 <tcp_listen_with_backlog_and_err+0x48>
 800e050:	4b40      	ldr	r3, [pc, #256]	; (800e154 <tcp_listen_with_backlog_and_err+0x138>)
 800e052:	f240 325a 	movw	r2, #858	; 0x35a
 800e056:	4942      	ldr	r1, [pc, #264]	; (800e160 <tcp_listen_with_backlog_and_err+0x144>)
 800e058:	4840      	ldr	r0, [pc, #256]	; (800e15c <tcp_listen_with_backlog_and_err+0x140>)
 800e05a:	f008 fbf1 	bl	8016840 <iprintf>
 800e05e:	23f1      	movs	r3, #241	; 0xf1
 800e060:	76fb      	strb	r3, [r7, #27]
 800e062:	e06b      	b.n	800e13c <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	7d1b      	ldrb	r3, [r3, #20]
 800e068:	2b01      	cmp	r3, #1
 800e06a:	d104      	bne.n	800e076 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800e070:	23f7      	movs	r3, #247	; 0xf7
 800e072:	76fb      	strb	r3, [r7, #27]
    goto done;
 800e074:	e062      	b.n	800e13c <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800e076:	2002      	movs	r0, #2
 800e078:	f7fe fa28 	bl	800c4cc <memp_malloc>
 800e07c:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800e07e:	69fb      	ldr	r3, [r7, #28]
 800e080:	2b00      	cmp	r3, #0
 800e082:	d102      	bne.n	800e08a <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800e084:	23ff      	movs	r3, #255	; 0xff
 800e086:	76fb      	strb	r3, [r7, #27]
    goto done;
 800e088:	e058      	b.n	800e13c <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800e08a:	68fb      	ldr	r3, [r7, #12]
 800e08c:	691a      	ldr	r2, [r3, #16]
 800e08e:	69fb      	ldr	r3, [r7, #28]
 800e090:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	8ada      	ldrh	r2, [r3, #22]
 800e096:	69fb      	ldr	r3, [r7, #28]
 800e098:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800e09a:	69fb      	ldr	r3, [r7, #28]
 800e09c:	2201      	movs	r2, #1
 800e09e:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	7d5a      	ldrb	r2, [r3, #21]
 800e0a4:	69fb      	ldr	r3, [r7, #28]
 800e0a6:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	7a5a      	ldrb	r2, [r3, #9]
 800e0ac:	69fb      	ldr	r3, [r7, #28]
 800e0ae:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800e0b0:	69fb      	ldr	r3, [r7, #28]
 800e0b2:	2200      	movs	r2, #0
 800e0b4:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	7ada      	ldrb	r2, [r3, #11]
 800e0ba:	69fb      	ldr	r3, [r7, #28]
 800e0bc:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	7a9a      	ldrb	r2, [r3, #10]
 800e0c2:	69fb      	ldr	r3, [r7, #28]
 800e0c4:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	681a      	ldr	r2, [r3, #0]
 800e0ca:	69fb      	ldr	r3, [r7, #28]
 800e0cc:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800e0ce:	68fb      	ldr	r3, [r7, #12]
 800e0d0:	8adb      	ldrh	r3, [r3, #22]
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d021      	beq.n	800e11a <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800e0d6:	4b23      	ldr	r3, [pc, #140]	; (800e164 <tcp_listen_with_backlog_and_err+0x148>)
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	68fa      	ldr	r2, [r7, #12]
 800e0dc:	429a      	cmp	r2, r3
 800e0de:	d105      	bne.n	800e0ec <tcp_listen_with_backlog_and_err+0xd0>
 800e0e0:	4b20      	ldr	r3, [pc, #128]	; (800e164 <tcp_listen_with_backlog_and_err+0x148>)
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	68db      	ldr	r3, [r3, #12]
 800e0e6:	4a1f      	ldr	r2, [pc, #124]	; (800e164 <tcp_listen_with_backlog_and_err+0x148>)
 800e0e8:	6013      	str	r3, [r2, #0]
 800e0ea:	e013      	b.n	800e114 <tcp_listen_with_backlog_and_err+0xf8>
 800e0ec:	4b1d      	ldr	r3, [pc, #116]	; (800e164 <tcp_listen_with_backlog_and_err+0x148>)
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	617b      	str	r3, [r7, #20]
 800e0f2:	e00c      	b.n	800e10e <tcp_listen_with_backlog_and_err+0xf2>
 800e0f4:	697b      	ldr	r3, [r7, #20]
 800e0f6:	68db      	ldr	r3, [r3, #12]
 800e0f8:	68fa      	ldr	r2, [r7, #12]
 800e0fa:	429a      	cmp	r2, r3
 800e0fc:	d104      	bne.n	800e108 <tcp_listen_with_backlog_and_err+0xec>
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	68da      	ldr	r2, [r3, #12]
 800e102:	697b      	ldr	r3, [r7, #20]
 800e104:	60da      	str	r2, [r3, #12]
 800e106:	e005      	b.n	800e114 <tcp_listen_with_backlog_and_err+0xf8>
 800e108:	697b      	ldr	r3, [r7, #20]
 800e10a:	68db      	ldr	r3, [r3, #12]
 800e10c:	617b      	str	r3, [r7, #20]
 800e10e:	697b      	ldr	r3, [r7, #20]
 800e110:	2b00      	cmp	r3, #0
 800e112:	d1ef      	bne.n	800e0f4 <tcp_listen_with_backlog_and_err+0xd8>
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	2200      	movs	r2, #0
 800e118:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800e11a:	68f8      	ldr	r0, [r7, #12]
 800e11c:	f7ff fbc0 	bl	800d8a0 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800e120:	69fb      	ldr	r3, [r7, #28]
 800e122:	4a11      	ldr	r2, [pc, #68]	; (800e168 <tcp_listen_with_backlog_and_err+0x14c>)
 800e124:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800e126:	4b11      	ldr	r3, [pc, #68]	; (800e16c <tcp_listen_with_backlog_and_err+0x150>)
 800e128:	681a      	ldr	r2, [r3, #0]
 800e12a:	69fb      	ldr	r3, [r7, #28]
 800e12c:	60da      	str	r2, [r3, #12]
 800e12e:	4a0f      	ldr	r2, [pc, #60]	; (800e16c <tcp_listen_with_backlog_and_err+0x150>)
 800e130:	69fb      	ldr	r3, [r7, #28]
 800e132:	6013      	str	r3, [r2, #0]
 800e134:	f005 fd1c 	bl	8013b70 <tcp_timer_needed>
  res = ERR_OK;
 800e138:	2300      	movs	r3, #0
 800e13a:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d002      	beq.n	800e148 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	7efa      	ldrb	r2, [r7, #27]
 800e146:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800e148:	69fb      	ldr	r3, [r7, #28]
}
 800e14a:	4618      	mov	r0, r3
 800e14c:	3720      	adds	r7, #32
 800e14e:	46bd      	mov	sp, r7
 800e150:	bd80      	pop	{r7, pc}
 800e152:	bf00      	nop
 800e154:	080191ac 	.word	0x080191ac
 800e158:	080193a0 	.word	0x080193a0
 800e15c:	080191f0 	.word	0x080191f0
 800e160:	080193d0 	.word	0x080193d0
 800e164:	20008bac 	.word	0x20008bac
 800e168:	0800dfb9 	.word	0x0800dfb9
 800e16c:	20008bb0 	.word	0x20008bb0

0800e170 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800e170:	b580      	push	{r7, lr}
 800e172:	b084      	sub	sp, #16
 800e174:	af00      	add	r7, sp, #0
 800e176:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d106      	bne.n	800e18c <tcp_update_rcv_ann_wnd+0x1c>
 800e17e:	4b25      	ldr	r3, [pc, #148]	; (800e214 <tcp_update_rcv_ann_wnd+0xa4>)
 800e180:	f240 32a6 	movw	r2, #934	; 0x3a6
 800e184:	4924      	ldr	r1, [pc, #144]	; (800e218 <tcp_update_rcv_ann_wnd+0xa8>)
 800e186:	4825      	ldr	r0, [pc, #148]	; (800e21c <tcp_update_rcv_ann_wnd+0xac>)
 800e188:	f008 fb5a 	bl	8016840 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e190:	687a      	ldr	r2, [r7, #4]
 800e192:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800e194:	4413      	add	r3, r2
 800e196:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e19c:	687a      	ldr	r2, [r7, #4]
 800e19e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800e1a0:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800e1a4:	bf28      	it	cs
 800e1a6:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800e1aa:	b292      	uxth	r2, r2
 800e1ac:	4413      	add	r3, r2
 800e1ae:	68fa      	ldr	r2, [r7, #12]
 800e1b0:	1ad3      	subs	r3, r2, r3
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	db08      	blt.n	800e1c8 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1c2:	68fa      	ldr	r2, [r7, #12]
 800e1c4:	1ad3      	subs	r3, r2, r3
 800e1c6:	e020      	b.n	800e20a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1d0:	1ad3      	subs	r3, r2, r3
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	dd03      	ble.n	800e1de <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	2200      	movs	r2, #0
 800e1da:	855a      	strh	r2, [r3, #42]	; 0x2a
 800e1dc:	e014      	b.n	800e208 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1e6:	1ad3      	subs	r3, r2, r3
 800e1e8:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800e1ea:	68bb      	ldr	r3, [r7, #8]
 800e1ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e1f0:	d306      	bcc.n	800e200 <tcp_update_rcv_ann_wnd+0x90>
 800e1f2:	4b08      	ldr	r3, [pc, #32]	; (800e214 <tcp_update_rcv_ann_wnd+0xa4>)
 800e1f4:	f240 32b6 	movw	r2, #950	; 0x3b6
 800e1f8:	4909      	ldr	r1, [pc, #36]	; (800e220 <tcp_update_rcv_ann_wnd+0xb0>)
 800e1fa:	4808      	ldr	r0, [pc, #32]	; (800e21c <tcp_update_rcv_ann_wnd+0xac>)
 800e1fc:	f008 fb20 	bl	8016840 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800e200:	68bb      	ldr	r3, [r7, #8]
 800e202:	b29a      	uxth	r2, r3
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800e208:	2300      	movs	r3, #0
  }
}
 800e20a:	4618      	mov	r0, r3
 800e20c:	3710      	adds	r7, #16
 800e20e:	46bd      	mov	sp, r7
 800e210:	bd80      	pop	{r7, pc}
 800e212:	bf00      	nop
 800e214:	080191ac 	.word	0x080191ac
 800e218:	08019408 	.word	0x08019408
 800e21c:	080191f0 	.word	0x080191f0
 800e220:	0801942c 	.word	0x0801942c

0800e224 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800e224:	b580      	push	{r7, lr}
 800e226:	b084      	sub	sp, #16
 800e228:	af00      	add	r7, sp, #0
 800e22a:	6078      	str	r0, [r7, #4]
 800e22c:	460b      	mov	r3, r1
 800e22e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	2b00      	cmp	r3, #0
 800e234:	d107      	bne.n	800e246 <tcp_recved+0x22>
 800e236:	4b1f      	ldr	r3, [pc, #124]	; (800e2b4 <tcp_recved+0x90>)
 800e238:	f240 32cf 	movw	r2, #975	; 0x3cf
 800e23c:	491e      	ldr	r1, [pc, #120]	; (800e2b8 <tcp_recved+0x94>)
 800e23e:	481f      	ldr	r0, [pc, #124]	; (800e2bc <tcp_recved+0x98>)
 800e240:	f008 fafe 	bl	8016840 <iprintf>
 800e244:	e032      	b.n	800e2ac <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	7d1b      	ldrb	r3, [r3, #20]
 800e24a:	2b01      	cmp	r3, #1
 800e24c:	d106      	bne.n	800e25c <tcp_recved+0x38>
 800e24e:	4b19      	ldr	r3, [pc, #100]	; (800e2b4 <tcp_recved+0x90>)
 800e250:	f240 32d2 	movw	r2, #978	; 0x3d2
 800e254:	491a      	ldr	r1, [pc, #104]	; (800e2c0 <tcp_recved+0x9c>)
 800e256:	4819      	ldr	r0, [pc, #100]	; (800e2bc <tcp_recved+0x98>)
 800e258:	f008 faf2 	bl	8016840 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e260:	887b      	ldrh	r3, [r7, #2]
 800e262:	4413      	add	r3, r2
 800e264:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800e266:	89fb      	ldrh	r3, [r7, #14]
 800e268:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e26c:	d804      	bhi.n	800e278 <tcp_recved+0x54>
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e272:	89fa      	ldrh	r2, [r7, #14]
 800e274:	429a      	cmp	r2, r3
 800e276:	d204      	bcs.n	800e282 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800e27e:	851a      	strh	r2, [r3, #40]	; 0x28
 800e280:	e002      	b.n	800e288 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	89fa      	ldrh	r2, [r7, #14]
 800e286:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800e288:	6878      	ldr	r0, [r7, #4]
 800e28a:	f7ff ff71 	bl	800e170 <tcp_update_rcv_ann_wnd>
 800e28e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800e290:	68bb      	ldr	r3, [r7, #8]
 800e292:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800e296:	d309      	bcc.n	800e2ac <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	8b5b      	ldrh	r3, [r3, #26]
 800e29c:	f043 0302 	orr.w	r3, r3, #2
 800e2a0:	b29a      	uxth	r2, r3
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e2a6:	6878      	ldr	r0, [r7, #4]
 800e2a8:	f004 fcec 	bl	8012c84 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800e2ac:	3710      	adds	r7, #16
 800e2ae:	46bd      	mov	sp, r7
 800e2b0:	bd80      	pop	{r7, pc}
 800e2b2:	bf00      	nop
 800e2b4:	080191ac 	.word	0x080191ac
 800e2b8:	08019448 	.word	0x08019448
 800e2bc:	080191f0 	.word	0x080191f0
 800e2c0:	08019460 	.word	0x08019460

0800e2c4 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800e2c4:	b480      	push	{r7}
 800e2c6:	b083      	sub	sp, #12
 800e2c8:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800e2ca:	2300      	movs	r3, #0
 800e2cc:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800e2ce:	4b1e      	ldr	r3, [pc, #120]	; (800e348 <tcp_new_port+0x84>)
 800e2d0:	881b      	ldrh	r3, [r3, #0]
 800e2d2:	3301      	adds	r3, #1
 800e2d4:	b29a      	uxth	r2, r3
 800e2d6:	4b1c      	ldr	r3, [pc, #112]	; (800e348 <tcp_new_port+0x84>)
 800e2d8:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800e2da:	4b1b      	ldr	r3, [pc, #108]	; (800e348 <tcp_new_port+0x84>)
 800e2dc:	881b      	ldrh	r3, [r3, #0]
 800e2de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e2e2:	4293      	cmp	r3, r2
 800e2e4:	d103      	bne.n	800e2ee <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800e2e6:	4b18      	ldr	r3, [pc, #96]	; (800e348 <tcp_new_port+0x84>)
 800e2e8:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800e2ec:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800e2ee:	2300      	movs	r3, #0
 800e2f0:	71fb      	strb	r3, [r7, #7]
 800e2f2:	e01e      	b.n	800e332 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800e2f4:	79fb      	ldrb	r3, [r7, #7]
 800e2f6:	4a15      	ldr	r2, [pc, #84]	; (800e34c <tcp_new_port+0x88>)
 800e2f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	603b      	str	r3, [r7, #0]
 800e300:	e011      	b.n	800e326 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800e302:	683b      	ldr	r3, [r7, #0]
 800e304:	8ada      	ldrh	r2, [r3, #22]
 800e306:	4b10      	ldr	r3, [pc, #64]	; (800e348 <tcp_new_port+0x84>)
 800e308:	881b      	ldrh	r3, [r3, #0]
 800e30a:	429a      	cmp	r2, r3
 800e30c:	d108      	bne.n	800e320 <tcp_new_port+0x5c>
        n++;
 800e30e:	88bb      	ldrh	r3, [r7, #4]
 800e310:	3301      	adds	r3, #1
 800e312:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800e314:	88bb      	ldrh	r3, [r7, #4]
 800e316:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e31a:	d3d8      	bcc.n	800e2ce <tcp_new_port+0xa>
          return 0;
 800e31c:	2300      	movs	r3, #0
 800e31e:	e00d      	b.n	800e33c <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800e320:	683b      	ldr	r3, [r7, #0]
 800e322:	68db      	ldr	r3, [r3, #12]
 800e324:	603b      	str	r3, [r7, #0]
 800e326:	683b      	ldr	r3, [r7, #0]
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d1ea      	bne.n	800e302 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800e32c:	79fb      	ldrb	r3, [r7, #7]
 800e32e:	3301      	adds	r3, #1
 800e330:	71fb      	strb	r3, [r7, #7]
 800e332:	79fb      	ldrb	r3, [r7, #7]
 800e334:	2b03      	cmp	r3, #3
 800e336:	d9dd      	bls.n	800e2f4 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800e338:	4b03      	ldr	r3, [pc, #12]	; (800e348 <tcp_new_port+0x84>)
 800e33a:	881b      	ldrh	r3, [r3, #0]
}
 800e33c:	4618      	mov	r0, r3
 800e33e:	370c      	adds	r7, #12
 800e340:	46bd      	mov	sp, r7
 800e342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e346:	4770      	bx	lr
 800e348:	20000060 	.word	0x20000060
 800e34c:	0801d0c0 	.word	0x0801d0c0

0800e350 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 800e350:	b580      	push	{r7, lr}
 800e352:	b08a      	sub	sp, #40	; 0x28
 800e354:	af00      	add	r7, sp, #0
 800e356:	60f8      	str	r0, [r7, #12]
 800e358:	60b9      	str	r1, [r7, #8]
 800e35a:	603b      	str	r3, [r7, #0]
 800e35c:	4613      	mov	r3, r2
 800e35e:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 800e360:	2300      	movs	r3, #0
 800e362:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	2b00      	cmp	r3, #0
 800e368:	d109      	bne.n	800e37e <tcp_connect+0x2e>
 800e36a:	4b7d      	ldr	r3, [pc, #500]	; (800e560 <tcp_connect+0x210>)
 800e36c:	f240 4235 	movw	r2, #1077	; 0x435
 800e370:	497c      	ldr	r1, [pc, #496]	; (800e564 <tcp_connect+0x214>)
 800e372:	487d      	ldr	r0, [pc, #500]	; (800e568 <tcp_connect+0x218>)
 800e374:	f008 fa64 	bl	8016840 <iprintf>
 800e378:	f06f 030f 	mvn.w	r3, #15
 800e37c:	e0ec      	b.n	800e558 <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800e37e:	68bb      	ldr	r3, [r7, #8]
 800e380:	2b00      	cmp	r3, #0
 800e382:	d109      	bne.n	800e398 <tcp_connect+0x48>
 800e384:	4b76      	ldr	r3, [pc, #472]	; (800e560 <tcp_connect+0x210>)
 800e386:	f240 4236 	movw	r2, #1078	; 0x436
 800e38a:	4978      	ldr	r1, [pc, #480]	; (800e56c <tcp_connect+0x21c>)
 800e38c:	4876      	ldr	r0, [pc, #472]	; (800e568 <tcp_connect+0x218>)
 800e38e:	f008 fa57 	bl	8016840 <iprintf>
 800e392:	f06f 030f 	mvn.w	r3, #15
 800e396:	e0df      	b.n	800e558 <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 800e398:	68fb      	ldr	r3, [r7, #12]
 800e39a:	7d1b      	ldrb	r3, [r3, #20]
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	d009      	beq.n	800e3b4 <tcp_connect+0x64>
 800e3a0:	4b6f      	ldr	r3, [pc, #444]	; (800e560 <tcp_connect+0x210>)
 800e3a2:	f44f 6287 	mov.w	r2, #1080	; 0x438
 800e3a6:	4972      	ldr	r1, [pc, #456]	; (800e570 <tcp_connect+0x220>)
 800e3a8:	486f      	ldr	r0, [pc, #444]	; (800e568 <tcp_connect+0x218>)
 800e3aa:	f008 fa49 	bl	8016840 <iprintf>
 800e3ae:	f06f 0309 	mvn.w	r3, #9
 800e3b2:	e0d1      	b.n	800e558 <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 800e3b4:	68bb      	ldr	r3, [r7, #8]
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d002      	beq.n	800e3c0 <tcp_connect+0x70>
 800e3ba:	68bb      	ldr	r3, [r7, #8]
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	e000      	b.n	800e3c2 <tcp_connect+0x72>
 800e3c0:	2300      	movs	r3, #0
 800e3c2:	68fa      	ldr	r2, [r7, #12]
 800e3c4:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	88fa      	ldrh	r2, [r7, #6]
 800e3ca:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	7a1b      	ldrb	r3, [r3, #8]
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d006      	beq.n	800e3e2 <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 800e3d4:	68fb      	ldr	r3, [r7, #12]
 800e3d6:	7a1b      	ldrb	r3, [r3, #8]
 800e3d8:	4618      	mov	r0, r3
 800e3da:	f7fe fbfd 	bl	800cbd8 <netif_get_by_index>
 800e3de:	6278      	str	r0, [r7, #36]	; 0x24
 800e3e0:	e005      	b.n	800e3ee <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800e3e2:	68fb      	ldr	r3, [r7, #12]
 800e3e4:	3304      	adds	r3, #4
 800e3e6:	4618      	mov	r0, r3
 800e3e8:	f006 ffda 	bl	80153a0 <ip4_route>
 800e3ec:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 800e3ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d102      	bne.n	800e3fa <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 800e3f4:	f06f 0303 	mvn.w	r3, #3
 800e3f8:	e0ae      	b.n	800e558 <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d003      	beq.n	800e408 <tcp_connect+0xb8>
 800e400:	68fb      	ldr	r3, [r7, #12]
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	2b00      	cmp	r3, #0
 800e406:	d111      	bne.n	800e42c <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 800e408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d002      	beq.n	800e414 <tcp_connect+0xc4>
 800e40e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e410:	3304      	adds	r3, #4
 800e412:	e000      	b.n	800e416 <tcp_connect+0xc6>
 800e414:	2300      	movs	r3, #0
 800e416:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 800e418:	69fb      	ldr	r3, [r7, #28]
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d102      	bne.n	800e424 <tcp_connect+0xd4>
      return ERR_RTE;
 800e41e:	f06f 0303 	mvn.w	r3, #3
 800e422:	e099      	b.n	800e558 <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800e424:	69fb      	ldr	r3, [r7, #28]
 800e426:	681a      	ldr	r2, [r3, #0]
 800e428:	68fb      	ldr	r3, [r7, #12]
 800e42a:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	8adb      	ldrh	r3, [r3, #22]
 800e430:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 800e432:	68fb      	ldr	r3, [r7, #12]
 800e434:	8adb      	ldrh	r3, [r3, #22]
 800e436:	2b00      	cmp	r3, #0
 800e438:	d10c      	bne.n	800e454 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 800e43a:	f7ff ff43 	bl	800e2c4 <tcp_new_port>
 800e43e:	4603      	mov	r3, r0
 800e440:	461a      	mov	r2, r3
 800e442:	68fb      	ldr	r3, [r7, #12]
 800e444:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	8adb      	ldrh	r3, [r3, #22]
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d102      	bne.n	800e454 <tcp_connect+0x104>
      return ERR_BUF;
 800e44e:	f06f 0301 	mvn.w	r3, #1
 800e452:	e081      	b.n	800e558 <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 800e454:	68f8      	ldr	r0, [r7, #12]
 800e456:	f001 f88d 	bl	800f574 <tcp_next_iss>
 800e45a:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 800e45c:	68fb      	ldr	r3, [r7, #12]
 800e45e:	2200      	movs	r2, #0
 800e460:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	697a      	ldr	r2, [r7, #20]
 800e466:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 800e468:	697b      	ldr	r3, [r7, #20]
 800e46a:	1e5a      	subs	r2, r3, #1
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 800e470:	697b      	ldr	r3, [r7, #20]
 800e472:	1e5a      	subs	r2, r3, #1
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 800e478:	697b      	ldr	r3, [r7, #20]
 800e47a:	1e5a      	subs	r2, r3, #1
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800e486:	855a      	strh	r2, [r3, #42]	; 0x2a
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800e48c:	68fb      	ldr	r3, [r7, #12]
 800e48e:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800e490:	68fb      	ldr	r3, [r7, #12]
 800e492:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 800e498:	68fb      	ldr	r3, [r7, #12]
 800e49a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800e49e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	f44f 7206 	mov.w	r2, #536	; 0x218
 800e4a8:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	3304      	adds	r3, #4
 800e4b2:	461a      	mov	r2, r3
 800e4b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e4b6:	f001 f883 	bl	800f5c0 <tcp_eff_send_mss_netif>
 800e4ba:	4603      	mov	r3, r0
 800e4bc:	461a      	mov	r2, r3
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 800e4c2:	68fb      	ldr	r3, [r7, #12]
 800e4c4:	2201      	movs	r2, #1
 800e4c6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	683a      	ldr	r2, [r7, #0]
 800e4ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 800e4d2:	2102      	movs	r1, #2
 800e4d4:	68f8      	ldr	r0, [r7, #12]
 800e4d6:	f004 fae7 	bl	8012aa8 <tcp_enqueue_flags>
 800e4da:	4603      	mov	r3, r0
 800e4dc:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 800e4de:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d136      	bne.n	800e554 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	2202      	movs	r2, #2
 800e4ea:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 800e4ec:	8b7b      	ldrh	r3, [r7, #26]
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d021      	beq.n	800e536 <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800e4f2:	4b20      	ldr	r3, [pc, #128]	; (800e574 <tcp_connect+0x224>)
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	68fa      	ldr	r2, [r7, #12]
 800e4f8:	429a      	cmp	r2, r3
 800e4fa:	d105      	bne.n	800e508 <tcp_connect+0x1b8>
 800e4fc:	4b1d      	ldr	r3, [pc, #116]	; (800e574 <tcp_connect+0x224>)
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	68db      	ldr	r3, [r3, #12]
 800e502:	4a1c      	ldr	r2, [pc, #112]	; (800e574 <tcp_connect+0x224>)
 800e504:	6013      	str	r3, [r2, #0]
 800e506:	e013      	b.n	800e530 <tcp_connect+0x1e0>
 800e508:	4b1a      	ldr	r3, [pc, #104]	; (800e574 <tcp_connect+0x224>)
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	623b      	str	r3, [r7, #32]
 800e50e:	e00c      	b.n	800e52a <tcp_connect+0x1da>
 800e510:	6a3b      	ldr	r3, [r7, #32]
 800e512:	68db      	ldr	r3, [r3, #12]
 800e514:	68fa      	ldr	r2, [r7, #12]
 800e516:	429a      	cmp	r2, r3
 800e518:	d104      	bne.n	800e524 <tcp_connect+0x1d4>
 800e51a:	68fb      	ldr	r3, [r7, #12]
 800e51c:	68da      	ldr	r2, [r3, #12]
 800e51e:	6a3b      	ldr	r3, [r7, #32]
 800e520:	60da      	str	r2, [r3, #12]
 800e522:	e005      	b.n	800e530 <tcp_connect+0x1e0>
 800e524:	6a3b      	ldr	r3, [r7, #32]
 800e526:	68db      	ldr	r3, [r3, #12]
 800e528:	623b      	str	r3, [r7, #32]
 800e52a:	6a3b      	ldr	r3, [r7, #32]
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d1ef      	bne.n	800e510 <tcp_connect+0x1c0>
 800e530:	68fb      	ldr	r3, [r7, #12]
 800e532:	2200      	movs	r2, #0
 800e534:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 800e536:	4b10      	ldr	r3, [pc, #64]	; (800e578 <tcp_connect+0x228>)
 800e538:	681a      	ldr	r2, [r3, #0]
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	60da      	str	r2, [r3, #12]
 800e53e:	4a0e      	ldr	r2, [pc, #56]	; (800e578 <tcp_connect+0x228>)
 800e540:	68fb      	ldr	r3, [r7, #12]
 800e542:	6013      	str	r3, [r2, #0]
 800e544:	f005 fb14 	bl	8013b70 <tcp_timer_needed>
 800e548:	4b0c      	ldr	r3, [pc, #48]	; (800e57c <tcp_connect+0x22c>)
 800e54a:	2201      	movs	r2, #1
 800e54c:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 800e54e:	68f8      	ldr	r0, [r7, #12]
 800e550:	f004 fb98 	bl	8012c84 <tcp_output>
  }
  return ret;
 800e554:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800e558:	4618      	mov	r0, r3
 800e55a:	3728      	adds	r7, #40	; 0x28
 800e55c:	46bd      	mov	sp, r7
 800e55e:	bd80      	pop	{r7, pc}
 800e560:	080191ac 	.word	0x080191ac
 800e564:	08019488 	.word	0x08019488
 800e568:	080191f0 	.word	0x080191f0
 800e56c:	080194a4 	.word	0x080194a4
 800e570:	080194c0 	.word	0x080194c0
 800e574:	20008bac 	.word	0x20008bac
 800e578:	20008bb4 	.word	0x20008bb4
 800e57c:	20008bbc 	.word	0x20008bbc

0800e580 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800e580:	b5b0      	push	{r4, r5, r7, lr}
 800e582:	b090      	sub	sp, #64	; 0x40
 800e584:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800e586:	2300      	movs	r3, #0
 800e588:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800e58c:	4b94      	ldr	r3, [pc, #592]	; (800e7e0 <tcp_slowtmr+0x260>)
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	3301      	adds	r3, #1
 800e592:	4a93      	ldr	r2, [pc, #588]	; (800e7e0 <tcp_slowtmr+0x260>)
 800e594:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800e596:	4b93      	ldr	r3, [pc, #588]	; (800e7e4 <tcp_slowtmr+0x264>)
 800e598:	781b      	ldrb	r3, [r3, #0]
 800e59a:	3301      	adds	r3, #1
 800e59c:	b2da      	uxtb	r2, r3
 800e59e:	4b91      	ldr	r3, [pc, #580]	; (800e7e4 <tcp_slowtmr+0x264>)
 800e5a0:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800e5a2:	2300      	movs	r3, #0
 800e5a4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800e5a6:	4b90      	ldr	r3, [pc, #576]	; (800e7e8 <tcp_slowtmr+0x268>)
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800e5ac:	e29d      	b.n	800eaea <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800e5ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5b0:	7d1b      	ldrb	r3, [r3, #20]
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	d106      	bne.n	800e5c4 <tcp_slowtmr+0x44>
 800e5b6:	4b8d      	ldr	r3, [pc, #564]	; (800e7ec <tcp_slowtmr+0x26c>)
 800e5b8:	f240 42be 	movw	r2, #1214	; 0x4be
 800e5bc:	498c      	ldr	r1, [pc, #560]	; (800e7f0 <tcp_slowtmr+0x270>)
 800e5be:	488d      	ldr	r0, [pc, #564]	; (800e7f4 <tcp_slowtmr+0x274>)
 800e5c0:	f008 f93e 	bl	8016840 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800e5c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5c6:	7d1b      	ldrb	r3, [r3, #20]
 800e5c8:	2b01      	cmp	r3, #1
 800e5ca:	d106      	bne.n	800e5da <tcp_slowtmr+0x5a>
 800e5cc:	4b87      	ldr	r3, [pc, #540]	; (800e7ec <tcp_slowtmr+0x26c>)
 800e5ce:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800e5d2:	4989      	ldr	r1, [pc, #548]	; (800e7f8 <tcp_slowtmr+0x278>)
 800e5d4:	4887      	ldr	r0, [pc, #540]	; (800e7f4 <tcp_slowtmr+0x274>)
 800e5d6:	f008 f933 	bl	8016840 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800e5da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5dc:	7d1b      	ldrb	r3, [r3, #20]
 800e5de:	2b0a      	cmp	r3, #10
 800e5e0:	d106      	bne.n	800e5f0 <tcp_slowtmr+0x70>
 800e5e2:	4b82      	ldr	r3, [pc, #520]	; (800e7ec <tcp_slowtmr+0x26c>)
 800e5e4:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800e5e8:	4984      	ldr	r1, [pc, #528]	; (800e7fc <tcp_slowtmr+0x27c>)
 800e5ea:	4882      	ldr	r0, [pc, #520]	; (800e7f4 <tcp_slowtmr+0x274>)
 800e5ec:	f008 f928 	bl	8016840 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800e5f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5f2:	7f9a      	ldrb	r2, [r3, #30]
 800e5f4:	4b7b      	ldr	r3, [pc, #492]	; (800e7e4 <tcp_slowtmr+0x264>)
 800e5f6:	781b      	ldrb	r3, [r3, #0]
 800e5f8:	429a      	cmp	r2, r3
 800e5fa:	d105      	bne.n	800e608 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800e5fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5fe:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800e600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e602:	68db      	ldr	r3, [r3, #12]
 800e604:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800e606:	e270      	b.n	800eaea <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800e608:	4b76      	ldr	r3, [pc, #472]	; (800e7e4 <tcp_slowtmr+0x264>)
 800e60a:	781a      	ldrb	r2, [r3, #0]
 800e60c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e60e:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800e610:	2300      	movs	r3, #0
 800e612:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800e616:	2300      	movs	r3, #0
 800e618:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800e61c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e61e:	7d1b      	ldrb	r3, [r3, #20]
 800e620:	2b02      	cmp	r3, #2
 800e622:	d10a      	bne.n	800e63a <tcp_slowtmr+0xba>
 800e624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e626:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e62a:	2b05      	cmp	r3, #5
 800e62c:	d905      	bls.n	800e63a <tcp_slowtmr+0xba>
      ++pcb_remove;
 800e62e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e632:	3301      	adds	r3, #1
 800e634:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e638:	e11e      	b.n	800e878 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800e63a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e63c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e640:	2b0b      	cmp	r3, #11
 800e642:	d905      	bls.n	800e650 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800e644:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e648:	3301      	adds	r3, #1
 800e64a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e64e:	e113      	b.n	800e878 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800e650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e652:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e656:	2b00      	cmp	r3, #0
 800e658:	d075      	beq.n	800e746 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800e65a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e65c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e65e:	2b00      	cmp	r3, #0
 800e660:	d006      	beq.n	800e670 <tcp_slowtmr+0xf0>
 800e662:	4b62      	ldr	r3, [pc, #392]	; (800e7ec <tcp_slowtmr+0x26c>)
 800e664:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800e668:	4965      	ldr	r1, [pc, #404]	; (800e800 <tcp_slowtmr+0x280>)
 800e66a:	4862      	ldr	r0, [pc, #392]	; (800e7f4 <tcp_slowtmr+0x274>)
 800e66c:	f008 f8e8 	bl	8016840 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800e670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e672:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e674:	2b00      	cmp	r3, #0
 800e676:	d106      	bne.n	800e686 <tcp_slowtmr+0x106>
 800e678:	4b5c      	ldr	r3, [pc, #368]	; (800e7ec <tcp_slowtmr+0x26c>)
 800e67a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800e67e:	4961      	ldr	r1, [pc, #388]	; (800e804 <tcp_slowtmr+0x284>)
 800e680:	485c      	ldr	r0, [pc, #368]	; (800e7f4 <tcp_slowtmr+0x274>)
 800e682:	f008 f8dd 	bl	8016840 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800e686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e688:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800e68c:	2b0b      	cmp	r3, #11
 800e68e:	d905      	bls.n	800e69c <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800e690:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e694:	3301      	adds	r3, #1
 800e696:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e69a:	e0ed      	b.n	800e878 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800e69c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e69e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e6a2:	3b01      	subs	r3, #1
 800e6a4:	4a58      	ldr	r2, [pc, #352]	; (800e808 <tcp_slowtmr+0x288>)
 800e6a6:	5cd3      	ldrb	r3, [r2, r3]
 800e6a8:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800e6aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6ac:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e6b0:	7c7a      	ldrb	r2, [r7, #17]
 800e6b2:	429a      	cmp	r2, r3
 800e6b4:	d907      	bls.n	800e6c6 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800e6b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6b8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e6bc:	3301      	adds	r3, #1
 800e6be:	b2da      	uxtb	r2, r3
 800e6c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6c2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800e6c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6c8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e6cc:	7c7a      	ldrb	r2, [r7, #17]
 800e6ce:	429a      	cmp	r2, r3
 800e6d0:	f200 80d2 	bhi.w	800e878 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800e6d4:	2301      	movs	r3, #1
 800e6d6:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800e6d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6da:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d108      	bne.n	800e6f4 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800e6e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e6e4:	f005 f976 	bl	80139d4 <tcp_zero_window_probe>
 800e6e8:	4603      	mov	r3, r0
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d014      	beq.n	800e718 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800e6ee:	2300      	movs	r3, #0
 800e6f0:	623b      	str	r3, [r7, #32]
 800e6f2:	e011      	b.n	800e718 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800e6f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6f6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e6fa:	4619      	mov	r1, r3
 800e6fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e6fe:	f004 f83b 	bl	8012778 <tcp_split_unsent_seg>
 800e702:	4603      	mov	r3, r0
 800e704:	2b00      	cmp	r3, #0
 800e706:	d107      	bne.n	800e718 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800e708:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e70a:	f004 fabb 	bl	8012c84 <tcp_output>
 800e70e:	4603      	mov	r3, r0
 800e710:	2b00      	cmp	r3, #0
 800e712:	d101      	bne.n	800e718 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800e714:	2300      	movs	r3, #0
 800e716:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800e718:	6a3b      	ldr	r3, [r7, #32]
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	f000 80ac 	beq.w	800e878 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800e720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e722:	2200      	movs	r2, #0
 800e724:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800e728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e72a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e72e:	2b06      	cmp	r3, #6
 800e730:	f200 80a2 	bhi.w	800e878 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800e734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e736:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e73a:	3301      	adds	r3, #1
 800e73c:	b2da      	uxtb	r2, r3
 800e73e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e740:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800e744:	e098      	b.n	800e878 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800e746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e748:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	db0f      	blt.n	800e770 <tcp_slowtmr+0x1f0>
 800e750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e752:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e756:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800e75a:	4293      	cmp	r3, r2
 800e75c:	d008      	beq.n	800e770 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800e75e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e760:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e764:	b29b      	uxth	r3, r3
 800e766:	3301      	adds	r3, #1
 800e768:	b29b      	uxth	r3, r3
 800e76a:	b21a      	sxth	r2, r3
 800e76c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e76e:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800e770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e772:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800e776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e778:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800e77c:	429a      	cmp	r2, r3
 800e77e:	db7b      	blt.n	800e878 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800e780:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e782:	f004 fd71 	bl	8013268 <tcp_rexmit_rto_prepare>
 800e786:	4603      	mov	r3, r0
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d007      	beq.n	800e79c <tcp_slowtmr+0x21c>
 800e78c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e78e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e790:	2b00      	cmp	r3, #0
 800e792:	d171      	bne.n	800e878 <tcp_slowtmr+0x2f8>
 800e794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e796:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d06d      	beq.n	800e878 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800e79c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e79e:	7d1b      	ldrb	r3, [r3, #20]
 800e7a0:	2b02      	cmp	r3, #2
 800e7a2:	d03a      	beq.n	800e81a <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800e7a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7a6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e7aa:	2b0c      	cmp	r3, #12
 800e7ac:	bf28      	it	cs
 800e7ae:	230c      	movcs	r3, #12
 800e7b0:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800e7b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7b4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e7b8:	10db      	asrs	r3, r3, #3
 800e7ba:	b21b      	sxth	r3, r3
 800e7bc:	461a      	mov	r2, r3
 800e7be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7c0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e7c4:	4413      	add	r3, r2
 800e7c6:	7efa      	ldrb	r2, [r7, #27]
 800e7c8:	4910      	ldr	r1, [pc, #64]	; (800e80c <tcp_slowtmr+0x28c>)
 800e7ca:	5c8a      	ldrb	r2, [r1, r2]
 800e7cc:	4093      	lsls	r3, r2
 800e7ce:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800e7d0:	697b      	ldr	r3, [r7, #20]
 800e7d2:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800e7d6:	4293      	cmp	r3, r2
 800e7d8:	dc1a      	bgt.n	800e810 <tcp_slowtmr+0x290>
 800e7da:	697b      	ldr	r3, [r7, #20]
 800e7dc:	b21a      	sxth	r2, r3
 800e7de:	e019      	b.n	800e814 <tcp_slowtmr+0x294>
 800e7e0:	20008ba8 	.word	0x20008ba8
 800e7e4:	20008bbe 	.word	0x20008bbe
 800e7e8:	20008bb4 	.word	0x20008bb4
 800e7ec:	080191ac 	.word	0x080191ac
 800e7f0:	080194f0 	.word	0x080194f0
 800e7f4:	080191f0 	.word	0x080191f0
 800e7f8:	0801951c 	.word	0x0801951c
 800e7fc:	08019548 	.word	0x08019548
 800e800:	08019578 	.word	0x08019578
 800e804:	080195ac 	.word	0x080195ac
 800e808:	0801d0b8 	.word	0x0801d0b8
 800e80c:	0801d0a8 	.word	0x0801d0a8
 800e810:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800e814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e816:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800e81a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e81c:	2200      	movs	r2, #0
 800e81e:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800e820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e822:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e828:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e82c:	4293      	cmp	r3, r2
 800e82e:	bf28      	it	cs
 800e830:	4613      	movcs	r3, r2
 800e832:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800e834:	8a7b      	ldrh	r3, [r7, #18]
 800e836:	085b      	lsrs	r3, r3, #1
 800e838:	b29a      	uxth	r2, r3
 800e83a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e83c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800e840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e842:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800e846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e848:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e84a:	005b      	lsls	r3, r3, #1
 800e84c:	b29b      	uxth	r3, r3
 800e84e:	429a      	cmp	r2, r3
 800e850:	d206      	bcs.n	800e860 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800e852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e854:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e856:	005b      	lsls	r3, r3, #1
 800e858:	b29a      	uxth	r2, r3
 800e85a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e85c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800e860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e862:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800e864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e866:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800e86a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e86c:	2200      	movs	r2, #0
 800e86e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800e872:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e874:	f004 fd68 	bl	8013348 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800e878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e87a:	7d1b      	ldrb	r3, [r3, #20]
 800e87c:	2b06      	cmp	r3, #6
 800e87e:	d111      	bne.n	800e8a4 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800e880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e882:	8b5b      	ldrh	r3, [r3, #26]
 800e884:	f003 0310 	and.w	r3, r3, #16
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d00b      	beq.n	800e8a4 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e88c:	4b9c      	ldr	r3, [pc, #624]	; (800eb00 <tcp_slowtmr+0x580>)
 800e88e:	681a      	ldr	r2, [r3, #0]
 800e890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e892:	6a1b      	ldr	r3, [r3, #32]
 800e894:	1ad3      	subs	r3, r2, r3
 800e896:	2b28      	cmp	r3, #40	; 0x28
 800e898:	d904      	bls.n	800e8a4 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800e89a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e89e:	3301      	adds	r3, #1
 800e8a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e8a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8a6:	7a5b      	ldrb	r3, [r3, #9]
 800e8a8:	f003 0308 	and.w	r3, r3, #8
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d04a      	beq.n	800e946 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800e8b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8b2:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e8b4:	2b04      	cmp	r3, #4
 800e8b6:	d003      	beq.n	800e8c0 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800e8b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8ba:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800e8bc:	2b07      	cmp	r3, #7
 800e8be:	d142      	bne.n	800e946 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e8c0:	4b8f      	ldr	r3, [pc, #572]	; (800eb00 <tcp_slowtmr+0x580>)
 800e8c2:	681a      	ldr	r2, [r3, #0]
 800e8c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8c6:	6a1b      	ldr	r3, [r3, #32]
 800e8c8:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800e8ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8cc:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800e8d0:	4b8c      	ldr	r3, [pc, #560]	; (800eb04 <tcp_slowtmr+0x584>)
 800e8d2:	440b      	add	r3, r1
 800e8d4:	498c      	ldr	r1, [pc, #560]	; (800eb08 <tcp_slowtmr+0x588>)
 800e8d6:	fba1 1303 	umull	r1, r3, r1, r3
 800e8da:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e8dc:	429a      	cmp	r2, r3
 800e8de:	d90a      	bls.n	800e8f6 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800e8e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e8e4:	3301      	adds	r3, #1
 800e8e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800e8ea:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e8ee:	3301      	adds	r3, #1
 800e8f0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e8f4:	e027      	b.n	800e946 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e8f6:	4b82      	ldr	r3, [pc, #520]	; (800eb00 <tcp_slowtmr+0x580>)
 800e8f8:	681a      	ldr	r2, [r3, #0]
 800e8fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8fc:	6a1b      	ldr	r3, [r3, #32]
 800e8fe:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800e900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e902:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800e906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e908:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800e90c:	4618      	mov	r0, r3
 800e90e:	4b7f      	ldr	r3, [pc, #508]	; (800eb0c <tcp_slowtmr+0x58c>)
 800e910:	fb00 f303 	mul.w	r3, r0, r3
 800e914:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800e916:	497c      	ldr	r1, [pc, #496]	; (800eb08 <tcp_slowtmr+0x588>)
 800e918:	fba1 1303 	umull	r1, r3, r1, r3
 800e91c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e91e:	429a      	cmp	r2, r3
 800e920:	d911      	bls.n	800e946 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800e922:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e924:	f005 f816 	bl	8013954 <tcp_keepalive>
 800e928:	4603      	mov	r3, r0
 800e92a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800e92e:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800e932:	2b00      	cmp	r3, #0
 800e934:	d107      	bne.n	800e946 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800e936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e938:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800e93c:	3301      	adds	r3, #1
 800e93e:	b2da      	uxtb	r2, r3
 800e940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e942:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800e946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e948:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d011      	beq.n	800e972 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800e94e:	4b6c      	ldr	r3, [pc, #432]	; (800eb00 <tcp_slowtmr+0x580>)
 800e950:	681a      	ldr	r2, [r3, #0]
 800e952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e954:	6a1b      	ldr	r3, [r3, #32]
 800e956:	1ad2      	subs	r2, r2, r3
 800e958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e95a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800e95e:	4619      	mov	r1, r3
 800e960:	460b      	mov	r3, r1
 800e962:	005b      	lsls	r3, r3, #1
 800e964:	440b      	add	r3, r1
 800e966:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800e968:	429a      	cmp	r2, r3
 800e96a:	d302      	bcc.n	800e972 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800e96c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e96e:	f000 fed1 	bl	800f714 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800e972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e974:	7d1b      	ldrb	r3, [r3, #20]
 800e976:	2b03      	cmp	r3, #3
 800e978:	d10b      	bne.n	800e992 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e97a:	4b61      	ldr	r3, [pc, #388]	; (800eb00 <tcp_slowtmr+0x580>)
 800e97c:	681a      	ldr	r2, [r3, #0]
 800e97e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e980:	6a1b      	ldr	r3, [r3, #32]
 800e982:	1ad3      	subs	r3, r2, r3
 800e984:	2b28      	cmp	r3, #40	; 0x28
 800e986:	d904      	bls.n	800e992 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800e988:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e98c:	3301      	adds	r3, #1
 800e98e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800e992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e994:	7d1b      	ldrb	r3, [r3, #20]
 800e996:	2b09      	cmp	r3, #9
 800e998:	d10b      	bne.n	800e9b2 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e99a:	4b59      	ldr	r3, [pc, #356]	; (800eb00 <tcp_slowtmr+0x580>)
 800e99c:	681a      	ldr	r2, [r3, #0]
 800e99e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9a0:	6a1b      	ldr	r3, [r3, #32]
 800e9a2:	1ad3      	subs	r3, r2, r3
 800e9a4:	2bf0      	cmp	r3, #240	; 0xf0
 800e9a6:	d904      	bls.n	800e9b2 <tcp_slowtmr+0x432>
        ++pcb_remove;
 800e9a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e9ac:	3301      	adds	r3, #1
 800e9ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800e9b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d060      	beq.n	800ea7c <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800e9ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e9c0:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800e9c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e9c4:	f000 fcf2 	bl	800f3ac <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800e9c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	d010      	beq.n	800e9f0 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800e9ce:	4b50      	ldr	r3, [pc, #320]	; (800eb10 <tcp_slowtmr+0x590>)
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e9d4:	429a      	cmp	r2, r3
 800e9d6:	d106      	bne.n	800e9e6 <tcp_slowtmr+0x466>
 800e9d8:	4b4e      	ldr	r3, [pc, #312]	; (800eb14 <tcp_slowtmr+0x594>)
 800e9da:	f240 526d 	movw	r2, #1389	; 0x56d
 800e9de:	494e      	ldr	r1, [pc, #312]	; (800eb18 <tcp_slowtmr+0x598>)
 800e9e0:	484e      	ldr	r0, [pc, #312]	; (800eb1c <tcp_slowtmr+0x59c>)
 800e9e2:	f007 ff2d 	bl	8016840 <iprintf>
        prev->next = pcb->next;
 800e9e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9e8:	68da      	ldr	r2, [r3, #12]
 800e9ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9ec:	60da      	str	r2, [r3, #12]
 800e9ee:	e00f      	b.n	800ea10 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800e9f0:	4b47      	ldr	r3, [pc, #284]	; (800eb10 <tcp_slowtmr+0x590>)
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e9f6:	429a      	cmp	r2, r3
 800e9f8:	d006      	beq.n	800ea08 <tcp_slowtmr+0x488>
 800e9fa:	4b46      	ldr	r3, [pc, #280]	; (800eb14 <tcp_slowtmr+0x594>)
 800e9fc:	f240 5271 	movw	r2, #1393	; 0x571
 800ea00:	4947      	ldr	r1, [pc, #284]	; (800eb20 <tcp_slowtmr+0x5a0>)
 800ea02:	4846      	ldr	r0, [pc, #280]	; (800eb1c <tcp_slowtmr+0x59c>)
 800ea04:	f007 ff1c 	bl	8016840 <iprintf>
        tcp_active_pcbs = pcb->next;
 800ea08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea0a:	68db      	ldr	r3, [r3, #12]
 800ea0c:	4a40      	ldr	r2, [pc, #256]	; (800eb10 <tcp_slowtmr+0x590>)
 800ea0e:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800ea10:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d013      	beq.n	800ea40 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800ea18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea1a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800ea1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea1e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800ea20:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800ea22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea24:	3304      	adds	r3, #4
 800ea26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ea28:	8ad2      	ldrh	r2, [r2, #22]
 800ea2a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ea2c:	8b09      	ldrh	r1, [r1, #24]
 800ea2e:	9102      	str	r1, [sp, #8]
 800ea30:	9201      	str	r2, [sp, #4]
 800ea32:	9300      	str	r3, [sp, #0]
 800ea34:	462b      	mov	r3, r5
 800ea36:	4622      	mov	r2, r4
 800ea38:	4601      	mov	r1, r0
 800ea3a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ea3c:	f004 fed6 	bl	80137ec <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800ea40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea42:	691b      	ldr	r3, [r3, #16]
 800ea44:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800ea46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea48:	7d1b      	ldrb	r3, [r3, #20]
 800ea4a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800ea4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea4e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800ea50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea52:	68db      	ldr	r3, [r3, #12]
 800ea54:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800ea56:	6838      	ldr	r0, [r7, #0]
 800ea58:	f7fe ff22 	bl	800d8a0 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800ea5c:	4b31      	ldr	r3, [pc, #196]	; (800eb24 <tcp_slowtmr+0x5a4>)
 800ea5e:	2200      	movs	r2, #0
 800ea60:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800ea62:	68fb      	ldr	r3, [r7, #12]
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	d004      	beq.n	800ea72 <tcp_slowtmr+0x4f2>
 800ea68:	68fb      	ldr	r3, [r7, #12]
 800ea6a:	f06f 010c 	mvn.w	r1, #12
 800ea6e:	68b8      	ldr	r0, [r7, #8]
 800ea70:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800ea72:	4b2c      	ldr	r3, [pc, #176]	; (800eb24 <tcp_slowtmr+0x5a4>)
 800ea74:	781b      	ldrb	r3, [r3, #0]
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d037      	beq.n	800eaea <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800ea7a:	e592      	b.n	800e5a2 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800ea7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea7e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800ea80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea82:	68db      	ldr	r3, [r3, #12]
 800ea84:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800ea86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea88:	7f1b      	ldrb	r3, [r3, #28]
 800ea8a:	3301      	adds	r3, #1
 800ea8c:	b2da      	uxtb	r2, r3
 800ea8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea90:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800ea92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea94:	7f1a      	ldrb	r2, [r3, #28]
 800ea96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea98:	7f5b      	ldrb	r3, [r3, #29]
 800ea9a:	429a      	cmp	r2, r3
 800ea9c:	d325      	bcc.n	800eaea <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800ea9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eaa0:	2200      	movs	r2, #0
 800eaa2:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800eaa4:	4b1f      	ldr	r3, [pc, #124]	; (800eb24 <tcp_slowtmr+0x5a4>)
 800eaa6:	2200      	movs	r2, #0
 800eaa8:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800eaaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eaac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d00b      	beq.n	800eacc <tcp_slowtmr+0x54c>
 800eab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eab6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800eaba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eabc:	6912      	ldr	r2, [r2, #16]
 800eabe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800eac0:	4610      	mov	r0, r2
 800eac2:	4798      	blx	r3
 800eac4:	4603      	mov	r3, r0
 800eac6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800eaca:	e002      	b.n	800ead2 <tcp_slowtmr+0x552>
 800eacc:	2300      	movs	r3, #0
 800eace:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800ead2:	4b14      	ldr	r3, [pc, #80]	; (800eb24 <tcp_slowtmr+0x5a4>)
 800ead4:	781b      	ldrb	r3, [r3, #0]
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d000      	beq.n	800eadc <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800eada:	e562      	b.n	800e5a2 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800eadc:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	d102      	bne.n	800eaea <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800eae4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eae6:	f004 f8cd 	bl	8012c84 <tcp_output>
  while (pcb != NULL) {
 800eaea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	f47f ad5e 	bne.w	800e5ae <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800eaf2:	2300      	movs	r3, #0
 800eaf4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800eaf6:	4b0c      	ldr	r3, [pc, #48]	; (800eb28 <tcp_slowtmr+0x5a8>)
 800eaf8:	681b      	ldr	r3, [r3, #0]
 800eafa:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800eafc:	e069      	b.n	800ebd2 <tcp_slowtmr+0x652>
 800eafe:	bf00      	nop
 800eb00:	20008ba8 	.word	0x20008ba8
 800eb04:	000a4cb8 	.word	0x000a4cb8
 800eb08:	10624dd3 	.word	0x10624dd3
 800eb0c:	000124f8 	.word	0x000124f8
 800eb10:	20008bb4 	.word	0x20008bb4
 800eb14:	080191ac 	.word	0x080191ac
 800eb18:	080195e4 	.word	0x080195e4
 800eb1c:	080191f0 	.word	0x080191f0
 800eb20:	08019610 	.word	0x08019610
 800eb24:	20008bbc 	.word	0x20008bbc
 800eb28:	20008bb8 	.word	0x20008bb8
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800eb2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb2e:	7d1b      	ldrb	r3, [r3, #20]
 800eb30:	2b0a      	cmp	r3, #10
 800eb32:	d006      	beq.n	800eb42 <tcp_slowtmr+0x5c2>
 800eb34:	4b2b      	ldr	r3, [pc, #172]	; (800ebe4 <tcp_slowtmr+0x664>)
 800eb36:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800eb3a:	492b      	ldr	r1, [pc, #172]	; (800ebe8 <tcp_slowtmr+0x668>)
 800eb3c:	482b      	ldr	r0, [pc, #172]	; (800ebec <tcp_slowtmr+0x66c>)
 800eb3e:	f007 fe7f 	bl	8016840 <iprintf>
    pcb_remove = 0;
 800eb42:	2300      	movs	r3, #0
 800eb44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800eb48:	4b29      	ldr	r3, [pc, #164]	; (800ebf0 <tcp_slowtmr+0x670>)
 800eb4a:	681a      	ldr	r2, [r3, #0]
 800eb4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb4e:	6a1b      	ldr	r3, [r3, #32]
 800eb50:	1ad3      	subs	r3, r2, r3
 800eb52:	2bf0      	cmp	r3, #240	; 0xf0
 800eb54:	d904      	bls.n	800eb60 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800eb56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eb5a:	3301      	adds	r3, #1
 800eb5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800eb60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d02f      	beq.n	800ebc8 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800eb68:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800eb6a:	f000 fc1f 	bl	800f3ac <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800eb6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	d010      	beq.n	800eb96 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800eb74:	4b1f      	ldr	r3, [pc, #124]	; (800ebf4 <tcp_slowtmr+0x674>)
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eb7a:	429a      	cmp	r2, r3
 800eb7c:	d106      	bne.n	800eb8c <tcp_slowtmr+0x60c>
 800eb7e:	4b19      	ldr	r3, [pc, #100]	; (800ebe4 <tcp_slowtmr+0x664>)
 800eb80:	f240 52af 	movw	r2, #1455	; 0x5af
 800eb84:	491c      	ldr	r1, [pc, #112]	; (800ebf8 <tcp_slowtmr+0x678>)
 800eb86:	4819      	ldr	r0, [pc, #100]	; (800ebec <tcp_slowtmr+0x66c>)
 800eb88:	f007 fe5a 	bl	8016840 <iprintf>
        prev->next = pcb->next;
 800eb8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb8e:	68da      	ldr	r2, [r3, #12]
 800eb90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb92:	60da      	str	r2, [r3, #12]
 800eb94:	e00f      	b.n	800ebb6 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800eb96:	4b17      	ldr	r3, [pc, #92]	; (800ebf4 <tcp_slowtmr+0x674>)
 800eb98:	681b      	ldr	r3, [r3, #0]
 800eb9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eb9c:	429a      	cmp	r2, r3
 800eb9e:	d006      	beq.n	800ebae <tcp_slowtmr+0x62e>
 800eba0:	4b10      	ldr	r3, [pc, #64]	; (800ebe4 <tcp_slowtmr+0x664>)
 800eba2:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800eba6:	4915      	ldr	r1, [pc, #84]	; (800ebfc <tcp_slowtmr+0x67c>)
 800eba8:	4810      	ldr	r0, [pc, #64]	; (800ebec <tcp_slowtmr+0x66c>)
 800ebaa:	f007 fe49 	bl	8016840 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800ebae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebb0:	68db      	ldr	r3, [r3, #12]
 800ebb2:	4a10      	ldr	r2, [pc, #64]	; (800ebf4 <tcp_slowtmr+0x674>)
 800ebb4:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800ebb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebb8:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800ebba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebbc:	68db      	ldr	r3, [r3, #12]
 800ebbe:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800ebc0:	69f8      	ldr	r0, [r7, #28]
 800ebc2:	f7fe fe6d 	bl	800d8a0 <tcp_free>
 800ebc6:	e004      	b.n	800ebd2 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800ebc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebca:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800ebcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebce:	68db      	ldr	r3, [r3, #12]
 800ebd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800ebd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d1a9      	bne.n	800eb2c <tcp_slowtmr+0x5ac>
    }
  }
}
 800ebd8:	bf00      	nop
 800ebda:	bf00      	nop
 800ebdc:	3730      	adds	r7, #48	; 0x30
 800ebde:	46bd      	mov	sp, r7
 800ebe0:	bdb0      	pop	{r4, r5, r7, pc}
 800ebe2:	bf00      	nop
 800ebe4:	080191ac 	.word	0x080191ac
 800ebe8:	0801963c 	.word	0x0801963c
 800ebec:	080191f0 	.word	0x080191f0
 800ebf0:	20008ba8 	.word	0x20008ba8
 800ebf4:	20008bb8 	.word	0x20008bb8
 800ebf8:	0801966c 	.word	0x0801966c
 800ebfc:	08019694 	.word	0x08019694

0800ec00 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800ec00:	b580      	push	{r7, lr}
 800ec02:	b082      	sub	sp, #8
 800ec04:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800ec06:	4b2d      	ldr	r3, [pc, #180]	; (800ecbc <tcp_fasttmr+0xbc>)
 800ec08:	781b      	ldrb	r3, [r3, #0]
 800ec0a:	3301      	adds	r3, #1
 800ec0c:	b2da      	uxtb	r2, r3
 800ec0e:	4b2b      	ldr	r3, [pc, #172]	; (800ecbc <tcp_fasttmr+0xbc>)
 800ec10:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800ec12:	4b2b      	ldr	r3, [pc, #172]	; (800ecc0 <tcp_fasttmr+0xc0>)
 800ec14:	681b      	ldr	r3, [r3, #0]
 800ec16:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800ec18:	e048      	b.n	800ecac <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	7f9a      	ldrb	r2, [r3, #30]
 800ec1e:	4b27      	ldr	r3, [pc, #156]	; (800ecbc <tcp_fasttmr+0xbc>)
 800ec20:	781b      	ldrb	r3, [r3, #0]
 800ec22:	429a      	cmp	r2, r3
 800ec24:	d03f      	beq.n	800eca6 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800ec26:	4b25      	ldr	r3, [pc, #148]	; (800ecbc <tcp_fasttmr+0xbc>)
 800ec28:	781a      	ldrb	r2, [r3, #0]
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	8b5b      	ldrh	r3, [r3, #26]
 800ec32:	f003 0301 	and.w	r3, r3, #1
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d010      	beq.n	800ec5c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	8b5b      	ldrh	r3, [r3, #26]
 800ec3e:	f043 0302 	orr.w	r3, r3, #2
 800ec42:	b29a      	uxth	r2, r3
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800ec48:	6878      	ldr	r0, [r7, #4]
 800ec4a:	f004 f81b 	bl	8012c84 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	8b5b      	ldrh	r3, [r3, #26]
 800ec52:	f023 0303 	bic.w	r3, r3, #3
 800ec56:	b29a      	uxth	r2, r3
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	8b5b      	ldrh	r3, [r3, #26]
 800ec60:	f003 0308 	and.w	r3, r3, #8
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d009      	beq.n	800ec7c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	8b5b      	ldrh	r3, [r3, #26]
 800ec6c:	f023 0308 	bic.w	r3, r3, #8
 800ec70:	b29a      	uxth	r2, r3
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800ec76:	6878      	ldr	r0, [r7, #4]
 800ec78:	f7fe ffa6 	bl	800dbc8 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	68db      	ldr	r3, [r3, #12]
 800ec80:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d00a      	beq.n	800eca0 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800ec8a:	4b0e      	ldr	r3, [pc, #56]	; (800ecc4 <tcp_fasttmr+0xc4>)
 800ec8c:	2200      	movs	r2, #0
 800ec8e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800ec90:	6878      	ldr	r0, [r7, #4]
 800ec92:	f000 f819 	bl	800ecc8 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800ec96:	4b0b      	ldr	r3, [pc, #44]	; (800ecc4 <tcp_fasttmr+0xc4>)
 800ec98:	781b      	ldrb	r3, [r3, #0]
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	d000      	beq.n	800eca0 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800ec9e:	e7b8      	b.n	800ec12 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800eca0:	683b      	ldr	r3, [r7, #0]
 800eca2:	607b      	str	r3, [r7, #4]
 800eca4:	e002      	b.n	800ecac <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	68db      	ldr	r3, [r3, #12]
 800ecaa:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d1b3      	bne.n	800ec1a <tcp_fasttmr+0x1a>
    }
  }
}
 800ecb2:	bf00      	nop
 800ecb4:	bf00      	nop
 800ecb6:	3708      	adds	r7, #8
 800ecb8:	46bd      	mov	sp, r7
 800ecba:	bd80      	pop	{r7, pc}
 800ecbc:	20008bbe 	.word	0x20008bbe
 800ecc0:	20008bb4 	.word	0x20008bb4
 800ecc4:	20008bbc 	.word	0x20008bbc

0800ecc8 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800ecc8:	b590      	push	{r4, r7, lr}
 800ecca:	b085      	sub	sp, #20
 800eccc:	af00      	add	r7, sp, #0
 800ecce:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d109      	bne.n	800ecea <tcp_process_refused_data+0x22>
 800ecd6:	4b37      	ldr	r3, [pc, #220]	; (800edb4 <tcp_process_refused_data+0xec>)
 800ecd8:	f240 6209 	movw	r2, #1545	; 0x609
 800ecdc:	4936      	ldr	r1, [pc, #216]	; (800edb8 <tcp_process_refused_data+0xf0>)
 800ecde:	4837      	ldr	r0, [pc, #220]	; (800edbc <tcp_process_refused_data+0xf4>)
 800ece0:	f007 fdae 	bl	8016840 <iprintf>
 800ece4:	f06f 030f 	mvn.w	r3, #15
 800ece8:	e060      	b.n	800edac <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ecee:	7b5b      	ldrb	r3, [r3, #13]
 800ecf0:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ecf6:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	2200      	movs	r2, #0
 800ecfc:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d00b      	beq.n	800ed20 <tcp_process_refused_data+0x58>
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	6918      	ldr	r0, [r3, #16]
 800ed12:	2300      	movs	r3, #0
 800ed14:	68ba      	ldr	r2, [r7, #8]
 800ed16:	6879      	ldr	r1, [r7, #4]
 800ed18:	47a0      	blx	r4
 800ed1a:	4603      	mov	r3, r0
 800ed1c:	73fb      	strb	r3, [r7, #15]
 800ed1e:	e007      	b.n	800ed30 <tcp_process_refused_data+0x68>
 800ed20:	2300      	movs	r3, #0
 800ed22:	68ba      	ldr	r2, [r7, #8]
 800ed24:	6879      	ldr	r1, [r7, #4]
 800ed26:	2000      	movs	r0, #0
 800ed28:	f000 f8c2 	bl	800eeb0 <tcp_recv_null>
 800ed2c:	4603      	mov	r3, r0
 800ed2e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800ed30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	d12a      	bne.n	800ed8e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800ed38:	7bbb      	ldrb	r3, [r7, #14]
 800ed3a:	f003 0320 	and.w	r3, r3, #32
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d033      	beq.n	800edaa <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ed46:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ed4a:	d005      	beq.n	800ed58 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ed50:	3301      	adds	r3, #1
 800ed52:	b29a      	uxth	r2, r3
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d00b      	beq.n	800ed7a <tcp_process_refused_data+0xb2>
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	6918      	ldr	r0, [r3, #16]
 800ed6c:	2300      	movs	r3, #0
 800ed6e:	2200      	movs	r2, #0
 800ed70:	6879      	ldr	r1, [r7, #4]
 800ed72:	47a0      	blx	r4
 800ed74:	4603      	mov	r3, r0
 800ed76:	73fb      	strb	r3, [r7, #15]
 800ed78:	e001      	b.n	800ed7e <tcp_process_refused_data+0xb6>
 800ed7a:	2300      	movs	r3, #0
 800ed7c:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800ed7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ed82:	f113 0f0d 	cmn.w	r3, #13
 800ed86:	d110      	bne.n	800edaa <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800ed88:	f06f 030c 	mvn.w	r3, #12
 800ed8c:	e00e      	b.n	800edac <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800ed8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ed92:	f113 0f0d 	cmn.w	r3, #13
 800ed96:	d102      	bne.n	800ed9e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800ed98:	f06f 030c 	mvn.w	r3, #12
 800ed9c:	e006      	b.n	800edac <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	68ba      	ldr	r2, [r7, #8]
 800eda2:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800eda4:	f06f 0304 	mvn.w	r3, #4
 800eda8:	e000      	b.n	800edac <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800edaa:	2300      	movs	r3, #0
}
 800edac:	4618      	mov	r0, r3
 800edae:	3714      	adds	r7, #20
 800edb0:	46bd      	mov	sp, r7
 800edb2:	bd90      	pop	{r4, r7, pc}
 800edb4:	080191ac 	.word	0x080191ac
 800edb8:	080196bc 	.word	0x080196bc
 800edbc:	080191f0 	.word	0x080191f0

0800edc0 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800edc0:	b580      	push	{r7, lr}
 800edc2:	b084      	sub	sp, #16
 800edc4:	af00      	add	r7, sp, #0
 800edc6:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800edc8:	e007      	b.n	800edda <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800edd0:	6878      	ldr	r0, [r7, #4]
 800edd2:	f000 f80a 	bl	800edea <tcp_seg_free>
    seg = next;
 800edd6:	68fb      	ldr	r3, [r7, #12]
 800edd8:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d1f4      	bne.n	800edca <tcp_segs_free+0xa>
  }
}
 800ede0:	bf00      	nop
 800ede2:	bf00      	nop
 800ede4:	3710      	adds	r7, #16
 800ede6:	46bd      	mov	sp, r7
 800ede8:	bd80      	pop	{r7, pc}

0800edea <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800edea:	b580      	push	{r7, lr}
 800edec:	b082      	sub	sp, #8
 800edee:	af00      	add	r7, sp, #0
 800edf0:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	d00c      	beq.n	800ee12 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	685b      	ldr	r3, [r3, #4]
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	d004      	beq.n	800ee0a <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	685b      	ldr	r3, [r3, #4]
 800ee04:	4618      	mov	r0, r3
 800ee06:	f7fe fa47 	bl	800d298 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800ee0a:	6879      	ldr	r1, [r7, #4]
 800ee0c:	2003      	movs	r0, #3
 800ee0e:	f7fd fbcd 	bl	800c5ac <memp_free>
  }
}
 800ee12:	bf00      	nop
 800ee14:	3708      	adds	r7, #8
 800ee16:	46bd      	mov	sp, r7
 800ee18:	bd80      	pop	{r7, pc}
	...

0800ee1c <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 800ee1c:	b580      	push	{r7, lr}
 800ee1e:	b082      	sub	sp, #8
 800ee20:	af00      	add	r7, sp, #0
 800ee22:	6078      	str	r0, [r7, #4]
 800ee24:	460b      	mov	r3, r1
 800ee26:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	d107      	bne.n	800ee3e <tcp_setprio+0x22>
 800ee2e:	4b07      	ldr	r3, [pc, #28]	; (800ee4c <tcp_setprio+0x30>)
 800ee30:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 800ee34:	4906      	ldr	r1, [pc, #24]	; (800ee50 <tcp_setprio+0x34>)
 800ee36:	4807      	ldr	r0, [pc, #28]	; (800ee54 <tcp_setprio+0x38>)
 800ee38:	f007 fd02 	bl	8016840 <iprintf>
 800ee3c:	e002      	b.n	800ee44 <tcp_setprio+0x28>

  pcb->prio = prio;
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	78fa      	ldrb	r2, [r7, #3]
 800ee42:	755a      	strb	r2, [r3, #21]
}
 800ee44:	3708      	adds	r7, #8
 800ee46:	46bd      	mov	sp, r7
 800ee48:	bd80      	pop	{r7, pc}
 800ee4a:	bf00      	nop
 800ee4c:	080191ac 	.word	0x080191ac
 800ee50:	080196e4 	.word	0x080196e4
 800ee54:	080191f0 	.word	0x080191f0

0800ee58 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800ee58:	b580      	push	{r7, lr}
 800ee5a:	b084      	sub	sp, #16
 800ee5c:	af00      	add	r7, sp, #0
 800ee5e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d106      	bne.n	800ee74 <tcp_seg_copy+0x1c>
 800ee66:	4b0f      	ldr	r3, [pc, #60]	; (800eea4 <tcp_seg_copy+0x4c>)
 800ee68:	f240 6282 	movw	r2, #1666	; 0x682
 800ee6c:	490e      	ldr	r1, [pc, #56]	; (800eea8 <tcp_seg_copy+0x50>)
 800ee6e:	480f      	ldr	r0, [pc, #60]	; (800eeac <tcp_seg_copy+0x54>)
 800ee70:	f007 fce6 	bl	8016840 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800ee74:	2003      	movs	r0, #3
 800ee76:	f7fd fb29 	bl	800c4cc <memp_malloc>
 800ee7a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	d101      	bne.n	800ee86 <tcp_seg_copy+0x2e>
    return NULL;
 800ee82:	2300      	movs	r3, #0
 800ee84:	e00a      	b.n	800ee9c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800ee86:	2210      	movs	r2, #16
 800ee88:	6879      	ldr	r1, [r7, #4]
 800ee8a:	68f8      	ldr	r0, [r7, #12]
 800ee8c:	f007 fca8 	bl	80167e0 <memcpy>
  pbuf_ref(cseg->p);
 800ee90:	68fb      	ldr	r3, [r7, #12]
 800ee92:	685b      	ldr	r3, [r3, #4]
 800ee94:	4618      	mov	r0, r3
 800ee96:	f7fe fa9f 	bl	800d3d8 <pbuf_ref>
  return cseg;
 800ee9a:	68fb      	ldr	r3, [r7, #12]
}
 800ee9c:	4618      	mov	r0, r3
 800ee9e:	3710      	adds	r7, #16
 800eea0:	46bd      	mov	sp, r7
 800eea2:	bd80      	pop	{r7, pc}
 800eea4:	080191ac 	.word	0x080191ac
 800eea8:	08019700 	.word	0x08019700
 800eeac:	080191f0 	.word	0x080191f0

0800eeb0 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800eeb0:	b580      	push	{r7, lr}
 800eeb2:	b084      	sub	sp, #16
 800eeb4:	af00      	add	r7, sp, #0
 800eeb6:	60f8      	str	r0, [r7, #12]
 800eeb8:	60b9      	str	r1, [r7, #8]
 800eeba:	607a      	str	r2, [r7, #4]
 800eebc:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800eebe:	68bb      	ldr	r3, [r7, #8]
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	d109      	bne.n	800eed8 <tcp_recv_null+0x28>
 800eec4:	4b12      	ldr	r3, [pc, #72]	; (800ef10 <tcp_recv_null+0x60>)
 800eec6:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800eeca:	4912      	ldr	r1, [pc, #72]	; (800ef14 <tcp_recv_null+0x64>)
 800eecc:	4812      	ldr	r0, [pc, #72]	; (800ef18 <tcp_recv_null+0x68>)
 800eece:	f007 fcb7 	bl	8016840 <iprintf>
 800eed2:	f06f 030f 	mvn.w	r3, #15
 800eed6:	e016      	b.n	800ef06 <tcp_recv_null+0x56>

  if (p != NULL) {
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	d009      	beq.n	800eef2 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	891b      	ldrh	r3, [r3, #8]
 800eee2:	4619      	mov	r1, r3
 800eee4:	68b8      	ldr	r0, [r7, #8]
 800eee6:	f7ff f99d 	bl	800e224 <tcp_recved>
    pbuf_free(p);
 800eeea:	6878      	ldr	r0, [r7, #4]
 800eeec:	f7fe f9d4 	bl	800d298 <pbuf_free>
 800eef0:	e008      	b.n	800ef04 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800eef2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	d104      	bne.n	800ef04 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800eefa:	68b8      	ldr	r0, [r7, #8]
 800eefc:	f7fe fece 	bl	800dc9c <tcp_close>
 800ef00:	4603      	mov	r3, r0
 800ef02:	e000      	b.n	800ef06 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800ef04:	2300      	movs	r3, #0
}
 800ef06:	4618      	mov	r0, r3
 800ef08:	3710      	adds	r7, #16
 800ef0a:	46bd      	mov	sp, r7
 800ef0c:	bd80      	pop	{r7, pc}
 800ef0e:	bf00      	nop
 800ef10:	080191ac 	.word	0x080191ac
 800ef14:	0801971c 	.word	0x0801971c
 800ef18:	080191f0 	.word	0x080191f0

0800ef1c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800ef1c:	b580      	push	{r7, lr}
 800ef1e:	b086      	sub	sp, #24
 800ef20:	af00      	add	r7, sp, #0
 800ef22:	4603      	mov	r3, r0
 800ef24:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800ef26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	db01      	blt.n	800ef32 <tcp_kill_prio+0x16>
 800ef2e:	79fb      	ldrb	r3, [r7, #7]
 800ef30:	e000      	b.n	800ef34 <tcp_kill_prio+0x18>
 800ef32:	237f      	movs	r3, #127	; 0x7f
 800ef34:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800ef36:	7afb      	ldrb	r3, [r7, #11]
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d034      	beq.n	800efa6 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800ef3c:	7afb      	ldrb	r3, [r7, #11]
 800ef3e:	3b01      	subs	r3, #1
 800ef40:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800ef42:	2300      	movs	r3, #0
 800ef44:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800ef46:	2300      	movs	r3, #0
 800ef48:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ef4a:	4b19      	ldr	r3, [pc, #100]	; (800efb0 <tcp_kill_prio+0x94>)
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	617b      	str	r3, [r7, #20]
 800ef50:	e01f      	b.n	800ef92 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800ef52:	697b      	ldr	r3, [r7, #20]
 800ef54:	7d5b      	ldrb	r3, [r3, #21]
 800ef56:	7afa      	ldrb	r2, [r7, #11]
 800ef58:	429a      	cmp	r2, r3
 800ef5a:	d80c      	bhi.n	800ef76 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800ef5c:	697b      	ldr	r3, [r7, #20]
 800ef5e:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800ef60:	7afa      	ldrb	r2, [r7, #11]
 800ef62:	429a      	cmp	r2, r3
 800ef64:	d112      	bne.n	800ef8c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800ef66:	4b13      	ldr	r3, [pc, #76]	; (800efb4 <tcp_kill_prio+0x98>)
 800ef68:	681a      	ldr	r2, [r3, #0]
 800ef6a:	697b      	ldr	r3, [r7, #20]
 800ef6c:	6a1b      	ldr	r3, [r3, #32]
 800ef6e:	1ad3      	subs	r3, r2, r3
 800ef70:	68fa      	ldr	r2, [r7, #12]
 800ef72:	429a      	cmp	r2, r3
 800ef74:	d80a      	bhi.n	800ef8c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800ef76:	4b0f      	ldr	r3, [pc, #60]	; (800efb4 <tcp_kill_prio+0x98>)
 800ef78:	681a      	ldr	r2, [r3, #0]
 800ef7a:	697b      	ldr	r3, [r7, #20]
 800ef7c:	6a1b      	ldr	r3, [r3, #32]
 800ef7e:	1ad3      	subs	r3, r2, r3
 800ef80:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800ef82:	697b      	ldr	r3, [r7, #20]
 800ef84:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800ef86:	697b      	ldr	r3, [r7, #20]
 800ef88:	7d5b      	ldrb	r3, [r3, #21]
 800ef8a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ef8c:	697b      	ldr	r3, [r7, #20]
 800ef8e:	68db      	ldr	r3, [r3, #12]
 800ef90:	617b      	str	r3, [r7, #20]
 800ef92:	697b      	ldr	r3, [r7, #20]
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d1dc      	bne.n	800ef52 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800ef98:	693b      	ldr	r3, [r7, #16]
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	d004      	beq.n	800efa8 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800ef9e:	6938      	ldr	r0, [r7, #16]
 800efa0:	f7fe ff66 	bl	800de70 <tcp_abort>
 800efa4:	e000      	b.n	800efa8 <tcp_kill_prio+0x8c>
    return;
 800efa6:	bf00      	nop
  }
}
 800efa8:	3718      	adds	r7, #24
 800efaa:	46bd      	mov	sp, r7
 800efac:	bd80      	pop	{r7, pc}
 800efae:	bf00      	nop
 800efb0:	20008bb4 	.word	0x20008bb4
 800efb4:	20008ba8 	.word	0x20008ba8

0800efb8 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800efb8:	b580      	push	{r7, lr}
 800efba:	b086      	sub	sp, #24
 800efbc:	af00      	add	r7, sp, #0
 800efbe:	4603      	mov	r3, r0
 800efc0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800efc2:	79fb      	ldrb	r3, [r7, #7]
 800efc4:	2b08      	cmp	r3, #8
 800efc6:	d009      	beq.n	800efdc <tcp_kill_state+0x24>
 800efc8:	79fb      	ldrb	r3, [r7, #7]
 800efca:	2b09      	cmp	r3, #9
 800efcc:	d006      	beq.n	800efdc <tcp_kill_state+0x24>
 800efce:	4b1a      	ldr	r3, [pc, #104]	; (800f038 <tcp_kill_state+0x80>)
 800efd0:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800efd4:	4919      	ldr	r1, [pc, #100]	; (800f03c <tcp_kill_state+0x84>)
 800efd6:	481a      	ldr	r0, [pc, #104]	; (800f040 <tcp_kill_state+0x88>)
 800efd8:	f007 fc32 	bl	8016840 <iprintf>

  inactivity = 0;
 800efdc:	2300      	movs	r3, #0
 800efde:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800efe0:	2300      	movs	r3, #0
 800efe2:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800efe4:	4b17      	ldr	r3, [pc, #92]	; (800f044 <tcp_kill_state+0x8c>)
 800efe6:	681b      	ldr	r3, [r3, #0]
 800efe8:	617b      	str	r3, [r7, #20]
 800efea:	e017      	b.n	800f01c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800efec:	697b      	ldr	r3, [r7, #20]
 800efee:	7d1b      	ldrb	r3, [r3, #20]
 800eff0:	79fa      	ldrb	r2, [r7, #7]
 800eff2:	429a      	cmp	r2, r3
 800eff4:	d10f      	bne.n	800f016 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800eff6:	4b14      	ldr	r3, [pc, #80]	; (800f048 <tcp_kill_state+0x90>)
 800eff8:	681a      	ldr	r2, [r3, #0]
 800effa:	697b      	ldr	r3, [r7, #20]
 800effc:	6a1b      	ldr	r3, [r3, #32]
 800effe:	1ad3      	subs	r3, r2, r3
 800f000:	68fa      	ldr	r2, [r7, #12]
 800f002:	429a      	cmp	r2, r3
 800f004:	d807      	bhi.n	800f016 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800f006:	4b10      	ldr	r3, [pc, #64]	; (800f048 <tcp_kill_state+0x90>)
 800f008:	681a      	ldr	r2, [r3, #0]
 800f00a:	697b      	ldr	r3, [r7, #20]
 800f00c:	6a1b      	ldr	r3, [r3, #32]
 800f00e:	1ad3      	subs	r3, r2, r3
 800f010:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800f012:	697b      	ldr	r3, [r7, #20]
 800f014:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f016:	697b      	ldr	r3, [r7, #20]
 800f018:	68db      	ldr	r3, [r3, #12]
 800f01a:	617b      	str	r3, [r7, #20]
 800f01c:	697b      	ldr	r3, [r7, #20]
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d1e4      	bne.n	800efec <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800f022:	693b      	ldr	r3, [r7, #16]
 800f024:	2b00      	cmp	r3, #0
 800f026:	d003      	beq.n	800f030 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800f028:	2100      	movs	r1, #0
 800f02a:	6938      	ldr	r0, [r7, #16]
 800f02c:	f7fe fe62 	bl	800dcf4 <tcp_abandon>
  }
}
 800f030:	bf00      	nop
 800f032:	3718      	adds	r7, #24
 800f034:	46bd      	mov	sp, r7
 800f036:	bd80      	pop	{r7, pc}
 800f038:	080191ac 	.word	0x080191ac
 800f03c:	08019738 	.word	0x08019738
 800f040:	080191f0 	.word	0x080191f0
 800f044:	20008bb4 	.word	0x20008bb4
 800f048:	20008ba8 	.word	0x20008ba8

0800f04c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800f04c:	b580      	push	{r7, lr}
 800f04e:	b084      	sub	sp, #16
 800f050:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800f052:	2300      	movs	r3, #0
 800f054:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800f056:	2300      	movs	r3, #0
 800f058:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f05a:	4b12      	ldr	r3, [pc, #72]	; (800f0a4 <tcp_kill_timewait+0x58>)
 800f05c:	681b      	ldr	r3, [r3, #0]
 800f05e:	60fb      	str	r3, [r7, #12]
 800f060:	e012      	b.n	800f088 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800f062:	4b11      	ldr	r3, [pc, #68]	; (800f0a8 <tcp_kill_timewait+0x5c>)
 800f064:	681a      	ldr	r2, [r3, #0]
 800f066:	68fb      	ldr	r3, [r7, #12]
 800f068:	6a1b      	ldr	r3, [r3, #32]
 800f06a:	1ad3      	subs	r3, r2, r3
 800f06c:	687a      	ldr	r2, [r7, #4]
 800f06e:	429a      	cmp	r2, r3
 800f070:	d807      	bhi.n	800f082 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800f072:	4b0d      	ldr	r3, [pc, #52]	; (800f0a8 <tcp_kill_timewait+0x5c>)
 800f074:	681a      	ldr	r2, [r3, #0]
 800f076:	68fb      	ldr	r3, [r7, #12]
 800f078:	6a1b      	ldr	r3, [r3, #32]
 800f07a:	1ad3      	subs	r3, r2, r3
 800f07c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800f07e:	68fb      	ldr	r3, [r7, #12]
 800f080:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f082:	68fb      	ldr	r3, [r7, #12]
 800f084:	68db      	ldr	r3, [r3, #12]
 800f086:	60fb      	str	r3, [r7, #12]
 800f088:	68fb      	ldr	r3, [r7, #12]
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d1e9      	bne.n	800f062 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800f08e:	68bb      	ldr	r3, [r7, #8]
 800f090:	2b00      	cmp	r3, #0
 800f092:	d002      	beq.n	800f09a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800f094:	68b8      	ldr	r0, [r7, #8]
 800f096:	f7fe feeb 	bl	800de70 <tcp_abort>
  }
}
 800f09a:	bf00      	nop
 800f09c:	3710      	adds	r7, #16
 800f09e:	46bd      	mov	sp, r7
 800f0a0:	bd80      	pop	{r7, pc}
 800f0a2:	bf00      	nop
 800f0a4:	20008bb8 	.word	0x20008bb8
 800f0a8:	20008ba8 	.word	0x20008ba8

0800f0ac <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800f0ac:	b580      	push	{r7, lr}
 800f0ae:	b082      	sub	sp, #8
 800f0b0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800f0b2:	4b10      	ldr	r3, [pc, #64]	; (800f0f4 <tcp_handle_closepend+0x48>)
 800f0b4:	681b      	ldr	r3, [r3, #0]
 800f0b6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800f0b8:	e014      	b.n	800f0e4 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	68db      	ldr	r3, [r3, #12]
 800f0be:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	8b5b      	ldrh	r3, [r3, #26]
 800f0c4:	f003 0308 	and.w	r3, r3, #8
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d009      	beq.n	800f0e0 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	8b5b      	ldrh	r3, [r3, #26]
 800f0d0:	f023 0308 	bic.w	r3, r3, #8
 800f0d4:	b29a      	uxth	r2, r3
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800f0da:	6878      	ldr	r0, [r7, #4]
 800f0dc:	f7fe fd74 	bl	800dbc8 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800f0e0:	683b      	ldr	r3, [r7, #0]
 800f0e2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d1e7      	bne.n	800f0ba <tcp_handle_closepend+0xe>
  }
}
 800f0ea:	bf00      	nop
 800f0ec:	bf00      	nop
 800f0ee:	3708      	adds	r7, #8
 800f0f0:	46bd      	mov	sp, r7
 800f0f2:	bd80      	pop	{r7, pc}
 800f0f4:	20008bb4 	.word	0x20008bb4

0800f0f8 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800f0f8:	b580      	push	{r7, lr}
 800f0fa:	b084      	sub	sp, #16
 800f0fc:	af00      	add	r7, sp, #0
 800f0fe:	4603      	mov	r3, r0
 800f100:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f102:	2001      	movs	r0, #1
 800f104:	f7fd f9e2 	bl	800c4cc <memp_malloc>
 800f108:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800f10a:	68fb      	ldr	r3, [r7, #12]
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d126      	bne.n	800f15e <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800f110:	f7ff ffcc 	bl	800f0ac <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800f114:	f7ff ff9a 	bl	800f04c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f118:	2001      	movs	r0, #1
 800f11a:	f7fd f9d7 	bl	800c4cc <memp_malloc>
 800f11e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800f120:	68fb      	ldr	r3, [r7, #12]
 800f122:	2b00      	cmp	r3, #0
 800f124:	d11b      	bne.n	800f15e <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800f126:	2009      	movs	r0, #9
 800f128:	f7ff ff46 	bl	800efb8 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f12c:	2001      	movs	r0, #1
 800f12e:	f7fd f9cd 	bl	800c4cc <memp_malloc>
 800f132:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800f134:	68fb      	ldr	r3, [r7, #12]
 800f136:	2b00      	cmp	r3, #0
 800f138:	d111      	bne.n	800f15e <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800f13a:	2008      	movs	r0, #8
 800f13c:	f7ff ff3c 	bl	800efb8 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f140:	2001      	movs	r0, #1
 800f142:	f7fd f9c3 	bl	800c4cc <memp_malloc>
 800f146:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800f148:	68fb      	ldr	r3, [r7, #12]
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d107      	bne.n	800f15e <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800f14e:	79fb      	ldrb	r3, [r7, #7]
 800f150:	4618      	mov	r0, r3
 800f152:	f7ff fee3 	bl	800ef1c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f156:	2001      	movs	r0, #1
 800f158:	f7fd f9b8 	bl	800c4cc <memp_malloc>
 800f15c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800f15e:	68fb      	ldr	r3, [r7, #12]
 800f160:	2b00      	cmp	r3, #0
 800f162:	d03f      	beq.n	800f1e4 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800f164:	229c      	movs	r2, #156	; 0x9c
 800f166:	2100      	movs	r1, #0
 800f168:	68f8      	ldr	r0, [r7, #12]
 800f16a:	f007 fb61 	bl	8016830 <memset>
    pcb->prio = prio;
 800f16e:	68fb      	ldr	r3, [r7, #12]
 800f170:	79fa      	ldrb	r2, [r7, #7]
 800f172:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800f174:	68fb      	ldr	r3, [r7, #12]
 800f176:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800f17a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800f17e:	68fb      	ldr	r3, [r7, #12]
 800f180:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800f184:	855a      	strh	r2, [r3, #42]	; 0x2a
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800f18a:	68fb      	ldr	r3, [r7, #12]
 800f18c:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800f18e:	68fb      	ldr	r3, [r7, #12]
 800f190:	22ff      	movs	r2, #255	; 0xff
 800f192:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800f194:	68fb      	ldr	r3, [r7, #12]
 800f196:	f44f 7206 	mov.w	r2, #536	; 0x218
 800f19a:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800f19c:	68fb      	ldr	r3, [r7, #12]
 800f19e:	2206      	movs	r2, #6
 800f1a0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800f1a4:	68fb      	ldr	r3, [r7, #12]
 800f1a6:	2206      	movs	r2, #6
 800f1a8:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800f1aa:	68fb      	ldr	r3, [r7, #12]
 800f1ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f1b0:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800f1b2:	68fb      	ldr	r3, [r7, #12]
 800f1b4:	2201      	movs	r2, #1
 800f1b6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800f1ba:	4b0d      	ldr	r3, [pc, #52]	; (800f1f0 <tcp_alloc+0xf8>)
 800f1bc:	681a      	ldr	r2, [r3, #0]
 800f1be:	68fb      	ldr	r3, [r7, #12]
 800f1c0:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800f1c2:	4b0c      	ldr	r3, [pc, #48]	; (800f1f4 <tcp_alloc+0xfc>)
 800f1c4:	781a      	ldrb	r2, [r3, #0]
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800f1ca:	68fb      	ldr	r3, [r7, #12]
 800f1cc:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800f1d0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800f1d4:	68fb      	ldr	r3, [r7, #12]
 800f1d6:	4a08      	ldr	r2, [pc, #32]	; (800f1f8 <tcp_alloc+0x100>)
 800f1d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800f1dc:	68fb      	ldr	r3, [r7, #12]
 800f1de:	4a07      	ldr	r2, [pc, #28]	; (800f1fc <tcp_alloc+0x104>)
 800f1e0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800f1e4:	68fb      	ldr	r3, [r7, #12]
}
 800f1e6:	4618      	mov	r0, r3
 800f1e8:	3710      	adds	r7, #16
 800f1ea:	46bd      	mov	sp, r7
 800f1ec:	bd80      	pop	{r7, pc}
 800f1ee:	bf00      	nop
 800f1f0:	20008ba8 	.word	0x20008ba8
 800f1f4:	20008bbe 	.word	0x20008bbe
 800f1f8:	0800eeb1 	.word	0x0800eeb1
 800f1fc:	006ddd00 	.word	0x006ddd00

0800f200 <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 800f200:	b580      	push	{r7, lr}
 800f202:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 800f204:	2040      	movs	r0, #64	; 0x40
 800f206:	f7ff ff77 	bl	800f0f8 <tcp_alloc>
 800f20a:	4603      	mov	r3, r0
}
 800f20c:	4618      	mov	r0, r3
 800f20e:	bd80      	pop	{r7, pc}

0800f210 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800f210:	b580      	push	{r7, lr}
 800f212:	b084      	sub	sp, #16
 800f214:	af00      	add	r7, sp, #0
 800f216:	4603      	mov	r3, r0
 800f218:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800f21a:	2040      	movs	r0, #64	; 0x40
 800f21c:	f7ff ff6c 	bl	800f0f8 <tcp_alloc>
 800f220:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800f222:	68fb      	ldr	r3, [r7, #12]
}
 800f224:	4618      	mov	r0, r3
 800f226:	3710      	adds	r7, #16
 800f228:	46bd      	mov	sp, r7
 800f22a:	bd80      	pop	{r7, pc}

0800f22c <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800f22c:	b480      	push	{r7}
 800f22e:	b083      	sub	sp, #12
 800f230:	af00      	add	r7, sp, #0
 800f232:	6078      	str	r0, [r7, #4]
 800f234:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d002      	beq.n	800f242 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	683a      	ldr	r2, [r7, #0]
 800f240:	611a      	str	r2, [r3, #16]
  }
}
 800f242:	bf00      	nop
 800f244:	370c      	adds	r7, #12
 800f246:	46bd      	mov	sp, r7
 800f248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f24c:	4770      	bx	lr
	...

0800f250 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800f250:	b580      	push	{r7, lr}
 800f252:	b082      	sub	sp, #8
 800f254:	af00      	add	r7, sp, #0
 800f256:	6078      	str	r0, [r7, #4]
 800f258:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	d00e      	beq.n	800f27e <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	7d1b      	ldrb	r3, [r3, #20]
 800f264:	2b01      	cmp	r3, #1
 800f266:	d106      	bne.n	800f276 <tcp_recv+0x26>
 800f268:	4b07      	ldr	r3, [pc, #28]	; (800f288 <tcp_recv+0x38>)
 800f26a:	f240 72df 	movw	r2, #2015	; 0x7df
 800f26e:	4907      	ldr	r1, [pc, #28]	; (800f28c <tcp_recv+0x3c>)
 800f270:	4807      	ldr	r0, [pc, #28]	; (800f290 <tcp_recv+0x40>)
 800f272:	f007 fae5 	bl	8016840 <iprintf>
    pcb->recv = recv;
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	683a      	ldr	r2, [r7, #0]
 800f27a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800f27e:	bf00      	nop
 800f280:	3708      	adds	r7, #8
 800f282:	46bd      	mov	sp, r7
 800f284:	bd80      	pop	{r7, pc}
 800f286:	bf00      	nop
 800f288:	080191ac 	.word	0x080191ac
 800f28c:	08019748 	.word	0x08019748
 800f290:	080191f0 	.word	0x080191f0

0800f294 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800f294:	b580      	push	{r7, lr}
 800f296:	b082      	sub	sp, #8
 800f298:	af00      	add	r7, sp, #0
 800f29a:	6078      	str	r0, [r7, #4]
 800f29c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	d00e      	beq.n	800f2c2 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	7d1b      	ldrb	r3, [r3, #20]
 800f2a8:	2b01      	cmp	r3, #1
 800f2aa:	d106      	bne.n	800f2ba <tcp_sent+0x26>
 800f2ac:	4b07      	ldr	r3, [pc, #28]	; (800f2cc <tcp_sent+0x38>)
 800f2ae:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800f2b2:	4907      	ldr	r1, [pc, #28]	; (800f2d0 <tcp_sent+0x3c>)
 800f2b4:	4807      	ldr	r0, [pc, #28]	; (800f2d4 <tcp_sent+0x40>)
 800f2b6:	f007 fac3 	bl	8016840 <iprintf>
    pcb->sent = sent;
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	683a      	ldr	r2, [r7, #0]
 800f2be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800f2c2:	bf00      	nop
 800f2c4:	3708      	adds	r7, #8
 800f2c6:	46bd      	mov	sp, r7
 800f2c8:	bd80      	pop	{r7, pc}
 800f2ca:	bf00      	nop
 800f2cc:	080191ac 	.word	0x080191ac
 800f2d0:	08019770 	.word	0x08019770
 800f2d4:	080191f0 	.word	0x080191f0

0800f2d8 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800f2d8:	b580      	push	{r7, lr}
 800f2da:	b082      	sub	sp, #8
 800f2dc:	af00      	add	r7, sp, #0
 800f2de:	6078      	str	r0, [r7, #4]
 800f2e0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	d00e      	beq.n	800f306 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	7d1b      	ldrb	r3, [r3, #20]
 800f2ec:	2b01      	cmp	r3, #1
 800f2ee:	d106      	bne.n	800f2fe <tcp_err+0x26>
 800f2f0:	4b07      	ldr	r3, [pc, #28]	; (800f310 <tcp_err+0x38>)
 800f2f2:	f640 020d 	movw	r2, #2061	; 0x80d
 800f2f6:	4907      	ldr	r1, [pc, #28]	; (800f314 <tcp_err+0x3c>)
 800f2f8:	4807      	ldr	r0, [pc, #28]	; (800f318 <tcp_err+0x40>)
 800f2fa:	f007 faa1 	bl	8016840 <iprintf>
    pcb->errf = err;
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	683a      	ldr	r2, [r7, #0]
 800f302:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800f306:	bf00      	nop
 800f308:	3708      	adds	r7, #8
 800f30a:	46bd      	mov	sp, r7
 800f30c:	bd80      	pop	{r7, pc}
 800f30e:	bf00      	nop
 800f310:	080191ac 	.word	0x080191ac
 800f314:	08019798 	.word	0x08019798
 800f318:	080191f0 	.word	0x080191f0

0800f31c <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800f31c:	b480      	push	{r7}
 800f31e:	b085      	sub	sp, #20
 800f320:	af00      	add	r7, sp, #0
 800f322:	6078      	str	r0, [r7, #4]
 800f324:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d008      	beq.n	800f33e <tcp_accept+0x22>
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	7d1b      	ldrb	r3, [r3, #20]
 800f330:	2b01      	cmp	r3, #1
 800f332:	d104      	bne.n	800f33e <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800f338:	68fb      	ldr	r3, [r7, #12]
 800f33a:	683a      	ldr	r2, [r7, #0]
 800f33c:	619a      	str	r2, [r3, #24]
  }
}
 800f33e:	bf00      	nop
 800f340:	3714      	adds	r7, #20
 800f342:	46bd      	mov	sp, r7
 800f344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f348:	4770      	bx	lr
	...

0800f34c <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800f34c:	b580      	push	{r7, lr}
 800f34e:	b084      	sub	sp, #16
 800f350:	af00      	add	r7, sp, #0
 800f352:	60f8      	str	r0, [r7, #12]
 800f354:	60b9      	str	r1, [r7, #8]
 800f356:	4613      	mov	r3, r2
 800f358:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800f35a:	68fb      	ldr	r3, [r7, #12]
 800f35c:	2b00      	cmp	r3, #0
 800f35e:	d107      	bne.n	800f370 <tcp_poll+0x24>
 800f360:	4b0e      	ldr	r3, [pc, #56]	; (800f39c <tcp_poll+0x50>)
 800f362:	f640 023d 	movw	r2, #2109	; 0x83d
 800f366:	490e      	ldr	r1, [pc, #56]	; (800f3a0 <tcp_poll+0x54>)
 800f368:	480e      	ldr	r0, [pc, #56]	; (800f3a4 <tcp_poll+0x58>)
 800f36a:	f007 fa69 	bl	8016840 <iprintf>
 800f36e:	e011      	b.n	800f394 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800f370:	68fb      	ldr	r3, [r7, #12]
 800f372:	7d1b      	ldrb	r3, [r3, #20]
 800f374:	2b01      	cmp	r3, #1
 800f376:	d106      	bne.n	800f386 <tcp_poll+0x3a>
 800f378:	4b08      	ldr	r3, [pc, #32]	; (800f39c <tcp_poll+0x50>)
 800f37a:	f640 023e 	movw	r2, #2110	; 0x83e
 800f37e:	490a      	ldr	r1, [pc, #40]	; (800f3a8 <tcp_poll+0x5c>)
 800f380:	4808      	ldr	r0, [pc, #32]	; (800f3a4 <tcp_poll+0x58>)
 800f382:	f007 fa5d 	bl	8016840 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800f386:	68fb      	ldr	r3, [r7, #12]
 800f388:	68ba      	ldr	r2, [r7, #8]
 800f38a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800f38e:	68fb      	ldr	r3, [r7, #12]
 800f390:	79fa      	ldrb	r2, [r7, #7]
 800f392:	775a      	strb	r2, [r3, #29]
}
 800f394:	3710      	adds	r7, #16
 800f396:	46bd      	mov	sp, r7
 800f398:	bd80      	pop	{r7, pc}
 800f39a:	bf00      	nop
 800f39c:	080191ac 	.word	0x080191ac
 800f3a0:	080197c0 	.word	0x080197c0
 800f3a4:	080191f0 	.word	0x080191f0
 800f3a8:	080197d8 	.word	0x080197d8

0800f3ac <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800f3ac:	b580      	push	{r7, lr}
 800f3ae:	b082      	sub	sp, #8
 800f3b0:	af00      	add	r7, sp, #0
 800f3b2:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d107      	bne.n	800f3ca <tcp_pcb_purge+0x1e>
 800f3ba:	4b21      	ldr	r3, [pc, #132]	; (800f440 <tcp_pcb_purge+0x94>)
 800f3bc:	f640 0251 	movw	r2, #2129	; 0x851
 800f3c0:	4920      	ldr	r1, [pc, #128]	; (800f444 <tcp_pcb_purge+0x98>)
 800f3c2:	4821      	ldr	r0, [pc, #132]	; (800f448 <tcp_pcb_purge+0x9c>)
 800f3c4:	f007 fa3c 	bl	8016840 <iprintf>
 800f3c8:	e037      	b.n	800f43a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	7d1b      	ldrb	r3, [r3, #20]
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d033      	beq.n	800f43a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800f3d6:	2b0a      	cmp	r3, #10
 800f3d8:	d02f      	beq.n	800f43a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800f3de:	2b01      	cmp	r3, #1
 800f3e0:	d02b      	beq.n	800f43a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d007      	beq.n	800f3fa <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f3ee:	4618      	mov	r0, r3
 800f3f0:	f7fd ff52 	bl	800d298 <pbuf_free>
      pcb->refused_data = NULL;
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	2200      	movs	r2, #0
 800f3f8:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	d002      	beq.n	800f408 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800f402:	6878      	ldr	r0, [r7, #4]
 800f404:	f000 f986 	bl	800f714 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f40e:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f414:	4618      	mov	r0, r3
 800f416:	f7ff fcd3 	bl	800edc0 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f41e:	4618      	mov	r0, r3
 800f420:	f7ff fcce 	bl	800edc0 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	2200      	movs	r2, #0
 800f428:	66da      	str	r2, [r3, #108]	; 0x6c
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	2200      	movs	r2, #0
 800f436:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800f43a:	3708      	adds	r7, #8
 800f43c:	46bd      	mov	sp, r7
 800f43e:	bd80      	pop	{r7, pc}
 800f440:	080191ac 	.word	0x080191ac
 800f444:	080197f8 	.word	0x080197f8
 800f448:	080191f0 	.word	0x080191f0

0800f44c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800f44c:	b580      	push	{r7, lr}
 800f44e:	b084      	sub	sp, #16
 800f450:	af00      	add	r7, sp, #0
 800f452:	6078      	str	r0, [r7, #4]
 800f454:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800f456:	683b      	ldr	r3, [r7, #0]
 800f458:	2b00      	cmp	r3, #0
 800f45a:	d106      	bne.n	800f46a <tcp_pcb_remove+0x1e>
 800f45c:	4b3e      	ldr	r3, [pc, #248]	; (800f558 <tcp_pcb_remove+0x10c>)
 800f45e:	f640 0283 	movw	r2, #2179	; 0x883
 800f462:	493e      	ldr	r1, [pc, #248]	; (800f55c <tcp_pcb_remove+0x110>)
 800f464:	483e      	ldr	r0, [pc, #248]	; (800f560 <tcp_pcb_remove+0x114>)
 800f466:	f007 f9eb 	bl	8016840 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	d106      	bne.n	800f47e <tcp_pcb_remove+0x32>
 800f470:	4b39      	ldr	r3, [pc, #228]	; (800f558 <tcp_pcb_remove+0x10c>)
 800f472:	f640 0284 	movw	r2, #2180	; 0x884
 800f476:	493b      	ldr	r1, [pc, #236]	; (800f564 <tcp_pcb_remove+0x118>)
 800f478:	4839      	ldr	r0, [pc, #228]	; (800f560 <tcp_pcb_remove+0x114>)
 800f47a:	f007 f9e1 	bl	8016840 <iprintf>

  TCP_RMV(pcblist, pcb);
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	681b      	ldr	r3, [r3, #0]
 800f482:	683a      	ldr	r2, [r7, #0]
 800f484:	429a      	cmp	r2, r3
 800f486:	d105      	bne.n	800f494 <tcp_pcb_remove+0x48>
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	681b      	ldr	r3, [r3, #0]
 800f48c:	68da      	ldr	r2, [r3, #12]
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	601a      	str	r2, [r3, #0]
 800f492:	e013      	b.n	800f4bc <tcp_pcb_remove+0x70>
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	681b      	ldr	r3, [r3, #0]
 800f498:	60fb      	str	r3, [r7, #12]
 800f49a:	e00c      	b.n	800f4b6 <tcp_pcb_remove+0x6a>
 800f49c:	68fb      	ldr	r3, [r7, #12]
 800f49e:	68db      	ldr	r3, [r3, #12]
 800f4a0:	683a      	ldr	r2, [r7, #0]
 800f4a2:	429a      	cmp	r2, r3
 800f4a4:	d104      	bne.n	800f4b0 <tcp_pcb_remove+0x64>
 800f4a6:	683b      	ldr	r3, [r7, #0]
 800f4a8:	68da      	ldr	r2, [r3, #12]
 800f4aa:	68fb      	ldr	r3, [r7, #12]
 800f4ac:	60da      	str	r2, [r3, #12]
 800f4ae:	e005      	b.n	800f4bc <tcp_pcb_remove+0x70>
 800f4b0:	68fb      	ldr	r3, [r7, #12]
 800f4b2:	68db      	ldr	r3, [r3, #12]
 800f4b4:	60fb      	str	r3, [r7, #12]
 800f4b6:	68fb      	ldr	r3, [r7, #12]
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d1ef      	bne.n	800f49c <tcp_pcb_remove+0x50>
 800f4bc:	683b      	ldr	r3, [r7, #0]
 800f4be:	2200      	movs	r2, #0
 800f4c0:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800f4c2:	6838      	ldr	r0, [r7, #0]
 800f4c4:	f7ff ff72 	bl	800f3ac <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800f4c8:	683b      	ldr	r3, [r7, #0]
 800f4ca:	7d1b      	ldrb	r3, [r3, #20]
 800f4cc:	2b0a      	cmp	r3, #10
 800f4ce:	d013      	beq.n	800f4f8 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800f4d0:	683b      	ldr	r3, [r7, #0]
 800f4d2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800f4d4:	2b01      	cmp	r3, #1
 800f4d6:	d00f      	beq.n	800f4f8 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800f4d8:	683b      	ldr	r3, [r7, #0]
 800f4da:	8b5b      	ldrh	r3, [r3, #26]
 800f4dc:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d009      	beq.n	800f4f8 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800f4e4:	683b      	ldr	r3, [r7, #0]
 800f4e6:	8b5b      	ldrh	r3, [r3, #26]
 800f4e8:	f043 0302 	orr.w	r3, r3, #2
 800f4ec:	b29a      	uxth	r2, r3
 800f4ee:	683b      	ldr	r3, [r7, #0]
 800f4f0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f4f2:	6838      	ldr	r0, [r7, #0]
 800f4f4:	f003 fbc6 	bl	8012c84 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800f4f8:	683b      	ldr	r3, [r7, #0]
 800f4fa:	7d1b      	ldrb	r3, [r3, #20]
 800f4fc:	2b01      	cmp	r3, #1
 800f4fe:	d020      	beq.n	800f542 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800f500:	683b      	ldr	r3, [r7, #0]
 800f502:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f504:	2b00      	cmp	r3, #0
 800f506:	d006      	beq.n	800f516 <tcp_pcb_remove+0xca>
 800f508:	4b13      	ldr	r3, [pc, #76]	; (800f558 <tcp_pcb_remove+0x10c>)
 800f50a:	f640 0293 	movw	r2, #2195	; 0x893
 800f50e:	4916      	ldr	r1, [pc, #88]	; (800f568 <tcp_pcb_remove+0x11c>)
 800f510:	4813      	ldr	r0, [pc, #76]	; (800f560 <tcp_pcb_remove+0x114>)
 800f512:	f007 f995 	bl	8016840 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800f516:	683b      	ldr	r3, [r7, #0]
 800f518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d006      	beq.n	800f52c <tcp_pcb_remove+0xe0>
 800f51e:	4b0e      	ldr	r3, [pc, #56]	; (800f558 <tcp_pcb_remove+0x10c>)
 800f520:	f640 0294 	movw	r2, #2196	; 0x894
 800f524:	4911      	ldr	r1, [pc, #68]	; (800f56c <tcp_pcb_remove+0x120>)
 800f526:	480e      	ldr	r0, [pc, #56]	; (800f560 <tcp_pcb_remove+0x114>)
 800f528:	f007 f98a 	bl	8016840 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800f52c:	683b      	ldr	r3, [r7, #0]
 800f52e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f530:	2b00      	cmp	r3, #0
 800f532:	d006      	beq.n	800f542 <tcp_pcb_remove+0xf6>
 800f534:	4b08      	ldr	r3, [pc, #32]	; (800f558 <tcp_pcb_remove+0x10c>)
 800f536:	f640 0296 	movw	r2, #2198	; 0x896
 800f53a:	490d      	ldr	r1, [pc, #52]	; (800f570 <tcp_pcb_remove+0x124>)
 800f53c:	4808      	ldr	r0, [pc, #32]	; (800f560 <tcp_pcb_remove+0x114>)
 800f53e:	f007 f97f 	bl	8016840 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800f542:	683b      	ldr	r3, [r7, #0]
 800f544:	2200      	movs	r2, #0
 800f546:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800f548:	683b      	ldr	r3, [r7, #0]
 800f54a:	2200      	movs	r2, #0
 800f54c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800f54e:	bf00      	nop
 800f550:	3710      	adds	r7, #16
 800f552:	46bd      	mov	sp, r7
 800f554:	bd80      	pop	{r7, pc}
 800f556:	bf00      	nop
 800f558:	080191ac 	.word	0x080191ac
 800f55c:	08019814 	.word	0x08019814
 800f560:	080191f0 	.word	0x080191f0
 800f564:	08019830 	.word	0x08019830
 800f568:	08019850 	.word	0x08019850
 800f56c:	08019868 	.word	0x08019868
 800f570:	08019884 	.word	0x08019884

0800f574 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800f574:	b580      	push	{r7, lr}
 800f576:	b082      	sub	sp, #8
 800f578:	af00      	add	r7, sp, #0
 800f57a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	2b00      	cmp	r3, #0
 800f580:	d106      	bne.n	800f590 <tcp_next_iss+0x1c>
 800f582:	4b0a      	ldr	r3, [pc, #40]	; (800f5ac <tcp_next_iss+0x38>)
 800f584:	f640 02af 	movw	r2, #2223	; 0x8af
 800f588:	4909      	ldr	r1, [pc, #36]	; (800f5b0 <tcp_next_iss+0x3c>)
 800f58a:	480a      	ldr	r0, [pc, #40]	; (800f5b4 <tcp_next_iss+0x40>)
 800f58c:	f007 f958 	bl	8016840 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800f590:	4b09      	ldr	r3, [pc, #36]	; (800f5b8 <tcp_next_iss+0x44>)
 800f592:	681a      	ldr	r2, [r3, #0]
 800f594:	4b09      	ldr	r3, [pc, #36]	; (800f5bc <tcp_next_iss+0x48>)
 800f596:	681b      	ldr	r3, [r3, #0]
 800f598:	4413      	add	r3, r2
 800f59a:	4a07      	ldr	r2, [pc, #28]	; (800f5b8 <tcp_next_iss+0x44>)
 800f59c:	6013      	str	r3, [r2, #0]
  return iss;
 800f59e:	4b06      	ldr	r3, [pc, #24]	; (800f5b8 <tcp_next_iss+0x44>)
 800f5a0:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800f5a2:	4618      	mov	r0, r3
 800f5a4:	3708      	adds	r7, #8
 800f5a6:	46bd      	mov	sp, r7
 800f5a8:	bd80      	pop	{r7, pc}
 800f5aa:	bf00      	nop
 800f5ac:	080191ac 	.word	0x080191ac
 800f5b0:	0801989c 	.word	0x0801989c
 800f5b4:	080191f0 	.word	0x080191f0
 800f5b8:	20000064 	.word	0x20000064
 800f5bc:	20008ba8 	.word	0x20008ba8

0800f5c0 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800f5c0:	b580      	push	{r7, lr}
 800f5c2:	b086      	sub	sp, #24
 800f5c4:	af00      	add	r7, sp, #0
 800f5c6:	4603      	mov	r3, r0
 800f5c8:	60b9      	str	r1, [r7, #8]
 800f5ca:	607a      	str	r2, [r7, #4]
 800f5cc:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	d106      	bne.n	800f5e2 <tcp_eff_send_mss_netif+0x22>
 800f5d4:	4b14      	ldr	r3, [pc, #80]	; (800f628 <tcp_eff_send_mss_netif+0x68>)
 800f5d6:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800f5da:	4914      	ldr	r1, [pc, #80]	; (800f62c <tcp_eff_send_mss_netif+0x6c>)
 800f5dc:	4814      	ldr	r0, [pc, #80]	; (800f630 <tcp_eff_send_mss_netif+0x70>)
 800f5de:	f007 f92f 	bl	8016840 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800f5e2:	68bb      	ldr	r3, [r7, #8]
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	d101      	bne.n	800f5ec <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800f5e8:	89fb      	ldrh	r3, [r7, #14]
 800f5ea:	e019      	b.n	800f620 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800f5ec:	68bb      	ldr	r3, [r7, #8]
 800f5ee:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f5f0:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800f5f2:	8afb      	ldrh	r3, [r7, #22]
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	d012      	beq.n	800f61e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800f5f8:	2328      	movs	r3, #40	; 0x28
 800f5fa:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800f5fc:	8afa      	ldrh	r2, [r7, #22]
 800f5fe:	8abb      	ldrh	r3, [r7, #20]
 800f600:	429a      	cmp	r2, r3
 800f602:	d904      	bls.n	800f60e <tcp_eff_send_mss_netif+0x4e>
 800f604:	8afa      	ldrh	r2, [r7, #22]
 800f606:	8abb      	ldrh	r3, [r7, #20]
 800f608:	1ad3      	subs	r3, r2, r3
 800f60a:	b29b      	uxth	r3, r3
 800f60c:	e000      	b.n	800f610 <tcp_eff_send_mss_netif+0x50>
 800f60e:	2300      	movs	r3, #0
 800f610:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800f612:	8a7a      	ldrh	r2, [r7, #18]
 800f614:	89fb      	ldrh	r3, [r7, #14]
 800f616:	4293      	cmp	r3, r2
 800f618:	bf28      	it	cs
 800f61a:	4613      	movcs	r3, r2
 800f61c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800f61e:	89fb      	ldrh	r3, [r7, #14]
}
 800f620:	4618      	mov	r0, r3
 800f622:	3718      	adds	r7, #24
 800f624:	46bd      	mov	sp, r7
 800f626:	bd80      	pop	{r7, pc}
 800f628:	080191ac 	.word	0x080191ac
 800f62c:	080198b8 	.word	0x080198b8
 800f630:	080191f0 	.word	0x080191f0

0800f634 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800f634:	b580      	push	{r7, lr}
 800f636:	b084      	sub	sp, #16
 800f638:	af00      	add	r7, sp, #0
 800f63a:	6078      	str	r0, [r7, #4]
 800f63c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800f63e:	683b      	ldr	r3, [r7, #0]
 800f640:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	2b00      	cmp	r3, #0
 800f646:	d119      	bne.n	800f67c <tcp_netif_ip_addr_changed_pcblist+0x48>
 800f648:	4b10      	ldr	r3, [pc, #64]	; (800f68c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800f64a:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800f64e:	4910      	ldr	r1, [pc, #64]	; (800f690 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800f650:	4810      	ldr	r0, [pc, #64]	; (800f694 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800f652:	f007 f8f5 	bl	8016840 <iprintf>

  while (pcb != NULL) {
 800f656:	e011      	b.n	800f67c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800f658:	68fb      	ldr	r3, [r7, #12]
 800f65a:	681a      	ldr	r2, [r3, #0]
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	681b      	ldr	r3, [r3, #0]
 800f660:	429a      	cmp	r2, r3
 800f662:	d108      	bne.n	800f676 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800f664:	68fb      	ldr	r3, [r7, #12]
 800f666:	68db      	ldr	r3, [r3, #12]
 800f668:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800f66a:	68f8      	ldr	r0, [r7, #12]
 800f66c:	f7fe fc00 	bl	800de70 <tcp_abort>
      pcb = next;
 800f670:	68bb      	ldr	r3, [r7, #8]
 800f672:	60fb      	str	r3, [r7, #12]
 800f674:	e002      	b.n	800f67c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800f676:	68fb      	ldr	r3, [r7, #12]
 800f678:	68db      	ldr	r3, [r3, #12]
 800f67a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800f67c:	68fb      	ldr	r3, [r7, #12]
 800f67e:	2b00      	cmp	r3, #0
 800f680:	d1ea      	bne.n	800f658 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800f682:	bf00      	nop
 800f684:	bf00      	nop
 800f686:	3710      	adds	r7, #16
 800f688:	46bd      	mov	sp, r7
 800f68a:	bd80      	pop	{r7, pc}
 800f68c:	080191ac 	.word	0x080191ac
 800f690:	080198e0 	.word	0x080198e0
 800f694:	080191f0 	.word	0x080191f0

0800f698 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800f698:	b580      	push	{r7, lr}
 800f69a:	b084      	sub	sp, #16
 800f69c:	af00      	add	r7, sp, #0
 800f69e:	6078      	str	r0, [r7, #4]
 800f6a0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	d02a      	beq.n	800f6fe <tcp_netif_ip_addr_changed+0x66>
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	681b      	ldr	r3, [r3, #0]
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d026      	beq.n	800f6fe <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800f6b0:	4b15      	ldr	r3, [pc, #84]	; (800f708 <tcp_netif_ip_addr_changed+0x70>)
 800f6b2:	681b      	ldr	r3, [r3, #0]
 800f6b4:	4619      	mov	r1, r3
 800f6b6:	6878      	ldr	r0, [r7, #4]
 800f6b8:	f7ff ffbc 	bl	800f634 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800f6bc:	4b13      	ldr	r3, [pc, #76]	; (800f70c <tcp_netif_ip_addr_changed+0x74>)
 800f6be:	681b      	ldr	r3, [r3, #0]
 800f6c0:	4619      	mov	r1, r3
 800f6c2:	6878      	ldr	r0, [r7, #4]
 800f6c4:	f7ff ffb6 	bl	800f634 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800f6c8:	683b      	ldr	r3, [r7, #0]
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	d017      	beq.n	800f6fe <tcp_netif_ip_addr_changed+0x66>
 800f6ce:	683b      	ldr	r3, [r7, #0]
 800f6d0:	681b      	ldr	r3, [r3, #0]
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	d013      	beq.n	800f6fe <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f6d6:	4b0e      	ldr	r3, [pc, #56]	; (800f710 <tcp_netif_ip_addr_changed+0x78>)
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	60fb      	str	r3, [r7, #12]
 800f6dc:	e00c      	b.n	800f6f8 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800f6de:	68fb      	ldr	r3, [r7, #12]
 800f6e0:	681a      	ldr	r2, [r3, #0]
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	681b      	ldr	r3, [r3, #0]
 800f6e6:	429a      	cmp	r2, r3
 800f6e8:	d103      	bne.n	800f6f2 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800f6ea:	683b      	ldr	r3, [r7, #0]
 800f6ec:	681a      	ldr	r2, [r3, #0]
 800f6ee:	68fb      	ldr	r3, [r7, #12]
 800f6f0:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f6f2:	68fb      	ldr	r3, [r7, #12]
 800f6f4:	68db      	ldr	r3, [r3, #12]
 800f6f6:	60fb      	str	r3, [r7, #12]
 800f6f8:	68fb      	ldr	r3, [r7, #12]
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	d1ef      	bne.n	800f6de <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800f6fe:	bf00      	nop
 800f700:	3710      	adds	r7, #16
 800f702:	46bd      	mov	sp, r7
 800f704:	bd80      	pop	{r7, pc}
 800f706:	bf00      	nop
 800f708:	20008bb4 	.word	0x20008bb4
 800f70c:	20008bac 	.word	0x20008bac
 800f710:	20008bb0 	.word	0x20008bb0

0800f714 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800f714:	b580      	push	{r7, lr}
 800f716:	b082      	sub	sp, #8
 800f718:	af00      	add	r7, sp, #0
 800f71a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f720:	2b00      	cmp	r3, #0
 800f722:	d007      	beq.n	800f734 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f728:	4618      	mov	r0, r3
 800f72a:	f7ff fb49 	bl	800edc0 <tcp_segs_free>
    pcb->ooseq = NULL;
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	2200      	movs	r2, #0
 800f732:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800f734:	bf00      	nop
 800f736:	3708      	adds	r7, #8
 800f738:	46bd      	mov	sp, r7
 800f73a:	bd80      	pop	{r7, pc}

0800f73c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800f73c:	b590      	push	{r4, r7, lr}
 800f73e:	b08d      	sub	sp, #52	; 0x34
 800f740:	af04      	add	r7, sp, #16
 800f742:	6078      	str	r0, [r7, #4]
 800f744:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	2b00      	cmp	r3, #0
 800f74a:	d105      	bne.n	800f758 <tcp_input+0x1c>
 800f74c:	4b9b      	ldr	r3, [pc, #620]	; (800f9bc <tcp_input+0x280>)
 800f74e:	2283      	movs	r2, #131	; 0x83
 800f750:	499b      	ldr	r1, [pc, #620]	; (800f9c0 <tcp_input+0x284>)
 800f752:	489c      	ldr	r0, [pc, #624]	; (800f9c4 <tcp_input+0x288>)
 800f754:	f007 f874 	bl	8016840 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	685b      	ldr	r3, [r3, #4]
 800f75c:	4a9a      	ldr	r2, [pc, #616]	; (800f9c8 <tcp_input+0x28c>)
 800f75e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	895b      	ldrh	r3, [r3, #10]
 800f764:	2b13      	cmp	r3, #19
 800f766:	f240 83d1 	bls.w	800ff0c <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f76a:	4b98      	ldr	r3, [pc, #608]	; (800f9cc <tcp_input+0x290>)
 800f76c:	695b      	ldr	r3, [r3, #20]
 800f76e:	4a97      	ldr	r2, [pc, #604]	; (800f9cc <tcp_input+0x290>)
 800f770:	6812      	ldr	r2, [r2, #0]
 800f772:	4611      	mov	r1, r2
 800f774:	4618      	mov	r0, r3
 800f776:	f006 f8a9 	bl	80158cc <ip4_addr_isbroadcast_u32>
 800f77a:	4603      	mov	r3, r0
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	f040 83c7 	bne.w	800ff10 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800f782:	4b92      	ldr	r3, [pc, #584]	; (800f9cc <tcp_input+0x290>)
 800f784:	695b      	ldr	r3, [r3, #20]
 800f786:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f78a:	2be0      	cmp	r3, #224	; 0xe0
 800f78c:	f000 83c0 	beq.w	800ff10 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800f790:	4b8d      	ldr	r3, [pc, #564]	; (800f9c8 <tcp_input+0x28c>)
 800f792:	681b      	ldr	r3, [r3, #0]
 800f794:	899b      	ldrh	r3, [r3, #12]
 800f796:	b29b      	uxth	r3, r3
 800f798:	4618      	mov	r0, r3
 800f79a:	f7fc f9f7 	bl	800bb8c <lwip_htons>
 800f79e:	4603      	mov	r3, r0
 800f7a0:	0b1b      	lsrs	r3, r3, #12
 800f7a2:	b29b      	uxth	r3, r3
 800f7a4:	b2db      	uxtb	r3, r3
 800f7a6:	009b      	lsls	r3, r3, #2
 800f7a8:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800f7aa:	7cbb      	ldrb	r3, [r7, #18]
 800f7ac:	2b13      	cmp	r3, #19
 800f7ae:	f240 83b1 	bls.w	800ff14 <tcp_input+0x7d8>
 800f7b2:	7cbb      	ldrb	r3, [r7, #18]
 800f7b4:	b29a      	uxth	r2, r3
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	891b      	ldrh	r3, [r3, #8]
 800f7ba:	429a      	cmp	r2, r3
 800f7bc:	f200 83aa 	bhi.w	800ff14 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800f7c0:	7cbb      	ldrb	r3, [r7, #18]
 800f7c2:	b29b      	uxth	r3, r3
 800f7c4:	3b14      	subs	r3, #20
 800f7c6:	b29a      	uxth	r2, r3
 800f7c8:	4b81      	ldr	r3, [pc, #516]	; (800f9d0 <tcp_input+0x294>)
 800f7ca:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800f7cc:	4b81      	ldr	r3, [pc, #516]	; (800f9d4 <tcp_input+0x298>)
 800f7ce:	2200      	movs	r2, #0
 800f7d0:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	895a      	ldrh	r2, [r3, #10]
 800f7d6:	7cbb      	ldrb	r3, [r7, #18]
 800f7d8:	b29b      	uxth	r3, r3
 800f7da:	429a      	cmp	r2, r3
 800f7dc:	d309      	bcc.n	800f7f2 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800f7de:	4b7c      	ldr	r3, [pc, #496]	; (800f9d0 <tcp_input+0x294>)
 800f7e0:	881a      	ldrh	r2, [r3, #0]
 800f7e2:	4b7d      	ldr	r3, [pc, #500]	; (800f9d8 <tcp_input+0x29c>)
 800f7e4:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800f7e6:	7cbb      	ldrb	r3, [r7, #18]
 800f7e8:	4619      	mov	r1, r3
 800f7ea:	6878      	ldr	r0, [r7, #4]
 800f7ec:	f7fd fcce 	bl	800d18c <pbuf_remove_header>
 800f7f0:	e04e      	b.n	800f890 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	681b      	ldr	r3, [r3, #0]
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d105      	bne.n	800f806 <tcp_input+0xca>
 800f7fa:	4b70      	ldr	r3, [pc, #448]	; (800f9bc <tcp_input+0x280>)
 800f7fc:	22c2      	movs	r2, #194	; 0xc2
 800f7fe:	4977      	ldr	r1, [pc, #476]	; (800f9dc <tcp_input+0x2a0>)
 800f800:	4870      	ldr	r0, [pc, #448]	; (800f9c4 <tcp_input+0x288>)
 800f802:	f007 f81d 	bl	8016840 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800f806:	2114      	movs	r1, #20
 800f808:	6878      	ldr	r0, [r7, #4]
 800f80a:	f7fd fcbf 	bl	800d18c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	895a      	ldrh	r2, [r3, #10]
 800f812:	4b71      	ldr	r3, [pc, #452]	; (800f9d8 <tcp_input+0x29c>)
 800f814:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800f816:	4b6e      	ldr	r3, [pc, #440]	; (800f9d0 <tcp_input+0x294>)
 800f818:	881a      	ldrh	r2, [r3, #0]
 800f81a:	4b6f      	ldr	r3, [pc, #444]	; (800f9d8 <tcp_input+0x29c>)
 800f81c:	881b      	ldrh	r3, [r3, #0]
 800f81e:	1ad3      	subs	r3, r2, r3
 800f820:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800f822:	4b6d      	ldr	r3, [pc, #436]	; (800f9d8 <tcp_input+0x29c>)
 800f824:	881b      	ldrh	r3, [r3, #0]
 800f826:	4619      	mov	r1, r3
 800f828:	6878      	ldr	r0, [r7, #4]
 800f82a:	f7fd fcaf 	bl	800d18c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	681b      	ldr	r3, [r3, #0]
 800f832:	895b      	ldrh	r3, [r3, #10]
 800f834:	8a3a      	ldrh	r2, [r7, #16]
 800f836:	429a      	cmp	r2, r3
 800f838:	f200 836e 	bhi.w	800ff18 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	681b      	ldr	r3, [r3, #0]
 800f840:	685b      	ldr	r3, [r3, #4]
 800f842:	4a64      	ldr	r2, [pc, #400]	; (800f9d4 <tcp_input+0x298>)
 800f844:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	681b      	ldr	r3, [r3, #0]
 800f84a:	8a3a      	ldrh	r2, [r7, #16]
 800f84c:	4611      	mov	r1, r2
 800f84e:	4618      	mov	r0, r3
 800f850:	f7fd fc9c 	bl	800d18c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	891a      	ldrh	r2, [r3, #8]
 800f858:	8a3b      	ldrh	r3, [r7, #16]
 800f85a:	1ad3      	subs	r3, r2, r3
 800f85c:	b29a      	uxth	r2, r3
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	895b      	ldrh	r3, [r3, #10]
 800f866:	2b00      	cmp	r3, #0
 800f868:	d005      	beq.n	800f876 <tcp_input+0x13a>
 800f86a:	4b54      	ldr	r3, [pc, #336]	; (800f9bc <tcp_input+0x280>)
 800f86c:	22df      	movs	r2, #223	; 0xdf
 800f86e:	495c      	ldr	r1, [pc, #368]	; (800f9e0 <tcp_input+0x2a4>)
 800f870:	4854      	ldr	r0, [pc, #336]	; (800f9c4 <tcp_input+0x288>)
 800f872:	f006 ffe5 	bl	8016840 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	891a      	ldrh	r2, [r3, #8]
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	681b      	ldr	r3, [r3, #0]
 800f87e:	891b      	ldrh	r3, [r3, #8]
 800f880:	429a      	cmp	r2, r3
 800f882:	d005      	beq.n	800f890 <tcp_input+0x154>
 800f884:	4b4d      	ldr	r3, [pc, #308]	; (800f9bc <tcp_input+0x280>)
 800f886:	22e0      	movs	r2, #224	; 0xe0
 800f888:	4956      	ldr	r1, [pc, #344]	; (800f9e4 <tcp_input+0x2a8>)
 800f88a:	484e      	ldr	r0, [pc, #312]	; (800f9c4 <tcp_input+0x288>)
 800f88c:	f006 ffd8 	bl	8016840 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800f890:	4b4d      	ldr	r3, [pc, #308]	; (800f9c8 <tcp_input+0x28c>)
 800f892:	681b      	ldr	r3, [r3, #0]
 800f894:	881b      	ldrh	r3, [r3, #0]
 800f896:	b29b      	uxth	r3, r3
 800f898:	4a4b      	ldr	r2, [pc, #300]	; (800f9c8 <tcp_input+0x28c>)
 800f89a:	6814      	ldr	r4, [r2, #0]
 800f89c:	4618      	mov	r0, r3
 800f89e:	f7fc f975 	bl	800bb8c <lwip_htons>
 800f8a2:	4603      	mov	r3, r0
 800f8a4:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800f8a6:	4b48      	ldr	r3, [pc, #288]	; (800f9c8 <tcp_input+0x28c>)
 800f8a8:	681b      	ldr	r3, [r3, #0]
 800f8aa:	885b      	ldrh	r3, [r3, #2]
 800f8ac:	b29b      	uxth	r3, r3
 800f8ae:	4a46      	ldr	r2, [pc, #280]	; (800f9c8 <tcp_input+0x28c>)
 800f8b0:	6814      	ldr	r4, [r2, #0]
 800f8b2:	4618      	mov	r0, r3
 800f8b4:	f7fc f96a 	bl	800bb8c <lwip_htons>
 800f8b8:	4603      	mov	r3, r0
 800f8ba:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800f8bc:	4b42      	ldr	r3, [pc, #264]	; (800f9c8 <tcp_input+0x28c>)
 800f8be:	681b      	ldr	r3, [r3, #0]
 800f8c0:	685b      	ldr	r3, [r3, #4]
 800f8c2:	4a41      	ldr	r2, [pc, #260]	; (800f9c8 <tcp_input+0x28c>)
 800f8c4:	6814      	ldr	r4, [r2, #0]
 800f8c6:	4618      	mov	r0, r3
 800f8c8:	f7fc f975 	bl	800bbb6 <lwip_htonl>
 800f8cc:	4603      	mov	r3, r0
 800f8ce:	6063      	str	r3, [r4, #4]
 800f8d0:	6863      	ldr	r3, [r4, #4]
 800f8d2:	4a45      	ldr	r2, [pc, #276]	; (800f9e8 <tcp_input+0x2ac>)
 800f8d4:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800f8d6:	4b3c      	ldr	r3, [pc, #240]	; (800f9c8 <tcp_input+0x28c>)
 800f8d8:	681b      	ldr	r3, [r3, #0]
 800f8da:	689b      	ldr	r3, [r3, #8]
 800f8dc:	4a3a      	ldr	r2, [pc, #232]	; (800f9c8 <tcp_input+0x28c>)
 800f8de:	6814      	ldr	r4, [r2, #0]
 800f8e0:	4618      	mov	r0, r3
 800f8e2:	f7fc f968 	bl	800bbb6 <lwip_htonl>
 800f8e6:	4603      	mov	r3, r0
 800f8e8:	60a3      	str	r3, [r4, #8]
 800f8ea:	68a3      	ldr	r3, [r4, #8]
 800f8ec:	4a3f      	ldr	r2, [pc, #252]	; (800f9ec <tcp_input+0x2b0>)
 800f8ee:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800f8f0:	4b35      	ldr	r3, [pc, #212]	; (800f9c8 <tcp_input+0x28c>)
 800f8f2:	681b      	ldr	r3, [r3, #0]
 800f8f4:	89db      	ldrh	r3, [r3, #14]
 800f8f6:	b29b      	uxth	r3, r3
 800f8f8:	4a33      	ldr	r2, [pc, #204]	; (800f9c8 <tcp_input+0x28c>)
 800f8fa:	6814      	ldr	r4, [r2, #0]
 800f8fc:	4618      	mov	r0, r3
 800f8fe:	f7fc f945 	bl	800bb8c <lwip_htons>
 800f902:	4603      	mov	r3, r0
 800f904:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800f906:	4b30      	ldr	r3, [pc, #192]	; (800f9c8 <tcp_input+0x28c>)
 800f908:	681b      	ldr	r3, [r3, #0]
 800f90a:	899b      	ldrh	r3, [r3, #12]
 800f90c:	b29b      	uxth	r3, r3
 800f90e:	4618      	mov	r0, r3
 800f910:	f7fc f93c 	bl	800bb8c <lwip_htons>
 800f914:	4603      	mov	r3, r0
 800f916:	b2db      	uxtb	r3, r3
 800f918:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f91c:	b2da      	uxtb	r2, r3
 800f91e:	4b34      	ldr	r3, [pc, #208]	; (800f9f0 <tcp_input+0x2b4>)
 800f920:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	891a      	ldrh	r2, [r3, #8]
 800f926:	4b33      	ldr	r3, [pc, #204]	; (800f9f4 <tcp_input+0x2b8>)
 800f928:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800f92a:	4b31      	ldr	r3, [pc, #196]	; (800f9f0 <tcp_input+0x2b4>)
 800f92c:	781b      	ldrb	r3, [r3, #0]
 800f92e:	f003 0303 	and.w	r3, r3, #3
 800f932:	2b00      	cmp	r3, #0
 800f934:	d00c      	beq.n	800f950 <tcp_input+0x214>
    tcplen++;
 800f936:	4b2f      	ldr	r3, [pc, #188]	; (800f9f4 <tcp_input+0x2b8>)
 800f938:	881b      	ldrh	r3, [r3, #0]
 800f93a:	3301      	adds	r3, #1
 800f93c:	b29a      	uxth	r2, r3
 800f93e:	4b2d      	ldr	r3, [pc, #180]	; (800f9f4 <tcp_input+0x2b8>)
 800f940:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	891a      	ldrh	r2, [r3, #8]
 800f946:	4b2b      	ldr	r3, [pc, #172]	; (800f9f4 <tcp_input+0x2b8>)
 800f948:	881b      	ldrh	r3, [r3, #0]
 800f94a:	429a      	cmp	r2, r3
 800f94c:	f200 82e6 	bhi.w	800ff1c <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800f950:	2300      	movs	r3, #0
 800f952:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f954:	4b28      	ldr	r3, [pc, #160]	; (800f9f8 <tcp_input+0x2bc>)
 800f956:	681b      	ldr	r3, [r3, #0]
 800f958:	61fb      	str	r3, [r7, #28]
 800f95a:	e09d      	b.n	800fa98 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800f95c:	69fb      	ldr	r3, [r7, #28]
 800f95e:	7d1b      	ldrb	r3, [r3, #20]
 800f960:	2b00      	cmp	r3, #0
 800f962:	d105      	bne.n	800f970 <tcp_input+0x234>
 800f964:	4b15      	ldr	r3, [pc, #84]	; (800f9bc <tcp_input+0x280>)
 800f966:	22fb      	movs	r2, #251	; 0xfb
 800f968:	4924      	ldr	r1, [pc, #144]	; (800f9fc <tcp_input+0x2c0>)
 800f96a:	4816      	ldr	r0, [pc, #88]	; (800f9c4 <tcp_input+0x288>)
 800f96c:	f006 ff68 	bl	8016840 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800f970:	69fb      	ldr	r3, [r7, #28]
 800f972:	7d1b      	ldrb	r3, [r3, #20]
 800f974:	2b0a      	cmp	r3, #10
 800f976:	d105      	bne.n	800f984 <tcp_input+0x248>
 800f978:	4b10      	ldr	r3, [pc, #64]	; (800f9bc <tcp_input+0x280>)
 800f97a:	22fc      	movs	r2, #252	; 0xfc
 800f97c:	4920      	ldr	r1, [pc, #128]	; (800fa00 <tcp_input+0x2c4>)
 800f97e:	4811      	ldr	r0, [pc, #68]	; (800f9c4 <tcp_input+0x288>)
 800f980:	f006 ff5e 	bl	8016840 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800f984:	69fb      	ldr	r3, [r7, #28]
 800f986:	7d1b      	ldrb	r3, [r3, #20]
 800f988:	2b01      	cmp	r3, #1
 800f98a:	d105      	bne.n	800f998 <tcp_input+0x25c>
 800f98c:	4b0b      	ldr	r3, [pc, #44]	; (800f9bc <tcp_input+0x280>)
 800f98e:	22fd      	movs	r2, #253	; 0xfd
 800f990:	491c      	ldr	r1, [pc, #112]	; (800fa04 <tcp_input+0x2c8>)
 800f992:	480c      	ldr	r0, [pc, #48]	; (800f9c4 <tcp_input+0x288>)
 800f994:	f006 ff54 	bl	8016840 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f998:	69fb      	ldr	r3, [r7, #28]
 800f99a:	7a1b      	ldrb	r3, [r3, #8]
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	d033      	beq.n	800fa08 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f9a0:	69fb      	ldr	r3, [r7, #28]
 800f9a2:	7a1a      	ldrb	r2, [r3, #8]
 800f9a4:	4b09      	ldr	r3, [pc, #36]	; (800f9cc <tcp_input+0x290>)
 800f9a6:	685b      	ldr	r3, [r3, #4]
 800f9a8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f9ac:	3301      	adds	r3, #1
 800f9ae:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f9b0:	429a      	cmp	r2, r3
 800f9b2:	d029      	beq.n	800fa08 <tcp_input+0x2cc>
      prev = pcb;
 800f9b4:	69fb      	ldr	r3, [r7, #28]
 800f9b6:	61bb      	str	r3, [r7, #24]
      continue;
 800f9b8:	e06b      	b.n	800fa92 <tcp_input+0x356>
 800f9ba:	bf00      	nop
 800f9bc:	08019914 	.word	0x08019914
 800f9c0:	08019948 	.word	0x08019948
 800f9c4:	08019960 	.word	0x08019960
 800f9c8:	20008bd0 	.word	0x20008bd0
 800f9cc:	20005638 	.word	0x20005638
 800f9d0:	20008bd4 	.word	0x20008bd4
 800f9d4:	20008bd8 	.word	0x20008bd8
 800f9d8:	20008bd6 	.word	0x20008bd6
 800f9dc:	08019988 	.word	0x08019988
 800f9e0:	08019998 	.word	0x08019998
 800f9e4:	080199a4 	.word	0x080199a4
 800f9e8:	20008be0 	.word	0x20008be0
 800f9ec:	20008be4 	.word	0x20008be4
 800f9f0:	20008bec 	.word	0x20008bec
 800f9f4:	20008bea 	.word	0x20008bea
 800f9f8:	20008bb4 	.word	0x20008bb4
 800f9fc:	080199c4 	.word	0x080199c4
 800fa00:	080199ec 	.word	0x080199ec
 800fa04:	08019a18 	.word	0x08019a18
    }

    if (pcb->remote_port == tcphdr->src &&
 800fa08:	69fb      	ldr	r3, [r7, #28]
 800fa0a:	8b1a      	ldrh	r2, [r3, #24]
 800fa0c:	4b72      	ldr	r3, [pc, #456]	; (800fbd8 <tcp_input+0x49c>)
 800fa0e:	681b      	ldr	r3, [r3, #0]
 800fa10:	881b      	ldrh	r3, [r3, #0]
 800fa12:	b29b      	uxth	r3, r3
 800fa14:	429a      	cmp	r2, r3
 800fa16:	d13a      	bne.n	800fa8e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800fa18:	69fb      	ldr	r3, [r7, #28]
 800fa1a:	8ada      	ldrh	r2, [r3, #22]
 800fa1c:	4b6e      	ldr	r3, [pc, #440]	; (800fbd8 <tcp_input+0x49c>)
 800fa1e:	681b      	ldr	r3, [r3, #0]
 800fa20:	885b      	ldrh	r3, [r3, #2]
 800fa22:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800fa24:	429a      	cmp	r2, r3
 800fa26:	d132      	bne.n	800fa8e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800fa28:	69fb      	ldr	r3, [r7, #28]
 800fa2a:	685a      	ldr	r2, [r3, #4]
 800fa2c:	4b6b      	ldr	r3, [pc, #428]	; (800fbdc <tcp_input+0x4a0>)
 800fa2e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800fa30:	429a      	cmp	r2, r3
 800fa32:	d12c      	bne.n	800fa8e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800fa34:	69fb      	ldr	r3, [r7, #28]
 800fa36:	681a      	ldr	r2, [r3, #0]
 800fa38:	4b68      	ldr	r3, [pc, #416]	; (800fbdc <tcp_input+0x4a0>)
 800fa3a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800fa3c:	429a      	cmp	r2, r3
 800fa3e:	d126      	bne.n	800fa8e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800fa40:	69fb      	ldr	r3, [r7, #28]
 800fa42:	68db      	ldr	r3, [r3, #12]
 800fa44:	69fa      	ldr	r2, [r7, #28]
 800fa46:	429a      	cmp	r2, r3
 800fa48:	d106      	bne.n	800fa58 <tcp_input+0x31c>
 800fa4a:	4b65      	ldr	r3, [pc, #404]	; (800fbe0 <tcp_input+0x4a4>)
 800fa4c:	f240 120d 	movw	r2, #269	; 0x10d
 800fa50:	4964      	ldr	r1, [pc, #400]	; (800fbe4 <tcp_input+0x4a8>)
 800fa52:	4865      	ldr	r0, [pc, #404]	; (800fbe8 <tcp_input+0x4ac>)
 800fa54:	f006 fef4 	bl	8016840 <iprintf>
      if (prev != NULL) {
 800fa58:	69bb      	ldr	r3, [r7, #24]
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d00a      	beq.n	800fa74 <tcp_input+0x338>
        prev->next = pcb->next;
 800fa5e:	69fb      	ldr	r3, [r7, #28]
 800fa60:	68da      	ldr	r2, [r3, #12]
 800fa62:	69bb      	ldr	r3, [r7, #24]
 800fa64:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800fa66:	4b61      	ldr	r3, [pc, #388]	; (800fbec <tcp_input+0x4b0>)
 800fa68:	681a      	ldr	r2, [r3, #0]
 800fa6a:	69fb      	ldr	r3, [r7, #28]
 800fa6c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800fa6e:	4a5f      	ldr	r2, [pc, #380]	; (800fbec <tcp_input+0x4b0>)
 800fa70:	69fb      	ldr	r3, [r7, #28]
 800fa72:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800fa74:	69fb      	ldr	r3, [r7, #28]
 800fa76:	68db      	ldr	r3, [r3, #12]
 800fa78:	69fa      	ldr	r2, [r7, #28]
 800fa7a:	429a      	cmp	r2, r3
 800fa7c:	d111      	bne.n	800faa2 <tcp_input+0x366>
 800fa7e:	4b58      	ldr	r3, [pc, #352]	; (800fbe0 <tcp_input+0x4a4>)
 800fa80:	f240 1215 	movw	r2, #277	; 0x115
 800fa84:	495a      	ldr	r1, [pc, #360]	; (800fbf0 <tcp_input+0x4b4>)
 800fa86:	4858      	ldr	r0, [pc, #352]	; (800fbe8 <tcp_input+0x4ac>)
 800fa88:	f006 feda 	bl	8016840 <iprintf>
      break;
 800fa8c:	e009      	b.n	800faa2 <tcp_input+0x366>
    }
    prev = pcb;
 800fa8e:	69fb      	ldr	r3, [r7, #28]
 800fa90:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800fa92:	69fb      	ldr	r3, [r7, #28]
 800fa94:	68db      	ldr	r3, [r3, #12]
 800fa96:	61fb      	str	r3, [r7, #28]
 800fa98:	69fb      	ldr	r3, [r7, #28]
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	f47f af5e 	bne.w	800f95c <tcp_input+0x220>
 800faa0:	e000      	b.n	800faa4 <tcp_input+0x368>
      break;
 800faa2:	bf00      	nop
  }

  if (pcb == NULL) {
 800faa4:	69fb      	ldr	r3, [r7, #28]
 800faa6:	2b00      	cmp	r3, #0
 800faa8:	f040 80aa 	bne.w	800fc00 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800faac:	4b51      	ldr	r3, [pc, #324]	; (800fbf4 <tcp_input+0x4b8>)
 800faae:	681b      	ldr	r3, [r3, #0]
 800fab0:	61fb      	str	r3, [r7, #28]
 800fab2:	e03f      	b.n	800fb34 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800fab4:	69fb      	ldr	r3, [r7, #28]
 800fab6:	7d1b      	ldrb	r3, [r3, #20]
 800fab8:	2b0a      	cmp	r3, #10
 800faba:	d006      	beq.n	800faca <tcp_input+0x38e>
 800fabc:	4b48      	ldr	r3, [pc, #288]	; (800fbe0 <tcp_input+0x4a4>)
 800fabe:	f240 121f 	movw	r2, #287	; 0x11f
 800fac2:	494d      	ldr	r1, [pc, #308]	; (800fbf8 <tcp_input+0x4bc>)
 800fac4:	4848      	ldr	r0, [pc, #288]	; (800fbe8 <tcp_input+0x4ac>)
 800fac6:	f006 febb 	bl	8016840 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800faca:	69fb      	ldr	r3, [r7, #28]
 800facc:	7a1b      	ldrb	r3, [r3, #8]
 800face:	2b00      	cmp	r3, #0
 800fad0:	d009      	beq.n	800fae6 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800fad2:	69fb      	ldr	r3, [r7, #28]
 800fad4:	7a1a      	ldrb	r2, [r3, #8]
 800fad6:	4b41      	ldr	r3, [pc, #260]	; (800fbdc <tcp_input+0x4a0>)
 800fad8:	685b      	ldr	r3, [r3, #4]
 800fada:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fade:	3301      	adds	r3, #1
 800fae0:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800fae2:	429a      	cmp	r2, r3
 800fae4:	d122      	bne.n	800fb2c <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800fae6:	69fb      	ldr	r3, [r7, #28]
 800fae8:	8b1a      	ldrh	r2, [r3, #24]
 800faea:	4b3b      	ldr	r3, [pc, #236]	; (800fbd8 <tcp_input+0x49c>)
 800faec:	681b      	ldr	r3, [r3, #0]
 800faee:	881b      	ldrh	r3, [r3, #0]
 800faf0:	b29b      	uxth	r3, r3
 800faf2:	429a      	cmp	r2, r3
 800faf4:	d11b      	bne.n	800fb2e <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800faf6:	69fb      	ldr	r3, [r7, #28]
 800faf8:	8ada      	ldrh	r2, [r3, #22]
 800fafa:	4b37      	ldr	r3, [pc, #220]	; (800fbd8 <tcp_input+0x49c>)
 800fafc:	681b      	ldr	r3, [r3, #0]
 800fafe:	885b      	ldrh	r3, [r3, #2]
 800fb00:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800fb02:	429a      	cmp	r2, r3
 800fb04:	d113      	bne.n	800fb2e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800fb06:	69fb      	ldr	r3, [r7, #28]
 800fb08:	685a      	ldr	r2, [r3, #4]
 800fb0a:	4b34      	ldr	r3, [pc, #208]	; (800fbdc <tcp_input+0x4a0>)
 800fb0c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800fb0e:	429a      	cmp	r2, r3
 800fb10:	d10d      	bne.n	800fb2e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800fb12:	69fb      	ldr	r3, [r7, #28]
 800fb14:	681a      	ldr	r2, [r3, #0]
 800fb16:	4b31      	ldr	r3, [pc, #196]	; (800fbdc <tcp_input+0x4a0>)
 800fb18:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800fb1a:	429a      	cmp	r2, r3
 800fb1c:	d107      	bne.n	800fb2e <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800fb1e:	69f8      	ldr	r0, [r7, #28]
 800fb20:	f000 fb56 	bl	80101d0 <tcp_timewait_input>
        }
        pbuf_free(p);
 800fb24:	6878      	ldr	r0, [r7, #4]
 800fb26:	f7fd fbb7 	bl	800d298 <pbuf_free>
        return;
 800fb2a:	e1fd      	b.n	800ff28 <tcp_input+0x7ec>
        continue;
 800fb2c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800fb2e:	69fb      	ldr	r3, [r7, #28]
 800fb30:	68db      	ldr	r3, [r3, #12]
 800fb32:	61fb      	str	r3, [r7, #28]
 800fb34:	69fb      	ldr	r3, [r7, #28]
 800fb36:	2b00      	cmp	r3, #0
 800fb38:	d1bc      	bne.n	800fab4 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800fb3a:	2300      	movs	r3, #0
 800fb3c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800fb3e:	4b2f      	ldr	r3, [pc, #188]	; (800fbfc <tcp_input+0x4c0>)
 800fb40:	681b      	ldr	r3, [r3, #0]
 800fb42:	617b      	str	r3, [r7, #20]
 800fb44:	e02a      	b.n	800fb9c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800fb46:	697b      	ldr	r3, [r7, #20]
 800fb48:	7a1b      	ldrb	r3, [r3, #8]
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	d00c      	beq.n	800fb68 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800fb4e:	697b      	ldr	r3, [r7, #20]
 800fb50:	7a1a      	ldrb	r2, [r3, #8]
 800fb52:	4b22      	ldr	r3, [pc, #136]	; (800fbdc <tcp_input+0x4a0>)
 800fb54:	685b      	ldr	r3, [r3, #4]
 800fb56:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fb5a:	3301      	adds	r3, #1
 800fb5c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800fb5e:	429a      	cmp	r2, r3
 800fb60:	d002      	beq.n	800fb68 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800fb62:	697b      	ldr	r3, [r7, #20]
 800fb64:	61bb      	str	r3, [r7, #24]
        continue;
 800fb66:	e016      	b.n	800fb96 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800fb68:	697b      	ldr	r3, [r7, #20]
 800fb6a:	8ada      	ldrh	r2, [r3, #22]
 800fb6c:	4b1a      	ldr	r3, [pc, #104]	; (800fbd8 <tcp_input+0x49c>)
 800fb6e:	681b      	ldr	r3, [r3, #0]
 800fb70:	885b      	ldrh	r3, [r3, #2]
 800fb72:	b29b      	uxth	r3, r3
 800fb74:	429a      	cmp	r2, r3
 800fb76:	d10c      	bne.n	800fb92 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800fb78:	697b      	ldr	r3, [r7, #20]
 800fb7a:	681a      	ldr	r2, [r3, #0]
 800fb7c:	4b17      	ldr	r3, [pc, #92]	; (800fbdc <tcp_input+0x4a0>)
 800fb7e:	695b      	ldr	r3, [r3, #20]
 800fb80:	429a      	cmp	r2, r3
 800fb82:	d00f      	beq.n	800fba4 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800fb84:	697b      	ldr	r3, [r7, #20]
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	d00d      	beq.n	800fba6 <tcp_input+0x46a>
 800fb8a:	697b      	ldr	r3, [r7, #20]
 800fb8c:	681b      	ldr	r3, [r3, #0]
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	d009      	beq.n	800fba6 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800fb92:	697b      	ldr	r3, [r7, #20]
 800fb94:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800fb96:	697b      	ldr	r3, [r7, #20]
 800fb98:	68db      	ldr	r3, [r3, #12]
 800fb9a:	617b      	str	r3, [r7, #20]
 800fb9c:	697b      	ldr	r3, [r7, #20]
 800fb9e:	2b00      	cmp	r3, #0
 800fba0:	d1d1      	bne.n	800fb46 <tcp_input+0x40a>
 800fba2:	e000      	b.n	800fba6 <tcp_input+0x46a>
            break;
 800fba4:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800fba6:	697b      	ldr	r3, [r7, #20]
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	d029      	beq.n	800fc00 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800fbac:	69bb      	ldr	r3, [r7, #24]
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	d00a      	beq.n	800fbc8 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800fbb2:	697b      	ldr	r3, [r7, #20]
 800fbb4:	68da      	ldr	r2, [r3, #12]
 800fbb6:	69bb      	ldr	r3, [r7, #24]
 800fbb8:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800fbba:	4b10      	ldr	r3, [pc, #64]	; (800fbfc <tcp_input+0x4c0>)
 800fbbc:	681a      	ldr	r2, [r3, #0]
 800fbbe:	697b      	ldr	r3, [r7, #20]
 800fbc0:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800fbc2:	4a0e      	ldr	r2, [pc, #56]	; (800fbfc <tcp_input+0x4c0>)
 800fbc4:	697b      	ldr	r3, [r7, #20]
 800fbc6:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800fbc8:	6978      	ldr	r0, [r7, #20]
 800fbca:	f000 fa03 	bl	800ffd4 <tcp_listen_input>
      }
      pbuf_free(p);
 800fbce:	6878      	ldr	r0, [r7, #4]
 800fbd0:	f7fd fb62 	bl	800d298 <pbuf_free>
      return;
 800fbd4:	e1a8      	b.n	800ff28 <tcp_input+0x7ec>
 800fbd6:	bf00      	nop
 800fbd8:	20008bd0 	.word	0x20008bd0
 800fbdc:	20005638 	.word	0x20005638
 800fbe0:	08019914 	.word	0x08019914
 800fbe4:	08019a40 	.word	0x08019a40
 800fbe8:	08019960 	.word	0x08019960
 800fbec:	20008bb4 	.word	0x20008bb4
 800fbf0:	08019a6c 	.word	0x08019a6c
 800fbf4:	20008bb8 	.word	0x20008bb8
 800fbf8:	08019a98 	.word	0x08019a98
 800fbfc:	20008bb0 	.word	0x20008bb0
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800fc00:	69fb      	ldr	r3, [r7, #28]
 800fc02:	2b00      	cmp	r3, #0
 800fc04:	f000 8158 	beq.w	800feb8 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800fc08:	4b95      	ldr	r3, [pc, #596]	; (800fe60 <tcp_input+0x724>)
 800fc0a:	2200      	movs	r2, #0
 800fc0c:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	891a      	ldrh	r2, [r3, #8]
 800fc12:	4b93      	ldr	r3, [pc, #588]	; (800fe60 <tcp_input+0x724>)
 800fc14:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800fc16:	4a92      	ldr	r2, [pc, #584]	; (800fe60 <tcp_input+0x724>)
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800fc1c:	4b91      	ldr	r3, [pc, #580]	; (800fe64 <tcp_input+0x728>)
 800fc1e:	681b      	ldr	r3, [r3, #0]
 800fc20:	4a8f      	ldr	r2, [pc, #572]	; (800fe60 <tcp_input+0x724>)
 800fc22:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800fc24:	4b90      	ldr	r3, [pc, #576]	; (800fe68 <tcp_input+0x72c>)
 800fc26:	2200      	movs	r2, #0
 800fc28:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800fc2a:	4b90      	ldr	r3, [pc, #576]	; (800fe6c <tcp_input+0x730>)
 800fc2c:	2200      	movs	r2, #0
 800fc2e:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800fc30:	4b8f      	ldr	r3, [pc, #572]	; (800fe70 <tcp_input+0x734>)
 800fc32:	2200      	movs	r2, #0
 800fc34:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800fc36:	4b8f      	ldr	r3, [pc, #572]	; (800fe74 <tcp_input+0x738>)
 800fc38:	781b      	ldrb	r3, [r3, #0]
 800fc3a:	f003 0308 	and.w	r3, r3, #8
 800fc3e:	2b00      	cmp	r3, #0
 800fc40:	d006      	beq.n	800fc50 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	7b5b      	ldrb	r3, [r3, #13]
 800fc46:	f043 0301 	orr.w	r3, r3, #1
 800fc4a:	b2da      	uxtb	r2, r3
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800fc50:	69fb      	ldr	r3, [r7, #28]
 800fc52:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fc54:	2b00      	cmp	r3, #0
 800fc56:	d017      	beq.n	800fc88 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800fc58:	69f8      	ldr	r0, [r7, #28]
 800fc5a:	f7ff f835 	bl	800ecc8 <tcp_process_refused_data>
 800fc5e:	4603      	mov	r3, r0
 800fc60:	f113 0f0d 	cmn.w	r3, #13
 800fc64:	d007      	beq.n	800fc76 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800fc66:	69fb      	ldr	r3, [r7, #28]
 800fc68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	d00c      	beq.n	800fc88 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800fc6e:	4b82      	ldr	r3, [pc, #520]	; (800fe78 <tcp_input+0x73c>)
 800fc70:	881b      	ldrh	r3, [r3, #0]
 800fc72:	2b00      	cmp	r3, #0
 800fc74:	d008      	beq.n	800fc88 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800fc76:	69fb      	ldr	r3, [r7, #28]
 800fc78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	f040 80e3 	bne.w	800fe46 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800fc80:	69f8      	ldr	r0, [r7, #28]
 800fc82:	f003 fe05 	bl	8013890 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800fc86:	e0de      	b.n	800fe46 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800fc88:	4a7c      	ldr	r2, [pc, #496]	; (800fe7c <tcp_input+0x740>)
 800fc8a:	69fb      	ldr	r3, [r7, #28]
 800fc8c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800fc8e:	69f8      	ldr	r0, [r7, #28]
 800fc90:	f000 fb18 	bl	80102c4 <tcp_process>
 800fc94:	4603      	mov	r3, r0
 800fc96:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800fc98:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fc9c:	f113 0f0d 	cmn.w	r3, #13
 800fca0:	f000 80d3 	beq.w	800fe4a <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800fca4:	4b71      	ldr	r3, [pc, #452]	; (800fe6c <tcp_input+0x730>)
 800fca6:	781b      	ldrb	r3, [r3, #0]
 800fca8:	f003 0308 	and.w	r3, r3, #8
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	d015      	beq.n	800fcdc <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800fcb0:	69fb      	ldr	r3, [r7, #28]
 800fcb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	d008      	beq.n	800fccc <tcp_input+0x590>
 800fcba:	69fb      	ldr	r3, [r7, #28]
 800fcbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fcc0:	69fa      	ldr	r2, [r7, #28]
 800fcc2:	6912      	ldr	r2, [r2, #16]
 800fcc4:	f06f 010d 	mvn.w	r1, #13
 800fcc8:	4610      	mov	r0, r2
 800fcca:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800fccc:	69f9      	ldr	r1, [r7, #28]
 800fcce:	486c      	ldr	r0, [pc, #432]	; (800fe80 <tcp_input+0x744>)
 800fcd0:	f7ff fbbc 	bl	800f44c <tcp_pcb_remove>
        tcp_free(pcb);
 800fcd4:	69f8      	ldr	r0, [r7, #28]
 800fcd6:	f7fd fde3 	bl	800d8a0 <tcp_free>
 800fcda:	e0da      	b.n	800fe92 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800fcdc:	2300      	movs	r3, #0
 800fcde:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800fce0:	4b63      	ldr	r3, [pc, #396]	; (800fe70 <tcp_input+0x734>)
 800fce2:	881b      	ldrh	r3, [r3, #0]
 800fce4:	2b00      	cmp	r3, #0
 800fce6:	d01d      	beq.n	800fd24 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800fce8:	4b61      	ldr	r3, [pc, #388]	; (800fe70 <tcp_input+0x734>)
 800fcea:	881b      	ldrh	r3, [r3, #0]
 800fcec:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800fcee:	69fb      	ldr	r3, [r7, #28]
 800fcf0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	d00a      	beq.n	800fd0e <tcp_input+0x5d2>
 800fcf8:	69fb      	ldr	r3, [r7, #28]
 800fcfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fcfe:	69fa      	ldr	r2, [r7, #28]
 800fd00:	6910      	ldr	r0, [r2, #16]
 800fd02:	89fa      	ldrh	r2, [r7, #14]
 800fd04:	69f9      	ldr	r1, [r7, #28]
 800fd06:	4798      	blx	r3
 800fd08:	4603      	mov	r3, r0
 800fd0a:	74fb      	strb	r3, [r7, #19]
 800fd0c:	e001      	b.n	800fd12 <tcp_input+0x5d6>
 800fd0e:	2300      	movs	r3, #0
 800fd10:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800fd12:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fd16:	f113 0f0d 	cmn.w	r3, #13
 800fd1a:	f000 8098 	beq.w	800fe4e <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800fd1e:	4b54      	ldr	r3, [pc, #336]	; (800fe70 <tcp_input+0x734>)
 800fd20:	2200      	movs	r2, #0
 800fd22:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800fd24:	69f8      	ldr	r0, [r7, #28]
 800fd26:	f000 f915 	bl	800ff54 <tcp_input_delayed_close>
 800fd2a:	4603      	mov	r3, r0
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	f040 8090 	bne.w	800fe52 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800fd32:	4b4d      	ldr	r3, [pc, #308]	; (800fe68 <tcp_input+0x72c>)
 800fd34:	681b      	ldr	r3, [r3, #0]
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	d041      	beq.n	800fdbe <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800fd3a:	69fb      	ldr	r3, [r7, #28]
 800fd3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	d006      	beq.n	800fd50 <tcp_input+0x614>
 800fd42:	4b50      	ldr	r3, [pc, #320]	; (800fe84 <tcp_input+0x748>)
 800fd44:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800fd48:	494f      	ldr	r1, [pc, #316]	; (800fe88 <tcp_input+0x74c>)
 800fd4a:	4850      	ldr	r0, [pc, #320]	; (800fe8c <tcp_input+0x750>)
 800fd4c:	f006 fd78 	bl	8016840 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800fd50:	69fb      	ldr	r3, [r7, #28]
 800fd52:	8b5b      	ldrh	r3, [r3, #26]
 800fd54:	f003 0310 	and.w	r3, r3, #16
 800fd58:	2b00      	cmp	r3, #0
 800fd5a:	d008      	beq.n	800fd6e <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800fd5c:	4b42      	ldr	r3, [pc, #264]	; (800fe68 <tcp_input+0x72c>)
 800fd5e:	681b      	ldr	r3, [r3, #0]
 800fd60:	4618      	mov	r0, r3
 800fd62:	f7fd fa99 	bl	800d298 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800fd66:	69f8      	ldr	r0, [r7, #28]
 800fd68:	f7fe f882 	bl	800de70 <tcp_abort>
            goto aborted;
 800fd6c:	e091      	b.n	800fe92 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800fd6e:	69fb      	ldr	r3, [r7, #28]
 800fd70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	d00c      	beq.n	800fd92 <tcp_input+0x656>
 800fd78:	69fb      	ldr	r3, [r7, #28]
 800fd7a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800fd7e:	69fb      	ldr	r3, [r7, #28]
 800fd80:	6918      	ldr	r0, [r3, #16]
 800fd82:	4b39      	ldr	r3, [pc, #228]	; (800fe68 <tcp_input+0x72c>)
 800fd84:	681a      	ldr	r2, [r3, #0]
 800fd86:	2300      	movs	r3, #0
 800fd88:	69f9      	ldr	r1, [r7, #28]
 800fd8a:	47a0      	blx	r4
 800fd8c:	4603      	mov	r3, r0
 800fd8e:	74fb      	strb	r3, [r7, #19]
 800fd90:	e008      	b.n	800fda4 <tcp_input+0x668>
 800fd92:	4b35      	ldr	r3, [pc, #212]	; (800fe68 <tcp_input+0x72c>)
 800fd94:	681a      	ldr	r2, [r3, #0]
 800fd96:	2300      	movs	r3, #0
 800fd98:	69f9      	ldr	r1, [r7, #28]
 800fd9a:	2000      	movs	r0, #0
 800fd9c:	f7ff f888 	bl	800eeb0 <tcp_recv_null>
 800fda0:	4603      	mov	r3, r0
 800fda2:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800fda4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fda8:	f113 0f0d 	cmn.w	r3, #13
 800fdac:	d053      	beq.n	800fe56 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800fdae:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	d003      	beq.n	800fdbe <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800fdb6:	4b2c      	ldr	r3, [pc, #176]	; (800fe68 <tcp_input+0x72c>)
 800fdb8:	681a      	ldr	r2, [r3, #0]
 800fdba:	69fb      	ldr	r3, [r7, #28]
 800fdbc:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800fdbe:	4b2b      	ldr	r3, [pc, #172]	; (800fe6c <tcp_input+0x730>)
 800fdc0:	781b      	ldrb	r3, [r3, #0]
 800fdc2:	f003 0320 	and.w	r3, r3, #32
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	d030      	beq.n	800fe2c <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800fdca:	69fb      	ldr	r3, [r7, #28]
 800fdcc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	d009      	beq.n	800fde6 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800fdd2:	69fb      	ldr	r3, [r7, #28]
 800fdd4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fdd6:	7b5a      	ldrb	r2, [r3, #13]
 800fdd8:	69fb      	ldr	r3, [r7, #28]
 800fdda:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fddc:	f042 0220 	orr.w	r2, r2, #32
 800fde0:	b2d2      	uxtb	r2, r2
 800fde2:	735a      	strb	r2, [r3, #13]
 800fde4:	e022      	b.n	800fe2c <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800fde6:	69fb      	ldr	r3, [r7, #28]
 800fde8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fdea:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800fdee:	d005      	beq.n	800fdfc <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800fdf0:	69fb      	ldr	r3, [r7, #28]
 800fdf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fdf4:	3301      	adds	r3, #1
 800fdf6:	b29a      	uxth	r2, r3
 800fdf8:	69fb      	ldr	r3, [r7, #28]
 800fdfa:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800fdfc:	69fb      	ldr	r3, [r7, #28]
 800fdfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	d00b      	beq.n	800fe1e <tcp_input+0x6e2>
 800fe06:	69fb      	ldr	r3, [r7, #28]
 800fe08:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800fe0c:	69fb      	ldr	r3, [r7, #28]
 800fe0e:	6918      	ldr	r0, [r3, #16]
 800fe10:	2300      	movs	r3, #0
 800fe12:	2200      	movs	r2, #0
 800fe14:	69f9      	ldr	r1, [r7, #28]
 800fe16:	47a0      	blx	r4
 800fe18:	4603      	mov	r3, r0
 800fe1a:	74fb      	strb	r3, [r7, #19]
 800fe1c:	e001      	b.n	800fe22 <tcp_input+0x6e6>
 800fe1e:	2300      	movs	r3, #0
 800fe20:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800fe22:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fe26:	f113 0f0d 	cmn.w	r3, #13
 800fe2a:	d016      	beq.n	800fe5a <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800fe2c:	4b13      	ldr	r3, [pc, #76]	; (800fe7c <tcp_input+0x740>)
 800fe2e:	2200      	movs	r2, #0
 800fe30:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800fe32:	69f8      	ldr	r0, [r7, #28]
 800fe34:	f000 f88e 	bl	800ff54 <tcp_input_delayed_close>
 800fe38:	4603      	mov	r3, r0
 800fe3a:	2b00      	cmp	r3, #0
 800fe3c:	d128      	bne.n	800fe90 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800fe3e:	69f8      	ldr	r0, [r7, #28]
 800fe40:	f002 ff20 	bl	8012c84 <tcp_output>
 800fe44:	e025      	b.n	800fe92 <tcp_input+0x756>
        goto aborted;
 800fe46:	bf00      	nop
 800fe48:	e023      	b.n	800fe92 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800fe4a:	bf00      	nop
 800fe4c:	e021      	b.n	800fe92 <tcp_input+0x756>
              goto aborted;
 800fe4e:	bf00      	nop
 800fe50:	e01f      	b.n	800fe92 <tcp_input+0x756>
          goto aborted;
 800fe52:	bf00      	nop
 800fe54:	e01d      	b.n	800fe92 <tcp_input+0x756>
            goto aborted;
 800fe56:	bf00      	nop
 800fe58:	e01b      	b.n	800fe92 <tcp_input+0x756>
              goto aborted;
 800fe5a:	bf00      	nop
 800fe5c:	e019      	b.n	800fe92 <tcp_input+0x756>
 800fe5e:	bf00      	nop
 800fe60:	20008bc0 	.word	0x20008bc0
 800fe64:	20008bd0 	.word	0x20008bd0
 800fe68:	20008bf0 	.word	0x20008bf0
 800fe6c:	20008bed 	.word	0x20008bed
 800fe70:	20008be8 	.word	0x20008be8
 800fe74:	20008bec 	.word	0x20008bec
 800fe78:	20008bea 	.word	0x20008bea
 800fe7c:	20008bf4 	.word	0x20008bf4
 800fe80:	20008bb4 	.word	0x20008bb4
 800fe84:	08019914 	.word	0x08019914
 800fe88:	08019ac8 	.word	0x08019ac8
 800fe8c:	08019960 	.word	0x08019960
          goto aborted;
 800fe90:	bf00      	nop
    tcp_input_pcb = NULL;
 800fe92:	4b27      	ldr	r3, [pc, #156]	; (800ff30 <tcp_input+0x7f4>)
 800fe94:	2200      	movs	r2, #0
 800fe96:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800fe98:	4b26      	ldr	r3, [pc, #152]	; (800ff34 <tcp_input+0x7f8>)
 800fe9a:	2200      	movs	r2, #0
 800fe9c:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800fe9e:	4b26      	ldr	r3, [pc, #152]	; (800ff38 <tcp_input+0x7fc>)
 800fea0:	685b      	ldr	r3, [r3, #4]
 800fea2:	2b00      	cmp	r3, #0
 800fea4:	d03f      	beq.n	800ff26 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800fea6:	4b24      	ldr	r3, [pc, #144]	; (800ff38 <tcp_input+0x7fc>)
 800fea8:	685b      	ldr	r3, [r3, #4]
 800feaa:	4618      	mov	r0, r3
 800feac:	f7fd f9f4 	bl	800d298 <pbuf_free>
      inseg.p = NULL;
 800feb0:	4b21      	ldr	r3, [pc, #132]	; (800ff38 <tcp_input+0x7fc>)
 800feb2:	2200      	movs	r2, #0
 800feb4:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800feb6:	e036      	b.n	800ff26 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800feb8:	4b20      	ldr	r3, [pc, #128]	; (800ff3c <tcp_input+0x800>)
 800feba:	681b      	ldr	r3, [r3, #0]
 800febc:	899b      	ldrh	r3, [r3, #12]
 800febe:	b29b      	uxth	r3, r3
 800fec0:	4618      	mov	r0, r3
 800fec2:	f7fb fe63 	bl	800bb8c <lwip_htons>
 800fec6:	4603      	mov	r3, r0
 800fec8:	b2db      	uxtb	r3, r3
 800feca:	f003 0304 	and.w	r3, r3, #4
 800fece:	2b00      	cmp	r3, #0
 800fed0:	d118      	bne.n	800ff04 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fed2:	4b1b      	ldr	r3, [pc, #108]	; (800ff40 <tcp_input+0x804>)
 800fed4:	6819      	ldr	r1, [r3, #0]
 800fed6:	4b1b      	ldr	r3, [pc, #108]	; (800ff44 <tcp_input+0x808>)
 800fed8:	881b      	ldrh	r3, [r3, #0]
 800feda:	461a      	mov	r2, r3
 800fedc:	4b1a      	ldr	r3, [pc, #104]	; (800ff48 <tcp_input+0x80c>)
 800fede:	681b      	ldr	r3, [r3, #0]
 800fee0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fee2:	4b16      	ldr	r3, [pc, #88]	; (800ff3c <tcp_input+0x800>)
 800fee4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fee6:	885b      	ldrh	r3, [r3, #2]
 800fee8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800feea:	4a14      	ldr	r2, [pc, #80]	; (800ff3c <tcp_input+0x800>)
 800feec:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800feee:	8812      	ldrh	r2, [r2, #0]
 800fef0:	b292      	uxth	r2, r2
 800fef2:	9202      	str	r2, [sp, #8]
 800fef4:	9301      	str	r3, [sp, #4]
 800fef6:	4b15      	ldr	r3, [pc, #84]	; (800ff4c <tcp_input+0x810>)
 800fef8:	9300      	str	r3, [sp, #0]
 800fefa:	4b15      	ldr	r3, [pc, #84]	; (800ff50 <tcp_input+0x814>)
 800fefc:	4602      	mov	r2, r0
 800fefe:	2000      	movs	r0, #0
 800ff00:	f003 fc74 	bl	80137ec <tcp_rst>
    pbuf_free(p);
 800ff04:	6878      	ldr	r0, [r7, #4]
 800ff06:	f7fd f9c7 	bl	800d298 <pbuf_free>
  return;
 800ff0a:	e00c      	b.n	800ff26 <tcp_input+0x7ea>
    goto dropped;
 800ff0c:	bf00      	nop
 800ff0e:	e006      	b.n	800ff1e <tcp_input+0x7e2>
    goto dropped;
 800ff10:	bf00      	nop
 800ff12:	e004      	b.n	800ff1e <tcp_input+0x7e2>
    goto dropped;
 800ff14:	bf00      	nop
 800ff16:	e002      	b.n	800ff1e <tcp_input+0x7e2>
      goto dropped;
 800ff18:	bf00      	nop
 800ff1a:	e000      	b.n	800ff1e <tcp_input+0x7e2>
      goto dropped;
 800ff1c:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800ff1e:	6878      	ldr	r0, [r7, #4]
 800ff20:	f7fd f9ba 	bl	800d298 <pbuf_free>
 800ff24:	e000      	b.n	800ff28 <tcp_input+0x7ec>
  return;
 800ff26:	bf00      	nop
}
 800ff28:	3724      	adds	r7, #36	; 0x24
 800ff2a:	46bd      	mov	sp, r7
 800ff2c:	bd90      	pop	{r4, r7, pc}
 800ff2e:	bf00      	nop
 800ff30:	20008bf4 	.word	0x20008bf4
 800ff34:	20008bf0 	.word	0x20008bf0
 800ff38:	20008bc0 	.word	0x20008bc0
 800ff3c:	20008bd0 	.word	0x20008bd0
 800ff40:	20008be4 	.word	0x20008be4
 800ff44:	20008bea 	.word	0x20008bea
 800ff48:	20008be0 	.word	0x20008be0
 800ff4c:	20005648 	.word	0x20005648
 800ff50:	2000564c 	.word	0x2000564c

0800ff54 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800ff54:	b580      	push	{r7, lr}
 800ff56:	b082      	sub	sp, #8
 800ff58:	af00      	add	r7, sp, #0
 800ff5a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	2b00      	cmp	r3, #0
 800ff60:	d106      	bne.n	800ff70 <tcp_input_delayed_close+0x1c>
 800ff62:	4b17      	ldr	r3, [pc, #92]	; (800ffc0 <tcp_input_delayed_close+0x6c>)
 800ff64:	f240 225a 	movw	r2, #602	; 0x25a
 800ff68:	4916      	ldr	r1, [pc, #88]	; (800ffc4 <tcp_input_delayed_close+0x70>)
 800ff6a:	4817      	ldr	r0, [pc, #92]	; (800ffc8 <tcp_input_delayed_close+0x74>)
 800ff6c:	f006 fc68 	bl	8016840 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800ff70:	4b16      	ldr	r3, [pc, #88]	; (800ffcc <tcp_input_delayed_close+0x78>)
 800ff72:	781b      	ldrb	r3, [r3, #0]
 800ff74:	f003 0310 	and.w	r3, r3, #16
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	d01c      	beq.n	800ffb6 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	8b5b      	ldrh	r3, [r3, #26]
 800ff80:	f003 0310 	and.w	r3, r3, #16
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	d10d      	bne.n	800ffa4 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	d008      	beq.n	800ffa4 <tcp_input_delayed_close+0x50>
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ff98:	687a      	ldr	r2, [r7, #4]
 800ff9a:	6912      	ldr	r2, [r2, #16]
 800ff9c:	f06f 010e 	mvn.w	r1, #14
 800ffa0:	4610      	mov	r0, r2
 800ffa2:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800ffa4:	6879      	ldr	r1, [r7, #4]
 800ffa6:	480a      	ldr	r0, [pc, #40]	; (800ffd0 <tcp_input_delayed_close+0x7c>)
 800ffa8:	f7ff fa50 	bl	800f44c <tcp_pcb_remove>
    tcp_free(pcb);
 800ffac:	6878      	ldr	r0, [r7, #4]
 800ffae:	f7fd fc77 	bl	800d8a0 <tcp_free>
    return 1;
 800ffb2:	2301      	movs	r3, #1
 800ffb4:	e000      	b.n	800ffb8 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800ffb6:	2300      	movs	r3, #0
}
 800ffb8:	4618      	mov	r0, r3
 800ffba:	3708      	adds	r7, #8
 800ffbc:	46bd      	mov	sp, r7
 800ffbe:	bd80      	pop	{r7, pc}
 800ffc0:	08019914 	.word	0x08019914
 800ffc4:	08019ae4 	.word	0x08019ae4
 800ffc8:	08019960 	.word	0x08019960
 800ffcc:	20008bed 	.word	0x20008bed
 800ffd0:	20008bb4 	.word	0x20008bb4

0800ffd4 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800ffd4:	b590      	push	{r4, r7, lr}
 800ffd6:	b08b      	sub	sp, #44	; 0x2c
 800ffd8:	af04      	add	r7, sp, #16
 800ffda:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800ffdc:	4b6f      	ldr	r3, [pc, #444]	; (801019c <tcp_listen_input+0x1c8>)
 800ffde:	781b      	ldrb	r3, [r3, #0]
 800ffe0:	f003 0304 	and.w	r3, r3, #4
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	f040 80d2 	bne.w	801018e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	d106      	bne.n	800fffe <tcp_listen_input+0x2a>
 800fff0:	4b6b      	ldr	r3, [pc, #428]	; (80101a0 <tcp_listen_input+0x1cc>)
 800fff2:	f240 2281 	movw	r2, #641	; 0x281
 800fff6:	496b      	ldr	r1, [pc, #428]	; (80101a4 <tcp_listen_input+0x1d0>)
 800fff8:	486b      	ldr	r0, [pc, #428]	; (80101a8 <tcp_listen_input+0x1d4>)
 800fffa:	f006 fc21 	bl	8016840 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800fffe:	4b67      	ldr	r3, [pc, #412]	; (801019c <tcp_listen_input+0x1c8>)
 8010000:	781b      	ldrb	r3, [r3, #0]
 8010002:	f003 0310 	and.w	r3, r3, #16
 8010006:	2b00      	cmp	r3, #0
 8010008:	d019      	beq.n	801003e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801000a:	4b68      	ldr	r3, [pc, #416]	; (80101ac <tcp_listen_input+0x1d8>)
 801000c:	6819      	ldr	r1, [r3, #0]
 801000e:	4b68      	ldr	r3, [pc, #416]	; (80101b0 <tcp_listen_input+0x1dc>)
 8010010:	881b      	ldrh	r3, [r3, #0]
 8010012:	461a      	mov	r2, r3
 8010014:	4b67      	ldr	r3, [pc, #412]	; (80101b4 <tcp_listen_input+0x1e0>)
 8010016:	681b      	ldr	r3, [r3, #0]
 8010018:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801001a:	4b67      	ldr	r3, [pc, #412]	; (80101b8 <tcp_listen_input+0x1e4>)
 801001c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801001e:	885b      	ldrh	r3, [r3, #2]
 8010020:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010022:	4a65      	ldr	r2, [pc, #404]	; (80101b8 <tcp_listen_input+0x1e4>)
 8010024:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010026:	8812      	ldrh	r2, [r2, #0]
 8010028:	b292      	uxth	r2, r2
 801002a:	9202      	str	r2, [sp, #8]
 801002c:	9301      	str	r3, [sp, #4]
 801002e:	4b63      	ldr	r3, [pc, #396]	; (80101bc <tcp_listen_input+0x1e8>)
 8010030:	9300      	str	r3, [sp, #0]
 8010032:	4b63      	ldr	r3, [pc, #396]	; (80101c0 <tcp_listen_input+0x1ec>)
 8010034:	4602      	mov	r2, r0
 8010036:	6878      	ldr	r0, [r7, #4]
 8010038:	f003 fbd8 	bl	80137ec <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 801003c:	e0a9      	b.n	8010192 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 801003e:	4b57      	ldr	r3, [pc, #348]	; (801019c <tcp_listen_input+0x1c8>)
 8010040:	781b      	ldrb	r3, [r3, #0]
 8010042:	f003 0302 	and.w	r3, r3, #2
 8010046:	2b00      	cmp	r3, #0
 8010048:	f000 80a3 	beq.w	8010192 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	7d5b      	ldrb	r3, [r3, #21]
 8010050:	4618      	mov	r0, r3
 8010052:	f7ff f851 	bl	800f0f8 <tcp_alloc>
 8010056:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8010058:	697b      	ldr	r3, [r7, #20]
 801005a:	2b00      	cmp	r3, #0
 801005c:	d111      	bne.n	8010082 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	699b      	ldr	r3, [r3, #24]
 8010062:	2b00      	cmp	r3, #0
 8010064:	d00a      	beq.n	801007c <tcp_listen_input+0xa8>
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	699b      	ldr	r3, [r3, #24]
 801006a:	687a      	ldr	r2, [r7, #4]
 801006c:	6910      	ldr	r0, [r2, #16]
 801006e:	f04f 32ff 	mov.w	r2, #4294967295
 8010072:	2100      	movs	r1, #0
 8010074:	4798      	blx	r3
 8010076:	4603      	mov	r3, r0
 8010078:	73bb      	strb	r3, [r7, #14]
      return;
 801007a:	e08b      	b.n	8010194 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801007c:	23f0      	movs	r3, #240	; 0xf0
 801007e:	73bb      	strb	r3, [r7, #14]
      return;
 8010080:	e088      	b.n	8010194 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8010082:	4b50      	ldr	r3, [pc, #320]	; (80101c4 <tcp_listen_input+0x1f0>)
 8010084:	695a      	ldr	r2, [r3, #20]
 8010086:	697b      	ldr	r3, [r7, #20]
 8010088:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801008a:	4b4e      	ldr	r3, [pc, #312]	; (80101c4 <tcp_listen_input+0x1f0>)
 801008c:	691a      	ldr	r2, [r3, #16]
 801008e:	697b      	ldr	r3, [r7, #20]
 8010090:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	8ada      	ldrh	r2, [r3, #22]
 8010096:	697b      	ldr	r3, [r7, #20]
 8010098:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 801009a:	4b47      	ldr	r3, [pc, #284]	; (80101b8 <tcp_listen_input+0x1e4>)
 801009c:	681b      	ldr	r3, [r3, #0]
 801009e:	881b      	ldrh	r3, [r3, #0]
 80100a0:	b29a      	uxth	r2, r3
 80100a2:	697b      	ldr	r3, [r7, #20]
 80100a4:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80100a6:	697b      	ldr	r3, [r7, #20]
 80100a8:	2203      	movs	r2, #3
 80100aa:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80100ac:	4b41      	ldr	r3, [pc, #260]	; (80101b4 <tcp_listen_input+0x1e0>)
 80100ae:	681b      	ldr	r3, [r3, #0]
 80100b0:	1c5a      	adds	r2, r3, #1
 80100b2:	697b      	ldr	r3, [r7, #20]
 80100b4:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80100b6:	697b      	ldr	r3, [r7, #20]
 80100b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80100ba:	697b      	ldr	r3, [r7, #20]
 80100bc:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 80100be:	6978      	ldr	r0, [r7, #20]
 80100c0:	f7ff fa58 	bl	800f574 <tcp_next_iss>
 80100c4:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80100c6:	697b      	ldr	r3, [r7, #20]
 80100c8:	693a      	ldr	r2, [r7, #16]
 80100ca:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 80100cc:	697b      	ldr	r3, [r7, #20]
 80100ce:	693a      	ldr	r2, [r7, #16]
 80100d0:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 80100d2:	697b      	ldr	r3, [r7, #20]
 80100d4:	693a      	ldr	r2, [r7, #16]
 80100d6:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 80100d8:	697b      	ldr	r3, [r7, #20]
 80100da:	693a      	ldr	r2, [r7, #16]
 80100dc:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80100de:	4b35      	ldr	r3, [pc, #212]	; (80101b4 <tcp_listen_input+0x1e0>)
 80100e0:	681b      	ldr	r3, [r3, #0]
 80100e2:	1e5a      	subs	r2, r3, #1
 80100e4:	697b      	ldr	r3, [r7, #20]
 80100e6:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	691a      	ldr	r2, [r3, #16]
 80100ec:	697b      	ldr	r3, [r7, #20]
 80100ee:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80100f0:	697b      	ldr	r3, [r7, #20]
 80100f2:	687a      	ldr	r2, [r7, #4]
 80100f4:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	7a5b      	ldrb	r3, [r3, #9]
 80100fa:	f003 030c 	and.w	r3, r3, #12
 80100fe:	b2da      	uxtb	r2, r3
 8010100:	697b      	ldr	r3, [r7, #20]
 8010102:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	7a1a      	ldrb	r2, [r3, #8]
 8010108:	697b      	ldr	r3, [r7, #20]
 801010a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 801010c:	4b2e      	ldr	r3, [pc, #184]	; (80101c8 <tcp_listen_input+0x1f4>)
 801010e:	681a      	ldr	r2, [r3, #0]
 8010110:	697b      	ldr	r3, [r7, #20]
 8010112:	60da      	str	r2, [r3, #12]
 8010114:	4a2c      	ldr	r2, [pc, #176]	; (80101c8 <tcp_listen_input+0x1f4>)
 8010116:	697b      	ldr	r3, [r7, #20]
 8010118:	6013      	str	r3, [r2, #0]
 801011a:	f003 fd29 	bl	8013b70 <tcp_timer_needed>
 801011e:	4b2b      	ldr	r3, [pc, #172]	; (80101cc <tcp_listen_input+0x1f8>)
 8010120:	2201      	movs	r2, #1
 8010122:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8010124:	6978      	ldr	r0, [r7, #20]
 8010126:	f001 fd8f 	bl	8011c48 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 801012a:	4b23      	ldr	r3, [pc, #140]	; (80101b8 <tcp_listen_input+0x1e4>)
 801012c:	681b      	ldr	r3, [r3, #0]
 801012e:	89db      	ldrh	r3, [r3, #14]
 8010130:	b29a      	uxth	r2, r3
 8010132:	697b      	ldr	r3, [r7, #20]
 8010134:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8010138:	697b      	ldr	r3, [r7, #20]
 801013a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801013e:	697b      	ldr	r3, [r7, #20]
 8010140:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8010144:	697b      	ldr	r3, [r7, #20]
 8010146:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8010148:	697b      	ldr	r3, [r7, #20]
 801014a:	3304      	adds	r3, #4
 801014c:	4618      	mov	r0, r3
 801014e:	f005 f927 	bl	80153a0 <ip4_route>
 8010152:	4601      	mov	r1, r0
 8010154:	697b      	ldr	r3, [r7, #20]
 8010156:	3304      	adds	r3, #4
 8010158:	461a      	mov	r2, r3
 801015a:	4620      	mov	r0, r4
 801015c:	f7ff fa30 	bl	800f5c0 <tcp_eff_send_mss_netif>
 8010160:	4603      	mov	r3, r0
 8010162:	461a      	mov	r2, r3
 8010164:	697b      	ldr	r3, [r7, #20]
 8010166:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8010168:	2112      	movs	r1, #18
 801016a:	6978      	ldr	r0, [r7, #20]
 801016c:	f002 fc9c 	bl	8012aa8 <tcp_enqueue_flags>
 8010170:	4603      	mov	r3, r0
 8010172:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8010174:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010178:	2b00      	cmp	r3, #0
 801017a:	d004      	beq.n	8010186 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 801017c:	2100      	movs	r1, #0
 801017e:	6978      	ldr	r0, [r7, #20]
 8010180:	f7fd fdb8 	bl	800dcf4 <tcp_abandon>
      return;
 8010184:	e006      	b.n	8010194 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8010186:	6978      	ldr	r0, [r7, #20]
 8010188:	f002 fd7c 	bl	8012c84 <tcp_output>
  return;
 801018c:	e001      	b.n	8010192 <tcp_listen_input+0x1be>
    return;
 801018e:	bf00      	nop
 8010190:	e000      	b.n	8010194 <tcp_listen_input+0x1c0>
  return;
 8010192:	bf00      	nop
}
 8010194:	371c      	adds	r7, #28
 8010196:	46bd      	mov	sp, r7
 8010198:	bd90      	pop	{r4, r7, pc}
 801019a:	bf00      	nop
 801019c:	20008bec 	.word	0x20008bec
 80101a0:	08019914 	.word	0x08019914
 80101a4:	08019b0c 	.word	0x08019b0c
 80101a8:	08019960 	.word	0x08019960
 80101ac:	20008be4 	.word	0x20008be4
 80101b0:	20008bea 	.word	0x20008bea
 80101b4:	20008be0 	.word	0x20008be0
 80101b8:	20008bd0 	.word	0x20008bd0
 80101bc:	20005648 	.word	0x20005648
 80101c0:	2000564c 	.word	0x2000564c
 80101c4:	20005638 	.word	0x20005638
 80101c8:	20008bb4 	.word	0x20008bb4
 80101cc:	20008bbc 	.word	0x20008bbc

080101d0 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80101d0:	b580      	push	{r7, lr}
 80101d2:	b086      	sub	sp, #24
 80101d4:	af04      	add	r7, sp, #16
 80101d6:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80101d8:	4b2f      	ldr	r3, [pc, #188]	; (8010298 <tcp_timewait_input+0xc8>)
 80101da:	781b      	ldrb	r3, [r3, #0]
 80101dc:	f003 0304 	and.w	r3, r3, #4
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	d153      	bne.n	801028c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	d106      	bne.n	80101f8 <tcp_timewait_input+0x28>
 80101ea:	4b2c      	ldr	r3, [pc, #176]	; (801029c <tcp_timewait_input+0xcc>)
 80101ec:	f240 22ee 	movw	r2, #750	; 0x2ee
 80101f0:	492b      	ldr	r1, [pc, #172]	; (80102a0 <tcp_timewait_input+0xd0>)
 80101f2:	482c      	ldr	r0, [pc, #176]	; (80102a4 <tcp_timewait_input+0xd4>)
 80101f4:	f006 fb24 	bl	8016840 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80101f8:	4b27      	ldr	r3, [pc, #156]	; (8010298 <tcp_timewait_input+0xc8>)
 80101fa:	781b      	ldrb	r3, [r3, #0]
 80101fc:	f003 0302 	and.w	r3, r3, #2
 8010200:	2b00      	cmp	r3, #0
 8010202:	d02a      	beq.n	801025a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8010204:	4b28      	ldr	r3, [pc, #160]	; (80102a8 <tcp_timewait_input+0xd8>)
 8010206:	681a      	ldr	r2, [r3, #0]
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801020c:	1ad3      	subs	r3, r2, r3
 801020e:	2b00      	cmp	r3, #0
 8010210:	db2d      	blt.n	801026e <tcp_timewait_input+0x9e>
 8010212:	4b25      	ldr	r3, [pc, #148]	; (80102a8 <tcp_timewait_input+0xd8>)
 8010214:	681a      	ldr	r2, [r3, #0]
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801021a:	6879      	ldr	r1, [r7, #4]
 801021c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801021e:	440b      	add	r3, r1
 8010220:	1ad3      	subs	r3, r2, r3
 8010222:	2b00      	cmp	r3, #0
 8010224:	dc23      	bgt.n	801026e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010226:	4b21      	ldr	r3, [pc, #132]	; (80102ac <tcp_timewait_input+0xdc>)
 8010228:	6819      	ldr	r1, [r3, #0]
 801022a:	4b21      	ldr	r3, [pc, #132]	; (80102b0 <tcp_timewait_input+0xe0>)
 801022c:	881b      	ldrh	r3, [r3, #0]
 801022e:	461a      	mov	r2, r3
 8010230:	4b1d      	ldr	r3, [pc, #116]	; (80102a8 <tcp_timewait_input+0xd8>)
 8010232:	681b      	ldr	r3, [r3, #0]
 8010234:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010236:	4b1f      	ldr	r3, [pc, #124]	; (80102b4 <tcp_timewait_input+0xe4>)
 8010238:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801023a:	885b      	ldrh	r3, [r3, #2]
 801023c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801023e:	4a1d      	ldr	r2, [pc, #116]	; (80102b4 <tcp_timewait_input+0xe4>)
 8010240:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010242:	8812      	ldrh	r2, [r2, #0]
 8010244:	b292      	uxth	r2, r2
 8010246:	9202      	str	r2, [sp, #8]
 8010248:	9301      	str	r3, [sp, #4]
 801024a:	4b1b      	ldr	r3, [pc, #108]	; (80102b8 <tcp_timewait_input+0xe8>)
 801024c:	9300      	str	r3, [sp, #0]
 801024e:	4b1b      	ldr	r3, [pc, #108]	; (80102bc <tcp_timewait_input+0xec>)
 8010250:	4602      	mov	r2, r0
 8010252:	6878      	ldr	r0, [r7, #4]
 8010254:	f003 faca 	bl	80137ec <tcp_rst>
      return;
 8010258:	e01b      	b.n	8010292 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 801025a:	4b0f      	ldr	r3, [pc, #60]	; (8010298 <tcp_timewait_input+0xc8>)
 801025c:	781b      	ldrb	r3, [r3, #0]
 801025e:	f003 0301 	and.w	r3, r3, #1
 8010262:	2b00      	cmp	r3, #0
 8010264:	d003      	beq.n	801026e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8010266:	4b16      	ldr	r3, [pc, #88]	; (80102c0 <tcp_timewait_input+0xf0>)
 8010268:	681a      	ldr	r2, [r3, #0]
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 801026e:	4b10      	ldr	r3, [pc, #64]	; (80102b0 <tcp_timewait_input+0xe0>)
 8010270:	881b      	ldrh	r3, [r3, #0]
 8010272:	2b00      	cmp	r3, #0
 8010274:	d00c      	beq.n	8010290 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	8b5b      	ldrh	r3, [r3, #26]
 801027a:	f043 0302 	orr.w	r3, r3, #2
 801027e:	b29a      	uxth	r2, r3
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8010284:	6878      	ldr	r0, [r7, #4]
 8010286:	f002 fcfd 	bl	8012c84 <tcp_output>
  }
  return;
 801028a:	e001      	b.n	8010290 <tcp_timewait_input+0xc0>
    return;
 801028c:	bf00      	nop
 801028e:	e000      	b.n	8010292 <tcp_timewait_input+0xc2>
  return;
 8010290:	bf00      	nop
}
 8010292:	3708      	adds	r7, #8
 8010294:	46bd      	mov	sp, r7
 8010296:	bd80      	pop	{r7, pc}
 8010298:	20008bec 	.word	0x20008bec
 801029c:	08019914 	.word	0x08019914
 80102a0:	08019b2c 	.word	0x08019b2c
 80102a4:	08019960 	.word	0x08019960
 80102a8:	20008be0 	.word	0x20008be0
 80102ac:	20008be4 	.word	0x20008be4
 80102b0:	20008bea 	.word	0x20008bea
 80102b4:	20008bd0 	.word	0x20008bd0
 80102b8:	20005648 	.word	0x20005648
 80102bc:	2000564c 	.word	0x2000564c
 80102c0:	20008ba8 	.word	0x20008ba8

080102c4 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80102c4:	b590      	push	{r4, r7, lr}
 80102c6:	b08d      	sub	sp, #52	; 0x34
 80102c8:	af04      	add	r7, sp, #16
 80102ca:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80102cc:	2300      	movs	r3, #0
 80102ce:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80102d0:	2300      	movs	r3, #0
 80102d2:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	2b00      	cmp	r3, #0
 80102d8:	d106      	bne.n	80102e8 <tcp_process+0x24>
 80102da:	4b9d      	ldr	r3, [pc, #628]	; (8010550 <tcp_process+0x28c>)
 80102dc:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80102e0:	499c      	ldr	r1, [pc, #624]	; (8010554 <tcp_process+0x290>)
 80102e2:	489d      	ldr	r0, [pc, #628]	; (8010558 <tcp_process+0x294>)
 80102e4:	f006 faac 	bl	8016840 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80102e8:	4b9c      	ldr	r3, [pc, #624]	; (801055c <tcp_process+0x298>)
 80102ea:	781b      	ldrb	r3, [r3, #0]
 80102ec:	f003 0304 	and.w	r3, r3, #4
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d04e      	beq.n	8010392 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	7d1b      	ldrb	r3, [r3, #20]
 80102f8:	2b02      	cmp	r3, #2
 80102fa:	d108      	bne.n	801030e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010300:	4b97      	ldr	r3, [pc, #604]	; (8010560 <tcp_process+0x29c>)
 8010302:	681b      	ldr	r3, [r3, #0]
 8010304:	429a      	cmp	r2, r3
 8010306:	d123      	bne.n	8010350 <tcp_process+0x8c>
        acceptable = 1;
 8010308:	2301      	movs	r3, #1
 801030a:	76fb      	strb	r3, [r7, #27]
 801030c:	e020      	b.n	8010350 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010312:	4b94      	ldr	r3, [pc, #592]	; (8010564 <tcp_process+0x2a0>)
 8010314:	681b      	ldr	r3, [r3, #0]
 8010316:	429a      	cmp	r2, r3
 8010318:	d102      	bne.n	8010320 <tcp_process+0x5c>
        acceptable = 1;
 801031a:	2301      	movs	r3, #1
 801031c:	76fb      	strb	r3, [r7, #27]
 801031e:	e017      	b.n	8010350 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010320:	4b90      	ldr	r3, [pc, #576]	; (8010564 <tcp_process+0x2a0>)
 8010322:	681a      	ldr	r2, [r3, #0]
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010328:	1ad3      	subs	r3, r2, r3
 801032a:	2b00      	cmp	r3, #0
 801032c:	db10      	blt.n	8010350 <tcp_process+0x8c>
 801032e:	4b8d      	ldr	r3, [pc, #564]	; (8010564 <tcp_process+0x2a0>)
 8010330:	681a      	ldr	r2, [r3, #0]
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010336:	6879      	ldr	r1, [r7, #4]
 8010338:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801033a:	440b      	add	r3, r1
 801033c:	1ad3      	subs	r3, r2, r3
 801033e:	2b00      	cmp	r3, #0
 8010340:	dc06      	bgt.n	8010350 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	8b5b      	ldrh	r3, [r3, #26]
 8010346:	f043 0302 	orr.w	r3, r3, #2
 801034a:	b29a      	uxth	r2, r3
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8010350:	7efb      	ldrb	r3, [r7, #27]
 8010352:	2b00      	cmp	r3, #0
 8010354:	d01b      	beq.n	801038e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	7d1b      	ldrb	r3, [r3, #20]
 801035a:	2b00      	cmp	r3, #0
 801035c:	d106      	bne.n	801036c <tcp_process+0xa8>
 801035e:	4b7c      	ldr	r3, [pc, #496]	; (8010550 <tcp_process+0x28c>)
 8010360:	f44f 724e 	mov.w	r2, #824	; 0x338
 8010364:	4980      	ldr	r1, [pc, #512]	; (8010568 <tcp_process+0x2a4>)
 8010366:	487c      	ldr	r0, [pc, #496]	; (8010558 <tcp_process+0x294>)
 8010368:	f006 fa6a 	bl	8016840 <iprintf>
      recv_flags |= TF_RESET;
 801036c:	4b7f      	ldr	r3, [pc, #508]	; (801056c <tcp_process+0x2a8>)
 801036e:	781b      	ldrb	r3, [r3, #0]
 8010370:	f043 0308 	orr.w	r3, r3, #8
 8010374:	b2da      	uxtb	r2, r3
 8010376:	4b7d      	ldr	r3, [pc, #500]	; (801056c <tcp_process+0x2a8>)
 8010378:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	8b5b      	ldrh	r3, [r3, #26]
 801037e:	f023 0301 	bic.w	r3, r3, #1
 8010382:	b29a      	uxth	r2, r3
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8010388:	f06f 030d 	mvn.w	r3, #13
 801038c:	e37a      	b.n	8010a84 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 801038e:	2300      	movs	r3, #0
 8010390:	e378      	b.n	8010a84 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8010392:	4b72      	ldr	r3, [pc, #456]	; (801055c <tcp_process+0x298>)
 8010394:	781b      	ldrb	r3, [r3, #0]
 8010396:	f003 0302 	and.w	r3, r3, #2
 801039a:	2b00      	cmp	r3, #0
 801039c:	d010      	beq.n	80103c0 <tcp_process+0xfc>
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	7d1b      	ldrb	r3, [r3, #20]
 80103a2:	2b02      	cmp	r3, #2
 80103a4:	d00c      	beq.n	80103c0 <tcp_process+0xfc>
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	7d1b      	ldrb	r3, [r3, #20]
 80103aa:	2b03      	cmp	r3, #3
 80103ac:	d008      	beq.n	80103c0 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	8b5b      	ldrh	r3, [r3, #26]
 80103b2:	f043 0302 	orr.w	r3, r3, #2
 80103b6:	b29a      	uxth	r2, r3
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80103bc:	2300      	movs	r3, #0
 80103be:	e361      	b.n	8010a84 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	8b5b      	ldrh	r3, [r3, #26]
 80103c4:	f003 0310 	and.w	r3, r3, #16
 80103c8:	2b00      	cmp	r3, #0
 80103ca:	d103      	bne.n	80103d4 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80103cc:	4b68      	ldr	r3, [pc, #416]	; (8010570 <tcp_process+0x2ac>)
 80103ce:	681a      	ldr	r2, [r3, #0]
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	2200      	movs	r2, #0
 80103d8:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	2200      	movs	r2, #0
 80103e0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 80103e4:	6878      	ldr	r0, [r7, #4]
 80103e6:	f001 fc2f 	bl	8011c48 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	7d1b      	ldrb	r3, [r3, #20]
 80103ee:	3b02      	subs	r3, #2
 80103f0:	2b07      	cmp	r3, #7
 80103f2:	f200 8337 	bhi.w	8010a64 <tcp_process+0x7a0>
 80103f6:	a201      	add	r2, pc, #4	; (adr r2, 80103fc <tcp_process+0x138>)
 80103f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80103fc:	0801041d 	.word	0x0801041d
 8010400:	0801064d 	.word	0x0801064d
 8010404:	080107c5 	.word	0x080107c5
 8010408:	080107ef 	.word	0x080107ef
 801040c:	08010913 	.word	0x08010913
 8010410:	080107c5 	.word	0x080107c5
 8010414:	0801099f 	.word	0x0801099f
 8010418:	08010a2f 	.word	0x08010a2f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 801041c:	4b4f      	ldr	r3, [pc, #316]	; (801055c <tcp_process+0x298>)
 801041e:	781b      	ldrb	r3, [r3, #0]
 8010420:	f003 0310 	and.w	r3, r3, #16
 8010424:	2b00      	cmp	r3, #0
 8010426:	f000 80e4 	beq.w	80105f2 <tcp_process+0x32e>
 801042a:	4b4c      	ldr	r3, [pc, #304]	; (801055c <tcp_process+0x298>)
 801042c:	781b      	ldrb	r3, [r3, #0]
 801042e:	f003 0302 	and.w	r3, r3, #2
 8010432:	2b00      	cmp	r3, #0
 8010434:	f000 80dd 	beq.w	80105f2 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801043c:	1c5a      	adds	r2, r3, #1
 801043e:	4b48      	ldr	r3, [pc, #288]	; (8010560 <tcp_process+0x29c>)
 8010440:	681b      	ldr	r3, [r3, #0]
 8010442:	429a      	cmp	r2, r3
 8010444:	f040 80d5 	bne.w	80105f2 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8010448:	4b46      	ldr	r3, [pc, #280]	; (8010564 <tcp_process+0x2a0>)
 801044a:	681b      	ldr	r3, [r3, #0]
 801044c:	1c5a      	adds	r2, r3, #1
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 801045a:	4b41      	ldr	r3, [pc, #260]	; (8010560 <tcp_process+0x29c>)
 801045c:	681a      	ldr	r2, [r3, #0]
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8010462:	4b44      	ldr	r3, [pc, #272]	; (8010574 <tcp_process+0x2b0>)
 8010464:	681b      	ldr	r3, [r3, #0]
 8010466:	89db      	ldrh	r3, [r3, #14]
 8010468:	b29a      	uxth	r2, r3
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 801047c:	4b39      	ldr	r3, [pc, #228]	; (8010564 <tcp_process+0x2a0>)
 801047e:	681b      	ldr	r3, [r3, #0]
 8010480:	1e5a      	subs	r2, r3, #1
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	2204      	movs	r2, #4
 801048a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	3304      	adds	r3, #4
 8010494:	4618      	mov	r0, r3
 8010496:	f004 ff83 	bl	80153a0 <ip4_route>
 801049a:	4601      	mov	r1, r0
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	3304      	adds	r3, #4
 80104a0:	461a      	mov	r2, r3
 80104a2:	4620      	mov	r0, r4
 80104a4:	f7ff f88c 	bl	800f5c0 <tcp_eff_send_mss_netif>
 80104a8:	4603      	mov	r3, r0
 80104aa:	461a      	mov	r2, r3
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80104b4:	009a      	lsls	r2, r3, #2
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80104ba:	005b      	lsls	r3, r3, #1
 80104bc:	f241 111c 	movw	r1, #4380	; 0x111c
 80104c0:	428b      	cmp	r3, r1
 80104c2:	bf38      	it	cc
 80104c4:	460b      	movcc	r3, r1
 80104c6:	429a      	cmp	r2, r3
 80104c8:	d204      	bcs.n	80104d4 <tcp_process+0x210>
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80104ce:	009b      	lsls	r3, r3, #2
 80104d0:	b29b      	uxth	r3, r3
 80104d2:	e00d      	b.n	80104f0 <tcp_process+0x22c>
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80104d8:	005b      	lsls	r3, r3, #1
 80104da:	f241 121c 	movw	r2, #4380	; 0x111c
 80104de:	4293      	cmp	r3, r2
 80104e0:	d904      	bls.n	80104ec <tcp_process+0x228>
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80104e6:	005b      	lsls	r3, r3, #1
 80104e8:	b29b      	uxth	r3, r3
 80104ea:	e001      	b.n	80104f0 <tcp_process+0x22c>
 80104ec:	f241 131c 	movw	r3, #4380	; 0x111c
 80104f0:	687a      	ldr	r2, [r7, #4]
 80104f2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	d106      	bne.n	801050e <tcp_process+0x24a>
 8010500:	4b13      	ldr	r3, [pc, #76]	; (8010550 <tcp_process+0x28c>)
 8010502:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8010506:	491c      	ldr	r1, [pc, #112]	; (8010578 <tcp_process+0x2b4>)
 8010508:	4813      	ldr	r0, [pc, #76]	; (8010558 <tcp_process+0x294>)
 801050a:	f006 f999 	bl	8016840 <iprintf>
        --pcb->snd_queuelen;
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010514:	3b01      	subs	r3, #1
 8010516:	b29a      	uxth	r2, r3
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010522:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8010524:	69fb      	ldr	r3, [r7, #28]
 8010526:	2b00      	cmp	r3, #0
 8010528:	d12a      	bne.n	8010580 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801052e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8010530:	69fb      	ldr	r3, [r7, #28]
 8010532:	2b00      	cmp	r3, #0
 8010534:	d106      	bne.n	8010544 <tcp_process+0x280>
 8010536:	4b06      	ldr	r3, [pc, #24]	; (8010550 <tcp_process+0x28c>)
 8010538:	f44f 725d 	mov.w	r2, #884	; 0x374
 801053c:	490f      	ldr	r1, [pc, #60]	; (801057c <tcp_process+0x2b8>)
 801053e:	4806      	ldr	r0, [pc, #24]	; (8010558 <tcp_process+0x294>)
 8010540:	f006 f97e 	bl	8016840 <iprintf>
          pcb->unsent = rseg->next;
 8010544:	69fb      	ldr	r3, [r7, #28]
 8010546:	681a      	ldr	r2, [r3, #0]
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	66da      	str	r2, [r3, #108]	; 0x6c
 801054c:	e01c      	b.n	8010588 <tcp_process+0x2c4>
 801054e:	bf00      	nop
 8010550:	08019914 	.word	0x08019914
 8010554:	08019b4c 	.word	0x08019b4c
 8010558:	08019960 	.word	0x08019960
 801055c:	20008bec 	.word	0x20008bec
 8010560:	20008be4 	.word	0x20008be4
 8010564:	20008be0 	.word	0x20008be0
 8010568:	08019b68 	.word	0x08019b68
 801056c:	20008bed 	.word	0x20008bed
 8010570:	20008ba8 	.word	0x20008ba8
 8010574:	20008bd0 	.word	0x20008bd0
 8010578:	08019b88 	.word	0x08019b88
 801057c:	08019ba0 	.word	0x08019ba0
        } else {
          pcb->unacked = rseg->next;
 8010580:	69fb      	ldr	r3, [r7, #28]
 8010582:	681a      	ldr	r2, [r3, #0]
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8010588:	69f8      	ldr	r0, [r7, #28]
 801058a:	f7fe fc2e 	bl	800edea <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010592:	2b00      	cmp	r3, #0
 8010594:	d104      	bne.n	80105a0 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801059c:	861a      	strh	r2, [r3, #48]	; 0x30
 801059e:	e006      	b.n	80105ae <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	2200      	movs	r2, #0
 80105a4:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	2200      	movs	r2, #0
 80105aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80105b4:	2b00      	cmp	r3, #0
 80105b6:	d00a      	beq.n	80105ce <tcp_process+0x30a>
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80105be:	687a      	ldr	r2, [r7, #4]
 80105c0:	6910      	ldr	r0, [r2, #16]
 80105c2:	2200      	movs	r2, #0
 80105c4:	6879      	ldr	r1, [r7, #4]
 80105c6:	4798      	blx	r3
 80105c8:	4603      	mov	r3, r0
 80105ca:	76bb      	strb	r3, [r7, #26]
 80105cc:	e001      	b.n	80105d2 <tcp_process+0x30e>
 80105ce:	2300      	movs	r3, #0
 80105d0:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 80105d2:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80105d6:	f113 0f0d 	cmn.w	r3, #13
 80105da:	d102      	bne.n	80105e2 <tcp_process+0x31e>
          return ERR_ABRT;
 80105dc:	f06f 030c 	mvn.w	r3, #12
 80105e0:	e250      	b.n	8010a84 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	8b5b      	ldrh	r3, [r3, #26]
 80105e6:	f043 0302 	orr.w	r3, r3, #2
 80105ea:	b29a      	uxth	r2, r3
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 80105f0:	e23a      	b.n	8010a68 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 80105f2:	4b98      	ldr	r3, [pc, #608]	; (8010854 <tcp_process+0x590>)
 80105f4:	781b      	ldrb	r3, [r3, #0]
 80105f6:	f003 0310 	and.w	r3, r3, #16
 80105fa:	2b00      	cmp	r3, #0
 80105fc:	f000 8234 	beq.w	8010a68 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010600:	4b95      	ldr	r3, [pc, #596]	; (8010858 <tcp_process+0x594>)
 8010602:	6819      	ldr	r1, [r3, #0]
 8010604:	4b95      	ldr	r3, [pc, #596]	; (801085c <tcp_process+0x598>)
 8010606:	881b      	ldrh	r3, [r3, #0]
 8010608:	461a      	mov	r2, r3
 801060a:	4b95      	ldr	r3, [pc, #596]	; (8010860 <tcp_process+0x59c>)
 801060c:	681b      	ldr	r3, [r3, #0]
 801060e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010610:	4b94      	ldr	r3, [pc, #592]	; (8010864 <tcp_process+0x5a0>)
 8010612:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010614:	885b      	ldrh	r3, [r3, #2]
 8010616:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010618:	4a92      	ldr	r2, [pc, #584]	; (8010864 <tcp_process+0x5a0>)
 801061a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801061c:	8812      	ldrh	r2, [r2, #0]
 801061e:	b292      	uxth	r2, r2
 8010620:	9202      	str	r2, [sp, #8]
 8010622:	9301      	str	r3, [sp, #4]
 8010624:	4b90      	ldr	r3, [pc, #576]	; (8010868 <tcp_process+0x5a4>)
 8010626:	9300      	str	r3, [sp, #0]
 8010628:	4b90      	ldr	r3, [pc, #576]	; (801086c <tcp_process+0x5a8>)
 801062a:	4602      	mov	r2, r0
 801062c:	6878      	ldr	r0, [r7, #4]
 801062e:	f003 f8dd 	bl	80137ec <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010638:	2b05      	cmp	r3, #5
 801063a:	f200 8215 	bhi.w	8010a68 <tcp_process+0x7a4>
          pcb->rtime = 0;
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	2200      	movs	r2, #0
 8010642:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8010644:	6878      	ldr	r0, [r7, #4]
 8010646:	f002 fea7 	bl	8013398 <tcp_rexmit_rto>
      break;
 801064a:	e20d      	b.n	8010a68 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 801064c:	4b81      	ldr	r3, [pc, #516]	; (8010854 <tcp_process+0x590>)
 801064e:	781b      	ldrb	r3, [r3, #0]
 8010650:	f003 0310 	and.w	r3, r3, #16
 8010654:	2b00      	cmp	r3, #0
 8010656:	f000 80a1 	beq.w	801079c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801065a:	4b7f      	ldr	r3, [pc, #508]	; (8010858 <tcp_process+0x594>)
 801065c:	681a      	ldr	r2, [r3, #0]
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010662:	1ad3      	subs	r3, r2, r3
 8010664:	3b01      	subs	r3, #1
 8010666:	2b00      	cmp	r3, #0
 8010668:	db7e      	blt.n	8010768 <tcp_process+0x4a4>
 801066a:	4b7b      	ldr	r3, [pc, #492]	; (8010858 <tcp_process+0x594>)
 801066c:	681a      	ldr	r2, [r3, #0]
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010672:	1ad3      	subs	r3, r2, r3
 8010674:	2b00      	cmp	r3, #0
 8010676:	dc77      	bgt.n	8010768 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	2204      	movs	r2, #4
 801067c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010682:	2b00      	cmp	r3, #0
 8010684:	d102      	bne.n	801068c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8010686:	23fa      	movs	r3, #250	; 0xfa
 8010688:	76bb      	strb	r3, [r7, #26]
 801068a:	e01d      	b.n	80106c8 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010690:	699b      	ldr	r3, [r3, #24]
 8010692:	2b00      	cmp	r3, #0
 8010694:	d106      	bne.n	80106a4 <tcp_process+0x3e0>
 8010696:	4b76      	ldr	r3, [pc, #472]	; (8010870 <tcp_process+0x5ac>)
 8010698:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 801069c:	4975      	ldr	r1, [pc, #468]	; (8010874 <tcp_process+0x5b0>)
 801069e:	4876      	ldr	r0, [pc, #472]	; (8010878 <tcp_process+0x5b4>)
 80106a0:	f006 f8ce 	bl	8016840 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80106a8:	699b      	ldr	r3, [r3, #24]
 80106aa:	2b00      	cmp	r3, #0
 80106ac:	d00a      	beq.n	80106c4 <tcp_process+0x400>
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80106b2:	699b      	ldr	r3, [r3, #24]
 80106b4:	687a      	ldr	r2, [r7, #4]
 80106b6:	6910      	ldr	r0, [r2, #16]
 80106b8:	2200      	movs	r2, #0
 80106ba:	6879      	ldr	r1, [r7, #4]
 80106bc:	4798      	blx	r3
 80106be:	4603      	mov	r3, r0
 80106c0:	76bb      	strb	r3, [r7, #26]
 80106c2:	e001      	b.n	80106c8 <tcp_process+0x404>
 80106c4:	23f0      	movs	r3, #240	; 0xf0
 80106c6:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 80106c8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	d00a      	beq.n	80106e6 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80106d0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80106d4:	f113 0f0d 	cmn.w	r3, #13
 80106d8:	d002      	beq.n	80106e0 <tcp_process+0x41c>
              tcp_abort(pcb);
 80106da:	6878      	ldr	r0, [r7, #4]
 80106dc:	f7fd fbc8 	bl	800de70 <tcp_abort>
            }
            return ERR_ABRT;
 80106e0:	f06f 030c 	mvn.w	r3, #12
 80106e4:	e1ce      	b.n	8010a84 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 80106e6:	6878      	ldr	r0, [r7, #4]
 80106e8:	f000 fae0 	bl	8010cac <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80106ec:	4b63      	ldr	r3, [pc, #396]	; (801087c <tcp_process+0x5b8>)
 80106ee:	881b      	ldrh	r3, [r3, #0]
 80106f0:	2b00      	cmp	r3, #0
 80106f2:	d005      	beq.n	8010700 <tcp_process+0x43c>
            recv_acked--;
 80106f4:	4b61      	ldr	r3, [pc, #388]	; (801087c <tcp_process+0x5b8>)
 80106f6:	881b      	ldrh	r3, [r3, #0]
 80106f8:	3b01      	subs	r3, #1
 80106fa:	b29a      	uxth	r2, r3
 80106fc:	4b5f      	ldr	r3, [pc, #380]	; (801087c <tcp_process+0x5b8>)
 80106fe:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010704:	009a      	lsls	r2, r3, #2
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801070a:	005b      	lsls	r3, r3, #1
 801070c:	f241 111c 	movw	r1, #4380	; 0x111c
 8010710:	428b      	cmp	r3, r1
 8010712:	bf38      	it	cc
 8010714:	460b      	movcc	r3, r1
 8010716:	429a      	cmp	r2, r3
 8010718:	d204      	bcs.n	8010724 <tcp_process+0x460>
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801071e:	009b      	lsls	r3, r3, #2
 8010720:	b29b      	uxth	r3, r3
 8010722:	e00d      	b.n	8010740 <tcp_process+0x47c>
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010728:	005b      	lsls	r3, r3, #1
 801072a:	f241 121c 	movw	r2, #4380	; 0x111c
 801072e:	4293      	cmp	r3, r2
 8010730:	d904      	bls.n	801073c <tcp_process+0x478>
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010736:	005b      	lsls	r3, r3, #1
 8010738:	b29b      	uxth	r3, r3
 801073a:	e001      	b.n	8010740 <tcp_process+0x47c>
 801073c:	f241 131c 	movw	r3, #4380	; 0x111c
 8010740:	687a      	ldr	r2, [r7, #4]
 8010742:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8010746:	4b4e      	ldr	r3, [pc, #312]	; (8010880 <tcp_process+0x5bc>)
 8010748:	781b      	ldrb	r3, [r3, #0]
 801074a:	f003 0320 	and.w	r3, r3, #32
 801074e:	2b00      	cmp	r3, #0
 8010750:	d037      	beq.n	80107c2 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	8b5b      	ldrh	r3, [r3, #26]
 8010756:	f043 0302 	orr.w	r3, r3, #2
 801075a:	b29a      	uxth	r2, r3
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	2207      	movs	r2, #7
 8010764:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8010766:	e02c      	b.n	80107c2 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010768:	4b3b      	ldr	r3, [pc, #236]	; (8010858 <tcp_process+0x594>)
 801076a:	6819      	ldr	r1, [r3, #0]
 801076c:	4b3b      	ldr	r3, [pc, #236]	; (801085c <tcp_process+0x598>)
 801076e:	881b      	ldrh	r3, [r3, #0]
 8010770:	461a      	mov	r2, r3
 8010772:	4b3b      	ldr	r3, [pc, #236]	; (8010860 <tcp_process+0x59c>)
 8010774:	681b      	ldr	r3, [r3, #0]
 8010776:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010778:	4b3a      	ldr	r3, [pc, #232]	; (8010864 <tcp_process+0x5a0>)
 801077a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801077c:	885b      	ldrh	r3, [r3, #2]
 801077e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010780:	4a38      	ldr	r2, [pc, #224]	; (8010864 <tcp_process+0x5a0>)
 8010782:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010784:	8812      	ldrh	r2, [r2, #0]
 8010786:	b292      	uxth	r2, r2
 8010788:	9202      	str	r2, [sp, #8]
 801078a:	9301      	str	r3, [sp, #4]
 801078c:	4b36      	ldr	r3, [pc, #216]	; (8010868 <tcp_process+0x5a4>)
 801078e:	9300      	str	r3, [sp, #0]
 8010790:	4b36      	ldr	r3, [pc, #216]	; (801086c <tcp_process+0x5a8>)
 8010792:	4602      	mov	r2, r0
 8010794:	6878      	ldr	r0, [r7, #4]
 8010796:	f003 f829 	bl	80137ec <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 801079a:	e167      	b.n	8010a6c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 801079c:	4b2d      	ldr	r3, [pc, #180]	; (8010854 <tcp_process+0x590>)
 801079e:	781b      	ldrb	r3, [r3, #0]
 80107a0:	f003 0302 	and.w	r3, r3, #2
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	f000 8161 	beq.w	8010a6c <tcp_process+0x7a8>
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107ae:	1e5a      	subs	r2, r3, #1
 80107b0:	4b2b      	ldr	r3, [pc, #172]	; (8010860 <tcp_process+0x59c>)
 80107b2:	681b      	ldr	r3, [r3, #0]
 80107b4:	429a      	cmp	r2, r3
 80107b6:	f040 8159 	bne.w	8010a6c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80107ba:	6878      	ldr	r0, [r7, #4]
 80107bc:	f002 fe0e 	bl	80133dc <tcp_rexmit>
      break;
 80107c0:	e154      	b.n	8010a6c <tcp_process+0x7a8>
 80107c2:	e153      	b.n	8010a6c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80107c4:	6878      	ldr	r0, [r7, #4]
 80107c6:	f000 fa71 	bl	8010cac <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80107ca:	4b2d      	ldr	r3, [pc, #180]	; (8010880 <tcp_process+0x5bc>)
 80107cc:	781b      	ldrb	r3, [r3, #0]
 80107ce:	f003 0320 	and.w	r3, r3, #32
 80107d2:	2b00      	cmp	r3, #0
 80107d4:	f000 814c 	beq.w	8010a70 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	8b5b      	ldrh	r3, [r3, #26]
 80107dc:	f043 0302 	orr.w	r3, r3, #2
 80107e0:	b29a      	uxth	r2, r3
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	2207      	movs	r2, #7
 80107ea:	751a      	strb	r2, [r3, #20]
      }
      break;
 80107ec:	e140      	b.n	8010a70 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80107ee:	6878      	ldr	r0, [r7, #4]
 80107f0:	f000 fa5c 	bl	8010cac <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80107f4:	4b22      	ldr	r3, [pc, #136]	; (8010880 <tcp_process+0x5bc>)
 80107f6:	781b      	ldrb	r3, [r3, #0]
 80107f8:	f003 0320 	and.w	r3, r3, #32
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	d071      	beq.n	80108e4 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010800:	4b14      	ldr	r3, [pc, #80]	; (8010854 <tcp_process+0x590>)
 8010802:	781b      	ldrb	r3, [r3, #0]
 8010804:	f003 0310 	and.w	r3, r3, #16
 8010808:	2b00      	cmp	r3, #0
 801080a:	d060      	beq.n	80108ce <tcp_process+0x60a>
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010810:	4b11      	ldr	r3, [pc, #68]	; (8010858 <tcp_process+0x594>)
 8010812:	681b      	ldr	r3, [r3, #0]
 8010814:	429a      	cmp	r2, r3
 8010816:	d15a      	bne.n	80108ce <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801081c:	2b00      	cmp	r3, #0
 801081e:	d156      	bne.n	80108ce <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	8b5b      	ldrh	r3, [r3, #26]
 8010824:	f043 0302 	orr.w	r3, r3, #2
 8010828:	b29a      	uxth	r2, r3
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 801082e:	6878      	ldr	r0, [r7, #4]
 8010830:	f7fe fdbc 	bl	800f3ac <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8010834:	4b13      	ldr	r3, [pc, #76]	; (8010884 <tcp_process+0x5c0>)
 8010836:	681b      	ldr	r3, [r3, #0]
 8010838:	687a      	ldr	r2, [r7, #4]
 801083a:	429a      	cmp	r2, r3
 801083c:	d105      	bne.n	801084a <tcp_process+0x586>
 801083e:	4b11      	ldr	r3, [pc, #68]	; (8010884 <tcp_process+0x5c0>)
 8010840:	681b      	ldr	r3, [r3, #0]
 8010842:	68db      	ldr	r3, [r3, #12]
 8010844:	4a0f      	ldr	r2, [pc, #60]	; (8010884 <tcp_process+0x5c0>)
 8010846:	6013      	str	r3, [r2, #0]
 8010848:	e02e      	b.n	80108a8 <tcp_process+0x5e4>
 801084a:	4b0e      	ldr	r3, [pc, #56]	; (8010884 <tcp_process+0x5c0>)
 801084c:	681b      	ldr	r3, [r3, #0]
 801084e:	617b      	str	r3, [r7, #20]
 8010850:	e027      	b.n	80108a2 <tcp_process+0x5de>
 8010852:	bf00      	nop
 8010854:	20008bec 	.word	0x20008bec
 8010858:	20008be4 	.word	0x20008be4
 801085c:	20008bea 	.word	0x20008bea
 8010860:	20008be0 	.word	0x20008be0
 8010864:	20008bd0 	.word	0x20008bd0
 8010868:	20005648 	.word	0x20005648
 801086c:	2000564c 	.word	0x2000564c
 8010870:	08019914 	.word	0x08019914
 8010874:	08019bb4 	.word	0x08019bb4
 8010878:	08019960 	.word	0x08019960
 801087c:	20008be8 	.word	0x20008be8
 8010880:	20008bed 	.word	0x20008bed
 8010884:	20008bb4 	.word	0x20008bb4
 8010888:	697b      	ldr	r3, [r7, #20]
 801088a:	68db      	ldr	r3, [r3, #12]
 801088c:	687a      	ldr	r2, [r7, #4]
 801088e:	429a      	cmp	r2, r3
 8010890:	d104      	bne.n	801089c <tcp_process+0x5d8>
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	68da      	ldr	r2, [r3, #12]
 8010896:	697b      	ldr	r3, [r7, #20]
 8010898:	60da      	str	r2, [r3, #12]
 801089a:	e005      	b.n	80108a8 <tcp_process+0x5e4>
 801089c:	697b      	ldr	r3, [r7, #20]
 801089e:	68db      	ldr	r3, [r3, #12]
 80108a0:	617b      	str	r3, [r7, #20]
 80108a2:	697b      	ldr	r3, [r7, #20]
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	d1ef      	bne.n	8010888 <tcp_process+0x5c4>
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	2200      	movs	r2, #0
 80108ac:	60da      	str	r2, [r3, #12]
 80108ae:	4b77      	ldr	r3, [pc, #476]	; (8010a8c <tcp_process+0x7c8>)
 80108b0:	2201      	movs	r2, #1
 80108b2:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	220a      	movs	r2, #10
 80108b8:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80108ba:	4b75      	ldr	r3, [pc, #468]	; (8010a90 <tcp_process+0x7cc>)
 80108bc:	681a      	ldr	r2, [r3, #0]
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	60da      	str	r2, [r3, #12]
 80108c2:	4a73      	ldr	r2, [pc, #460]	; (8010a90 <tcp_process+0x7cc>)
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	6013      	str	r3, [r2, #0]
 80108c8:	f003 f952 	bl	8013b70 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80108cc:	e0d2      	b.n	8010a74 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	8b5b      	ldrh	r3, [r3, #26]
 80108d2:	f043 0302 	orr.w	r3, r3, #2
 80108d6:	b29a      	uxth	r2, r3
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	2208      	movs	r2, #8
 80108e0:	751a      	strb	r2, [r3, #20]
      break;
 80108e2:	e0c7      	b.n	8010a74 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80108e4:	4b6b      	ldr	r3, [pc, #428]	; (8010a94 <tcp_process+0x7d0>)
 80108e6:	781b      	ldrb	r3, [r3, #0]
 80108e8:	f003 0310 	and.w	r3, r3, #16
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	f000 80c1 	beq.w	8010a74 <tcp_process+0x7b0>
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80108f6:	4b68      	ldr	r3, [pc, #416]	; (8010a98 <tcp_process+0x7d4>)
 80108f8:	681b      	ldr	r3, [r3, #0]
 80108fa:	429a      	cmp	r2, r3
 80108fc:	f040 80ba 	bne.w	8010a74 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010904:	2b00      	cmp	r3, #0
 8010906:	f040 80b5 	bne.w	8010a74 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	2206      	movs	r2, #6
 801090e:	751a      	strb	r2, [r3, #20]
      break;
 8010910:	e0b0      	b.n	8010a74 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8010912:	6878      	ldr	r0, [r7, #4]
 8010914:	f000 f9ca 	bl	8010cac <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8010918:	4b60      	ldr	r3, [pc, #384]	; (8010a9c <tcp_process+0x7d8>)
 801091a:	781b      	ldrb	r3, [r3, #0]
 801091c:	f003 0320 	and.w	r3, r3, #32
 8010920:	2b00      	cmp	r3, #0
 8010922:	f000 80a9 	beq.w	8010a78 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	8b5b      	ldrh	r3, [r3, #26]
 801092a:	f043 0302 	orr.w	r3, r3, #2
 801092e:	b29a      	uxth	r2, r3
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8010934:	6878      	ldr	r0, [r7, #4]
 8010936:	f7fe fd39 	bl	800f3ac <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801093a:	4b59      	ldr	r3, [pc, #356]	; (8010aa0 <tcp_process+0x7dc>)
 801093c:	681b      	ldr	r3, [r3, #0]
 801093e:	687a      	ldr	r2, [r7, #4]
 8010940:	429a      	cmp	r2, r3
 8010942:	d105      	bne.n	8010950 <tcp_process+0x68c>
 8010944:	4b56      	ldr	r3, [pc, #344]	; (8010aa0 <tcp_process+0x7dc>)
 8010946:	681b      	ldr	r3, [r3, #0]
 8010948:	68db      	ldr	r3, [r3, #12]
 801094a:	4a55      	ldr	r2, [pc, #340]	; (8010aa0 <tcp_process+0x7dc>)
 801094c:	6013      	str	r3, [r2, #0]
 801094e:	e013      	b.n	8010978 <tcp_process+0x6b4>
 8010950:	4b53      	ldr	r3, [pc, #332]	; (8010aa0 <tcp_process+0x7dc>)
 8010952:	681b      	ldr	r3, [r3, #0]
 8010954:	613b      	str	r3, [r7, #16]
 8010956:	e00c      	b.n	8010972 <tcp_process+0x6ae>
 8010958:	693b      	ldr	r3, [r7, #16]
 801095a:	68db      	ldr	r3, [r3, #12]
 801095c:	687a      	ldr	r2, [r7, #4]
 801095e:	429a      	cmp	r2, r3
 8010960:	d104      	bne.n	801096c <tcp_process+0x6a8>
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	68da      	ldr	r2, [r3, #12]
 8010966:	693b      	ldr	r3, [r7, #16]
 8010968:	60da      	str	r2, [r3, #12]
 801096a:	e005      	b.n	8010978 <tcp_process+0x6b4>
 801096c:	693b      	ldr	r3, [r7, #16]
 801096e:	68db      	ldr	r3, [r3, #12]
 8010970:	613b      	str	r3, [r7, #16]
 8010972:	693b      	ldr	r3, [r7, #16]
 8010974:	2b00      	cmp	r3, #0
 8010976:	d1ef      	bne.n	8010958 <tcp_process+0x694>
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	2200      	movs	r2, #0
 801097c:	60da      	str	r2, [r3, #12]
 801097e:	4b43      	ldr	r3, [pc, #268]	; (8010a8c <tcp_process+0x7c8>)
 8010980:	2201      	movs	r2, #1
 8010982:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	220a      	movs	r2, #10
 8010988:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801098a:	4b41      	ldr	r3, [pc, #260]	; (8010a90 <tcp_process+0x7cc>)
 801098c:	681a      	ldr	r2, [r3, #0]
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	60da      	str	r2, [r3, #12]
 8010992:	4a3f      	ldr	r2, [pc, #252]	; (8010a90 <tcp_process+0x7cc>)
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	6013      	str	r3, [r2, #0]
 8010998:	f003 f8ea 	bl	8013b70 <tcp_timer_needed>
      }
      break;
 801099c:	e06c      	b.n	8010a78 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801099e:	6878      	ldr	r0, [r7, #4]
 80109a0:	f000 f984 	bl	8010cac <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80109a4:	4b3b      	ldr	r3, [pc, #236]	; (8010a94 <tcp_process+0x7d0>)
 80109a6:	781b      	ldrb	r3, [r3, #0]
 80109a8:	f003 0310 	and.w	r3, r3, #16
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	d065      	beq.n	8010a7c <tcp_process+0x7b8>
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80109b4:	4b38      	ldr	r3, [pc, #224]	; (8010a98 <tcp_process+0x7d4>)
 80109b6:	681b      	ldr	r3, [r3, #0]
 80109b8:	429a      	cmp	r2, r3
 80109ba:	d15f      	bne.n	8010a7c <tcp_process+0x7b8>
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80109c0:	2b00      	cmp	r3, #0
 80109c2:	d15b      	bne.n	8010a7c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80109c4:	6878      	ldr	r0, [r7, #4]
 80109c6:	f7fe fcf1 	bl	800f3ac <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80109ca:	4b35      	ldr	r3, [pc, #212]	; (8010aa0 <tcp_process+0x7dc>)
 80109cc:	681b      	ldr	r3, [r3, #0]
 80109ce:	687a      	ldr	r2, [r7, #4]
 80109d0:	429a      	cmp	r2, r3
 80109d2:	d105      	bne.n	80109e0 <tcp_process+0x71c>
 80109d4:	4b32      	ldr	r3, [pc, #200]	; (8010aa0 <tcp_process+0x7dc>)
 80109d6:	681b      	ldr	r3, [r3, #0]
 80109d8:	68db      	ldr	r3, [r3, #12]
 80109da:	4a31      	ldr	r2, [pc, #196]	; (8010aa0 <tcp_process+0x7dc>)
 80109dc:	6013      	str	r3, [r2, #0]
 80109de:	e013      	b.n	8010a08 <tcp_process+0x744>
 80109e0:	4b2f      	ldr	r3, [pc, #188]	; (8010aa0 <tcp_process+0x7dc>)
 80109e2:	681b      	ldr	r3, [r3, #0]
 80109e4:	60fb      	str	r3, [r7, #12]
 80109e6:	e00c      	b.n	8010a02 <tcp_process+0x73e>
 80109e8:	68fb      	ldr	r3, [r7, #12]
 80109ea:	68db      	ldr	r3, [r3, #12]
 80109ec:	687a      	ldr	r2, [r7, #4]
 80109ee:	429a      	cmp	r2, r3
 80109f0:	d104      	bne.n	80109fc <tcp_process+0x738>
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	68da      	ldr	r2, [r3, #12]
 80109f6:	68fb      	ldr	r3, [r7, #12]
 80109f8:	60da      	str	r2, [r3, #12]
 80109fa:	e005      	b.n	8010a08 <tcp_process+0x744>
 80109fc:	68fb      	ldr	r3, [r7, #12]
 80109fe:	68db      	ldr	r3, [r3, #12]
 8010a00:	60fb      	str	r3, [r7, #12]
 8010a02:	68fb      	ldr	r3, [r7, #12]
 8010a04:	2b00      	cmp	r3, #0
 8010a06:	d1ef      	bne.n	80109e8 <tcp_process+0x724>
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	2200      	movs	r2, #0
 8010a0c:	60da      	str	r2, [r3, #12]
 8010a0e:	4b1f      	ldr	r3, [pc, #124]	; (8010a8c <tcp_process+0x7c8>)
 8010a10:	2201      	movs	r2, #1
 8010a12:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	220a      	movs	r2, #10
 8010a18:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8010a1a:	4b1d      	ldr	r3, [pc, #116]	; (8010a90 <tcp_process+0x7cc>)
 8010a1c:	681a      	ldr	r2, [r3, #0]
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	60da      	str	r2, [r3, #12]
 8010a22:	4a1b      	ldr	r2, [pc, #108]	; (8010a90 <tcp_process+0x7cc>)
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	6013      	str	r3, [r2, #0]
 8010a28:	f003 f8a2 	bl	8013b70 <tcp_timer_needed>
      }
      break;
 8010a2c:	e026      	b.n	8010a7c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8010a2e:	6878      	ldr	r0, [r7, #4]
 8010a30:	f000 f93c 	bl	8010cac <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8010a34:	4b17      	ldr	r3, [pc, #92]	; (8010a94 <tcp_process+0x7d0>)
 8010a36:	781b      	ldrb	r3, [r3, #0]
 8010a38:	f003 0310 	and.w	r3, r3, #16
 8010a3c:	2b00      	cmp	r3, #0
 8010a3e:	d01f      	beq.n	8010a80 <tcp_process+0x7bc>
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010a44:	4b14      	ldr	r3, [pc, #80]	; (8010a98 <tcp_process+0x7d4>)
 8010a46:	681b      	ldr	r3, [r3, #0]
 8010a48:	429a      	cmp	r2, r3
 8010a4a:	d119      	bne.n	8010a80 <tcp_process+0x7bc>
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010a50:	2b00      	cmp	r3, #0
 8010a52:	d115      	bne.n	8010a80 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8010a54:	4b11      	ldr	r3, [pc, #68]	; (8010a9c <tcp_process+0x7d8>)
 8010a56:	781b      	ldrb	r3, [r3, #0]
 8010a58:	f043 0310 	orr.w	r3, r3, #16
 8010a5c:	b2da      	uxtb	r2, r3
 8010a5e:	4b0f      	ldr	r3, [pc, #60]	; (8010a9c <tcp_process+0x7d8>)
 8010a60:	701a      	strb	r2, [r3, #0]
      }
      break;
 8010a62:	e00d      	b.n	8010a80 <tcp_process+0x7bc>
    default:
      break;
 8010a64:	bf00      	nop
 8010a66:	e00c      	b.n	8010a82 <tcp_process+0x7be>
      break;
 8010a68:	bf00      	nop
 8010a6a:	e00a      	b.n	8010a82 <tcp_process+0x7be>
      break;
 8010a6c:	bf00      	nop
 8010a6e:	e008      	b.n	8010a82 <tcp_process+0x7be>
      break;
 8010a70:	bf00      	nop
 8010a72:	e006      	b.n	8010a82 <tcp_process+0x7be>
      break;
 8010a74:	bf00      	nop
 8010a76:	e004      	b.n	8010a82 <tcp_process+0x7be>
      break;
 8010a78:	bf00      	nop
 8010a7a:	e002      	b.n	8010a82 <tcp_process+0x7be>
      break;
 8010a7c:	bf00      	nop
 8010a7e:	e000      	b.n	8010a82 <tcp_process+0x7be>
      break;
 8010a80:	bf00      	nop
  }
  return ERR_OK;
 8010a82:	2300      	movs	r3, #0
}
 8010a84:	4618      	mov	r0, r3
 8010a86:	3724      	adds	r7, #36	; 0x24
 8010a88:	46bd      	mov	sp, r7
 8010a8a:	bd90      	pop	{r4, r7, pc}
 8010a8c:	20008bbc 	.word	0x20008bbc
 8010a90:	20008bb8 	.word	0x20008bb8
 8010a94:	20008bec 	.word	0x20008bec
 8010a98:	20008be4 	.word	0x20008be4
 8010a9c:	20008bed 	.word	0x20008bed
 8010aa0:	20008bb4 	.word	0x20008bb4

08010aa4 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8010aa4:	b590      	push	{r4, r7, lr}
 8010aa6:	b085      	sub	sp, #20
 8010aa8:	af00      	add	r7, sp, #0
 8010aaa:	6078      	str	r0, [r7, #4]
 8010aac:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	2b00      	cmp	r3, #0
 8010ab2:	d106      	bne.n	8010ac2 <tcp_oos_insert_segment+0x1e>
 8010ab4:	4b3b      	ldr	r3, [pc, #236]	; (8010ba4 <tcp_oos_insert_segment+0x100>)
 8010ab6:	f240 421f 	movw	r2, #1055	; 0x41f
 8010aba:	493b      	ldr	r1, [pc, #236]	; (8010ba8 <tcp_oos_insert_segment+0x104>)
 8010abc:	483b      	ldr	r0, [pc, #236]	; (8010bac <tcp_oos_insert_segment+0x108>)
 8010abe:	f005 febf 	bl	8016840 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	68db      	ldr	r3, [r3, #12]
 8010ac6:	899b      	ldrh	r3, [r3, #12]
 8010ac8:	b29b      	uxth	r3, r3
 8010aca:	4618      	mov	r0, r3
 8010acc:	f7fb f85e 	bl	800bb8c <lwip_htons>
 8010ad0:	4603      	mov	r3, r0
 8010ad2:	b2db      	uxtb	r3, r3
 8010ad4:	f003 0301 	and.w	r3, r3, #1
 8010ad8:	2b00      	cmp	r3, #0
 8010ada:	d028      	beq.n	8010b2e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8010adc:	6838      	ldr	r0, [r7, #0]
 8010ade:	f7fe f96f 	bl	800edc0 <tcp_segs_free>
    next = NULL;
 8010ae2:	2300      	movs	r3, #0
 8010ae4:	603b      	str	r3, [r7, #0]
 8010ae6:	e056      	b.n	8010b96 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8010ae8:	683b      	ldr	r3, [r7, #0]
 8010aea:	68db      	ldr	r3, [r3, #12]
 8010aec:	899b      	ldrh	r3, [r3, #12]
 8010aee:	b29b      	uxth	r3, r3
 8010af0:	4618      	mov	r0, r3
 8010af2:	f7fb f84b 	bl	800bb8c <lwip_htons>
 8010af6:	4603      	mov	r3, r0
 8010af8:	b2db      	uxtb	r3, r3
 8010afa:	f003 0301 	and.w	r3, r3, #1
 8010afe:	2b00      	cmp	r3, #0
 8010b00:	d00d      	beq.n	8010b1e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	68db      	ldr	r3, [r3, #12]
 8010b06:	899b      	ldrh	r3, [r3, #12]
 8010b08:	b29c      	uxth	r4, r3
 8010b0a:	2001      	movs	r0, #1
 8010b0c:	f7fb f83e 	bl	800bb8c <lwip_htons>
 8010b10:	4603      	mov	r3, r0
 8010b12:	461a      	mov	r2, r3
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	68db      	ldr	r3, [r3, #12]
 8010b18:	4322      	orrs	r2, r4
 8010b1a:	b292      	uxth	r2, r2
 8010b1c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8010b1e:	683b      	ldr	r3, [r7, #0]
 8010b20:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8010b22:	683b      	ldr	r3, [r7, #0]
 8010b24:	681b      	ldr	r3, [r3, #0]
 8010b26:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8010b28:	68f8      	ldr	r0, [r7, #12]
 8010b2a:	f7fe f95e 	bl	800edea <tcp_seg_free>
    while (next &&
 8010b2e:	683b      	ldr	r3, [r7, #0]
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	d00e      	beq.n	8010b52 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	891b      	ldrh	r3, [r3, #8]
 8010b38:	461a      	mov	r2, r3
 8010b3a:	4b1d      	ldr	r3, [pc, #116]	; (8010bb0 <tcp_oos_insert_segment+0x10c>)
 8010b3c:	681b      	ldr	r3, [r3, #0]
 8010b3e:	441a      	add	r2, r3
 8010b40:	683b      	ldr	r3, [r7, #0]
 8010b42:	68db      	ldr	r3, [r3, #12]
 8010b44:	685b      	ldr	r3, [r3, #4]
 8010b46:	6839      	ldr	r1, [r7, #0]
 8010b48:	8909      	ldrh	r1, [r1, #8]
 8010b4a:	440b      	add	r3, r1
 8010b4c:	1ad3      	subs	r3, r2, r3
    while (next &&
 8010b4e:	2b00      	cmp	r3, #0
 8010b50:	daca      	bge.n	8010ae8 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8010b52:	683b      	ldr	r3, [r7, #0]
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	d01e      	beq.n	8010b96 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	891b      	ldrh	r3, [r3, #8]
 8010b5c:	461a      	mov	r2, r3
 8010b5e:	4b14      	ldr	r3, [pc, #80]	; (8010bb0 <tcp_oos_insert_segment+0x10c>)
 8010b60:	681b      	ldr	r3, [r3, #0]
 8010b62:	441a      	add	r2, r3
 8010b64:	683b      	ldr	r3, [r7, #0]
 8010b66:	68db      	ldr	r3, [r3, #12]
 8010b68:	685b      	ldr	r3, [r3, #4]
 8010b6a:	1ad3      	subs	r3, r2, r3
    if (next &&
 8010b6c:	2b00      	cmp	r3, #0
 8010b6e:	dd12      	ble.n	8010b96 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8010b70:	683b      	ldr	r3, [r7, #0]
 8010b72:	68db      	ldr	r3, [r3, #12]
 8010b74:	685b      	ldr	r3, [r3, #4]
 8010b76:	b29a      	uxth	r2, r3
 8010b78:	4b0d      	ldr	r3, [pc, #52]	; (8010bb0 <tcp_oos_insert_segment+0x10c>)
 8010b7a:	681b      	ldr	r3, [r3, #0]
 8010b7c:	b29b      	uxth	r3, r3
 8010b7e:	1ad3      	subs	r3, r2, r3
 8010b80:	b29a      	uxth	r2, r3
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	685a      	ldr	r2, [r3, #4]
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	891b      	ldrh	r3, [r3, #8]
 8010b8e:	4619      	mov	r1, r3
 8010b90:	4610      	mov	r0, r2
 8010b92:	f7fc f9fb 	bl	800cf8c <pbuf_realloc>
    }
  }
  cseg->next = next;
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	683a      	ldr	r2, [r7, #0]
 8010b9a:	601a      	str	r2, [r3, #0]
}
 8010b9c:	bf00      	nop
 8010b9e:	3714      	adds	r7, #20
 8010ba0:	46bd      	mov	sp, r7
 8010ba2:	bd90      	pop	{r4, r7, pc}
 8010ba4:	08019914 	.word	0x08019914
 8010ba8:	08019bd4 	.word	0x08019bd4
 8010bac:	08019960 	.word	0x08019960
 8010bb0:	20008be0 	.word	0x20008be0

08010bb4 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8010bb4:	b5b0      	push	{r4, r5, r7, lr}
 8010bb6:	b086      	sub	sp, #24
 8010bb8:	af00      	add	r7, sp, #0
 8010bba:	60f8      	str	r0, [r7, #12]
 8010bbc:	60b9      	str	r1, [r7, #8]
 8010bbe:	607a      	str	r2, [r7, #4]
 8010bc0:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8010bc2:	e03e      	b.n	8010c42 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8010bc4:	68bb      	ldr	r3, [r7, #8]
 8010bc6:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8010bc8:	68bb      	ldr	r3, [r7, #8]
 8010bca:	681b      	ldr	r3, [r3, #0]
 8010bcc:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8010bce:	697b      	ldr	r3, [r7, #20]
 8010bd0:	685b      	ldr	r3, [r3, #4]
 8010bd2:	4618      	mov	r0, r3
 8010bd4:	f7fc fbe8 	bl	800d3a8 <pbuf_clen>
 8010bd8:	4603      	mov	r3, r0
 8010bda:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8010bdc:	68fb      	ldr	r3, [r7, #12]
 8010bde:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010be2:	8a7a      	ldrh	r2, [r7, #18]
 8010be4:	429a      	cmp	r2, r3
 8010be6:	d906      	bls.n	8010bf6 <tcp_free_acked_segments+0x42>
 8010be8:	4b2a      	ldr	r3, [pc, #168]	; (8010c94 <tcp_free_acked_segments+0xe0>)
 8010bea:	f240 4257 	movw	r2, #1111	; 0x457
 8010bee:	492a      	ldr	r1, [pc, #168]	; (8010c98 <tcp_free_acked_segments+0xe4>)
 8010bf0:	482a      	ldr	r0, [pc, #168]	; (8010c9c <tcp_free_acked_segments+0xe8>)
 8010bf2:	f005 fe25 	bl	8016840 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8010bf6:	68fb      	ldr	r3, [r7, #12]
 8010bf8:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8010bfc:	8a7b      	ldrh	r3, [r7, #18]
 8010bfe:	1ad3      	subs	r3, r2, r3
 8010c00:	b29a      	uxth	r2, r3
 8010c02:	68fb      	ldr	r3, [r7, #12]
 8010c04:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8010c08:	697b      	ldr	r3, [r7, #20]
 8010c0a:	891a      	ldrh	r2, [r3, #8]
 8010c0c:	4b24      	ldr	r3, [pc, #144]	; (8010ca0 <tcp_free_acked_segments+0xec>)
 8010c0e:	881b      	ldrh	r3, [r3, #0]
 8010c10:	4413      	add	r3, r2
 8010c12:	b29a      	uxth	r2, r3
 8010c14:	4b22      	ldr	r3, [pc, #136]	; (8010ca0 <tcp_free_acked_segments+0xec>)
 8010c16:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8010c18:	6978      	ldr	r0, [r7, #20]
 8010c1a:	f7fe f8e6 	bl	800edea <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8010c1e:	68fb      	ldr	r3, [r7, #12]
 8010c20:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010c24:	2b00      	cmp	r3, #0
 8010c26:	d00c      	beq.n	8010c42 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8010c28:	68bb      	ldr	r3, [r7, #8]
 8010c2a:	2b00      	cmp	r3, #0
 8010c2c:	d109      	bne.n	8010c42 <tcp_free_acked_segments+0x8e>
 8010c2e:	683b      	ldr	r3, [r7, #0]
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	d106      	bne.n	8010c42 <tcp_free_acked_segments+0x8e>
 8010c34:	4b17      	ldr	r3, [pc, #92]	; (8010c94 <tcp_free_acked_segments+0xe0>)
 8010c36:	f240 4261 	movw	r2, #1121	; 0x461
 8010c3a:	491a      	ldr	r1, [pc, #104]	; (8010ca4 <tcp_free_acked_segments+0xf0>)
 8010c3c:	4817      	ldr	r0, [pc, #92]	; (8010c9c <tcp_free_acked_segments+0xe8>)
 8010c3e:	f005 fdff 	bl	8016840 <iprintf>
  while (seg_list != NULL &&
 8010c42:	68bb      	ldr	r3, [r7, #8]
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	d020      	beq.n	8010c8a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8010c48:	68bb      	ldr	r3, [r7, #8]
 8010c4a:	68db      	ldr	r3, [r3, #12]
 8010c4c:	685b      	ldr	r3, [r3, #4]
 8010c4e:	4618      	mov	r0, r3
 8010c50:	f7fa ffb1 	bl	800bbb6 <lwip_htonl>
 8010c54:	4604      	mov	r4, r0
 8010c56:	68bb      	ldr	r3, [r7, #8]
 8010c58:	891b      	ldrh	r3, [r3, #8]
 8010c5a:	461d      	mov	r5, r3
 8010c5c:	68bb      	ldr	r3, [r7, #8]
 8010c5e:	68db      	ldr	r3, [r3, #12]
 8010c60:	899b      	ldrh	r3, [r3, #12]
 8010c62:	b29b      	uxth	r3, r3
 8010c64:	4618      	mov	r0, r3
 8010c66:	f7fa ff91 	bl	800bb8c <lwip_htons>
 8010c6a:	4603      	mov	r3, r0
 8010c6c:	b2db      	uxtb	r3, r3
 8010c6e:	f003 0303 	and.w	r3, r3, #3
 8010c72:	2b00      	cmp	r3, #0
 8010c74:	d001      	beq.n	8010c7a <tcp_free_acked_segments+0xc6>
 8010c76:	2301      	movs	r3, #1
 8010c78:	e000      	b.n	8010c7c <tcp_free_acked_segments+0xc8>
 8010c7a:	2300      	movs	r3, #0
 8010c7c:	442b      	add	r3, r5
 8010c7e:	18e2      	adds	r2, r4, r3
 8010c80:	4b09      	ldr	r3, [pc, #36]	; (8010ca8 <tcp_free_acked_segments+0xf4>)
 8010c82:	681b      	ldr	r3, [r3, #0]
 8010c84:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8010c86:	2b00      	cmp	r3, #0
 8010c88:	dd9c      	ble.n	8010bc4 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8010c8a:	68bb      	ldr	r3, [r7, #8]
}
 8010c8c:	4618      	mov	r0, r3
 8010c8e:	3718      	adds	r7, #24
 8010c90:	46bd      	mov	sp, r7
 8010c92:	bdb0      	pop	{r4, r5, r7, pc}
 8010c94:	08019914 	.word	0x08019914
 8010c98:	08019bfc 	.word	0x08019bfc
 8010c9c:	08019960 	.word	0x08019960
 8010ca0:	20008be8 	.word	0x20008be8
 8010ca4:	08019c24 	.word	0x08019c24
 8010ca8:	20008be4 	.word	0x20008be4

08010cac <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8010cac:	b5b0      	push	{r4, r5, r7, lr}
 8010cae:	b094      	sub	sp, #80	; 0x50
 8010cb0:	af00      	add	r7, sp, #0
 8010cb2:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8010cb4:	2300      	movs	r3, #0
 8010cb6:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	d106      	bne.n	8010ccc <tcp_receive+0x20>
 8010cbe:	4b91      	ldr	r3, [pc, #580]	; (8010f04 <tcp_receive+0x258>)
 8010cc0:	f240 427b 	movw	r2, #1147	; 0x47b
 8010cc4:	4990      	ldr	r1, [pc, #576]	; (8010f08 <tcp_receive+0x25c>)
 8010cc6:	4891      	ldr	r0, [pc, #580]	; (8010f0c <tcp_receive+0x260>)
 8010cc8:	f005 fdba 	bl	8016840 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	7d1b      	ldrb	r3, [r3, #20]
 8010cd0:	2b03      	cmp	r3, #3
 8010cd2:	d806      	bhi.n	8010ce2 <tcp_receive+0x36>
 8010cd4:	4b8b      	ldr	r3, [pc, #556]	; (8010f04 <tcp_receive+0x258>)
 8010cd6:	f240 427c 	movw	r2, #1148	; 0x47c
 8010cda:	498d      	ldr	r1, [pc, #564]	; (8010f10 <tcp_receive+0x264>)
 8010cdc:	488b      	ldr	r0, [pc, #556]	; (8010f0c <tcp_receive+0x260>)
 8010cde:	f005 fdaf 	bl	8016840 <iprintf>

  if (flags & TCP_ACK) {
 8010ce2:	4b8c      	ldr	r3, [pc, #560]	; (8010f14 <tcp_receive+0x268>)
 8010ce4:	781b      	ldrb	r3, [r3, #0]
 8010ce6:	f003 0310 	and.w	r3, r3, #16
 8010cea:	2b00      	cmp	r3, #0
 8010cec:	f000 8264 	beq.w	80111b8 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010cf6:	461a      	mov	r2, r3
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010cfc:	4413      	add	r3, r2
 8010cfe:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010d04:	4b84      	ldr	r3, [pc, #528]	; (8010f18 <tcp_receive+0x26c>)
 8010d06:	681b      	ldr	r3, [r3, #0]
 8010d08:	1ad3      	subs	r3, r2, r3
 8010d0a:	2b00      	cmp	r3, #0
 8010d0c:	db1b      	blt.n	8010d46 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010d12:	4b81      	ldr	r3, [pc, #516]	; (8010f18 <tcp_receive+0x26c>)
 8010d14:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8010d16:	429a      	cmp	r2, r3
 8010d18:	d106      	bne.n	8010d28 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010d1e:	4b7f      	ldr	r3, [pc, #508]	; (8010f1c <tcp_receive+0x270>)
 8010d20:	681b      	ldr	r3, [r3, #0]
 8010d22:	1ad3      	subs	r3, r2, r3
 8010d24:	2b00      	cmp	r3, #0
 8010d26:	db0e      	blt.n	8010d46 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010d2c:	4b7b      	ldr	r3, [pc, #492]	; (8010f1c <tcp_receive+0x270>)
 8010d2e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010d30:	429a      	cmp	r2, r3
 8010d32:	d125      	bne.n	8010d80 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8010d34:	4b7a      	ldr	r3, [pc, #488]	; (8010f20 <tcp_receive+0x274>)
 8010d36:	681b      	ldr	r3, [r3, #0]
 8010d38:	89db      	ldrh	r3, [r3, #14]
 8010d3a:	b29a      	uxth	r2, r3
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010d42:	429a      	cmp	r2, r3
 8010d44:	d91c      	bls.n	8010d80 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8010d46:	4b76      	ldr	r3, [pc, #472]	; (8010f20 <tcp_receive+0x274>)
 8010d48:	681b      	ldr	r3, [r3, #0]
 8010d4a:	89db      	ldrh	r3, [r3, #14]
 8010d4c:	b29a      	uxth	r2, r3
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010d60:	429a      	cmp	r2, r3
 8010d62:	d205      	bcs.n	8010d70 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8010d70:	4b69      	ldr	r3, [pc, #420]	; (8010f18 <tcp_receive+0x26c>)
 8010d72:	681a      	ldr	r2, [r3, #0]
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8010d78:	4b68      	ldr	r3, [pc, #416]	; (8010f1c <tcp_receive+0x270>)
 8010d7a:	681a      	ldr	r2, [r3, #0]
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8010d80:	4b66      	ldr	r3, [pc, #408]	; (8010f1c <tcp_receive+0x270>)
 8010d82:	681a      	ldr	r2, [r3, #0]
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010d88:	1ad3      	subs	r3, r2, r3
 8010d8a:	2b00      	cmp	r3, #0
 8010d8c:	dc58      	bgt.n	8010e40 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8010d8e:	4b65      	ldr	r3, [pc, #404]	; (8010f24 <tcp_receive+0x278>)
 8010d90:	881b      	ldrh	r3, [r3, #0]
 8010d92:	2b00      	cmp	r3, #0
 8010d94:	d14b      	bne.n	8010e2e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010d9a:	687a      	ldr	r2, [r7, #4]
 8010d9c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8010da0:	4413      	add	r3, r2
 8010da2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010da4:	429a      	cmp	r2, r3
 8010da6:	d142      	bne.n	8010e2e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010dae:	2b00      	cmp	r3, #0
 8010db0:	db3d      	blt.n	8010e2e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010db6:	4b59      	ldr	r3, [pc, #356]	; (8010f1c <tcp_receive+0x270>)
 8010db8:	681b      	ldr	r3, [r3, #0]
 8010dba:	429a      	cmp	r2, r3
 8010dbc:	d137      	bne.n	8010e2e <tcp_receive+0x182>
              found_dupack = 1;
 8010dbe:	2301      	movs	r3, #1
 8010dc0:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010dc8:	2bff      	cmp	r3, #255	; 0xff
 8010dca:	d007      	beq.n	8010ddc <tcp_receive+0x130>
                ++pcb->dupacks;
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010dd2:	3301      	adds	r3, #1
 8010dd4:	b2da      	uxtb	r2, r3
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010de2:	2b03      	cmp	r3, #3
 8010de4:	d91b      	bls.n	8010e1e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010df0:	4413      	add	r3, r2
 8010df2:	b29a      	uxth	r2, r3
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010dfa:	429a      	cmp	r2, r3
 8010dfc:	d30a      	bcc.n	8010e14 <tcp_receive+0x168>
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010e08:	4413      	add	r3, r2
 8010e0a:	b29a      	uxth	r2, r3
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010e12:	e004      	b.n	8010e1e <tcp_receive+0x172>
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010e1a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010e24:	2b02      	cmp	r3, #2
 8010e26:	d902      	bls.n	8010e2e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8010e28:	6878      	ldr	r0, [r7, #4]
 8010e2a:	f002 fb43 	bl	80134b4 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8010e2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	f040 8161 	bne.w	80110f8 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	2200      	movs	r2, #0
 8010e3a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8010e3e:	e15b      	b.n	80110f8 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010e40:	4b36      	ldr	r3, [pc, #216]	; (8010f1c <tcp_receive+0x270>)
 8010e42:	681a      	ldr	r2, [r3, #0]
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010e48:	1ad3      	subs	r3, r2, r3
 8010e4a:	3b01      	subs	r3, #1
 8010e4c:	2b00      	cmp	r3, #0
 8010e4e:	f2c0 814e 	blt.w	80110ee <tcp_receive+0x442>
 8010e52:	4b32      	ldr	r3, [pc, #200]	; (8010f1c <tcp_receive+0x270>)
 8010e54:	681a      	ldr	r2, [r3, #0]
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010e5a:	1ad3      	subs	r3, r2, r3
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	f300 8146 	bgt.w	80110ee <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	8b5b      	ldrh	r3, [r3, #26]
 8010e66:	f003 0304 	and.w	r3, r3, #4
 8010e6a:	2b00      	cmp	r3, #0
 8010e6c:	d010      	beq.n	8010e90 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	8b5b      	ldrh	r3, [r3, #26]
 8010e72:	f023 0304 	bic.w	r3, r3, #4
 8010e76:	b29a      	uxth	r2, r3
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	2200      	movs	r2, #0
 8010e8c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	2200      	movs	r2, #0
 8010e94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010e9e:	10db      	asrs	r3, r3, #3
 8010ea0:	b21b      	sxth	r3, r3
 8010ea2:	b29a      	uxth	r2, r3
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010eaa:	b29b      	uxth	r3, r3
 8010eac:	4413      	add	r3, r2
 8010eae:	b29b      	uxth	r3, r3
 8010eb0:	b21a      	sxth	r2, r3
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8010eb8:	4b18      	ldr	r3, [pc, #96]	; (8010f1c <tcp_receive+0x270>)
 8010eba:	681b      	ldr	r3, [r3, #0]
 8010ebc:	b29a      	uxth	r2, r3
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010ec2:	b29b      	uxth	r3, r3
 8010ec4:	1ad3      	subs	r3, r2, r3
 8010ec6:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	2200      	movs	r2, #0
 8010ecc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8010ed0:	4b12      	ldr	r3, [pc, #72]	; (8010f1c <tcp_receive+0x270>)
 8010ed2:	681a      	ldr	r2, [r3, #0]
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	7d1b      	ldrb	r3, [r3, #20]
 8010edc:	2b03      	cmp	r3, #3
 8010ede:	f240 8097 	bls.w	8011010 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8010eee:	429a      	cmp	r2, r3
 8010ef0:	d245      	bcs.n	8010f7e <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	8b5b      	ldrh	r3, [r3, #26]
 8010ef6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010efa:	2b00      	cmp	r3, #0
 8010efc:	d014      	beq.n	8010f28 <tcp_receive+0x27c>
 8010efe:	2301      	movs	r3, #1
 8010f00:	e013      	b.n	8010f2a <tcp_receive+0x27e>
 8010f02:	bf00      	nop
 8010f04:	08019914 	.word	0x08019914
 8010f08:	08019c44 	.word	0x08019c44
 8010f0c:	08019960 	.word	0x08019960
 8010f10:	08019c60 	.word	0x08019c60
 8010f14:	20008bec 	.word	0x20008bec
 8010f18:	20008be0 	.word	0x20008be0
 8010f1c:	20008be4 	.word	0x20008be4
 8010f20:	20008bd0 	.word	0x20008bd0
 8010f24:	20008bea 	.word	0x20008bea
 8010f28:	2302      	movs	r3, #2
 8010f2a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8010f2e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8010f32:	b29a      	uxth	r2, r3
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010f38:	fb12 f303 	smulbb	r3, r2, r3
 8010f3c:	b29b      	uxth	r3, r3
 8010f3e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010f40:	4293      	cmp	r3, r2
 8010f42:	bf28      	it	cs
 8010f44:	4613      	movcs	r3, r2
 8010f46:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010f4e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010f50:	4413      	add	r3, r2
 8010f52:	b29a      	uxth	r2, r3
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010f5a:	429a      	cmp	r2, r3
 8010f5c:	d309      	bcc.n	8010f72 <tcp_receive+0x2c6>
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010f64:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010f66:	4413      	add	r3, r2
 8010f68:	b29a      	uxth	r2, r3
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010f70:	e04e      	b.n	8011010 <tcp_receive+0x364>
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010f78:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010f7c:	e048      	b.n	8011010 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010f84:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010f86:	4413      	add	r3, r2
 8010f88:	b29a      	uxth	r2, r3
 8010f8a:	687b      	ldr	r3, [r7, #4]
 8010f8c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010f90:	429a      	cmp	r2, r3
 8010f92:	d309      	bcc.n	8010fa8 <tcp_receive+0x2fc>
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010f9a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010f9c:	4413      	add	r3, r2
 8010f9e:	b29a      	uxth	r2, r3
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8010fa6:	e004      	b.n	8010fb2 <tcp_receive+0x306>
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010fae:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010fbe:	429a      	cmp	r2, r3
 8010fc0:	d326      	bcc.n	8011010 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010fce:	1ad3      	subs	r3, r2, r3
 8010fd0:	b29a      	uxth	r2, r3
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010fe2:	4413      	add	r3, r2
 8010fe4:	b29a      	uxth	r2, r3
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010fec:	429a      	cmp	r2, r3
 8010fee:	d30a      	bcc.n	8011006 <tcp_receive+0x35a>
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010ffa:	4413      	add	r3, r2
 8010ffc:	b29a      	uxth	r2, r3
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8011004:	e004      	b.n	8011010 <tcp_receive+0x364>
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801100c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011018:	4a98      	ldr	r2, [pc, #608]	; (801127c <tcp_receive+0x5d0>)
 801101a:	6878      	ldr	r0, [r7, #4]
 801101c:	f7ff fdca 	bl	8010bb4 <tcp_free_acked_segments>
 8011020:	4602      	mov	r2, r0
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801102e:	4a94      	ldr	r2, [pc, #592]	; (8011280 <tcp_receive+0x5d4>)
 8011030:	6878      	ldr	r0, [r7, #4]
 8011032:	f7ff fdbf 	bl	8010bb4 <tcp_free_acked_segments>
 8011036:	4602      	mov	r2, r0
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011040:	2b00      	cmp	r3, #0
 8011042:	d104      	bne.n	801104e <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801104a:	861a      	strh	r2, [r3, #48]	; 0x30
 801104c:	e002      	b.n	8011054 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	2200      	movs	r2, #0
 8011052:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	2200      	movs	r2, #0
 8011058:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801105e:	2b00      	cmp	r3, #0
 8011060:	d103      	bne.n	801106a <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	2200      	movs	r2, #0
 8011066:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8011070:	4b84      	ldr	r3, [pc, #528]	; (8011284 <tcp_receive+0x5d8>)
 8011072:	881b      	ldrh	r3, [r3, #0]
 8011074:	4413      	add	r3, r2
 8011076:	b29a      	uxth	r2, r3
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	8b5b      	ldrh	r3, [r3, #26]
 8011082:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011086:	2b00      	cmp	r3, #0
 8011088:	d035      	beq.n	80110f6 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801108e:	2b00      	cmp	r3, #0
 8011090:	d118      	bne.n	80110c4 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011096:	2b00      	cmp	r3, #0
 8011098:	d00c      	beq.n	80110b4 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80110a2:	68db      	ldr	r3, [r3, #12]
 80110a4:	685b      	ldr	r3, [r3, #4]
 80110a6:	4618      	mov	r0, r3
 80110a8:	f7fa fd85 	bl	800bbb6 <lwip_htonl>
 80110ac:	4603      	mov	r3, r0
 80110ae:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80110b0:	2b00      	cmp	r3, #0
 80110b2:	dc20      	bgt.n	80110f6 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	8b5b      	ldrh	r3, [r3, #26]
 80110b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80110bc:	b29a      	uxth	r2, r3
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80110c2:	e018      	b.n	80110f6 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80110cc:	68db      	ldr	r3, [r3, #12]
 80110ce:	685b      	ldr	r3, [r3, #4]
 80110d0:	4618      	mov	r0, r3
 80110d2:	f7fa fd70 	bl	800bbb6 <lwip_htonl>
 80110d6:	4603      	mov	r3, r0
 80110d8:	1ae3      	subs	r3, r4, r3
 80110da:	2b00      	cmp	r3, #0
 80110dc:	dc0b      	bgt.n	80110f6 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	8b5b      	ldrh	r3, [r3, #26]
 80110e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80110e6:	b29a      	uxth	r2, r3
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80110ec:	e003      	b.n	80110f6 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80110ee:	6878      	ldr	r0, [r7, #4]
 80110f0:	f002 fbce 	bl	8013890 <tcp_send_empty_ack>
 80110f4:	e000      	b.n	80110f8 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80110f6:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80110fc:	2b00      	cmp	r3, #0
 80110fe:	d05b      	beq.n	80111b8 <tcp_receive+0x50c>
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011104:	4b60      	ldr	r3, [pc, #384]	; (8011288 <tcp_receive+0x5dc>)
 8011106:	681b      	ldr	r3, [r3, #0]
 8011108:	1ad3      	subs	r3, r2, r3
 801110a:	2b00      	cmp	r3, #0
 801110c:	da54      	bge.n	80111b8 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801110e:	4b5f      	ldr	r3, [pc, #380]	; (801128c <tcp_receive+0x5e0>)
 8011110:	681b      	ldr	r3, [r3, #0]
 8011112:	b29a      	uxth	r2, r3
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011118:	b29b      	uxth	r3, r3
 801111a:	1ad3      	subs	r3, r2, r3
 801111c:	b29b      	uxth	r3, r3
 801111e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8011122:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801112c:	10db      	asrs	r3, r3, #3
 801112e:	b21b      	sxth	r3, r3
 8011130:	b29b      	uxth	r3, r3
 8011132:	1ad3      	subs	r3, r2, r3
 8011134:	b29b      	uxth	r3, r3
 8011136:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011140:	b29a      	uxth	r2, r3
 8011142:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8011146:	4413      	add	r3, r2
 8011148:	b29b      	uxth	r3, r3
 801114a:	b21a      	sxth	r2, r3
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8011150:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8011154:	2b00      	cmp	r3, #0
 8011156:	da05      	bge.n	8011164 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8011158:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801115c:	425b      	negs	r3, r3
 801115e:	b29b      	uxth	r3, r3
 8011160:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8011164:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801116e:	109b      	asrs	r3, r3, #2
 8011170:	b21b      	sxth	r3, r3
 8011172:	b29b      	uxth	r3, r3
 8011174:	1ad3      	subs	r3, r2, r3
 8011176:	b29b      	uxth	r3, r3
 8011178:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011182:	b29a      	uxth	r2, r3
 8011184:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8011188:	4413      	add	r3, r2
 801118a:	b29b      	uxth	r3, r3
 801118c:	b21a      	sxth	r2, r3
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011198:	10db      	asrs	r3, r3, #3
 801119a:	b21b      	sxth	r3, r3
 801119c:	b29a      	uxth	r2, r3
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80111a4:	b29b      	uxth	r3, r3
 80111a6:	4413      	add	r3, r2
 80111a8:	b29b      	uxth	r3, r3
 80111aa:	b21a      	sxth	r2, r3
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	2200      	movs	r2, #0
 80111b6:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80111b8:	4b35      	ldr	r3, [pc, #212]	; (8011290 <tcp_receive+0x5e4>)
 80111ba:	881b      	ldrh	r3, [r3, #0]
 80111bc:	2b00      	cmp	r3, #0
 80111be:	f000 84e2 	beq.w	8011b86 <tcp_receive+0xeda>
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	7d1b      	ldrb	r3, [r3, #20]
 80111c6:	2b06      	cmp	r3, #6
 80111c8:	f200 84dd 	bhi.w	8011b86 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80111d0:	4b30      	ldr	r3, [pc, #192]	; (8011294 <tcp_receive+0x5e8>)
 80111d2:	681b      	ldr	r3, [r3, #0]
 80111d4:	1ad3      	subs	r3, r2, r3
 80111d6:	3b01      	subs	r3, #1
 80111d8:	2b00      	cmp	r3, #0
 80111da:	f2c0 808f 	blt.w	80112fc <tcp_receive+0x650>
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80111e2:	4b2b      	ldr	r3, [pc, #172]	; (8011290 <tcp_receive+0x5e4>)
 80111e4:	881b      	ldrh	r3, [r3, #0]
 80111e6:	4619      	mov	r1, r3
 80111e8:	4b2a      	ldr	r3, [pc, #168]	; (8011294 <tcp_receive+0x5e8>)
 80111ea:	681b      	ldr	r3, [r3, #0]
 80111ec:	440b      	add	r3, r1
 80111ee:	1ad3      	subs	r3, r2, r3
 80111f0:	3301      	adds	r3, #1
 80111f2:	2b00      	cmp	r3, #0
 80111f4:	f300 8082 	bgt.w	80112fc <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80111f8:	4b27      	ldr	r3, [pc, #156]	; (8011298 <tcp_receive+0x5ec>)
 80111fa:	685b      	ldr	r3, [r3, #4]
 80111fc:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011202:	4b24      	ldr	r3, [pc, #144]	; (8011294 <tcp_receive+0x5e8>)
 8011204:	681b      	ldr	r3, [r3, #0]
 8011206:	1ad3      	subs	r3, r2, r3
 8011208:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801120a:	4b23      	ldr	r3, [pc, #140]	; (8011298 <tcp_receive+0x5ec>)
 801120c:	685b      	ldr	r3, [r3, #4]
 801120e:	2b00      	cmp	r3, #0
 8011210:	d106      	bne.n	8011220 <tcp_receive+0x574>
 8011212:	4b22      	ldr	r3, [pc, #136]	; (801129c <tcp_receive+0x5f0>)
 8011214:	f240 5294 	movw	r2, #1428	; 0x594
 8011218:	4921      	ldr	r1, [pc, #132]	; (80112a0 <tcp_receive+0x5f4>)
 801121a:	4822      	ldr	r0, [pc, #136]	; (80112a4 <tcp_receive+0x5f8>)
 801121c:	f005 fb10 	bl	8016840 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8011220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011222:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8011226:	4293      	cmp	r3, r2
 8011228:	d906      	bls.n	8011238 <tcp_receive+0x58c>
 801122a:	4b1c      	ldr	r3, [pc, #112]	; (801129c <tcp_receive+0x5f0>)
 801122c:	f240 5295 	movw	r2, #1429	; 0x595
 8011230:	491d      	ldr	r1, [pc, #116]	; (80112a8 <tcp_receive+0x5fc>)
 8011232:	481c      	ldr	r0, [pc, #112]	; (80112a4 <tcp_receive+0x5f8>)
 8011234:	f005 fb04 	bl	8016840 <iprintf>
      off = (u16_t)off32;
 8011238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801123a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801123e:	4b16      	ldr	r3, [pc, #88]	; (8011298 <tcp_receive+0x5ec>)
 8011240:	685b      	ldr	r3, [r3, #4]
 8011242:	891b      	ldrh	r3, [r3, #8]
 8011244:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011248:	429a      	cmp	r2, r3
 801124a:	d906      	bls.n	801125a <tcp_receive+0x5ae>
 801124c:	4b13      	ldr	r3, [pc, #76]	; (801129c <tcp_receive+0x5f0>)
 801124e:	f240 5297 	movw	r2, #1431	; 0x597
 8011252:	4916      	ldr	r1, [pc, #88]	; (80112ac <tcp_receive+0x600>)
 8011254:	4813      	ldr	r0, [pc, #76]	; (80112a4 <tcp_receive+0x5f8>)
 8011256:	f005 faf3 	bl	8016840 <iprintf>
      inseg.len -= off;
 801125a:	4b0f      	ldr	r3, [pc, #60]	; (8011298 <tcp_receive+0x5ec>)
 801125c:	891a      	ldrh	r2, [r3, #8]
 801125e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011262:	1ad3      	subs	r3, r2, r3
 8011264:	b29a      	uxth	r2, r3
 8011266:	4b0c      	ldr	r3, [pc, #48]	; (8011298 <tcp_receive+0x5ec>)
 8011268:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801126a:	4b0b      	ldr	r3, [pc, #44]	; (8011298 <tcp_receive+0x5ec>)
 801126c:	685b      	ldr	r3, [r3, #4]
 801126e:	891a      	ldrh	r2, [r3, #8]
 8011270:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011274:	1ad3      	subs	r3, r2, r3
 8011276:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8011278:	e02a      	b.n	80112d0 <tcp_receive+0x624>
 801127a:	bf00      	nop
 801127c:	08019c7c 	.word	0x08019c7c
 8011280:	08019c84 	.word	0x08019c84
 8011284:	20008be8 	.word	0x20008be8
 8011288:	20008be4 	.word	0x20008be4
 801128c:	20008ba8 	.word	0x20008ba8
 8011290:	20008bea 	.word	0x20008bea
 8011294:	20008be0 	.word	0x20008be0
 8011298:	20008bc0 	.word	0x20008bc0
 801129c:	08019914 	.word	0x08019914
 80112a0:	08019c8c 	.word	0x08019c8c
 80112a4:	08019960 	.word	0x08019960
 80112a8:	08019c9c 	.word	0x08019c9c
 80112ac:	08019cac 	.word	0x08019cac
        off -= p->len;
 80112b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80112b2:	895b      	ldrh	r3, [r3, #10]
 80112b4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80112b8:	1ad3      	subs	r3, r2, r3
 80112ba:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80112be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80112c0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80112c2:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80112c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80112c6:	2200      	movs	r2, #0
 80112c8:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80112ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80112cc:	681b      	ldr	r3, [r3, #0]
 80112ce:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 80112d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80112d2:	895b      	ldrh	r3, [r3, #10]
 80112d4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80112d8:	429a      	cmp	r2, r3
 80112da:	d8e9      	bhi.n	80112b0 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 80112dc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80112e0:	4619      	mov	r1, r3
 80112e2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80112e4:	f7fb ff52 	bl	800d18c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80112ec:	4a91      	ldr	r2, [pc, #580]	; (8011534 <tcp_receive+0x888>)
 80112ee:	6013      	str	r3, [r2, #0]
 80112f0:	4b91      	ldr	r3, [pc, #580]	; (8011538 <tcp_receive+0x88c>)
 80112f2:	68db      	ldr	r3, [r3, #12]
 80112f4:	4a8f      	ldr	r2, [pc, #572]	; (8011534 <tcp_receive+0x888>)
 80112f6:	6812      	ldr	r2, [r2, #0]
 80112f8:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80112fa:	e00d      	b.n	8011318 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80112fc:	4b8d      	ldr	r3, [pc, #564]	; (8011534 <tcp_receive+0x888>)
 80112fe:	681a      	ldr	r2, [r3, #0]
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011304:	1ad3      	subs	r3, r2, r3
 8011306:	2b00      	cmp	r3, #0
 8011308:	da06      	bge.n	8011318 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	8b5b      	ldrh	r3, [r3, #26]
 801130e:	f043 0302 	orr.w	r3, r3, #2
 8011312:	b29a      	uxth	r2, r3
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011318:	4b86      	ldr	r3, [pc, #536]	; (8011534 <tcp_receive+0x888>)
 801131a:	681a      	ldr	r2, [r3, #0]
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011320:	1ad3      	subs	r3, r2, r3
 8011322:	2b00      	cmp	r3, #0
 8011324:	f2c0 842a 	blt.w	8011b7c <tcp_receive+0xed0>
 8011328:	4b82      	ldr	r3, [pc, #520]	; (8011534 <tcp_receive+0x888>)
 801132a:	681a      	ldr	r2, [r3, #0]
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011330:	6879      	ldr	r1, [r7, #4]
 8011332:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011334:	440b      	add	r3, r1
 8011336:	1ad3      	subs	r3, r2, r3
 8011338:	3301      	adds	r3, #1
 801133a:	2b00      	cmp	r3, #0
 801133c:	f300 841e 	bgt.w	8011b7c <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011344:	4b7b      	ldr	r3, [pc, #492]	; (8011534 <tcp_receive+0x888>)
 8011346:	681b      	ldr	r3, [r3, #0]
 8011348:	429a      	cmp	r2, r3
 801134a:	f040 829a 	bne.w	8011882 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 801134e:	4b7a      	ldr	r3, [pc, #488]	; (8011538 <tcp_receive+0x88c>)
 8011350:	891c      	ldrh	r4, [r3, #8]
 8011352:	4b79      	ldr	r3, [pc, #484]	; (8011538 <tcp_receive+0x88c>)
 8011354:	68db      	ldr	r3, [r3, #12]
 8011356:	899b      	ldrh	r3, [r3, #12]
 8011358:	b29b      	uxth	r3, r3
 801135a:	4618      	mov	r0, r3
 801135c:	f7fa fc16 	bl	800bb8c <lwip_htons>
 8011360:	4603      	mov	r3, r0
 8011362:	b2db      	uxtb	r3, r3
 8011364:	f003 0303 	and.w	r3, r3, #3
 8011368:	2b00      	cmp	r3, #0
 801136a:	d001      	beq.n	8011370 <tcp_receive+0x6c4>
 801136c:	2301      	movs	r3, #1
 801136e:	e000      	b.n	8011372 <tcp_receive+0x6c6>
 8011370:	2300      	movs	r3, #0
 8011372:	4423      	add	r3, r4
 8011374:	b29a      	uxth	r2, r3
 8011376:	4b71      	ldr	r3, [pc, #452]	; (801153c <tcp_receive+0x890>)
 8011378:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 801137a:	687b      	ldr	r3, [r7, #4]
 801137c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801137e:	4b6f      	ldr	r3, [pc, #444]	; (801153c <tcp_receive+0x890>)
 8011380:	881b      	ldrh	r3, [r3, #0]
 8011382:	429a      	cmp	r2, r3
 8011384:	d275      	bcs.n	8011472 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011386:	4b6c      	ldr	r3, [pc, #432]	; (8011538 <tcp_receive+0x88c>)
 8011388:	68db      	ldr	r3, [r3, #12]
 801138a:	899b      	ldrh	r3, [r3, #12]
 801138c:	b29b      	uxth	r3, r3
 801138e:	4618      	mov	r0, r3
 8011390:	f7fa fbfc 	bl	800bb8c <lwip_htons>
 8011394:	4603      	mov	r3, r0
 8011396:	b2db      	uxtb	r3, r3
 8011398:	f003 0301 	and.w	r3, r3, #1
 801139c:	2b00      	cmp	r3, #0
 801139e:	d01f      	beq.n	80113e0 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80113a0:	4b65      	ldr	r3, [pc, #404]	; (8011538 <tcp_receive+0x88c>)
 80113a2:	68db      	ldr	r3, [r3, #12]
 80113a4:	899b      	ldrh	r3, [r3, #12]
 80113a6:	b29b      	uxth	r3, r3
 80113a8:	b21b      	sxth	r3, r3
 80113aa:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80113ae:	b21c      	sxth	r4, r3
 80113b0:	4b61      	ldr	r3, [pc, #388]	; (8011538 <tcp_receive+0x88c>)
 80113b2:	68db      	ldr	r3, [r3, #12]
 80113b4:	899b      	ldrh	r3, [r3, #12]
 80113b6:	b29b      	uxth	r3, r3
 80113b8:	4618      	mov	r0, r3
 80113ba:	f7fa fbe7 	bl	800bb8c <lwip_htons>
 80113be:	4603      	mov	r3, r0
 80113c0:	b2db      	uxtb	r3, r3
 80113c2:	b29b      	uxth	r3, r3
 80113c4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80113c8:	b29b      	uxth	r3, r3
 80113ca:	4618      	mov	r0, r3
 80113cc:	f7fa fbde 	bl	800bb8c <lwip_htons>
 80113d0:	4603      	mov	r3, r0
 80113d2:	b21b      	sxth	r3, r3
 80113d4:	4323      	orrs	r3, r4
 80113d6:	b21a      	sxth	r2, r3
 80113d8:	4b57      	ldr	r3, [pc, #348]	; (8011538 <tcp_receive+0x88c>)
 80113da:	68db      	ldr	r3, [r3, #12]
 80113dc:	b292      	uxth	r2, r2
 80113de:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80113e4:	4b54      	ldr	r3, [pc, #336]	; (8011538 <tcp_receive+0x88c>)
 80113e6:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80113e8:	4b53      	ldr	r3, [pc, #332]	; (8011538 <tcp_receive+0x88c>)
 80113ea:	68db      	ldr	r3, [r3, #12]
 80113ec:	899b      	ldrh	r3, [r3, #12]
 80113ee:	b29b      	uxth	r3, r3
 80113f0:	4618      	mov	r0, r3
 80113f2:	f7fa fbcb 	bl	800bb8c <lwip_htons>
 80113f6:	4603      	mov	r3, r0
 80113f8:	b2db      	uxtb	r3, r3
 80113fa:	f003 0302 	and.w	r3, r3, #2
 80113fe:	2b00      	cmp	r3, #0
 8011400:	d005      	beq.n	801140e <tcp_receive+0x762>
            inseg.len -= 1;
 8011402:	4b4d      	ldr	r3, [pc, #308]	; (8011538 <tcp_receive+0x88c>)
 8011404:	891b      	ldrh	r3, [r3, #8]
 8011406:	3b01      	subs	r3, #1
 8011408:	b29a      	uxth	r2, r3
 801140a:	4b4b      	ldr	r3, [pc, #300]	; (8011538 <tcp_receive+0x88c>)
 801140c:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 801140e:	4b4a      	ldr	r3, [pc, #296]	; (8011538 <tcp_receive+0x88c>)
 8011410:	685b      	ldr	r3, [r3, #4]
 8011412:	4a49      	ldr	r2, [pc, #292]	; (8011538 <tcp_receive+0x88c>)
 8011414:	8912      	ldrh	r2, [r2, #8]
 8011416:	4611      	mov	r1, r2
 8011418:	4618      	mov	r0, r3
 801141a:	f7fb fdb7 	bl	800cf8c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 801141e:	4b46      	ldr	r3, [pc, #280]	; (8011538 <tcp_receive+0x88c>)
 8011420:	891c      	ldrh	r4, [r3, #8]
 8011422:	4b45      	ldr	r3, [pc, #276]	; (8011538 <tcp_receive+0x88c>)
 8011424:	68db      	ldr	r3, [r3, #12]
 8011426:	899b      	ldrh	r3, [r3, #12]
 8011428:	b29b      	uxth	r3, r3
 801142a:	4618      	mov	r0, r3
 801142c:	f7fa fbae 	bl	800bb8c <lwip_htons>
 8011430:	4603      	mov	r3, r0
 8011432:	b2db      	uxtb	r3, r3
 8011434:	f003 0303 	and.w	r3, r3, #3
 8011438:	2b00      	cmp	r3, #0
 801143a:	d001      	beq.n	8011440 <tcp_receive+0x794>
 801143c:	2301      	movs	r3, #1
 801143e:	e000      	b.n	8011442 <tcp_receive+0x796>
 8011440:	2300      	movs	r3, #0
 8011442:	4423      	add	r3, r4
 8011444:	b29a      	uxth	r2, r3
 8011446:	4b3d      	ldr	r3, [pc, #244]	; (801153c <tcp_receive+0x890>)
 8011448:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801144a:	4b3c      	ldr	r3, [pc, #240]	; (801153c <tcp_receive+0x890>)
 801144c:	881b      	ldrh	r3, [r3, #0]
 801144e:	461a      	mov	r2, r3
 8011450:	4b38      	ldr	r3, [pc, #224]	; (8011534 <tcp_receive+0x888>)
 8011452:	681b      	ldr	r3, [r3, #0]
 8011454:	441a      	add	r2, r3
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801145a:	6879      	ldr	r1, [r7, #4]
 801145c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801145e:	440b      	add	r3, r1
 8011460:	429a      	cmp	r2, r3
 8011462:	d006      	beq.n	8011472 <tcp_receive+0x7c6>
 8011464:	4b36      	ldr	r3, [pc, #216]	; (8011540 <tcp_receive+0x894>)
 8011466:	f240 52cb 	movw	r2, #1483	; 0x5cb
 801146a:	4936      	ldr	r1, [pc, #216]	; (8011544 <tcp_receive+0x898>)
 801146c:	4836      	ldr	r0, [pc, #216]	; (8011548 <tcp_receive+0x89c>)
 801146e:	f005 f9e7 	bl	8016840 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011476:	2b00      	cmp	r3, #0
 8011478:	f000 80e7 	beq.w	801164a <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801147c:	4b2e      	ldr	r3, [pc, #184]	; (8011538 <tcp_receive+0x88c>)
 801147e:	68db      	ldr	r3, [r3, #12]
 8011480:	899b      	ldrh	r3, [r3, #12]
 8011482:	b29b      	uxth	r3, r3
 8011484:	4618      	mov	r0, r3
 8011486:	f7fa fb81 	bl	800bb8c <lwip_htons>
 801148a:	4603      	mov	r3, r0
 801148c:	b2db      	uxtb	r3, r3
 801148e:	f003 0301 	and.w	r3, r3, #1
 8011492:	2b00      	cmp	r3, #0
 8011494:	d010      	beq.n	80114b8 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8011496:	e00a      	b.n	80114ae <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801149c:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80114a2:	681a      	ldr	r2, [r3, #0]
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 80114a8:	68f8      	ldr	r0, [r7, #12]
 80114aa:	f7fd fc9e 	bl	800edea <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80114b2:	2b00      	cmp	r3, #0
 80114b4:	d1f0      	bne.n	8011498 <tcp_receive+0x7ec>
 80114b6:	e0c8      	b.n	801164a <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80114bc:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80114be:	e052      	b.n	8011566 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80114c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80114c2:	68db      	ldr	r3, [r3, #12]
 80114c4:	899b      	ldrh	r3, [r3, #12]
 80114c6:	b29b      	uxth	r3, r3
 80114c8:	4618      	mov	r0, r3
 80114ca:	f7fa fb5f 	bl	800bb8c <lwip_htons>
 80114ce:	4603      	mov	r3, r0
 80114d0:	b2db      	uxtb	r3, r3
 80114d2:	f003 0301 	and.w	r3, r3, #1
 80114d6:	2b00      	cmp	r3, #0
 80114d8:	d03d      	beq.n	8011556 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80114da:	4b17      	ldr	r3, [pc, #92]	; (8011538 <tcp_receive+0x88c>)
 80114dc:	68db      	ldr	r3, [r3, #12]
 80114de:	899b      	ldrh	r3, [r3, #12]
 80114e0:	b29b      	uxth	r3, r3
 80114e2:	4618      	mov	r0, r3
 80114e4:	f7fa fb52 	bl	800bb8c <lwip_htons>
 80114e8:	4603      	mov	r3, r0
 80114ea:	b2db      	uxtb	r3, r3
 80114ec:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80114f0:	2b00      	cmp	r3, #0
 80114f2:	d130      	bne.n	8011556 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80114f4:	4b10      	ldr	r3, [pc, #64]	; (8011538 <tcp_receive+0x88c>)
 80114f6:	68db      	ldr	r3, [r3, #12]
 80114f8:	899b      	ldrh	r3, [r3, #12]
 80114fa:	b29c      	uxth	r4, r3
 80114fc:	2001      	movs	r0, #1
 80114fe:	f7fa fb45 	bl	800bb8c <lwip_htons>
 8011502:	4603      	mov	r3, r0
 8011504:	461a      	mov	r2, r3
 8011506:	4b0c      	ldr	r3, [pc, #48]	; (8011538 <tcp_receive+0x88c>)
 8011508:	68db      	ldr	r3, [r3, #12]
 801150a:	4322      	orrs	r2, r4
 801150c:	b292      	uxth	r2, r2
 801150e:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8011510:	4b09      	ldr	r3, [pc, #36]	; (8011538 <tcp_receive+0x88c>)
 8011512:	891c      	ldrh	r4, [r3, #8]
 8011514:	4b08      	ldr	r3, [pc, #32]	; (8011538 <tcp_receive+0x88c>)
 8011516:	68db      	ldr	r3, [r3, #12]
 8011518:	899b      	ldrh	r3, [r3, #12]
 801151a:	b29b      	uxth	r3, r3
 801151c:	4618      	mov	r0, r3
 801151e:	f7fa fb35 	bl	800bb8c <lwip_htons>
 8011522:	4603      	mov	r3, r0
 8011524:	b2db      	uxtb	r3, r3
 8011526:	f003 0303 	and.w	r3, r3, #3
 801152a:	2b00      	cmp	r3, #0
 801152c:	d00e      	beq.n	801154c <tcp_receive+0x8a0>
 801152e:	2301      	movs	r3, #1
 8011530:	e00d      	b.n	801154e <tcp_receive+0x8a2>
 8011532:	bf00      	nop
 8011534:	20008be0 	.word	0x20008be0
 8011538:	20008bc0 	.word	0x20008bc0
 801153c:	20008bea 	.word	0x20008bea
 8011540:	08019914 	.word	0x08019914
 8011544:	08019cbc 	.word	0x08019cbc
 8011548:	08019960 	.word	0x08019960
 801154c:	2300      	movs	r3, #0
 801154e:	4423      	add	r3, r4
 8011550:	b29a      	uxth	r2, r3
 8011552:	4b98      	ldr	r3, [pc, #608]	; (80117b4 <tcp_receive+0xb08>)
 8011554:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8011556:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011558:	613b      	str	r3, [r7, #16]
              next = next->next;
 801155a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801155c:	681b      	ldr	r3, [r3, #0]
 801155e:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8011560:	6938      	ldr	r0, [r7, #16]
 8011562:	f7fd fc42 	bl	800edea <tcp_seg_free>
            while (next &&
 8011566:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011568:	2b00      	cmp	r3, #0
 801156a:	d00e      	beq.n	801158a <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 801156c:	4b91      	ldr	r3, [pc, #580]	; (80117b4 <tcp_receive+0xb08>)
 801156e:	881b      	ldrh	r3, [r3, #0]
 8011570:	461a      	mov	r2, r3
 8011572:	4b91      	ldr	r3, [pc, #580]	; (80117b8 <tcp_receive+0xb0c>)
 8011574:	681b      	ldr	r3, [r3, #0]
 8011576:	441a      	add	r2, r3
 8011578:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801157a:	68db      	ldr	r3, [r3, #12]
 801157c:	685b      	ldr	r3, [r3, #4]
 801157e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011580:	8909      	ldrh	r1, [r1, #8]
 8011582:	440b      	add	r3, r1
 8011584:	1ad3      	subs	r3, r2, r3
            while (next &&
 8011586:	2b00      	cmp	r3, #0
 8011588:	da9a      	bge.n	80114c0 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801158a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801158c:	2b00      	cmp	r3, #0
 801158e:	d059      	beq.n	8011644 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 8011590:	4b88      	ldr	r3, [pc, #544]	; (80117b4 <tcp_receive+0xb08>)
 8011592:	881b      	ldrh	r3, [r3, #0]
 8011594:	461a      	mov	r2, r3
 8011596:	4b88      	ldr	r3, [pc, #544]	; (80117b8 <tcp_receive+0xb0c>)
 8011598:	681b      	ldr	r3, [r3, #0]
 801159a:	441a      	add	r2, r3
 801159c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801159e:	68db      	ldr	r3, [r3, #12]
 80115a0:	685b      	ldr	r3, [r3, #4]
 80115a2:	1ad3      	subs	r3, r2, r3
            if (next &&
 80115a4:	2b00      	cmp	r3, #0
 80115a6:	dd4d      	ble.n	8011644 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80115a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80115aa:	68db      	ldr	r3, [r3, #12]
 80115ac:	685b      	ldr	r3, [r3, #4]
 80115ae:	b29a      	uxth	r2, r3
 80115b0:	4b81      	ldr	r3, [pc, #516]	; (80117b8 <tcp_receive+0xb0c>)
 80115b2:	681b      	ldr	r3, [r3, #0]
 80115b4:	b29b      	uxth	r3, r3
 80115b6:	1ad3      	subs	r3, r2, r3
 80115b8:	b29a      	uxth	r2, r3
 80115ba:	4b80      	ldr	r3, [pc, #512]	; (80117bc <tcp_receive+0xb10>)
 80115bc:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80115be:	4b7f      	ldr	r3, [pc, #508]	; (80117bc <tcp_receive+0xb10>)
 80115c0:	68db      	ldr	r3, [r3, #12]
 80115c2:	899b      	ldrh	r3, [r3, #12]
 80115c4:	b29b      	uxth	r3, r3
 80115c6:	4618      	mov	r0, r3
 80115c8:	f7fa fae0 	bl	800bb8c <lwip_htons>
 80115cc:	4603      	mov	r3, r0
 80115ce:	b2db      	uxtb	r3, r3
 80115d0:	f003 0302 	and.w	r3, r3, #2
 80115d4:	2b00      	cmp	r3, #0
 80115d6:	d005      	beq.n	80115e4 <tcp_receive+0x938>
                inseg.len -= 1;
 80115d8:	4b78      	ldr	r3, [pc, #480]	; (80117bc <tcp_receive+0xb10>)
 80115da:	891b      	ldrh	r3, [r3, #8]
 80115dc:	3b01      	subs	r3, #1
 80115de:	b29a      	uxth	r2, r3
 80115e0:	4b76      	ldr	r3, [pc, #472]	; (80117bc <tcp_receive+0xb10>)
 80115e2:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80115e4:	4b75      	ldr	r3, [pc, #468]	; (80117bc <tcp_receive+0xb10>)
 80115e6:	685b      	ldr	r3, [r3, #4]
 80115e8:	4a74      	ldr	r2, [pc, #464]	; (80117bc <tcp_receive+0xb10>)
 80115ea:	8912      	ldrh	r2, [r2, #8]
 80115ec:	4611      	mov	r1, r2
 80115ee:	4618      	mov	r0, r3
 80115f0:	f7fb fccc 	bl	800cf8c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80115f4:	4b71      	ldr	r3, [pc, #452]	; (80117bc <tcp_receive+0xb10>)
 80115f6:	891c      	ldrh	r4, [r3, #8]
 80115f8:	4b70      	ldr	r3, [pc, #448]	; (80117bc <tcp_receive+0xb10>)
 80115fa:	68db      	ldr	r3, [r3, #12]
 80115fc:	899b      	ldrh	r3, [r3, #12]
 80115fe:	b29b      	uxth	r3, r3
 8011600:	4618      	mov	r0, r3
 8011602:	f7fa fac3 	bl	800bb8c <lwip_htons>
 8011606:	4603      	mov	r3, r0
 8011608:	b2db      	uxtb	r3, r3
 801160a:	f003 0303 	and.w	r3, r3, #3
 801160e:	2b00      	cmp	r3, #0
 8011610:	d001      	beq.n	8011616 <tcp_receive+0x96a>
 8011612:	2301      	movs	r3, #1
 8011614:	e000      	b.n	8011618 <tcp_receive+0x96c>
 8011616:	2300      	movs	r3, #0
 8011618:	4423      	add	r3, r4
 801161a:	b29a      	uxth	r2, r3
 801161c:	4b65      	ldr	r3, [pc, #404]	; (80117b4 <tcp_receive+0xb08>)
 801161e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8011620:	4b64      	ldr	r3, [pc, #400]	; (80117b4 <tcp_receive+0xb08>)
 8011622:	881b      	ldrh	r3, [r3, #0]
 8011624:	461a      	mov	r2, r3
 8011626:	4b64      	ldr	r3, [pc, #400]	; (80117b8 <tcp_receive+0xb0c>)
 8011628:	681b      	ldr	r3, [r3, #0]
 801162a:	441a      	add	r2, r3
 801162c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801162e:	68db      	ldr	r3, [r3, #12]
 8011630:	685b      	ldr	r3, [r3, #4]
 8011632:	429a      	cmp	r2, r3
 8011634:	d006      	beq.n	8011644 <tcp_receive+0x998>
 8011636:	4b62      	ldr	r3, [pc, #392]	; (80117c0 <tcp_receive+0xb14>)
 8011638:	f240 52fc 	movw	r2, #1532	; 0x5fc
 801163c:	4961      	ldr	r1, [pc, #388]	; (80117c4 <tcp_receive+0xb18>)
 801163e:	4862      	ldr	r0, [pc, #392]	; (80117c8 <tcp_receive+0xb1c>)
 8011640:	f005 f8fe 	bl	8016840 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011648:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801164a:	4b5a      	ldr	r3, [pc, #360]	; (80117b4 <tcp_receive+0xb08>)
 801164c:	881b      	ldrh	r3, [r3, #0]
 801164e:	461a      	mov	r2, r3
 8011650:	4b59      	ldr	r3, [pc, #356]	; (80117b8 <tcp_receive+0xb0c>)
 8011652:	681b      	ldr	r3, [r3, #0]
 8011654:	441a      	add	r2, r3
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801165e:	4b55      	ldr	r3, [pc, #340]	; (80117b4 <tcp_receive+0xb08>)
 8011660:	881b      	ldrh	r3, [r3, #0]
 8011662:	429a      	cmp	r2, r3
 8011664:	d206      	bcs.n	8011674 <tcp_receive+0x9c8>
 8011666:	4b56      	ldr	r3, [pc, #344]	; (80117c0 <tcp_receive+0xb14>)
 8011668:	f240 6207 	movw	r2, #1543	; 0x607
 801166c:	4957      	ldr	r1, [pc, #348]	; (80117cc <tcp_receive+0xb20>)
 801166e:	4856      	ldr	r0, [pc, #344]	; (80117c8 <tcp_receive+0xb1c>)
 8011670:	f005 f8e6 	bl	8016840 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011678:	4b4e      	ldr	r3, [pc, #312]	; (80117b4 <tcp_receive+0xb08>)
 801167a:	881b      	ldrh	r3, [r3, #0]
 801167c:	1ad3      	subs	r3, r2, r3
 801167e:	b29a      	uxth	r2, r3
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8011684:	6878      	ldr	r0, [r7, #4]
 8011686:	f7fc fd73 	bl	800e170 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801168a:	4b4c      	ldr	r3, [pc, #304]	; (80117bc <tcp_receive+0xb10>)
 801168c:	685b      	ldr	r3, [r3, #4]
 801168e:	891b      	ldrh	r3, [r3, #8]
 8011690:	2b00      	cmp	r3, #0
 8011692:	d006      	beq.n	80116a2 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 8011694:	4b49      	ldr	r3, [pc, #292]	; (80117bc <tcp_receive+0xb10>)
 8011696:	685b      	ldr	r3, [r3, #4]
 8011698:	4a4d      	ldr	r2, [pc, #308]	; (80117d0 <tcp_receive+0xb24>)
 801169a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 801169c:	4b47      	ldr	r3, [pc, #284]	; (80117bc <tcp_receive+0xb10>)
 801169e:	2200      	movs	r2, #0
 80116a0:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80116a2:	4b46      	ldr	r3, [pc, #280]	; (80117bc <tcp_receive+0xb10>)
 80116a4:	68db      	ldr	r3, [r3, #12]
 80116a6:	899b      	ldrh	r3, [r3, #12]
 80116a8:	b29b      	uxth	r3, r3
 80116aa:	4618      	mov	r0, r3
 80116ac:	f7fa fa6e 	bl	800bb8c <lwip_htons>
 80116b0:	4603      	mov	r3, r0
 80116b2:	b2db      	uxtb	r3, r3
 80116b4:	f003 0301 	and.w	r3, r3, #1
 80116b8:	2b00      	cmp	r3, #0
 80116ba:	f000 80b8 	beq.w	801182e <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80116be:	4b45      	ldr	r3, [pc, #276]	; (80117d4 <tcp_receive+0xb28>)
 80116c0:	781b      	ldrb	r3, [r3, #0]
 80116c2:	f043 0320 	orr.w	r3, r3, #32
 80116c6:	b2da      	uxtb	r2, r3
 80116c8:	4b42      	ldr	r3, [pc, #264]	; (80117d4 <tcp_receive+0xb28>)
 80116ca:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80116cc:	e0af      	b.n	801182e <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80116d2:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80116d8:	68db      	ldr	r3, [r3, #12]
 80116da:	685b      	ldr	r3, [r3, #4]
 80116dc:	4a36      	ldr	r2, [pc, #216]	; (80117b8 <tcp_receive+0xb0c>)
 80116de:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80116e0:	68bb      	ldr	r3, [r7, #8]
 80116e2:	891b      	ldrh	r3, [r3, #8]
 80116e4:	461c      	mov	r4, r3
 80116e6:	68bb      	ldr	r3, [r7, #8]
 80116e8:	68db      	ldr	r3, [r3, #12]
 80116ea:	899b      	ldrh	r3, [r3, #12]
 80116ec:	b29b      	uxth	r3, r3
 80116ee:	4618      	mov	r0, r3
 80116f0:	f7fa fa4c 	bl	800bb8c <lwip_htons>
 80116f4:	4603      	mov	r3, r0
 80116f6:	b2db      	uxtb	r3, r3
 80116f8:	f003 0303 	and.w	r3, r3, #3
 80116fc:	2b00      	cmp	r3, #0
 80116fe:	d001      	beq.n	8011704 <tcp_receive+0xa58>
 8011700:	2301      	movs	r3, #1
 8011702:	e000      	b.n	8011706 <tcp_receive+0xa5a>
 8011704:	2300      	movs	r3, #0
 8011706:	191a      	adds	r2, r3, r4
 8011708:	687b      	ldr	r3, [r7, #4]
 801170a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801170c:	441a      	add	r2, r3
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011716:	461c      	mov	r4, r3
 8011718:	68bb      	ldr	r3, [r7, #8]
 801171a:	891b      	ldrh	r3, [r3, #8]
 801171c:	461d      	mov	r5, r3
 801171e:	68bb      	ldr	r3, [r7, #8]
 8011720:	68db      	ldr	r3, [r3, #12]
 8011722:	899b      	ldrh	r3, [r3, #12]
 8011724:	b29b      	uxth	r3, r3
 8011726:	4618      	mov	r0, r3
 8011728:	f7fa fa30 	bl	800bb8c <lwip_htons>
 801172c:	4603      	mov	r3, r0
 801172e:	b2db      	uxtb	r3, r3
 8011730:	f003 0303 	and.w	r3, r3, #3
 8011734:	2b00      	cmp	r3, #0
 8011736:	d001      	beq.n	801173c <tcp_receive+0xa90>
 8011738:	2301      	movs	r3, #1
 801173a:	e000      	b.n	801173e <tcp_receive+0xa92>
 801173c:	2300      	movs	r3, #0
 801173e:	442b      	add	r3, r5
 8011740:	429c      	cmp	r4, r3
 8011742:	d206      	bcs.n	8011752 <tcp_receive+0xaa6>
 8011744:	4b1e      	ldr	r3, [pc, #120]	; (80117c0 <tcp_receive+0xb14>)
 8011746:	f240 622b 	movw	r2, #1579	; 0x62b
 801174a:	4923      	ldr	r1, [pc, #140]	; (80117d8 <tcp_receive+0xb2c>)
 801174c:	481e      	ldr	r0, [pc, #120]	; (80117c8 <tcp_receive+0xb1c>)
 801174e:	f005 f877 	bl	8016840 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8011752:	68bb      	ldr	r3, [r7, #8]
 8011754:	891b      	ldrh	r3, [r3, #8]
 8011756:	461c      	mov	r4, r3
 8011758:	68bb      	ldr	r3, [r7, #8]
 801175a:	68db      	ldr	r3, [r3, #12]
 801175c:	899b      	ldrh	r3, [r3, #12]
 801175e:	b29b      	uxth	r3, r3
 8011760:	4618      	mov	r0, r3
 8011762:	f7fa fa13 	bl	800bb8c <lwip_htons>
 8011766:	4603      	mov	r3, r0
 8011768:	b2db      	uxtb	r3, r3
 801176a:	f003 0303 	and.w	r3, r3, #3
 801176e:	2b00      	cmp	r3, #0
 8011770:	d001      	beq.n	8011776 <tcp_receive+0xaca>
 8011772:	2301      	movs	r3, #1
 8011774:	e000      	b.n	8011778 <tcp_receive+0xacc>
 8011776:	2300      	movs	r3, #0
 8011778:	1919      	adds	r1, r3, r4
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801177e:	b28b      	uxth	r3, r1
 8011780:	1ad3      	subs	r3, r2, r3
 8011782:	b29a      	uxth	r2, r3
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8011788:	6878      	ldr	r0, [r7, #4]
 801178a:	f7fc fcf1 	bl	800e170 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801178e:	68bb      	ldr	r3, [r7, #8]
 8011790:	685b      	ldr	r3, [r3, #4]
 8011792:	891b      	ldrh	r3, [r3, #8]
 8011794:	2b00      	cmp	r3, #0
 8011796:	d028      	beq.n	80117ea <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8011798:	4b0d      	ldr	r3, [pc, #52]	; (80117d0 <tcp_receive+0xb24>)
 801179a:	681b      	ldr	r3, [r3, #0]
 801179c:	2b00      	cmp	r3, #0
 801179e:	d01d      	beq.n	80117dc <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 80117a0:	4b0b      	ldr	r3, [pc, #44]	; (80117d0 <tcp_receive+0xb24>)
 80117a2:	681a      	ldr	r2, [r3, #0]
 80117a4:	68bb      	ldr	r3, [r7, #8]
 80117a6:	685b      	ldr	r3, [r3, #4]
 80117a8:	4619      	mov	r1, r3
 80117aa:	4610      	mov	r0, r2
 80117ac:	f7fb fe36 	bl	800d41c <pbuf_cat>
 80117b0:	e018      	b.n	80117e4 <tcp_receive+0xb38>
 80117b2:	bf00      	nop
 80117b4:	20008bea 	.word	0x20008bea
 80117b8:	20008be0 	.word	0x20008be0
 80117bc:	20008bc0 	.word	0x20008bc0
 80117c0:	08019914 	.word	0x08019914
 80117c4:	08019cf4 	.word	0x08019cf4
 80117c8:	08019960 	.word	0x08019960
 80117cc:	08019d30 	.word	0x08019d30
 80117d0:	20008bf0 	.word	0x20008bf0
 80117d4:	20008bed 	.word	0x20008bed
 80117d8:	08019d50 	.word	0x08019d50
            } else {
              recv_data = cseg->p;
 80117dc:	68bb      	ldr	r3, [r7, #8]
 80117de:	685b      	ldr	r3, [r3, #4]
 80117e0:	4a70      	ldr	r2, [pc, #448]	; (80119a4 <tcp_receive+0xcf8>)
 80117e2:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80117e4:	68bb      	ldr	r3, [r7, #8]
 80117e6:	2200      	movs	r2, #0
 80117e8:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80117ea:	68bb      	ldr	r3, [r7, #8]
 80117ec:	68db      	ldr	r3, [r3, #12]
 80117ee:	899b      	ldrh	r3, [r3, #12]
 80117f0:	b29b      	uxth	r3, r3
 80117f2:	4618      	mov	r0, r3
 80117f4:	f7fa f9ca 	bl	800bb8c <lwip_htons>
 80117f8:	4603      	mov	r3, r0
 80117fa:	b2db      	uxtb	r3, r3
 80117fc:	f003 0301 	and.w	r3, r3, #1
 8011800:	2b00      	cmp	r3, #0
 8011802:	d00d      	beq.n	8011820 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8011804:	4b68      	ldr	r3, [pc, #416]	; (80119a8 <tcp_receive+0xcfc>)
 8011806:	781b      	ldrb	r3, [r3, #0]
 8011808:	f043 0320 	orr.w	r3, r3, #32
 801180c:	b2da      	uxtb	r2, r3
 801180e:	4b66      	ldr	r3, [pc, #408]	; (80119a8 <tcp_receive+0xcfc>)
 8011810:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	7d1b      	ldrb	r3, [r3, #20]
 8011816:	2b04      	cmp	r3, #4
 8011818:	d102      	bne.n	8011820 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	2207      	movs	r2, #7
 801181e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8011820:	68bb      	ldr	r3, [r7, #8]
 8011822:	681a      	ldr	r2, [r3, #0]
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8011828:	68b8      	ldr	r0, [r7, #8]
 801182a:	f7fd fade 	bl	800edea <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011832:	2b00      	cmp	r3, #0
 8011834:	d008      	beq.n	8011848 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801183a:	68db      	ldr	r3, [r3, #12]
 801183c:	685a      	ldr	r2, [r3, #4]
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8011842:	429a      	cmp	r2, r3
 8011844:	f43f af43 	beq.w	80116ce <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	8b5b      	ldrh	r3, [r3, #26]
 801184c:	f003 0301 	and.w	r3, r3, #1
 8011850:	2b00      	cmp	r3, #0
 8011852:	d00e      	beq.n	8011872 <tcp_receive+0xbc6>
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	8b5b      	ldrh	r3, [r3, #26]
 8011858:	f023 0301 	bic.w	r3, r3, #1
 801185c:	b29a      	uxth	r2, r3
 801185e:	687b      	ldr	r3, [r7, #4]
 8011860:	835a      	strh	r2, [r3, #26]
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	8b5b      	ldrh	r3, [r3, #26]
 8011866:	f043 0302 	orr.w	r3, r3, #2
 801186a:	b29a      	uxth	r2, r3
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8011870:	e188      	b.n	8011b84 <tcp_receive+0xed8>
        tcp_ack(pcb);
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	8b5b      	ldrh	r3, [r3, #26]
 8011876:	f043 0301 	orr.w	r3, r3, #1
 801187a:	b29a      	uxth	r2, r3
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8011880:	e180      	b.n	8011b84 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8011882:	687b      	ldr	r3, [r7, #4]
 8011884:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011886:	2b00      	cmp	r3, #0
 8011888:	d106      	bne.n	8011898 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801188a:	4848      	ldr	r0, [pc, #288]	; (80119ac <tcp_receive+0xd00>)
 801188c:	f7fd fae4 	bl	800ee58 <tcp_seg_copy>
 8011890:	4602      	mov	r2, r0
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	675a      	str	r2, [r3, #116]	; 0x74
 8011896:	e16d      	b.n	8011b74 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8011898:	2300      	movs	r3, #0
 801189a:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80118a0:	63bb      	str	r3, [r7, #56]	; 0x38
 80118a2:	e157      	b.n	8011b54 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 80118a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118a6:	68db      	ldr	r3, [r3, #12]
 80118a8:	685a      	ldr	r2, [r3, #4]
 80118aa:	4b41      	ldr	r3, [pc, #260]	; (80119b0 <tcp_receive+0xd04>)
 80118ac:	681b      	ldr	r3, [r3, #0]
 80118ae:	429a      	cmp	r2, r3
 80118b0:	d11d      	bne.n	80118ee <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80118b2:	4b3e      	ldr	r3, [pc, #248]	; (80119ac <tcp_receive+0xd00>)
 80118b4:	891a      	ldrh	r2, [r3, #8]
 80118b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118b8:	891b      	ldrh	r3, [r3, #8]
 80118ba:	429a      	cmp	r2, r3
 80118bc:	f240 814f 	bls.w	8011b5e <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80118c0:	483a      	ldr	r0, [pc, #232]	; (80119ac <tcp_receive+0xd00>)
 80118c2:	f7fd fac9 	bl	800ee58 <tcp_seg_copy>
 80118c6:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80118c8:	697b      	ldr	r3, [r7, #20]
 80118ca:	2b00      	cmp	r3, #0
 80118cc:	f000 8149 	beq.w	8011b62 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 80118d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80118d2:	2b00      	cmp	r3, #0
 80118d4:	d003      	beq.n	80118de <tcp_receive+0xc32>
                    prev->next = cseg;
 80118d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80118d8:	697a      	ldr	r2, [r7, #20]
 80118da:	601a      	str	r2, [r3, #0]
 80118dc:	e002      	b.n	80118e4 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	697a      	ldr	r2, [r7, #20]
 80118e2:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80118e4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80118e6:	6978      	ldr	r0, [r7, #20]
 80118e8:	f7ff f8dc 	bl	8010aa4 <tcp_oos_insert_segment>
                }
                break;
 80118ec:	e139      	b.n	8011b62 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80118ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80118f0:	2b00      	cmp	r3, #0
 80118f2:	d117      	bne.n	8011924 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80118f4:	4b2e      	ldr	r3, [pc, #184]	; (80119b0 <tcp_receive+0xd04>)
 80118f6:	681a      	ldr	r2, [r3, #0]
 80118f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118fa:	68db      	ldr	r3, [r3, #12]
 80118fc:	685b      	ldr	r3, [r3, #4]
 80118fe:	1ad3      	subs	r3, r2, r3
 8011900:	2b00      	cmp	r3, #0
 8011902:	da57      	bge.n	80119b4 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011904:	4829      	ldr	r0, [pc, #164]	; (80119ac <tcp_receive+0xd00>)
 8011906:	f7fd faa7 	bl	800ee58 <tcp_seg_copy>
 801190a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 801190c:	69bb      	ldr	r3, [r7, #24]
 801190e:	2b00      	cmp	r3, #0
 8011910:	f000 8129 	beq.w	8011b66 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	69ba      	ldr	r2, [r7, #24]
 8011918:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 801191a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801191c:	69b8      	ldr	r0, [r7, #24]
 801191e:	f7ff f8c1 	bl	8010aa4 <tcp_oos_insert_segment>
                  }
                  break;
 8011922:	e120      	b.n	8011b66 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8011924:	4b22      	ldr	r3, [pc, #136]	; (80119b0 <tcp_receive+0xd04>)
 8011926:	681a      	ldr	r2, [r3, #0]
 8011928:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801192a:	68db      	ldr	r3, [r3, #12]
 801192c:	685b      	ldr	r3, [r3, #4]
 801192e:	1ad3      	subs	r3, r2, r3
 8011930:	3b01      	subs	r3, #1
 8011932:	2b00      	cmp	r3, #0
 8011934:	db3e      	blt.n	80119b4 <tcp_receive+0xd08>
 8011936:	4b1e      	ldr	r3, [pc, #120]	; (80119b0 <tcp_receive+0xd04>)
 8011938:	681a      	ldr	r2, [r3, #0]
 801193a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801193c:	68db      	ldr	r3, [r3, #12]
 801193e:	685b      	ldr	r3, [r3, #4]
 8011940:	1ad3      	subs	r3, r2, r3
 8011942:	3301      	adds	r3, #1
 8011944:	2b00      	cmp	r3, #0
 8011946:	dc35      	bgt.n	80119b4 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011948:	4818      	ldr	r0, [pc, #96]	; (80119ac <tcp_receive+0xd00>)
 801194a:	f7fd fa85 	bl	800ee58 <tcp_seg_copy>
 801194e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8011950:	69fb      	ldr	r3, [r7, #28]
 8011952:	2b00      	cmp	r3, #0
 8011954:	f000 8109 	beq.w	8011b6a <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8011958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801195a:	68db      	ldr	r3, [r3, #12]
 801195c:	685b      	ldr	r3, [r3, #4]
 801195e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011960:	8912      	ldrh	r2, [r2, #8]
 8011962:	441a      	add	r2, r3
 8011964:	4b12      	ldr	r3, [pc, #72]	; (80119b0 <tcp_receive+0xd04>)
 8011966:	681b      	ldr	r3, [r3, #0]
 8011968:	1ad3      	subs	r3, r2, r3
 801196a:	2b00      	cmp	r3, #0
 801196c:	dd12      	ble.n	8011994 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801196e:	4b10      	ldr	r3, [pc, #64]	; (80119b0 <tcp_receive+0xd04>)
 8011970:	681b      	ldr	r3, [r3, #0]
 8011972:	b29a      	uxth	r2, r3
 8011974:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011976:	68db      	ldr	r3, [r3, #12]
 8011978:	685b      	ldr	r3, [r3, #4]
 801197a:	b29b      	uxth	r3, r3
 801197c:	1ad3      	subs	r3, r2, r3
 801197e:	b29a      	uxth	r2, r3
 8011980:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011982:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8011984:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011986:	685a      	ldr	r2, [r3, #4]
 8011988:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801198a:	891b      	ldrh	r3, [r3, #8]
 801198c:	4619      	mov	r1, r3
 801198e:	4610      	mov	r0, r2
 8011990:	f7fb fafc 	bl	800cf8c <pbuf_realloc>
                    }
                    prev->next = cseg;
 8011994:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011996:	69fa      	ldr	r2, [r7, #28]
 8011998:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801199a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801199c:	69f8      	ldr	r0, [r7, #28]
 801199e:	f7ff f881 	bl	8010aa4 <tcp_oos_insert_segment>
                  }
                  break;
 80119a2:	e0e2      	b.n	8011b6a <tcp_receive+0xebe>
 80119a4:	20008bf0 	.word	0x20008bf0
 80119a8:	20008bed 	.word	0x20008bed
 80119ac:	20008bc0 	.word	0x20008bc0
 80119b0:	20008be0 	.word	0x20008be0
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 80119b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119b6:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80119b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119ba:	681b      	ldr	r3, [r3, #0]
 80119bc:	2b00      	cmp	r3, #0
 80119be:	f040 80c6 	bne.w	8011b4e <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80119c2:	4b80      	ldr	r3, [pc, #512]	; (8011bc4 <tcp_receive+0xf18>)
 80119c4:	681a      	ldr	r2, [r3, #0]
 80119c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119c8:	68db      	ldr	r3, [r3, #12]
 80119ca:	685b      	ldr	r3, [r3, #4]
 80119cc:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80119ce:	2b00      	cmp	r3, #0
 80119d0:	f340 80bd 	ble.w	8011b4e <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80119d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119d6:	68db      	ldr	r3, [r3, #12]
 80119d8:	899b      	ldrh	r3, [r3, #12]
 80119da:	b29b      	uxth	r3, r3
 80119dc:	4618      	mov	r0, r3
 80119de:	f7fa f8d5 	bl	800bb8c <lwip_htons>
 80119e2:	4603      	mov	r3, r0
 80119e4:	b2db      	uxtb	r3, r3
 80119e6:	f003 0301 	and.w	r3, r3, #1
 80119ea:	2b00      	cmp	r3, #0
 80119ec:	f040 80bf 	bne.w	8011b6e <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80119f0:	4875      	ldr	r0, [pc, #468]	; (8011bc8 <tcp_receive+0xf1c>)
 80119f2:	f7fd fa31 	bl	800ee58 <tcp_seg_copy>
 80119f6:	4602      	mov	r2, r0
 80119f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119fa:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80119fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119fe:	681b      	ldr	r3, [r3, #0]
 8011a00:	2b00      	cmp	r3, #0
 8011a02:	f000 80b6 	beq.w	8011b72 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8011a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a08:	68db      	ldr	r3, [r3, #12]
 8011a0a:	685b      	ldr	r3, [r3, #4]
 8011a0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011a0e:	8912      	ldrh	r2, [r2, #8]
 8011a10:	441a      	add	r2, r3
 8011a12:	4b6c      	ldr	r3, [pc, #432]	; (8011bc4 <tcp_receive+0xf18>)
 8011a14:	681b      	ldr	r3, [r3, #0]
 8011a16:	1ad3      	subs	r3, r2, r3
 8011a18:	2b00      	cmp	r3, #0
 8011a1a:	dd12      	ble.n	8011a42 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8011a1c:	4b69      	ldr	r3, [pc, #420]	; (8011bc4 <tcp_receive+0xf18>)
 8011a1e:	681b      	ldr	r3, [r3, #0]
 8011a20:	b29a      	uxth	r2, r3
 8011a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a24:	68db      	ldr	r3, [r3, #12]
 8011a26:	685b      	ldr	r3, [r3, #4]
 8011a28:	b29b      	uxth	r3, r3
 8011a2a:	1ad3      	subs	r3, r2, r3
 8011a2c:	b29a      	uxth	r2, r3
 8011a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a30:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8011a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a34:	685a      	ldr	r2, [r3, #4]
 8011a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a38:	891b      	ldrh	r3, [r3, #8]
 8011a3a:	4619      	mov	r1, r3
 8011a3c:	4610      	mov	r0, r2
 8011a3e:	f7fb faa5 	bl	800cf8c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8011a42:	4b62      	ldr	r3, [pc, #392]	; (8011bcc <tcp_receive+0xf20>)
 8011a44:	881b      	ldrh	r3, [r3, #0]
 8011a46:	461a      	mov	r2, r3
 8011a48:	4b5e      	ldr	r3, [pc, #376]	; (8011bc4 <tcp_receive+0xf18>)
 8011a4a:	681b      	ldr	r3, [r3, #0]
 8011a4c:	441a      	add	r2, r3
 8011a4e:	687b      	ldr	r3, [r7, #4]
 8011a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a52:	6879      	ldr	r1, [r7, #4]
 8011a54:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011a56:	440b      	add	r3, r1
 8011a58:	1ad3      	subs	r3, r2, r3
 8011a5a:	2b00      	cmp	r3, #0
 8011a5c:	f340 8089 	ble.w	8011b72 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8011a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a62:	681b      	ldr	r3, [r3, #0]
 8011a64:	68db      	ldr	r3, [r3, #12]
 8011a66:	899b      	ldrh	r3, [r3, #12]
 8011a68:	b29b      	uxth	r3, r3
 8011a6a:	4618      	mov	r0, r3
 8011a6c:	f7fa f88e 	bl	800bb8c <lwip_htons>
 8011a70:	4603      	mov	r3, r0
 8011a72:	b2db      	uxtb	r3, r3
 8011a74:	f003 0301 	and.w	r3, r3, #1
 8011a78:	2b00      	cmp	r3, #0
 8011a7a:	d022      	beq.n	8011ac2 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8011a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a7e:	681b      	ldr	r3, [r3, #0]
 8011a80:	68db      	ldr	r3, [r3, #12]
 8011a82:	899b      	ldrh	r3, [r3, #12]
 8011a84:	b29b      	uxth	r3, r3
 8011a86:	b21b      	sxth	r3, r3
 8011a88:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8011a8c:	b21c      	sxth	r4, r3
 8011a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a90:	681b      	ldr	r3, [r3, #0]
 8011a92:	68db      	ldr	r3, [r3, #12]
 8011a94:	899b      	ldrh	r3, [r3, #12]
 8011a96:	b29b      	uxth	r3, r3
 8011a98:	4618      	mov	r0, r3
 8011a9a:	f7fa f877 	bl	800bb8c <lwip_htons>
 8011a9e:	4603      	mov	r3, r0
 8011aa0:	b2db      	uxtb	r3, r3
 8011aa2:	b29b      	uxth	r3, r3
 8011aa4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8011aa8:	b29b      	uxth	r3, r3
 8011aaa:	4618      	mov	r0, r3
 8011aac:	f7fa f86e 	bl	800bb8c <lwip_htons>
 8011ab0:	4603      	mov	r3, r0
 8011ab2:	b21b      	sxth	r3, r3
 8011ab4:	4323      	orrs	r3, r4
 8011ab6:	b21a      	sxth	r2, r3
 8011ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011aba:	681b      	ldr	r3, [r3, #0]
 8011abc:	68db      	ldr	r3, [r3, #12]
 8011abe:	b292      	uxth	r2, r2
 8011ac0:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8011ac2:	687b      	ldr	r3, [r7, #4]
 8011ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ac6:	b29a      	uxth	r2, r3
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011acc:	4413      	add	r3, r2
 8011ace:	b299      	uxth	r1, r3
 8011ad0:	4b3c      	ldr	r3, [pc, #240]	; (8011bc4 <tcp_receive+0xf18>)
 8011ad2:	681b      	ldr	r3, [r3, #0]
 8011ad4:	b29a      	uxth	r2, r3
 8011ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ad8:	681b      	ldr	r3, [r3, #0]
 8011ada:	1a8a      	subs	r2, r1, r2
 8011adc:	b292      	uxth	r2, r2
 8011ade:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8011ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ae2:	681b      	ldr	r3, [r3, #0]
 8011ae4:	685a      	ldr	r2, [r3, #4]
 8011ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ae8:	681b      	ldr	r3, [r3, #0]
 8011aea:	891b      	ldrh	r3, [r3, #8]
 8011aec:	4619      	mov	r1, r3
 8011aee:	4610      	mov	r0, r2
 8011af0:	f7fb fa4c 	bl	800cf8c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8011af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011af6:	681b      	ldr	r3, [r3, #0]
 8011af8:	891c      	ldrh	r4, [r3, #8]
 8011afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011afc:	681b      	ldr	r3, [r3, #0]
 8011afe:	68db      	ldr	r3, [r3, #12]
 8011b00:	899b      	ldrh	r3, [r3, #12]
 8011b02:	b29b      	uxth	r3, r3
 8011b04:	4618      	mov	r0, r3
 8011b06:	f7fa f841 	bl	800bb8c <lwip_htons>
 8011b0a:	4603      	mov	r3, r0
 8011b0c:	b2db      	uxtb	r3, r3
 8011b0e:	f003 0303 	and.w	r3, r3, #3
 8011b12:	2b00      	cmp	r3, #0
 8011b14:	d001      	beq.n	8011b1a <tcp_receive+0xe6e>
 8011b16:	2301      	movs	r3, #1
 8011b18:	e000      	b.n	8011b1c <tcp_receive+0xe70>
 8011b1a:	2300      	movs	r3, #0
 8011b1c:	4423      	add	r3, r4
 8011b1e:	b29a      	uxth	r2, r3
 8011b20:	4b2a      	ldr	r3, [pc, #168]	; (8011bcc <tcp_receive+0xf20>)
 8011b22:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8011b24:	4b29      	ldr	r3, [pc, #164]	; (8011bcc <tcp_receive+0xf20>)
 8011b26:	881b      	ldrh	r3, [r3, #0]
 8011b28:	461a      	mov	r2, r3
 8011b2a:	4b26      	ldr	r3, [pc, #152]	; (8011bc4 <tcp_receive+0xf18>)
 8011b2c:	681b      	ldr	r3, [r3, #0]
 8011b2e:	441a      	add	r2, r3
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b34:	6879      	ldr	r1, [r7, #4]
 8011b36:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011b38:	440b      	add	r3, r1
 8011b3a:	429a      	cmp	r2, r3
 8011b3c:	d019      	beq.n	8011b72 <tcp_receive+0xec6>
 8011b3e:	4b24      	ldr	r3, [pc, #144]	; (8011bd0 <tcp_receive+0xf24>)
 8011b40:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8011b44:	4923      	ldr	r1, [pc, #140]	; (8011bd4 <tcp_receive+0xf28>)
 8011b46:	4824      	ldr	r0, [pc, #144]	; (8011bd8 <tcp_receive+0xf2c>)
 8011b48:	f004 fe7a 	bl	8016840 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8011b4c:	e011      	b.n	8011b72 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8011b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b50:	681b      	ldr	r3, [r3, #0]
 8011b52:	63bb      	str	r3, [r7, #56]	; 0x38
 8011b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b56:	2b00      	cmp	r3, #0
 8011b58:	f47f aea4 	bne.w	80118a4 <tcp_receive+0xbf8>
 8011b5c:	e00a      	b.n	8011b74 <tcp_receive+0xec8>
                break;
 8011b5e:	bf00      	nop
 8011b60:	e008      	b.n	8011b74 <tcp_receive+0xec8>
                break;
 8011b62:	bf00      	nop
 8011b64:	e006      	b.n	8011b74 <tcp_receive+0xec8>
                  break;
 8011b66:	bf00      	nop
 8011b68:	e004      	b.n	8011b74 <tcp_receive+0xec8>
                  break;
 8011b6a:	bf00      	nop
 8011b6c:	e002      	b.n	8011b74 <tcp_receive+0xec8>
                  break;
 8011b6e:	bf00      	nop
 8011b70:	e000      	b.n	8011b74 <tcp_receive+0xec8>
                break;
 8011b72:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8011b74:	6878      	ldr	r0, [r7, #4]
 8011b76:	f001 fe8b 	bl	8013890 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8011b7a:	e003      	b.n	8011b84 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8011b7c:	6878      	ldr	r0, [r7, #4]
 8011b7e:	f001 fe87 	bl	8013890 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011b82:	e01a      	b.n	8011bba <tcp_receive+0xf0e>
 8011b84:	e019      	b.n	8011bba <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8011b86:	4b0f      	ldr	r3, [pc, #60]	; (8011bc4 <tcp_receive+0xf18>)
 8011b88:	681a      	ldr	r2, [r3, #0]
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b8e:	1ad3      	subs	r3, r2, r3
 8011b90:	2b00      	cmp	r3, #0
 8011b92:	db0a      	blt.n	8011baa <tcp_receive+0xefe>
 8011b94:	4b0b      	ldr	r3, [pc, #44]	; (8011bc4 <tcp_receive+0xf18>)
 8011b96:	681a      	ldr	r2, [r3, #0]
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b9c:	6879      	ldr	r1, [r7, #4]
 8011b9e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011ba0:	440b      	add	r3, r1
 8011ba2:	1ad3      	subs	r3, r2, r3
 8011ba4:	3301      	adds	r3, #1
 8011ba6:	2b00      	cmp	r3, #0
 8011ba8:	dd07      	ble.n	8011bba <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	8b5b      	ldrh	r3, [r3, #26]
 8011bae:	f043 0302 	orr.w	r3, r3, #2
 8011bb2:	b29a      	uxth	r2, r3
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8011bb8:	e7ff      	b.n	8011bba <tcp_receive+0xf0e>
 8011bba:	bf00      	nop
 8011bbc:	3750      	adds	r7, #80	; 0x50
 8011bbe:	46bd      	mov	sp, r7
 8011bc0:	bdb0      	pop	{r4, r5, r7, pc}
 8011bc2:	bf00      	nop
 8011bc4:	20008be0 	.word	0x20008be0
 8011bc8:	20008bc0 	.word	0x20008bc0
 8011bcc:	20008bea 	.word	0x20008bea
 8011bd0:	08019914 	.word	0x08019914
 8011bd4:	08019cbc 	.word	0x08019cbc
 8011bd8:	08019960 	.word	0x08019960

08011bdc <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8011bdc:	b480      	push	{r7}
 8011bde:	b083      	sub	sp, #12
 8011be0:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8011be2:	4b15      	ldr	r3, [pc, #84]	; (8011c38 <tcp_get_next_optbyte+0x5c>)
 8011be4:	881b      	ldrh	r3, [r3, #0]
 8011be6:	1c5a      	adds	r2, r3, #1
 8011be8:	b291      	uxth	r1, r2
 8011bea:	4a13      	ldr	r2, [pc, #76]	; (8011c38 <tcp_get_next_optbyte+0x5c>)
 8011bec:	8011      	strh	r1, [r2, #0]
 8011bee:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8011bf0:	4b12      	ldr	r3, [pc, #72]	; (8011c3c <tcp_get_next_optbyte+0x60>)
 8011bf2:	681b      	ldr	r3, [r3, #0]
 8011bf4:	2b00      	cmp	r3, #0
 8011bf6:	d004      	beq.n	8011c02 <tcp_get_next_optbyte+0x26>
 8011bf8:	4b11      	ldr	r3, [pc, #68]	; (8011c40 <tcp_get_next_optbyte+0x64>)
 8011bfa:	881b      	ldrh	r3, [r3, #0]
 8011bfc:	88fa      	ldrh	r2, [r7, #6]
 8011bfe:	429a      	cmp	r2, r3
 8011c00:	d208      	bcs.n	8011c14 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8011c02:	4b10      	ldr	r3, [pc, #64]	; (8011c44 <tcp_get_next_optbyte+0x68>)
 8011c04:	681b      	ldr	r3, [r3, #0]
 8011c06:	3314      	adds	r3, #20
 8011c08:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8011c0a:	88fb      	ldrh	r3, [r7, #6]
 8011c0c:	683a      	ldr	r2, [r7, #0]
 8011c0e:	4413      	add	r3, r2
 8011c10:	781b      	ldrb	r3, [r3, #0]
 8011c12:	e00b      	b.n	8011c2c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8011c14:	88fb      	ldrh	r3, [r7, #6]
 8011c16:	b2da      	uxtb	r2, r3
 8011c18:	4b09      	ldr	r3, [pc, #36]	; (8011c40 <tcp_get_next_optbyte+0x64>)
 8011c1a:	881b      	ldrh	r3, [r3, #0]
 8011c1c:	b2db      	uxtb	r3, r3
 8011c1e:	1ad3      	subs	r3, r2, r3
 8011c20:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8011c22:	4b06      	ldr	r3, [pc, #24]	; (8011c3c <tcp_get_next_optbyte+0x60>)
 8011c24:	681a      	ldr	r2, [r3, #0]
 8011c26:	797b      	ldrb	r3, [r7, #5]
 8011c28:	4413      	add	r3, r2
 8011c2a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011c2c:	4618      	mov	r0, r3
 8011c2e:	370c      	adds	r7, #12
 8011c30:	46bd      	mov	sp, r7
 8011c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c36:	4770      	bx	lr
 8011c38:	20008bdc 	.word	0x20008bdc
 8011c3c:	20008bd8 	.word	0x20008bd8
 8011c40:	20008bd6 	.word	0x20008bd6
 8011c44:	20008bd0 	.word	0x20008bd0

08011c48 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8011c48:	b580      	push	{r7, lr}
 8011c4a:	b084      	sub	sp, #16
 8011c4c:	af00      	add	r7, sp, #0
 8011c4e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	2b00      	cmp	r3, #0
 8011c54:	d106      	bne.n	8011c64 <tcp_parseopt+0x1c>
 8011c56:	4b32      	ldr	r3, [pc, #200]	; (8011d20 <tcp_parseopt+0xd8>)
 8011c58:	f240 727d 	movw	r2, #1917	; 0x77d
 8011c5c:	4931      	ldr	r1, [pc, #196]	; (8011d24 <tcp_parseopt+0xdc>)
 8011c5e:	4832      	ldr	r0, [pc, #200]	; (8011d28 <tcp_parseopt+0xe0>)
 8011c60:	f004 fdee 	bl	8016840 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8011c64:	4b31      	ldr	r3, [pc, #196]	; (8011d2c <tcp_parseopt+0xe4>)
 8011c66:	881b      	ldrh	r3, [r3, #0]
 8011c68:	2b00      	cmp	r3, #0
 8011c6a:	d055      	beq.n	8011d18 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8011c6c:	4b30      	ldr	r3, [pc, #192]	; (8011d30 <tcp_parseopt+0xe8>)
 8011c6e:	2200      	movs	r2, #0
 8011c70:	801a      	strh	r2, [r3, #0]
 8011c72:	e045      	b.n	8011d00 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8011c74:	f7ff ffb2 	bl	8011bdc <tcp_get_next_optbyte>
 8011c78:	4603      	mov	r3, r0
 8011c7a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8011c7c:	7bfb      	ldrb	r3, [r7, #15]
 8011c7e:	2b02      	cmp	r3, #2
 8011c80:	d006      	beq.n	8011c90 <tcp_parseopt+0x48>
 8011c82:	2b02      	cmp	r3, #2
 8011c84:	dc2b      	bgt.n	8011cde <tcp_parseopt+0x96>
 8011c86:	2b00      	cmp	r3, #0
 8011c88:	d041      	beq.n	8011d0e <tcp_parseopt+0xc6>
 8011c8a:	2b01      	cmp	r3, #1
 8011c8c:	d127      	bne.n	8011cde <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8011c8e:	e037      	b.n	8011d00 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8011c90:	f7ff ffa4 	bl	8011bdc <tcp_get_next_optbyte>
 8011c94:	4603      	mov	r3, r0
 8011c96:	2b04      	cmp	r3, #4
 8011c98:	d13b      	bne.n	8011d12 <tcp_parseopt+0xca>
 8011c9a:	4b25      	ldr	r3, [pc, #148]	; (8011d30 <tcp_parseopt+0xe8>)
 8011c9c:	881b      	ldrh	r3, [r3, #0]
 8011c9e:	3301      	adds	r3, #1
 8011ca0:	4a22      	ldr	r2, [pc, #136]	; (8011d2c <tcp_parseopt+0xe4>)
 8011ca2:	8812      	ldrh	r2, [r2, #0]
 8011ca4:	4293      	cmp	r3, r2
 8011ca6:	da34      	bge.n	8011d12 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8011ca8:	f7ff ff98 	bl	8011bdc <tcp_get_next_optbyte>
 8011cac:	4603      	mov	r3, r0
 8011cae:	b29b      	uxth	r3, r3
 8011cb0:	021b      	lsls	r3, r3, #8
 8011cb2:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8011cb4:	f7ff ff92 	bl	8011bdc <tcp_get_next_optbyte>
 8011cb8:	4603      	mov	r3, r0
 8011cba:	b29a      	uxth	r2, r3
 8011cbc:	89bb      	ldrh	r3, [r7, #12]
 8011cbe:	4313      	orrs	r3, r2
 8011cc0:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8011cc2:	89bb      	ldrh	r3, [r7, #12]
 8011cc4:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8011cc8:	d804      	bhi.n	8011cd4 <tcp_parseopt+0x8c>
 8011cca:	89bb      	ldrh	r3, [r7, #12]
 8011ccc:	2b00      	cmp	r3, #0
 8011cce:	d001      	beq.n	8011cd4 <tcp_parseopt+0x8c>
 8011cd0:	89ba      	ldrh	r2, [r7, #12]
 8011cd2:	e001      	b.n	8011cd8 <tcp_parseopt+0x90>
 8011cd4:	f44f 7206 	mov.w	r2, #536	; 0x218
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8011cdc:	e010      	b.n	8011d00 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8011cde:	f7ff ff7d 	bl	8011bdc <tcp_get_next_optbyte>
 8011ce2:	4603      	mov	r3, r0
 8011ce4:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8011ce6:	7afb      	ldrb	r3, [r7, #11]
 8011ce8:	2b01      	cmp	r3, #1
 8011cea:	d914      	bls.n	8011d16 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8011cec:	7afb      	ldrb	r3, [r7, #11]
 8011cee:	b29a      	uxth	r2, r3
 8011cf0:	4b0f      	ldr	r3, [pc, #60]	; (8011d30 <tcp_parseopt+0xe8>)
 8011cf2:	881b      	ldrh	r3, [r3, #0]
 8011cf4:	4413      	add	r3, r2
 8011cf6:	b29b      	uxth	r3, r3
 8011cf8:	3b02      	subs	r3, #2
 8011cfa:	b29a      	uxth	r2, r3
 8011cfc:	4b0c      	ldr	r3, [pc, #48]	; (8011d30 <tcp_parseopt+0xe8>)
 8011cfe:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8011d00:	4b0b      	ldr	r3, [pc, #44]	; (8011d30 <tcp_parseopt+0xe8>)
 8011d02:	881a      	ldrh	r2, [r3, #0]
 8011d04:	4b09      	ldr	r3, [pc, #36]	; (8011d2c <tcp_parseopt+0xe4>)
 8011d06:	881b      	ldrh	r3, [r3, #0]
 8011d08:	429a      	cmp	r2, r3
 8011d0a:	d3b3      	bcc.n	8011c74 <tcp_parseopt+0x2c>
 8011d0c:	e004      	b.n	8011d18 <tcp_parseopt+0xd0>
          return;
 8011d0e:	bf00      	nop
 8011d10:	e002      	b.n	8011d18 <tcp_parseopt+0xd0>
            return;
 8011d12:	bf00      	nop
 8011d14:	e000      	b.n	8011d18 <tcp_parseopt+0xd0>
            return;
 8011d16:	bf00      	nop
      }
    }
  }
}
 8011d18:	3710      	adds	r7, #16
 8011d1a:	46bd      	mov	sp, r7
 8011d1c:	bd80      	pop	{r7, pc}
 8011d1e:	bf00      	nop
 8011d20:	08019914 	.word	0x08019914
 8011d24:	08019d78 	.word	0x08019d78
 8011d28:	08019960 	.word	0x08019960
 8011d2c:	20008bd4 	.word	0x20008bd4
 8011d30:	20008bdc 	.word	0x20008bdc

08011d34 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8011d34:	b480      	push	{r7}
 8011d36:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8011d38:	4b05      	ldr	r3, [pc, #20]	; (8011d50 <tcp_trigger_input_pcb_close+0x1c>)
 8011d3a:	781b      	ldrb	r3, [r3, #0]
 8011d3c:	f043 0310 	orr.w	r3, r3, #16
 8011d40:	b2da      	uxtb	r2, r3
 8011d42:	4b03      	ldr	r3, [pc, #12]	; (8011d50 <tcp_trigger_input_pcb_close+0x1c>)
 8011d44:	701a      	strb	r2, [r3, #0]
}
 8011d46:	bf00      	nop
 8011d48:	46bd      	mov	sp, r7
 8011d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d4e:	4770      	bx	lr
 8011d50:	20008bed 	.word	0x20008bed

08011d54 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8011d54:	b580      	push	{r7, lr}
 8011d56:	b084      	sub	sp, #16
 8011d58:	af00      	add	r7, sp, #0
 8011d5a:	60f8      	str	r0, [r7, #12]
 8011d5c:	60b9      	str	r1, [r7, #8]
 8011d5e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8011d60:	68fb      	ldr	r3, [r7, #12]
 8011d62:	2b00      	cmp	r3, #0
 8011d64:	d00a      	beq.n	8011d7c <tcp_route+0x28>
 8011d66:	68fb      	ldr	r3, [r7, #12]
 8011d68:	7a1b      	ldrb	r3, [r3, #8]
 8011d6a:	2b00      	cmp	r3, #0
 8011d6c:	d006      	beq.n	8011d7c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8011d6e:	68fb      	ldr	r3, [r7, #12]
 8011d70:	7a1b      	ldrb	r3, [r3, #8]
 8011d72:	4618      	mov	r0, r3
 8011d74:	f7fa ff30 	bl	800cbd8 <netif_get_by_index>
 8011d78:	4603      	mov	r3, r0
 8011d7a:	e003      	b.n	8011d84 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8011d7c:	6878      	ldr	r0, [r7, #4]
 8011d7e:	f003 fb0f 	bl	80153a0 <ip4_route>
 8011d82:	4603      	mov	r3, r0
  }
}
 8011d84:	4618      	mov	r0, r3
 8011d86:	3710      	adds	r7, #16
 8011d88:	46bd      	mov	sp, r7
 8011d8a:	bd80      	pop	{r7, pc}

08011d8c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8011d8c:	b590      	push	{r4, r7, lr}
 8011d8e:	b087      	sub	sp, #28
 8011d90:	af00      	add	r7, sp, #0
 8011d92:	60f8      	str	r0, [r7, #12]
 8011d94:	60b9      	str	r1, [r7, #8]
 8011d96:	603b      	str	r3, [r7, #0]
 8011d98:	4613      	mov	r3, r2
 8011d9a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8011d9c:	68fb      	ldr	r3, [r7, #12]
 8011d9e:	2b00      	cmp	r3, #0
 8011da0:	d105      	bne.n	8011dae <tcp_create_segment+0x22>
 8011da2:	4b44      	ldr	r3, [pc, #272]	; (8011eb4 <tcp_create_segment+0x128>)
 8011da4:	22a3      	movs	r2, #163	; 0xa3
 8011da6:	4944      	ldr	r1, [pc, #272]	; (8011eb8 <tcp_create_segment+0x12c>)
 8011da8:	4844      	ldr	r0, [pc, #272]	; (8011ebc <tcp_create_segment+0x130>)
 8011daa:	f004 fd49 	bl	8016840 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8011dae:	68bb      	ldr	r3, [r7, #8]
 8011db0:	2b00      	cmp	r3, #0
 8011db2:	d105      	bne.n	8011dc0 <tcp_create_segment+0x34>
 8011db4:	4b3f      	ldr	r3, [pc, #252]	; (8011eb4 <tcp_create_segment+0x128>)
 8011db6:	22a4      	movs	r2, #164	; 0xa4
 8011db8:	4941      	ldr	r1, [pc, #260]	; (8011ec0 <tcp_create_segment+0x134>)
 8011dba:	4840      	ldr	r0, [pc, #256]	; (8011ebc <tcp_create_segment+0x130>)
 8011dbc:	f004 fd40 	bl	8016840 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011dc0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011dc4:	009b      	lsls	r3, r3, #2
 8011dc6:	b2db      	uxtb	r3, r3
 8011dc8:	f003 0304 	and.w	r3, r3, #4
 8011dcc:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8011dce:	2003      	movs	r0, #3
 8011dd0:	f7fa fb7c 	bl	800c4cc <memp_malloc>
 8011dd4:	6138      	str	r0, [r7, #16]
 8011dd6:	693b      	ldr	r3, [r7, #16]
 8011dd8:	2b00      	cmp	r3, #0
 8011dda:	d104      	bne.n	8011de6 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8011ddc:	68b8      	ldr	r0, [r7, #8]
 8011dde:	f7fb fa5b 	bl	800d298 <pbuf_free>
    return NULL;
 8011de2:	2300      	movs	r3, #0
 8011de4:	e061      	b.n	8011eaa <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8011de6:	693b      	ldr	r3, [r7, #16]
 8011de8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8011dec:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8011dee:	693b      	ldr	r3, [r7, #16]
 8011df0:	2200      	movs	r2, #0
 8011df2:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8011df4:	693b      	ldr	r3, [r7, #16]
 8011df6:	68ba      	ldr	r2, [r7, #8]
 8011df8:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8011dfa:	68bb      	ldr	r3, [r7, #8]
 8011dfc:	891a      	ldrh	r2, [r3, #8]
 8011dfe:	7dfb      	ldrb	r3, [r7, #23]
 8011e00:	b29b      	uxth	r3, r3
 8011e02:	429a      	cmp	r2, r3
 8011e04:	d205      	bcs.n	8011e12 <tcp_create_segment+0x86>
 8011e06:	4b2b      	ldr	r3, [pc, #172]	; (8011eb4 <tcp_create_segment+0x128>)
 8011e08:	22b0      	movs	r2, #176	; 0xb0
 8011e0a:	492e      	ldr	r1, [pc, #184]	; (8011ec4 <tcp_create_segment+0x138>)
 8011e0c:	482b      	ldr	r0, [pc, #172]	; (8011ebc <tcp_create_segment+0x130>)
 8011e0e:	f004 fd17 	bl	8016840 <iprintf>
  seg->len = p->tot_len - optlen;
 8011e12:	68bb      	ldr	r3, [r7, #8]
 8011e14:	891a      	ldrh	r2, [r3, #8]
 8011e16:	7dfb      	ldrb	r3, [r7, #23]
 8011e18:	b29b      	uxth	r3, r3
 8011e1a:	1ad3      	subs	r3, r2, r3
 8011e1c:	b29a      	uxth	r2, r3
 8011e1e:	693b      	ldr	r3, [r7, #16]
 8011e20:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8011e22:	2114      	movs	r1, #20
 8011e24:	68b8      	ldr	r0, [r7, #8]
 8011e26:	f7fb f9a1 	bl	800d16c <pbuf_add_header>
 8011e2a:	4603      	mov	r3, r0
 8011e2c:	2b00      	cmp	r3, #0
 8011e2e:	d004      	beq.n	8011e3a <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8011e30:	6938      	ldr	r0, [r7, #16]
 8011e32:	f7fc ffda 	bl	800edea <tcp_seg_free>
    return NULL;
 8011e36:	2300      	movs	r3, #0
 8011e38:	e037      	b.n	8011eaa <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8011e3a:	693b      	ldr	r3, [r7, #16]
 8011e3c:	685b      	ldr	r3, [r3, #4]
 8011e3e:	685a      	ldr	r2, [r3, #4]
 8011e40:	693b      	ldr	r3, [r7, #16]
 8011e42:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8011e44:	68fb      	ldr	r3, [r7, #12]
 8011e46:	8ada      	ldrh	r2, [r3, #22]
 8011e48:	693b      	ldr	r3, [r7, #16]
 8011e4a:	68dc      	ldr	r4, [r3, #12]
 8011e4c:	4610      	mov	r0, r2
 8011e4e:	f7f9 fe9d 	bl	800bb8c <lwip_htons>
 8011e52:	4603      	mov	r3, r0
 8011e54:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8011e56:	68fb      	ldr	r3, [r7, #12]
 8011e58:	8b1a      	ldrh	r2, [r3, #24]
 8011e5a:	693b      	ldr	r3, [r7, #16]
 8011e5c:	68dc      	ldr	r4, [r3, #12]
 8011e5e:	4610      	mov	r0, r2
 8011e60:	f7f9 fe94 	bl	800bb8c <lwip_htons>
 8011e64:	4603      	mov	r3, r0
 8011e66:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8011e68:	693b      	ldr	r3, [r7, #16]
 8011e6a:	68dc      	ldr	r4, [r3, #12]
 8011e6c:	6838      	ldr	r0, [r7, #0]
 8011e6e:	f7f9 fea2 	bl	800bbb6 <lwip_htonl>
 8011e72:	4603      	mov	r3, r0
 8011e74:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8011e76:	7dfb      	ldrb	r3, [r7, #23]
 8011e78:	089b      	lsrs	r3, r3, #2
 8011e7a:	b2db      	uxtb	r3, r3
 8011e7c:	b29b      	uxth	r3, r3
 8011e7e:	3305      	adds	r3, #5
 8011e80:	b29b      	uxth	r3, r3
 8011e82:	031b      	lsls	r3, r3, #12
 8011e84:	b29a      	uxth	r2, r3
 8011e86:	79fb      	ldrb	r3, [r7, #7]
 8011e88:	b29b      	uxth	r3, r3
 8011e8a:	4313      	orrs	r3, r2
 8011e8c:	b29a      	uxth	r2, r3
 8011e8e:	693b      	ldr	r3, [r7, #16]
 8011e90:	68dc      	ldr	r4, [r3, #12]
 8011e92:	4610      	mov	r0, r2
 8011e94:	f7f9 fe7a 	bl	800bb8c <lwip_htons>
 8011e98:	4603      	mov	r3, r0
 8011e9a:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8011e9c:	693b      	ldr	r3, [r7, #16]
 8011e9e:	68db      	ldr	r3, [r3, #12]
 8011ea0:	2200      	movs	r2, #0
 8011ea2:	749a      	strb	r2, [r3, #18]
 8011ea4:	2200      	movs	r2, #0
 8011ea6:	74da      	strb	r2, [r3, #19]
  return seg;
 8011ea8:	693b      	ldr	r3, [r7, #16]
}
 8011eaa:	4618      	mov	r0, r3
 8011eac:	371c      	adds	r7, #28
 8011eae:	46bd      	mov	sp, r7
 8011eb0:	bd90      	pop	{r4, r7, pc}
 8011eb2:	bf00      	nop
 8011eb4:	08019d94 	.word	0x08019d94
 8011eb8:	08019dc8 	.word	0x08019dc8
 8011ebc:	08019de8 	.word	0x08019de8
 8011ec0:	08019e10 	.word	0x08019e10
 8011ec4:	08019e34 	.word	0x08019e34

08011ec8 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8011ec8:	b580      	push	{r7, lr}
 8011eca:	b086      	sub	sp, #24
 8011ecc:	af00      	add	r7, sp, #0
 8011ece:	607b      	str	r3, [r7, #4]
 8011ed0:	4603      	mov	r3, r0
 8011ed2:	73fb      	strb	r3, [r7, #15]
 8011ed4:	460b      	mov	r3, r1
 8011ed6:	81bb      	strh	r3, [r7, #12]
 8011ed8:	4613      	mov	r3, r2
 8011eda:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8011edc:	89bb      	ldrh	r3, [r7, #12]
 8011ede:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	2b00      	cmp	r3, #0
 8011ee4:	d105      	bne.n	8011ef2 <tcp_pbuf_prealloc+0x2a>
 8011ee6:	4b30      	ldr	r3, [pc, #192]	; (8011fa8 <tcp_pbuf_prealloc+0xe0>)
 8011ee8:	22e8      	movs	r2, #232	; 0xe8
 8011eea:	4930      	ldr	r1, [pc, #192]	; (8011fac <tcp_pbuf_prealloc+0xe4>)
 8011eec:	4830      	ldr	r0, [pc, #192]	; (8011fb0 <tcp_pbuf_prealloc+0xe8>)
 8011eee:	f004 fca7 	bl	8016840 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8011ef2:	6a3b      	ldr	r3, [r7, #32]
 8011ef4:	2b00      	cmp	r3, #0
 8011ef6:	d105      	bne.n	8011f04 <tcp_pbuf_prealloc+0x3c>
 8011ef8:	4b2b      	ldr	r3, [pc, #172]	; (8011fa8 <tcp_pbuf_prealloc+0xe0>)
 8011efa:	22e9      	movs	r2, #233	; 0xe9
 8011efc:	492d      	ldr	r1, [pc, #180]	; (8011fb4 <tcp_pbuf_prealloc+0xec>)
 8011efe:	482c      	ldr	r0, [pc, #176]	; (8011fb0 <tcp_pbuf_prealloc+0xe8>)
 8011f00:	f004 fc9e 	bl	8016840 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8011f04:	89ba      	ldrh	r2, [r7, #12]
 8011f06:	897b      	ldrh	r3, [r7, #10]
 8011f08:	429a      	cmp	r2, r3
 8011f0a:	d221      	bcs.n	8011f50 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8011f0c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8011f10:	f003 0302 	and.w	r3, r3, #2
 8011f14:	2b00      	cmp	r3, #0
 8011f16:	d111      	bne.n	8011f3c <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8011f18:	6a3b      	ldr	r3, [r7, #32]
 8011f1a:	8b5b      	ldrh	r3, [r3, #26]
 8011f1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8011f20:	2b00      	cmp	r3, #0
 8011f22:	d115      	bne.n	8011f50 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8011f24:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011f28:	2b00      	cmp	r3, #0
 8011f2a:	d007      	beq.n	8011f3c <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8011f2c:	6a3b      	ldr	r3, [r7, #32]
 8011f2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8011f30:	2b00      	cmp	r3, #0
 8011f32:	d103      	bne.n	8011f3c <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8011f34:	6a3b      	ldr	r3, [r7, #32]
 8011f36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8011f38:	2b00      	cmp	r3, #0
 8011f3a:	d009      	beq.n	8011f50 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8011f3c:	89bb      	ldrh	r3, [r7, #12]
 8011f3e:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8011f42:	f023 0203 	bic.w	r2, r3, #3
 8011f46:	897b      	ldrh	r3, [r7, #10]
 8011f48:	4293      	cmp	r3, r2
 8011f4a:	bf28      	it	cs
 8011f4c:	4613      	movcs	r3, r2
 8011f4e:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8011f50:	8af9      	ldrh	r1, [r7, #22]
 8011f52:	7bfb      	ldrb	r3, [r7, #15]
 8011f54:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011f58:	4618      	mov	r0, r3
 8011f5a:	f7fa feb9 	bl	800ccd0 <pbuf_alloc>
 8011f5e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011f60:	693b      	ldr	r3, [r7, #16]
 8011f62:	2b00      	cmp	r3, #0
 8011f64:	d101      	bne.n	8011f6a <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8011f66:	2300      	movs	r3, #0
 8011f68:	e019      	b.n	8011f9e <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8011f6a:	693b      	ldr	r3, [r7, #16]
 8011f6c:	681b      	ldr	r3, [r3, #0]
 8011f6e:	2b00      	cmp	r3, #0
 8011f70:	d006      	beq.n	8011f80 <tcp_pbuf_prealloc+0xb8>
 8011f72:	4b0d      	ldr	r3, [pc, #52]	; (8011fa8 <tcp_pbuf_prealloc+0xe0>)
 8011f74:	f240 120b 	movw	r2, #267	; 0x10b
 8011f78:	490f      	ldr	r1, [pc, #60]	; (8011fb8 <tcp_pbuf_prealloc+0xf0>)
 8011f7a:	480d      	ldr	r0, [pc, #52]	; (8011fb0 <tcp_pbuf_prealloc+0xe8>)
 8011f7c:	f004 fc60 	bl	8016840 <iprintf>
  *oversize = p->len - length;
 8011f80:	693b      	ldr	r3, [r7, #16]
 8011f82:	895a      	ldrh	r2, [r3, #10]
 8011f84:	89bb      	ldrh	r3, [r7, #12]
 8011f86:	1ad3      	subs	r3, r2, r3
 8011f88:	b29a      	uxth	r2, r3
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8011f8e:	693b      	ldr	r3, [r7, #16]
 8011f90:	89ba      	ldrh	r2, [r7, #12]
 8011f92:	811a      	strh	r2, [r3, #8]
 8011f94:	693b      	ldr	r3, [r7, #16]
 8011f96:	891a      	ldrh	r2, [r3, #8]
 8011f98:	693b      	ldr	r3, [r7, #16]
 8011f9a:	815a      	strh	r2, [r3, #10]
  return p;
 8011f9c:	693b      	ldr	r3, [r7, #16]
}
 8011f9e:	4618      	mov	r0, r3
 8011fa0:	3718      	adds	r7, #24
 8011fa2:	46bd      	mov	sp, r7
 8011fa4:	bd80      	pop	{r7, pc}
 8011fa6:	bf00      	nop
 8011fa8:	08019d94 	.word	0x08019d94
 8011fac:	08019e4c 	.word	0x08019e4c
 8011fb0:	08019de8 	.word	0x08019de8
 8011fb4:	08019e70 	.word	0x08019e70
 8011fb8:	08019e90 	.word	0x08019e90

08011fbc <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8011fbc:	b580      	push	{r7, lr}
 8011fbe:	b082      	sub	sp, #8
 8011fc0:	af00      	add	r7, sp, #0
 8011fc2:	6078      	str	r0, [r7, #4]
 8011fc4:	460b      	mov	r3, r1
 8011fc6:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	2b00      	cmp	r3, #0
 8011fcc:	d106      	bne.n	8011fdc <tcp_write_checks+0x20>
 8011fce:	4b33      	ldr	r3, [pc, #204]	; (801209c <tcp_write_checks+0xe0>)
 8011fd0:	f240 1233 	movw	r2, #307	; 0x133
 8011fd4:	4932      	ldr	r1, [pc, #200]	; (80120a0 <tcp_write_checks+0xe4>)
 8011fd6:	4833      	ldr	r0, [pc, #204]	; (80120a4 <tcp_write_checks+0xe8>)
 8011fd8:	f004 fc32 	bl	8016840 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	7d1b      	ldrb	r3, [r3, #20]
 8011fe0:	2b04      	cmp	r3, #4
 8011fe2:	d00e      	beq.n	8012002 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8011fe4:	687b      	ldr	r3, [r7, #4]
 8011fe6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8011fe8:	2b07      	cmp	r3, #7
 8011fea:	d00a      	beq.n	8012002 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8011ff0:	2b02      	cmp	r3, #2
 8011ff2:	d006      	beq.n	8012002 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8011ff8:	2b03      	cmp	r3, #3
 8011ffa:	d002      	beq.n	8012002 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8011ffc:	f06f 030a 	mvn.w	r3, #10
 8012000:	e048      	b.n	8012094 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8012002:	887b      	ldrh	r3, [r7, #2]
 8012004:	2b00      	cmp	r3, #0
 8012006:	d101      	bne.n	801200c <tcp_write_checks+0x50>
    return ERR_OK;
 8012008:	2300      	movs	r3, #0
 801200a:	e043      	b.n	8012094 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 801200c:	687b      	ldr	r3, [r7, #4]
 801200e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8012012:	887a      	ldrh	r2, [r7, #2]
 8012014:	429a      	cmp	r2, r3
 8012016:	d909      	bls.n	801202c <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	8b5b      	ldrh	r3, [r3, #26]
 801201c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012020:	b29a      	uxth	r2, r3
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8012026:	f04f 33ff 	mov.w	r3, #4294967295
 801202a:	e033      	b.n	8012094 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 801202c:	687b      	ldr	r3, [r7, #4]
 801202e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012032:	2b08      	cmp	r3, #8
 8012034:	d909      	bls.n	801204a <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012036:	687b      	ldr	r3, [r7, #4]
 8012038:	8b5b      	ldrh	r3, [r3, #26]
 801203a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801203e:	b29a      	uxth	r2, r3
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8012044:	f04f 33ff 	mov.w	r3, #4294967295
 8012048:	e024      	b.n	8012094 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012050:	2b00      	cmp	r3, #0
 8012052:	d00f      	beq.n	8012074 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012058:	2b00      	cmp	r3, #0
 801205a:	d11a      	bne.n	8012092 <tcp_write_checks+0xd6>
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012060:	2b00      	cmp	r3, #0
 8012062:	d116      	bne.n	8012092 <tcp_write_checks+0xd6>
 8012064:	4b0d      	ldr	r3, [pc, #52]	; (801209c <tcp_write_checks+0xe0>)
 8012066:	f240 1255 	movw	r2, #341	; 0x155
 801206a:	490f      	ldr	r1, [pc, #60]	; (80120a8 <tcp_write_checks+0xec>)
 801206c:	480d      	ldr	r0, [pc, #52]	; (80120a4 <tcp_write_checks+0xe8>)
 801206e:	f004 fbe7 	bl	8016840 <iprintf>
 8012072:	e00e      	b.n	8012092 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8012074:	687b      	ldr	r3, [r7, #4]
 8012076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012078:	2b00      	cmp	r3, #0
 801207a:	d103      	bne.n	8012084 <tcp_write_checks+0xc8>
 801207c:	687b      	ldr	r3, [r7, #4]
 801207e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012080:	2b00      	cmp	r3, #0
 8012082:	d006      	beq.n	8012092 <tcp_write_checks+0xd6>
 8012084:	4b05      	ldr	r3, [pc, #20]	; (801209c <tcp_write_checks+0xe0>)
 8012086:	f44f 72ac 	mov.w	r2, #344	; 0x158
 801208a:	4908      	ldr	r1, [pc, #32]	; (80120ac <tcp_write_checks+0xf0>)
 801208c:	4805      	ldr	r0, [pc, #20]	; (80120a4 <tcp_write_checks+0xe8>)
 801208e:	f004 fbd7 	bl	8016840 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8012092:	2300      	movs	r3, #0
}
 8012094:	4618      	mov	r0, r3
 8012096:	3708      	adds	r7, #8
 8012098:	46bd      	mov	sp, r7
 801209a:	bd80      	pop	{r7, pc}
 801209c:	08019d94 	.word	0x08019d94
 80120a0:	08019ea4 	.word	0x08019ea4
 80120a4:	08019de8 	.word	0x08019de8
 80120a8:	08019ec4 	.word	0x08019ec4
 80120ac:	08019f00 	.word	0x08019f00

080120b0 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 80120b0:	b590      	push	{r4, r7, lr}
 80120b2:	b09b      	sub	sp, #108	; 0x6c
 80120b4:	af04      	add	r7, sp, #16
 80120b6:	60f8      	str	r0, [r7, #12]
 80120b8:	60b9      	str	r1, [r7, #8]
 80120ba:	4611      	mov	r1, r2
 80120bc:	461a      	mov	r2, r3
 80120be:	460b      	mov	r3, r1
 80120c0:	80fb      	strh	r3, [r7, #6]
 80120c2:	4613      	mov	r3, r2
 80120c4:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 80120c6:	2300      	movs	r3, #0
 80120c8:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 80120ca:	2300      	movs	r3, #0
 80120cc:	653b      	str	r3, [r7, #80]	; 0x50
 80120ce:	2300      	movs	r3, #0
 80120d0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80120d2:	2300      	movs	r3, #0
 80120d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80120d6:	2300      	movs	r3, #0
 80120d8:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 80120da:	2300      	movs	r3, #0
 80120dc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 80120e0:	2300      	movs	r3, #0
 80120e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 80120e6:	2300      	movs	r3, #0
 80120e8:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 80120ea:	2300      	movs	r3, #0
 80120ec:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 80120ee:	2300      	movs	r3, #0
 80120f0:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 80120f2:	68fb      	ldr	r3, [r7, #12]
 80120f4:	2b00      	cmp	r3, #0
 80120f6:	d109      	bne.n	801210c <tcp_write+0x5c>
 80120f8:	4ba4      	ldr	r3, [pc, #656]	; (801238c <tcp_write+0x2dc>)
 80120fa:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 80120fe:	49a4      	ldr	r1, [pc, #656]	; (8012390 <tcp_write+0x2e0>)
 8012100:	48a4      	ldr	r0, [pc, #656]	; (8012394 <tcp_write+0x2e4>)
 8012102:	f004 fb9d 	bl	8016840 <iprintf>
 8012106:	f06f 030f 	mvn.w	r3, #15
 801210a:	e32a      	b.n	8012762 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 801210c:	68fb      	ldr	r3, [r7, #12]
 801210e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8012112:	085b      	lsrs	r3, r3, #1
 8012114:	b29a      	uxth	r2, r3
 8012116:	68fb      	ldr	r3, [r7, #12]
 8012118:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801211a:	4293      	cmp	r3, r2
 801211c:	bf28      	it	cs
 801211e:	4613      	movcs	r3, r2
 8012120:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8012122:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012124:	2b00      	cmp	r3, #0
 8012126:	d102      	bne.n	801212e <tcp_write+0x7e>
 8012128:	68fb      	ldr	r3, [r7, #12]
 801212a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801212c:	e000      	b.n	8012130 <tcp_write+0x80>
 801212e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012130:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8012132:	68bb      	ldr	r3, [r7, #8]
 8012134:	2b00      	cmp	r3, #0
 8012136:	d109      	bne.n	801214c <tcp_write+0x9c>
 8012138:	4b94      	ldr	r3, [pc, #592]	; (801238c <tcp_write+0x2dc>)
 801213a:	f240 12ad 	movw	r2, #429	; 0x1ad
 801213e:	4996      	ldr	r1, [pc, #600]	; (8012398 <tcp_write+0x2e8>)
 8012140:	4894      	ldr	r0, [pc, #592]	; (8012394 <tcp_write+0x2e4>)
 8012142:	f004 fb7d 	bl	8016840 <iprintf>
 8012146:	f06f 030f 	mvn.w	r3, #15
 801214a:	e30a      	b.n	8012762 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 801214c:	88fb      	ldrh	r3, [r7, #6]
 801214e:	4619      	mov	r1, r3
 8012150:	68f8      	ldr	r0, [r7, #12]
 8012152:	f7ff ff33 	bl	8011fbc <tcp_write_checks>
 8012156:	4603      	mov	r3, r0
 8012158:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 801215c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8012160:	2b00      	cmp	r3, #0
 8012162:	d002      	beq.n	801216a <tcp_write+0xba>
    return err;
 8012164:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8012168:	e2fb      	b.n	8012762 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 801216a:	68fb      	ldr	r3, [r7, #12]
 801216c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012170:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012174:	2300      	movs	r3, #0
 8012176:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 801217a:	68fb      	ldr	r3, [r7, #12]
 801217c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801217e:	2b00      	cmp	r3, #0
 8012180:	f000 80f6 	beq.w	8012370 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012184:	68fb      	ldr	r3, [r7, #12]
 8012186:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012188:	653b      	str	r3, [r7, #80]	; 0x50
 801218a:	e002      	b.n	8012192 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 801218c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801218e:	681b      	ldr	r3, [r3, #0]
 8012190:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012192:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012194:	681b      	ldr	r3, [r3, #0]
 8012196:	2b00      	cmp	r3, #0
 8012198:	d1f8      	bne.n	801218c <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801219a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801219c:	7a9b      	ldrb	r3, [r3, #10]
 801219e:	009b      	lsls	r3, r3, #2
 80121a0:	b29b      	uxth	r3, r3
 80121a2:	f003 0304 	and.w	r3, r3, #4
 80121a6:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 80121a8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80121aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80121ac:	891b      	ldrh	r3, [r3, #8]
 80121ae:	4619      	mov	r1, r3
 80121b0:	8c3b      	ldrh	r3, [r7, #32]
 80121b2:	440b      	add	r3, r1
 80121b4:	429a      	cmp	r2, r3
 80121b6:	da06      	bge.n	80121c6 <tcp_write+0x116>
 80121b8:	4b74      	ldr	r3, [pc, #464]	; (801238c <tcp_write+0x2dc>)
 80121ba:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80121be:	4977      	ldr	r1, [pc, #476]	; (801239c <tcp_write+0x2ec>)
 80121c0:	4874      	ldr	r0, [pc, #464]	; (8012394 <tcp_write+0x2e4>)
 80121c2:	f004 fb3d 	bl	8016840 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 80121c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80121c8:	891a      	ldrh	r2, [r3, #8]
 80121ca:	8c3b      	ldrh	r3, [r7, #32]
 80121cc:	4413      	add	r3, r2
 80121ce:	b29b      	uxth	r3, r3
 80121d0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80121d2:	1ad3      	subs	r3, r2, r3
 80121d4:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 80121d6:	68fb      	ldr	r3, [r7, #12]
 80121d8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80121dc:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 80121de:	8a7b      	ldrh	r3, [r7, #18]
 80121e0:	2b00      	cmp	r3, #0
 80121e2:	d026      	beq.n	8012232 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 80121e4:	8a7b      	ldrh	r3, [r7, #18]
 80121e6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80121e8:	429a      	cmp	r2, r3
 80121ea:	d206      	bcs.n	80121fa <tcp_write+0x14a>
 80121ec:	4b67      	ldr	r3, [pc, #412]	; (801238c <tcp_write+0x2dc>)
 80121ee:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 80121f2:	496b      	ldr	r1, [pc, #428]	; (80123a0 <tcp_write+0x2f0>)
 80121f4:	4867      	ldr	r0, [pc, #412]	; (8012394 <tcp_write+0x2e4>)
 80121f6:	f004 fb23 	bl	8016840 <iprintf>
      seg = last_unsent;
 80121fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80121fc:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 80121fe:	8a7b      	ldrh	r3, [r7, #18]
 8012200:	88fa      	ldrh	r2, [r7, #6]
 8012202:	4293      	cmp	r3, r2
 8012204:	bf28      	it	cs
 8012206:	4613      	movcs	r3, r2
 8012208:	b29b      	uxth	r3, r3
 801220a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801220c:	4293      	cmp	r3, r2
 801220e:	bf28      	it	cs
 8012210:	4613      	movcs	r3, r2
 8012212:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8012214:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012218:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801221a:	4413      	add	r3, r2
 801221c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8012220:	8a7a      	ldrh	r2, [r7, #18]
 8012222:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012224:	1ad3      	subs	r3, r2, r3
 8012226:	b29b      	uxth	r3, r3
 8012228:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 801222a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801222c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801222e:	1ad3      	subs	r3, r2, r3
 8012230:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8012232:	8a7b      	ldrh	r3, [r7, #18]
 8012234:	2b00      	cmp	r3, #0
 8012236:	d00b      	beq.n	8012250 <tcp_write+0x1a0>
 8012238:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801223c:	88fb      	ldrh	r3, [r7, #6]
 801223e:	429a      	cmp	r2, r3
 8012240:	d006      	beq.n	8012250 <tcp_write+0x1a0>
 8012242:	4b52      	ldr	r3, [pc, #328]	; (801238c <tcp_write+0x2dc>)
 8012244:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012248:	4956      	ldr	r1, [pc, #344]	; (80123a4 <tcp_write+0x2f4>)
 801224a:	4852      	ldr	r0, [pc, #328]	; (8012394 <tcp_write+0x2e4>)
 801224c:	f004 faf8 	bl	8016840 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8012250:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012254:	88fb      	ldrh	r3, [r7, #6]
 8012256:	429a      	cmp	r2, r3
 8012258:	f080 8167 	bcs.w	801252a <tcp_write+0x47a>
 801225c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801225e:	2b00      	cmp	r3, #0
 8012260:	f000 8163 	beq.w	801252a <tcp_write+0x47a>
 8012264:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012266:	891b      	ldrh	r3, [r3, #8]
 8012268:	2b00      	cmp	r3, #0
 801226a:	f000 815e 	beq.w	801252a <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801226e:	88fa      	ldrh	r2, [r7, #6]
 8012270:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012274:	1ad2      	subs	r2, r2, r3
 8012276:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012278:	4293      	cmp	r3, r2
 801227a:	bfa8      	it	ge
 801227c:	4613      	movge	r3, r2
 801227e:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8012280:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012282:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8012284:	797b      	ldrb	r3, [r7, #5]
 8012286:	f003 0301 	and.w	r3, r3, #1
 801228a:	2b00      	cmp	r3, #0
 801228c:	d027      	beq.n	80122de <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801228e:	f107 0012 	add.w	r0, r7, #18
 8012292:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012294:	8bf9      	ldrh	r1, [r7, #30]
 8012296:	2301      	movs	r3, #1
 8012298:	9302      	str	r3, [sp, #8]
 801229a:	797b      	ldrb	r3, [r7, #5]
 801229c:	9301      	str	r3, [sp, #4]
 801229e:	68fb      	ldr	r3, [r7, #12]
 80122a0:	9300      	str	r3, [sp, #0]
 80122a2:	4603      	mov	r3, r0
 80122a4:	2000      	movs	r0, #0
 80122a6:	f7ff fe0f 	bl	8011ec8 <tcp_pbuf_prealloc>
 80122aa:	6578      	str	r0, [r7, #84]	; 0x54
 80122ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80122ae:	2b00      	cmp	r3, #0
 80122b0:	f000 8225 	beq.w	80126fe <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 80122b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80122b6:	6858      	ldr	r0, [r3, #4]
 80122b8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80122bc:	68ba      	ldr	r2, [r7, #8]
 80122be:	4413      	add	r3, r2
 80122c0:	8bfa      	ldrh	r2, [r7, #30]
 80122c2:	4619      	mov	r1, r3
 80122c4:	f004 fa8c 	bl	80167e0 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 80122c8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80122ca:	f7fb f86d 	bl	800d3a8 <pbuf_clen>
 80122ce:	4603      	mov	r3, r0
 80122d0:	461a      	mov	r2, r3
 80122d2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80122d6:	4413      	add	r3, r2
 80122d8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80122dc:	e041      	b.n	8012362 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 80122de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80122e0:	685b      	ldr	r3, [r3, #4]
 80122e2:	637b      	str	r3, [r7, #52]	; 0x34
 80122e4:	e002      	b.n	80122ec <tcp_write+0x23c>
 80122e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80122e8:	681b      	ldr	r3, [r3, #0]
 80122ea:	637b      	str	r3, [r7, #52]	; 0x34
 80122ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80122ee:	681b      	ldr	r3, [r3, #0]
 80122f0:	2b00      	cmp	r3, #0
 80122f2:	d1f8      	bne.n	80122e6 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80122f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80122f6:	7b1b      	ldrb	r3, [r3, #12]
 80122f8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80122fc:	2b00      	cmp	r3, #0
 80122fe:	d115      	bne.n	801232c <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8012300:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012302:	685b      	ldr	r3, [r3, #4]
 8012304:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012306:	8952      	ldrh	r2, [r2, #10]
 8012308:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801230a:	68ba      	ldr	r2, [r7, #8]
 801230c:	429a      	cmp	r2, r3
 801230e:	d10d      	bne.n	801232c <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8012310:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012314:	2b00      	cmp	r3, #0
 8012316:	d006      	beq.n	8012326 <tcp_write+0x276>
 8012318:	4b1c      	ldr	r3, [pc, #112]	; (801238c <tcp_write+0x2dc>)
 801231a:	f240 2231 	movw	r2, #561	; 0x231
 801231e:	4922      	ldr	r1, [pc, #136]	; (80123a8 <tcp_write+0x2f8>)
 8012320:	481c      	ldr	r0, [pc, #112]	; (8012394 <tcp_write+0x2e4>)
 8012322:	f004 fa8d 	bl	8016840 <iprintf>
          extendlen = seglen;
 8012326:	8bfb      	ldrh	r3, [r7, #30]
 8012328:	87bb      	strh	r3, [r7, #60]	; 0x3c
 801232a:	e01a      	b.n	8012362 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 801232c:	8bfb      	ldrh	r3, [r7, #30]
 801232e:	2201      	movs	r2, #1
 8012330:	4619      	mov	r1, r3
 8012332:	2000      	movs	r0, #0
 8012334:	f7fa fccc 	bl	800ccd0 <pbuf_alloc>
 8012338:	6578      	str	r0, [r7, #84]	; 0x54
 801233a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801233c:	2b00      	cmp	r3, #0
 801233e:	f000 81e0 	beq.w	8012702 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8012342:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012346:	68ba      	ldr	r2, [r7, #8]
 8012348:	441a      	add	r2, r3
 801234a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801234c:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 801234e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8012350:	f7fb f82a 	bl	800d3a8 <pbuf_clen>
 8012354:	4603      	mov	r3, r0
 8012356:	461a      	mov	r2, r3
 8012358:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801235c:	4413      	add	r3, r2
 801235e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8012362:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012366:	8bfb      	ldrh	r3, [r7, #30]
 8012368:	4413      	add	r3, r2
 801236a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 801236e:	e0dc      	b.n	801252a <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8012370:	68fb      	ldr	r3, [r7, #12]
 8012372:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012376:	2b00      	cmp	r3, #0
 8012378:	f000 80d7 	beq.w	801252a <tcp_write+0x47a>
 801237c:	4b03      	ldr	r3, [pc, #12]	; (801238c <tcp_write+0x2dc>)
 801237e:	f240 224a 	movw	r2, #586	; 0x24a
 8012382:	490a      	ldr	r1, [pc, #40]	; (80123ac <tcp_write+0x2fc>)
 8012384:	4803      	ldr	r0, [pc, #12]	; (8012394 <tcp_write+0x2e4>)
 8012386:	f004 fa5b 	bl	8016840 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 801238a:	e0ce      	b.n	801252a <tcp_write+0x47a>
 801238c:	08019d94 	.word	0x08019d94
 8012390:	08019f34 	.word	0x08019f34
 8012394:	08019de8 	.word	0x08019de8
 8012398:	08019f4c 	.word	0x08019f4c
 801239c:	08019f80 	.word	0x08019f80
 80123a0:	08019f98 	.word	0x08019f98
 80123a4:	08019fb8 	.word	0x08019fb8
 80123a8:	08019fd8 	.word	0x08019fd8
 80123ac:	0801a004 	.word	0x0801a004
    struct pbuf *p;
    u16_t left = len - pos;
 80123b0:	88fa      	ldrh	r2, [r7, #6]
 80123b2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80123b6:	1ad3      	subs	r3, r2, r3
 80123b8:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 80123ba:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80123be:	b29b      	uxth	r3, r3
 80123c0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80123c2:	1ad3      	subs	r3, r2, r3
 80123c4:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 80123c6:	8b7a      	ldrh	r2, [r7, #26]
 80123c8:	8bbb      	ldrh	r3, [r7, #28]
 80123ca:	4293      	cmp	r3, r2
 80123cc:	bf28      	it	cs
 80123ce:	4613      	movcs	r3, r2
 80123d0:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 80123d2:	797b      	ldrb	r3, [r7, #5]
 80123d4:	f003 0301 	and.w	r3, r3, #1
 80123d8:	2b00      	cmp	r3, #0
 80123da:	d036      	beq.n	801244a <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 80123dc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80123e0:	b29a      	uxth	r2, r3
 80123e2:	8b3b      	ldrh	r3, [r7, #24]
 80123e4:	4413      	add	r3, r2
 80123e6:	b299      	uxth	r1, r3
 80123e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80123ea:	2b00      	cmp	r3, #0
 80123ec:	bf0c      	ite	eq
 80123ee:	2301      	moveq	r3, #1
 80123f0:	2300      	movne	r3, #0
 80123f2:	b2db      	uxtb	r3, r3
 80123f4:	f107 0012 	add.w	r0, r7, #18
 80123f8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80123fa:	9302      	str	r3, [sp, #8]
 80123fc:	797b      	ldrb	r3, [r7, #5]
 80123fe:	9301      	str	r3, [sp, #4]
 8012400:	68fb      	ldr	r3, [r7, #12]
 8012402:	9300      	str	r3, [sp, #0]
 8012404:	4603      	mov	r3, r0
 8012406:	2036      	movs	r0, #54	; 0x36
 8012408:	f7ff fd5e 	bl	8011ec8 <tcp_pbuf_prealloc>
 801240c:	6338      	str	r0, [r7, #48]	; 0x30
 801240e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012410:	2b00      	cmp	r3, #0
 8012412:	f000 8178 	beq.w	8012706 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8012416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012418:	895b      	ldrh	r3, [r3, #10]
 801241a:	8b3a      	ldrh	r2, [r7, #24]
 801241c:	429a      	cmp	r2, r3
 801241e:	d906      	bls.n	801242e <tcp_write+0x37e>
 8012420:	4b8c      	ldr	r3, [pc, #560]	; (8012654 <tcp_write+0x5a4>)
 8012422:	f240 2266 	movw	r2, #614	; 0x266
 8012426:	498c      	ldr	r1, [pc, #560]	; (8012658 <tcp_write+0x5a8>)
 8012428:	488c      	ldr	r0, [pc, #560]	; (801265c <tcp_write+0x5ac>)
 801242a:	f004 fa09 	bl	8016840 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 801242e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012430:	685a      	ldr	r2, [r3, #4]
 8012432:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012436:	18d0      	adds	r0, r2, r3
 8012438:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801243c:	68ba      	ldr	r2, [r7, #8]
 801243e:	4413      	add	r3, r2
 8012440:	8b3a      	ldrh	r2, [r7, #24]
 8012442:	4619      	mov	r1, r3
 8012444:	f004 f9cc 	bl	80167e0 <memcpy>
 8012448:	e02f      	b.n	80124aa <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801244a:	8a7b      	ldrh	r3, [r7, #18]
 801244c:	2b00      	cmp	r3, #0
 801244e:	d006      	beq.n	801245e <tcp_write+0x3ae>
 8012450:	4b80      	ldr	r3, [pc, #512]	; (8012654 <tcp_write+0x5a4>)
 8012452:	f240 2271 	movw	r2, #625	; 0x271
 8012456:	4982      	ldr	r1, [pc, #520]	; (8012660 <tcp_write+0x5b0>)
 8012458:	4880      	ldr	r0, [pc, #512]	; (801265c <tcp_write+0x5ac>)
 801245a:	f004 f9f1 	bl	8016840 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801245e:	8b3b      	ldrh	r3, [r7, #24]
 8012460:	2201      	movs	r2, #1
 8012462:	4619      	mov	r1, r3
 8012464:	2036      	movs	r0, #54	; 0x36
 8012466:	f7fa fc33 	bl	800ccd0 <pbuf_alloc>
 801246a:	6178      	str	r0, [r7, #20]
 801246c:	697b      	ldr	r3, [r7, #20]
 801246e:	2b00      	cmp	r3, #0
 8012470:	f000 814b 	beq.w	801270a <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8012474:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012478:	68ba      	ldr	r2, [r7, #8]
 801247a:	441a      	add	r2, r3
 801247c:	697b      	ldr	r3, [r7, #20]
 801247e:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8012480:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012484:	b29b      	uxth	r3, r3
 8012486:	f44f 7220 	mov.w	r2, #640	; 0x280
 801248a:	4619      	mov	r1, r3
 801248c:	2036      	movs	r0, #54	; 0x36
 801248e:	f7fa fc1f 	bl	800ccd0 <pbuf_alloc>
 8012492:	6338      	str	r0, [r7, #48]	; 0x30
 8012494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012496:	2b00      	cmp	r3, #0
 8012498:	d103      	bne.n	80124a2 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 801249a:	6978      	ldr	r0, [r7, #20]
 801249c:	f7fa fefc 	bl	800d298 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 80124a0:	e136      	b.n	8012710 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 80124a2:	6979      	ldr	r1, [r7, #20]
 80124a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80124a6:	f7fa ffb9 	bl	800d41c <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 80124aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80124ac:	f7fa ff7c 	bl	800d3a8 <pbuf_clen>
 80124b0:	4603      	mov	r3, r0
 80124b2:	461a      	mov	r2, r3
 80124b4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80124b8:	4413      	add	r3, r2
 80124ba:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 80124be:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80124c2:	2b09      	cmp	r3, #9
 80124c4:	d903      	bls.n	80124ce <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 80124c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80124c8:	f7fa fee6 	bl	800d298 <pbuf_free>
      goto memerr;
 80124cc:	e120      	b.n	8012710 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 80124ce:	68fb      	ldr	r3, [r7, #12]
 80124d0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80124d2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80124d6:	441a      	add	r2, r3
 80124d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80124dc:	9300      	str	r3, [sp, #0]
 80124de:	4613      	mov	r3, r2
 80124e0:	2200      	movs	r2, #0
 80124e2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80124e4:	68f8      	ldr	r0, [r7, #12]
 80124e6:	f7ff fc51 	bl	8011d8c <tcp_create_segment>
 80124ea:	64f8      	str	r0, [r7, #76]	; 0x4c
 80124ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80124ee:	2b00      	cmp	r3, #0
 80124f0:	f000 810d 	beq.w	801270e <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 80124f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80124f6:	2b00      	cmp	r3, #0
 80124f8:	d102      	bne.n	8012500 <tcp_write+0x450>
      queue = seg;
 80124fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80124fc:	647b      	str	r3, [r7, #68]	; 0x44
 80124fe:	e00c      	b.n	801251a <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8012500:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012502:	2b00      	cmp	r3, #0
 8012504:	d106      	bne.n	8012514 <tcp_write+0x464>
 8012506:	4b53      	ldr	r3, [pc, #332]	; (8012654 <tcp_write+0x5a4>)
 8012508:	f240 22ab 	movw	r2, #683	; 0x2ab
 801250c:	4955      	ldr	r1, [pc, #340]	; (8012664 <tcp_write+0x5b4>)
 801250e:	4853      	ldr	r0, [pc, #332]	; (801265c <tcp_write+0x5ac>)
 8012510:	f004 f996 	bl	8016840 <iprintf>
      prev_seg->next = seg;
 8012514:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012516:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012518:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 801251a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801251c:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 801251e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012522:	8b3b      	ldrh	r3, [r7, #24]
 8012524:	4413      	add	r3, r2
 8012526:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 801252a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801252e:	88fb      	ldrh	r3, [r7, #6]
 8012530:	429a      	cmp	r2, r3
 8012532:	f4ff af3d 	bcc.w	80123b0 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8012536:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012538:	2b00      	cmp	r3, #0
 801253a:	d02c      	beq.n	8012596 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 801253c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801253e:	685b      	ldr	r3, [r3, #4]
 8012540:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012542:	e01e      	b.n	8012582 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8012544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012546:	891a      	ldrh	r2, [r3, #8]
 8012548:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801254a:	4413      	add	r3, r2
 801254c:	b29a      	uxth	r2, r3
 801254e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012550:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8012552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012554:	681b      	ldr	r3, [r3, #0]
 8012556:	2b00      	cmp	r3, #0
 8012558:	d110      	bne.n	801257c <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801255a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801255c:	685b      	ldr	r3, [r3, #4]
 801255e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012560:	8952      	ldrh	r2, [r2, #10]
 8012562:	4413      	add	r3, r2
 8012564:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8012566:	68b9      	ldr	r1, [r7, #8]
 8012568:	4618      	mov	r0, r3
 801256a:	f004 f939 	bl	80167e0 <memcpy>
        p->len += oversize_used;
 801256e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012570:	895a      	ldrh	r2, [r3, #10]
 8012572:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012574:	4413      	add	r3, r2
 8012576:	b29a      	uxth	r2, r3
 8012578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801257a:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 801257c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801257e:	681b      	ldr	r3, [r3, #0]
 8012580:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012584:	2b00      	cmp	r3, #0
 8012586:	d1dd      	bne.n	8012544 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8012588:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801258a:	891a      	ldrh	r2, [r3, #8]
 801258c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801258e:	4413      	add	r3, r2
 8012590:	b29a      	uxth	r2, r3
 8012592:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012594:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8012596:	8a7a      	ldrh	r2, [r7, #18]
 8012598:	68fb      	ldr	r3, [r7, #12]
 801259a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 801259e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80125a0:	2b00      	cmp	r3, #0
 80125a2:	d018      	beq.n	80125d6 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 80125a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80125a6:	2b00      	cmp	r3, #0
 80125a8:	d106      	bne.n	80125b8 <tcp_write+0x508>
 80125aa:	4b2a      	ldr	r3, [pc, #168]	; (8012654 <tcp_write+0x5a4>)
 80125ac:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 80125b0:	492d      	ldr	r1, [pc, #180]	; (8012668 <tcp_write+0x5b8>)
 80125b2:	482a      	ldr	r0, [pc, #168]	; (801265c <tcp_write+0x5ac>)
 80125b4:	f004 f944 	bl	8016840 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 80125b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80125ba:	685b      	ldr	r3, [r3, #4]
 80125bc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80125be:	4618      	mov	r0, r3
 80125c0:	f7fa ff2c 	bl	800d41c <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 80125c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80125c6:	891a      	ldrh	r2, [r3, #8]
 80125c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80125ca:	891b      	ldrh	r3, [r3, #8]
 80125cc:	4413      	add	r3, r2
 80125ce:	b29a      	uxth	r2, r3
 80125d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80125d2:	811a      	strh	r2, [r3, #8]
 80125d4:	e037      	b.n	8012646 <tcp_write+0x596>
  } else if (extendlen > 0) {
 80125d6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80125d8:	2b00      	cmp	r3, #0
 80125da:	d034      	beq.n	8012646 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 80125dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80125de:	2b00      	cmp	r3, #0
 80125e0:	d003      	beq.n	80125ea <tcp_write+0x53a>
 80125e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80125e4:	685b      	ldr	r3, [r3, #4]
 80125e6:	2b00      	cmp	r3, #0
 80125e8:	d106      	bne.n	80125f8 <tcp_write+0x548>
 80125ea:	4b1a      	ldr	r3, [pc, #104]	; (8012654 <tcp_write+0x5a4>)
 80125ec:	f240 22e6 	movw	r2, #742	; 0x2e6
 80125f0:	491e      	ldr	r1, [pc, #120]	; (801266c <tcp_write+0x5bc>)
 80125f2:	481a      	ldr	r0, [pc, #104]	; (801265c <tcp_write+0x5ac>)
 80125f4:	f004 f924 	bl	8016840 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80125f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80125fa:	685b      	ldr	r3, [r3, #4]
 80125fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80125fe:	e009      	b.n	8012614 <tcp_write+0x564>
      p->tot_len += extendlen;
 8012600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012602:	891a      	ldrh	r2, [r3, #8]
 8012604:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012606:	4413      	add	r3, r2
 8012608:	b29a      	uxth	r2, r3
 801260a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801260c:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801260e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012610:	681b      	ldr	r3, [r3, #0]
 8012612:	62bb      	str	r3, [r7, #40]	; 0x28
 8012614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012616:	681b      	ldr	r3, [r3, #0]
 8012618:	2b00      	cmp	r3, #0
 801261a:	d1f1      	bne.n	8012600 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 801261c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801261e:	891a      	ldrh	r2, [r3, #8]
 8012620:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012622:	4413      	add	r3, r2
 8012624:	b29a      	uxth	r2, r3
 8012626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012628:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 801262a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801262c:	895a      	ldrh	r2, [r3, #10]
 801262e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012630:	4413      	add	r3, r2
 8012632:	b29a      	uxth	r2, r3
 8012634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012636:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8012638:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801263a:	891a      	ldrh	r2, [r3, #8]
 801263c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801263e:	4413      	add	r3, r2
 8012640:	b29a      	uxth	r2, r3
 8012642:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012644:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8012646:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012648:	2b00      	cmp	r3, #0
 801264a:	d111      	bne.n	8012670 <tcp_write+0x5c0>
    pcb->unsent = queue;
 801264c:	68fb      	ldr	r3, [r7, #12]
 801264e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012650:	66da      	str	r2, [r3, #108]	; 0x6c
 8012652:	e010      	b.n	8012676 <tcp_write+0x5c6>
 8012654:	08019d94 	.word	0x08019d94
 8012658:	0801a034 	.word	0x0801a034
 801265c:	08019de8 	.word	0x08019de8
 8012660:	0801a074 	.word	0x0801a074
 8012664:	0801a084 	.word	0x0801a084
 8012668:	0801a098 	.word	0x0801a098
 801266c:	0801a0d0 	.word	0x0801a0d0
  } else {
    last_unsent->next = queue;
 8012670:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012672:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012674:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8012676:	68fb      	ldr	r3, [r7, #12]
 8012678:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801267a:	88fb      	ldrh	r3, [r7, #6]
 801267c:	441a      	add	r2, r3
 801267e:	68fb      	ldr	r3, [r7, #12]
 8012680:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8012682:	68fb      	ldr	r3, [r7, #12]
 8012684:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8012688:	88fb      	ldrh	r3, [r7, #6]
 801268a:	1ad3      	subs	r3, r2, r3
 801268c:	b29a      	uxth	r2, r3
 801268e:	68fb      	ldr	r3, [r7, #12]
 8012690:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8012694:	68fb      	ldr	r3, [r7, #12]
 8012696:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801269a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801269e:	68fb      	ldr	r3, [r7, #12]
 80126a0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80126a4:	2b00      	cmp	r3, #0
 80126a6:	d00e      	beq.n	80126c6 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 80126a8:	68fb      	ldr	r3, [r7, #12]
 80126aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80126ac:	2b00      	cmp	r3, #0
 80126ae:	d10a      	bne.n	80126c6 <tcp_write+0x616>
 80126b0:	68fb      	ldr	r3, [r7, #12]
 80126b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80126b4:	2b00      	cmp	r3, #0
 80126b6:	d106      	bne.n	80126c6 <tcp_write+0x616>
 80126b8:	4b2c      	ldr	r3, [pc, #176]	; (801276c <tcp_write+0x6bc>)
 80126ba:	f240 3212 	movw	r2, #786	; 0x312
 80126be:	492c      	ldr	r1, [pc, #176]	; (8012770 <tcp_write+0x6c0>)
 80126c0:	482c      	ldr	r0, [pc, #176]	; (8012774 <tcp_write+0x6c4>)
 80126c2:	f004 f8bd 	bl	8016840 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 80126c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80126c8:	2b00      	cmp	r3, #0
 80126ca:	d016      	beq.n	80126fa <tcp_write+0x64a>
 80126cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80126ce:	68db      	ldr	r3, [r3, #12]
 80126d0:	2b00      	cmp	r3, #0
 80126d2:	d012      	beq.n	80126fa <tcp_write+0x64a>
 80126d4:	797b      	ldrb	r3, [r7, #5]
 80126d6:	f003 0302 	and.w	r3, r3, #2
 80126da:	2b00      	cmp	r3, #0
 80126dc:	d10d      	bne.n	80126fa <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 80126de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80126e0:	68db      	ldr	r3, [r3, #12]
 80126e2:	899b      	ldrh	r3, [r3, #12]
 80126e4:	b29c      	uxth	r4, r3
 80126e6:	2008      	movs	r0, #8
 80126e8:	f7f9 fa50 	bl	800bb8c <lwip_htons>
 80126ec:	4603      	mov	r3, r0
 80126ee:	461a      	mov	r2, r3
 80126f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80126f2:	68db      	ldr	r3, [r3, #12]
 80126f4:	4322      	orrs	r2, r4
 80126f6:	b292      	uxth	r2, r2
 80126f8:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 80126fa:	2300      	movs	r3, #0
 80126fc:	e031      	b.n	8012762 <tcp_write+0x6b2>
          goto memerr;
 80126fe:	bf00      	nop
 8012700:	e006      	b.n	8012710 <tcp_write+0x660>
            goto memerr;
 8012702:	bf00      	nop
 8012704:	e004      	b.n	8012710 <tcp_write+0x660>
        goto memerr;
 8012706:	bf00      	nop
 8012708:	e002      	b.n	8012710 <tcp_write+0x660>
        goto memerr;
 801270a:	bf00      	nop
 801270c:	e000      	b.n	8012710 <tcp_write+0x660>
      goto memerr;
 801270e:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012710:	68fb      	ldr	r3, [r7, #12]
 8012712:	8b5b      	ldrh	r3, [r3, #26]
 8012714:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012718:	b29a      	uxth	r2, r3
 801271a:	68fb      	ldr	r3, [r7, #12]
 801271c:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 801271e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012720:	2b00      	cmp	r3, #0
 8012722:	d002      	beq.n	801272a <tcp_write+0x67a>
    pbuf_free(concat_p);
 8012724:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8012726:	f7fa fdb7 	bl	800d298 <pbuf_free>
  }
  if (queue != NULL) {
 801272a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801272c:	2b00      	cmp	r3, #0
 801272e:	d002      	beq.n	8012736 <tcp_write+0x686>
    tcp_segs_free(queue);
 8012730:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8012732:	f7fc fb45 	bl	800edc0 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8012736:	68fb      	ldr	r3, [r7, #12]
 8012738:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801273c:	2b00      	cmp	r3, #0
 801273e:	d00e      	beq.n	801275e <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8012740:	68fb      	ldr	r3, [r7, #12]
 8012742:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012744:	2b00      	cmp	r3, #0
 8012746:	d10a      	bne.n	801275e <tcp_write+0x6ae>
 8012748:	68fb      	ldr	r3, [r7, #12]
 801274a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801274c:	2b00      	cmp	r3, #0
 801274e:	d106      	bne.n	801275e <tcp_write+0x6ae>
 8012750:	4b06      	ldr	r3, [pc, #24]	; (801276c <tcp_write+0x6bc>)
 8012752:	f240 3227 	movw	r2, #807	; 0x327
 8012756:	4906      	ldr	r1, [pc, #24]	; (8012770 <tcp_write+0x6c0>)
 8012758:	4806      	ldr	r0, [pc, #24]	; (8012774 <tcp_write+0x6c4>)
 801275a:	f004 f871 	bl	8016840 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 801275e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012762:	4618      	mov	r0, r3
 8012764:	375c      	adds	r7, #92	; 0x5c
 8012766:	46bd      	mov	sp, r7
 8012768:	bd90      	pop	{r4, r7, pc}
 801276a:	bf00      	nop
 801276c:	08019d94 	.word	0x08019d94
 8012770:	0801a108 	.word	0x0801a108
 8012774:	08019de8 	.word	0x08019de8

08012778 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8012778:	b590      	push	{r4, r7, lr}
 801277a:	b08b      	sub	sp, #44	; 0x2c
 801277c:	af02      	add	r7, sp, #8
 801277e:	6078      	str	r0, [r7, #4]
 8012780:	460b      	mov	r3, r1
 8012782:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8012784:	2300      	movs	r3, #0
 8012786:	61fb      	str	r3, [r7, #28]
 8012788:	2300      	movs	r3, #0
 801278a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 801278c:	2300      	movs	r3, #0
 801278e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8012790:	687b      	ldr	r3, [r7, #4]
 8012792:	2b00      	cmp	r3, #0
 8012794:	d106      	bne.n	80127a4 <tcp_split_unsent_seg+0x2c>
 8012796:	4b95      	ldr	r3, [pc, #596]	; (80129ec <tcp_split_unsent_seg+0x274>)
 8012798:	f240 324b 	movw	r2, #843	; 0x34b
 801279c:	4994      	ldr	r1, [pc, #592]	; (80129f0 <tcp_split_unsent_seg+0x278>)
 801279e:	4895      	ldr	r0, [pc, #596]	; (80129f4 <tcp_split_unsent_seg+0x27c>)
 80127a0:	f004 f84e 	bl	8016840 <iprintf>

  useg = pcb->unsent;
 80127a4:	687b      	ldr	r3, [r7, #4]
 80127a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80127a8:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 80127aa:	697b      	ldr	r3, [r7, #20]
 80127ac:	2b00      	cmp	r3, #0
 80127ae:	d102      	bne.n	80127b6 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80127b0:	f04f 33ff 	mov.w	r3, #4294967295
 80127b4:	e116      	b.n	80129e4 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 80127b6:	887b      	ldrh	r3, [r7, #2]
 80127b8:	2b00      	cmp	r3, #0
 80127ba:	d109      	bne.n	80127d0 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80127bc:	4b8b      	ldr	r3, [pc, #556]	; (80129ec <tcp_split_unsent_seg+0x274>)
 80127be:	f240 3253 	movw	r2, #851	; 0x353
 80127c2:	498d      	ldr	r1, [pc, #564]	; (80129f8 <tcp_split_unsent_seg+0x280>)
 80127c4:	488b      	ldr	r0, [pc, #556]	; (80129f4 <tcp_split_unsent_seg+0x27c>)
 80127c6:	f004 f83b 	bl	8016840 <iprintf>
    return ERR_VAL;
 80127ca:	f06f 0305 	mvn.w	r3, #5
 80127ce:	e109      	b.n	80129e4 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80127d0:	697b      	ldr	r3, [r7, #20]
 80127d2:	891b      	ldrh	r3, [r3, #8]
 80127d4:	887a      	ldrh	r2, [r7, #2]
 80127d6:	429a      	cmp	r2, r3
 80127d8:	d301      	bcc.n	80127de <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80127da:	2300      	movs	r3, #0
 80127dc:	e102      	b.n	80129e4 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80127de:	687b      	ldr	r3, [r7, #4]
 80127e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80127e2:	887a      	ldrh	r2, [r7, #2]
 80127e4:	429a      	cmp	r2, r3
 80127e6:	d906      	bls.n	80127f6 <tcp_split_unsent_seg+0x7e>
 80127e8:	4b80      	ldr	r3, [pc, #512]	; (80129ec <tcp_split_unsent_seg+0x274>)
 80127ea:	f240 325b 	movw	r2, #859	; 0x35b
 80127ee:	4983      	ldr	r1, [pc, #524]	; (80129fc <tcp_split_unsent_seg+0x284>)
 80127f0:	4880      	ldr	r0, [pc, #512]	; (80129f4 <tcp_split_unsent_seg+0x27c>)
 80127f2:	f004 f825 	bl	8016840 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80127f6:	697b      	ldr	r3, [r7, #20]
 80127f8:	891b      	ldrh	r3, [r3, #8]
 80127fa:	2b00      	cmp	r3, #0
 80127fc:	d106      	bne.n	801280c <tcp_split_unsent_seg+0x94>
 80127fe:	4b7b      	ldr	r3, [pc, #492]	; (80129ec <tcp_split_unsent_seg+0x274>)
 8012800:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8012804:	497e      	ldr	r1, [pc, #504]	; (8012a00 <tcp_split_unsent_seg+0x288>)
 8012806:	487b      	ldr	r0, [pc, #492]	; (80129f4 <tcp_split_unsent_seg+0x27c>)
 8012808:	f004 f81a 	bl	8016840 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 801280c:	697b      	ldr	r3, [r7, #20]
 801280e:	7a9b      	ldrb	r3, [r3, #10]
 8012810:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8012812:	7bfb      	ldrb	r3, [r7, #15]
 8012814:	009b      	lsls	r3, r3, #2
 8012816:	b2db      	uxtb	r3, r3
 8012818:	f003 0304 	and.w	r3, r3, #4
 801281c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801281e:	697b      	ldr	r3, [r7, #20]
 8012820:	891a      	ldrh	r2, [r3, #8]
 8012822:	887b      	ldrh	r3, [r7, #2]
 8012824:	1ad3      	subs	r3, r2, r3
 8012826:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8012828:	7bbb      	ldrb	r3, [r7, #14]
 801282a:	b29a      	uxth	r2, r3
 801282c:	89bb      	ldrh	r3, [r7, #12]
 801282e:	4413      	add	r3, r2
 8012830:	b29b      	uxth	r3, r3
 8012832:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012836:	4619      	mov	r1, r3
 8012838:	2036      	movs	r0, #54	; 0x36
 801283a:	f7fa fa49 	bl	800ccd0 <pbuf_alloc>
 801283e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012840:	693b      	ldr	r3, [r7, #16]
 8012842:	2b00      	cmp	r3, #0
 8012844:	f000 80b7 	beq.w	80129b6 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8012848:	697b      	ldr	r3, [r7, #20]
 801284a:	685b      	ldr	r3, [r3, #4]
 801284c:	891a      	ldrh	r2, [r3, #8]
 801284e:	697b      	ldr	r3, [r7, #20]
 8012850:	891b      	ldrh	r3, [r3, #8]
 8012852:	1ad3      	subs	r3, r2, r3
 8012854:	b29a      	uxth	r2, r3
 8012856:	887b      	ldrh	r3, [r7, #2]
 8012858:	4413      	add	r3, r2
 801285a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801285c:	697b      	ldr	r3, [r7, #20]
 801285e:	6858      	ldr	r0, [r3, #4]
 8012860:	693b      	ldr	r3, [r7, #16]
 8012862:	685a      	ldr	r2, [r3, #4]
 8012864:	7bbb      	ldrb	r3, [r7, #14]
 8012866:	18d1      	adds	r1, r2, r3
 8012868:	897b      	ldrh	r3, [r7, #10]
 801286a:	89ba      	ldrh	r2, [r7, #12]
 801286c:	f7fa fefe 	bl	800d66c <pbuf_copy_partial>
 8012870:	4603      	mov	r3, r0
 8012872:	461a      	mov	r2, r3
 8012874:	89bb      	ldrh	r3, [r7, #12]
 8012876:	4293      	cmp	r3, r2
 8012878:	f040 809f 	bne.w	80129ba <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801287c:	697b      	ldr	r3, [r7, #20]
 801287e:	68db      	ldr	r3, [r3, #12]
 8012880:	899b      	ldrh	r3, [r3, #12]
 8012882:	b29b      	uxth	r3, r3
 8012884:	4618      	mov	r0, r3
 8012886:	f7f9 f981 	bl	800bb8c <lwip_htons>
 801288a:	4603      	mov	r3, r0
 801288c:	b2db      	uxtb	r3, r3
 801288e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012892:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8012894:	2300      	movs	r3, #0
 8012896:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8012898:	7efb      	ldrb	r3, [r7, #27]
 801289a:	f003 0308 	and.w	r3, r3, #8
 801289e:	2b00      	cmp	r3, #0
 80128a0:	d007      	beq.n	80128b2 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 80128a2:	7efb      	ldrb	r3, [r7, #27]
 80128a4:	f023 0308 	bic.w	r3, r3, #8
 80128a8:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 80128aa:	7ebb      	ldrb	r3, [r7, #26]
 80128ac:	f043 0308 	orr.w	r3, r3, #8
 80128b0:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 80128b2:	7efb      	ldrb	r3, [r7, #27]
 80128b4:	f003 0301 	and.w	r3, r3, #1
 80128b8:	2b00      	cmp	r3, #0
 80128ba:	d007      	beq.n	80128cc <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 80128bc:	7efb      	ldrb	r3, [r7, #27]
 80128be:	f023 0301 	bic.w	r3, r3, #1
 80128c2:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 80128c4:	7ebb      	ldrb	r3, [r7, #26]
 80128c6:	f043 0301 	orr.w	r3, r3, #1
 80128ca:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80128cc:	697b      	ldr	r3, [r7, #20]
 80128ce:	68db      	ldr	r3, [r3, #12]
 80128d0:	685b      	ldr	r3, [r3, #4]
 80128d2:	4618      	mov	r0, r3
 80128d4:	f7f9 f96f 	bl	800bbb6 <lwip_htonl>
 80128d8:	4602      	mov	r2, r0
 80128da:	887b      	ldrh	r3, [r7, #2]
 80128dc:	18d1      	adds	r1, r2, r3
 80128de:	7eba      	ldrb	r2, [r7, #26]
 80128e0:	7bfb      	ldrb	r3, [r7, #15]
 80128e2:	9300      	str	r3, [sp, #0]
 80128e4:	460b      	mov	r3, r1
 80128e6:	6939      	ldr	r1, [r7, #16]
 80128e8:	6878      	ldr	r0, [r7, #4]
 80128ea:	f7ff fa4f 	bl	8011d8c <tcp_create_segment>
 80128ee:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 80128f0:	69fb      	ldr	r3, [r7, #28]
 80128f2:	2b00      	cmp	r3, #0
 80128f4:	d063      	beq.n	80129be <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80128f6:	697b      	ldr	r3, [r7, #20]
 80128f8:	685b      	ldr	r3, [r3, #4]
 80128fa:	4618      	mov	r0, r3
 80128fc:	f7fa fd54 	bl	800d3a8 <pbuf_clen>
 8012900:	4603      	mov	r3, r0
 8012902:	461a      	mov	r2, r3
 8012904:	687b      	ldr	r3, [r7, #4]
 8012906:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801290a:	1a9b      	subs	r3, r3, r2
 801290c:	b29a      	uxth	r2, r3
 801290e:	687b      	ldr	r3, [r7, #4]
 8012910:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8012914:	697b      	ldr	r3, [r7, #20]
 8012916:	6858      	ldr	r0, [r3, #4]
 8012918:	697b      	ldr	r3, [r7, #20]
 801291a:	685b      	ldr	r3, [r3, #4]
 801291c:	891a      	ldrh	r2, [r3, #8]
 801291e:	89bb      	ldrh	r3, [r7, #12]
 8012920:	1ad3      	subs	r3, r2, r3
 8012922:	b29b      	uxth	r3, r3
 8012924:	4619      	mov	r1, r3
 8012926:	f7fa fb31 	bl	800cf8c <pbuf_realloc>
  useg->len -= remainder;
 801292a:	697b      	ldr	r3, [r7, #20]
 801292c:	891a      	ldrh	r2, [r3, #8]
 801292e:	89bb      	ldrh	r3, [r7, #12]
 8012930:	1ad3      	subs	r3, r2, r3
 8012932:	b29a      	uxth	r2, r3
 8012934:	697b      	ldr	r3, [r7, #20]
 8012936:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8012938:	697b      	ldr	r3, [r7, #20]
 801293a:	68db      	ldr	r3, [r3, #12]
 801293c:	899b      	ldrh	r3, [r3, #12]
 801293e:	b29c      	uxth	r4, r3
 8012940:	7efb      	ldrb	r3, [r7, #27]
 8012942:	b29b      	uxth	r3, r3
 8012944:	4618      	mov	r0, r3
 8012946:	f7f9 f921 	bl	800bb8c <lwip_htons>
 801294a:	4603      	mov	r3, r0
 801294c:	461a      	mov	r2, r3
 801294e:	697b      	ldr	r3, [r7, #20]
 8012950:	68db      	ldr	r3, [r3, #12]
 8012952:	4322      	orrs	r2, r4
 8012954:	b292      	uxth	r2, r2
 8012956:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8012958:	697b      	ldr	r3, [r7, #20]
 801295a:	685b      	ldr	r3, [r3, #4]
 801295c:	4618      	mov	r0, r3
 801295e:	f7fa fd23 	bl	800d3a8 <pbuf_clen>
 8012962:	4603      	mov	r3, r0
 8012964:	461a      	mov	r2, r3
 8012966:	687b      	ldr	r3, [r7, #4]
 8012968:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801296c:	4413      	add	r3, r2
 801296e:	b29a      	uxth	r2, r3
 8012970:	687b      	ldr	r3, [r7, #4]
 8012972:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8012976:	69fb      	ldr	r3, [r7, #28]
 8012978:	685b      	ldr	r3, [r3, #4]
 801297a:	4618      	mov	r0, r3
 801297c:	f7fa fd14 	bl	800d3a8 <pbuf_clen>
 8012980:	4603      	mov	r3, r0
 8012982:	461a      	mov	r2, r3
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801298a:	4413      	add	r3, r2
 801298c:	b29a      	uxth	r2, r3
 801298e:	687b      	ldr	r3, [r7, #4]
 8012990:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8012994:	697b      	ldr	r3, [r7, #20]
 8012996:	681a      	ldr	r2, [r3, #0]
 8012998:	69fb      	ldr	r3, [r7, #28]
 801299a:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 801299c:	697b      	ldr	r3, [r7, #20]
 801299e:	69fa      	ldr	r2, [r7, #28]
 80129a0:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 80129a2:	69fb      	ldr	r3, [r7, #28]
 80129a4:	681b      	ldr	r3, [r3, #0]
 80129a6:	2b00      	cmp	r3, #0
 80129a8:	d103      	bne.n	80129b2 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 80129aa:	687b      	ldr	r3, [r7, #4]
 80129ac:	2200      	movs	r2, #0
 80129ae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 80129b2:	2300      	movs	r3, #0
 80129b4:	e016      	b.n	80129e4 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 80129b6:	bf00      	nop
 80129b8:	e002      	b.n	80129c0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80129ba:	bf00      	nop
 80129bc:	e000      	b.n	80129c0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80129be:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 80129c0:	69fb      	ldr	r3, [r7, #28]
 80129c2:	2b00      	cmp	r3, #0
 80129c4:	d006      	beq.n	80129d4 <tcp_split_unsent_seg+0x25c>
 80129c6:	4b09      	ldr	r3, [pc, #36]	; (80129ec <tcp_split_unsent_seg+0x274>)
 80129c8:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 80129cc:	490d      	ldr	r1, [pc, #52]	; (8012a04 <tcp_split_unsent_seg+0x28c>)
 80129ce:	4809      	ldr	r0, [pc, #36]	; (80129f4 <tcp_split_unsent_seg+0x27c>)
 80129d0:	f003 ff36 	bl	8016840 <iprintf>
  if (p != NULL) {
 80129d4:	693b      	ldr	r3, [r7, #16]
 80129d6:	2b00      	cmp	r3, #0
 80129d8:	d002      	beq.n	80129e0 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 80129da:	6938      	ldr	r0, [r7, #16]
 80129dc:	f7fa fc5c 	bl	800d298 <pbuf_free>
  }

  return ERR_MEM;
 80129e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80129e4:	4618      	mov	r0, r3
 80129e6:	3724      	adds	r7, #36	; 0x24
 80129e8:	46bd      	mov	sp, r7
 80129ea:	bd90      	pop	{r4, r7, pc}
 80129ec:	08019d94 	.word	0x08019d94
 80129f0:	0801a128 	.word	0x0801a128
 80129f4:	08019de8 	.word	0x08019de8
 80129f8:	0801a14c 	.word	0x0801a14c
 80129fc:	0801a170 	.word	0x0801a170
 8012a00:	0801a180 	.word	0x0801a180
 8012a04:	0801a190 	.word	0x0801a190

08012a08 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8012a08:	b590      	push	{r4, r7, lr}
 8012a0a:	b085      	sub	sp, #20
 8012a0c:	af00      	add	r7, sp, #0
 8012a0e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8012a10:	687b      	ldr	r3, [r7, #4]
 8012a12:	2b00      	cmp	r3, #0
 8012a14:	d106      	bne.n	8012a24 <tcp_send_fin+0x1c>
 8012a16:	4b21      	ldr	r3, [pc, #132]	; (8012a9c <tcp_send_fin+0x94>)
 8012a18:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8012a1c:	4920      	ldr	r1, [pc, #128]	; (8012aa0 <tcp_send_fin+0x98>)
 8012a1e:	4821      	ldr	r0, [pc, #132]	; (8012aa4 <tcp_send_fin+0x9c>)
 8012a20:	f003 ff0e 	bl	8016840 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8012a24:	687b      	ldr	r3, [r7, #4]
 8012a26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012a28:	2b00      	cmp	r3, #0
 8012a2a:	d02e      	beq.n	8012a8a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012a2c:	687b      	ldr	r3, [r7, #4]
 8012a2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012a30:	60fb      	str	r3, [r7, #12]
 8012a32:	e002      	b.n	8012a3a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8012a34:	68fb      	ldr	r3, [r7, #12]
 8012a36:	681b      	ldr	r3, [r3, #0]
 8012a38:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012a3a:	68fb      	ldr	r3, [r7, #12]
 8012a3c:	681b      	ldr	r3, [r3, #0]
 8012a3e:	2b00      	cmp	r3, #0
 8012a40:	d1f8      	bne.n	8012a34 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8012a42:	68fb      	ldr	r3, [r7, #12]
 8012a44:	68db      	ldr	r3, [r3, #12]
 8012a46:	899b      	ldrh	r3, [r3, #12]
 8012a48:	b29b      	uxth	r3, r3
 8012a4a:	4618      	mov	r0, r3
 8012a4c:	f7f9 f89e 	bl	800bb8c <lwip_htons>
 8012a50:	4603      	mov	r3, r0
 8012a52:	b2db      	uxtb	r3, r3
 8012a54:	f003 0307 	and.w	r3, r3, #7
 8012a58:	2b00      	cmp	r3, #0
 8012a5a:	d116      	bne.n	8012a8a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8012a5c:	68fb      	ldr	r3, [r7, #12]
 8012a5e:	68db      	ldr	r3, [r3, #12]
 8012a60:	899b      	ldrh	r3, [r3, #12]
 8012a62:	b29c      	uxth	r4, r3
 8012a64:	2001      	movs	r0, #1
 8012a66:	f7f9 f891 	bl	800bb8c <lwip_htons>
 8012a6a:	4603      	mov	r3, r0
 8012a6c:	461a      	mov	r2, r3
 8012a6e:	68fb      	ldr	r3, [r7, #12]
 8012a70:	68db      	ldr	r3, [r3, #12]
 8012a72:	4322      	orrs	r2, r4
 8012a74:	b292      	uxth	r2, r2
 8012a76:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8012a78:	687b      	ldr	r3, [r7, #4]
 8012a7a:	8b5b      	ldrh	r3, [r3, #26]
 8012a7c:	f043 0320 	orr.w	r3, r3, #32
 8012a80:	b29a      	uxth	r2, r3
 8012a82:	687b      	ldr	r3, [r7, #4]
 8012a84:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8012a86:	2300      	movs	r3, #0
 8012a88:	e004      	b.n	8012a94 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8012a8a:	2101      	movs	r1, #1
 8012a8c:	6878      	ldr	r0, [r7, #4]
 8012a8e:	f000 f80b 	bl	8012aa8 <tcp_enqueue_flags>
 8012a92:	4603      	mov	r3, r0
}
 8012a94:	4618      	mov	r0, r3
 8012a96:	3714      	adds	r7, #20
 8012a98:	46bd      	mov	sp, r7
 8012a9a:	bd90      	pop	{r4, r7, pc}
 8012a9c:	08019d94 	.word	0x08019d94
 8012aa0:	0801a19c 	.word	0x0801a19c
 8012aa4:	08019de8 	.word	0x08019de8

08012aa8 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8012aa8:	b580      	push	{r7, lr}
 8012aaa:	b08a      	sub	sp, #40	; 0x28
 8012aac:	af02      	add	r7, sp, #8
 8012aae:	6078      	str	r0, [r7, #4]
 8012ab0:	460b      	mov	r3, r1
 8012ab2:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8012ab4:	2300      	movs	r3, #0
 8012ab6:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8012ab8:	2300      	movs	r3, #0
 8012aba:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8012abc:	78fb      	ldrb	r3, [r7, #3]
 8012abe:	f003 0303 	and.w	r3, r3, #3
 8012ac2:	2b00      	cmp	r3, #0
 8012ac4:	d106      	bne.n	8012ad4 <tcp_enqueue_flags+0x2c>
 8012ac6:	4b67      	ldr	r3, [pc, #412]	; (8012c64 <tcp_enqueue_flags+0x1bc>)
 8012ac8:	f240 4211 	movw	r2, #1041	; 0x411
 8012acc:	4966      	ldr	r1, [pc, #408]	; (8012c68 <tcp_enqueue_flags+0x1c0>)
 8012ace:	4867      	ldr	r0, [pc, #412]	; (8012c6c <tcp_enqueue_flags+0x1c4>)
 8012ad0:	f003 feb6 	bl	8016840 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8012ad4:	687b      	ldr	r3, [r7, #4]
 8012ad6:	2b00      	cmp	r3, #0
 8012ad8:	d106      	bne.n	8012ae8 <tcp_enqueue_flags+0x40>
 8012ada:	4b62      	ldr	r3, [pc, #392]	; (8012c64 <tcp_enqueue_flags+0x1bc>)
 8012adc:	f240 4213 	movw	r2, #1043	; 0x413
 8012ae0:	4963      	ldr	r1, [pc, #396]	; (8012c70 <tcp_enqueue_flags+0x1c8>)
 8012ae2:	4862      	ldr	r0, [pc, #392]	; (8012c6c <tcp_enqueue_flags+0x1c4>)
 8012ae4:	f003 feac 	bl	8016840 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8012ae8:	78fb      	ldrb	r3, [r7, #3]
 8012aea:	f003 0302 	and.w	r3, r3, #2
 8012aee:	2b00      	cmp	r3, #0
 8012af0:	d001      	beq.n	8012af6 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8012af2:	2301      	movs	r3, #1
 8012af4:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8012af6:	7ffb      	ldrb	r3, [r7, #31]
 8012af8:	009b      	lsls	r3, r3, #2
 8012afa:	b2db      	uxtb	r3, r3
 8012afc:	f003 0304 	and.w	r3, r3, #4
 8012b00:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8012b02:	7dfb      	ldrb	r3, [r7, #23]
 8012b04:	b29b      	uxth	r3, r3
 8012b06:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012b0a:	4619      	mov	r1, r3
 8012b0c:	2036      	movs	r0, #54	; 0x36
 8012b0e:	f7fa f8df 	bl	800ccd0 <pbuf_alloc>
 8012b12:	6138      	str	r0, [r7, #16]
 8012b14:	693b      	ldr	r3, [r7, #16]
 8012b16:	2b00      	cmp	r3, #0
 8012b18:	d109      	bne.n	8012b2e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012b1a:	687b      	ldr	r3, [r7, #4]
 8012b1c:	8b5b      	ldrh	r3, [r3, #26]
 8012b1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012b22:	b29a      	uxth	r2, r3
 8012b24:	687b      	ldr	r3, [r7, #4]
 8012b26:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8012b28:	f04f 33ff 	mov.w	r3, #4294967295
 8012b2c:	e095      	b.n	8012c5a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8012b2e:	693b      	ldr	r3, [r7, #16]
 8012b30:	895a      	ldrh	r2, [r3, #10]
 8012b32:	7dfb      	ldrb	r3, [r7, #23]
 8012b34:	b29b      	uxth	r3, r3
 8012b36:	429a      	cmp	r2, r3
 8012b38:	d206      	bcs.n	8012b48 <tcp_enqueue_flags+0xa0>
 8012b3a:	4b4a      	ldr	r3, [pc, #296]	; (8012c64 <tcp_enqueue_flags+0x1bc>)
 8012b3c:	f240 4239 	movw	r2, #1081	; 0x439
 8012b40:	494c      	ldr	r1, [pc, #304]	; (8012c74 <tcp_enqueue_flags+0x1cc>)
 8012b42:	484a      	ldr	r0, [pc, #296]	; (8012c6c <tcp_enqueue_flags+0x1c4>)
 8012b44:	f003 fe7c 	bl	8016840 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8012b48:	687b      	ldr	r3, [r7, #4]
 8012b4a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8012b4c:	78fa      	ldrb	r2, [r7, #3]
 8012b4e:	7ffb      	ldrb	r3, [r7, #31]
 8012b50:	9300      	str	r3, [sp, #0]
 8012b52:	460b      	mov	r3, r1
 8012b54:	6939      	ldr	r1, [r7, #16]
 8012b56:	6878      	ldr	r0, [r7, #4]
 8012b58:	f7ff f918 	bl	8011d8c <tcp_create_segment>
 8012b5c:	60f8      	str	r0, [r7, #12]
 8012b5e:	68fb      	ldr	r3, [r7, #12]
 8012b60:	2b00      	cmp	r3, #0
 8012b62:	d109      	bne.n	8012b78 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012b64:	687b      	ldr	r3, [r7, #4]
 8012b66:	8b5b      	ldrh	r3, [r3, #26]
 8012b68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012b6c:	b29a      	uxth	r2, r3
 8012b6e:	687b      	ldr	r3, [r7, #4]
 8012b70:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8012b72:	f04f 33ff 	mov.w	r3, #4294967295
 8012b76:	e070      	b.n	8012c5a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8012b78:	68fb      	ldr	r3, [r7, #12]
 8012b7a:	68db      	ldr	r3, [r3, #12]
 8012b7c:	f003 0303 	and.w	r3, r3, #3
 8012b80:	2b00      	cmp	r3, #0
 8012b82:	d006      	beq.n	8012b92 <tcp_enqueue_flags+0xea>
 8012b84:	4b37      	ldr	r3, [pc, #220]	; (8012c64 <tcp_enqueue_flags+0x1bc>)
 8012b86:	f240 4242 	movw	r2, #1090	; 0x442
 8012b8a:	493b      	ldr	r1, [pc, #236]	; (8012c78 <tcp_enqueue_flags+0x1d0>)
 8012b8c:	4837      	ldr	r0, [pc, #220]	; (8012c6c <tcp_enqueue_flags+0x1c4>)
 8012b8e:	f003 fe57 	bl	8016840 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8012b92:	68fb      	ldr	r3, [r7, #12]
 8012b94:	891b      	ldrh	r3, [r3, #8]
 8012b96:	2b00      	cmp	r3, #0
 8012b98:	d006      	beq.n	8012ba8 <tcp_enqueue_flags+0x100>
 8012b9a:	4b32      	ldr	r3, [pc, #200]	; (8012c64 <tcp_enqueue_flags+0x1bc>)
 8012b9c:	f240 4243 	movw	r2, #1091	; 0x443
 8012ba0:	4936      	ldr	r1, [pc, #216]	; (8012c7c <tcp_enqueue_flags+0x1d4>)
 8012ba2:	4832      	ldr	r0, [pc, #200]	; (8012c6c <tcp_enqueue_flags+0x1c4>)
 8012ba4:	f003 fe4c 	bl	8016840 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8012ba8:	687b      	ldr	r3, [r7, #4]
 8012baa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012bac:	2b00      	cmp	r3, #0
 8012bae:	d103      	bne.n	8012bb8 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8012bb0:	687b      	ldr	r3, [r7, #4]
 8012bb2:	68fa      	ldr	r2, [r7, #12]
 8012bb4:	66da      	str	r2, [r3, #108]	; 0x6c
 8012bb6:	e00d      	b.n	8012bd4 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8012bb8:	687b      	ldr	r3, [r7, #4]
 8012bba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012bbc:	61bb      	str	r3, [r7, #24]
 8012bbe:	e002      	b.n	8012bc6 <tcp_enqueue_flags+0x11e>
 8012bc0:	69bb      	ldr	r3, [r7, #24]
 8012bc2:	681b      	ldr	r3, [r3, #0]
 8012bc4:	61bb      	str	r3, [r7, #24]
 8012bc6:	69bb      	ldr	r3, [r7, #24]
 8012bc8:	681b      	ldr	r3, [r3, #0]
 8012bca:	2b00      	cmp	r3, #0
 8012bcc:	d1f8      	bne.n	8012bc0 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8012bce:	69bb      	ldr	r3, [r7, #24]
 8012bd0:	68fa      	ldr	r2, [r7, #12]
 8012bd2:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8012bd4:	687b      	ldr	r3, [r7, #4]
 8012bd6:	2200      	movs	r2, #0
 8012bd8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8012bdc:	78fb      	ldrb	r3, [r7, #3]
 8012bde:	f003 0302 	and.w	r3, r3, #2
 8012be2:	2b00      	cmp	r3, #0
 8012be4:	d104      	bne.n	8012bf0 <tcp_enqueue_flags+0x148>
 8012be6:	78fb      	ldrb	r3, [r7, #3]
 8012be8:	f003 0301 	and.w	r3, r3, #1
 8012bec:	2b00      	cmp	r3, #0
 8012bee:	d004      	beq.n	8012bfa <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8012bf0:	687b      	ldr	r3, [r7, #4]
 8012bf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012bf4:	1c5a      	adds	r2, r3, #1
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8012bfa:	78fb      	ldrb	r3, [r7, #3]
 8012bfc:	f003 0301 	and.w	r3, r3, #1
 8012c00:	2b00      	cmp	r3, #0
 8012c02:	d006      	beq.n	8012c12 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8012c04:	687b      	ldr	r3, [r7, #4]
 8012c06:	8b5b      	ldrh	r3, [r3, #26]
 8012c08:	f043 0320 	orr.w	r3, r3, #32
 8012c0c:	b29a      	uxth	r2, r3
 8012c0e:	687b      	ldr	r3, [r7, #4]
 8012c10:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8012c12:	68fb      	ldr	r3, [r7, #12]
 8012c14:	685b      	ldr	r3, [r3, #4]
 8012c16:	4618      	mov	r0, r3
 8012c18:	f7fa fbc6 	bl	800d3a8 <pbuf_clen>
 8012c1c:	4603      	mov	r3, r0
 8012c1e:	461a      	mov	r2, r3
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012c26:	4413      	add	r3, r2
 8012c28:	b29a      	uxth	r2, r3
 8012c2a:	687b      	ldr	r3, [r7, #4]
 8012c2c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8012c30:	687b      	ldr	r3, [r7, #4]
 8012c32:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012c36:	2b00      	cmp	r3, #0
 8012c38:	d00e      	beq.n	8012c58 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8012c3a:	687b      	ldr	r3, [r7, #4]
 8012c3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012c3e:	2b00      	cmp	r3, #0
 8012c40:	d10a      	bne.n	8012c58 <tcp_enqueue_flags+0x1b0>
 8012c42:	687b      	ldr	r3, [r7, #4]
 8012c44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012c46:	2b00      	cmp	r3, #0
 8012c48:	d106      	bne.n	8012c58 <tcp_enqueue_flags+0x1b0>
 8012c4a:	4b06      	ldr	r3, [pc, #24]	; (8012c64 <tcp_enqueue_flags+0x1bc>)
 8012c4c:	f240 4265 	movw	r2, #1125	; 0x465
 8012c50:	490b      	ldr	r1, [pc, #44]	; (8012c80 <tcp_enqueue_flags+0x1d8>)
 8012c52:	4806      	ldr	r0, [pc, #24]	; (8012c6c <tcp_enqueue_flags+0x1c4>)
 8012c54:	f003 fdf4 	bl	8016840 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8012c58:	2300      	movs	r3, #0
}
 8012c5a:	4618      	mov	r0, r3
 8012c5c:	3720      	adds	r7, #32
 8012c5e:	46bd      	mov	sp, r7
 8012c60:	bd80      	pop	{r7, pc}
 8012c62:	bf00      	nop
 8012c64:	08019d94 	.word	0x08019d94
 8012c68:	0801a1b8 	.word	0x0801a1b8
 8012c6c:	08019de8 	.word	0x08019de8
 8012c70:	0801a210 	.word	0x0801a210
 8012c74:	0801a230 	.word	0x0801a230
 8012c78:	0801a26c 	.word	0x0801a26c
 8012c7c:	0801a284 	.word	0x0801a284
 8012c80:	0801a2b0 	.word	0x0801a2b0

08012c84 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8012c84:	b5b0      	push	{r4, r5, r7, lr}
 8012c86:	b08a      	sub	sp, #40	; 0x28
 8012c88:	af00      	add	r7, sp, #0
 8012c8a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8012c8c:	687b      	ldr	r3, [r7, #4]
 8012c8e:	2b00      	cmp	r3, #0
 8012c90:	d106      	bne.n	8012ca0 <tcp_output+0x1c>
 8012c92:	4b8a      	ldr	r3, [pc, #552]	; (8012ebc <tcp_output+0x238>)
 8012c94:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8012c98:	4989      	ldr	r1, [pc, #548]	; (8012ec0 <tcp_output+0x23c>)
 8012c9a:	488a      	ldr	r0, [pc, #552]	; (8012ec4 <tcp_output+0x240>)
 8012c9c:	f003 fdd0 	bl	8016840 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8012ca0:	687b      	ldr	r3, [r7, #4]
 8012ca2:	7d1b      	ldrb	r3, [r3, #20]
 8012ca4:	2b01      	cmp	r3, #1
 8012ca6:	d106      	bne.n	8012cb6 <tcp_output+0x32>
 8012ca8:	4b84      	ldr	r3, [pc, #528]	; (8012ebc <tcp_output+0x238>)
 8012caa:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8012cae:	4986      	ldr	r1, [pc, #536]	; (8012ec8 <tcp_output+0x244>)
 8012cb0:	4884      	ldr	r0, [pc, #528]	; (8012ec4 <tcp_output+0x240>)
 8012cb2:	f003 fdc5 	bl	8016840 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8012cb6:	4b85      	ldr	r3, [pc, #532]	; (8012ecc <tcp_output+0x248>)
 8012cb8:	681b      	ldr	r3, [r3, #0]
 8012cba:	687a      	ldr	r2, [r7, #4]
 8012cbc:	429a      	cmp	r2, r3
 8012cbe:	d101      	bne.n	8012cc4 <tcp_output+0x40>
    return ERR_OK;
 8012cc0:	2300      	movs	r3, #0
 8012cc2:	e1ce      	b.n	8013062 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8012cc4:	687b      	ldr	r3, [r7, #4]
 8012cc6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012cca:	687b      	ldr	r3, [r7, #4]
 8012ccc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012cd0:	4293      	cmp	r3, r2
 8012cd2:	bf28      	it	cs
 8012cd4:	4613      	movcs	r3, r2
 8012cd6:	b29b      	uxth	r3, r3
 8012cd8:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8012cda:	687b      	ldr	r3, [r7, #4]
 8012cdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012cde:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8012ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ce2:	2b00      	cmp	r3, #0
 8012ce4:	d10b      	bne.n	8012cfe <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8012ce6:	687b      	ldr	r3, [r7, #4]
 8012ce8:	8b5b      	ldrh	r3, [r3, #26]
 8012cea:	f003 0302 	and.w	r3, r3, #2
 8012cee:	2b00      	cmp	r3, #0
 8012cf0:	f000 81aa 	beq.w	8013048 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8012cf4:	6878      	ldr	r0, [r7, #4]
 8012cf6:	f000 fdcb 	bl	8013890 <tcp_send_empty_ack>
 8012cfa:	4603      	mov	r3, r0
 8012cfc:	e1b1      	b.n	8013062 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8012cfe:	6879      	ldr	r1, [r7, #4]
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	3304      	adds	r3, #4
 8012d04:	461a      	mov	r2, r3
 8012d06:	6878      	ldr	r0, [r7, #4]
 8012d08:	f7ff f824 	bl	8011d54 <tcp_route>
 8012d0c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8012d0e:	697b      	ldr	r3, [r7, #20]
 8012d10:	2b00      	cmp	r3, #0
 8012d12:	d102      	bne.n	8012d1a <tcp_output+0x96>
    return ERR_RTE;
 8012d14:	f06f 0303 	mvn.w	r3, #3
 8012d18:	e1a3      	b.n	8013062 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8012d1a:	687b      	ldr	r3, [r7, #4]
 8012d1c:	2b00      	cmp	r3, #0
 8012d1e:	d003      	beq.n	8012d28 <tcp_output+0xa4>
 8012d20:	687b      	ldr	r3, [r7, #4]
 8012d22:	681b      	ldr	r3, [r3, #0]
 8012d24:	2b00      	cmp	r3, #0
 8012d26:	d111      	bne.n	8012d4c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8012d28:	697b      	ldr	r3, [r7, #20]
 8012d2a:	2b00      	cmp	r3, #0
 8012d2c:	d002      	beq.n	8012d34 <tcp_output+0xb0>
 8012d2e:	697b      	ldr	r3, [r7, #20]
 8012d30:	3304      	adds	r3, #4
 8012d32:	e000      	b.n	8012d36 <tcp_output+0xb2>
 8012d34:	2300      	movs	r3, #0
 8012d36:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8012d38:	693b      	ldr	r3, [r7, #16]
 8012d3a:	2b00      	cmp	r3, #0
 8012d3c:	d102      	bne.n	8012d44 <tcp_output+0xc0>
      return ERR_RTE;
 8012d3e:	f06f 0303 	mvn.w	r3, #3
 8012d42:	e18e      	b.n	8013062 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8012d44:	693b      	ldr	r3, [r7, #16]
 8012d46:	681a      	ldr	r2, [r3, #0]
 8012d48:	687b      	ldr	r3, [r7, #4]
 8012d4a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8012d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d4e:	68db      	ldr	r3, [r3, #12]
 8012d50:	685b      	ldr	r3, [r3, #4]
 8012d52:	4618      	mov	r0, r3
 8012d54:	f7f8 ff2f 	bl	800bbb6 <lwip_htonl>
 8012d58:	4602      	mov	r2, r0
 8012d5a:	687b      	ldr	r3, [r7, #4]
 8012d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012d5e:	1ad3      	subs	r3, r2, r3
 8012d60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012d62:	8912      	ldrh	r2, [r2, #8]
 8012d64:	4413      	add	r3, r2
 8012d66:	69ba      	ldr	r2, [r7, #24]
 8012d68:	429a      	cmp	r2, r3
 8012d6a:	d227      	bcs.n	8012dbc <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8012d6c:	687b      	ldr	r3, [r7, #4]
 8012d6e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012d72:	461a      	mov	r2, r3
 8012d74:	69bb      	ldr	r3, [r7, #24]
 8012d76:	4293      	cmp	r3, r2
 8012d78:	d114      	bne.n	8012da4 <tcp_output+0x120>
 8012d7a:	687b      	ldr	r3, [r7, #4]
 8012d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012d7e:	2b00      	cmp	r3, #0
 8012d80:	d110      	bne.n	8012da4 <tcp_output+0x120>
 8012d82:	687b      	ldr	r3, [r7, #4]
 8012d84:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8012d88:	2b00      	cmp	r3, #0
 8012d8a:	d10b      	bne.n	8012da4 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8012d8c:	687b      	ldr	r3, [r7, #4]
 8012d8e:	2200      	movs	r2, #0
 8012d90:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8012d94:	687b      	ldr	r3, [r7, #4]
 8012d96:	2201      	movs	r2, #1
 8012d98:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8012d9c:	687b      	ldr	r3, [r7, #4]
 8012d9e:	2200      	movs	r2, #0
 8012da0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8012da4:	687b      	ldr	r3, [r7, #4]
 8012da6:	8b5b      	ldrh	r3, [r3, #26]
 8012da8:	f003 0302 	and.w	r3, r3, #2
 8012dac:	2b00      	cmp	r3, #0
 8012dae:	f000 814d 	beq.w	801304c <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8012db2:	6878      	ldr	r0, [r7, #4]
 8012db4:	f000 fd6c 	bl	8013890 <tcp_send_empty_ack>
 8012db8:	4603      	mov	r3, r0
 8012dba:	e152      	b.n	8013062 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8012dbc:	687b      	ldr	r3, [r7, #4]
 8012dbe:	2200      	movs	r2, #0
 8012dc0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8012dc4:	687b      	ldr	r3, [r7, #4]
 8012dc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012dc8:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8012dca:	6a3b      	ldr	r3, [r7, #32]
 8012dcc:	2b00      	cmp	r3, #0
 8012dce:	f000 811c 	beq.w	801300a <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8012dd2:	e002      	b.n	8012dda <tcp_output+0x156>
 8012dd4:	6a3b      	ldr	r3, [r7, #32]
 8012dd6:	681b      	ldr	r3, [r3, #0]
 8012dd8:	623b      	str	r3, [r7, #32]
 8012dda:	6a3b      	ldr	r3, [r7, #32]
 8012ddc:	681b      	ldr	r3, [r3, #0]
 8012dde:	2b00      	cmp	r3, #0
 8012de0:	d1f8      	bne.n	8012dd4 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8012de2:	e112      	b.n	801300a <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8012de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012de6:	68db      	ldr	r3, [r3, #12]
 8012de8:	899b      	ldrh	r3, [r3, #12]
 8012dea:	b29b      	uxth	r3, r3
 8012dec:	4618      	mov	r0, r3
 8012dee:	f7f8 fecd 	bl	800bb8c <lwip_htons>
 8012df2:	4603      	mov	r3, r0
 8012df4:	b2db      	uxtb	r3, r3
 8012df6:	f003 0304 	and.w	r3, r3, #4
 8012dfa:	2b00      	cmp	r3, #0
 8012dfc:	d006      	beq.n	8012e0c <tcp_output+0x188>
 8012dfe:	4b2f      	ldr	r3, [pc, #188]	; (8012ebc <tcp_output+0x238>)
 8012e00:	f240 5236 	movw	r2, #1334	; 0x536
 8012e04:	4932      	ldr	r1, [pc, #200]	; (8012ed0 <tcp_output+0x24c>)
 8012e06:	482f      	ldr	r0, [pc, #188]	; (8012ec4 <tcp_output+0x240>)
 8012e08:	f003 fd1a 	bl	8016840 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012e10:	2b00      	cmp	r3, #0
 8012e12:	d01f      	beq.n	8012e54 <tcp_output+0x1d0>
 8012e14:	687b      	ldr	r3, [r7, #4]
 8012e16:	8b5b      	ldrh	r3, [r3, #26]
 8012e18:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8012e1c:	2b00      	cmp	r3, #0
 8012e1e:	d119      	bne.n	8012e54 <tcp_output+0x1d0>
 8012e20:	687b      	ldr	r3, [r7, #4]
 8012e22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012e24:	2b00      	cmp	r3, #0
 8012e26:	d00b      	beq.n	8012e40 <tcp_output+0x1bc>
 8012e28:	687b      	ldr	r3, [r7, #4]
 8012e2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012e2c:	681b      	ldr	r3, [r3, #0]
 8012e2e:	2b00      	cmp	r3, #0
 8012e30:	d110      	bne.n	8012e54 <tcp_output+0x1d0>
 8012e32:	687b      	ldr	r3, [r7, #4]
 8012e34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012e36:	891a      	ldrh	r2, [r3, #8]
 8012e38:	687b      	ldr	r3, [r7, #4]
 8012e3a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012e3c:	429a      	cmp	r2, r3
 8012e3e:	d209      	bcs.n	8012e54 <tcp_output+0x1d0>
 8012e40:	687b      	ldr	r3, [r7, #4]
 8012e42:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8012e46:	2b00      	cmp	r3, #0
 8012e48:	d004      	beq.n	8012e54 <tcp_output+0x1d0>
 8012e4a:	687b      	ldr	r3, [r7, #4]
 8012e4c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012e50:	2b08      	cmp	r3, #8
 8012e52:	d901      	bls.n	8012e58 <tcp_output+0x1d4>
 8012e54:	2301      	movs	r3, #1
 8012e56:	e000      	b.n	8012e5a <tcp_output+0x1d6>
 8012e58:	2300      	movs	r3, #0
 8012e5a:	2b00      	cmp	r3, #0
 8012e5c:	d106      	bne.n	8012e6c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8012e5e:	687b      	ldr	r3, [r7, #4]
 8012e60:	8b5b      	ldrh	r3, [r3, #26]
 8012e62:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8012e66:	2b00      	cmp	r3, #0
 8012e68:	f000 80e4 	beq.w	8013034 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8012e6c:	687b      	ldr	r3, [r7, #4]
 8012e6e:	7d1b      	ldrb	r3, [r3, #20]
 8012e70:	2b02      	cmp	r3, #2
 8012e72:	d00d      	beq.n	8012e90 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8012e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e76:	68db      	ldr	r3, [r3, #12]
 8012e78:	899b      	ldrh	r3, [r3, #12]
 8012e7a:	b29c      	uxth	r4, r3
 8012e7c:	2010      	movs	r0, #16
 8012e7e:	f7f8 fe85 	bl	800bb8c <lwip_htons>
 8012e82:	4603      	mov	r3, r0
 8012e84:	461a      	mov	r2, r3
 8012e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e88:	68db      	ldr	r3, [r3, #12]
 8012e8a:	4322      	orrs	r2, r4
 8012e8c:	b292      	uxth	r2, r2
 8012e8e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8012e90:	697a      	ldr	r2, [r7, #20]
 8012e92:	6879      	ldr	r1, [r7, #4]
 8012e94:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012e96:	f000 f909 	bl	80130ac <tcp_output_segment>
 8012e9a:	4603      	mov	r3, r0
 8012e9c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8012e9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012ea2:	2b00      	cmp	r3, #0
 8012ea4:	d016      	beq.n	8012ed4 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012ea6:	687b      	ldr	r3, [r7, #4]
 8012ea8:	8b5b      	ldrh	r3, [r3, #26]
 8012eaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012eae:	b29a      	uxth	r2, r3
 8012eb0:	687b      	ldr	r3, [r7, #4]
 8012eb2:	835a      	strh	r2, [r3, #26]
      return err;
 8012eb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012eb8:	e0d3      	b.n	8013062 <tcp_output+0x3de>
 8012eba:	bf00      	nop
 8012ebc:	08019d94 	.word	0x08019d94
 8012ec0:	0801a2d8 	.word	0x0801a2d8
 8012ec4:	08019de8 	.word	0x08019de8
 8012ec8:	0801a2f0 	.word	0x0801a2f0
 8012ecc:	20008bf4 	.word	0x20008bf4
 8012ed0:	0801a318 	.word	0x0801a318
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8012ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ed6:	681a      	ldr	r2, [r3, #0]
 8012ed8:	687b      	ldr	r3, [r7, #4]
 8012eda:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8012edc:	687b      	ldr	r3, [r7, #4]
 8012ede:	7d1b      	ldrb	r3, [r3, #20]
 8012ee0:	2b02      	cmp	r3, #2
 8012ee2:	d006      	beq.n	8012ef2 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012ee4:	687b      	ldr	r3, [r7, #4]
 8012ee6:	8b5b      	ldrh	r3, [r3, #26]
 8012ee8:	f023 0303 	bic.w	r3, r3, #3
 8012eec:	b29a      	uxth	r2, r3
 8012eee:	687b      	ldr	r3, [r7, #4]
 8012ef0:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8012ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ef4:	68db      	ldr	r3, [r3, #12]
 8012ef6:	685b      	ldr	r3, [r3, #4]
 8012ef8:	4618      	mov	r0, r3
 8012efa:	f7f8 fe5c 	bl	800bbb6 <lwip_htonl>
 8012efe:	4604      	mov	r4, r0
 8012f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f02:	891b      	ldrh	r3, [r3, #8]
 8012f04:	461d      	mov	r5, r3
 8012f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f08:	68db      	ldr	r3, [r3, #12]
 8012f0a:	899b      	ldrh	r3, [r3, #12]
 8012f0c:	b29b      	uxth	r3, r3
 8012f0e:	4618      	mov	r0, r3
 8012f10:	f7f8 fe3c 	bl	800bb8c <lwip_htons>
 8012f14:	4603      	mov	r3, r0
 8012f16:	b2db      	uxtb	r3, r3
 8012f18:	f003 0303 	and.w	r3, r3, #3
 8012f1c:	2b00      	cmp	r3, #0
 8012f1e:	d001      	beq.n	8012f24 <tcp_output+0x2a0>
 8012f20:	2301      	movs	r3, #1
 8012f22:	e000      	b.n	8012f26 <tcp_output+0x2a2>
 8012f24:	2300      	movs	r3, #0
 8012f26:	442b      	add	r3, r5
 8012f28:	4423      	add	r3, r4
 8012f2a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8012f2c:	687b      	ldr	r3, [r7, #4]
 8012f2e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012f30:	68bb      	ldr	r3, [r7, #8]
 8012f32:	1ad3      	subs	r3, r2, r3
 8012f34:	2b00      	cmp	r3, #0
 8012f36:	da02      	bge.n	8012f3e <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8012f38:	687b      	ldr	r3, [r7, #4]
 8012f3a:	68ba      	ldr	r2, [r7, #8]
 8012f3c:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8012f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f40:	891b      	ldrh	r3, [r3, #8]
 8012f42:	461c      	mov	r4, r3
 8012f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f46:	68db      	ldr	r3, [r3, #12]
 8012f48:	899b      	ldrh	r3, [r3, #12]
 8012f4a:	b29b      	uxth	r3, r3
 8012f4c:	4618      	mov	r0, r3
 8012f4e:	f7f8 fe1d 	bl	800bb8c <lwip_htons>
 8012f52:	4603      	mov	r3, r0
 8012f54:	b2db      	uxtb	r3, r3
 8012f56:	f003 0303 	and.w	r3, r3, #3
 8012f5a:	2b00      	cmp	r3, #0
 8012f5c:	d001      	beq.n	8012f62 <tcp_output+0x2de>
 8012f5e:	2301      	movs	r3, #1
 8012f60:	e000      	b.n	8012f64 <tcp_output+0x2e0>
 8012f62:	2300      	movs	r3, #0
 8012f64:	4423      	add	r3, r4
 8012f66:	2b00      	cmp	r3, #0
 8012f68:	d049      	beq.n	8012ffe <tcp_output+0x37a>
      seg->next = NULL;
 8012f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f6c:	2200      	movs	r2, #0
 8012f6e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8012f70:	687b      	ldr	r3, [r7, #4]
 8012f72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012f74:	2b00      	cmp	r3, #0
 8012f76:	d105      	bne.n	8012f84 <tcp_output+0x300>
        pcb->unacked = seg;
 8012f78:	687b      	ldr	r3, [r7, #4]
 8012f7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012f7c:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8012f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f80:	623b      	str	r3, [r7, #32]
 8012f82:	e03f      	b.n	8013004 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8012f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f86:	68db      	ldr	r3, [r3, #12]
 8012f88:	685b      	ldr	r3, [r3, #4]
 8012f8a:	4618      	mov	r0, r3
 8012f8c:	f7f8 fe13 	bl	800bbb6 <lwip_htonl>
 8012f90:	4604      	mov	r4, r0
 8012f92:	6a3b      	ldr	r3, [r7, #32]
 8012f94:	68db      	ldr	r3, [r3, #12]
 8012f96:	685b      	ldr	r3, [r3, #4]
 8012f98:	4618      	mov	r0, r3
 8012f9a:	f7f8 fe0c 	bl	800bbb6 <lwip_htonl>
 8012f9e:	4603      	mov	r3, r0
 8012fa0:	1ae3      	subs	r3, r4, r3
 8012fa2:	2b00      	cmp	r3, #0
 8012fa4:	da24      	bge.n	8012ff0 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8012fa6:	687b      	ldr	r3, [r7, #4]
 8012fa8:	3370      	adds	r3, #112	; 0x70
 8012faa:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8012fac:	e002      	b.n	8012fb4 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8012fae:	69fb      	ldr	r3, [r7, #28]
 8012fb0:	681b      	ldr	r3, [r3, #0]
 8012fb2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8012fb4:	69fb      	ldr	r3, [r7, #28]
 8012fb6:	681b      	ldr	r3, [r3, #0]
 8012fb8:	2b00      	cmp	r3, #0
 8012fba:	d011      	beq.n	8012fe0 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012fbc:	69fb      	ldr	r3, [r7, #28]
 8012fbe:	681b      	ldr	r3, [r3, #0]
 8012fc0:	68db      	ldr	r3, [r3, #12]
 8012fc2:	685b      	ldr	r3, [r3, #4]
 8012fc4:	4618      	mov	r0, r3
 8012fc6:	f7f8 fdf6 	bl	800bbb6 <lwip_htonl>
 8012fca:	4604      	mov	r4, r0
 8012fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fce:	68db      	ldr	r3, [r3, #12]
 8012fd0:	685b      	ldr	r3, [r3, #4]
 8012fd2:	4618      	mov	r0, r3
 8012fd4:	f7f8 fdef 	bl	800bbb6 <lwip_htonl>
 8012fd8:	4603      	mov	r3, r0
 8012fda:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8012fdc:	2b00      	cmp	r3, #0
 8012fde:	dbe6      	blt.n	8012fae <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8012fe0:	69fb      	ldr	r3, [r7, #28]
 8012fe2:	681a      	ldr	r2, [r3, #0]
 8012fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fe6:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8012fe8:	69fb      	ldr	r3, [r7, #28]
 8012fea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012fec:	601a      	str	r2, [r3, #0]
 8012fee:	e009      	b.n	8013004 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8012ff0:	6a3b      	ldr	r3, [r7, #32]
 8012ff2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012ff4:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8012ff6:	6a3b      	ldr	r3, [r7, #32]
 8012ff8:	681b      	ldr	r3, [r3, #0]
 8012ffa:	623b      	str	r3, [r7, #32]
 8012ffc:	e002      	b.n	8013004 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8012ffe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013000:	f7fb fef3 	bl	800edea <tcp_seg_free>
    }
    seg = pcb->unsent;
 8013004:	687b      	ldr	r3, [r7, #4]
 8013006:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013008:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 801300a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801300c:	2b00      	cmp	r3, #0
 801300e:	d012      	beq.n	8013036 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8013010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013012:	68db      	ldr	r3, [r3, #12]
 8013014:	685b      	ldr	r3, [r3, #4]
 8013016:	4618      	mov	r0, r3
 8013018:	f7f8 fdcd 	bl	800bbb6 <lwip_htonl>
 801301c:	4602      	mov	r2, r0
 801301e:	687b      	ldr	r3, [r7, #4]
 8013020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013022:	1ad3      	subs	r3, r2, r3
 8013024:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013026:	8912      	ldrh	r2, [r2, #8]
 8013028:	4413      	add	r3, r2
  while (seg != NULL &&
 801302a:	69ba      	ldr	r2, [r7, #24]
 801302c:	429a      	cmp	r2, r3
 801302e:	f4bf aed9 	bcs.w	8012de4 <tcp_output+0x160>
 8013032:	e000      	b.n	8013036 <tcp_output+0x3b2>
      break;
 8013034:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8013036:	687b      	ldr	r3, [r7, #4]
 8013038:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801303a:	2b00      	cmp	r3, #0
 801303c:	d108      	bne.n	8013050 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801303e:	687b      	ldr	r3, [r7, #4]
 8013040:	2200      	movs	r2, #0
 8013042:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8013046:	e004      	b.n	8013052 <tcp_output+0x3ce>
    goto output_done;
 8013048:	bf00      	nop
 801304a:	e002      	b.n	8013052 <tcp_output+0x3ce>
    goto output_done;
 801304c:	bf00      	nop
 801304e:	e000      	b.n	8013052 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8013050:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8013052:	687b      	ldr	r3, [r7, #4]
 8013054:	8b5b      	ldrh	r3, [r3, #26]
 8013056:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801305a:	b29a      	uxth	r2, r3
 801305c:	687b      	ldr	r3, [r7, #4]
 801305e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8013060:	2300      	movs	r3, #0
}
 8013062:	4618      	mov	r0, r3
 8013064:	3728      	adds	r7, #40	; 0x28
 8013066:	46bd      	mov	sp, r7
 8013068:	bdb0      	pop	{r4, r5, r7, pc}
 801306a:	bf00      	nop

0801306c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801306c:	b580      	push	{r7, lr}
 801306e:	b082      	sub	sp, #8
 8013070:	af00      	add	r7, sp, #0
 8013072:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8013074:	687b      	ldr	r3, [r7, #4]
 8013076:	2b00      	cmp	r3, #0
 8013078:	d106      	bne.n	8013088 <tcp_output_segment_busy+0x1c>
 801307a:	4b09      	ldr	r3, [pc, #36]	; (80130a0 <tcp_output_segment_busy+0x34>)
 801307c:	f240 529a 	movw	r2, #1434	; 0x59a
 8013080:	4908      	ldr	r1, [pc, #32]	; (80130a4 <tcp_output_segment_busy+0x38>)
 8013082:	4809      	ldr	r0, [pc, #36]	; (80130a8 <tcp_output_segment_busy+0x3c>)
 8013084:	f003 fbdc 	bl	8016840 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8013088:	687b      	ldr	r3, [r7, #4]
 801308a:	685b      	ldr	r3, [r3, #4]
 801308c:	7b9b      	ldrb	r3, [r3, #14]
 801308e:	2b01      	cmp	r3, #1
 8013090:	d001      	beq.n	8013096 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8013092:	2301      	movs	r3, #1
 8013094:	e000      	b.n	8013098 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8013096:	2300      	movs	r3, #0
}
 8013098:	4618      	mov	r0, r3
 801309a:	3708      	adds	r7, #8
 801309c:	46bd      	mov	sp, r7
 801309e:	bd80      	pop	{r7, pc}
 80130a0:	08019d94 	.word	0x08019d94
 80130a4:	0801a330 	.word	0x0801a330
 80130a8:	08019de8 	.word	0x08019de8

080130ac <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80130ac:	b5b0      	push	{r4, r5, r7, lr}
 80130ae:	b08c      	sub	sp, #48	; 0x30
 80130b0:	af04      	add	r7, sp, #16
 80130b2:	60f8      	str	r0, [r7, #12]
 80130b4:	60b9      	str	r1, [r7, #8]
 80130b6:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 80130b8:	68fb      	ldr	r3, [r7, #12]
 80130ba:	2b00      	cmp	r3, #0
 80130bc:	d106      	bne.n	80130cc <tcp_output_segment+0x20>
 80130be:	4b63      	ldr	r3, [pc, #396]	; (801324c <tcp_output_segment+0x1a0>)
 80130c0:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 80130c4:	4962      	ldr	r1, [pc, #392]	; (8013250 <tcp_output_segment+0x1a4>)
 80130c6:	4863      	ldr	r0, [pc, #396]	; (8013254 <tcp_output_segment+0x1a8>)
 80130c8:	f003 fbba 	bl	8016840 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 80130cc:	68bb      	ldr	r3, [r7, #8]
 80130ce:	2b00      	cmp	r3, #0
 80130d0:	d106      	bne.n	80130e0 <tcp_output_segment+0x34>
 80130d2:	4b5e      	ldr	r3, [pc, #376]	; (801324c <tcp_output_segment+0x1a0>)
 80130d4:	f240 52b9 	movw	r2, #1465	; 0x5b9
 80130d8:	495f      	ldr	r1, [pc, #380]	; (8013258 <tcp_output_segment+0x1ac>)
 80130da:	485e      	ldr	r0, [pc, #376]	; (8013254 <tcp_output_segment+0x1a8>)
 80130dc:	f003 fbb0 	bl	8016840 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 80130e0:	687b      	ldr	r3, [r7, #4]
 80130e2:	2b00      	cmp	r3, #0
 80130e4:	d106      	bne.n	80130f4 <tcp_output_segment+0x48>
 80130e6:	4b59      	ldr	r3, [pc, #356]	; (801324c <tcp_output_segment+0x1a0>)
 80130e8:	f240 52ba 	movw	r2, #1466	; 0x5ba
 80130ec:	495b      	ldr	r1, [pc, #364]	; (801325c <tcp_output_segment+0x1b0>)
 80130ee:	4859      	ldr	r0, [pc, #356]	; (8013254 <tcp_output_segment+0x1a8>)
 80130f0:	f003 fba6 	bl	8016840 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 80130f4:	68f8      	ldr	r0, [r7, #12]
 80130f6:	f7ff ffb9 	bl	801306c <tcp_output_segment_busy>
 80130fa:	4603      	mov	r3, r0
 80130fc:	2b00      	cmp	r3, #0
 80130fe:	d001      	beq.n	8013104 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8013100:	2300      	movs	r3, #0
 8013102:	e09f      	b.n	8013244 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8013104:	68bb      	ldr	r3, [r7, #8]
 8013106:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013108:	68fb      	ldr	r3, [r7, #12]
 801310a:	68dc      	ldr	r4, [r3, #12]
 801310c:	4610      	mov	r0, r2
 801310e:	f7f8 fd52 	bl	800bbb6 <lwip_htonl>
 8013112:	4603      	mov	r3, r0
 8013114:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8013116:	68bb      	ldr	r3, [r7, #8]
 8013118:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801311a:	68fb      	ldr	r3, [r7, #12]
 801311c:	68dc      	ldr	r4, [r3, #12]
 801311e:	4610      	mov	r0, r2
 8013120:	f7f8 fd34 	bl	800bb8c <lwip_htons>
 8013124:	4603      	mov	r3, r0
 8013126:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8013128:	68bb      	ldr	r3, [r7, #8]
 801312a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801312c:	68ba      	ldr	r2, [r7, #8]
 801312e:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8013130:	441a      	add	r2, r3
 8013132:	68bb      	ldr	r3, [r7, #8]
 8013134:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8013136:	68fb      	ldr	r3, [r7, #12]
 8013138:	68db      	ldr	r3, [r3, #12]
 801313a:	3314      	adds	r3, #20
 801313c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801313e:	68fb      	ldr	r3, [r7, #12]
 8013140:	7a9b      	ldrb	r3, [r3, #10]
 8013142:	f003 0301 	and.w	r3, r3, #1
 8013146:	2b00      	cmp	r3, #0
 8013148:	d015      	beq.n	8013176 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801314a:	68bb      	ldr	r3, [r7, #8]
 801314c:	3304      	adds	r3, #4
 801314e:	461a      	mov	r2, r3
 8013150:	6879      	ldr	r1, [r7, #4]
 8013152:	f44f 7006 	mov.w	r0, #536	; 0x218
 8013156:	f7fc fa33 	bl	800f5c0 <tcp_eff_send_mss_netif>
 801315a:	4603      	mov	r3, r0
 801315c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801315e:	8b7b      	ldrh	r3, [r7, #26]
 8013160:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8013164:	4618      	mov	r0, r3
 8013166:	f7f8 fd26 	bl	800bbb6 <lwip_htonl>
 801316a:	4602      	mov	r2, r0
 801316c:	69fb      	ldr	r3, [r7, #28]
 801316e:	601a      	str	r2, [r3, #0]
    opts += 1;
 8013170:	69fb      	ldr	r3, [r7, #28]
 8013172:	3304      	adds	r3, #4
 8013174:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8013176:	68bb      	ldr	r3, [r7, #8]
 8013178:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801317c:	2b00      	cmp	r3, #0
 801317e:	da02      	bge.n	8013186 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8013180:	68bb      	ldr	r3, [r7, #8]
 8013182:	2200      	movs	r2, #0
 8013184:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8013186:	68bb      	ldr	r3, [r7, #8]
 8013188:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801318a:	2b00      	cmp	r3, #0
 801318c:	d10c      	bne.n	80131a8 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801318e:	4b34      	ldr	r3, [pc, #208]	; (8013260 <tcp_output_segment+0x1b4>)
 8013190:	681a      	ldr	r2, [r3, #0]
 8013192:	68bb      	ldr	r3, [r7, #8]
 8013194:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8013196:	68fb      	ldr	r3, [r7, #12]
 8013198:	68db      	ldr	r3, [r3, #12]
 801319a:	685b      	ldr	r3, [r3, #4]
 801319c:	4618      	mov	r0, r3
 801319e:	f7f8 fd0a 	bl	800bbb6 <lwip_htonl>
 80131a2:	4602      	mov	r2, r0
 80131a4:	68bb      	ldr	r3, [r7, #8]
 80131a6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80131a8:	68fb      	ldr	r3, [r7, #12]
 80131aa:	68da      	ldr	r2, [r3, #12]
 80131ac:	68fb      	ldr	r3, [r7, #12]
 80131ae:	685b      	ldr	r3, [r3, #4]
 80131b0:	685b      	ldr	r3, [r3, #4]
 80131b2:	1ad3      	subs	r3, r2, r3
 80131b4:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80131b6:	68fb      	ldr	r3, [r7, #12]
 80131b8:	685b      	ldr	r3, [r3, #4]
 80131ba:	8959      	ldrh	r1, [r3, #10]
 80131bc:	68fb      	ldr	r3, [r7, #12]
 80131be:	685b      	ldr	r3, [r3, #4]
 80131c0:	8b3a      	ldrh	r2, [r7, #24]
 80131c2:	1a8a      	subs	r2, r1, r2
 80131c4:	b292      	uxth	r2, r2
 80131c6:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80131c8:	68fb      	ldr	r3, [r7, #12]
 80131ca:	685b      	ldr	r3, [r3, #4]
 80131cc:	8919      	ldrh	r1, [r3, #8]
 80131ce:	68fb      	ldr	r3, [r7, #12]
 80131d0:	685b      	ldr	r3, [r3, #4]
 80131d2:	8b3a      	ldrh	r2, [r7, #24]
 80131d4:	1a8a      	subs	r2, r1, r2
 80131d6:	b292      	uxth	r2, r2
 80131d8:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80131da:	68fb      	ldr	r3, [r7, #12]
 80131dc:	685b      	ldr	r3, [r3, #4]
 80131de:	68fa      	ldr	r2, [r7, #12]
 80131e0:	68d2      	ldr	r2, [r2, #12]
 80131e2:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80131e4:	68fb      	ldr	r3, [r7, #12]
 80131e6:	68db      	ldr	r3, [r3, #12]
 80131e8:	2200      	movs	r2, #0
 80131ea:	741a      	strb	r2, [r3, #16]
 80131ec:	2200      	movs	r2, #0
 80131ee:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 80131f0:	68fb      	ldr	r3, [r7, #12]
 80131f2:	68db      	ldr	r3, [r3, #12]
 80131f4:	f103 0214 	add.w	r2, r3, #20
 80131f8:	68fb      	ldr	r3, [r7, #12]
 80131fa:	7a9b      	ldrb	r3, [r3, #10]
 80131fc:	009b      	lsls	r3, r3, #2
 80131fe:	f003 0304 	and.w	r3, r3, #4
 8013202:	4413      	add	r3, r2
 8013204:	69fa      	ldr	r2, [r7, #28]
 8013206:	429a      	cmp	r2, r3
 8013208:	d006      	beq.n	8013218 <tcp_output_segment+0x16c>
 801320a:	4b10      	ldr	r3, [pc, #64]	; (801324c <tcp_output_segment+0x1a0>)
 801320c:	f240 621c 	movw	r2, #1564	; 0x61c
 8013210:	4914      	ldr	r1, [pc, #80]	; (8013264 <tcp_output_segment+0x1b8>)
 8013212:	4810      	ldr	r0, [pc, #64]	; (8013254 <tcp_output_segment+0x1a8>)
 8013214:	f003 fb14 	bl	8016840 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8013218:	68fb      	ldr	r3, [r7, #12]
 801321a:	6858      	ldr	r0, [r3, #4]
 801321c:	68b9      	ldr	r1, [r7, #8]
 801321e:	68bb      	ldr	r3, [r7, #8]
 8013220:	1d1c      	adds	r4, r3, #4
 8013222:	68bb      	ldr	r3, [r7, #8]
 8013224:	7add      	ldrb	r5, [r3, #11]
 8013226:	68bb      	ldr	r3, [r7, #8]
 8013228:	7a9b      	ldrb	r3, [r3, #10]
 801322a:	687a      	ldr	r2, [r7, #4]
 801322c:	9202      	str	r2, [sp, #8]
 801322e:	2206      	movs	r2, #6
 8013230:	9201      	str	r2, [sp, #4]
 8013232:	9300      	str	r3, [sp, #0]
 8013234:	462b      	mov	r3, r5
 8013236:	4622      	mov	r2, r4
 8013238:	f002 fa70 	bl	801571c <ip4_output_if>
 801323c:	4603      	mov	r3, r0
 801323e:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8013240:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013244:	4618      	mov	r0, r3
 8013246:	3720      	adds	r7, #32
 8013248:	46bd      	mov	sp, r7
 801324a:	bdb0      	pop	{r4, r5, r7, pc}
 801324c:	08019d94 	.word	0x08019d94
 8013250:	0801a358 	.word	0x0801a358
 8013254:	08019de8 	.word	0x08019de8
 8013258:	0801a378 	.word	0x0801a378
 801325c:	0801a398 	.word	0x0801a398
 8013260:	20008ba8 	.word	0x20008ba8
 8013264:	0801a3bc 	.word	0x0801a3bc

08013268 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8013268:	b5b0      	push	{r4, r5, r7, lr}
 801326a:	b084      	sub	sp, #16
 801326c:	af00      	add	r7, sp, #0
 801326e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8013270:	687b      	ldr	r3, [r7, #4]
 8013272:	2b00      	cmp	r3, #0
 8013274:	d106      	bne.n	8013284 <tcp_rexmit_rto_prepare+0x1c>
 8013276:	4b31      	ldr	r3, [pc, #196]	; (801333c <tcp_rexmit_rto_prepare+0xd4>)
 8013278:	f240 6263 	movw	r2, #1635	; 0x663
 801327c:	4930      	ldr	r1, [pc, #192]	; (8013340 <tcp_rexmit_rto_prepare+0xd8>)
 801327e:	4831      	ldr	r0, [pc, #196]	; (8013344 <tcp_rexmit_rto_prepare+0xdc>)
 8013280:	f003 fade 	bl	8016840 <iprintf>

  if (pcb->unacked == NULL) {
 8013284:	687b      	ldr	r3, [r7, #4]
 8013286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013288:	2b00      	cmp	r3, #0
 801328a:	d102      	bne.n	8013292 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 801328c:	f06f 0305 	mvn.w	r3, #5
 8013290:	e050      	b.n	8013334 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8013292:	687b      	ldr	r3, [r7, #4]
 8013294:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013296:	60fb      	str	r3, [r7, #12]
 8013298:	e00b      	b.n	80132b2 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801329a:	68f8      	ldr	r0, [r7, #12]
 801329c:	f7ff fee6 	bl	801306c <tcp_output_segment_busy>
 80132a0:	4603      	mov	r3, r0
 80132a2:	2b00      	cmp	r3, #0
 80132a4:	d002      	beq.n	80132ac <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80132a6:	f06f 0305 	mvn.w	r3, #5
 80132aa:	e043      	b.n	8013334 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80132ac:	68fb      	ldr	r3, [r7, #12]
 80132ae:	681b      	ldr	r3, [r3, #0]
 80132b0:	60fb      	str	r3, [r7, #12]
 80132b2:	68fb      	ldr	r3, [r7, #12]
 80132b4:	681b      	ldr	r3, [r3, #0]
 80132b6:	2b00      	cmp	r3, #0
 80132b8:	d1ef      	bne.n	801329a <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80132ba:	68f8      	ldr	r0, [r7, #12]
 80132bc:	f7ff fed6 	bl	801306c <tcp_output_segment_busy>
 80132c0:	4603      	mov	r3, r0
 80132c2:	2b00      	cmp	r3, #0
 80132c4:	d002      	beq.n	80132cc <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80132c6:	f06f 0305 	mvn.w	r3, #5
 80132ca:	e033      	b.n	8013334 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80132cc:	687b      	ldr	r3, [r7, #4]
 80132ce:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80132d0:	68fb      	ldr	r3, [r7, #12]
 80132d2:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80132d4:	687b      	ldr	r3, [r7, #4]
 80132d6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80132d8:	687b      	ldr	r3, [r7, #4]
 80132da:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80132dc:	687b      	ldr	r3, [r7, #4]
 80132de:	2200      	movs	r2, #0
 80132e0:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 80132e2:	687b      	ldr	r3, [r7, #4]
 80132e4:	8b5b      	ldrh	r3, [r3, #26]
 80132e6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80132ea:	b29a      	uxth	r2, r3
 80132ec:	687b      	ldr	r3, [r7, #4]
 80132ee:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80132f0:	68fb      	ldr	r3, [r7, #12]
 80132f2:	68db      	ldr	r3, [r3, #12]
 80132f4:	685b      	ldr	r3, [r3, #4]
 80132f6:	4618      	mov	r0, r3
 80132f8:	f7f8 fc5d 	bl	800bbb6 <lwip_htonl>
 80132fc:	4604      	mov	r4, r0
 80132fe:	68fb      	ldr	r3, [r7, #12]
 8013300:	891b      	ldrh	r3, [r3, #8]
 8013302:	461d      	mov	r5, r3
 8013304:	68fb      	ldr	r3, [r7, #12]
 8013306:	68db      	ldr	r3, [r3, #12]
 8013308:	899b      	ldrh	r3, [r3, #12]
 801330a:	b29b      	uxth	r3, r3
 801330c:	4618      	mov	r0, r3
 801330e:	f7f8 fc3d 	bl	800bb8c <lwip_htons>
 8013312:	4603      	mov	r3, r0
 8013314:	b2db      	uxtb	r3, r3
 8013316:	f003 0303 	and.w	r3, r3, #3
 801331a:	2b00      	cmp	r3, #0
 801331c:	d001      	beq.n	8013322 <tcp_rexmit_rto_prepare+0xba>
 801331e:	2301      	movs	r3, #1
 8013320:	e000      	b.n	8013324 <tcp_rexmit_rto_prepare+0xbc>
 8013322:	2300      	movs	r3, #0
 8013324:	442b      	add	r3, r5
 8013326:	18e2      	adds	r2, r4, r3
 8013328:	687b      	ldr	r3, [r7, #4]
 801332a:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801332c:	687b      	ldr	r3, [r7, #4]
 801332e:	2200      	movs	r2, #0
 8013330:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8013332:	2300      	movs	r3, #0
}
 8013334:	4618      	mov	r0, r3
 8013336:	3710      	adds	r7, #16
 8013338:	46bd      	mov	sp, r7
 801333a:	bdb0      	pop	{r4, r5, r7, pc}
 801333c:	08019d94 	.word	0x08019d94
 8013340:	0801a3d0 	.word	0x0801a3d0
 8013344:	08019de8 	.word	0x08019de8

08013348 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8013348:	b580      	push	{r7, lr}
 801334a:	b082      	sub	sp, #8
 801334c:	af00      	add	r7, sp, #0
 801334e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8013350:	687b      	ldr	r3, [r7, #4]
 8013352:	2b00      	cmp	r3, #0
 8013354:	d106      	bne.n	8013364 <tcp_rexmit_rto_commit+0x1c>
 8013356:	4b0d      	ldr	r3, [pc, #52]	; (801338c <tcp_rexmit_rto_commit+0x44>)
 8013358:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801335c:	490c      	ldr	r1, [pc, #48]	; (8013390 <tcp_rexmit_rto_commit+0x48>)
 801335e:	480d      	ldr	r0, [pc, #52]	; (8013394 <tcp_rexmit_rto_commit+0x4c>)
 8013360:	f003 fa6e 	bl	8016840 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8013364:	687b      	ldr	r3, [r7, #4]
 8013366:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801336a:	2bff      	cmp	r3, #255	; 0xff
 801336c:	d007      	beq.n	801337e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801336e:	687b      	ldr	r3, [r7, #4]
 8013370:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013374:	3301      	adds	r3, #1
 8013376:	b2da      	uxtb	r2, r3
 8013378:	687b      	ldr	r3, [r7, #4]
 801337a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801337e:	6878      	ldr	r0, [r7, #4]
 8013380:	f7ff fc80 	bl	8012c84 <tcp_output>
}
 8013384:	bf00      	nop
 8013386:	3708      	adds	r7, #8
 8013388:	46bd      	mov	sp, r7
 801338a:	bd80      	pop	{r7, pc}
 801338c:	08019d94 	.word	0x08019d94
 8013390:	0801a3f4 	.word	0x0801a3f4
 8013394:	08019de8 	.word	0x08019de8

08013398 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8013398:	b580      	push	{r7, lr}
 801339a:	b082      	sub	sp, #8
 801339c:	af00      	add	r7, sp, #0
 801339e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80133a0:	687b      	ldr	r3, [r7, #4]
 80133a2:	2b00      	cmp	r3, #0
 80133a4:	d106      	bne.n	80133b4 <tcp_rexmit_rto+0x1c>
 80133a6:	4b0a      	ldr	r3, [pc, #40]	; (80133d0 <tcp_rexmit_rto+0x38>)
 80133a8:	f240 62ad 	movw	r2, #1709	; 0x6ad
 80133ac:	4909      	ldr	r1, [pc, #36]	; (80133d4 <tcp_rexmit_rto+0x3c>)
 80133ae:	480a      	ldr	r0, [pc, #40]	; (80133d8 <tcp_rexmit_rto+0x40>)
 80133b0:	f003 fa46 	bl	8016840 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80133b4:	6878      	ldr	r0, [r7, #4]
 80133b6:	f7ff ff57 	bl	8013268 <tcp_rexmit_rto_prepare>
 80133ba:	4603      	mov	r3, r0
 80133bc:	2b00      	cmp	r3, #0
 80133be:	d102      	bne.n	80133c6 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 80133c0:	6878      	ldr	r0, [r7, #4]
 80133c2:	f7ff ffc1 	bl	8013348 <tcp_rexmit_rto_commit>
  }
}
 80133c6:	bf00      	nop
 80133c8:	3708      	adds	r7, #8
 80133ca:	46bd      	mov	sp, r7
 80133cc:	bd80      	pop	{r7, pc}
 80133ce:	bf00      	nop
 80133d0:	08019d94 	.word	0x08019d94
 80133d4:	0801a418 	.word	0x0801a418
 80133d8:	08019de8 	.word	0x08019de8

080133dc <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80133dc:	b590      	push	{r4, r7, lr}
 80133de:	b085      	sub	sp, #20
 80133e0:	af00      	add	r7, sp, #0
 80133e2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80133e4:	687b      	ldr	r3, [r7, #4]
 80133e6:	2b00      	cmp	r3, #0
 80133e8:	d106      	bne.n	80133f8 <tcp_rexmit+0x1c>
 80133ea:	4b2f      	ldr	r3, [pc, #188]	; (80134a8 <tcp_rexmit+0xcc>)
 80133ec:	f240 62c1 	movw	r2, #1729	; 0x6c1
 80133f0:	492e      	ldr	r1, [pc, #184]	; (80134ac <tcp_rexmit+0xd0>)
 80133f2:	482f      	ldr	r0, [pc, #188]	; (80134b0 <tcp_rexmit+0xd4>)
 80133f4:	f003 fa24 	bl	8016840 <iprintf>

  if (pcb->unacked == NULL) {
 80133f8:	687b      	ldr	r3, [r7, #4]
 80133fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80133fc:	2b00      	cmp	r3, #0
 80133fe:	d102      	bne.n	8013406 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8013400:	f06f 0305 	mvn.w	r3, #5
 8013404:	e04c      	b.n	80134a0 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8013406:	687b      	ldr	r3, [r7, #4]
 8013408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801340a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 801340c:	68b8      	ldr	r0, [r7, #8]
 801340e:	f7ff fe2d 	bl	801306c <tcp_output_segment_busy>
 8013412:	4603      	mov	r3, r0
 8013414:	2b00      	cmp	r3, #0
 8013416:	d002      	beq.n	801341e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8013418:	f06f 0305 	mvn.w	r3, #5
 801341c:	e040      	b.n	80134a0 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801341e:	68bb      	ldr	r3, [r7, #8]
 8013420:	681a      	ldr	r2, [r3, #0]
 8013422:	687b      	ldr	r3, [r7, #4]
 8013424:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8013426:	687b      	ldr	r3, [r7, #4]
 8013428:	336c      	adds	r3, #108	; 0x6c
 801342a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801342c:	e002      	b.n	8013434 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801342e:	68fb      	ldr	r3, [r7, #12]
 8013430:	681b      	ldr	r3, [r3, #0]
 8013432:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8013434:	68fb      	ldr	r3, [r7, #12]
 8013436:	681b      	ldr	r3, [r3, #0]
 8013438:	2b00      	cmp	r3, #0
 801343a:	d011      	beq.n	8013460 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801343c:	68fb      	ldr	r3, [r7, #12]
 801343e:	681b      	ldr	r3, [r3, #0]
 8013440:	68db      	ldr	r3, [r3, #12]
 8013442:	685b      	ldr	r3, [r3, #4]
 8013444:	4618      	mov	r0, r3
 8013446:	f7f8 fbb6 	bl	800bbb6 <lwip_htonl>
 801344a:	4604      	mov	r4, r0
 801344c:	68bb      	ldr	r3, [r7, #8]
 801344e:	68db      	ldr	r3, [r3, #12]
 8013450:	685b      	ldr	r3, [r3, #4]
 8013452:	4618      	mov	r0, r3
 8013454:	f7f8 fbaf 	bl	800bbb6 <lwip_htonl>
 8013458:	4603      	mov	r3, r0
 801345a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801345c:	2b00      	cmp	r3, #0
 801345e:	dbe6      	blt.n	801342e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8013460:	68fb      	ldr	r3, [r7, #12]
 8013462:	681a      	ldr	r2, [r3, #0]
 8013464:	68bb      	ldr	r3, [r7, #8]
 8013466:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8013468:	68fb      	ldr	r3, [r7, #12]
 801346a:	68ba      	ldr	r2, [r7, #8]
 801346c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801346e:	68bb      	ldr	r3, [r7, #8]
 8013470:	681b      	ldr	r3, [r3, #0]
 8013472:	2b00      	cmp	r3, #0
 8013474:	d103      	bne.n	801347e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8013476:	687b      	ldr	r3, [r7, #4]
 8013478:	2200      	movs	r2, #0
 801347a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801347e:	687b      	ldr	r3, [r7, #4]
 8013480:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013484:	2bff      	cmp	r3, #255	; 0xff
 8013486:	d007      	beq.n	8013498 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8013488:	687b      	ldr	r3, [r7, #4]
 801348a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801348e:	3301      	adds	r3, #1
 8013490:	b2da      	uxtb	r2, r3
 8013492:	687b      	ldr	r3, [r7, #4]
 8013494:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8013498:	687b      	ldr	r3, [r7, #4]
 801349a:	2200      	movs	r2, #0
 801349c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801349e:	2300      	movs	r3, #0
}
 80134a0:	4618      	mov	r0, r3
 80134a2:	3714      	adds	r7, #20
 80134a4:	46bd      	mov	sp, r7
 80134a6:	bd90      	pop	{r4, r7, pc}
 80134a8:	08019d94 	.word	0x08019d94
 80134ac:	0801a434 	.word	0x0801a434
 80134b0:	08019de8 	.word	0x08019de8

080134b4 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80134b4:	b580      	push	{r7, lr}
 80134b6:	b082      	sub	sp, #8
 80134b8:	af00      	add	r7, sp, #0
 80134ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80134bc:	687b      	ldr	r3, [r7, #4]
 80134be:	2b00      	cmp	r3, #0
 80134c0:	d106      	bne.n	80134d0 <tcp_rexmit_fast+0x1c>
 80134c2:	4b2a      	ldr	r3, [pc, #168]	; (801356c <tcp_rexmit_fast+0xb8>)
 80134c4:	f240 62f9 	movw	r2, #1785	; 0x6f9
 80134c8:	4929      	ldr	r1, [pc, #164]	; (8013570 <tcp_rexmit_fast+0xbc>)
 80134ca:	482a      	ldr	r0, [pc, #168]	; (8013574 <tcp_rexmit_fast+0xc0>)
 80134cc:	f003 f9b8 	bl	8016840 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80134d0:	687b      	ldr	r3, [r7, #4]
 80134d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80134d4:	2b00      	cmp	r3, #0
 80134d6:	d045      	beq.n	8013564 <tcp_rexmit_fast+0xb0>
 80134d8:	687b      	ldr	r3, [r7, #4]
 80134da:	8b5b      	ldrh	r3, [r3, #26]
 80134dc:	f003 0304 	and.w	r3, r3, #4
 80134e0:	2b00      	cmp	r3, #0
 80134e2:	d13f      	bne.n	8013564 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 80134e4:	6878      	ldr	r0, [r7, #4]
 80134e6:	f7ff ff79 	bl	80133dc <tcp_rexmit>
 80134ea:	4603      	mov	r3, r0
 80134ec:	2b00      	cmp	r3, #0
 80134ee:	d139      	bne.n	8013564 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80134f0:	687b      	ldr	r3, [r7, #4]
 80134f2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80134f6:	687b      	ldr	r3, [r7, #4]
 80134f8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80134fc:	4293      	cmp	r3, r2
 80134fe:	bf28      	it	cs
 8013500:	4613      	movcs	r3, r2
 8013502:	b29b      	uxth	r3, r3
 8013504:	2b00      	cmp	r3, #0
 8013506:	da00      	bge.n	801350a <tcp_rexmit_fast+0x56>
 8013508:	3301      	adds	r3, #1
 801350a:	105b      	asrs	r3, r3, #1
 801350c:	b29a      	uxth	r2, r3
 801350e:	687b      	ldr	r3, [r7, #4]
 8013510:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8013514:	687b      	ldr	r3, [r7, #4]
 8013516:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801351a:	461a      	mov	r2, r3
 801351c:	687b      	ldr	r3, [r7, #4]
 801351e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013520:	005b      	lsls	r3, r3, #1
 8013522:	429a      	cmp	r2, r3
 8013524:	d206      	bcs.n	8013534 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8013526:	687b      	ldr	r3, [r7, #4]
 8013528:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801352a:	005b      	lsls	r3, r3, #1
 801352c:	b29a      	uxth	r2, r3
 801352e:	687b      	ldr	r3, [r7, #4]
 8013530:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8013534:	687b      	ldr	r3, [r7, #4]
 8013536:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801353a:	687b      	ldr	r3, [r7, #4]
 801353c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801353e:	4619      	mov	r1, r3
 8013540:	0049      	lsls	r1, r1, #1
 8013542:	440b      	add	r3, r1
 8013544:	b29b      	uxth	r3, r3
 8013546:	4413      	add	r3, r2
 8013548:	b29a      	uxth	r2, r3
 801354a:	687b      	ldr	r3, [r7, #4]
 801354c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8013550:	687b      	ldr	r3, [r7, #4]
 8013552:	8b5b      	ldrh	r3, [r3, #26]
 8013554:	f043 0304 	orr.w	r3, r3, #4
 8013558:	b29a      	uxth	r2, r3
 801355a:	687b      	ldr	r3, [r7, #4]
 801355c:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801355e:	687b      	ldr	r3, [r7, #4]
 8013560:	2200      	movs	r2, #0
 8013562:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8013564:	bf00      	nop
 8013566:	3708      	adds	r7, #8
 8013568:	46bd      	mov	sp, r7
 801356a:	bd80      	pop	{r7, pc}
 801356c:	08019d94 	.word	0x08019d94
 8013570:	0801a44c 	.word	0x0801a44c
 8013574:	08019de8 	.word	0x08019de8

08013578 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8013578:	b580      	push	{r7, lr}
 801357a:	b086      	sub	sp, #24
 801357c:	af00      	add	r7, sp, #0
 801357e:	60f8      	str	r0, [r7, #12]
 8013580:	607b      	str	r3, [r7, #4]
 8013582:	460b      	mov	r3, r1
 8013584:	817b      	strh	r3, [r7, #10]
 8013586:	4613      	mov	r3, r2
 8013588:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801358a:	897a      	ldrh	r2, [r7, #10]
 801358c:	893b      	ldrh	r3, [r7, #8]
 801358e:	4413      	add	r3, r2
 8013590:	b29b      	uxth	r3, r3
 8013592:	3314      	adds	r3, #20
 8013594:	b29b      	uxth	r3, r3
 8013596:	f44f 7220 	mov.w	r2, #640	; 0x280
 801359a:	4619      	mov	r1, r3
 801359c:	2022      	movs	r0, #34	; 0x22
 801359e:	f7f9 fb97 	bl	800ccd0 <pbuf_alloc>
 80135a2:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80135a4:	697b      	ldr	r3, [r7, #20]
 80135a6:	2b00      	cmp	r3, #0
 80135a8:	d04d      	beq.n	8013646 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80135aa:	897b      	ldrh	r3, [r7, #10]
 80135ac:	3313      	adds	r3, #19
 80135ae:	697a      	ldr	r2, [r7, #20]
 80135b0:	8952      	ldrh	r2, [r2, #10]
 80135b2:	4293      	cmp	r3, r2
 80135b4:	db06      	blt.n	80135c4 <tcp_output_alloc_header_common+0x4c>
 80135b6:	4b26      	ldr	r3, [pc, #152]	; (8013650 <tcp_output_alloc_header_common+0xd8>)
 80135b8:	f240 7223 	movw	r2, #1827	; 0x723
 80135bc:	4925      	ldr	r1, [pc, #148]	; (8013654 <tcp_output_alloc_header_common+0xdc>)
 80135be:	4826      	ldr	r0, [pc, #152]	; (8013658 <tcp_output_alloc_header_common+0xe0>)
 80135c0:	f003 f93e 	bl	8016840 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80135c4:	697b      	ldr	r3, [r7, #20]
 80135c6:	685b      	ldr	r3, [r3, #4]
 80135c8:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 80135ca:	8c3b      	ldrh	r3, [r7, #32]
 80135cc:	4618      	mov	r0, r3
 80135ce:	f7f8 fadd 	bl	800bb8c <lwip_htons>
 80135d2:	4603      	mov	r3, r0
 80135d4:	461a      	mov	r2, r3
 80135d6:	693b      	ldr	r3, [r7, #16]
 80135d8:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80135da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80135dc:	4618      	mov	r0, r3
 80135de:	f7f8 fad5 	bl	800bb8c <lwip_htons>
 80135e2:	4603      	mov	r3, r0
 80135e4:	461a      	mov	r2, r3
 80135e6:	693b      	ldr	r3, [r7, #16]
 80135e8:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80135ea:	693b      	ldr	r3, [r7, #16]
 80135ec:	687a      	ldr	r2, [r7, #4]
 80135ee:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80135f0:	68f8      	ldr	r0, [r7, #12]
 80135f2:	f7f8 fae0 	bl	800bbb6 <lwip_htonl>
 80135f6:	4602      	mov	r2, r0
 80135f8:	693b      	ldr	r3, [r7, #16]
 80135fa:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80135fc:	897b      	ldrh	r3, [r7, #10]
 80135fe:	089b      	lsrs	r3, r3, #2
 8013600:	b29b      	uxth	r3, r3
 8013602:	3305      	adds	r3, #5
 8013604:	b29b      	uxth	r3, r3
 8013606:	031b      	lsls	r3, r3, #12
 8013608:	b29a      	uxth	r2, r3
 801360a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801360e:	b29b      	uxth	r3, r3
 8013610:	4313      	orrs	r3, r2
 8013612:	b29b      	uxth	r3, r3
 8013614:	4618      	mov	r0, r3
 8013616:	f7f8 fab9 	bl	800bb8c <lwip_htons>
 801361a:	4603      	mov	r3, r0
 801361c:	461a      	mov	r2, r3
 801361e:	693b      	ldr	r3, [r7, #16]
 8013620:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8013622:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8013624:	4618      	mov	r0, r3
 8013626:	f7f8 fab1 	bl	800bb8c <lwip_htons>
 801362a:	4603      	mov	r3, r0
 801362c:	461a      	mov	r2, r3
 801362e:	693b      	ldr	r3, [r7, #16]
 8013630:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8013632:	693b      	ldr	r3, [r7, #16]
 8013634:	2200      	movs	r2, #0
 8013636:	741a      	strb	r2, [r3, #16]
 8013638:	2200      	movs	r2, #0
 801363a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801363c:	693b      	ldr	r3, [r7, #16]
 801363e:	2200      	movs	r2, #0
 8013640:	749a      	strb	r2, [r3, #18]
 8013642:	2200      	movs	r2, #0
 8013644:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8013646:	697b      	ldr	r3, [r7, #20]
}
 8013648:	4618      	mov	r0, r3
 801364a:	3718      	adds	r7, #24
 801364c:	46bd      	mov	sp, r7
 801364e:	bd80      	pop	{r7, pc}
 8013650:	08019d94 	.word	0x08019d94
 8013654:	0801a46c 	.word	0x0801a46c
 8013658:	08019de8 	.word	0x08019de8

0801365c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 801365c:	b5b0      	push	{r4, r5, r7, lr}
 801365e:	b08a      	sub	sp, #40	; 0x28
 8013660:	af04      	add	r7, sp, #16
 8013662:	60f8      	str	r0, [r7, #12]
 8013664:	607b      	str	r3, [r7, #4]
 8013666:	460b      	mov	r3, r1
 8013668:	817b      	strh	r3, [r7, #10]
 801366a:	4613      	mov	r3, r2
 801366c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801366e:	68fb      	ldr	r3, [r7, #12]
 8013670:	2b00      	cmp	r3, #0
 8013672:	d106      	bne.n	8013682 <tcp_output_alloc_header+0x26>
 8013674:	4b15      	ldr	r3, [pc, #84]	; (80136cc <tcp_output_alloc_header+0x70>)
 8013676:	f240 7242 	movw	r2, #1858	; 0x742
 801367a:	4915      	ldr	r1, [pc, #84]	; (80136d0 <tcp_output_alloc_header+0x74>)
 801367c:	4815      	ldr	r0, [pc, #84]	; (80136d4 <tcp_output_alloc_header+0x78>)
 801367e:	f003 f8df 	bl	8016840 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8013682:	68fb      	ldr	r3, [r7, #12]
 8013684:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8013686:	68fb      	ldr	r3, [r7, #12]
 8013688:	8adb      	ldrh	r3, [r3, #22]
 801368a:	68fa      	ldr	r2, [r7, #12]
 801368c:	8b12      	ldrh	r2, [r2, #24]
 801368e:	68f9      	ldr	r1, [r7, #12]
 8013690:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8013692:	893d      	ldrh	r5, [r7, #8]
 8013694:	897c      	ldrh	r4, [r7, #10]
 8013696:	9103      	str	r1, [sp, #12]
 8013698:	2110      	movs	r1, #16
 801369a:	9102      	str	r1, [sp, #8]
 801369c:	9201      	str	r2, [sp, #4]
 801369e:	9300      	str	r3, [sp, #0]
 80136a0:	687b      	ldr	r3, [r7, #4]
 80136a2:	462a      	mov	r2, r5
 80136a4:	4621      	mov	r1, r4
 80136a6:	f7ff ff67 	bl	8013578 <tcp_output_alloc_header_common>
 80136aa:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 80136ac:	697b      	ldr	r3, [r7, #20]
 80136ae:	2b00      	cmp	r3, #0
 80136b0:	d006      	beq.n	80136c0 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80136b2:	68fb      	ldr	r3, [r7, #12]
 80136b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80136b6:	68fa      	ldr	r2, [r7, #12]
 80136b8:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80136ba:	441a      	add	r2, r3
 80136bc:	68fb      	ldr	r3, [r7, #12]
 80136be:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 80136c0:	697b      	ldr	r3, [r7, #20]
}
 80136c2:	4618      	mov	r0, r3
 80136c4:	3718      	adds	r7, #24
 80136c6:	46bd      	mov	sp, r7
 80136c8:	bdb0      	pop	{r4, r5, r7, pc}
 80136ca:	bf00      	nop
 80136cc:	08019d94 	.word	0x08019d94
 80136d0:	0801a49c 	.word	0x0801a49c
 80136d4:	08019de8 	.word	0x08019de8

080136d8 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80136d8:	b580      	push	{r7, lr}
 80136da:	b088      	sub	sp, #32
 80136dc:	af00      	add	r7, sp, #0
 80136de:	60f8      	str	r0, [r7, #12]
 80136e0:	60b9      	str	r1, [r7, #8]
 80136e2:	4611      	mov	r1, r2
 80136e4:	461a      	mov	r2, r3
 80136e6:	460b      	mov	r3, r1
 80136e8:	71fb      	strb	r3, [r7, #7]
 80136ea:	4613      	mov	r3, r2
 80136ec:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80136ee:	2300      	movs	r3, #0
 80136f0:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80136f2:	68bb      	ldr	r3, [r7, #8]
 80136f4:	2b00      	cmp	r3, #0
 80136f6:	d106      	bne.n	8013706 <tcp_output_fill_options+0x2e>
 80136f8:	4b13      	ldr	r3, [pc, #76]	; (8013748 <tcp_output_fill_options+0x70>)
 80136fa:	f240 7256 	movw	r2, #1878	; 0x756
 80136fe:	4913      	ldr	r1, [pc, #76]	; (801374c <tcp_output_fill_options+0x74>)
 8013700:	4813      	ldr	r0, [pc, #76]	; (8013750 <tcp_output_fill_options+0x78>)
 8013702:	f003 f89d 	bl	8016840 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8013706:	68bb      	ldr	r3, [r7, #8]
 8013708:	685b      	ldr	r3, [r3, #4]
 801370a:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 801370c:	69bb      	ldr	r3, [r7, #24]
 801370e:	3314      	adds	r3, #20
 8013710:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8013712:	69bb      	ldr	r3, [r7, #24]
 8013714:	f103 0214 	add.w	r2, r3, #20
 8013718:	8bfb      	ldrh	r3, [r7, #30]
 801371a:	009b      	lsls	r3, r3, #2
 801371c:	4619      	mov	r1, r3
 801371e:	79fb      	ldrb	r3, [r7, #7]
 8013720:	009b      	lsls	r3, r3, #2
 8013722:	f003 0304 	and.w	r3, r3, #4
 8013726:	440b      	add	r3, r1
 8013728:	4413      	add	r3, r2
 801372a:	697a      	ldr	r2, [r7, #20]
 801372c:	429a      	cmp	r2, r3
 801372e:	d006      	beq.n	801373e <tcp_output_fill_options+0x66>
 8013730:	4b05      	ldr	r3, [pc, #20]	; (8013748 <tcp_output_fill_options+0x70>)
 8013732:	f240 7275 	movw	r2, #1909	; 0x775
 8013736:	4907      	ldr	r1, [pc, #28]	; (8013754 <tcp_output_fill_options+0x7c>)
 8013738:	4805      	ldr	r0, [pc, #20]	; (8013750 <tcp_output_fill_options+0x78>)
 801373a:	f003 f881 	bl	8016840 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801373e:	bf00      	nop
 8013740:	3720      	adds	r7, #32
 8013742:	46bd      	mov	sp, r7
 8013744:	bd80      	pop	{r7, pc}
 8013746:	bf00      	nop
 8013748:	08019d94 	.word	0x08019d94
 801374c:	0801a4c4 	.word	0x0801a4c4
 8013750:	08019de8 	.word	0x08019de8
 8013754:	0801a3bc 	.word	0x0801a3bc

08013758 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8013758:	b580      	push	{r7, lr}
 801375a:	b08a      	sub	sp, #40	; 0x28
 801375c:	af04      	add	r7, sp, #16
 801375e:	60f8      	str	r0, [r7, #12]
 8013760:	60b9      	str	r1, [r7, #8]
 8013762:	607a      	str	r2, [r7, #4]
 8013764:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8013766:	68bb      	ldr	r3, [r7, #8]
 8013768:	2b00      	cmp	r3, #0
 801376a:	d106      	bne.n	801377a <tcp_output_control_segment+0x22>
 801376c:	4b1c      	ldr	r3, [pc, #112]	; (80137e0 <tcp_output_control_segment+0x88>)
 801376e:	f240 7287 	movw	r2, #1927	; 0x787
 8013772:	491c      	ldr	r1, [pc, #112]	; (80137e4 <tcp_output_control_segment+0x8c>)
 8013774:	481c      	ldr	r0, [pc, #112]	; (80137e8 <tcp_output_control_segment+0x90>)
 8013776:	f003 f863 	bl	8016840 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801377a:	683a      	ldr	r2, [r7, #0]
 801377c:	6879      	ldr	r1, [r7, #4]
 801377e:	68f8      	ldr	r0, [r7, #12]
 8013780:	f7fe fae8 	bl	8011d54 <tcp_route>
 8013784:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8013786:	693b      	ldr	r3, [r7, #16]
 8013788:	2b00      	cmp	r3, #0
 801378a:	d102      	bne.n	8013792 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801378c:	23fc      	movs	r3, #252	; 0xfc
 801378e:	75fb      	strb	r3, [r7, #23]
 8013790:	e01c      	b.n	80137cc <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8013792:	68fb      	ldr	r3, [r7, #12]
 8013794:	2b00      	cmp	r3, #0
 8013796:	d006      	beq.n	80137a6 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8013798:	68fb      	ldr	r3, [r7, #12]
 801379a:	7adb      	ldrb	r3, [r3, #11]
 801379c:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801379e:	68fb      	ldr	r3, [r7, #12]
 80137a0:	7a9b      	ldrb	r3, [r3, #10]
 80137a2:	757b      	strb	r3, [r7, #21]
 80137a4:	e003      	b.n	80137ae <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 80137a6:	23ff      	movs	r3, #255	; 0xff
 80137a8:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 80137aa:	2300      	movs	r3, #0
 80137ac:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80137ae:	7dba      	ldrb	r2, [r7, #22]
 80137b0:	693b      	ldr	r3, [r7, #16]
 80137b2:	9302      	str	r3, [sp, #8]
 80137b4:	2306      	movs	r3, #6
 80137b6:	9301      	str	r3, [sp, #4]
 80137b8:	7d7b      	ldrb	r3, [r7, #21]
 80137ba:	9300      	str	r3, [sp, #0]
 80137bc:	4613      	mov	r3, r2
 80137be:	683a      	ldr	r2, [r7, #0]
 80137c0:	6879      	ldr	r1, [r7, #4]
 80137c2:	68b8      	ldr	r0, [r7, #8]
 80137c4:	f001 ffaa 	bl	801571c <ip4_output_if>
 80137c8:	4603      	mov	r3, r0
 80137ca:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80137cc:	68b8      	ldr	r0, [r7, #8]
 80137ce:	f7f9 fd63 	bl	800d298 <pbuf_free>
  return err;
 80137d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80137d6:	4618      	mov	r0, r3
 80137d8:	3718      	adds	r7, #24
 80137da:	46bd      	mov	sp, r7
 80137dc:	bd80      	pop	{r7, pc}
 80137de:	bf00      	nop
 80137e0:	08019d94 	.word	0x08019d94
 80137e4:	0801a4ec 	.word	0x0801a4ec
 80137e8:	08019de8 	.word	0x08019de8

080137ec <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80137ec:	b590      	push	{r4, r7, lr}
 80137ee:	b08b      	sub	sp, #44	; 0x2c
 80137f0:	af04      	add	r7, sp, #16
 80137f2:	60f8      	str	r0, [r7, #12]
 80137f4:	60b9      	str	r1, [r7, #8]
 80137f6:	607a      	str	r2, [r7, #4]
 80137f8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80137fa:	683b      	ldr	r3, [r7, #0]
 80137fc:	2b00      	cmp	r3, #0
 80137fe:	d106      	bne.n	801380e <tcp_rst+0x22>
 8013800:	4b1f      	ldr	r3, [pc, #124]	; (8013880 <tcp_rst+0x94>)
 8013802:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8013806:	491f      	ldr	r1, [pc, #124]	; (8013884 <tcp_rst+0x98>)
 8013808:	481f      	ldr	r0, [pc, #124]	; (8013888 <tcp_rst+0x9c>)
 801380a:	f003 f819 	bl	8016840 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801380e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013810:	2b00      	cmp	r3, #0
 8013812:	d106      	bne.n	8013822 <tcp_rst+0x36>
 8013814:	4b1a      	ldr	r3, [pc, #104]	; (8013880 <tcp_rst+0x94>)
 8013816:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801381a:	491c      	ldr	r1, [pc, #112]	; (801388c <tcp_rst+0xa0>)
 801381c:	481a      	ldr	r0, [pc, #104]	; (8013888 <tcp_rst+0x9c>)
 801381e:	f003 f80f 	bl	8016840 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013822:	2300      	movs	r3, #0
 8013824:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8013826:	f246 0308 	movw	r3, #24584	; 0x6008
 801382a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801382c:	7dfb      	ldrb	r3, [r7, #23]
 801382e:	b29c      	uxth	r4, r3
 8013830:	68b8      	ldr	r0, [r7, #8]
 8013832:	f7f8 f9c0 	bl	800bbb6 <lwip_htonl>
 8013836:	4602      	mov	r2, r0
 8013838:	8abb      	ldrh	r3, [r7, #20]
 801383a:	9303      	str	r3, [sp, #12]
 801383c:	2314      	movs	r3, #20
 801383e:	9302      	str	r3, [sp, #8]
 8013840:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8013842:	9301      	str	r3, [sp, #4]
 8013844:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8013846:	9300      	str	r3, [sp, #0]
 8013848:	4613      	mov	r3, r2
 801384a:	2200      	movs	r2, #0
 801384c:	4621      	mov	r1, r4
 801384e:	6878      	ldr	r0, [r7, #4]
 8013850:	f7ff fe92 	bl	8013578 <tcp_output_alloc_header_common>
 8013854:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8013856:	693b      	ldr	r3, [r7, #16]
 8013858:	2b00      	cmp	r3, #0
 801385a:	d00c      	beq.n	8013876 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801385c:	7dfb      	ldrb	r3, [r7, #23]
 801385e:	2200      	movs	r2, #0
 8013860:	6939      	ldr	r1, [r7, #16]
 8013862:	68f8      	ldr	r0, [r7, #12]
 8013864:	f7ff ff38 	bl	80136d8 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8013868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801386a:	683a      	ldr	r2, [r7, #0]
 801386c:	6939      	ldr	r1, [r7, #16]
 801386e:	68f8      	ldr	r0, [r7, #12]
 8013870:	f7ff ff72 	bl	8013758 <tcp_output_control_segment>
 8013874:	e000      	b.n	8013878 <tcp_rst+0x8c>
    return;
 8013876:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8013878:	371c      	adds	r7, #28
 801387a:	46bd      	mov	sp, r7
 801387c:	bd90      	pop	{r4, r7, pc}
 801387e:	bf00      	nop
 8013880:	08019d94 	.word	0x08019d94
 8013884:	0801a518 	.word	0x0801a518
 8013888:	08019de8 	.word	0x08019de8
 801388c:	0801a534 	.word	0x0801a534

08013890 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8013890:	b590      	push	{r4, r7, lr}
 8013892:	b087      	sub	sp, #28
 8013894:	af00      	add	r7, sp, #0
 8013896:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8013898:	2300      	movs	r3, #0
 801389a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801389c:	2300      	movs	r3, #0
 801389e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80138a0:	687b      	ldr	r3, [r7, #4]
 80138a2:	2b00      	cmp	r3, #0
 80138a4:	d106      	bne.n	80138b4 <tcp_send_empty_ack+0x24>
 80138a6:	4b28      	ldr	r3, [pc, #160]	; (8013948 <tcp_send_empty_ack+0xb8>)
 80138a8:	f240 72ea 	movw	r2, #2026	; 0x7ea
 80138ac:	4927      	ldr	r1, [pc, #156]	; (801394c <tcp_send_empty_ack+0xbc>)
 80138ae:	4828      	ldr	r0, [pc, #160]	; (8013950 <tcp_send_empty_ack+0xc0>)
 80138b0:	f002 ffc6 	bl	8016840 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80138b4:	7dfb      	ldrb	r3, [r7, #23]
 80138b6:	009b      	lsls	r3, r3, #2
 80138b8:	b2db      	uxtb	r3, r3
 80138ba:	f003 0304 	and.w	r3, r3, #4
 80138be:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80138c0:	7d7b      	ldrb	r3, [r7, #21]
 80138c2:	b29c      	uxth	r4, r3
 80138c4:	687b      	ldr	r3, [r7, #4]
 80138c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80138c8:	4618      	mov	r0, r3
 80138ca:	f7f8 f974 	bl	800bbb6 <lwip_htonl>
 80138ce:	4603      	mov	r3, r0
 80138d0:	2200      	movs	r2, #0
 80138d2:	4621      	mov	r1, r4
 80138d4:	6878      	ldr	r0, [r7, #4]
 80138d6:	f7ff fec1 	bl	801365c <tcp_output_alloc_header>
 80138da:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80138dc:	693b      	ldr	r3, [r7, #16]
 80138de:	2b00      	cmp	r3, #0
 80138e0:	d109      	bne.n	80138f6 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80138e2:	687b      	ldr	r3, [r7, #4]
 80138e4:	8b5b      	ldrh	r3, [r3, #26]
 80138e6:	f043 0303 	orr.w	r3, r3, #3
 80138ea:	b29a      	uxth	r2, r3
 80138ec:	687b      	ldr	r3, [r7, #4]
 80138ee:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80138f0:	f06f 0301 	mvn.w	r3, #1
 80138f4:	e023      	b.n	801393e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80138f6:	7dbb      	ldrb	r3, [r7, #22]
 80138f8:	7dfa      	ldrb	r2, [r7, #23]
 80138fa:	6939      	ldr	r1, [r7, #16]
 80138fc:	6878      	ldr	r0, [r7, #4]
 80138fe:	f7ff feeb 	bl	80136d8 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013902:	687a      	ldr	r2, [r7, #4]
 8013904:	687b      	ldr	r3, [r7, #4]
 8013906:	3304      	adds	r3, #4
 8013908:	6939      	ldr	r1, [r7, #16]
 801390a:	6878      	ldr	r0, [r7, #4]
 801390c:	f7ff ff24 	bl	8013758 <tcp_output_control_segment>
 8013910:	4603      	mov	r3, r0
 8013912:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8013914:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013918:	2b00      	cmp	r3, #0
 801391a:	d007      	beq.n	801392c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801391c:	687b      	ldr	r3, [r7, #4]
 801391e:	8b5b      	ldrh	r3, [r3, #26]
 8013920:	f043 0303 	orr.w	r3, r3, #3
 8013924:	b29a      	uxth	r2, r3
 8013926:	687b      	ldr	r3, [r7, #4]
 8013928:	835a      	strh	r2, [r3, #26]
 801392a:	e006      	b.n	801393a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801392c:	687b      	ldr	r3, [r7, #4]
 801392e:	8b5b      	ldrh	r3, [r3, #26]
 8013930:	f023 0303 	bic.w	r3, r3, #3
 8013934:	b29a      	uxth	r2, r3
 8013936:	687b      	ldr	r3, [r7, #4]
 8013938:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801393a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801393e:	4618      	mov	r0, r3
 8013940:	371c      	adds	r7, #28
 8013942:	46bd      	mov	sp, r7
 8013944:	bd90      	pop	{r4, r7, pc}
 8013946:	bf00      	nop
 8013948:	08019d94 	.word	0x08019d94
 801394c:	0801a550 	.word	0x0801a550
 8013950:	08019de8 	.word	0x08019de8

08013954 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8013954:	b590      	push	{r4, r7, lr}
 8013956:	b087      	sub	sp, #28
 8013958:	af00      	add	r7, sp, #0
 801395a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801395c:	2300      	movs	r3, #0
 801395e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8013960:	687b      	ldr	r3, [r7, #4]
 8013962:	2b00      	cmp	r3, #0
 8013964:	d106      	bne.n	8013974 <tcp_keepalive+0x20>
 8013966:	4b18      	ldr	r3, [pc, #96]	; (80139c8 <tcp_keepalive+0x74>)
 8013968:	f640 0224 	movw	r2, #2084	; 0x824
 801396c:	4917      	ldr	r1, [pc, #92]	; (80139cc <tcp_keepalive+0x78>)
 801396e:	4818      	ldr	r0, [pc, #96]	; (80139d0 <tcp_keepalive+0x7c>)
 8013970:	f002 ff66 	bl	8016840 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8013974:	7dfb      	ldrb	r3, [r7, #23]
 8013976:	b29c      	uxth	r4, r3
 8013978:	687b      	ldr	r3, [r7, #4]
 801397a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801397c:	3b01      	subs	r3, #1
 801397e:	4618      	mov	r0, r3
 8013980:	f7f8 f919 	bl	800bbb6 <lwip_htonl>
 8013984:	4603      	mov	r3, r0
 8013986:	2200      	movs	r2, #0
 8013988:	4621      	mov	r1, r4
 801398a:	6878      	ldr	r0, [r7, #4]
 801398c:	f7ff fe66 	bl	801365c <tcp_output_alloc_header>
 8013990:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013992:	693b      	ldr	r3, [r7, #16]
 8013994:	2b00      	cmp	r3, #0
 8013996:	d102      	bne.n	801399e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8013998:	f04f 33ff 	mov.w	r3, #4294967295
 801399c:	e010      	b.n	80139c0 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801399e:	7dfb      	ldrb	r3, [r7, #23]
 80139a0:	2200      	movs	r2, #0
 80139a2:	6939      	ldr	r1, [r7, #16]
 80139a4:	6878      	ldr	r0, [r7, #4]
 80139a6:	f7ff fe97 	bl	80136d8 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80139aa:	687a      	ldr	r2, [r7, #4]
 80139ac:	687b      	ldr	r3, [r7, #4]
 80139ae:	3304      	adds	r3, #4
 80139b0:	6939      	ldr	r1, [r7, #16]
 80139b2:	6878      	ldr	r0, [r7, #4]
 80139b4:	f7ff fed0 	bl	8013758 <tcp_output_control_segment>
 80139b8:	4603      	mov	r3, r0
 80139ba:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80139bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80139c0:	4618      	mov	r0, r3
 80139c2:	371c      	adds	r7, #28
 80139c4:	46bd      	mov	sp, r7
 80139c6:	bd90      	pop	{r4, r7, pc}
 80139c8:	08019d94 	.word	0x08019d94
 80139cc:	0801a570 	.word	0x0801a570
 80139d0:	08019de8 	.word	0x08019de8

080139d4 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80139d4:	b590      	push	{r4, r7, lr}
 80139d6:	b08b      	sub	sp, #44	; 0x2c
 80139d8:	af00      	add	r7, sp, #0
 80139da:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80139dc:	2300      	movs	r3, #0
 80139de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80139e2:	687b      	ldr	r3, [r7, #4]
 80139e4:	2b00      	cmp	r3, #0
 80139e6:	d106      	bne.n	80139f6 <tcp_zero_window_probe+0x22>
 80139e8:	4b4c      	ldr	r3, [pc, #304]	; (8013b1c <tcp_zero_window_probe+0x148>)
 80139ea:	f640 024f 	movw	r2, #2127	; 0x84f
 80139ee:	494c      	ldr	r1, [pc, #304]	; (8013b20 <tcp_zero_window_probe+0x14c>)
 80139f0:	484c      	ldr	r0, [pc, #304]	; (8013b24 <tcp_zero_window_probe+0x150>)
 80139f2:	f002 ff25 	bl	8016840 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80139f6:	687b      	ldr	r3, [r7, #4]
 80139f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80139fa:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 80139fc:	6a3b      	ldr	r3, [r7, #32]
 80139fe:	2b00      	cmp	r3, #0
 8013a00:	d101      	bne.n	8013a06 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8013a02:	2300      	movs	r3, #0
 8013a04:	e086      	b.n	8013b14 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8013a06:	687b      	ldr	r3, [r7, #4]
 8013a08:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8013a0c:	2bff      	cmp	r3, #255	; 0xff
 8013a0e:	d007      	beq.n	8013a20 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8013a10:	687b      	ldr	r3, [r7, #4]
 8013a12:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8013a16:	3301      	adds	r3, #1
 8013a18:	b2da      	uxtb	r2, r3
 8013a1a:	687b      	ldr	r3, [r7, #4]
 8013a1c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8013a20:	6a3b      	ldr	r3, [r7, #32]
 8013a22:	68db      	ldr	r3, [r3, #12]
 8013a24:	899b      	ldrh	r3, [r3, #12]
 8013a26:	b29b      	uxth	r3, r3
 8013a28:	4618      	mov	r0, r3
 8013a2a:	f7f8 f8af 	bl	800bb8c <lwip_htons>
 8013a2e:	4603      	mov	r3, r0
 8013a30:	b2db      	uxtb	r3, r3
 8013a32:	f003 0301 	and.w	r3, r3, #1
 8013a36:	2b00      	cmp	r3, #0
 8013a38:	d005      	beq.n	8013a46 <tcp_zero_window_probe+0x72>
 8013a3a:	6a3b      	ldr	r3, [r7, #32]
 8013a3c:	891b      	ldrh	r3, [r3, #8]
 8013a3e:	2b00      	cmp	r3, #0
 8013a40:	d101      	bne.n	8013a46 <tcp_zero_window_probe+0x72>
 8013a42:	2301      	movs	r3, #1
 8013a44:	e000      	b.n	8013a48 <tcp_zero_window_probe+0x74>
 8013a46:	2300      	movs	r3, #0
 8013a48:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8013a4a:	7ffb      	ldrb	r3, [r7, #31]
 8013a4c:	2b00      	cmp	r3, #0
 8013a4e:	bf0c      	ite	eq
 8013a50:	2301      	moveq	r3, #1
 8013a52:	2300      	movne	r3, #0
 8013a54:	b2db      	uxtb	r3, r3
 8013a56:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8013a58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013a5c:	b299      	uxth	r1, r3
 8013a5e:	6a3b      	ldr	r3, [r7, #32]
 8013a60:	68db      	ldr	r3, [r3, #12]
 8013a62:	685b      	ldr	r3, [r3, #4]
 8013a64:	8bba      	ldrh	r2, [r7, #28]
 8013a66:	6878      	ldr	r0, [r7, #4]
 8013a68:	f7ff fdf8 	bl	801365c <tcp_output_alloc_header>
 8013a6c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8013a6e:	69bb      	ldr	r3, [r7, #24]
 8013a70:	2b00      	cmp	r3, #0
 8013a72:	d102      	bne.n	8013a7a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8013a74:	f04f 33ff 	mov.w	r3, #4294967295
 8013a78:	e04c      	b.n	8013b14 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8013a7a:	69bb      	ldr	r3, [r7, #24]
 8013a7c:	685b      	ldr	r3, [r3, #4]
 8013a7e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8013a80:	7ffb      	ldrb	r3, [r7, #31]
 8013a82:	2b00      	cmp	r3, #0
 8013a84:	d011      	beq.n	8013aaa <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8013a86:	697b      	ldr	r3, [r7, #20]
 8013a88:	899b      	ldrh	r3, [r3, #12]
 8013a8a:	b29b      	uxth	r3, r3
 8013a8c:	b21b      	sxth	r3, r3
 8013a8e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8013a92:	b21c      	sxth	r4, r3
 8013a94:	2011      	movs	r0, #17
 8013a96:	f7f8 f879 	bl	800bb8c <lwip_htons>
 8013a9a:	4603      	mov	r3, r0
 8013a9c:	b21b      	sxth	r3, r3
 8013a9e:	4323      	orrs	r3, r4
 8013aa0:	b21b      	sxth	r3, r3
 8013aa2:	b29a      	uxth	r2, r3
 8013aa4:	697b      	ldr	r3, [r7, #20]
 8013aa6:	819a      	strh	r2, [r3, #12]
 8013aa8:	e010      	b.n	8013acc <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8013aaa:	69bb      	ldr	r3, [r7, #24]
 8013aac:	685b      	ldr	r3, [r3, #4]
 8013aae:	3314      	adds	r3, #20
 8013ab0:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8013ab2:	6a3b      	ldr	r3, [r7, #32]
 8013ab4:	6858      	ldr	r0, [r3, #4]
 8013ab6:	6a3b      	ldr	r3, [r7, #32]
 8013ab8:	685b      	ldr	r3, [r3, #4]
 8013aba:	891a      	ldrh	r2, [r3, #8]
 8013abc:	6a3b      	ldr	r3, [r7, #32]
 8013abe:	891b      	ldrh	r3, [r3, #8]
 8013ac0:	1ad3      	subs	r3, r2, r3
 8013ac2:	b29b      	uxth	r3, r3
 8013ac4:	2201      	movs	r2, #1
 8013ac6:	6939      	ldr	r1, [r7, #16]
 8013ac8:	f7f9 fdd0 	bl	800d66c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8013acc:	6a3b      	ldr	r3, [r7, #32]
 8013ace:	68db      	ldr	r3, [r3, #12]
 8013ad0:	685b      	ldr	r3, [r3, #4]
 8013ad2:	4618      	mov	r0, r3
 8013ad4:	f7f8 f86f 	bl	800bbb6 <lwip_htonl>
 8013ad8:	4603      	mov	r3, r0
 8013ada:	3301      	adds	r3, #1
 8013adc:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8013ade:	687b      	ldr	r3, [r7, #4]
 8013ae0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013ae2:	68fb      	ldr	r3, [r7, #12]
 8013ae4:	1ad3      	subs	r3, r2, r3
 8013ae6:	2b00      	cmp	r3, #0
 8013ae8:	da02      	bge.n	8013af0 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8013aea:	687b      	ldr	r3, [r7, #4]
 8013aec:	68fa      	ldr	r2, [r7, #12]
 8013aee:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013af0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013af4:	2200      	movs	r2, #0
 8013af6:	69b9      	ldr	r1, [r7, #24]
 8013af8:	6878      	ldr	r0, [r7, #4]
 8013afa:	f7ff fded 	bl	80136d8 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013afe:	687a      	ldr	r2, [r7, #4]
 8013b00:	687b      	ldr	r3, [r7, #4]
 8013b02:	3304      	adds	r3, #4
 8013b04:	69b9      	ldr	r1, [r7, #24]
 8013b06:	6878      	ldr	r0, [r7, #4]
 8013b08:	f7ff fe26 	bl	8013758 <tcp_output_control_segment>
 8013b0c:	4603      	mov	r3, r0
 8013b0e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8013b10:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8013b14:	4618      	mov	r0, r3
 8013b16:	372c      	adds	r7, #44	; 0x2c
 8013b18:	46bd      	mov	sp, r7
 8013b1a:	bd90      	pop	{r4, r7, pc}
 8013b1c:	08019d94 	.word	0x08019d94
 8013b20:	0801a58c 	.word	0x0801a58c
 8013b24:	08019de8 	.word	0x08019de8

08013b28 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8013b28:	b580      	push	{r7, lr}
 8013b2a:	b082      	sub	sp, #8
 8013b2c:	af00      	add	r7, sp, #0
 8013b2e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8013b30:	f7f9 feee 	bl	800d910 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8013b34:	4b0a      	ldr	r3, [pc, #40]	; (8013b60 <tcpip_tcp_timer+0x38>)
 8013b36:	681b      	ldr	r3, [r3, #0]
 8013b38:	2b00      	cmp	r3, #0
 8013b3a:	d103      	bne.n	8013b44 <tcpip_tcp_timer+0x1c>
 8013b3c:	4b09      	ldr	r3, [pc, #36]	; (8013b64 <tcpip_tcp_timer+0x3c>)
 8013b3e:	681b      	ldr	r3, [r3, #0]
 8013b40:	2b00      	cmp	r3, #0
 8013b42:	d005      	beq.n	8013b50 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8013b44:	2200      	movs	r2, #0
 8013b46:	4908      	ldr	r1, [pc, #32]	; (8013b68 <tcpip_tcp_timer+0x40>)
 8013b48:	20fa      	movs	r0, #250	; 0xfa
 8013b4a:	f000 f8f3 	bl	8013d34 <sys_timeout>
 8013b4e:	e003      	b.n	8013b58 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8013b50:	4b06      	ldr	r3, [pc, #24]	; (8013b6c <tcpip_tcp_timer+0x44>)
 8013b52:	2200      	movs	r2, #0
 8013b54:	601a      	str	r2, [r3, #0]
  }
}
 8013b56:	bf00      	nop
 8013b58:	bf00      	nop
 8013b5a:	3708      	adds	r7, #8
 8013b5c:	46bd      	mov	sp, r7
 8013b5e:	bd80      	pop	{r7, pc}
 8013b60:	20008bb4 	.word	0x20008bb4
 8013b64:	20008bb8 	.word	0x20008bb8
 8013b68:	08013b29 	.word	0x08013b29
 8013b6c:	20008c00 	.word	0x20008c00

08013b70 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8013b70:	b580      	push	{r7, lr}
 8013b72:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8013b74:	4b0a      	ldr	r3, [pc, #40]	; (8013ba0 <tcp_timer_needed+0x30>)
 8013b76:	681b      	ldr	r3, [r3, #0]
 8013b78:	2b00      	cmp	r3, #0
 8013b7a:	d10f      	bne.n	8013b9c <tcp_timer_needed+0x2c>
 8013b7c:	4b09      	ldr	r3, [pc, #36]	; (8013ba4 <tcp_timer_needed+0x34>)
 8013b7e:	681b      	ldr	r3, [r3, #0]
 8013b80:	2b00      	cmp	r3, #0
 8013b82:	d103      	bne.n	8013b8c <tcp_timer_needed+0x1c>
 8013b84:	4b08      	ldr	r3, [pc, #32]	; (8013ba8 <tcp_timer_needed+0x38>)
 8013b86:	681b      	ldr	r3, [r3, #0]
 8013b88:	2b00      	cmp	r3, #0
 8013b8a:	d007      	beq.n	8013b9c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8013b8c:	4b04      	ldr	r3, [pc, #16]	; (8013ba0 <tcp_timer_needed+0x30>)
 8013b8e:	2201      	movs	r2, #1
 8013b90:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8013b92:	2200      	movs	r2, #0
 8013b94:	4905      	ldr	r1, [pc, #20]	; (8013bac <tcp_timer_needed+0x3c>)
 8013b96:	20fa      	movs	r0, #250	; 0xfa
 8013b98:	f000 f8cc 	bl	8013d34 <sys_timeout>
  }
}
 8013b9c:	bf00      	nop
 8013b9e:	bd80      	pop	{r7, pc}
 8013ba0:	20008c00 	.word	0x20008c00
 8013ba4:	20008bb4 	.word	0x20008bb4
 8013ba8:	20008bb8 	.word	0x20008bb8
 8013bac:	08013b29 	.word	0x08013b29

08013bb0 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8013bb0:	b580      	push	{r7, lr}
 8013bb2:	b086      	sub	sp, #24
 8013bb4:	af00      	add	r7, sp, #0
 8013bb6:	60f8      	str	r0, [r7, #12]
 8013bb8:	60b9      	str	r1, [r7, #8]
 8013bba:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8013bbc:	2006      	movs	r0, #6
 8013bbe:	f7f8 fc85 	bl	800c4cc <memp_malloc>
 8013bc2:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8013bc4:	693b      	ldr	r3, [r7, #16]
 8013bc6:	2b00      	cmp	r3, #0
 8013bc8:	d109      	bne.n	8013bde <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8013bca:	693b      	ldr	r3, [r7, #16]
 8013bcc:	2b00      	cmp	r3, #0
 8013bce:	d151      	bne.n	8013c74 <sys_timeout_abs+0xc4>
 8013bd0:	4b2a      	ldr	r3, [pc, #168]	; (8013c7c <sys_timeout_abs+0xcc>)
 8013bd2:	22be      	movs	r2, #190	; 0xbe
 8013bd4:	492a      	ldr	r1, [pc, #168]	; (8013c80 <sys_timeout_abs+0xd0>)
 8013bd6:	482b      	ldr	r0, [pc, #172]	; (8013c84 <sys_timeout_abs+0xd4>)
 8013bd8:	f002 fe32 	bl	8016840 <iprintf>
    return;
 8013bdc:	e04a      	b.n	8013c74 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8013bde:	693b      	ldr	r3, [r7, #16]
 8013be0:	2200      	movs	r2, #0
 8013be2:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8013be4:	693b      	ldr	r3, [r7, #16]
 8013be6:	68ba      	ldr	r2, [r7, #8]
 8013be8:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8013bea:	693b      	ldr	r3, [r7, #16]
 8013bec:	687a      	ldr	r2, [r7, #4]
 8013bee:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8013bf0:	693b      	ldr	r3, [r7, #16]
 8013bf2:	68fa      	ldr	r2, [r7, #12]
 8013bf4:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8013bf6:	4b24      	ldr	r3, [pc, #144]	; (8013c88 <sys_timeout_abs+0xd8>)
 8013bf8:	681b      	ldr	r3, [r3, #0]
 8013bfa:	2b00      	cmp	r3, #0
 8013bfc:	d103      	bne.n	8013c06 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8013bfe:	4a22      	ldr	r2, [pc, #136]	; (8013c88 <sys_timeout_abs+0xd8>)
 8013c00:	693b      	ldr	r3, [r7, #16]
 8013c02:	6013      	str	r3, [r2, #0]
    return;
 8013c04:	e037      	b.n	8013c76 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8013c06:	693b      	ldr	r3, [r7, #16]
 8013c08:	685a      	ldr	r2, [r3, #4]
 8013c0a:	4b1f      	ldr	r3, [pc, #124]	; (8013c88 <sys_timeout_abs+0xd8>)
 8013c0c:	681b      	ldr	r3, [r3, #0]
 8013c0e:	685b      	ldr	r3, [r3, #4]
 8013c10:	1ad3      	subs	r3, r2, r3
 8013c12:	0fdb      	lsrs	r3, r3, #31
 8013c14:	f003 0301 	and.w	r3, r3, #1
 8013c18:	b2db      	uxtb	r3, r3
 8013c1a:	2b00      	cmp	r3, #0
 8013c1c:	d007      	beq.n	8013c2e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8013c1e:	4b1a      	ldr	r3, [pc, #104]	; (8013c88 <sys_timeout_abs+0xd8>)
 8013c20:	681a      	ldr	r2, [r3, #0]
 8013c22:	693b      	ldr	r3, [r7, #16]
 8013c24:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8013c26:	4a18      	ldr	r2, [pc, #96]	; (8013c88 <sys_timeout_abs+0xd8>)
 8013c28:	693b      	ldr	r3, [r7, #16]
 8013c2a:	6013      	str	r3, [r2, #0]
 8013c2c:	e023      	b.n	8013c76 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8013c2e:	4b16      	ldr	r3, [pc, #88]	; (8013c88 <sys_timeout_abs+0xd8>)
 8013c30:	681b      	ldr	r3, [r3, #0]
 8013c32:	617b      	str	r3, [r7, #20]
 8013c34:	e01a      	b.n	8013c6c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8013c36:	697b      	ldr	r3, [r7, #20]
 8013c38:	681b      	ldr	r3, [r3, #0]
 8013c3a:	2b00      	cmp	r3, #0
 8013c3c:	d00b      	beq.n	8013c56 <sys_timeout_abs+0xa6>
 8013c3e:	693b      	ldr	r3, [r7, #16]
 8013c40:	685a      	ldr	r2, [r3, #4]
 8013c42:	697b      	ldr	r3, [r7, #20]
 8013c44:	681b      	ldr	r3, [r3, #0]
 8013c46:	685b      	ldr	r3, [r3, #4]
 8013c48:	1ad3      	subs	r3, r2, r3
 8013c4a:	0fdb      	lsrs	r3, r3, #31
 8013c4c:	f003 0301 	and.w	r3, r3, #1
 8013c50:	b2db      	uxtb	r3, r3
 8013c52:	2b00      	cmp	r3, #0
 8013c54:	d007      	beq.n	8013c66 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8013c56:	697b      	ldr	r3, [r7, #20]
 8013c58:	681a      	ldr	r2, [r3, #0]
 8013c5a:	693b      	ldr	r3, [r7, #16]
 8013c5c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8013c5e:	697b      	ldr	r3, [r7, #20]
 8013c60:	693a      	ldr	r2, [r7, #16]
 8013c62:	601a      	str	r2, [r3, #0]
        break;
 8013c64:	e007      	b.n	8013c76 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8013c66:	697b      	ldr	r3, [r7, #20]
 8013c68:	681b      	ldr	r3, [r3, #0]
 8013c6a:	617b      	str	r3, [r7, #20]
 8013c6c:	697b      	ldr	r3, [r7, #20]
 8013c6e:	2b00      	cmp	r3, #0
 8013c70:	d1e1      	bne.n	8013c36 <sys_timeout_abs+0x86>
 8013c72:	e000      	b.n	8013c76 <sys_timeout_abs+0xc6>
    return;
 8013c74:	bf00      	nop
      }
    }
  }
}
 8013c76:	3718      	adds	r7, #24
 8013c78:	46bd      	mov	sp, r7
 8013c7a:	bd80      	pop	{r7, pc}
 8013c7c:	0801a5b0 	.word	0x0801a5b0
 8013c80:	0801a5e4 	.word	0x0801a5e4
 8013c84:	0801a624 	.word	0x0801a624
 8013c88:	20008bf8 	.word	0x20008bf8

08013c8c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8013c8c:	b580      	push	{r7, lr}
 8013c8e:	b086      	sub	sp, #24
 8013c90:	af00      	add	r7, sp, #0
 8013c92:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8013c94:	687b      	ldr	r3, [r7, #4]
 8013c96:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8013c98:	697b      	ldr	r3, [r7, #20]
 8013c9a:	685b      	ldr	r3, [r3, #4]
 8013c9c:	4798      	blx	r3

  now = sys_now();
 8013c9e:	f7f6 f985 	bl	8009fac <sys_now>
 8013ca2:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8013ca4:	697b      	ldr	r3, [r7, #20]
 8013ca6:	681a      	ldr	r2, [r3, #0]
 8013ca8:	4b0f      	ldr	r3, [pc, #60]	; (8013ce8 <lwip_cyclic_timer+0x5c>)
 8013caa:	681b      	ldr	r3, [r3, #0]
 8013cac:	4413      	add	r3, r2
 8013cae:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8013cb0:	68fa      	ldr	r2, [r7, #12]
 8013cb2:	693b      	ldr	r3, [r7, #16]
 8013cb4:	1ad3      	subs	r3, r2, r3
 8013cb6:	0fdb      	lsrs	r3, r3, #31
 8013cb8:	f003 0301 	and.w	r3, r3, #1
 8013cbc:	b2db      	uxtb	r3, r3
 8013cbe:	2b00      	cmp	r3, #0
 8013cc0:	d009      	beq.n	8013cd6 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8013cc2:	697b      	ldr	r3, [r7, #20]
 8013cc4:	681a      	ldr	r2, [r3, #0]
 8013cc6:	693b      	ldr	r3, [r7, #16]
 8013cc8:	4413      	add	r3, r2
 8013cca:	687a      	ldr	r2, [r7, #4]
 8013ccc:	4907      	ldr	r1, [pc, #28]	; (8013cec <lwip_cyclic_timer+0x60>)
 8013cce:	4618      	mov	r0, r3
 8013cd0:	f7ff ff6e 	bl	8013bb0 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8013cd4:	e004      	b.n	8013ce0 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8013cd6:	687a      	ldr	r2, [r7, #4]
 8013cd8:	4904      	ldr	r1, [pc, #16]	; (8013cec <lwip_cyclic_timer+0x60>)
 8013cda:	68f8      	ldr	r0, [r7, #12]
 8013cdc:	f7ff ff68 	bl	8013bb0 <sys_timeout_abs>
}
 8013ce0:	bf00      	nop
 8013ce2:	3718      	adds	r7, #24
 8013ce4:	46bd      	mov	sp, r7
 8013ce6:	bd80      	pop	{r7, pc}
 8013ce8:	20008bfc 	.word	0x20008bfc
 8013cec:	08013c8d 	.word	0x08013c8d

08013cf0 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8013cf0:	b580      	push	{r7, lr}
 8013cf2:	b082      	sub	sp, #8
 8013cf4:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8013cf6:	2301      	movs	r3, #1
 8013cf8:	607b      	str	r3, [r7, #4]
 8013cfa:	e00e      	b.n	8013d1a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8013cfc:	4a0b      	ldr	r2, [pc, #44]	; (8013d2c <sys_timeouts_init+0x3c>)
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8013d04:	687b      	ldr	r3, [r7, #4]
 8013d06:	00db      	lsls	r3, r3, #3
 8013d08:	4a08      	ldr	r2, [pc, #32]	; (8013d2c <sys_timeouts_init+0x3c>)
 8013d0a:	4413      	add	r3, r2
 8013d0c:	461a      	mov	r2, r3
 8013d0e:	4908      	ldr	r1, [pc, #32]	; (8013d30 <sys_timeouts_init+0x40>)
 8013d10:	f000 f810 	bl	8013d34 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8013d14:	687b      	ldr	r3, [r7, #4]
 8013d16:	3301      	adds	r3, #1
 8013d18:	607b      	str	r3, [r7, #4]
 8013d1a:	687b      	ldr	r3, [r7, #4]
 8013d1c:	2b02      	cmp	r3, #2
 8013d1e:	d9ed      	bls.n	8013cfc <sys_timeouts_init+0xc>
  }
}
 8013d20:	bf00      	nop
 8013d22:	bf00      	nop
 8013d24:	3708      	adds	r7, #8
 8013d26:	46bd      	mov	sp, r7
 8013d28:	bd80      	pop	{r7, pc}
 8013d2a:	bf00      	nop
 8013d2c:	0801d0d0 	.word	0x0801d0d0
 8013d30:	08013c8d 	.word	0x08013c8d

08013d34 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8013d34:	b580      	push	{r7, lr}
 8013d36:	b086      	sub	sp, #24
 8013d38:	af00      	add	r7, sp, #0
 8013d3a:	60f8      	str	r0, [r7, #12]
 8013d3c:	60b9      	str	r1, [r7, #8]
 8013d3e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8013d40:	68fb      	ldr	r3, [r7, #12]
 8013d42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013d46:	d306      	bcc.n	8013d56 <sys_timeout+0x22>
 8013d48:	4b0a      	ldr	r3, [pc, #40]	; (8013d74 <sys_timeout+0x40>)
 8013d4a:	f240 1229 	movw	r2, #297	; 0x129
 8013d4e:	490a      	ldr	r1, [pc, #40]	; (8013d78 <sys_timeout+0x44>)
 8013d50:	480a      	ldr	r0, [pc, #40]	; (8013d7c <sys_timeout+0x48>)
 8013d52:	f002 fd75 	bl	8016840 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8013d56:	f7f6 f929 	bl	8009fac <sys_now>
 8013d5a:	4602      	mov	r2, r0
 8013d5c:	68fb      	ldr	r3, [r7, #12]
 8013d5e:	4413      	add	r3, r2
 8013d60:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8013d62:	687a      	ldr	r2, [r7, #4]
 8013d64:	68b9      	ldr	r1, [r7, #8]
 8013d66:	6978      	ldr	r0, [r7, #20]
 8013d68:	f7ff ff22 	bl	8013bb0 <sys_timeout_abs>
#endif
}
 8013d6c:	bf00      	nop
 8013d6e:	3718      	adds	r7, #24
 8013d70:	46bd      	mov	sp, r7
 8013d72:	bd80      	pop	{r7, pc}
 8013d74:	0801a5b0 	.word	0x0801a5b0
 8013d78:	0801a64c 	.word	0x0801a64c
 8013d7c:	0801a624 	.word	0x0801a624

08013d80 <sys_untimeout>:
 * @param handler callback function that would be called by the timeout
 * @param arg callback argument that would be passed to handler
*/
void
sys_untimeout(sys_timeout_handler handler, void *arg)
{
 8013d80:	b580      	push	{r7, lr}
 8013d82:	b084      	sub	sp, #16
 8013d84:	af00      	add	r7, sp, #0
 8013d86:	6078      	str	r0, [r7, #4]
 8013d88:	6039      	str	r1, [r7, #0]
  struct sys_timeo *prev_t, *t;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8013d8a:	4b19      	ldr	r3, [pc, #100]	; (8013df0 <sys_untimeout+0x70>)
 8013d8c:	681b      	ldr	r3, [r3, #0]
 8013d8e:	2b00      	cmp	r3, #0
 8013d90:	d029      	beq.n	8013de6 <sys_untimeout+0x66>
    return;
  }

  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 8013d92:	4b17      	ldr	r3, [pc, #92]	; (8013df0 <sys_untimeout+0x70>)
 8013d94:	681b      	ldr	r3, [r3, #0]
 8013d96:	60bb      	str	r3, [r7, #8]
 8013d98:	2300      	movs	r3, #0
 8013d9a:	60fb      	str	r3, [r7, #12]
 8013d9c:	e01f      	b.n	8013dde <sys_untimeout+0x5e>
    if ((t->h == handler) && (t->arg == arg)) {
 8013d9e:	68bb      	ldr	r3, [r7, #8]
 8013da0:	689b      	ldr	r3, [r3, #8]
 8013da2:	687a      	ldr	r2, [r7, #4]
 8013da4:	429a      	cmp	r2, r3
 8013da6:	d115      	bne.n	8013dd4 <sys_untimeout+0x54>
 8013da8:	68bb      	ldr	r3, [r7, #8]
 8013daa:	68db      	ldr	r3, [r3, #12]
 8013dac:	683a      	ldr	r2, [r7, #0]
 8013dae:	429a      	cmp	r2, r3
 8013db0:	d110      	bne.n	8013dd4 <sys_untimeout+0x54>
      /* We have a match */
      /* Unlink from previous in list */
      if (prev_t == NULL) {
 8013db2:	68fb      	ldr	r3, [r7, #12]
 8013db4:	2b00      	cmp	r3, #0
 8013db6:	d104      	bne.n	8013dc2 <sys_untimeout+0x42>
        next_timeout = t->next;
 8013db8:	68bb      	ldr	r3, [r7, #8]
 8013dba:	681b      	ldr	r3, [r3, #0]
 8013dbc:	4a0c      	ldr	r2, [pc, #48]	; (8013df0 <sys_untimeout+0x70>)
 8013dbe:	6013      	str	r3, [r2, #0]
 8013dc0:	e003      	b.n	8013dca <sys_untimeout+0x4a>
      } else {
        prev_t->next = t->next;
 8013dc2:	68bb      	ldr	r3, [r7, #8]
 8013dc4:	681a      	ldr	r2, [r3, #0]
 8013dc6:	68fb      	ldr	r3, [r7, #12]
 8013dc8:	601a      	str	r2, [r3, #0]
      }
      memp_free(MEMP_SYS_TIMEOUT, t);
 8013dca:	68b9      	ldr	r1, [r7, #8]
 8013dcc:	2006      	movs	r0, #6
 8013dce:	f7f8 fbed 	bl	800c5ac <memp_free>
      return;
 8013dd2:	e009      	b.n	8013de8 <sys_untimeout+0x68>
  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 8013dd4:	68bb      	ldr	r3, [r7, #8]
 8013dd6:	60fb      	str	r3, [r7, #12]
 8013dd8:	68bb      	ldr	r3, [r7, #8]
 8013dda:	681b      	ldr	r3, [r3, #0]
 8013ddc:	60bb      	str	r3, [r7, #8]
 8013dde:	68bb      	ldr	r3, [r7, #8]
 8013de0:	2b00      	cmp	r3, #0
 8013de2:	d1dc      	bne.n	8013d9e <sys_untimeout+0x1e>
    }
  }
  return;
 8013de4:	e000      	b.n	8013de8 <sys_untimeout+0x68>
    return;
 8013de6:	bf00      	nop
}
 8013de8:	3710      	adds	r7, #16
 8013dea:	46bd      	mov	sp, r7
 8013dec:	bd80      	pop	{r7, pc}
 8013dee:	bf00      	nop
 8013df0:	20008bf8 	.word	0x20008bf8

08013df4 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8013df4:	b580      	push	{r7, lr}
 8013df6:	b084      	sub	sp, #16
 8013df8:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8013dfa:	f7f6 f8d7 	bl	8009fac <sys_now>
 8013dfe:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 8013e00:	4b1a      	ldr	r3, [pc, #104]	; (8013e6c <sys_check_timeouts+0x78>)
 8013e02:	781b      	ldrb	r3, [r3, #0]
 8013e04:	b2db      	uxtb	r3, r3
 8013e06:	2b00      	cmp	r3, #0
 8013e08:	d001      	beq.n	8013e0e <sys_check_timeouts+0x1a>
 8013e0a:	f7f8 ff0b 	bl	800cc24 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 8013e0e:	4b18      	ldr	r3, [pc, #96]	; (8013e70 <sys_check_timeouts+0x7c>)
 8013e10:	681b      	ldr	r3, [r3, #0]
 8013e12:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8013e14:	68bb      	ldr	r3, [r7, #8]
 8013e16:	2b00      	cmp	r3, #0
 8013e18:	d022      	beq.n	8013e60 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8013e1a:	68bb      	ldr	r3, [r7, #8]
 8013e1c:	685b      	ldr	r3, [r3, #4]
 8013e1e:	68fa      	ldr	r2, [r7, #12]
 8013e20:	1ad3      	subs	r3, r2, r3
 8013e22:	0fdb      	lsrs	r3, r3, #31
 8013e24:	f003 0301 	and.w	r3, r3, #1
 8013e28:	b2db      	uxtb	r3, r3
 8013e2a:	2b00      	cmp	r3, #0
 8013e2c:	d11a      	bne.n	8013e64 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8013e2e:	68bb      	ldr	r3, [r7, #8]
 8013e30:	681b      	ldr	r3, [r3, #0]
 8013e32:	4a0f      	ldr	r2, [pc, #60]	; (8013e70 <sys_check_timeouts+0x7c>)
 8013e34:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8013e36:	68bb      	ldr	r3, [r7, #8]
 8013e38:	689b      	ldr	r3, [r3, #8]
 8013e3a:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8013e3c:	68bb      	ldr	r3, [r7, #8]
 8013e3e:	68db      	ldr	r3, [r3, #12]
 8013e40:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8013e42:	68bb      	ldr	r3, [r7, #8]
 8013e44:	685b      	ldr	r3, [r3, #4]
 8013e46:	4a0b      	ldr	r2, [pc, #44]	; (8013e74 <sys_check_timeouts+0x80>)
 8013e48:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8013e4a:	68b9      	ldr	r1, [r7, #8]
 8013e4c:	2006      	movs	r0, #6
 8013e4e:	f7f8 fbad 	bl	800c5ac <memp_free>
    if (handler != NULL) {
 8013e52:	687b      	ldr	r3, [r7, #4]
 8013e54:	2b00      	cmp	r3, #0
 8013e56:	d0d3      	beq.n	8013e00 <sys_check_timeouts+0xc>
      handler(arg);
 8013e58:	687b      	ldr	r3, [r7, #4]
 8013e5a:	6838      	ldr	r0, [r7, #0]
 8013e5c:	4798      	blx	r3
  do {
 8013e5e:	e7cf      	b.n	8013e00 <sys_check_timeouts+0xc>
      return;
 8013e60:	bf00      	nop
 8013e62:	e000      	b.n	8013e66 <sys_check_timeouts+0x72>
      return;
 8013e64:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8013e66:	3710      	adds	r7, #16
 8013e68:	46bd      	mov	sp, r7
 8013e6a:	bd80      	pop	{r7, pc}
 8013e6c:	20008ba5 	.word	0x20008ba5
 8013e70:	20008bf8 	.word	0x20008bf8
 8013e74:	20008bfc 	.word	0x20008bfc

08013e78 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8013e78:	b580      	push	{r7, lr}
 8013e7a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8013e7c:	f002 fd6e 	bl	801695c <rand>
 8013e80:	4603      	mov	r3, r0
 8013e82:	b29b      	uxth	r3, r3
 8013e84:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8013e88:	b29b      	uxth	r3, r3
 8013e8a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8013e8e:	b29a      	uxth	r2, r3
 8013e90:	4b01      	ldr	r3, [pc, #4]	; (8013e98 <udp_init+0x20>)
 8013e92:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8013e94:	bf00      	nop
 8013e96:	bd80      	pop	{r7, pc}
 8013e98:	20000068 	.word	0x20000068

08013e9c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8013e9c:	b580      	push	{r7, lr}
 8013e9e:	b084      	sub	sp, #16
 8013ea0:	af00      	add	r7, sp, #0
 8013ea2:	60f8      	str	r0, [r7, #12]
 8013ea4:	60b9      	str	r1, [r7, #8]
 8013ea6:	4613      	mov	r3, r2
 8013ea8:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8013eaa:	68fb      	ldr	r3, [r7, #12]
 8013eac:	2b00      	cmp	r3, #0
 8013eae:	d105      	bne.n	8013ebc <udp_input_local_match+0x20>
 8013eb0:	4b27      	ldr	r3, [pc, #156]	; (8013f50 <udp_input_local_match+0xb4>)
 8013eb2:	2287      	movs	r2, #135	; 0x87
 8013eb4:	4927      	ldr	r1, [pc, #156]	; (8013f54 <udp_input_local_match+0xb8>)
 8013eb6:	4828      	ldr	r0, [pc, #160]	; (8013f58 <udp_input_local_match+0xbc>)
 8013eb8:	f002 fcc2 	bl	8016840 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8013ebc:	68bb      	ldr	r3, [r7, #8]
 8013ebe:	2b00      	cmp	r3, #0
 8013ec0:	d105      	bne.n	8013ece <udp_input_local_match+0x32>
 8013ec2:	4b23      	ldr	r3, [pc, #140]	; (8013f50 <udp_input_local_match+0xb4>)
 8013ec4:	2288      	movs	r2, #136	; 0x88
 8013ec6:	4925      	ldr	r1, [pc, #148]	; (8013f5c <udp_input_local_match+0xc0>)
 8013ec8:	4823      	ldr	r0, [pc, #140]	; (8013f58 <udp_input_local_match+0xbc>)
 8013eca:	f002 fcb9 	bl	8016840 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013ece:	68fb      	ldr	r3, [r7, #12]
 8013ed0:	7a1b      	ldrb	r3, [r3, #8]
 8013ed2:	2b00      	cmp	r3, #0
 8013ed4:	d00b      	beq.n	8013eee <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8013ed6:	68fb      	ldr	r3, [r7, #12]
 8013ed8:	7a1a      	ldrb	r2, [r3, #8]
 8013eda:	4b21      	ldr	r3, [pc, #132]	; (8013f60 <udp_input_local_match+0xc4>)
 8013edc:	685b      	ldr	r3, [r3, #4]
 8013ede:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013ee2:	3301      	adds	r3, #1
 8013ee4:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013ee6:	429a      	cmp	r2, r3
 8013ee8:	d001      	beq.n	8013eee <udp_input_local_match+0x52>
    return 0;
 8013eea:	2300      	movs	r3, #0
 8013eec:	e02b      	b.n	8013f46 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8013eee:	79fb      	ldrb	r3, [r7, #7]
 8013ef0:	2b00      	cmp	r3, #0
 8013ef2:	d018      	beq.n	8013f26 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013ef4:	68fb      	ldr	r3, [r7, #12]
 8013ef6:	2b00      	cmp	r3, #0
 8013ef8:	d013      	beq.n	8013f22 <udp_input_local_match+0x86>
 8013efa:	68fb      	ldr	r3, [r7, #12]
 8013efc:	681b      	ldr	r3, [r3, #0]
 8013efe:	2b00      	cmp	r3, #0
 8013f00:	d00f      	beq.n	8013f22 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8013f02:	4b17      	ldr	r3, [pc, #92]	; (8013f60 <udp_input_local_match+0xc4>)
 8013f04:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013f06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013f0a:	d00a      	beq.n	8013f22 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8013f0c:	68fb      	ldr	r3, [r7, #12]
 8013f0e:	681a      	ldr	r2, [r3, #0]
 8013f10:	4b13      	ldr	r3, [pc, #76]	; (8013f60 <udp_input_local_match+0xc4>)
 8013f12:	695b      	ldr	r3, [r3, #20]
 8013f14:	405a      	eors	r2, r3
 8013f16:	68bb      	ldr	r3, [r7, #8]
 8013f18:	3308      	adds	r3, #8
 8013f1a:	681b      	ldr	r3, [r3, #0]
 8013f1c:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8013f1e:	2b00      	cmp	r3, #0
 8013f20:	d110      	bne.n	8013f44 <udp_input_local_match+0xa8>
          return 1;
 8013f22:	2301      	movs	r3, #1
 8013f24:	e00f      	b.n	8013f46 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8013f26:	68fb      	ldr	r3, [r7, #12]
 8013f28:	2b00      	cmp	r3, #0
 8013f2a:	d009      	beq.n	8013f40 <udp_input_local_match+0xa4>
 8013f2c:	68fb      	ldr	r3, [r7, #12]
 8013f2e:	681b      	ldr	r3, [r3, #0]
 8013f30:	2b00      	cmp	r3, #0
 8013f32:	d005      	beq.n	8013f40 <udp_input_local_match+0xa4>
 8013f34:	68fb      	ldr	r3, [r7, #12]
 8013f36:	681a      	ldr	r2, [r3, #0]
 8013f38:	4b09      	ldr	r3, [pc, #36]	; (8013f60 <udp_input_local_match+0xc4>)
 8013f3a:	695b      	ldr	r3, [r3, #20]
 8013f3c:	429a      	cmp	r2, r3
 8013f3e:	d101      	bne.n	8013f44 <udp_input_local_match+0xa8>
        return 1;
 8013f40:	2301      	movs	r3, #1
 8013f42:	e000      	b.n	8013f46 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8013f44:	2300      	movs	r3, #0
}
 8013f46:	4618      	mov	r0, r3
 8013f48:	3710      	adds	r7, #16
 8013f4a:	46bd      	mov	sp, r7
 8013f4c:	bd80      	pop	{r7, pc}
 8013f4e:	bf00      	nop
 8013f50:	0801a698 	.word	0x0801a698
 8013f54:	0801a6c8 	.word	0x0801a6c8
 8013f58:	0801a6ec 	.word	0x0801a6ec
 8013f5c:	0801a714 	.word	0x0801a714
 8013f60:	20005638 	.word	0x20005638

08013f64 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8013f64:	b590      	push	{r4, r7, lr}
 8013f66:	b08d      	sub	sp, #52	; 0x34
 8013f68:	af02      	add	r7, sp, #8
 8013f6a:	6078      	str	r0, [r7, #4]
 8013f6c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8013f6e:	2300      	movs	r3, #0
 8013f70:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8013f72:	687b      	ldr	r3, [r7, #4]
 8013f74:	2b00      	cmp	r3, #0
 8013f76:	d105      	bne.n	8013f84 <udp_input+0x20>
 8013f78:	4b7c      	ldr	r3, [pc, #496]	; (801416c <udp_input+0x208>)
 8013f7a:	22cf      	movs	r2, #207	; 0xcf
 8013f7c:	497c      	ldr	r1, [pc, #496]	; (8014170 <udp_input+0x20c>)
 8013f7e:	487d      	ldr	r0, [pc, #500]	; (8014174 <udp_input+0x210>)
 8013f80:	f002 fc5e 	bl	8016840 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8013f84:	683b      	ldr	r3, [r7, #0]
 8013f86:	2b00      	cmp	r3, #0
 8013f88:	d105      	bne.n	8013f96 <udp_input+0x32>
 8013f8a:	4b78      	ldr	r3, [pc, #480]	; (801416c <udp_input+0x208>)
 8013f8c:	22d0      	movs	r2, #208	; 0xd0
 8013f8e:	497a      	ldr	r1, [pc, #488]	; (8014178 <udp_input+0x214>)
 8013f90:	4878      	ldr	r0, [pc, #480]	; (8014174 <udp_input+0x210>)
 8013f92:	f002 fc55 	bl	8016840 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8013f96:	687b      	ldr	r3, [r7, #4]
 8013f98:	895b      	ldrh	r3, [r3, #10]
 8013f9a:	2b07      	cmp	r3, #7
 8013f9c:	d803      	bhi.n	8013fa6 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8013f9e:	6878      	ldr	r0, [r7, #4]
 8013fa0:	f7f9 f97a 	bl	800d298 <pbuf_free>
    goto end;
 8013fa4:	e0de      	b.n	8014164 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8013fa6:	687b      	ldr	r3, [r7, #4]
 8013fa8:	685b      	ldr	r3, [r3, #4]
 8013faa:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8013fac:	4b73      	ldr	r3, [pc, #460]	; (801417c <udp_input+0x218>)
 8013fae:	695b      	ldr	r3, [r3, #20]
 8013fb0:	4a72      	ldr	r2, [pc, #456]	; (801417c <udp_input+0x218>)
 8013fb2:	6812      	ldr	r2, [r2, #0]
 8013fb4:	4611      	mov	r1, r2
 8013fb6:	4618      	mov	r0, r3
 8013fb8:	f001 fc88 	bl	80158cc <ip4_addr_isbroadcast_u32>
 8013fbc:	4603      	mov	r3, r0
 8013fbe:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8013fc0:	697b      	ldr	r3, [r7, #20]
 8013fc2:	881b      	ldrh	r3, [r3, #0]
 8013fc4:	b29b      	uxth	r3, r3
 8013fc6:	4618      	mov	r0, r3
 8013fc8:	f7f7 fde0 	bl	800bb8c <lwip_htons>
 8013fcc:	4603      	mov	r3, r0
 8013fce:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8013fd0:	697b      	ldr	r3, [r7, #20]
 8013fd2:	885b      	ldrh	r3, [r3, #2]
 8013fd4:	b29b      	uxth	r3, r3
 8013fd6:	4618      	mov	r0, r3
 8013fd8:	f7f7 fdd8 	bl	800bb8c <lwip_htons>
 8013fdc:	4603      	mov	r3, r0
 8013fde:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8013fe0:	2300      	movs	r3, #0
 8013fe2:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8013fe4:	2300      	movs	r3, #0
 8013fe6:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8013fe8:	2300      	movs	r3, #0
 8013fea:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013fec:	4b64      	ldr	r3, [pc, #400]	; (8014180 <udp_input+0x21c>)
 8013fee:	681b      	ldr	r3, [r3, #0]
 8013ff0:	627b      	str	r3, [r7, #36]	; 0x24
 8013ff2:	e054      	b.n	801409e <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8013ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ff6:	8a5b      	ldrh	r3, [r3, #18]
 8013ff8:	89fa      	ldrh	r2, [r7, #14]
 8013ffa:	429a      	cmp	r2, r3
 8013ffc:	d14a      	bne.n	8014094 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8013ffe:	7cfb      	ldrb	r3, [r7, #19]
 8014000:	461a      	mov	r2, r3
 8014002:	6839      	ldr	r1, [r7, #0]
 8014004:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014006:	f7ff ff49 	bl	8013e9c <udp_input_local_match>
 801400a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801400c:	2b00      	cmp	r3, #0
 801400e:	d041      	beq.n	8014094 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8014010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014012:	7c1b      	ldrb	r3, [r3, #16]
 8014014:	f003 0304 	and.w	r3, r3, #4
 8014018:	2b00      	cmp	r3, #0
 801401a:	d11d      	bne.n	8014058 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 801401c:	69fb      	ldr	r3, [r7, #28]
 801401e:	2b00      	cmp	r3, #0
 8014020:	d102      	bne.n	8014028 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8014022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014024:	61fb      	str	r3, [r7, #28]
 8014026:	e017      	b.n	8014058 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8014028:	7cfb      	ldrb	r3, [r7, #19]
 801402a:	2b00      	cmp	r3, #0
 801402c:	d014      	beq.n	8014058 <udp_input+0xf4>
 801402e:	4b53      	ldr	r3, [pc, #332]	; (801417c <udp_input+0x218>)
 8014030:	695b      	ldr	r3, [r3, #20]
 8014032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014036:	d10f      	bne.n	8014058 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8014038:	69fb      	ldr	r3, [r7, #28]
 801403a:	681a      	ldr	r2, [r3, #0]
 801403c:	683b      	ldr	r3, [r7, #0]
 801403e:	3304      	adds	r3, #4
 8014040:	681b      	ldr	r3, [r3, #0]
 8014042:	429a      	cmp	r2, r3
 8014044:	d008      	beq.n	8014058 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8014046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014048:	681a      	ldr	r2, [r3, #0]
 801404a:	683b      	ldr	r3, [r7, #0]
 801404c:	3304      	adds	r3, #4
 801404e:	681b      	ldr	r3, [r3, #0]
 8014050:	429a      	cmp	r2, r3
 8014052:	d101      	bne.n	8014058 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8014054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014056:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8014058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801405a:	8a9b      	ldrh	r3, [r3, #20]
 801405c:	8a3a      	ldrh	r2, [r7, #16]
 801405e:	429a      	cmp	r2, r3
 8014060:	d118      	bne.n	8014094 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8014062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014064:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8014066:	2b00      	cmp	r3, #0
 8014068:	d005      	beq.n	8014076 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801406a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801406c:	685a      	ldr	r2, [r3, #4]
 801406e:	4b43      	ldr	r3, [pc, #268]	; (801417c <udp_input+0x218>)
 8014070:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8014072:	429a      	cmp	r2, r3
 8014074:	d10e      	bne.n	8014094 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8014076:	6a3b      	ldr	r3, [r7, #32]
 8014078:	2b00      	cmp	r3, #0
 801407a:	d014      	beq.n	80140a6 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801407c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801407e:	68da      	ldr	r2, [r3, #12]
 8014080:	6a3b      	ldr	r3, [r7, #32]
 8014082:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8014084:	4b3e      	ldr	r3, [pc, #248]	; (8014180 <udp_input+0x21c>)
 8014086:	681a      	ldr	r2, [r3, #0]
 8014088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801408a:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801408c:	4a3c      	ldr	r2, [pc, #240]	; (8014180 <udp_input+0x21c>)
 801408e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014090:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8014092:	e008      	b.n	80140a6 <udp_input+0x142>
      }
    }

    prev = pcb;
 8014094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014096:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8014098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801409a:	68db      	ldr	r3, [r3, #12]
 801409c:	627b      	str	r3, [r7, #36]	; 0x24
 801409e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140a0:	2b00      	cmp	r3, #0
 80140a2:	d1a7      	bne.n	8013ff4 <udp_input+0x90>
 80140a4:	e000      	b.n	80140a8 <udp_input+0x144>
        break;
 80140a6:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80140a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140aa:	2b00      	cmp	r3, #0
 80140ac:	d101      	bne.n	80140b2 <udp_input+0x14e>
    pcb = uncon_pcb;
 80140ae:	69fb      	ldr	r3, [r7, #28]
 80140b0:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80140b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140b4:	2b00      	cmp	r3, #0
 80140b6:	d002      	beq.n	80140be <udp_input+0x15a>
    for_us = 1;
 80140b8:	2301      	movs	r3, #1
 80140ba:	76fb      	strb	r3, [r7, #27]
 80140bc:	e00a      	b.n	80140d4 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 80140be:	683b      	ldr	r3, [r7, #0]
 80140c0:	3304      	adds	r3, #4
 80140c2:	681a      	ldr	r2, [r3, #0]
 80140c4:	4b2d      	ldr	r3, [pc, #180]	; (801417c <udp_input+0x218>)
 80140c6:	695b      	ldr	r3, [r3, #20]
 80140c8:	429a      	cmp	r2, r3
 80140ca:	bf0c      	ite	eq
 80140cc:	2301      	moveq	r3, #1
 80140ce:	2300      	movne	r3, #0
 80140d0:	b2db      	uxtb	r3, r3
 80140d2:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80140d4:	7efb      	ldrb	r3, [r7, #27]
 80140d6:	2b00      	cmp	r3, #0
 80140d8:	d041      	beq.n	801415e <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80140da:	2108      	movs	r1, #8
 80140dc:	6878      	ldr	r0, [r7, #4]
 80140de:	f7f9 f855 	bl	800d18c <pbuf_remove_header>
 80140e2:	4603      	mov	r3, r0
 80140e4:	2b00      	cmp	r3, #0
 80140e6:	d00a      	beq.n	80140fe <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80140e8:	4b20      	ldr	r3, [pc, #128]	; (801416c <udp_input+0x208>)
 80140ea:	f44f 72b8 	mov.w	r2, #368	; 0x170
 80140ee:	4925      	ldr	r1, [pc, #148]	; (8014184 <udp_input+0x220>)
 80140f0:	4820      	ldr	r0, [pc, #128]	; (8014174 <udp_input+0x210>)
 80140f2:	f002 fba5 	bl	8016840 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80140f6:	6878      	ldr	r0, [r7, #4]
 80140f8:	f7f9 f8ce 	bl	800d298 <pbuf_free>
      goto end;
 80140fc:	e032      	b.n	8014164 <udp_input+0x200>
    }

    if (pcb != NULL) {
 80140fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014100:	2b00      	cmp	r3, #0
 8014102:	d012      	beq.n	801412a <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8014104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014106:	699b      	ldr	r3, [r3, #24]
 8014108:	2b00      	cmp	r3, #0
 801410a:	d00a      	beq.n	8014122 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801410c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801410e:	699c      	ldr	r4, [r3, #24]
 8014110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014112:	69d8      	ldr	r0, [r3, #28]
 8014114:	8a3b      	ldrh	r3, [r7, #16]
 8014116:	9300      	str	r3, [sp, #0]
 8014118:	4b1b      	ldr	r3, [pc, #108]	; (8014188 <udp_input+0x224>)
 801411a:	687a      	ldr	r2, [r7, #4]
 801411c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801411e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8014120:	e021      	b.n	8014166 <udp_input+0x202>
        pbuf_free(p);
 8014122:	6878      	ldr	r0, [r7, #4]
 8014124:	f7f9 f8b8 	bl	800d298 <pbuf_free>
        goto end;
 8014128:	e01c      	b.n	8014164 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801412a:	7cfb      	ldrb	r3, [r7, #19]
 801412c:	2b00      	cmp	r3, #0
 801412e:	d112      	bne.n	8014156 <udp_input+0x1f2>
 8014130:	4b12      	ldr	r3, [pc, #72]	; (801417c <udp_input+0x218>)
 8014132:	695b      	ldr	r3, [r3, #20]
 8014134:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014138:	2be0      	cmp	r3, #224	; 0xe0
 801413a:	d00c      	beq.n	8014156 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801413c:	4b0f      	ldr	r3, [pc, #60]	; (801417c <udp_input+0x218>)
 801413e:	899b      	ldrh	r3, [r3, #12]
 8014140:	3308      	adds	r3, #8
 8014142:	b29b      	uxth	r3, r3
 8014144:	b21b      	sxth	r3, r3
 8014146:	4619      	mov	r1, r3
 8014148:	6878      	ldr	r0, [r7, #4]
 801414a:	f7f9 f892 	bl	800d272 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801414e:	2103      	movs	r1, #3
 8014150:	6878      	ldr	r0, [r7, #4]
 8014152:	f001 f89b 	bl	801528c <icmp_dest_unreach>
      pbuf_free(p);
 8014156:	6878      	ldr	r0, [r7, #4]
 8014158:	f7f9 f89e 	bl	800d298 <pbuf_free>
  return;
 801415c:	e003      	b.n	8014166 <udp_input+0x202>
    pbuf_free(p);
 801415e:	6878      	ldr	r0, [r7, #4]
 8014160:	f7f9 f89a 	bl	800d298 <pbuf_free>
  return;
 8014164:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8014166:	372c      	adds	r7, #44	; 0x2c
 8014168:	46bd      	mov	sp, r7
 801416a:	bd90      	pop	{r4, r7, pc}
 801416c:	0801a698 	.word	0x0801a698
 8014170:	0801a73c 	.word	0x0801a73c
 8014174:	0801a6ec 	.word	0x0801a6ec
 8014178:	0801a754 	.word	0x0801a754
 801417c:	20005638 	.word	0x20005638
 8014180:	20008c04 	.word	0x20008c04
 8014184:	0801a770 	.word	0x0801a770
 8014188:	20005648 	.word	0x20005648

0801418c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801418c:	b480      	push	{r7}
 801418e:	b085      	sub	sp, #20
 8014190:	af00      	add	r7, sp, #0
 8014192:	6078      	str	r0, [r7, #4]
 8014194:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8014196:	687b      	ldr	r3, [r7, #4]
 8014198:	2b00      	cmp	r3, #0
 801419a:	d01e      	beq.n	80141da <udp_netif_ip_addr_changed+0x4e>
 801419c:	687b      	ldr	r3, [r7, #4]
 801419e:	681b      	ldr	r3, [r3, #0]
 80141a0:	2b00      	cmp	r3, #0
 80141a2:	d01a      	beq.n	80141da <udp_netif_ip_addr_changed+0x4e>
 80141a4:	683b      	ldr	r3, [r7, #0]
 80141a6:	2b00      	cmp	r3, #0
 80141a8:	d017      	beq.n	80141da <udp_netif_ip_addr_changed+0x4e>
 80141aa:	683b      	ldr	r3, [r7, #0]
 80141ac:	681b      	ldr	r3, [r3, #0]
 80141ae:	2b00      	cmp	r3, #0
 80141b0:	d013      	beq.n	80141da <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80141b2:	4b0d      	ldr	r3, [pc, #52]	; (80141e8 <udp_netif_ip_addr_changed+0x5c>)
 80141b4:	681b      	ldr	r3, [r3, #0]
 80141b6:	60fb      	str	r3, [r7, #12]
 80141b8:	e00c      	b.n	80141d4 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80141ba:	68fb      	ldr	r3, [r7, #12]
 80141bc:	681a      	ldr	r2, [r3, #0]
 80141be:	687b      	ldr	r3, [r7, #4]
 80141c0:	681b      	ldr	r3, [r3, #0]
 80141c2:	429a      	cmp	r2, r3
 80141c4:	d103      	bne.n	80141ce <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80141c6:	683b      	ldr	r3, [r7, #0]
 80141c8:	681a      	ldr	r2, [r3, #0]
 80141ca:	68fb      	ldr	r3, [r7, #12]
 80141cc:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80141ce:	68fb      	ldr	r3, [r7, #12]
 80141d0:	68db      	ldr	r3, [r3, #12]
 80141d2:	60fb      	str	r3, [r7, #12]
 80141d4:	68fb      	ldr	r3, [r7, #12]
 80141d6:	2b00      	cmp	r3, #0
 80141d8:	d1ef      	bne.n	80141ba <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80141da:	bf00      	nop
 80141dc:	3714      	adds	r7, #20
 80141de:	46bd      	mov	sp, r7
 80141e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141e4:	4770      	bx	lr
 80141e6:	bf00      	nop
 80141e8:	20008c04 	.word	0x20008c04

080141ec <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80141ec:	b580      	push	{r7, lr}
 80141ee:	b082      	sub	sp, #8
 80141f0:	af00      	add	r7, sp, #0
 80141f2:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80141f4:	4915      	ldr	r1, [pc, #84]	; (801424c <etharp_free_entry+0x60>)
 80141f6:	687a      	ldr	r2, [r7, #4]
 80141f8:	4613      	mov	r3, r2
 80141fa:	005b      	lsls	r3, r3, #1
 80141fc:	4413      	add	r3, r2
 80141fe:	00db      	lsls	r3, r3, #3
 8014200:	440b      	add	r3, r1
 8014202:	681b      	ldr	r3, [r3, #0]
 8014204:	2b00      	cmp	r3, #0
 8014206:	d013      	beq.n	8014230 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8014208:	4910      	ldr	r1, [pc, #64]	; (801424c <etharp_free_entry+0x60>)
 801420a:	687a      	ldr	r2, [r7, #4]
 801420c:	4613      	mov	r3, r2
 801420e:	005b      	lsls	r3, r3, #1
 8014210:	4413      	add	r3, r2
 8014212:	00db      	lsls	r3, r3, #3
 8014214:	440b      	add	r3, r1
 8014216:	681b      	ldr	r3, [r3, #0]
 8014218:	4618      	mov	r0, r3
 801421a:	f7f9 f83d 	bl	800d298 <pbuf_free>
    arp_table[i].q = NULL;
 801421e:	490b      	ldr	r1, [pc, #44]	; (801424c <etharp_free_entry+0x60>)
 8014220:	687a      	ldr	r2, [r7, #4]
 8014222:	4613      	mov	r3, r2
 8014224:	005b      	lsls	r3, r3, #1
 8014226:	4413      	add	r3, r2
 8014228:	00db      	lsls	r3, r3, #3
 801422a:	440b      	add	r3, r1
 801422c:	2200      	movs	r2, #0
 801422e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8014230:	4906      	ldr	r1, [pc, #24]	; (801424c <etharp_free_entry+0x60>)
 8014232:	687a      	ldr	r2, [r7, #4]
 8014234:	4613      	mov	r3, r2
 8014236:	005b      	lsls	r3, r3, #1
 8014238:	4413      	add	r3, r2
 801423a:	00db      	lsls	r3, r3, #3
 801423c:	440b      	add	r3, r1
 801423e:	3314      	adds	r3, #20
 8014240:	2200      	movs	r2, #0
 8014242:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8014244:	bf00      	nop
 8014246:	3708      	adds	r7, #8
 8014248:	46bd      	mov	sp, r7
 801424a:	bd80      	pop	{r7, pc}
 801424c:	20008c08 	.word	0x20008c08

08014250 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8014250:	b580      	push	{r7, lr}
 8014252:	b082      	sub	sp, #8
 8014254:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014256:	2300      	movs	r3, #0
 8014258:	607b      	str	r3, [r7, #4]
 801425a:	e096      	b.n	801438a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801425c:	494f      	ldr	r1, [pc, #316]	; (801439c <etharp_tmr+0x14c>)
 801425e:	687a      	ldr	r2, [r7, #4]
 8014260:	4613      	mov	r3, r2
 8014262:	005b      	lsls	r3, r3, #1
 8014264:	4413      	add	r3, r2
 8014266:	00db      	lsls	r3, r3, #3
 8014268:	440b      	add	r3, r1
 801426a:	3314      	adds	r3, #20
 801426c:	781b      	ldrb	r3, [r3, #0]
 801426e:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8014270:	78fb      	ldrb	r3, [r7, #3]
 8014272:	2b00      	cmp	r3, #0
 8014274:	f000 8086 	beq.w	8014384 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8014278:	4948      	ldr	r1, [pc, #288]	; (801439c <etharp_tmr+0x14c>)
 801427a:	687a      	ldr	r2, [r7, #4]
 801427c:	4613      	mov	r3, r2
 801427e:	005b      	lsls	r3, r3, #1
 8014280:	4413      	add	r3, r2
 8014282:	00db      	lsls	r3, r3, #3
 8014284:	440b      	add	r3, r1
 8014286:	3312      	adds	r3, #18
 8014288:	881b      	ldrh	r3, [r3, #0]
 801428a:	3301      	adds	r3, #1
 801428c:	b298      	uxth	r0, r3
 801428e:	4943      	ldr	r1, [pc, #268]	; (801439c <etharp_tmr+0x14c>)
 8014290:	687a      	ldr	r2, [r7, #4]
 8014292:	4613      	mov	r3, r2
 8014294:	005b      	lsls	r3, r3, #1
 8014296:	4413      	add	r3, r2
 8014298:	00db      	lsls	r3, r3, #3
 801429a:	440b      	add	r3, r1
 801429c:	3312      	adds	r3, #18
 801429e:	4602      	mov	r2, r0
 80142a0:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80142a2:	493e      	ldr	r1, [pc, #248]	; (801439c <etharp_tmr+0x14c>)
 80142a4:	687a      	ldr	r2, [r7, #4]
 80142a6:	4613      	mov	r3, r2
 80142a8:	005b      	lsls	r3, r3, #1
 80142aa:	4413      	add	r3, r2
 80142ac:	00db      	lsls	r3, r3, #3
 80142ae:	440b      	add	r3, r1
 80142b0:	3312      	adds	r3, #18
 80142b2:	881b      	ldrh	r3, [r3, #0]
 80142b4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80142b8:	d215      	bcs.n	80142e6 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80142ba:	4938      	ldr	r1, [pc, #224]	; (801439c <etharp_tmr+0x14c>)
 80142bc:	687a      	ldr	r2, [r7, #4]
 80142be:	4613      	mov	r3, r2
 80142c0:	005b      	lsls	r3, r3, #1
 80142c2:	4413      	add	r3, r2
 80142c4:	00db      	lsls	r3, r3, #3
 80142c6:	440b      	add	r3, r1
 80142c8:	3314      	adds	r3, #20
 80142ca:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80142cc:	2b01      	cmp	r3, #1
 80142ce:	d10e      	bne.n	80142ee <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80142d0:	4932      	ldr	r1, [pc, #200]	; (801439c <etharp_tmr+0x14c>)
 80142d2:	687a      	ldr	r2, [r7, #4]
 80142d4:	4613      	mov	r3, r2
 80142d6:	005b      	lsls	r3, r3, #1
 80142d8:	4413      	add	r3, r2
 80142da:	00db      	lsls	r3, r3, #3
 80142dc:	440b      	add	r3, r1
 80142de:	3312      	adds	r3, #18
 80142e0:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80142e2:	2b04      	cmp	r3, #4
 80142e4:	d903      	bls.n	80142ee <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80142e6:	6878      	ldr	r0, [r7, #4]
 80142e8:	f7ff ff80 	bl	80141ec <etharp_free_entry>
 80142ec:	e04a      	b.n	8014384 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80142ee:	492b      	ldr	r1, [pc, #172]	; (801439c <etharp_tmr+0x14c>)
 80142f0:	687a      	ldr	r2, [r7, #4]
 80142f2:	4613      	mov	r3, r2
 80142f4:	005b      	lsls	r3, r3, #1
 80142f6:	4413      	add	r3, r2
 80142f8:	00db      	lsls	r3, r3, #3
 80142fa:	440b      	add	r3, r1
 80142fc:	3314      	adds	r3, #20
 80142fe:	781b      	ldrb	r3, [r3, #0]
 8014300:	2b03      	cmp	r3, #3
 8014302:	d10a      	bne.n	801431a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8014304:	4925      	ldr	r1, [pc, #148]	; (801439c <etharp_tmr+0x14c>)
 8014306:	687a      	ldr	r2, [r7, #4]
 8014308:	4613      	mov	r3, r2
 801430a:	005b      	lsls	r3, r3, #1
 801430c:	4413      	add	r3, r2
 801430e:	00db      	lsls	r3, r3, #3
 8014310:	440b      	add	r3, r1
 8014312:	3314      	adds	r3, #20
 8014314:	2204      	movs	r2, #4
 8014316:	701a      	strb	r2, [r3, #0]
 8014318:	e034      	b.n	8014384 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801431a:	4920      	ldr	r1, [pc, #128]	; (801439c <etharp_tmr+0x14c>)
 801431c:	687a      	ldr	r2, [r7, #4]
 801431e:	4613      	mov	r3, r2
 8014320:	005b      	lsls	r3, r3, #1
 8014322:	4413      	add	r3, r2
 8014324:	00db      	lsls	r3, r3, #3
 8014326:	440b      	add	r3, r1
 8014328:	3314      	adds	r3, #20
 801432a:	781b      	ldrb	r3, [r3, #0]
 801432c:	2b04      	cmp	r3, #4
 801432e:	d10a      	bne.n	8014346 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8014330:	491a      	ldr	r1, [pc, #104]	; (801439c <etharp_tmr+0x14c>)
 8014332:	687a      	ldr	r2, [r7, #4]
 8014334:	4613      	mov	r3, r2
 8014336:	005b      	lsls	r3, r3, #1
 8014338:	4413      	add	r3, r2
 801433a:	00db      	lsls	r3, r3, #3
 801433c:	440b      	add	r3, r1
 801433e:	3314      	adds	r3, #20
 8014340:	2202      	movs	r2, #2
 8014342:	701a      	strb	r2, [r3, #0]
 8014344:	e01e      	b.n	8014384 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8014346:	4915      	ldr	r1, [pc, #84]	; (801439c <etharp_tmr+0x14c>)
 8014348:	687a      	ldr	r2, [r7, #4]
 801434a:	4613      	mov	r3, r2
 801434c:	005b      	lsls	r3, r3, #1
 801434e:	4413      	add	r3, r2
 8014350:	00db      	lsls	r3, r3, #3
 8014352:	440b      	add	r3, r1
 8014354:	3314      	adds	r3, #20
 8014356:	781b      	ldrb	r3, [r3, #0]
 8014358:	2b01      	cmp	r3, #1
 801435a:	d113      	bne.n	8014384 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801435c:	490f      	ldr	r1, [pc, #60]	; (801439c <etharp_tmr+0x14c>)
 801435e:	687a      	ldr	r2, [r7, #4]
 8014360:	4613      	mov	r3, r2
 8014362:	005b      	lsls	r3, r3, #1
 8014364:	4413      	add	r3, r2
 8014366:	00db      	lsls	r3, r3, #3
 8014368:	440b      	add	r3, r1
 801436a:	3308      	adds	r3, #8
 801436c:	6818      	ldr	r0, [r3, #0]
 801436e:	687a      	ldr	r2, [r7, #4]
 8014370:	4613      	mov	r3, r2
 8014372:	005b      	lsls	r3, r3, #1
 8014374:	4413      	add	r3, r2
 8014376:	00db      	lsls	r3, r3, #3
 8014378:	4a08      	ldr	r2, [pc, #32]	; (801439c <etharp_tmr+0x14c>)
 801437a:	4413      	add	r3, r2
 801437c:	3304      	adds	r3, #4
 801437e:	4619      	mov	r1, r3
 8014380:	f000 fe6e 	bl	8015060 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014384:	687b      	ldr	r3, [r7, #4]
 8014386:	3301      	adds	r3, #1
 8014388:	607b      	str	r3, [r7, #4]
 801438a:	687b      	ldr	r3, [r7, #4]
 801438c:	2b09      	cmp	r3, #9
 801438e:	f77f af65 	ble.w	801425c <etharp_tmr+0xc>
      }
    }
  }
}
 8014392:	bf00      	nop
 8014394:	bf00      	nop
 8014396:	3708      	adds	r7, #8
 8014398:	46bd      	mov	sp, r7
 801439a:	bd80      	pop	{r7, pc}
 801439c:	20008c08 	.word	0x20008c08

080143a0 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80143a0:	b580      	push	{r7, lr}
 80143a2:	b08a      	sub	sp, #40	; 0x28
 80143a4:	af00      	add	r7, sp, #0
 80143a6:	60f8      	str	r0, [r7, #12]
 80143a8:	460b      	mov	r3, r1
 80143aa:	607a      	str	r2, [r7, #4]
 80143ac:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80143ae:	230a      	movs	r3, #10
 80143b0:	84fb      	strh	r3, [r7, #38]	; 0x26
 80143b2:	230a      	movs	r3, #10
 80143b4:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80143b6:	230a      	movs	r3, #10
 80143b8:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 80143ba:	2300      	movs	r3, #0
 80143bc:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80143be:	230a      	movs	r3, #10
 80143c0:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80143c2:	2300      	movs	r3, #0
 80143c4:	83bb      	strh	r3, [r7, #28]
 80143c6:	2300      	movs	r3, #0
 80143c8:	837b      	strh	r3, [r7, #26]
 80143ca:	2300      	movs	r3, #0
 80143cc:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80143ce:	2300      	movs	r3, #0
 80143d0:	843b      	strh	r3, [r7, #32]
 80143d2:	e0ae      	b.n	8014532 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80143d4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80143d8:	49a6      	ldr	r1, [pc, #664]	; (8014674 <etharp_find_entry+0x2d4>)
 80143da:	4613      	mov	r3, r2
 80143dc:	005b      	lsls	r3, r3, #1
 80143de:	4413      	add	r3, r2
 80143e0:	00db      	lsls	r3, r3, #3
 80143e2:	440b      	add	r3, r1
 80143e4:	3314      	adds	r3, #20
 80143e6:	781b      	ldrb	r3, [r3, #0]
 80143e8:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80143ea:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80143ee:	2b0a      	cmp	r3, #10
 80143f0:	d105      	bne.n	80143fe <etharp_find_entry+0x5e>
 80143f2:	7dfb      	ldrb	r3, [r7, #23]
 80143f4:	2b00      	cmp	r3, #0
 80143f6:	d102      	bne.n	80143fe <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80143f8:	8c3b      	ldrh	r3, [r7, #32]
 80143fa:	847b      	strh	r3, [r7, #34]	; 0x22
 80143fc:	e095      	b.n	801452a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80143fe:	7dfb      	ldrb	r3, [r7, #23]
 8014400:	2b00      	cmp	r3, #0
 8014402:	f000 8092 	beq.w	801452a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8014406:	7dfb      	ldrb	r3, [r7, #23]
 8014408:	2b01      	cmp	r3, #1
 801440a:	d009      	beq.n	8014420 <etharp_find_entry+0x80>
 801440c:	7dfb      	ldrb	r3, [r7, #23]
 801440e:	2b01      	cmp	r3, #1
 8014410:	d806      	bhi.n	8014420 <etharp_find_entry+0x80>
 8014412:	4b99      	ldr	r3, [pc, #612]	; (8014678 <etharp_find_entry+0x2d8>)
 8014414:	f240 1223 	movw	r2, #291	; 0x123
 8014418:	4998      	ldr	r1, [pc, #608]	; (801467c <etharp_find_entry+0x2dc>)
 801441a:	4899      	ldr	r0, [pc, #612]	; (8014680 <etharp_find_entry+0x2e0>)
 801441c:	f002 fa10 	bl	8016840 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8014420:	68fb      	ldr	r3, [r7, #12]
 8014422:	2b00      	cmp	r3, #0
 8014424:	d020      	beq.n	8014468 <etharp_find_entry+0xc8>
 8014426:	68fb      	ldr	r3, [r7, #12]
 8014428:	6819      	ldr	r1, [r3, #0]
 801442a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801442e:	4891      	ldr	r0, [pc, #580]	; (8014674 <etharp_find_entry+0x2d4>)
 8014430:	4613      	mov	r3, r2
 8014432:	005b      	lsls	r3, r3, #1
 8014434:	4413      	add	r3, r2
 8014436:	00db      	lsls	r3, r3, #3
 8014438:	4403      	add	r3, r0
 801443a:	3304      	adds	r3, #4
 801443c:	681b      	ldr	r3, [r3, #0]
 801443e:	4299      	cmp	r1, r3
 8014440:	d112      	bne.n	8014468 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8014442:	687b      	ldr	r3, [r7, #4]
 8014444:	2b00      	cmp	r3, #0
 8014446:	d00c      	beq.n	8014462 <etharp_find_entry+0xc2>
 8014448:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801444c:	4989      	ldr	r1, [pc, #548]	; (8014674 <etharp_find_entry+0x2d4>)
 801444e:	4613      	mov	r3, r2
 8014450:	005b      	lsls	r3, r3, #1
 8014452:	4413      	add	r3, r2
 8014454:	00db      	lsls	r3, r3, #3
 8014456:	440b      	add	r3, r1
 8014458:	3308      	adds	r3, #8
 801445a:	681b      	ldr	r3, [r3, #0]
 801445c:	687a      	ldr	r2, [r7, #4]
 801445e:	429a      	cmp	r2, r3
 8014460:	d102      	bne.n	8014468 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8014462:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014466:	e100      	b.n	801466a <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8014468:	7dfb      	ldrb	r3, [r7, #23]
 801446a:	2b01      	cmp	r3, #1
 801446c:	d140      	bne.n	80144f0 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801446e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014472:	4980      	ldr	r1, [pc, #512]	; (8014674 <etharp_find_entry+0x2d4>)
 8014474:	4613      	mov	r3, r2
 8014476:	005b      	lsls	r3, r3, #1
 8014478:	4413      	add	r3, r2
 801447a:	00db      	lsls	r3, r3, #3
 801447c:	440b      	add	r3, r1
 801447e:	681b      	ldr	r3, [r3, #0]
 8014480:	2b00      	cmp	r3, #0
 8014482:	d01a      	beq.n	80144ba <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8014484:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014488:	497a      	ldr	r1, [pc, #488]	; (8014674 <etharp_find_entry+0x2d4>)
 801448a:	4613      	mov	r3, r2
 801448c:	005b      	lsls	r3, r3, #1
 801448e:	4413      	add	r3, r2
 8014490:	00db      	lsls	r3, r3, #3
 8014492:	440b      	add	r3, r1
 8014494:	3312      	adds	r3, #18
 8014496:	881b      	ldrh	r3, [r3, #0]
 8014498:	8bba      	ldrh	r2, [r7, #28]
 801449a:	429a      	cmp	r2, r3
 801449c:	d845      	bhi.n	801452a <etharp_find_entry+0x18a>
            old_queue = i;
 801449e:	8c3b      	ldrh	r3, [r7, #32]
 80144a0:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80144a2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80144a6:	4973      	ldr	r1, [pc, #460]	; (8014674 <etharp_find_entry+0x2d4>)
 80144a8:	4613      	mov	r3, r2
 80144aa:	005b      	lsls	r3, r3, #1
 80144ac:	4413      	add	r3, r2
 80144ae:	00db      	lsls	r3, r3, #3
 80144b0:	440b      	add	r3, r1
 80144b2:	3312      	adds	r3, #18
 80144b4:	881b      	ldrh	r3, [r3, #0]
 80144b6:	83bb      	strh	r3, [r7, #28]
 80144b8:	e037      	b.n	801452a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80144ba:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80144be:	496d      	ldr	r1, [pc, #436]	; (8014674 <etharp_find_entry+0x2d4>)
 80144c0:	4613      	mov	r3, r2
 80144c2:	005b      	lsls	r3, r3, #1
 80144c4:	4413      	add	r3, r2
 80144c6:	00db      	lsls	r3, r3, #3
 80144c8:	440b      	add	r3, r1
 80144ca:	3312      	adds	r3, #18
 80144cc:	881b      	ldrh	r3, [r3, #0]
 80144ce:	8b7a      	ldrh	r2, [r7, #26]
 80144d0:	429a      	cmp	r2, r3
 80144d2:	d82a      	bhi.n	801452a <etharp_find_entry+0x18a>
            old_pending = i;
 80144d4:	8c3b      	ldrh	r3, [r7, #32]
 80144d6:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 80144d8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80144dc:	4965      	ldr	r1, [pc, #404]	; (8014674 <etharp_find_entry+0x2d4>)
 80144de:	4613      	mov	r3, r2
 80144e0:	005b      	lsls	r3, r3, #1
 80144e2:	4413      	add	r3, r2
 80144e4:	00db      	lsls	r3, r3, #3
 80144e6:	440b      	add	r3, r1
 80144e8:	3312      	adds	r3, #18
 80144ea:	881b      	ldrh	r3, [r3, #0]
 80144ec:	837b      	strh	r3, [r7, #26]
 80144ee:	e01c      	b.n	801452a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80144f0:	7dfb      	ldrb	r3, [r7, #23]
 80144f2:	2b01      	cmp	r3, #1
 80144f4:	d919      	bls.n	801452a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80144f6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80144fa:	495e      	ldr	r1, [pc, #376]	; (8014674 <etharp_find_entry+0x2d4>)
 80144fc:	4613      	mov	r3, r2
 80144fe:	005b      	lsls	r3, r3, #1
 8014500:	4413      	add	r3, r2
 8014502:	00db      	lsls	r3, r3, #3
 8014504:	440b      	add	r3, r1
 8014506:	3312      	adds	r3, #18
 8014508:	881b      	ldrh	r3, [r3, #0]
 801450a:	8b3a      	ldrh	r2, [r7, #24]
 801450c:	429a      	cmp	r2, r3
 801450e:	d80c      	bhi.n	801452a <etharp_find_entry+0x18a>
            old_stable = i;
 8014510:	8c3b      	ldrh	r3, [r7, #32]
 8014512:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8014514:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014518:	4956      	ldr	r1, [pc, #344]	; (8014674 <etharp_find_entry+0x2d4>)
 801451a:	4613      	mov	r3, r2
 801451c:	005b      	lsls	r3, r3, #1
 801451e:	4413      	add	r3, r2
 8014520:	00db      	lsls	r3, r3, #3
 8014522:	440b      	add	r3, r1
 8014524:	3312      	adds	r3, #18
 8014526:	881b      	ldrh	r3, [r3, #0]
 8014528:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801452a:	8c3b      	ldrh	r3, [r7, #32]
 801452c:	3301      	adds	r3, #1
 801452e:	b29b      	uxth	r3, r3
 8014530:	843b      	strh	r3, [r7, #32]
 8014532:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014536:	2b09      	cmp	r3, #9
 8014538:	f77f af4c 	ble.w	80143d4 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801453c:	7afb      	ldrb	r3, [r7, #11]
 801453e:	f003 0302 	and.w	r3, r3, #2
 8014542:	2b00      	cmp	r3, #0
 8014544:	d108      	bne.n	8014558 <etharp_find_entry+0x1b8>
 8014546:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801454a:	2b0a      	cmp	r3, #10
 801454c:	d107      	bne.n	801455e <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801454e:	7afb      	ldrb	r3, [r7, #11]
 8014550:	f003 0301 	and.w	r3, r3, #1
 8014554:	2b00      	cmp	r3, #0
 8014556:	d102      	bne.n	801455e <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8014558:	f04f 33ff 	mov.w	r3, #4294967295
 801455c:	e085      	b.n	801466a <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801455e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8014562:	2b09      	cmp	r3, #9
 8014564:	dc02      	bgt.n	801456c <etharp_find_entry+0x1cc>
    i = empty;
 8014566:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014568:	843b      	strh	r3, [r7, #32]
 801456a:	e039      	b.n	80145e0 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801456c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8014570:	2b09      	cmp	r3, #9
 8014572:	dc14      	bgt.n	801459e <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8014574:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014576:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8014578:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801457c:	493d      	ldr	r1, [pc, #244]	; (8014674 <etharp_find_entry+0x2d4>)
 801457e:	4613      	mov	r3, r2
 8014580:	005b      	lsls	r3, r3, #1
 8014582:	4413      	add	r3, r2
 8014584:	00db      	lsls	r3, r3, #3
 8014586:	440b      	add	r3, r1
 8014588:	681b      	ldr	r3, [r3, #0]
 801458a:	2b00      	cmp	r3, #0
 801458c:	d018      	beq.n	80145c0 <etharp_find_entry+0x220>
 801458e:	4b3a      	ldr	r3, [pc, #232]	; (8014678 <etharp_find_entry+0x2d8>)
 8014590:	f240 126d 	movw	r2, #365	; 0x16d
 8014594:	493b      	ldr	r1, [pc, #236]	; (8014684 <etharp_find_entry+0x2e4>)
 8014596:	483a      	ldr	r0, [pc, #232]	; (8014680 <etharp_find_entry+0x2e0>)
 8014598:	f002 f952 	bl	8016840 <iprintf>
 801459c:	e010      	b.n	80145c0 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801459e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80145a2:	2b09      	cmp	r3, #9
 80145a4:	dc02      	bgt.n	80145ac <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80145a6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80145a8:	843b      	strh	r3, [r7, #32]
 80145aa:	e009      	b.n	80145c0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80145ac:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80145b0:	2b09      	cmp	r3, #9
 80145b2:	dc02      	bgt.n	80145ba <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80145b4:	8bfb      	ldrh	r3, [r7, #30]
 80145b6:	843b      	strh	r3, [r7, #32]
 80145b8:	e002      	b.n	80145c0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80145ba:	f04f 33ff 	mov.w	r3, #4294967295
 80145be:	e054      	b.n	801466a <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80145c0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80145c4:	2b09      	cmp	r3, #9
 80145c6:	dd06      	ble.n	80145d6 <etharp_find_entry+0x236>
 80145c8:	4b2b      	ldr	r3, [pc, #172]	; (8014678 <etharp_find_entry+0x2d8>)
 80145ca:	f240 127f 	movw	r2, #383	; 0x17f
 80145ce:	492e      	ldr	r1, [pc, #184]	; (8014688 <etharp_find_entry+0x2e8>)
 80145d0:	482b      	ldr	r0, [pc, #172]	; (8014680 <etharp_find_entry+0x2e0>)
 80145d2:	f002 f935 	bl	8016840 <iprintf>
    etharp_free_entry(i);
 80145d6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80145da:	4618      	mov	r0, r3
 80145dc:	f7ff fe06 	bl	80141ec <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80145e0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80145e4:	2b09      	cmp	r3, #9
 80145e6:	dd06      	ble.n	80145f6 <etharp_find_entry+0x256>
 80145e8:	4b23      	ldr	r3, [pc, #140]	; (8014678 <etharp_find_entry+0x2d8>)
 80145ea:	f240 1283 	movw	r2, #387	; 0x183
 80145ee:	4926      	ldr	r1, [pc, #152]	; (8014688 <etharp_find_entry+0x2e8>)
 80145f0:	4823      	ldr	r0, [pc, #140]	; (8014680 <etharp_find_entry+0x2e0>)
 80145f2:	f002 f925 	bl	8016840 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80145f6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80145fa:	491e      	ldr	r1, [pc, #120]	; (8014674 <etharp_find_entry+0x2d4>)
 80145fc:	4613      	mov	r3, r2
 80145fe:	005b      	lsls	r3, r3, #1
 8014600:	4413      	add	r3, r2
 8014602:	00db      	lsls	r3, r3, #3
 8014604:	440b      	add	r3, r1
 8014606:	3314      	adds	r3, #20
 8014608:	781b      	ldrb	r3, [r3, #0]
 801460a:	2b00      	cmp	r3, #0
 801460c:	d006      	beq.n	801461c <etharp_find_entry+0x27c>
 801460e:	4b1a      	ldr	r3, [pc, #104]	; (8014678 <etharp_find_entry+0x2d8>)
 8014610:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8014614:	491d      	ldr	r1, [pc, #116]	; (801468c <etharp_find_entry+0x2ec>)
 8014616:	481a      	ldr	r0, [pc, #104]	; (8014680 <etharp_find_entry+0x2e0>)
 8014618:	f002 f912 	bl	8016840 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801461c:	68fb      	ldr	r3, [r7, #12]
 801461e:	2b00      	cmp	r3, #0
 8014620:	d00b      	beq.n	801463a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8014622:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014626:	68fb      	ldr	r3, [r7, #12]
 8014628:	6819      	ldr	r1, [r3, #0]
 801462a:	4812      	ldr	r0, [pc, #72]	; (8014674 <etharp_find_entry+0x2d4>)
 801462c:	4613      	mov	r3, r2
 801462e:	005b      	lsls	r3, r3, #1
 8014630:	4413      	add	r3, r2
 8014632:	00db      	lsls	r3, r3, #3
 8014634:	4403      	add	r3, r0
 8014636:	3304      	adds	r3, #4
 8014638:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801463a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801463e:	490d      	ldr	r1, [pc, #52]	; (8014674 <etharp_find_entry+0x2d4>)
 8014640:	4613      	mov	r3, r2
 8014642:	005b      	lsls	r3, r3, #1
 8014644:	4413      	add	r3, r2
 8014646:	00db      	lsls	r3, r3, #3
 8014648:	440b      	add	r3, r1
 801464a:	3312      	adds	r3, #18
 801464c:	2200      	movs	r2, #0
 801464e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8014650:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014654:	4907      	ldr	r1, [pc, #28]	; (8014674 <etharp_find_entry+0x2d4>)
 8014656:	4613      	mov	r3, r2
 8014658:	005b      	lsls	r3, r3, #1
 801465a:	4413      	add	r3, r2
 801465c:	00db      	lsls	r3, r3, #3
 801465e:	440b      	add	r3, r1
 8014660:	3308      	adds	r3, #8
 8014662:	687a      	ldr	r2, [r7, #4]
 8014664:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8014666:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801466a:	4618      	mov	r0, r3
 801466c:	3728      	adds	r7, #40	; 0x28
 801466e:	46bd      	mov	sp, r7
 8014670:	bd80      	pop	{r7, pc}
 8014672:	bf00      	nop
 8014674:	20008c08 	.word	0x20008c08
 8014678:	0801a9fc 	.word	0x0801a9fc
 801467c:	0801aa34 	.word	0x0801aa34
 8014680:	0801aa74 	.word	0x0801aa74
 8014684:	0801aa9c 	.word	0x0801aa9c
 8014688:	0801aab4 	.word	0x0801aab4
 801468c:	0801aac8 	.word	0x0801aac8

08014690 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8014690:	b580      	push	{r7, lr}
 8014692:	b088      	sub	sp, #32
 8014694:	af02      	add	r7, sp, #8
 8014696:	60f8      	str	r0, [r7, #12]
 8014698:	60b9      	str	r1, [r7, #8]
 801469a:	607a      	str	r2, [r7, #4]
 801469c:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801469e:	68fb      	ldr	r3, [r7, #12]
 80146a0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80146a4:	2b06      	cmp	r3, #6
 80146a6:	d006      	beq.n	80146b6 <etharp_update_arp_entry+0x26>
 80146a8:	4b48      	ldr	r3, [pc, #288]	; (80147cc <etharp_update_arp_entry+0x13c>)
 80146aa:	f240 12a9 	movw	r2, #425	; 0x1a9
 80146ae:	4948      	ldr	r1, [pc, #288]	; (80147d0 <etharp_update_arp_entry+0x140>)
 80146b0:	4848      	ldr	r0, [pc, #288]	; (80147d4 <etharp_update_arp_entry+0x144>)
 80146b2:	f002 f8c5 	bl	8016840 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80146b6:	68bb      	ldr	r3, [r7, #8]
 80146b8:	2b00      	cmp	r3, #0
 80146ba:	d012      	beq.n	80146e2 <etharp_update_arp_entry+0x52>
 80146bc:	68bb      	ldr	r3, [r7, #8]
 80146be:	681b      	ldr	r3, [r3, #0]
 80146c0:	2b00      	cmp	r3, #0
 80146c2:	d00e      	beq.n	80146e2 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80146c4:	68bb      	ldr	r3, [r7, #8]
 80146c6:	681b      	ldr	r3, [r3, #0]
 80146c8:	68f9      	ldr	r1, [r7, #12]
 80146ca:	4618      	mov	r0, r3
 80146cc:	f001 f8fe 	bl	80158cc <ip4_addr_isbroadcast_u32>
 80146d0:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80146d2:	2b00      	cmp	r3, #0
 80146d4:	d105      	bne.n	80146e2 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80146d6:	68bb      	ldr	r3, [r7, #8]
 80146d8:	681b      	ldr	r3, [r3, #0]
 80146da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80146de:	2be0      	cmp	r3, #224	; 0xe0
 80146e0:	d102      	bne.n	80146e8 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80146e2:	f06f 030f 	mvn.w	r3, #15
 80146e6:	e06c      	b.n	80147c2 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80146e8:	78fb      	ldrb	r3, [r7, #3]
 80146ea:	68fa      	ldr	r2, [r7, #12]
 80146ec:	4619      	mov	r1, r3
 80146ee:	68b8      	ldr	r0, [r7, #8]
 80146f0:	f7ff fe56 	bl	80143a0 <etharp_find_entry>
 80146f4:	4603      	mov	r3, r0
 80146f6:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 80146f8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80146fc:	2b00      	cmp	r3, #0
 80146fe:	da02      	bge.n	8014706 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8014700:	8afb      	ldrh	r3, [r7, #22]
 8014702:	b25b      	sxtb	r3, r3
 8014704:	e05d      	b.n	80147c2 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8014706:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801470a:	4933      	ldr	r1, [pc, #204]	; (80147d8 <etharp_update_arp_entry+0x148>)
 801470c:	4613      	mov	r3, r2
 801470e:	005b      	lsls	r3, r3, #1
 8014710:	4413      	add	r3, r2
 8014712:	00db      	lsls	r3, r3, #3
 8014714:	440b      	add	r3, r1
 8014716:	3314      	adds	r3, #20
 8014718:	2202      	movs	r2, #2
 801471a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801471c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014720:	492d      	ldr	r1, [pc, #180]	; (80147d8 <etharp_update_arp_entry+0x148>)
 8014722:	4613      	mov	r3, r2
 8014724:	005b      	lsls	r3, r3, #1
 8014726:	4413      	add	r3, r2
 8014728:	00db      	lsls	r3, r3, #3
 801472a:	440b      	add	r3, r1
 801472c:	3308      	adds	r3, #8
 801472e:	68fa      	ldr	r2, [r7, #12]
 8014730:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8014732:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014736:	4613      	mov	r3, r2
 8014738:	005b      	lsls	r3, r3, #1
 801473a:	4413      	add	r3, r2
 801473c:	00db      	lsls	r3, r3, #3
 801473e:	3308      	adds	r3, #8
 8014740:	4a25      	ldr	r2, [pc, #148]	; (80147d8 <etharp_update_arp_entry+0x148>)
 8014742:	4413      	add	r3, r2
 8014744:	3304      	adds	r3, #4
 8014746:	2206      	movs	r2, #6
 8014748:	6879      	ldr	r1, [r7, #4]
 801474a:	4618      	mov	r0, r3
 801474c:	f002 f848 	bl	80167e0 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8014750:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014754:	4920      	ldr	r1, [pc, #128]	; (80147d8 <etharp_update_arp_entry+0x148>)
 8014756:	4613      	mov	r3, r2
 8014758:	005b      	lsls	r3, r3, #1
 801475a:	4413      	add	r3, r2
 801475c:	00db      	lsls	r3, r3, #3
 801475e:	440b      	add	r3, r1
 8014760:	3312      	adds	r3, #18
 8014762:	2200      	movs	r2, #0
 8014764:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8014766:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801476a:	491b      	ldr	r1, [pc, #108]	; (80147d8 <etharp_update_arp_entry+0x148>)
 801476c:	4613      	mov	r3, r2
 801476e:	005b      	lsls	r3, r3, #1
 8014770:	4413      	add	r3, r2
 8014772:	00db      	lsls	r3, r3, #3
 8014774:	440b      	add	r3, r1
 8014776:	681b      	ldr	r3, [r3, #0]
 8014778:	2b00      	cmp	r3, #0
 801477a:	d021      	beq.n	80147c0 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801477c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014780:	4915      	ldr	r1, [pc, #84]	; (80147d8 <etharp_update_arp_entry+0x148>)
 8014782:	4613      	mov	r3, r2
 8014784:	005b      	lsls	r3, r3, #1
 8014786:	4413      	add	r3, r2
 8014788:	00db      	lsls	r3, r3, #3
 801478a:	440b      	add	r3, r1
 801478c:	681b      	ldr	r3, [r3, #0]
 801478e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8014790:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014794:	4910      	ldr	r1, [pc, #64]	; (80147d8 <etharp_update_arp_entry+0x148>)
 8014796:	4613      	mov	r3, r2
 8014798:	005b      	lsls	r3, r3, #1
 801479a:	4413      	add	r3, r2
 801479c:	00db      	lsls	r3, r3, #3
 801479e:	440b      	add	r3, r1
 80147a0:	2200      	movs	r2, #0
 80147a2:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80147a4:	68fb      	ldr	r3, [r7, #12]
 80147a6:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80147aa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80147ae:	9300      	str	r3, [sp, #0]
 80147b0:	687b      	ldr	r3, [r7, #4]
 80147b2:	6939      	ldr	r1, [r7, #16]
 80147b4:	68f8      	ldr	r0, [r7, #12]
 80147b6:	f001 ff97 	bl	80166e8 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80147ba:	6938      	ldr	r0, [r7, #16]
 80147bc:	f7f8 fd6c 	bl	800d298 <pbuf_free>
  }
  return ERR_OK;
 80147c0:	2300      	movs	r3, #0
}
 80147c2:	4618      	mov	r0, r3
 80147c4:	3718      	adds	r7, #24
 80147c6:	46bd      	mov	sp, r7
 80147c8:	bd80      	pop	{r7, pc}
 80147ca:	bf00      	nop
 80147cc:	0801a9fc 	.word	0x0801a9fc
 80147d0:	0801aaf4 	.word	0x0801aaf4
 80147d4:	0801aa74 	.word	0x0801aa74
 80147d8:	20008c08 	.word	0x20008c08

080147dc <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80147dc:	b580      	push	{r7, lr}
 80147de:	b084      	sub	sp, #16
 80147e0:	af00      	add	r7, sp, #0
 80147e2:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80147e4:	2300      	movs	r3, #0
 80147e6:	60fb      	str	r3, [r7, #12]
 80147e8:	e01e      	b.n	8014828 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 80147ea:	4913      	ldr	r1, [pc, #76]	; (8014838 <etharp_cleanup_netif+0x5c>)
 80147ec:	68fa      	ldr	r2, [r7, #12]
 80147ee:	4613      	mov	r3, r2
 80147f0:	005b      	lsls	r3, r3, #1
 80147f2:	4413      	add	r3, r2
 80147f4:	00db      	lsls	r3, r3, #3
 80147f6:	440b      	add	r3, r1
 80147f8:	3314      	adds	r3, #20
 80147fa:	781b      	ldrb	r3, [r3, #0]
 80147fc:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80147fe:	7afb      	ldrb	r3, [r7, #11]
 8014800:	2b00      	cmp	r3, #0
 8014802:	d00e      	beq.n	8014822 <etharp_cleanup_netif+0x46>
 8014804:	490c      	ldr	r1, [pc, #48]	; (8014838 <etharp_cleanup_netif+0x5c>)
 8014806:	68fa      	ldr	r2, [r7, #12]
 8014808:	4613      	mov	r3, r2
 801480a:	005b      	lsls	r3, r3, #1
 801480c:	4413      	add	r3, r2
 801480e:	00db      	lsls	r3, r3, #3
 8014810:	440b      	add	r3, r1
 8014812:	3308      	adds	r3, #8
 8014814:	681b      	ldr	r3, [r3, #0]
 8014816:	687a      	ldr	r2, [r7, #4]
 8014818:	429a      	cmp	r2, r3
 801481a:	d102      	bne.n	8014822 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801481c:	68f8      	ldr	r0, [r7, #12]
 801481e:	f7ff fce5 	bl	80141ec <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014822:	68fb      	ldr	r3, [r7, #12]
 8014824:	3301      	adds	r3, #1
 8014826:	60fb      	str	r3, [r7, #12]
 8014828:	68fb      	ldr	r3, [r7, #12]
 801482a:	2b09      	cmp	r3, #9
 801482c:	dddd      	ble.n	80147ea <etharp_cleanup_netif+0xe>
    }
  }
}
 801482e:	bf00      	nop
 8014830:	bf00      	nop
 8014832:	3710      	adds	r7, #16
 8014834:	46bd      	mov	sp, r7
 8014836:	bd80      	pop	{r7, pc}
 8014838:	20008c08 	.word	0x20008c08

0801483c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801483c:	b5b0      	push	{r4, r5, r7, lr}
 801483e:	b08a      	sub	sp, #40	; 0x28
 8014840:	af04      	add	r7, sp, #16
 8014842:	6078      	str	r0, [r7, #4]
 8014844:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8014846:	683b      	ldr	r3, [r7, #0]
 8014848:	2b00      	cmp	r3, #0
 801484a:	d107      	bne.n	801485c <etharp_input+0x20>
 801484c:	4b3d      	ldr	r3, [pc, #244]	; (8014944 <etharp_input+0x108>)
 801484e:	f240 228a 	movw	r2, #650	; 0x28a
 8014852:	493d      	ldr	r1, [pc, #244]	; (8014948 <etharp_input+0x10c>)
 8014854:	483d      	ldr	r0, [pc, #244]	; (801494c <etharp_input+0x110>)
 8014856:	f001 fff3 	bl	8016840 <iprintf>
 801485a:	e06f      	b.n	801493c <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 801485c:	687b      	ldr	r3, [r7, #4]
 801485e:	685b      	ldr	r3, [r3, #4]
 8014860:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8014862:	693b      	ldr	r3, [r7, #16]
 8014864:	881b      	ldrh	r3, [r3, #0]
 8014866:	b29b      	uxth	r3, r3
 8014868:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801486c:	d10c      	bne.n	8014888 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801486e:	693b      	ldr	r3, [r7, #16]
 8014870:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8014872:	2b06      	cmp	r3, #6
 8014874:	d108      	bne.n	8014888 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8014876:	693b      	ldr	r3, [r7, #16]
 8014878:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801487a:	2b04      	cmp	r3, #4
 801487c:	d104      	bne.n	8014888 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801487e:	693b      	ldr	r3, [r7, #16]
 8014880:	885b      	ldrh	r3, [r3, #2]
 8014882:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8014884:	2b08      	cmp	r3, #8
 8014886:	d003      	beq.n	8014890 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8014888:	6878      	ldr	r0, [r7, #4]
 801488a:	f7f8 fd05 	bl	800d298 <pbuf_free>
    return;
 801488e:	e055      	b.n	801493c <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8014890:	693b      	ldr	r3, [r7, #16]
 8014892:	330e      	adds	r3, #14
 8014894:	681b      	ldr	r3, [r3, #0]
 8014896:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8014898:	693b      	ldr	r3, [r7, #16]
 801489a:	3318      	adds	r3, #24
 801489c:	681b      	ldr	r3, [r3, #0]
 801489e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80148a0:	683b      	ldr	r3, [r7, #0]
 80148a2:	3304      	adds	r3, #4
 80148a4:	681b      	ldr	r3, [r3, #0]
 80148a6:	2b00      	cmp	r3, #0
 80148a8:	d102      	bne.n	80148b0 <etharp_input+0x74>
    for_us = 0;
 80148aa:	2300      	movs	r3, #0
 80148ac:	75fb      	strb	r3, [r7, #23]
 80148ae:	e009      	b.n	80148c4 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80148b0:	68ba      	ldr	r2, [r7, #8]
 80148b2:	683b      	ldr	r3, [r7, #0]
 80148b4:	3304      	adds	r3, #4
 80148b6:	681b      	ldr	r3, [r3, #0]
 80148b8:	429a      	cmp	r2, r3
 80148ba:	bf0c      	ite	eq
 80148bc:	2301      	moveq	r3, #1
 80148be:	2300      	movne	r3, #0
 80148c0:	b2db      	uxtb	r3, r3
 80148c2:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80148c4:	693b      	ldr	r3, [r7, #16]
 80148c6:	f103 0208 	add.w	r2, r3, #8
 80148ca:	7dfb      	ldrb	r3, [r7, #23]
 80148cc:	2b00      	cmp	r3, #0
 80148ce:	d001      	beq.n	80148d4 <etharp_input+0x98>
 80148d0:	2301      	movs	r3, #1
 80148d2:	e000      	b.n	80148d6 <etharp_input+0x9a>
 80148d4:	2302      	movs	r3, #2
 80148d6:	f107 010c 	add.w	r1, r7, #12
 80148da:	6838      	ldr	r0, [r7, #0]
 80148dc:	f7ff fed8 	bl	8014690 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80148e0:	693b      	ldr	r3, [r7, #16]
 80148e2:	88db      	ldrh	r3, [r3, #6]
 80148e4:	b29b      	uxth	r3, r3
 80148e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80148ea:	d003      	beq.n	80148f4 <etharp_input+0xb8>
 80148ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80148f0:	d01e      	beq.n	8014930 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 80148f2:	e020      	b.n	8014936 <etharp_input+0xfa>
      if (for_us) {
 80148f4:	7dfb      	ldrb	r3, [r7, #23]
 80148f6:	2b00      	cmp	r3, #0
 80148f8:	d01c      	beq.n	8014934 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80148fa:	683b      	ldr	r3, [r7, #0]
 80148fc:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8014900:	693b      	ldr	r3, [r7, #16]
 8014902:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8014906:	683b      	ldr	r3, [r7, #0]
 8014908:	f103 0526 	add.w	r5, r3, #38	; 0x26
 801490c:	683b      	ldr	r3, [r7, #0]
 801490e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8014910:	693a      	ldr	r2, [r7, #16]
 8014912:	3208      	adds	r2, #8
        etharp_raw(netif,
 8014914:	2102      	movs	r1, #2
 8014916:	9103      	str	r1, [sp, #12]
 8014918:	f107 010c 	add.w	r1, r7, #12
 801491c:	9102      	str	r1, [sp, #8]
 801491e:	9201      	str	r2, [sp, #4]
 8014920:	9300      	str	r3, [sp, #0]
 8014922:	462b      	mov	r3, r5
 8014924:	4622      	mov	r2, r4
 8014926:	4601      	mov	r1, r0
 8014928:	6838      	ldr	r0, [r7, #0]
 801492a:	f000 faeb 	bl	8014f04 <etharp_raw>
      break;
 801492e:	e001      	b.n	8014934 <etharp_input+0xf8>
      break;
 8014930:	bf00      	nop
 8014932:	e000      	b.n	8014936 <etharp_input+0xfa>
      break;
 8014934:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8014936:	6878      	ldr	r0, [r7, #4]
 8014938:	f7f8 fcae 	bl	800d298 <pbuf_free>
}
 801493c:	3718      	adds	r7, #24
 801493e:	46bd      	mov	sp, r7
 8014940:	bdb0      	pop	{r4, r5, r7, pc}
 8014942:	bf00      	nop
 8014944:	0801a9fc 	.word	0x0801a9fc
 8014948:	0801ab4c 	.word	0x0801ab4c
 801494c:	0801aa74 	.word	0x0801aa74

08014950 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8014950:	b580      	push	{r7, lr}
 8014952:	b086      	sub	sp, #24
 8014954:	af02      	add	r7, sp, #8
 8014956:	60f8      	str	r0, [r7, #12]
 8014958:	60b9      	str	r1, [r7, #8]
 801495a:	4613      	mov	r3, r2
 801495c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801495e:	79fa      	ldrb	r2, [r7, #7]
 8014960:	4944      	ldr	r1, [pc, #272]	; (8014a74 <etharp_output_to_arp_index+0x124>)
 8014962:	4613      	mov	r3, r2
 8014964:	005b      	lsls	r3, r3, #1
 8014966:	4413      	add	r3, r2
 8014968:	00db      	lsls	r3, r3, #3
 801496a:	440b      	add	r3, r1
 801496c:	3314      	adds	r3, #20
 801496e:	781b      	ldrb	r3, [r3, #0]
 8014970:	2b01      	cmp	r3, #1
 8014972:	d806      	bhi.n	8014982 <etharp_output_to_arp_index+0x32>
 8014974:	4b40      	ldr	r3, [pc, #256]	; (8014a78 <etharp_output_to_arp_index+0x128>)
 8014976:	f240 22ee 	movw	r2, #750	; 0x2ee
 801497a:	4940      	ldr	r1, [pc, #256]	; (8014a7c <etharp_output_to_arp_index+0x12c>)
 801497c:	4840      	ldr	r0, [pc, #256]	; (8014a80 <etharp_output_to_arp_index+0x130>)
 801497e:	f001 ff5f 	bl	8016840 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8014982:	79fa      	ldrb	r2, [r7, #7]
 8014984:	493b      	ldr	r1, [pc, #236]	; (8014a74 <etharp_output_to_arp_index+0x124>)
 8014986:	4613      	mov	r3, r2
 8014988:	005b      	lsls	r3, r3, #1
 801498a:	4413      	add	r3, r2
 801498c:	00db      	lsls	r3, r3, #3
 801498e:	440b      	add	r3, r1
 8014990:	3314      	adds	r3, #20
 8014992:	781b      	ldrb	r3, [r3, #0]
 8014994:	2b02      	cmp	r3, #2
 8014996:	d153      	bne.n	8014a40 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8014998:	79fa      	ldrb	r2, [r7, #7]
 801499a:	4936      	ldr	r1, [pc, #216]	; (8014a74 <etharp_output_to_arp_index+0x124>)
 801499c:	4613      	mov	r3, r2
 801499e:	005b      	lsls	r3, r3, #1
 80149a0:	4413      	add	r3, r2
 80149a2:	00db      	lsls	r3, r3, #3
 80149a4:	440b      	add	r3, r1
 80149a6:	3312      	adds	r3, #18
 80149a8:	881b      	ldrh	r3, [r3, #0]
 80149aa:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80149ae:	d919      	bls.n	80149e4 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80149b0:	79fa      	ldrb	r2, [r7, #7]
 80149b2:	4613      	mov	r3, r2
 80149b4:	005b      	lsls	r3, r3, #1
 80149b6:	4413      	add	r3, r2
 80149b8:	00db      	lsls	r3, r3, #3
 80149ba:	4a2e      	ldr	r2, [pc, #184]	; (8014a74 <etharp_output_to_arp_index+0x124>)
 80149bc:	4413      	add	r3, r2
 80149be:	3304      	adds	r3, #4
 80149c0:	4619      	mov	r1, r3
 80149c2:	68f8      	ldr	r0, [r7, #12]
 80149c4:	f000 fb4c 	bl	8015060 <etharp_request>
 80149c8:	4603      	mov	r3, r0
 80149ca:	2b00      	cmp	r3, #0
 80149cc:	d138      	bne.n	8014a40 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80149ce:	79fa      	ldrb	r2, [r7, #7]
 80149d0:	4928      	ldr	r1, [pc, #160]	; (8014a74 <etharp_output_to_arp_index+0x124>)
 80149d2:	4613      	mov	r3, r2
 80149d4:	005b      	lsls	r3, r3, #1
 80149d6:	4413      	add	r3, r2
 80149d8:	00db      	lsls	r3, r3, #3
 80149da:	440b      	add	r3, r1
 80149dc:	3314      	adds	r3, #20
 80149de:	2203      	movs	r2, #3
 80149e0:	701a      	strb	r2, [r3, #0]
 80149e2:	e02d      	b.n	8014a40 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80149e4:	79fa      	ldrb	r2, [r7, #7]
 80149e6:	4923      	ldr	r1, [pc, #140]	; (8014a74 <etharp_output_to_arp_index+0x124>)
 80149e8:	4613      	mov	r3, r2
 80149ea:	005b      	lsls	r3, r3, #1
 80149ec:	4413      	add	r3, r2
 80149ee:	00db      	lsls	r3, r3, #3
 80149f0:	440b      	add	r3, r1
 80149f2:	3312      	adds	r3, #18
 80149f4:	881b      	ldrh	r3, [r3, #0]
 80149f6:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80149fa:	d321      	bcc.n	8014a40 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80149fc:	79fa      	ldrb	r2, [r7, #7]
 80149fe:	4613      	mov	r3, r2
 8014a00:	005b      	lsls	r3, r3, #1
 8014a02:	4413      	add	r3, r2
 8014a04:	00db      	lsls	r3, r3, #3
 8014a06:	4a1b      	ldr	r2, [pc, #108]	; (8014a74 <etharp_output_to_arp_index+0x124>)
 8014a08:	4413      	add	r3, r2
 8014a0a:	1d19      	adds	r1, r3, #4
 8014a0c:	79fa      	ldrb	r2, [r7, #7]
 8014a0e:	4613      	mov	r3, r2
 8014a10:	005b      	lsls	r3, r3, #1
 8014a12:	4413      	add	r3, r2
 8014a14:	00db      	lsls	r3, r3, #3
 8014a16:	3308      	adds	r3, #8
 8014a18:	4a16      	ldr	r2, [pc, #88]	; (8014a74 <etharp_output_to_arp_index+0x124>)
 8014a1a:	4413      	add	r3, r2
 8014a1c:	3304      	adds	r3, #4
 8014a1e:	461a      	mov	r2, r3
 8014a20:	68f8      	ldr	r0, [r7, #12]
 8014a22:	f000 fafb 	bl	801501c <etharp_request_dst>
 8014a26:	4603      	mov	r3, r0
 8014a28:	2b00      	cmp	r3, #0
 8014a2a:	d109      	bne.n	8014a40 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8014a2c:	79fa      	ldrb	r2, [r7, #7]
 8014a2e:	4911      	ldr	r1, [pc, #68]	; (8014a74 <etharp_output_to_arp_index+0x124>)
 8014a30:	4613      	mov	r3, r2
 8014a32:	005b      	lsls	r3, r3, #1
 8014a34:	4413      	add	r3, r2
 8014a36:	00db      	lsls	r3, r3, #3
 8014a38:	440b      	add	r3, r1
 8014a3a:	3314      	adds	r3, #20
 8014a3c:	2203      	movs	r2, #3
 8014a3e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8014a40:	68fb      	ldr	r3, [r7, #12]
 8014a42:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8014a46:	79fa      	ldrb	r2, [r7, #7]
 8014a48:	4613      	mov	r3, r2
 8014a4a:	005b      	lsls	r3, r3, #1
 8014a4c:	4413      	add	r3, r2
 8014a4e:	00db      	lsls	r3, r3, #3
 8014a50:	3308      	adds	r3, #8
 8014a52:	4a08      	ldr	r2, [pc, #32]	; (8014a74 <etharp_output_to_arp_index+0x124>)
 8014a54:	4413      	add	r3, r2
 8014a56:	3304      	adds	r3, #4
 8014a58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014a5c:	9200      	str	r2, [sp, #0]
 8014a5e:	460a      	mov	r2, r1
 8014a60:	68b9      	ldr	r1, [r7, #8]
 8014a62:	68f8      	ldr	r0, [r7, #12]
 8014a64:	f001 fe40 	bl	80166e8 <ethernet_output>
 8014a68:	4603      	mov	r3, r0
}
 8014a6a:	4618      	mov	r0, r3
 8014a6c:	3710      	adds	r7, #16
 8014a6e:	46bd      	mov	sp, r7
 8014a70:	bd80      	pop	{r7, pc}
 8014a72:	bf00      	nop
 8014a74:	20008c08 	.word	0x20008c08
 8014a78:	0801a9fc 	.word	0x0801a9fc
 8014a7c:	0801ab6c 	.word	0x0801ab6c
 8014a80:	0801aa74 	.word	0x0801aa74

08014a84 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8014a84:	b580      	push	{r7, lr}
 8014a86:	b08a      	sub	sp, #40	; 0x28
 8014a88:	af02      	add	r7, sp, #8
 8014a8a:	60f8      	str	r0, [r7, #12]
 8014a8c:	60b9      	str	r1, [r7, #8]
 8014a8e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8014a90:	687b      	ldr	r3, [r7, #4]
 8014a92:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8014a94:	68fb      	ldr	r3, [r7, #12]
 8014a96:	2b00      	cmp	r3, #0
 8014a98:	d106      	bne.n	8014aa8 <etharp_output+0x24>
 8014a9a:	4b73      	ldr	r3, [pc, #460]	; (8014c68 <etharp_output+0x1e4>)
 8014a9c:	f240 321e 	movw	r2, #798	; 0x31e
 8014aa0:	4972      	ldr	r1, [pc, #456]	; (8014c6c <etharp_output+0x1e8>)
 8014aa2:	4873      	ldr	r0, [pc, #460]	; (8014c70 <etharp_output+0x1ec>)
 8014aa4:	f001 fecc 	bl	8016840 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8014aa8:	68bb      	ldr	r3, [r7, #8]
 8014aaa:	2b00      	cmp	r3, #0
 8014aac:	d106      	bne.n	8014abc <etharp_output+0x38>
 8014aae:	4b6e      	ldr	r3, [pc, #440]	; (8014c68 <etharp_output+0x1e4>)
 8014ab0:	f240 321f 	movw	r2, #799	; 0x31f
 8014ab4:	496f      	ldr	r1, [pc, #444]	; (8014c74 <etharp_output+0x1f0>)
 8014ab6:	486e      	ldr	r0, [pc, #440]	; (8014c70 <etharp_output+0x1ec>)
 8014ab8:	f001 fec2 	bl	8016840 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8014abc:	687b      	ldr	r3, [r7, #4]
 8014abe:	2b00      	cmp	r3, #0
 8014ac0:	d106      	bne.n	8014ad0 <etharp_output+0x4c>
 8014ac2:	4b69      	ldr	r3, [pc, #420]	; (8014c68 <etharp_output+0x1e4>)
 8014ac4:	f44f 7248 	mov.w	r2, #800	; 0x320
 8014ac8:	496b      	ldr	r1, [pc, #428]	; (8014c78 <etharp_output+0x1f4>)
 8014aca:	4869      	ldr	r0, [pc, #420]	; (8014c70 <etharp_output+0x1ec>)
 8014acc:	f001 feb8 	bl	8016840 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8014ad0:	687b      	ldr	r3, [r7, #4]
 8014ad2:	681b      	ldr	r3, [r3, #0]
 8014ad4:	68f9      	ldr	r1, [r7, #12]
 8014ad6:	4618      	mov	r0, r3
 8014ad8:	f000 fef8 	bl	80158cc <ip4_addr_isbroadcast_u32>
 8014adc:	4603      	mov	r3, r0
 8014ade:	2b00      	cmp	r3, #0
 8014ae0:	d002      	beq.n	8014ae8 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8014ae2:	4b66      	ldr	r3, [pc, #408]	; (8014c7c <etharp_output+0x1f8>)
 8014ae4:	61fb      	str	r3, [r7, #28]
 8014ae6:	e0af      	b.n	8014c48 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8014ae8:	687b      	ldr	r3, [r7, #4]
 8014aea:	681b      	ldr	r3, [r3, #0]
 8014aec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014af0:	2be0      	cmp	r3, #224	; 0xe0
 8014af2:	d118      	bne.n	8014b26 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8014af4:	2301      	movs	r3, #1
 8014af6:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8014af8:	2300      	movs	r3, #0
 8014afa:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8014afc:	235e      	movs	r3, #94	; 0x5e
 8014afe:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8014b00:	687b      	ldr	r3, [r7, #4]
 8014b02:	3301      	adds	r3, #1
 8014b04:	781b      	ldrb	r3, [r3, #0]
 8014b06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014b0a:	b2db      	uxtb	r3, r3
 8014b0c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8014b0e:	687b      	ldr	r3, [r7, #4]
 8014b10:	3302      	adds	r3, #2
 8014b12:	781b      	ldrb	r3, [r3, #0]
 8014b14:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8014b16:	687b      	ldr	r3, [r7, #4]
 8014b18:	3303      	adds	r3, #3
 8014b1a:	781b      	ldrb	r3, [r3, #0]
 8014b1c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8014b1e:	f107 0310 	add.w	r3, r7, #16
 8014b22:	61fb      	str	r3, [r7, #28]
 8014b24:	e090      	b.n	8014c48 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8014b26:	687b      	ldr	r3, [r7, #4]
 8014b28:	681a      	ldr	r2, [r3, #0]
 8014b2a:	68fb      	ldr	r3, [r7, #12]
 8014b2c:	3304      	adds	r3, #4
 8014b2e:	681b      	ldr	r3, [r3, #0]
 8014b30:	405a      	eors	r2, r3
 8014b32:	68fb      	ldr	r3, [r7, #12]
 8014b34:	3308      	adds	r3, #8
 8014b36:	681b      	ldr	r3, [r3, #0]
 8014b38:	4013      	ands	r3, r2
 8014b3a:	2b00      	cmp	r3, #0
 8014b3c:	d012      	beq.n	8014b64 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8014b3e:	687b      	ldr	r3, [r7, #4]
 8014b40:	681b      	ldr	r3, [r3, #0]
 8014b42:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8014b44:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8014b48:	4293      	cmp	r3, r2
 8014b4a:	d00b      	beq.n	8014b64 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8014b4c:	68fb      	ldr	r3, [r7, #12]
 8014b4e:	330c      	adds	r3, #12
 8014b50:	681b      	ldr	r3, [r3, #0]
 8014b52:	2b00      	cmp	r3, #0
 8014b54:	d003      	beq.n	8014b5e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8014b56:	68fb      	ldr	r3, [r7, #12]
 8014b58:	330c      	adds	r3, #12
 8014b5a:	61bb      	str	r3, [r7, #24]
 8014b5c:	e002      	b.n	8014b64 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8014b5e:	f06f 0303 	mvn.w	r3, #3
 8014b62:	e07d      	b.n	8014c60 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8014b64:	4b46      	ldr	r3, [pc, #280]	; (8014c80 <etharp_output+0x1fc>)
 8014b66:	781b      	ldrb	r3, [r3, #0]
 8014b68:	4619      	mov	r1, r3
 8014b6a:	4a46      	ldr	r2, [pc, #280]	; (8014c84 <etharp_output+0x200>)
 8014b6c:	460b      	mov	r3, r1
 8014b6e:	005b      	lsls	r3, r3, #1
 8014b70:	440b      	add	r3, r1
 8014b72:	00db      	lsls	r3, r3, #3
 8014b74:	4413      	add	r3, r2
 8014b76:	3314      	adds	r3, #20
 8014b78:	781b      	ldrb	r3, [r3, #0]
 8014b7a:	2b01      	cmp	r3, #1
 8014b7c:	d925      	bls.n	8014bca <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8014b7e:	4b40      	ldr	r3, [pc, #256]	; (8014c80 <etharp_output+0x1fc>)
 8014b80:	781b      	ldrb	r3, [r3, #0]
 8014b82:	4619      	mov	r1, r3
 8014b84:	4a3f      	ldr	r2, [pc, #252]	; (8014c84 <etharp_output+0x200>)
 8014b86:	460b      	mov	r3, r1
 8014b88:	005b      	lsls	r3, r3, #1
 8014b8a:	440b      	add	r3, r1
 8014b8c:	00db      	lsls	r3, r3, #3
 8014b8e:	4413      	add	r3, r2
 8014b90:	3308      	adds	r3, #8
 8014b92:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8014b94:	68fa      	ldr	r2, [r7, #12]
 8014b96:	429a      	cmp	r2, r3
 8014b98:	d117      	bne.n	8014bca <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8014b9a:	69bb      	ldr	r3, [r7, #24]
 8014b9c:	681a      	ldr	r2, [r3, #0]
 8014b9e:	4b38      	ldr	r3, [pc, #224]	; (8014c80 <etharp_output+0x1fc>)
 8014ba0:	781b      	ldrb	r3, [r3, #0]
 8014ba2:	4618      	mov	r0, r3
 8014ba4:	4937      	ldr	r1, [pc, #220]	; (8014c84 <etharp_output+0x200>)
 8014ba6:	4603      	mov	r3, r0
 8014ba8:	005b      	lsls	r3, r3, #1
 8014baa:	4403      	add	r3, r0
 8014bac:	00db      	lsls	r3, r3, #3
 8014bae:	440b      	add	r3, r1
 8014bb0:	3304      	adds	r3, #4
 8014bb2:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8014bb4:	429a      	cmp	r2, r3
 8014bb6:	d108      	bne.n	8014bca <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8014bb8:	4b31      	ldr	r3, [pc, #196]	; (8014c80 <etharp_output+0x1fc>)
 8014bba:	781b      	ldrb	r3, [r3, #0]
 8014bbc:	461a      	mov	r2, r3
 8014bbe:	68b9      	ldr	r1, [r7, #8]
 8014bc0:	68f8      	ldr	r0, [r7, #12]
 8014bc2:	f7ff fec5 	bl	8014950 <etharp_output_to_arp_index>
 8014bc6:	4603      	mov	r3, r0
 8014bc8:	e04a      	b.n	8014c60 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8014bca:	2300      	movs	r3, #0
 8014bcc:	75fb      	strb	r3, [r7, #23]
 8014bce:	e031      	b.n	8014c34 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8014bd0:	7dfa      	ldrb	r2, [r7, #23]
 8014bd2:	492c      	ldr	r1, [pc, #176]	; (8014c84 <etharp_output+0x200>)
 8014bd4:	4613      	mov	r3, r2
 8014bd6:	005b      	lsls	r3, r3, #1
 8014bd8:	4413      	add	r3, r2
 8014bda:	00db      	lsls	r3, r3, #3
 8014bdc:	440b      	add	r3, r1
 8014bde:	3314      	adds	r3, #20
 8014be0:	781b      	ldrb	r3, [r3, #0]
 8014be2:	2b01      	cmp	r3, #1
 8014be4:	d923      	bls.n	8014c2e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8014be6:	7dfa      	ldrb	r2, [r7, #23]
 8014be8:	4926      	ldr	r1, [pc, #152]	; (8014c84 <etharp_output+0x200>)
 8014bea:	4613      	mov	r3, r2
 8014bec:	005b      	lsls	r3, r3, #1
 8014bee:	4413      	add	r3, r2
 8014bf0:	00db      	lsls	r3, r3, #3
 8014bf2:	440b      	add	r3, r1
 8014bf4:	3308      	adds	r3, #8
 8014bf6:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8014bf8:	68fa      	ldr	r2, [r7, #12]
 8014bfa:	429a      	cmp	r2, r3
 8014bfc:	d117      	bne.n	8014c2e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8014bfe:	69bb      	ldr	r3, [r7, #24]
 8014c00:	6819      	ldr	r1, [r3, #0]
 8014c02:	7dfa      	ldrb	r2, [r7, #23]
 8014c04:	481f      	ldr	r0, [pc, #124]	; (8014c84 <etharp_output+0x200>)
 8014c06:	4613      	mov	r3, r2
 8014c08:	005b      	lsls	r3, r3, #1
 8014c0a:	4413      	add	r3, r2
 8014c0c:	00db      	lsls	r3, r3, #3
 8014c0e:	4403      	add	r3, r0
 8014c10:	3304      	adds	r3, #4
 8014c12:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8014c14:	4299      	cmp	r1, r3
 8014c16:	d10a      	bne.n	8014c2e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8014c18:	4a19      	ldr	r2, [pc, #100]	; (8014c80 <etharp_output+0x1fc>)
 8014c1a:	7dfb      	ldrb	r3, [r7, #23]
 8014c1c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8014c1e:	7dfb      	ldrb	r3, [r7, #23]
 8014c20:	461a      	mov	r2, r3
 8014c22:	68b9      	ldr	r1, [r7, #8]
 8014c24:	68f8      	ldr	r0, [r7, #12]
 8014c26:	f7ff fe93 	bl	8014950 <etharp_output_to_arp_index>
 8014c2a:	4603      	mov	r3, r0
 8014c2c:	e018      	b.n	8014c60 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8014c2e:	7dfb      	ldrb	r3, [r7, #23]
 8014c30:	3301      	adds	r3, #1
 8014c32:	75fb      	strb	r3, [r7, #23]
 8014c34:	7dfb      	ldrb	r3, [r7, #23]
 8014c36:	2b09      	cmp	r3, #9
 8014c38:	d9ca      	bls.n	8014bd0 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8014c3a:	68ba      	ldr	r2, [r7, #8]
 8014c3c:	69b9      	ldr	r1, [r7, #24]
 8014c3e:	68f8      	ldr	r0, [r7, #12]
 8014c40:	f000 f822 	bl	8014c88 <etharp_query>
 8014c44:	4603      	mov	r3, r0
 8014c46:	e00b      	b.n	8014c60 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8014c48:	68fb      	ldr	r3, [r7, #12]
 8014c4a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8014c4e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014c52:	9300      	str	r3, [sp, #0]
 8014c54:	69fb      	ldr	r3, [r7, #28]
 8014c56:	68b9      	ldr	r1, [r7, #8]
 8014c58:	68f8      	ldr	r0, [r7, #12]
 8014c5a:	f001 fd45 	bl	80166e8 <ethernet_output>
 8014c5e:	4603      	mov	r3, r0
}
 8014c60:	4618      	mov	r0, r3
 8014c62:	3720      	adds	r7, #32
 8014c64:	46bd      	mov	sp, r7
 8014c66:	bd80      	pop	{r7, pc}
 8014c68:	0801a9fc 	.word	0x0801a9fc
 8014c6c:	0801ab4c 	.word	0x0801ab4c
 8014c70:	0801aa74 	.word	0x0801aa74
 8014c74:	0801ab9c 	.word	0x0801ab9c
 8014c78:	0801ab3c 	.word	0x0801ab3c
 8014c7c:	0801d0ec 	.word	0x0801d0ec
 8014c80:	20008cf8 	.word	0x20008cf8
 8014c84:	20008c08 	.word	0x20008c08

08014c88 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8014c88:	b580      	push	{r7, lr}
 8014c8a:	b08c      	sub	sp, #48	; 0x30
 8014c8c:	af02      	add	r7, sp, #8
 8014c8e:	60f8      	str	r0, [r7, #12]
 8014c90:	60b9      	str	r1, [r7, #8]
 8014c92:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8014c94:	68fb      	ldr	r3, [r7, #12]
 8014c96:	3326      	adds	r3, #38	; 0x26
 8014c98:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8014c9a:	23ff      	movs	r3, #255	; 0xff
 8014c9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8014ca0:	2300      	movs	r3, #0
 8014ca2:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8014ca4:	68bb      	ldr	r3, [r7, #8]
 8014ca6:	681b      	ldr	r3, [r3, #0]
 8014ca8:	68f9      	ldr	r1, [r7, #12]
 8014caa:	4618      	mov	r0, r3
 8014cac:	f000 fe0e 	bl	80158cc <ip4_addr_isbroadcast_u32>
 8014cb0:	4603      	mov	r3, r0
 8014cb2:	2b00      	cmp	r3, #0
 8014cb4:	d10c      	bne.n	8014cd0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8014cb6:	68bb      	ldr	r3, [r7, #8]
 8014cb8:	681b      	ldr	r3, [r3, #0]
 8014cba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8014cbe:	2be0      	cmp	r3, #224	; 0xe0
 8014cc0:	d006      	beq.n	8014cd0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8014cc2:	68bb      	ldr	r3, [r7, #8]
 8014cc4:	2b00      	cmp	r3, #0
 8014cc6:	d003      	beq.n	8014cd0 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8014cc8:	68bb      	ldr	r3, [r7, #8]
 8014cca:	681b      	ldr	r3, [r3, #0]
 8014ccc:	2b00      	cmp	r3, #0
 8014cce:	d102      	bne.n	8014cd6 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8014cd0:	f06f 030f 	mvn.w	r3, #15
 8014cd4:	e101      	b.n	8014eda <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8014cd6:	68fa      	ldr	r2, [r7, #12]
 8014cd8:	2101      	movs	r1, #1
 8014cda:	68b8      	ldr	r0, [r7, #8]
 8014cdc:	f7ff fb60 	bl	80143a0 <etharp_find_entry>
 8014ce0:	4603      	mov	r3, r0
 8014ce2:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8014ce4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8014ce8:	2b00      	cmp	r3, #0
 8014cea:	da02      	bge.n	8014cf2 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8014cec:	8a7b      	ldrh	r3, [r7, #18]
 8014cee:	b25b      	sxtb	r3, r3
 8014cf0:	e0f3      	b.n	8014eda <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8014cf2:	8a7b      	ldrh	r3, [r7, #18]
 8014cf4:	2b7e      	cmp	r3, #126	; 0x7e
 8014cf6:	d906      	bls.n	8014d06 <etharp_query+0x7e>
 8014cf8:	4b7a      	ldr	r3, [pc, #488]	; (8014ee4 <etharp_query+0x25c>)
 8014cfa:	f240 32c1 	movw	r2, #961	; 0x3c1
 8014cfe:	497a      	ldr	r1, [pc, #488]	; (8014ee8 <etharp_query+0x260>)
 8014d00:	487a      	ldr	r0, [pc, #488]	; (8014eec <etharp_query+0x264>)
 8014d02:	f001 fd9d 	bl	8016840 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8014d06:	8a7b      	ldrh	r3, [r7, #18]
 8014d08:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8014d0a:	7c7a      	ldrb	r2, [r7, #17]
 8014d0c:	4978      	ldr	r1, [pc, #480]	; (8014ef0 <etharp_query+0x268>)
 8014d0e:	4613      	mov	r3, r2
 8014d10:	005b      	lsls	r3, r3, #1
 8014d12:	4413      	add	r3, r2
 8014d14:	00db      	lsls	r3, r3, #3
 8014d16:	440b      	add	r3, r1
 8014d18:	3314      	adds	r3, #20
 8014d1a:	781b      	ldrb	r3, [r3, #0]
 8014d1c:	2b00      	cmp	r3, #0
 8014d1e:	d115      	bne.n	8014d4c <etharp_query+0xc4>
    is_new_entry = 1;
 8014d20:	2301      	movs	r3, #1
 8014d22:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8014d24:	7c7a      	ldrb	r2, [r7, #17]
 8014d26:	4972      	ldr	r1, [pc, #456]	; (8014ef0 <etharp_query+0x268>)
 8014d28:	4613      	mov	r3, r2
 8014d2a:	005b      	lsls	r3, r3, #1
 8014d2c:	4413      	add	r3, r2
 8014d2e:	00db      	lsls	r3, r3, #3
 8014d30:	440b      	add	r3, r1
 8014d32:	3314      	adds	r3, #20
 8014d34:	2201      	movs	r2, #1
 8014d36:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8014d38:	7c7a      	ldrb	r2, [r7, #17]
 8014d3a:	496d      	ldr	r1, [pc, #436]	; (8014ef0 <etharp_query+0x268>)
 8014d3c:	4613      	mov	r3, r2
 8014d3e:	005b      	lsls	r3, r3, #1
 8014d40:	4413      	add	r3, r2
 8014d42:	00db      	lsls	r3, r3, #3
 8014d44:	440b      	add	r3, r1
 8014d46:	3308      	adds	r3, #8
 8014d48:	68fa      	ldr	r2, [r7, #12]
 8014d4a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8014d4c:	7c7a      	ldrb	r2, [r7, #17]
 8014d4e:	4968      	ldr	r1, [pc, #416]	; (8014ef0 <etharp_query+0x268>)
 8014d50:	4613      	mov	r3, r2
 8014d52:	005b      	lsls	r3, r3, #1
 8014d54:	4413      	add	r3, r2
 8014d56:	00db      	lsls	r3, r3, #3
 8014d58:	440b      	add	r3, r1
 8014d5a:	3314      	adds	r3, #20
 8014d5c:	781b      	ldrb	r3, [r3, #0]
 8014d5e:	2b01      	cmp	r3, #1
 8014d60:	d011      	beq.n	8014d86 <etharp_query+0xfe>
 8014d62:	7c7a      	ldrb	r2, [r7, #17]
 8014d64:	4962      	ldr	r1, [pc, #392]	; (8014ef0 <etharp_query+0x268>)
 8014d66:	4613      	mov	r3, r2
 8014d68:	005b      	lsls	r3, r3, #1
 8014d6a:	4413      	add	r3, r2
 8014d6c:	00db      	lsls	r3, r3, #3
 8014d6e:	440b      	add	r3, r1
 8014d70:	3314      	adds	r3, #20
 8014d72:	781b      	ldrb	r3, [r3, #0]
 8014d74:	2b01      	cmp	r3, #1
 8014d76:	d806      	bhi.n	8014d86 <etharp_query+0xfe>
 8014d78:	4b5a      	ldr	r3, [pc, #360]	; (8014ee4 <etharp_query+0x25c>)
 8014d7a:	f240 32cd 	movw	r2, #973	; 0x3cd
 8014d7e:	495d      	ldr	r1, [pc, #372]	; (8014ef4 <etharp_query+0x26c>)
 8014d80:	485a      	ldr	r0, [pc, #360]	; (8014eec <etharp_query+0x264>)
 8014d82:	f001 fd5d 	bl	8016840 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8014d86:	6a3b      	ldr	r3, [r7, #32]
 8014d88:	2b00      	cmp	r3, #0
 8014d8a:	d102      	bne.n	8014d92 <etharp_query+0x10a>
 8014d8c:	687b      	ldr	r3, [r7, #4]
 8014d8e:	2b00      	cmp	r3, #0
 8014d90:	d10c      	bne.n	8014dac <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8014d92:	68b9      	ldr	r1, [r7, #8]
 8014d94:	68f8      	ldr	r0, [r7, #12]
 8014d96:	f000 f963 	bl	8015060 <etharp_request>
 8014d9a:	4603      	mov	r3, r0
 8014d9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8014da0:	687b      	ldr	r3, [r7, #4]
 8014da2:	2b00      	cmp	r3, #0
 8014da4:	d102      	bne.n	8014dac <etharp_query+0x124>
      return result;
 8014da6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8014daa:	e096      	b.n	8014eda <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8014dac:	687b      	ldr	r3, [r7, #4]
 8014dae:	2b00      	cmp	r3, #0
 8014db0:	d106      	bne.n	8014dc0 <etharp_query+0x138>
 8014db2:	4b4c      	ldr	r3, [pc, #304]	; (8014ee4 <etharp_query+0x25c>)
 8014db4:	f240 32e1 	movw	r2, #993	; 0x3e1
 8014db8:	494f      	ldr	r1, [pc, #316]	; (8014ef8 <etharp_query+0x270>)
 8014dba:	484c      	ldr	r0, [pc, #304]	; (8014eec <etharp_query+0x264>)
 8014dbc:	f001 fd40 	bl	8016840 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8014dc0:	7c7a      	ldrb	r2, [r7, #17]
 8014dc2:	494b      	ldr	r1, [pc, #300]	; (8014ef0 <etharp_query+0x268>)
 8014dc4:	4613      	mov	r3, r2
 8014dc6:	005b      	lsls	r3, r3, #1
 8014dc8:	4413      	add	r3, r2
 8014dca:	00db      	lsls	r3, r3, #3
 8014dcc:	440b      	add	r3, r1
 8014dce:	3314      	adds	r3, #20
 8014dd0:	781b      	ldrb	r3, [r3, #0]
 8014dd2:	2b01      	cmp	r3, #1
 8014dd4:	d917      	bls.n	8014e06 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8014dd6:	4a49      	ldr	r2, [pc, #292]	; (8014efc <etharp_query+0x274>)
 8014dd8:	7c7b      	ldrb	r3, [r7, #17]
 8014dda:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8014ddc:	7c7a      	ldrb	r2, [r7, #17]
 8014dde:	4613      	mov	r3, r2
 8014de0:	005b      	lsls	r3, r3, #1
 8014de2:	4413      	add	r3, r2
 8014de4:	00db      	lsls	r3, r3, #3
 8014de6:	3308      	adds	r3, #8
 8014de8:	4a41      	ldr	r2, [pc, #260]	; (8014ef0 <etharp_query+0x268>)
 8014dea:	4413      	add	r3, r2
 8014dec:	3304      	adds	r3, #4
 8014dee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014df2:	9200      	str	r2, [sp, #0]
 8014df4:	697a      	ldr	r2, [r7, #20]
 8014df6:	6879      	ldr	r1, [r7, #4]
 8014df8:	68f8      	ldr	r0, [r7, #12]
 8014dfa:	f001 fc75 	bl	80166e8 <ethernet_output>
 8014dfe:	4603      	mov	r3, r0
 8014e00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014e04:	e067      	b.n	8014ed6 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8014e06:	7c7a      	ldrb	r2, [r7, #17]
 8014e08:	4939      	ldr	r1, [pc, #228]	; (8014ef0 <etharp_query+0x268>)
 8014e0a:	4613      	mov	r3, r2
 8014e0c:	005b      	lsls	r3, r3, #1
 8014e0e:	4413      	add	r3, r2
 8014e10:	00db      	lsls	r3, r3, #3
 8014e12:	440b      	add	r3, r1
 8014e14:	3314      	adds	r3, #20
 8014e16:	781b      	ldrb	r3, [r3, #0]
 8014e18:	2b01      	cmp	r3, #1
 8014e1a:	d15c      	bne.n	8014ed6 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8014e1c:	2300      	movs	r3, #0
 8014e1e:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8014e20:	687b      	ldr	r3, [r7, #4]
 8014e22:	61fb      	str	r3, [r7, #28]
    while (p) {
 8014e24:	e01c      	b.n	8014e60 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8014e26:	69fb      	ldr	r3, [r7, #28]
 8014e28:	895a      	ldrh	r2, [r3, #10]
 8014e2a:	69fb      	ldr	r3, [r7, #28]
 8014e2c:	891b      	ldrh	r3, [r3, #8]
 8014e2e:	429a      	cmp	r2, r3
 8014e30:	d10a      	bne.n	8014e48 <etharp_query+0x1c0>
 8014e32:	69fb      	ldr	r3, [r7, #28]
 8014e34:	681b      	ldr	r3, [r3, #0]
 8014e36:	2b00      	cmp	r3, #0
 8014e38:	d006      	beq.n	8014e48 <etharp_query+0x1c0>
 8014e3a:	4b2a      	ldr	r3, [pc, #168]	; (8014ee4 <etharp_query+0x25c>)
 8014e3c:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8014e40:	492f      	ldr	r1, [pc, #188]	; (8014f00 <etharp_query+0x278>)
 8014e42:	482a      	ldr	r0, [pc, #168]	; (8014eec <etharp_query+0x264>)
 8014e44:	f001 fcfc 	bl	8016840 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8014e48:	69fb      	ldr	r3, [r7, #28]
 8014e4a:	7b1b      	ldrb	r3, [r3, #12]
 8014e4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014e50:	2b00      	cmp	r3, #0
 8014e52:	d002      	beq.n	8014e5a <etharp_query+0x1d2>
        copy_needed = 1;
 8014e54:	2301      	movs	r3, #1
 8014e56:	61bb      	str	r3, [r7, #24]
        break;
 8014e58:	e005      	b.n	8014e66 <etharp_query+0x1de>
      }
      p = p->next;
 8014e5a:	69fb      	ldr	r3, [r7, #28]
 8014e5c:	681b      	ldr	r3, [r3, #0]
 8014e5e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8014e60:	69fb      	ldr	r3, [r7, #28]
 8014e62:	2b00      	cmp	r3, #0
 8014e64:	d1df      	bne.n	8014e26 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8014e66:	69bb      	ldr	r3, [r7, #24]
 8014e68:	2b00      	cmp	r3, #0
 8014e6a:	d007      	beq.n	8014e7c <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8014e6c:	687a      	ldr	r2, [r7, #4]
 8014e6e:	f44f 7120 	mov.w	r1, #640	; 0x280
 8014e72:	200e      	movs	r0, #14
 8014e74:	f7f8 fc96 	bl	800d7a4 <pbuf_clone>
 8014e78:	61f8      	str	r0, [r7, #28]
 8014e7a:	e004      	b.n	8014e86 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8014e7c:	687b      	ldr	r3, [r7, #4]
 8014e7e:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8014e80:	69f8      	ldr	r0, [r7, #28]
 8014e82:	f7f8 faa9 	bl	800d3d8 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8014e86:	69fb      	ldr	r3, [r7, #28]
 8014e88:	2b00      	cmp	r3, #0
 8014e8a:	d021      	beq.n	8014ed0 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8014e8c:	7c7a      	ldrb	r2, [r7, #17]
 8014e8e:	4918      	ldr	r1, [pc, #96]	; (8014ef0 <etharp_query+0x268>)
 8014e90:	4613      	mov	r3, r2
 8014e92:	005b      	lsls	r3, r3, #1
 8014e94:	4413      	add	r3, r2
 8014e96:	00db      	lsls	r3, r3, #3
 8014e98:	440b      	add	r3, r1
 8014e9a:	681b      	ldr	r3, [r3, #0]
 8014e9c:	2b00      	cmp	r3, #0
 8014e9e:	d00a      	beq.n	8014eb6 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8014ea0:	7c7a      	ldrb	r2, [r7, #17]
 8014ea2:	4913      	ldr	r1, [pc, #76]	; (8014ef0 <etharp_query+0x268>)
 8014ea4:	4613      	mov	r3, r2
 8014ea6:	005b      	lsls	r3, r3, #1
 8014ea8:	4413      	add	r3, r2
 8014eaa:	00db      	lsls	r3, r3, #3
 8014eac:	440b      	add	r3, r1
 8014eae:	681b      	ldr	r3, [r3, #0]
 8014eb0:	4618      	mov	r0, r3
 8014eb2:	f7f8 f9f1 	bl	800d298 <pbuf_free>
      }
      arp_table[i].q = p;
 8014eb6:	7c7a      	ldrb	r2, [r7, #17]
 8014eb8:	490d      	ldr	r1, [pc, #52]	; (8014ef0 <etharp_query+0x268>)
 8014eba:	4613      	mov	r3, r2
 8014ebc:	005b      	lsls	r3, r3, #1
 8014ebe:	4413      	add	r3, r2
 8014ec0:	00db      	lsls	r3, r3, #3
 8014ec2:	440b      	add	r3, r1
 8014ec4:	69fa      	ldr	r2, [r7, #28]
 8014ec6:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8014ec8:	2300      	movs	r3, #0
 8014eca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014ece:	e002      	b.n	8014ed6 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8014ed0:	23ff      	movs	r3, #255	; 0xff
 8014ed2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8014ed6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8014eda:	4618      	mov	r0, r3
 8014edc:	3728      	adds	r7, #40	; 0x28
 8014ede:	46bd      	mov	sp, r7
 8014ee0:	bd80      	pop	{r7, pc}
 8014ee2:	bf00      	nop
 8014ee4:	0801a9fc 	.word	0x0801a9fc
 8014ee8:	0801aba8 	.word	0x0801aba8
 8014eec:	0801aa74 	.word	0x0801aa74
 8014ef0:	20008c08 	.word	0x20008c08
 8014ef4:	0801abb8 	.word	0x0801abb8
 8014ef8:	0801ab9c 	.word	0x0801ab9c
 8014efc:	20008cf8 	.word	0x20008cf8
 8014f00:	0801abe0 	.word	0x0801abe0

08014f04 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8014f04:	b580      	push	{r7, lr}
 8014f06:	b08a      	sub	sp, #40	; 0x28
 8014f08:	af02      	add	r7, sp, #8
 8014f0a:	60f8      	str	r0, [r7, #12]
 8014f0c:	60b9      	str	r1, [r7, #8]
 8014f0e:	607a      	str	r2, [r7, #4]
 8014f10:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8014f12:	2300      	movs	r3, #0
 8014f14:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8014f16:	68fb      	ldr	r3, [r7, #12]
 8014f18:	2b00      	cmp	r3, #0
 8014f1a:	d106      	bne.n	8014f2a <etharp_raw+0x26>
 8014f1c:	4b3a      	ldr	r3, [pc, #232]	; (8015008 <etharp_raw+0x104>)
 8014f1e:	f240 4257 	movw	r2, #1111	; 0x457
 8014f22:	493a      	ldr	r1, [pc, #232]	; (801500c <etharp_raw+0x108>)
 8014f24:	483a      	ldr	r0, [pc, #232]	; (8015010 <etharp_raw+0x10c>)
 8014f26:	f001 fc8b 	bl	8016840 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8014f2a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014f2e:	211c      	movs	r1, #28
 8014f30:	200e      	movs	r0, #14
 8014f32:	f7f7 fecd 	bl	800ccd0 <pbuf_alloc>
 8014f36:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8014f38:	69bb      	ldr	r3, [r7, #24]
 8014f3a:	2b00      	cmp	r3, #0
 8014f3c:	d102      	bne.n	8014f44 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8014f3e:	f04f 33ff 	mov.w	r3, #4294967295
 8014f42:	e05d      	b.n	8015000 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8014f44:	69bb      	ldr	r3, [r7, #24]
 8014f46:	895b      	ldrh	r3, [r3, #10]
 8014f48:	2b1b      	cmp	r3, #27
 8014f4a:	d806      	bhi.n	8014f5a <etharp_raw+0x56>
 8014f4c:	4b2e      	ldr	r3, [pc, #184]	; (8015008 <etharp_raw+0x104>)
 8014f4e:	f240 4262 	movw	r2, #1122	; 0x462
 8014f52:	4930      	ldr	r1, [pc, #192]	; (8015014 <etharp_raw+0x110>)
 8014f54:	482e      	ldr	r0, [pc, #184]	; (8015010 <etharp_raw+0x10c>)
 8014f56:	f001 fc73 	bl	8016840 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8014f5a:	69bb      	ldr	r3, [r7, #24]
 8014f5c:	685b      	ldr	r3, [r3, #4]
 8014f5e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8014f60:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8014f62:	4618      	mov	r0, r3
 8014f64:	f7f6 fe12 	bl	800bb8c <lwip_htons>
 8014f68:	4603      	mov	r3, r0
 8014f6a:	461a      	mov	r2, r3
 8014f6c:	697b      	ldr	r3, [r7, #20]
 8014f6e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8014f70:	68fb      	ldr	r3, [r7, #12]
 8014f72:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8014f76:	2b06      	cmp	r3, #6
 8014f78:	d006      	beq.n	8014f88 <etharp_raw+0x84>
 8014f7a:	4b23      	ldr	r3, [pc, #140]	; (8015008 <etharp_raw+0x104>)
 8014f7c:	f240 4269 	movw	r2, #1129	; 0x469
 8014f80:	4925      	ldr	r1, [pc, #148]	; (8015018 <etharp_raw+0x114>)
 8014f82:	4823      	ldr	r0, [pc, #140]	; (8015010 <etharp_raw+0x10c>)
 8014f84:	f001 fc5c 	bl	8016840 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8014f88:	697b      	ldr	r3, [r7, #20]
 8014f8a:	3308      	adds	r3, #8
 8014f8c:	2206      	movs	r2, #6
 8014f8e:	6839      	ldr	r1, [r7, #0]
 8014f90:	4618      	mov	r0, r3
 8014f92:	f001 fc25 	bl	80167e0 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8014f96:	697b      	ldr	r3, [r7, #20]
 8014f98:	3312      	adds	r3, #18
 8014f9a:	2206      	movs	r2, #6
 8014f9c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014f9e:	4618      	mov	r0, r3
 8014fa0:	f001 fc1e 	bl	80167e0 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8014fa4:	697b      	ldr	r3, [r7, #20]
 8014fa6:	330e      	adds	r3, #14
 8014fa8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014faa:	6812      	ldr	r2, [r2, #0]
 8014fac:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8014fae:	697b      	ldr	r3, [r7, #20]
 8014fb0:	3318      	adds	r3, #24
 8014fb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014fb4:	6812      	ldr	r2, [r2, #0]
 8014fb6:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8014fb8:	697b      	ldr	r3, [r7, #20]
 8014fba:	2200      	movs	r2, #0
 8014fbc:	701a      	strb	r2, [r3, #0]
 8014fbe:	2200      	movs	r2, #0
 8014fc0:	f042 0201 	orr.w	r2, r2, #1
 8014fc4:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8014fc6:	697b      	ldr	r3, [r7, #20]
 8014fc8:	2200      	movs	r2, #0
 8014fca:	f042 0208 	orr.w	r2, r2, #8
 8014fce:	709a      	strb	r2, [r3, #2]
 8014fd0:	2200      	movs	r2, #0
 8014fd2:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8014fd4:	697b      	ldr	r3, [r7, #20]
 8014fd6:	2206      	movs	r2, #6
 8014fd8:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8014fda:	697b      	ldr	r3, [r7, #20]
 8014fdc:	2204      	movs	r2, #4
 8014fde:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8014fe0:	f640 0306 	movw	r3, #2054	; 0x806
 8014fe4:	9300      	str	r3, [sp, #0]
 8014fe6:	687b      	ldr	r3, [r7, #4]
 8014fe8:	68ba      	ldr	r2, [r7, #8]
 8014fea:	69b9      	ldr	r1, [r7, #24]
 8014fec:	68f8      	ldr	r0, [r7, #12]
 8014fee:	f001 fb7b 	bl	80166e8 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8014ff2:	69b8      	ldr	r0, [r7, #24]
 8014ff4:	f7f8 f950 	bl	800d298 <pbuf_free>
  p = NULL;
 8014ff8:	2300      	movs	r3, #0
 8014ffa:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8014ffc:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8015000:	4618      	mov	r0, r3
 8015002:	3720      	adds	r7, #32
 8015004:	46bd      	mov	sp, r7
 8015006:	bd80      	pop	{r7, pc}
 8015008:	0801a9fc 	.word	0x0801a9fc
 801500c:	0801ab4c 	.word	0x0801ab4c
 8015010:	0801aa74 	.word	0x0801aa74
 8015014:	0801abfc 	.word	0x0801abfc
 8015018:	0801ac30 	.word	0x0801ac30

0801501c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801501c:	b580      	push	{r7, lr}
 801501e:	b088      	sub	sp, #32
 8015020:	af04      	add	r7, sp, #16
 8015022:	60f8      	str	r0, [r7, #12]
 8015024:	60b9      	str	r1, [r7, #8]
 8015026:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8015028:	68fb      	ldr	r3, [r7, #12]
 801502a:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801502e:	68fb      	ldr	r3, [r7, #12]
 8015030:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8015034:	68fb      	ldr	r3, [r7, #12]
 8015036:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8015038:	2201      	movs	r2, #1
 801503a:	9203      	str	r2, [sp, #12]
 801503c:	68ba      	ldr	r2, [r7, #8]
 801503e:	9202      	str	r2, [sp, #8]
 8015040:	4a06      	ldr	r2, [pc, #24]	; (801505c <etharp_request_dst+0x40>)
 8015042:	9201      	str	r2, [sp, #4]
 8015044:	9300      	str	r3, [sp, #0]
 8015046:	4603      	mov	r3, r0
 8015048:	687a      	ldr	r2, [r7, #4]
 801504a:	68f8      	ldr	r0, [r7, #12]
 801504c:	f7ff ff5a 	bl	8014f04 <etharp_raw>
 8015050:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8015052:	4618      	mov	r0, r3
 8015054:	3710      	adds	r7, #16
 8015056:	46bd      	mov	sp, r7
 8015058:	bd80      	pop	{r7, pc}
 801505a:	bf00      	nop
 801505c:	0801d0f4 	.word	0x0801d0f4

08015060 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8015060:	b580      	push	{r7, lr}
 8015062:	b082      	sub	sp, #8
 8015064:	af00      	add	r7, sp, #0
 8015066:	6078      	str	r0, [r7, #4]
 8015068:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801506a:	4a05      	ldr	r2, [pc, #20]	; (8015080 <etharp_request+0x20>)
 801506c:	6839      	ldr	r1, [r7, #0]
 801506e:	6878      	ldr	r0, [r7, #4]
 8015070:	f7ff ffd4 	bl	801501c <etharp_request_dst>
 8015074:	4603      	mov	r3, r0
}
 8015076:	4618      	mov	r0, r3
 8015078:	3708      	adds	r7, #8
 801507a:	46bd      	mov	sp, r7
 801507c:	bd80      	pop	{r7, pc}
 801507e:	bf00      	nop
 8015080:	0801d0ec 	.word	0x0801d0ec

08015084 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8015084:	b580      	push	{r7, lr}
 8015086:	b08e      	sub	sp, #56	; 0x38
 8015088:	af04      	add	r7, sp, #16
 801508a:	6078      	str	r0, [r7, #4]
 801508c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801508e:	4b79      	ldr	r3, [pc, #484]	; (8015274 <icmp_input+0x1f0>)
 8015090:	689b      	ldr	r3, [r3, #8]
 8015092:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8015094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015096:	781b      	ldrb	r3, [r3, #0]
 8015098:	f003 030f 	and.w	r3, r3, #15
 801509c:	b2db      	uxtb	r3, r3
 801509e:	009b      	lsls	r3, r3, #2
 80150a0:	b2db      	uxtb	r3, r3
 80150a2:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80150a4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80150a6:	2b13      	cmp	r3, #19
 80150a8:	f240 80cd 	bls.w	8015246 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80150ac:	687b      	ldr	r3, [r7, #4]
 80150ae:	895b      	ldrh	r3, [r3, #10]
 80150b0:	2b03      	cmp	r3, #3
 80150b2:	f240 80ca 	bls.w	801524a <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80150b6:	687b      	ldr	r3, [r7, #4]
 80150b8:	685b      	ldr	r3, [r3, #4]
 80150ba:	781b      	ldrb	r3, [r3, #0]
 80150bc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80150c0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80150c4:	2b00      	cmp	r3, #0
 80150c6:	f000 80b7 	beq.w	8015238 <icmp_input+0x1b4>
 80150ca:	2b08      	cmp	r3, #8
 80150cc:	f040 80b7 	bne.w	801523e <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80150d0:	4b69      	ldr	r3, [pc, #420]	; (8015278 <icmp_input+0x1f4>)
 80150d2:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80150d4:	4b67      	ldr	r3, [pc, #412]	; (8015274 <icmp_input+0x1f0>)
 80150d6:	695b      	ldr	r3, [r3, #20]
 80150d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80150dc:	2be0      	cmp	r3, #224	; 0xe0
 80150de:	f000 80bb 	beq.w	8015258 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80150e2:	4b64      	ldr	r3, [pc, #400]	; (8015274 <icmp_input+0x1f0>)
 80150e4:	695b      	ldr	r3, [r3, #20]
 80150e6:	4a63      	ldr	r2, [pc, #396]	; (8015274 <icmp_input+0x1f0>)
 80150e8:	6812      	ldr	r2, [r2, #0]
 80150ea:	4611      	mov	r1, r2
 80150ec:	4618      	mov	r0, r3
 80150ee:	f000 fbed 	bl	80158cc <ip4_addr_isbroadcast_u32>
 80150f2:	4603      	mov	r3, r0
 80150f4:	2b00      	cmp	r3, #0
 80150f6:	f040 80b1 	bne.w	801525c <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80150fa:	687b      	ldr	r3, [r7, #4]
 80150fc:	891b      	ldrh	r3, [r3, #8]
 80150fe:	2b07      	cmp	r3, #7
 8015100:	f240 80a5 	bls.w	801524e <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8015104:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015106:	330e      	adds	r3, #14
 8015108:	4619      	mov	r1, r3
 801510a:	6878      	ldr	r0, [r7, #4]
 801510c:	f7f8 f82e 	bl	800d16c <pbuf_add_header>
 8015110:	4603      	mov	r3, r0
 8015112:	2b00      	cmp	r3, #0
 8015114:	d04b      	beq.n	80151ae <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8015116:	687b      	ldr	r3, [r7, #4]
 8015118:	891a      	ldrh	r2, [r3, #8]
 801511a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801511c:	4413      	add	r3, r2
 801511e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8015120:	687b      	ldr	r3, [r7, #4]
 8015122:	891b      	ldrh	r3, [r3, #8]
 8015124:	8b7a      	ldrh	r2, [r7, #26]
 8015126:	429a      	cmp	r2, r3
 8015128:	f0c0 809a 	bcc.w	8015260 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801512c:	8b7b      	ldrh	r3, [r7, #26]
 801512e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015132:	4619      	mov	r1, r3
 8015134:	200e      	movs	r0, #14
 8015136:	f7f7 fdcb 	bl	800ccd0 <pbuf_alloc>
 801513a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801513c:	697b      	ldr	r3, [r7, #20]
 801513e:	2b00      	cmp	r3, #0
 8015140:	f000 8090 	beq.w	8015264 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8015144:	697b      	ldr	r3, [r7, #20]
 8015146:	895b      	ldrh	r3, [r3, #10]
 8015148:	461a      	mov	r2, r3
 801514a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801514c:	3308      	adds	r3, #8
 801514e:	429a      	cmp	r2, r3
 8015150:	d203      	bcs.n	801515a <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8015152:	6978      	ldr	r0, [r7, #20]
 8015154:	f7f8 f8a0 	bl	800d298 <pbuf_free>
          goto icmperr;
 8015158:	e085      	b.n	8015266 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801515a:	697b      	ldr	r3, [r7, #20]
 801515c:	685b      	ldr	r3, [r3, #4]
 801515e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8015160:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015162:	4618      	mov	r0, r3
 8015164:	f001 fb3c 	bl	80167e0 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8015168:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801516a:	4619      	mov	r1, r3
 801516c:	6978      	ldr	r0, [r7, #20]
 801516e:	f7f8 f80d 	bl	800d18c <pbuf_remove_header>
 8015172:	4603      	mov	r3, r0
 8015174:	2b00      	cmp	r3, #0
 8015176:	d009      	beq.n	801518c <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8015178:	4b40      	ldr	r3, [pc, #256]	; (801527c <icmp_input+0x1f8>)
 801517a:	22b6      	movs	r2, #182	; 0xb6
 801517c:	4940      	ldr	r1, [pc, #256]	; (8015280 <icmp_input+0x1fc>)
 801517e:	4841      	ldr	r0, [pc, #260]	; (8015284 <icmp_input+0x200>)
 8015180:	f001 fb5e 	bl	8016840 <iprintf>
          pbuf_free(r);
 8015184:	6978      	ldr	r0, [r7, #20]
 8015186:	f7f8 f887 	bl	800d298 <pbuf_free>
          goto icmperr;
 801518a:	e06c      	b.n	8015266 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801518c:	6879      	ldr	r1, [r7, #4]
 801518e:	6978      	ldr	r0, [r7, #20]
 8015190:	f7f8 f99a 	bl	800d4c8 <pbuf_copy>
 8015194:	4603      	mov	r3, r0
 8015196:	2b00      	cmp	r3, #0
 8015198:	d003      	beq.n	80151a2 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801519a:	6978      	ldr	r0, [r7, #20]
 801519c:	f7f8 f87c 	bl	800d298 <pbuf_free>
          goto icmperr;
 80151a0:	e061      	b.n	8015266 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 80151a2:	6878      	ldr	r0, [r7, #4]
 80151a4:	f7f8 f878 	bl	800d298 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80151a8:	697b      	ldr	r3, [r7, #20]
 80151aa:	607b      	str	r3, [r7, #4]
 80151ac:	e00f      	b.n	80151ce <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80151ae:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80151b0:	330e      	adds	r3, #14
 80151b2:	4619      	mov	r1, r3
 80151b4:	6878      	ldr	r0, [r7, #4]
 80151b6:	f7f7 ffe9 	bl	800d18c <pbuf_remove_header>
 80151ba:	4603      	mov	r3, r0
 80151bc:	2b00      	cmp	r3, #0
 80151be:	d006      	beq.n	80151ce <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80151c0:	4b2e      	ldr	r3, [pc, #184]	; (801527c <icmp_input+0x1f8>)
 80151c2:	22c7      	movs	r2, #199	; 0xc7
 80151c4:	4930      	ldr	r1, [pc, #192]	; (8015288 <icmp_input+0x204>)
 80151c6:	482f      	ldr	r0, [pc, #188]	; (8015284 <icmp_input+0x200>)
 80151c8:	f001 fb3a 	bl	8016840 <iprintf>
          goto icmperr;
 80151cc:	e04b      	b.n	8015266 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80151ce:	687b      	ldr	r3, [r7, #4]
 80151d0:	685b      	ldr	r3, [r3, #4]
 80151d2:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80151d4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80151d6:	4619      	mov	r1, r3
 80151d8:	6878      	ldr	r0, [r7, #4]
 80151da:	f7f7 ffc7 	bl	800d16c <pbuf_add_header>
 80151de:	4603      	mov	r3, r0
 80151e0:	2b00      	cmp	r3, #0
 80151e2:	d12b      	bne.n	801523c <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80151e4:	687b      	ldr	r3, [r7, #4]
 80151e6:	685b      	ldr	r3, [r3, #4]
 80151e8:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80151ea:	69fb      	ldr	r3, [r7, #28]
 80151ec:	681a      	ldr	r2, [r3, #0]
 80151ee:	68fb      	ldr	r3, [r7, #12]
 80151f0:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80151f2:	4b20      	ldr	r3, [pc, #128]	; (8015274 <icmp_input+0x1f0>)
 80151f4:	691a      	ldr	r2, [r3, #16]
 80151f6:	68fb      	ldr	r3, [r7, #12]
 80151f8:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80151fa:	693b      	ldr	r3, [r7, #16]
 80151fc:	2200      	movs	r2, #0
 80151fe:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8015200:	693b      	ldr	r3, [r7, #16]
 8015202:	2200      	movs	r2, #0
 8015204:	709a      	strb	r2, [r3, #2]
 8015206:	2200      	movs	r2, #0
 8015208:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801520a:	68fb      	ldr	r3, [r7, #12]
 801520c:	22ff      	movs	r2, #255	; 0xff
 801520e:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8015210:	68fb      	ldr	r3, [r7, #12]
 8015212:	2200      	movs	r2, #0
 8015214:	729a      	strb	r2, [r3, #10]
 8015216:	2200      	movs	r2, #0
 8015218:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801521a:	683b      	ldr	r3, [r7, #0]
 801521c:	9302      	str	r3, [sp, #8]
 801521e:	2301      	movs	r3, #1
 8015220:	9301      	str	r3, [sp, #4]
 8015222:	2300      	movs	r3, #0
 8015224:	9300      	str	r3, [sp, #0]
 8015226:	23ff      	movs	r3, #255	; 0xff
 8015228:	2200      	movs	r2, #0
 801522a:	69f9      	ldr	r1, [r7, #28]
 801522c:	6878      	ldr	r0, [r7, #4]
 801522e:	f000 fa75 	bl	801571c <ip4_output_if>
 8015232:	4603      	mov	r3, r0
 8015234:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8015236:	e001      	b.n	801523c <icmp_input+0x1b8>
      break;
 8015238:	bf00      	nop
 801523a:	e000      	b.n	801523e <icmp_input+0x1ba>
      break;
 801523c:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801523e:	6878      	ldr	r0, [r7, #4]
 8015240:	f7f8 f82a 	bl	800d298 <pbuf_free>
  return;
 8015244:	e013      	b.n	801526e <icmp_input+0x1ea>
    goto lenerr;
 8015246:	bf00      	nop
 8015248:	e002      	b.n	8015250 <icmp_input+0x1cc>
    goto lenerr;
 801524a:	bf00      	nop
 801524c:	e000      	b.n	8015250 <icmp_input+0x1cc>
        goto lenerr;
 801524e:	bf00      	nop
lenerr:
  pbuf_free(p);
 8015250:	6878      	ldr	r0, [r7, #4]
 8015252:	f7f8 f821 	bl	800d298 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8015256:	e00a      	b.n	801526e <icmp_input+0x1ea>
        goto icmperr;
 8015258:	bf00      	nop
 801525a:	e004      	b.n	8015266 <icmp_input+0x1e2>
        goto icmperr;
 801525c:	bf00      	nop
 801525e:	e002      	b.n	8015266 <icmp_input+0x1e2>
          goto icmperr;
 8015260:	bf00      	nop
 8015262:	e000      	b.n	8015266 <icmp_input+0x1e2>
          goto icmperr;
 8015264:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8015266:	6878      	ldr	r0, [r7, #4]
 8015268:	f7f8 f816 	bl	800d298 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801526c:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801526e:	3728      	adds	r7, #40	; 0x28
 8015270:	46bd      	mov	sp, r7
 8015272:	bd80      	pop	{r7, pc}
 8015274:	20005638 	.word	0x20005638
 8015278:	2000564c 	.word	0x2000564c
 801527c:	0801ac74 	.word	0x0801ac74
 8015280:	0801acac 	.word	0x0801acac
 8015284:	0801ace4 	.word	0x0801ace4
 8015288:	0801ad0c 	.word	0x0801ad0c

0801528c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801528c:	b580      	push	{r7, lr}
 801528e:	b082      	sub	sp, #8
 8015290:	af00      	add	r7, sp, #0
 8015292:	6078      	str	r0, [r7, #4]
 8015294:	460b      	mov	r3, r1
 8015296:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8015298:	78fb      	ldrb	r3, [r7, #3]
 801529a:	461a      	mov	r2, r3
 801529c:	2103      	movs	r1, #3
 801529e:	6878      	ldr	r0, [r7, #4]
 80152a0:	f000 f814 	bl	80152cc <icmp_send_response>
}
 80152a4:	bf00      	nop
 80152a6:	3708      	adds	r7, #8
 80152a8:	46bd      	mov	sp, r7
 80152aa:	bd80      	pop	{r7, pc}

080152ac <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80152ac:	b580      	push	{r7, lr}
 80152ae:	b082      	sub	sp, #8
 80152b0:	af00      	add	r7, sp, #0
 80152b2:	6078      	str	r0, [r7, #4]
 80152b4:	460b      	mov	r3, r1
 80152b6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80152b8:	78fb      	ldrb	r3, [r7, #3]
 80152ba:	461a      	mov	r2, r3
 80152bc:	210b      	movs	r1, #11
 80152be:	6878      	ldr	r0, [r7, #4]
 80152c0:	f000 f804 	bl	80152cc <icmp_send_response>
}
 80152c4:	bf00      	nop
 80152c6:	3708      	adds	r7, #8
 80152c8:	46bd      	mov	sp, r7
 80152ca:	bd80      	pop	{r7, pc}

080152cc <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80152cc:	b580      	push	{r7, lr}
 80152ce:	b08c      	sub	sp, #48	; 0x30
 80152d0:	af04      	add	r7, sp, #16
 80152d2:	6078      	str	r0, [r7, #4]
 80152d4:	460b      	mov	r3, r1
 80152d6:	70fb      	strb	r3, [r7, #3]
 80152d8:	4613      	mov	r3, r2
 80152da:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80152dc:	f44f 7220 	mov.w	r2, #640	; 0x280
 80152e0:	2124      	movs	r1, #36	; 0x24
 80152e2:	2022      	movs	r0, #34	; 0x22
 80152e4:	f7f7 fcf4 	bl	800ccd0 <pbuf_alloc>
 80152e8:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80152ea:	69fb      	ldr	r3, [r7, #28]
 80152ec:	2b00      	cmp	r3, #0
 80152ee:	d04c      	beq.n	801538a <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80152f0:	69fb      	ldr	r3, [r7, #28]
 80152f2:	895b      	ldrh	r3, [r3, #10]
 80152f4:	2b23      	cmp	r3, #35	; 0x23
 80152f6:	d806      	bhi.n	8015306 <icmp_send_response+0x3a>
 80152f8:	4b26      	ldr	r3, [pc, #152]	; (8015394 <icmp_send_response+0xc8>)
 80152fa:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80152fe:	4926      	ldr	r1, [pc, #152]	; (8015398 <icmp_send_response+0xcc>)
 8015300:	4826      	ldr	r0, [pc, #152]	; (801539c <icmp_send_response+0xd0>)
 8015302:	f001 fa9d 	bl	8016840 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8015306:	687b      	ldr	r3, [r7, #4]
 8015308:	685b      	ldr	r3, [r3, #4]
 801530a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801530c:	69fb      	ldr	r3, [r7, #28]
 801530e:	685b      	ldr	r3, [r3, #4]
 8015310:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8015312:	697b      	ldr	r3, [r7, #20]
 8015314:	78fa      	ldrb	r2, [r7, #3]
 8015316:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8015318:	697b      	ldr	r3, [r7, #20]
 801531a:	78ba      	ldrb	r2, [r7, #2]
 801531c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801531e:	697b      	ldr	r3, [r7, #20]
 8015320:	2200      	movs	r2, #0
 8015322:	711a      	strb	r2, [r3, #4]
 8015324:	2200      	movs	r2, #0
 8015326:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8015328:	697b      	ldr	r3, [r7, #20]
 801532a:	2200      	movs	r2, #0
 801532c:	719a      	strb	r2, [r3, #6]
 801532e:	2200      	movs	r2, #0
 8015330:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8015332:	69fb      	ldr	r3, [r7, #28]
 8015334:	685b      	ldr	r3, [r3, #4]
 8015336:	f103 0008 	add.w	r0, r3, #8
 801533a:	687b      	ldr	r3, [r7, #4]
 801533c:	685b      	ldr	r3, [r3, #4]
 801533e:	221c      	movs	r2, #28
 8015340:	4619      	mov	r1, r3
 8015342:	f001 fa4d 	bl	80167e0 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8015346:	69bb      	ldr	r3, [r7, #24]
 8015348:	68db      	ldr	r3, [r3, #12]
 801534a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801534c:	f107 030c 	add.w	r3, r7, #12
 8015350:	4618      	mov	r0, r3
 8015352:	f000 f825 	bl	80153a0 <ip4_route>
 8015356:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8015358:	693b      	ldr	r3, [r7, #16]
 801535a:	2b00      	cmp	r3, #0
 801535c:	d011      	beq.n	8015382 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801535e:	697b      	ldr	r3, [r7, #20]
 8015360:	2200      	movs	r2, #0
 8015362:	709a      	strb	r2, [r3, #2]
 8015364:	2200      	movs	r2, #0
 8015366:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8015368:	f107 020c 	add.w	r2, r7, #12
 801536c:	693b      	ldr	r3, [r7, #16]
 801536e:	9302      	str	r3, [sp, #8]
 8015370:	2301      	movs	r3, #1
 8015372:	9301      	str	r3, [sp, #4]
 8015374:	2300      	movs	r3, #0
 8015376:	9300      	str	r3, [sp, #0]
 8015378:	23ff      	movs	r3, #255	; 0xff
 801537a:	2100      	movs	r1, #0
 801537c:	69f8      	ldr	r0, [r7, #28]
 801537e:	f000 f9cd 	bl	801571c <ip4_output_if>
  }
  pbuf_free(q);
 8015382:	69f8      	ldr	r0, [r7, #28]
 8015384:	f7f7 ff88 	bl	800d298 <pbuf_free>
 8015388:	e000      	b.n	801538c <icmp_send_response+0xc0>
    return;
 801538a:	bf00      	nop
}
 801538c:	3720      	adds	r7, #32
 801538e:	46bd      	mov	sp, r7
 8015390:	bd80      	pop	{r7, pc}
 8015392:	bf00      	nop
 8015394:	0801ac74 	.word	0x0801ac74
 8015398:	0801ad40 	.word	0x0801ad40
 801539c:	0801ace4 	.word	0x0801ace4

080153a0 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80153a0:	b480      	push	{r7}
 80153a2:	b085      	sub	sp, #20
 80153a4:	af00      	add	r7, sp, #0
 80153a6:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80153a8:	4b33      	ldr	r3, [pc, #204]	; (8015478 <ip4_route+0xd8>)
 80153aa:	681b      	ldr	r3, [r3, #0]
 80153ac:	60fb      	str	r3, [r7, #12]
 80153ae:	e036      	b.n	801541e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80153b0:	68fb      	ldr	r3, [r7, #12]
 80153b2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80153b6:	f003 0301 	and.w	r3, r3, #1
 80153ba:	b2db      	uxtb	r3, r3
 80153bc:	2b00      	cmp	r3, #0
 80153be:	d02b      	beq.n	8015418 <ip4_route+0x78>
 80153c0:	68fb      	ldr	r3, [r7, #12]
 80153c2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80153c6:	089b      	lsrs	r3, r3, #2
 80153c8:	f003 0301 	and.w	r3, r3, #1
 80153cc:	b2db      	uxtb	r3, r3
 80153ce:	2b00      	cmp	r3, #0
 80153d0:	d022      	beq.n	8015418 <ip4_route+0x78>
 80153d2:	68fb      	ldr	r3, [r7, #12]
 80153d4:	3304      	adds	r3, #4
 80153d6:	681b      	ldr	r3, [r3, #0]
 80153d8:	2b00      	cmp	r3, #0
 80153da:	d01d      	beq.n	8015418 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80153dc:	687b      	ldr	r3, [r7, #4]
 80153de:	681a      	ldr	r2, [r3, #0]
 80153e0:	68fb      	ldr	r3, [r7, #12]
 80153e2:	3304      	adds	r3, #4
 80153e4:	681b      	ldr	r3, [r3, #0]
 80153e6:	405a      	eors	r2, r3
 80153e8:	68fb      	ldr	r3, [r7, #12]
 80153ea:	3308      	adds	r3, #8
 80153ec:	681b      	ldr	r3, [r3, #0]
 80153ee:	4013      	ands	r3, r2
 80153f0:	2b00      	cmp	r3, #0
 80153f2:	d101      	bne.n	80153f8 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80153f4:	68fb      	ldr	r3, [r7, #12]
 80153f6:	e038      	b.n	801546a <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80153f8:	68fb      	ldr	r3, [r7, #12]
 80153fa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80153fe:	f003 0302 	and.w	r3, r3, #2
 8015402:	2b00      	cmp	r3, #0
 8015404:	d108      	bne.n	8015418 <ip4_route+0x78>
 8015406:	687b      	ldr	r3, [r7, #4]
 8015408:	681a      	ldr	r2, [r3, #0]
 801540a:	68fb      	ldr	r3, [r7, #12]
 801540c:	330c      	adds	r3, #12
 801540e:	681b      	ldr	r3, [r3, #0]
 8015410:	429a      	cmp	r2, r3
 8015412:	d101      	bne.n	8015418 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8015414:	68fb      	ldr	r3, [r7, #12]
 8015416:	e028      	b.n	801546a <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8015418:	68fb      	ldr	r3, [r7, #12]
 801541a:	681b      	ldr	r3, [r3, #0]
 801541c:	60fb      	str	r3, [r7, #12]
 801541e:	68fb      	ldr	r3, [r7, #12]
 8015420:	2b00      	cmp	r3, #0
 8015422:	d1c5      	bne.n	80153b0 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8015424:	4b15      	ldr	r3, [pc, #84]	; (801547c <ip4_route+0xdc>)
 8015426:	681b      	ldr	r3, [r3, #0]
 8015428:	2b00      	cmp	r3, #0
 801542a:	d01a      	beq.n	8015462 <ip4_route+0xc2>
 801542c:	4b13      	ldr	r3, [pc, #76]	; (801547c <ip4_route+0xdc>)
 801542e:	681b      	ldr	r3, [r3, #0]
 8015430:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015434:	f003 0301 	and.w	r3, r3, #1
 8015438:	2b00      	cmp	r3, #0
 801543a:	d012      	beq.n	8015462 <ip4_route+0xc2>
 801543c:	4b0f      	ldr	r3, [pc, #60]	; (801547c <ip4_route+0xdc>)
 801543e:	681b      	ldr	r3, [r3, #0]
 8015440:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015444:	f003 0304 	and.w	r3, r3, #4
 8015448:	2b00      	cmp	r3, #0
 801544a:	d00a      	beq.n	8015462 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801544c:	4b0b      	ldr	r3, [pc, #44]	; (801547c <ip4_route+0xdc>)
 801544e:	681b      	ldr	r3, [r3, #0]
 8015450:	3304      	adds	r3, #4
 8015452:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8015454:	2b00      	cmp	r3, #0
 8015456:	d004      	beq.n	8015462 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8015458:	687b      	ldr	r3, [r7, #4]
 801545a:	681b      	ldr	r3, [r3, #0]
 801545c:	b2db      	uxtb	r3, r3
 801545e:	2b7f      	cmp	r3, #127	; 0x7f
 8015460:	d101      	bne.n	8015466 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8015462:	2300      	movs	r3, #0
 8015464:	e001      	b.n	801546a <ip4_route+0xca>
  }

  return netif_default;
 8015466:	4b05      	ldr	r3, [pc, #20]	; (801547c <ip4_route+0xdc>)
 8015468:	681b      	ldr	r3, [r3, #0]
}
 801546a:	4618      	mov	r0, r3
 801546c:	3714      	adds	r7, #20
 801546e:	46bd      	mov	sp, r7
 8015470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015474:	4770      	bx	lr
 8015476:	bf00      	nop
 8015478:	20008b9c 	.word	0x20008b9c
 801547c:	20008ba0 	.word	0x20008ba0

08015480 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8015480:	b580      	push	{r7, lr}
 8015482:	b082      	sub	sp, #8
 8015484:	af00      	add	r7, sp, #0
 8015486:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8015488:	687b      	ldr	r3, [r7, #4]
 801548a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801548e:	f003 0301 	and.w	r3, r3, #1
 8015492:	b2db      	uxtb	r3, r3
 8015494:	2b00      	cmp	r3, #0
 8015496:	d016      	beq.n	80154c6 <ip4_input_accept+0x46>
 8015498:	687b      	ldr	r3, [r7, #4]
 801549a:	3304      	adds	r3, #4
 801549c:	681b      	ldr	r3, [r3, #0]
 801549e:	2b00      	cmp	r3, #0
 80154a0:	d011      	beq.n	80154c6 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80154a2:	4b0b      	ldr	r3, [pc, #44]	; (80154d0 <ip4_input_accept+0x50>)
 80154a4:	695a      	ldr	r2, [r3, #20]
 80154a6:	687b      	ldr	r3, [r7, #4]
 80154a8:	3304      	adds	r3, #4
 80154aa:	681b      	ldr	r3, [r3, #0]
 80154ac:	429a      	cmp	r2, r3
 80154ae:	d008      	beq.n	80154c2 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80154b0:	4b07      	ldr	r3, [pc, #28]	; (80154d0 <ip4_input_accept+0x50>)
 80154b2:	695b      	ldr	r3, [r3, #20]
 80154b4:	6879      	ldr	r1, [r7, #4]
 80154b6:	4618      	mov	r0, r3
 80154b8:	f000 fa08 	bl	80158cc <ip4_addr_isbroadcast_u32>
 80154bc:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80154be:	2b00      	cmp	r3, #0
 80154c0:	d001      	beq.n	80154c6 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 80154c2:	2301      	movs	r3, #1
 80154c4:	e000      	b.n	80154c8 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 80154c6:	2300      	movs	r3, #0
}
 80154c8:	4618      	mov	r0, r3
 80154ca:	3708      	adds	r7, #8
 80154cc:	46bd      	mov	sp, r7
 80154ce:	bd80      	pop	{r7, pc}
 80154d0:	20005638 	.word	0x20005638

080154d4 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80154d4:	b580      	push	{r7, lr}
 80154d6:	b086      	sub	sp, #24
 80154d8:	af00      	add	r7, sp, #0
 80154da:	6078      	str	r0, [r7, #4]
 80154dc:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80154de:	687b      	ldr	r3, [r7, #4]
 80154e0:	685b      	ldr	r3, [r3, #4]
 80154e2:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 80154e4:	697b      	ldr	r3, [r7, #20]
 80154e6:	781b      	ldrb	r3, [r3, #0]
 80154e8:	091b      	lsrs	r3, r3, #4
 80154ea:	b2db      	uxtb	r3, r3
 80154ec:	2b04      	cmp	r3, #4
 80154ee:	d004      	beq.n	80154fa <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80154f0:	6878      	ldr	r0, [r7, #4]
 80154f2:	f7f7 fed1 	bl	800d298 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80154f6:	2300      	movs	r3, #0
 80154f8:	e107      	b.n	801570a <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80154fa:	697b      	ldr	r3, [r7, #20]
 80154fc:	781b      	ldrb	r3, [r3, #0]
 80154fe:	f003 030f 	and.w	r3, r3, #15
 8015502:	b2db      	uxtb	r3, r3
 8015504:	009b      	lsls	r3, r3, #2
 8015506:	b2db      	uxtb	r3, r3
 8015508:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801550a:	697b      	ldr	r3, [r7, #20]
 801550c:	885b      	ldrh	r3, [r3, #2]
 801550e:	b29b      	uxth	r3, r3
 8015510:	4618      	mov	r0, r3
 8015512:	f7f6 fb3b 	bl	800bb8c <lwip_htons>
 8015516:	4603      	mov	r3, r0
 8015518:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801551a:	687b      	ldr	r3, [r7, #4]
 801551c:	891b      	ldrh	r3, [r3, #8]
 801551e:	89ba      	ldrh	r2, [r7, #12]
 8015520:	429a      	cmp	r2, r3
 8015522:	d204      	bcs.n	801552e <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8015524:	89bb      	ldrh	r3, [r7, #12]
 8015526:	4619      	mov	r1, r3
 8015528:	6878      	ldr	r0, [r7, #4]
 801552a:	f7f7 fd2f 	bl	800cf8c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801552e:	687b      	ldr	r3, [r7, #4]
 8015530:	895b      	ldrh	r3, [r3, #10]
 8015532:	89fa      	ldrh	r2, [r7, #14]
 8015534:	429a      	cmp	r2, r3
 8015536:	d807      	bhi.n	8015548 <ip4_input+0x74>
 8015538:	687b      	ldr	r3, [r7, #4]
 801553a:	891b      	ldrh	r3, [r3, #8]
 801553c:	89ba      	ldrh	r2, [r7, #12]
 801553e:	429a      	cmp	r2, r3
 8015540:	d802      	bhi.n	8015548 <ip4_input+0x74>
 8015542:	89fb      	ldrh	r3, [r7, #14]
 8015544:	2b13      	cmp	r3, #19
 8015546:	d804      	bhi.n	8015552 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8015548:	6878      	ldr	r0, [r7, #4]
 801554a:	f7f7 fea5 	bl	800d298 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801554e:	2300      	movs	r3, #0
 8015550:	e0db      	b.n	801570a <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8015552:	697b      	ldr	r3, [r7, #20]
 8015554:	691b      	ldr	r3, [r3, #16]
 8015556:	4a6f      	ldr	r2, [pc, #444]	; (8015714 <ip4_input+0x240>)
 8015558:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801555a:	697b      	ldr	r3, [r7, #20]
 801555c:	68db      	ldr	r3, [r3, #12]
 801555e:	4a6d      	ldr	r2, [pc, #436]	; (8015714 <ip4_input+0x240>)
 8015560:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015562:	4b6c      	ldr	r3, [pc, #432]	; (8015714 <ip4_input+0x240>)
 8015564:	695b      	ldr	r3, [r3, #20]
 8015566:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801556a:	2be0      	cmp	r3, #224	; 0xe0
 801556c:	d112      	bne.n	8015594 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801556e:	683b      	ldr	r3, [r7, #0]
 8015570:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015574:	f003 0301 	and.w	r3, r3, #1
 8015578:	b2db      	uxtb	r3, r3
 801557a:	2b00      	cmp	r3, #0
 801557c:	d007      	beq.n	801558e <ip4_input+0xba>
 801557e:	683b      	ldr	r3, [r7, #0]
 8015580:	3304      	adds	r3, #4
 8015582:	681b      	ldr	r3, [r3, #0]
 8015584:	2b00      	cmp	r3, #0
 8015586:	d002      	beq.n	801558e <ip4_input+0xba>
      netif = inp;
 8015588:	683b      	ldr	r3, [r7, #0]
 801558a:	613b      	str	r3, [r7, #16]
 801558c:	e02a      	b.n	80155e4 <ip4_input+0x110>
    } else {
      netif = NULL;
 801558e:	2300      	movs	r3, #0
 8015590:	613b      	str	r3, [r7, #16]
 8015592:	e027      	b.n	80155e4 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8015594:	6838      	ldr	r0, [r7, #0]
 8015596:	f7ff ff73 	bl	8015480 <ip4_input_accept>
 801559a:	4603      	mov	r3, r0
 801559c:	2b00      	cmp	r3, #0
 801559e:	d002      	beq.n	80155a6 <ip4_input+0xd2>
      netif = inp;
 80155a0:	683b      	ldr	r3, [r7, #0]
 80155a2:	613b      	str	r3, [r7, #16]
 80155a4:	e01e      	b.n	80155e4 <ip4_input+0x110>
    } else {
      netif = NULL;
 80155a6:	2300      	movs	r3, #0
 80155a8:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80155aa:	4b5a      	ldr	r3, [pc, #360]	; (8015714 <ip4_input+0x240>)
 80155ac:	695b      	ldr	r3, [r3, #20]
 80155ae:	b2db      	uxtb	r3, r3
 80155b0:	2b7f      	cmp	r3, #127	; 0x7f
 80155b2:	d017      	beq.n	80155e4 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80155b4:	4b58      	ldr	r3, [pc, #352]	; (8015718 <ip4_input+0x244>)
 80155b6:	681b      	ldr	r3, [r3, #0]
 80155b8:	613b      	str	r3, [r7, #16]
 80155ba:	e00e      	b.n	80155da <ip4_input+0x106>
          if (netif == inp) {
 80155bc:	693a      	ldr	r2, [r7, #16]
 80155be:	683b      	ldr	r3, [r7, #0]
 80155c0:	429a      	cmp	r2, r3
 80155c2:	d006      	beq.n	80155d2 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 80155c4:	6938      	ldr	r0, [r7, #16]
 80155c6:	f7ff ff5b 	bl	8015480 <ip4_input_accept>
 80155ca:	4603      	mov	r3, r0
 80155cc:	2b00      	cmp	r3, #0
 80155ce:	d108      	bne.n	80155e2 <ip4_input+0x10e>
 80155d0:	e000      	b.n	80155d4 <ip4_input+0x100>
            continue;
 80155d2:	bf00      	nop
        NETIF_FOREACH(netif) {
 80155d4:	693b      	ldr	r3, [r7, #16]
 80155d6:	681b      	ldr	r3, [r3, #0]
 80155d8:	613b      	str	r3, [r7, #16]
 80155da:	693b      	ldr	r3, [r7, #16]
 80155dc:	2b00      	cmp	r3, #0
 80155de:	d1ed      	bne.n	80155bc <ip4_input+0xe8>
 80155e0:	e000      	b.n	80155e4 <ip4_input+0x110>
            break;
 80155e2:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80155e4:	4b4b      	ldr	r3, [pc, #300]	; (8015714 <ip4_input+0x240>)
 80155e6:	691b      	ldr	r3, [r3, #16]
 80155e8:	6839      	ldr	r1, [r7, #0]
 80155ea:	4618      	mov	r0, r3
 80155ec:	f000 f96e 	bl	80158cc <ip4_addr_isbroadcast_u32>
 80155f0:	4603      	mov	r3, r0
 80155f2:	2b00      	cmp	r3, #0
 80155f4:	d105      	bne.n	8015602 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80155f6:	4b47      	ldr	r3, [pc, #284]	; (8015714 <ip4_input+0x240>)
 80155f8:	691b      	ldr	r3, [r3, #16]
 80155fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80155fe:	2be0      	cmp	r3, #224	; 0xe0
 8015600:	d104      	bne.n	801560c <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8015602:	6878      	ldr	r0, [r7, #4]
 8015604:	f7f7 fe48 	bl	800d298 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8015608:	2300      	movs	r3, #0
 801560a:	e07e      	b.n	801570a <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801560c:	693b      	ldr	r3, [r7, #16]
 801560e:	2b00      	cmp	r3, #0
 8015610:	d104      	bne.n	801561c <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8015612:	6878      	ldr	r0, [r7, #4]
 8015614:	f7f7 fe40 	bl	800d298 <pbuf_free>
    return ERR_OK;
 8015618:	2300      	movs	r3, #0
 801561a:	e076      	b.n	801570a <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801561c:	697b      	ldr	r3, [r7, #20]
 801561e:	88db      	ldrh	r3, [r3, #6]
 8015620:	b29b      	uxth	r3, r3
 8015622:	461a      	mov	r2, r3
 8015624:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8015628:	4013      	ands	r3, r2
 801562a:	2b00      	cmp	r3, #0
 801562c:	d00b      	beq.n	8015646 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801562e:	6878      	ldr	r0, [r7, #4]
 8015630:	f000 fc92 	bl	8015f58 <ip4_reass>
 8015634:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8015636:	687b      	ldr	r3, [r7, #4]
 8015638:	2b00      	cmp	r3, #0
 801563a:	d101      	bne.n	8015640 <ip4_input+0x16c>
      return ERR_OK;
 801563c:	2300      	movs	r3, #0
 801563e:	e064      	b.n	801570a <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8015640:	687b      	ldr	r3, [r7, #4]
 8015642:	685b      	ldr	r3, [r3, #4]
 8015644:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8015646:	4a33      	ldr	r2, [pc, #204]	; (8015714 <ip4_input+0x240>)
 8015648:	693b      	ldr	r3, [r7, #16]
 801564a:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801564c:	4a31      	ldr	r2, [pc, #196]	; (8015714 <ip4_input+0x240>)
 801564e:	683b      	ldr	r3, [r7, #0]
 8015650:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8015652:	4a30      	ldr	r2, [pc, #192]	; (8015714 <ip4_input+0x240>)
 8015654:	697b      	ldr	r3, [r7, #20]
 8015656:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8015658:	697b      	ldr	r3, [r7, #20]
 801565a:	781b      	ldrb	r3, [r3, #0]
 801565c:	f003 030f 	and.w	r3, r3, #15
 8015660:	b2db      	uxtb	r3, r3
 8015662:	009b      	lsls	r3, r3, #2
 8015664:	b2db      	uxtb	r3, r3
 8015666:	b29a      	uxth	r2, r3
 8015668:	4b2a      	ldr	r3, [pc, #168]	; (8015714 <ip4_input+0x240>)
 801566a:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801566c:	89fb      	ldrh	r3, [r7, #14]
 801566e:	4619      	mov	r1, r3
 8015670:	6878      	ldr	r0, [r7, #4]
 8015672:	f7f7 fd8b 	bl	800d18c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8015676:	697b      	ldr	r3, [r7, #20]
 8015678:	7a5b      	ldrb	r3, [r3, #9]
 801567a:	2b11      	cmp	r3, #17
 801567c:	d006      	beq.n	801568c <ip4_input+0x1b8>
 801567e:	2b11      	cmp	r3, #17
 8015680:	dc13      	bgt.n	80156aa <ip4_input+0x1d6>
 8015682:	2b01      	cmp	r3, #1
 8015684:	d00c      	beq.n	80156a0 <ip4_input+0x1cc>
 8015686:	2b06      	cmp	r3, #6
 8015688:	d005      	beq.n	8015696 <ip4_input+0x1c2>
 801568a:	e00e      	b.n	80156aa <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801568c:	6839      	ldr	r1, [r7, #0]
 801568e:	6878      	ldr	r0, [r7, #4]
 8015690:	f7fe fc68 	bl	8013f64 <udp_input>
        break;
 8015694:	e026      	b.n	80156e4 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8015696:	6839      	ldr	r1, [r7, #0]
 8015698:	6878      	ldr	r0, [r7, #4]
 801569a:	f7fa f84f 	bl	800f73c <tcp_input>
        break;
 801569e:	e021      	b.n	80156e4 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80156a0:	6839      	ldr	r1, [r7, #0]
 80156a2:	6878      	ldr	r0, [r7, #4]
 80156a4:	f7ff fcee 	bl	8015084 <icmp_input>
        break;
 80156a8:	e01c      	b.n	80156e4 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80156aa:	4b1a      	ldr	r3, [pc, #104]	; (8015714 <ip4_input+0x240>)
 80156ac:	695b      	ldr	r3, [r3, #20]
 80156ae:	6939      	ldr	r1, [r7, #16]
 80156b0:	4618      	mov	r0, r3
 80156b2:	f000 f90b 	bl	80158cc <ip4_addr_isbroadcast_u32>
 80156b6:	4603      	mov	r3, r0
 80156b8:	2b00      	cmp	r3, #0
 80156ba:	d10f      	bne.n	80156dc <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80156bc:	4b15      	ldr	r3, [pc, #84]	; (8015714 <ip4_input+0x240>)
 80156be:	695b      	ldr	r3, [r3, #20]
 80156c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80156c4:	2be0      	cmp	r3, #224	; 0xe0
 80156c6:	d009      	beq.n	80156dc <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80156c8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80156cc:	4619      	mov	r1, r3
 80156ce:	6878      	ldr	r0, [r7, #4]
 80156d0:	f7f7 fdcf 	bl	800d272 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80156d4:	2102      	movs	r1, #2
 80156d6:	6878      	ldr	r0, [r7, #4]
 80156d8:	f7ff fdd8 	bl	801528c <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80156dc:	6878      	ldr	r0, [r7, #4]
 80156de:	f7f7 fddb 	bl	800d298 <pbuf_free>
        break;
 80156e2:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80156e4:	4b0b      	ldr	r3, [pc, #44]	; (8015714 <ip4_input+0x240>)
 80156e6:	2200      	movs	r2, #0
 80156e8:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80156ea:	4b0a      	ldr	r3, [pc, #40]	; (8015714 <ip4_input+0x240>)
 80156ec:	2200      	movs	r2, #0
 80156ee:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80156f0:	4b08      	ldr	r3, [pc, #32]	; (8015714 <ip4_input+0x240>)
 80156f2:	2200      	movs	r2, #0
 80156f4:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80156f6:	4b07      	ldr	r3, [pc, #28]	; (8015714 <ip4_input+0x240>)
 80156f8:	2200      	movs	r2, #0
 80156fa:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80156fc:	4b05      	ldr	r3, [pc, #20]	; (8015714 <ip4_input+0x240>)
 80156fe:	2200      	movs	r2, #0
 8015700:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8015702:	4b04      	ldr	r3, [pc, #16]	; (8015714 <ip4_input+0x240>)
 8015704:	2200      	movs	r2, #0
 8015706:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8015708:	2300      	movs	r3, #0
}
 801570a:	4618      	mov	r0, r3
 801570c:	3718      	adds	r7, #24
 801570e:	46bd      	mov	sp, r7
 8015710:	bd80      	pop	{r7, pc}
 8015712:	bf00      	nop
 8015714:	20005638 	.word	0x20005638
 8015718:	20008b9c 	.word	0x20008b9c

0801571c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801571c:	b580      	push	{r7, lr}
 801571e:	b08a      	sub	sp, #40	; 0x28
 8015720:	af04      	add	r7, sp, #16
 8015722:	60f8      	str	r0, [r7, #12]
 8015724:	60b9      	str	r1, [r7, #8]
 8015726:	607a      	str	r2, [r7, #4]
 8015728:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801572a:	68bb      	ldr	r3, [r7, #8]
 801572c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801572e:	687b      	ldr	r3, [r7, #4]
 8015730:	2b00      	cmp	r3, #0
 8015732:	d009      	beq.n	8015748 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8015734:	68bb      	ldr	r3, [r7, #8]
 8015736:	2b00      	cmp	r3, #0
 8015738:	d003      	beq.n	8015742 <ip4_output_if+0x26>
 801573a:	68bb      	ldr	r3, [r7, #8]
 801573c:	681b      	ldr	r3, [r3, #0]
 801573e:	2b00      	cmp	r3, #0
 8015740:	d102      	bne.n	8015748 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8015742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015744:	3304      	adds	r3, #4
 8015746:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8015748:	78fa      	ldrb	r2, [r7, #3]
 801574a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801574c:	9302      	str	r3, [sp, #8]
 801574e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8015752:	9301      	str	r3, [sp, #4]
 8015754:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015758:	9300      	str	r3, [sp, #0]
 801575a:	4613      	mov	r3, r2
 801575c:	687a      	ldr	r2, [r7, #4]
 801575e:	6979      	ldr	r1, [r7, #20]
 8015760:	68f8      	ldr	r0, [r7, #12]
 8015762:	f000 f805 	bl	8015770 <ip4_output_if_src>
 8015766:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8015768:	4618      	mov	r0, r3
 801576a:	3718      	adds	r7, #24
 801576c:	46bd      	mov	sp, r7
 801576e:	bd80      	pop	{r7, pc}

08015770 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8015770:	b580      	push	{r7, lr}
 8015772:	b088      	sub	sp, #32
 8015774:	af00      	add	r7, sp, #0
 8015776:	60f8      	str	r0, [r7, #12]
 8015778:	60b9      	str	r1, [r7, #8]
 801577a:	607a      	str	r2, [r7, #4]
 801577c:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801577e:	68fb      	ldr	r3, [r7, #12]
 8015780:	7b9b      	ldrb	r3, [r3, #14]
 8015782:	2b01      	cmp	r3, #1
 8015784:	d006      	beq.n	8015794 <ip4_output_if_src+0x24>
 8015786:	4b4b      	ldr	r3, [pc, #300]	; (80158b4 <ip4_output_if_src+0x144>)
 8015788:	f44f 7255 	mov.w	r2, #852	; 0x354
 801578c:	494a      	ldr	r1, [pc, #296]	; (80158b8 <ip4_output_if_src+0x148>)
 801578e:	484b      	ldr	r0, [pc, #300]	; (80158bc <ip4_output_if_src+0x14c>)
 8015790:	f001 f856 	bl	8016840 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8015794:	687b      	ldr	r3, [r7, #4]
 8015796:	2b00      	cmp	r3, #0
 8015798:	d060      	beq.n	801585c <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801579a:	2314      	movs	r3, #20
 801579c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801579e:	2114      	movs	r1, #20
 80157a0:	68f8      	ldr	r0, [r7, #12]
 80157a2:	f7f7 fce3 	bl	800d16c <pbuf_add_header>
 80157a6:	4603      	mov	r3, r0
 80157a8:	2b00      	cmp	r3, #0
 80157aa:	d002      	beq.n	80157b2 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80157ac:	f06f 0301 	mvn.w	r3, #1
 80157b0:	e07c      	b.n	80158ac <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80157b2:	68fb      	ldr	r3, [r7, #12]
 80157b4:	685b      	ldr	r3, [r3, #4]
 80157b6:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80157b8:	68fb      	ldr	r3, [r7, #12]
 80157ba:	895b      	ldrh	r3, [r3, #10]
 80157bc:	2b13      	cmp	r3, #19
 80157be:	d806      	bhi.n	80157ce <ip4_output_if_src+0x5e>
 80157c0:	4b3c      	ldr	r3, [pc, #240]	; (80158b4 <ip4_output_if_src+0x144>)
 80157c2:	f44f 7262 	mov.w	r2, #904	; 0x388
 80157c6:	493e      	ldr	r1, [pc, #248]	; (80158c0 <ip4_output_if_src+0x150>)
 80157c8:	483c      	ldr	r0, [pc, #240]	; (80158bc <ip4_output_if_src+0x14c>)
 80157ca:	f001 f839 	bl	8016840 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80157ce:	69fb      	ldr	r3, [r7, #28]
 80157d0:	78fa      	ldrb	r2, [r7, #3]
 80157d2:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80157d4:	69fb      	ldr	r3, [r7, #28]
 80157d6:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80157da:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80157dc:	687b      	ldr	r3, [r7, #4]
 80157de:	681a      	ldr	r2, [r3, #0]
 80157e0:	69fb      	ldr	r3, [r7, #28]
 80157e2:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80157e4:	8b7b      	ldrh	r3, [r7, #26]
 80157e6:	089b      	lsrs	r3, r3, #2
 80157e8:	b29b      	uxth	r3, r3
 80157ea:	b2db      	uxtb	r3, r3
 80157ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80157f0:	b2da      	uxtb	r2, r3
 80157f2:	69fb      	ldr	r3, [r7, #28]
 80157f4:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80157f6:	69fb      	ldr	r3, [r7, #28]
 80157f8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80157fc:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80157fe:	68fb      	ldr	r3, [r7, #12]
 8015800:	891b      	ldrh	r3, [r3, #8]
 8015802:	4618      	mov	r0, r3
 8015804:	f7f6 f9c2 	bl	800bb8c <lwip_htons>
 8015808:	4603      	mov	r3, r0
 801580a:	461a      	mov	r2, r3
 801580c:	69fb      	ldr	r3, [r7, #28]
 801580e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8015810:	69fb      	ldr	r3, [r7, #28]
 8015812:	2200      	movs	r2, #0
 8015814:	719a      	strb	r2, [r3, #6]
 8015816:	2200      	movs	r2, #0
 8015818:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801581a:	4b2a      	ldr	r3, [pc, #168]	; (80158c4 <ip4_output_if_src+0x154>)
 801581c:	881b      	ldrh	r3, [r3, #0]
 801581e:	4618      	mov	r0, r3
 8015820:	f7f6 f9b4 	bl	800bb8c <lwip_htons>
 8015824:	4603      	mov	r3, r0
 8015826:	461a      	mov	r2, r3
 8015828:	69fb      	ldr	r3, [r7, #28]
 801582a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801582c:	4b25      	ldr	r3, [pc, #148]	; (80158c4 <ip4_output_if_src+0x154>)
 801582e:	881b      	ldrh	r3, [r3, #0]
 8015830:	3301      	adds	r3, #1
 8015832:	b29a      	uxth	r2, r3
 8015834:	4b23      	ldr	r3, [pc, #140]	; (80158c4 <ip4_output_if_src+0x154>)
 8015836:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8015838:	68bb      	ldr	r3, [r7, #8]
 801583a:	2b00      	cmp	r3, #0
 801583c:	d104      	bne.n	8015848 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801583e:	4b22      	ldr	r3, [pc, #136]	; (80158c8 <ip4_output_if_src+0x158>)
 8015840:	681a      	ldr	r2, [r3, #0]
 8015842:	69fb      	ldr	r3, [r7, #28]
 8015844:	60da      	str	r2, [r3, #12]
 8015846:	e003      	b.n	8015850 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8015848:	68bb      	ldr	r3, [r7, #8]
 801584a:	681a      	ldr	r2, [r3, #0]
 801584c:	69fb      	ldr	r3, [r7, #28]
 801584e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8015850:	69fb      	ldr	r3, [r7, #28]
 8015852:	2200      	movs	r2, #0
 8015854:	729a      	strb	r2, [r3, #10]
 8015856:	2200      	movs	r2, #0
 8015858:	72da      	strb	r2, [r3, #11]
 801585a:	e00f      	b.n	801587c <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801585c:	68fb      	ldr	r3, [r7, #12]
 801585e:	895b      	ldrh	r3, [r3, #10]
 8015860:	2b13      	cmp	r3, #19
 8015862:	d802      	bhi.n	801586a <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8015864:	f06f 0301 	mvn.w	r3, #1
 8015868:	e020      	b.n	80158ac <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801586a:	68fb      	ldr	r3, [r7, #12]
 801586c:	685b      	ldr	r3, [r3, #4]
 801586e:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8015870:	69fb      	ldr	r3, [r7, #28]
 8015872:	691b      	ldr	r3, [r3, #16]
 8015874:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8015876:	f107 0314 	add.w	r3, r7, #20
 801587a:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801587c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801587e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8015880:	2b00      	cmp	r3, #0
 8015882:	d00c      	beq.n	801589e <ip4_output_if_src+0x12e>
 8015884:	68fb      	ldr	r3, [r7, #12]
 8015886:	891a      	ldrh	r2, [r3, #8]
 8015888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801588a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801588c:	429a      	cmp	r2, r3
 801588e:	d906      	bls.n	801589e <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8015890:	687a      	ldr	r2, [r7, #4]
 8015892:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8015894:	68f8      	ldr	r0, [r7, #12]
 8015896:	f000 fd53 	bl	8016340 <ip4_frag>
 801589a:	4603      	mov	r3, r0
 801589c:	e006      	b.n	80158ac <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801589e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80158a0:	695b      	ldr	r3, [r3, #20]
 80158a2:	687a      	ldr	r2, [r7, #4]
 80158a4:	68f9      	ldr	r1, [r7, #12]
 80158a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80158a8:	4798      	blx	r3
 80158aa:	4603      	mov	r3, r0
}
 80158ac:	4618      	mov	r0, r3
 80158ae:	3720      	adds	r7, #32
 80158b0:	46bd      	mov	sp, r7
 80158b2:	bd80      	pop	{r7, pc}
 80158b4:	0801ad6c 	.word	0x0801ad6c
 80158b8:	0801ada0 	.word	0x0801ada0
 80158bc:	0801adac 	.word	0x0801adac
 80158c0:	0801add4 	.word	0x0801add4
 80158c4:	20008cfa 	.word	0x20008cfa
 80158c8:	0801d0e8 	.word	0x0801d0e8

080158cc <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80158cc:	b480      	push	{r7}
 80158ce:	b085      	sub	sp, #20
 80158d0:	af00      	add	r7, sp, #0
 80158d2:	6078      	str	r0, [r7, #4]
 80158d4:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80158d6:	687b      	ldr	r3, [r7, #4]
 80158d8:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80158da:	687b      	ldr	r3, [r7, #4]
 80158dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80158e0:	d002      	beq.n	80158e8 <ip4_addr_isbroadcast_u32+0x1c>
 80158e2:	687b      	ldr	r3, [r7, #4]
 80158e4:	2b00      	cmp	r3, #0
 80158e6:	d101      	bne.n	80158ec <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80158e8:	2301      	movs	r3, #1
 80158ea:	e02a      	b.n	8015942 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80158ec:	683b      	ldr	r3, [r7, #0]
 80158ee:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80158f2:	f003 0302 	and.w	r3, r3, #2
 80158f6:	2b00      	cmp	r3, #0
 80158f8:	d101      	bne.n	80158fe <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80158fa:	2300      	movs	r3, #0
 80158fc:	e021      	b.n	8015942 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80158fe:	683b      	ldr	r3, [r7, #0]
 8015900:	3304      	adds	r3, #4
 8015902:	681b      	ldr	r3, [r3, #0]
 8015904:	687a      	ldr	r2, [r7, #4]
 8015906:	429a      	cmp	r2, r3
 8015908:	d101      	bne.n	801590e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801590a:	2300      	movs	r3, #0
 801590c:	e019      	b.n	8015942 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801590e:	68fa      	ldr	r2, [r7, #12]
 8015910:	683b      	ldr	r3, [r7, #0]
 8015912:	3304      	adds	r3, #4
 8015914:	681b      	ldr	r3, [r3, #0]
 8015916:	405a      	eors	r2, r3
 8015918:	683b      	ldr	r3, [r7, #0]
 801591a:	3308      	adds	r3, #8
 801591c:	681b      	ldr	r3, [r3, #0]
 801591e:	4013      	ands	r3, r2
 8015920:	2b00      	cmp	r3, #0
 8015922:	d10d      	bne.n	8015940 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8015924:	683b      	ldr	r3, [r7, #0]
 8015926:	3308      	adds	r3, #8
 8015928:	681b      	ldr	r3, [r3, #0]
 801592a:	43da      	mvns	r2, r3
 801592c:	687b      	ldr	r3, [r7, #4]
 801592e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8015930:	683b      	ldr	r3, [r7, #0]
 8015932:	3308      	adds	r3, #8
 8015934:	681b      	ldr	r3, [r3, #0]
 8015936:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8015938:	429a      	cmp	r2, r3
 801593a:	d101      	bne.n	8015940 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801593c:	2301      	movs	r3, #1
 801593e:	e000      	b.n	8015942 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8015940:	2300      	movs	r3, #0
  }
}
 8015942:	4618      	mov	r0, r3
 8015944:	3714      	adds	r7, #20
 8015946:	46bd      	mov	sp, r7
 8015948:	f85d 7b04 	ldr.w	r7, [sp], #4
 801594c:	4770      	bx	lr
	...

08015950 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8015950:	b580      	push	{r7, lr}
 8015952:	b084      	sub	sp, #16
 8015954:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8015956:	2300      	movs	r3, #0
 8015958:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801595a:	4b12      	ldr	r3, [pc, #72]	; (80159a4 <ip_reass_tmr+0x54>)
 801595c:	681b      	ldr	r3, [r3, #0]
 801595e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8015960:	e018      	b.n	8015994 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8015962:	68fb      	ldr	r3, [r7, #12]
 8015964:	7fdb      	ldrb	r3, [r3, #31]
 8015966:	2b00      	cmp	r3, #0
 8015968:	d00b      	beq.n	8015982 <ip_reass_tmr+0x32>
      r->timer--;
 801596a:	68fb      	ldr	r3, [r7, #12]
 801596c:	7fdb      	ldrb	r3, [r3, #31]
 801596e:	3b01      	subs	r3, #1
 8015970:	b2da      	uxtb	r2, r3
 8015972:	68fb      	ldr	r3, [r7, #12]
 8015974:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8015976:	68fb      	ldr	r3, [r7, #12]
 8015978:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801597a:	68fb      	ldr	r3, [r7, #12]
 801597c:	681b      	ldr	r3, [r3, #0]
 801597e:	60fb      	str	r3, [r7, #12]
 8015980:	e008      	b.n	8015994 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8015982:	68fb      	ldr	r3, [r7, #12]
 8015984:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8015986:	68fb      	ldr	r3, [r7, #12]
 8015988:	681b      	ldr	r3, [r3, #0]
 801598a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801598c:	68b9      	ldr	r1, [r7, #8]
 801598e:	6878      	ldr	r0, [r7, #4]
 8015990:	f000 f80a 	bl	80159a8 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8015994:	68fb      	ldr	r3, [r7, #12]
 8015996:	2b00      	cmp	r3, #0
 8015998:	d1e3      	bne.n	8015962 <ip_reass_tmr+0x12>
    }
  }
}
 801599a:	bf00      	nop
 801599c:	bf00      	nop
 801599e:	3710      	adds	r7, #16
 80159a0:	46bd      	mov	sp, r7
 80159a2:	bd80      	pop	{r7, pc}
 80159a4:	20008cfc 	.word	0x20008cfc

080159a8 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80159a8:	b580      	push	{r7, lr}
 80159aa:	b088      	sub	sp, #32
 80159ac:	af00      	add	r7, sp, #0
 80159ae:	6078      	str	r0, [r7, #4]
 80159b0:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80159b2:	2300      	movs	r3, #0
 80159b4:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80159b6:	683a      	ldr	r2, [r7, #0]
 80159b8:	687b      	ldr	r3, [r7, #4]
 80159ba:	429a      	cmp	r2, r3
 80159bc:	d105      	bne.n	80159ca <ip_reass_free_complete_datagram+0x22>
 80159be:	4b45      	ldr	r3, [pc, #276]	; (8015ad4 <ip_reass_free_complete_datagram+0x12c>)
 80159c0:	22ab      	movs	r2, #171	; 0xab
 80159c2:	4945      	ldr	r1, [pc, #276]	; (8015ad8 <ip_reass_free_complete_datagram+0x130>)
 80159c4:	4845      	ldr	r0, [pc, #276]	; (8015adc <ip_reass_free_complete_datagram+0x134>)
 80159c6:	f000 ff3b 	bl	8016840 <iprintf>
  if (prev != NULL) {
 80159ca:	683b      	ldr	r3, [r7, #0]
 80159cc:	2b00      	cmp	r3, #0
 80159ce:	d00a      	beq.n	80159e6 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80159d0:	683b      	ldr	r3, [r7, #0]
 80159d2:	681b      	ldr	r3, [r3, #0]
 80159d4:	687a      	ldr	r2, [r7, #4]
 80159d6:	429a      	cmp	r2, r3
 80159d8:	d005      	beq.n	80159e6 <ip_reass_free_complete_datagram+0x3e>
 80159da:	4b3e      	ldr	r3, [pc, #248]	; (8015ad4 <ip_reass_free_complete_datagram+0x12c>)
 80159dc:	22ad      	movs	r2, #173	; 0xad
 80159de:	4940      	ldr	r1, [pc, #256]	; (8015ae0 <ip_reass_free_complete_datagram+0x138>)
 80159e0:	483e      	ldr	r0, [pc, #248]	; (8015adc <ip_reass_free_complete_datagram+0x134>)
 80159e2:	f000 ff2d 	bl	8016840 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80159e6:	687b      	ldr	r3, [r7, #4]
 80159e8:	685b      	ldr	r3, [r3, #4]
 80159ea:	685b      	ldr	r3, [r3, #4]
 80159ec:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80159ee:	697b      	ldr	r3, [r7, #20]
 80159f0:	889b      	ldrh	r3, [r3, #4]
 80159f2:	b29b      	uxth	r3, r3
 80159f4:	2b00      	cmp	r3, #0
 80159f6:	d12a      	bne.n	8015a4e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80159f8:	687b      	ldr	r3, [r7, #4]
 80159fa:	685b      	ldr	r3, [r3, #4]
 80159fc:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80159fe:	697b      	ldr	r3, [r7, #20]
 8015a00:	681a      	ldr	r2, [r3, #0]
 8015a02:	687b      	ldr	r3, [r7, #4]
 8015a04:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8015a06:	69bb      	ldr	r3, [r7, #24]
 8015a08:	6858      	ldr	r0, [r3, #4]
 8015a0a:	687b      	ldr	r3, [r7, #4]
 8015a0c:	3308      	adds	r3, #8
 8015a0e:	2214      	movs	r2, #20
 8015a10:	4619      	mov	r1, r3
 8015a12:	f000 fee5 	bl	80167e0 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8015a16:	2101      	movs	r1, #1
 8015a18:	69b8      	ldr	r0, [r7, #24]
 8015a1a:	f7ff fc47 	bl	80152ac <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8015a1e:	69b8      	ldr	r0, [r7, #24]
 8015a20:	f7f7 fcc2 	bl	800d3a8 <pbuf_clen>
 8015a24:	4603      	mov	r3, r0
 8015a26:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8015a28:	8bfa      	ldrh	r2, [r7, #30]
 8015a2a:	8a7b      	ldrh	r3, [r7, #18]
 8015a2c:	4413      	add	r3, r2
 8015a2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015a32:	db05      	blt.n	8015a40 <ip_reass_free_complete_datagram+0x98>
 8015a34:	4b27      	ldr	r3, [pc, #156]	; (8015ad4 <ip_reass_free_complete_datagram+0x12c>)
 8015a36:	22bc      	movs	r2, #188	; 0xbc
 8015a38:	492a      	ldr	r1, [pc, #168]	; (8015ae4 <ip_reass_free_complete_datagram+0x13c>)
 8015a3a:	4828      	ldr	r0, [pc, #160]	; (8015adc <ip_reass_free_complete_datagram+0x134>)
 8015a3c:	f000 ff00 	bl	8016840 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8015a40:	8bfa      	ldrh	r2, [r7, #30]
 8015a42:	8a7b      	ldrh	r3, [r7, #18]
 8015a44:	4413      	add	r3, r2
 8015a46:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8015a48:	69b8      	ldr	r0, [r7, #24]
 8015a4a:	f7f7 fc25 	bl	800d298 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8015a4e:	687b      	ldr	r3, [r7, #4]
 8015a50:	685b      	ldr	r3, [r3, #4]
 8015a52:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8015a54:	e01f      	b.n	8015a96 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8015a56:	69bb      	ldr	r3, [r7, #24]
 8015a58:	685b      	ldr	r3, [r3, #4]
 8015a5a:	617b      	str	r3, [r7, #20]
    pcur = p;
 8015a5c:	69bb      	ldr	r3, [r7, #24]
 8015a5e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8015a60:	697b      	ldr	r3, [r7, #20]
 8015a62:	681b      	ldr	r3, [r3, #0]
 8015a64:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8015a66:	68f8      	ldr	r0, [r7, #12]
 8015a68:	f7f7 fc9e 	bl	800d3a8 <pbuf_clen>
 8015a6c:	4603      	mov	r3, r0
 8015a6e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8015a70:	8bfa      	ldrh	r2, [r7, #30]
 8015a72:	8a7b      	ldrh	r3, [r7, #18]
 8015a74:	4413      	add	r3, r2
 8015a76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015a7a:	db05      	blt.n	8015a88 <ip_reass_free_complete_datagram+0xe0>
 8015a7c:	4b15      	ldr	r3, [pc, #84]	; (8015ad4 <ip_reass_free_complete_datagram+0x12c>)
 8015a7e:	22cc      	movs	r2, #204	; 0xcc
 8015a80:	4918      	ldr	r1, [pc, #96]	; (8015ae4 <ip_reass_free_complete_datagram+0x13c>)
 8015a82:	4816      	ldr	r0, [pc, #88]	; (8015adc <ip_reass_free_complete_datagram+0x134>)
 8015a84:	f000 fedc 	bl	8016840 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8015a88:	8bfa      	ldrh	r2, [r7, #30]
 8015a8a:	8a7b      	ldrh	r3, [r7, #18]
 8015a8c:	4413      	add	r3, r2
 8015a8e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8015a90:	68f8      	ldr	r0, [r7, #12]
 8015a92:	f7f7 fc01 	bl	800d298 <pbuf_free>
  while (p != NULL) {
 8015a96:	69bb      	ldr	r3, [r7, #24]
 8015a98:	2b00      	cmp	r3, #0
 8015a9a:	d1dc      	bne.n	8015a56 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8015a9c:	6839      	ldr	r1, [r7, #0]
 8015a9e:	6878      	ldr	r0, [r7, #4]
 8015aa0:	f000 f8c2 	bl	8015c28 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8015aa4:	4b10      	ldr	r3, [pc, #64]	; (8015ae8 <ip_reass_free_complete_datagram+0x140>)
 8015aa6:	881b      	ldrh	r3, [r3, #0]
 8015aa8:	8bfa      	ldrh	r2, [r7, #30]
 8015aaa:	429a      	cmp	r2, r3
 8015aac:	d905      	bls.n	8015aba <ip_reass_free_complete_datagram+0x112>
 8015aae:	4b09      	ldr	r3, [pc, #36]	; (8015ad4 <ip_reass_free_complete_datagram+0x12c>)
 8015ab0:	22d2      	movs	r2, #210	; 0xd2
 8015ab2:	490e      	ldr	r1, [pc, #56]	; (8015aec <ip_reass_free_complete_datagram+0x144>)
 8015ab4:	4809      	ldr	r0, [pc, #36]	; (8015adc <ip_reass_free_complete_datagram+0x134>)
 8015ab6:	f000 fec3 	bl	8016840 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8015aba:	4b0b      	ldr	r3, [pc, #44]	; (8015ae8 <ip_reass_free_complete_datagram+0x140>)
 8015abc:	881a      	ldrh	r2, [r3, #0]
 8015abe:	8bfb      	ldrh	r3, [r7, #30]
 8015ac0:	1ad3      	subs	r3, r2, r3
 8015ac2:	b29a      	uxth	r2, r3
 8015ac4:	4b08      	ldr	r3, [pc, #32]	; (8015ae8 <ip_reass_free_complete_datagram+0x140>)
 8015ac6:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8015ac8:	8bfb      	ldrh	r3, [r7, #30]
}
 8015aca:	4618      	mov	r0, r3
 8015acc:	3720      	adds	r7, #32
 8015ace:	46bd      	mov	sp, r7
 8015ad0:	bd80      	pop	{r7, pc}
 8015ad2:	bf00      	nop
 8015ad4:	0801ae04 	.word	0x0801ae04
 8015ad8:	0801ae40 	.word	0x0801ae40
 8015adc:	0801ae4c 	.word	0x0801ae4c
 8015ae0:	0801ae74 	.word	0x0801ae74
 8015ae4:	0801ae88 	.word	0x0801ae88
 8015ae8:	20008d00 	.word	0x20008d00
 8015aec:	0801aea8 	.word	0x0801aea8

08015af0 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8015af0:	b580      	push	{r7, lr}
 8015af2:	b08a      	sub	sp, #40	; 0x28
 8015af4:	af00      	add	r7, sp, #0
 8015af6:	6078      	str	r0, [r7, #4]
 8015af8:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8015afa:	2300      	movs	r3, #0
 8015afc:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8015afe:	2300      	movs	r3, #0
 8015b00:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8015b02:	2300      	movs	r3, #0
 8015b04:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8015b06:	2300      	movs	r3, #0
 8015b08:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8015b0a:	2300      	movs	r3, #0
 8015b0c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8015b0e:	4b28      	ldr	r3, [pc, #160]	; (8015bb0 <ip_reass_remove_oldest_datagram+0xc0>)
 8015b10:	681b      	ldr	r3, [r3, #0]
 8015b12:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8015b14:	e030      	b.n	8015b78 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8015b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b18:	695a      	ldr	r2, [r3, #20]
 8015b1a:	687b      	ldr	r3, [r7, #4]
 8015b1c:	68db      	ldr	r3, [r3, #12]
 8015b1e:	429a      	cmp	r2, r3
 8015b20:	d10c      	bne.n	8015b3c <ip_reass_remove_oldest_datagram+0x4c>
 8015b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b24:	699a      	ldr	r2, [r3, #24]
 8015b26:	687b      	ldr	r3, [r7, #4]
 8015b28:	691b      	ldr	r3, [r3, #16]
 8015b2a:	429a      	cmp	r2, r3
 8015b2c:	d106      	bne.n	8015b3c <ip_reass_remove_oldest_datagram+0x4c>
 8015b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b30:	899a      	ldrh	r2, [r3, #12]
 8015b32:	687b      	ldr	r3, [r7, #4]
 8015b34:	889b      	ldrh	r3, [r3, #4]
 8015b36:	b29b      	uxth	r3, r3
 8015b38:	429a      	cmp	r2, r3
 8015b3a:	d014      	beq.n	8015b66 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8015b3c:	693b      	ldr	r3, [r7, #16]
 8015b3e:	3301      	adds	r3, #1
 8015b40:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8015b42:	6a3b      	ldr	r3, [r7, #32]
 8015b44:	2b00      	cmp	r3, #0
 8015b46:	d104      	bne.n	8015b52 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8015b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b4a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8015b4c:	69fb      	ldr	r3, [r7, #28]
 8015b4e:	61bb      	str	r3, [r7, #24]
 8015b50:	e009      	b.n	8015b66 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8015b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b54:	7fda      	ldrb	r2, [r3, #31]
 8015b56:	6a3b      	ldr	r3, [r7, #32]
 8015b58:	7fdb      	ldrb	r3, [r3, #31]
 8015b5a:	429a      	cmp	r2, r3
 8015b5c:	d803      	bhi.n	8015b66 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8015b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b60:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8015b62:	69fb      	ldr	r3, [r7, #28]
 8015b64:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8015b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b68:	681b      	ldr	r3, [r3, #0]
 8015b6a:	2b00      	cmp	r3, #0
 8015b6c:	d001      	beq.n	8015b72 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8015b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b70:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8015b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b74:	681b      	ldr	r3, [r3, #0]
 8015b76:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8015b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b7a:	2b00      	cmp	r3, #0
 8015b7c:	d1cb      	bne.n	8015b16 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8015b7e:	6a3b      	ldr	r3, [r7, #32]
 8015b80:	2b00      	cmp	r3, #0
 8015b82:	d008      	beq.n	8015b96 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8015b84:	69b9      	ldr	r1, [r7, #24]
 8015b86:	6a38      	ldr	r0, [r7, #32]
 8015b88:	f7ff ff0e 	bl	80159a8 <ip_reass_free_complete_datagram>
 8015b8c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8015b8e:	697a      	ldr	r2, [r7, #20]
 8015b90:	68fb      	ldr	r3, [r7, #12]
 8015b92:	4413      	add	r3, r2
 8015b94:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8015b96:	697a      	ldr	r2, [r7, #20]
 8015b98:	683b      	ldr	r3, [r7, #0]
 8015b9a:	429a      	cmp	r2, r3
 8015b9c:	da02      	bge.n	8015ba4 <ip_reass_remove_oldest_datagram+0xb4>
 8015b9e:	693b      	ldr	r3, [r7, #16]
 8015ba0:	2b01      	cmp	r3, #1
 8015ba2:	dcac      	bgt.n	8015afe <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8015ba4:	697b      	ldr	r3, [r7, #20]
}
 8015ba6:	4618      	mov	r0, r3
 8015ba8:	3728      	adds	r7, #40	; 0x28
 8015baa:	46bd      	mov	sp, r7
 8015bac:	bd80      	pop	{r7, pc}
 8015bae:	bf00      	nop
 8015bb0:	20008cfc 	.word	0x20008cfc

08015bb4 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8015bb4:	b580      	push	{r7, lr}
 8015bb6:	b084      	sub	sp, #16
 8015bb8:	af00      	add	r7, sp, #0
 8015bba:	6078      	str	r0, [r7, #4]
 8015bbc:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8015bbe:	2004      	movs	r0, #4
 8015bc0:	f7f6 fc84 	bl	800c4cc <memp_malloc>
 8015bc4:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8015bc6:	68fb      	ldr	r3, [r7, #12]
 8015bc8:	2b00      	cmp	r3, #0
 8015bca:	d110      	bne.n	8015bee <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8015bcc:	6839      	ldr	r1, [r7, #0]
 8015bce:	6878      	ldr	r0, [r7, #4]
 8015bd0:	f7ff ff8e 	bl	8015af0 <ip_reass_remove_oldest_datagram>
 8015bd4:	4602      	mov	r2, r0
 8015bd6:	683b      	ldr	r3, [r7, #0]
 8015bd8:	4293      	cmp	r3, r2
 8015bda:	dc03      	bgt.n	8015be4 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8015bdc:	2004      	movs	r0, #4
 8015bde:	f7f6 fc75 	bl	800c4cc <memp_malloc>
 8015be2:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8015be4:	68fb      	ldr	r3, [r7, #12]
 8015be6:	2b00      	cmp	r3, #0
 8015be8:	d101      	bne.n	8015bee <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8015bea:	2300      	movs	r3, #0
 8015bec:	e016      	b.n	8015c1c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8015bee:	2220      	movs	r2, #32
 8015bf0:	2100      	movs	r1, #0
 8015bf2:	68f8      	ldr	r0, [r7, #12]
 8015bf4:	f000 fe1c 	bl	8016830 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8015bf8:	68fb      	ldr	r3, [r7, #12]
 8015bfa:	220f      	movs	r2, #15
 8015bfc:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8015bfe:	4b09      	ldr	r3, [pc, #36]	; (8015c24 <ip_reass_enqueue_new_datagram+0x70>)
 8015c00:	681a      	ldr	r2, [r3, #0]
 8015c02:	68fb      	ldr	r3, [r7, #12]
 8015c04:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8015c06:	4a07      	ldr	r2, [pc, #28]	; (8015c24 <ip_reass_enqueue_new_datagram+0x70>)
 8015c08:	68fb      	ldr	r3, [r7, #12]
 8015c0a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8015c0c:	68fb      	ldr	r3, [r7, #12]
 8015c0e:	3308      	adds	r3, #8
 8015c10:	2214      	movs	r2, #20
 8015c12:	6879      	ldr	r1, [r7, #4]
 8015c14:	4618      	mov	r0, r3
 8015c16:	f000 fde3 	bl	80167e0 <memcpy>
  return ipr;
 8015c1a:	68fb      	ldr	r3, [r7, #12]
}
 8015c1c:	4618      	mov	r0, r3
 8015c1e:	3710      	adds	r7, #16
 8015c20:	46bd      	mov	sp, r7
 8015c22:	bd80      	pop	{r7, pc}
 8015c24:	20008cfc 	.word	0x20008cfc

08015c28 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8015c28:	b580      	push	{r7, lr}
 8015c2a:	b082      	sub	sp, #8
 8015c2c:	af00      	add	r7, sp, #0
 8015c2e:	6078      	str	r0, [r7, #4]
 8015c30:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8015c32:	4b10      	ldr	r3, [pc, #64]	; (8015c74 <ip_reass_dequeue_datagram+0x4c>)
 8015c34:	681b      	ldr	r3, [r3, #0]
 8015c36:	687a      	ldr	r2, [r7, #4]
 8015c38:	429a      	cmp	r2, r3
 8015c3a:	d104      	bne.n	8015c46 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8015c3c:	687b      	ldr	r3, [r7, #4]
 8015c3e:	681b      	ldr	r3, [r3, #0]
 8015c40:	4a0c      	ldr	r2, [pc, #48]	; (8015c74 <ip_reass_dequeue_datagram+0x4c>)
 8015c42:	6013      	str	r3, [r2, #0]
 8015c44:	e00d      	b.n	8015c62 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8015c46:	683b      	ldr	r3, [r7, #0]
 8015c48:	2b00      	cmp	r3, #0
 8015c4a:	d106      	bne.n	8015c5a <ip_reass_dequeue_datagram+0x32>
 8015c4c:	4b0a      	ldr	r3, [pc, #40]	; (8015c78 <ip_reass_dequeue_datagram+0x50>)
 8015c4e:	f240 1245 	movw	r2, #325	; 0x145
 8015c52:	490a      	ldr	r1, [pc, #40]	; (8015c7c <ip_reass_dequeue_datagram+0x54>)
 8015c54:	480a      	ldr	r0, [pc, #40]	; (8015c80 <ip_reass_dequeue_datagram+0x58>)
 8015c56:	f000 fdf3 	bl	8016840 <iprintf>
    prev->next = ipr->next;
 8015c5a:	687b      	ldr	r3, [r7, #4]
 8015c5c:	681a      	ldr	r2, [r3, #0]
 8015c5e:	683b      	ldr	r3, [r7, #0]
 8015c60:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8015c62:	6879      	ldr	r1, [r7, #4]
 8015c64:	2004      	movs	r0, #4
 8015c66:	f7f6 fca1 	bl	800c5ac <memp_free>
}
 8015c6a:	bf00      	nop
 8015c6c:	3708      	adds	r7, #8
 8015c6e:	46bd      	mov	sp, r7
 8015c70:	bd80      	pop	{r7, pc}
 8015c72:	bf00      	nop
 8015c74:	20008cfc 	.word	0x20008cfc
 8015c78:	0801ae04 	.word	0x0801ae04
 8015c7c:	0801aecc 	.word	0x0801aecc
 8015c80:	0801ae4c 	.word	0x0801ae4c

08015c84 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8015c84:	b580      	push	{r7, lr}
 8015c86:	b08c      	sub	sp, #48	; 0x30
 8015c88:	af00      	add	r7, sp, #0
 8015c8a:	60f8      	str	r0, [r7, #12]
 8015c8c:	60b9      	str	r1, [r7, #8]
 8015c8e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8015c90:	2300      	movs	r3, #0
 8015c92:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8015c94:	2301      	movs	r3, #1
 8015c96:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8015c98:	68bb      	ldr	r3, [r7, #8]
 8015c9a:	685b      	ldr	r3, [r3, #4]
 8015c9c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8015c9e:	69fb      	ldr	r3, [r7, #28]
 8015ca0:	885b      	ldrh	r3, [r3, #2]
 8015ca2:	b29b      	uxth	r3, r3
 8015ca4:	4618      	mov	r0, r3
 8015ca6:	f7f5 ff71 	bl	800bb8c <lwip_htons>
 8015caa:	4603      	mov	r3, r0
 8015cac:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8015cae:	69fb      	ldr	r3, [r7, #28]
 8015cb0:	781b      	ldrb	r3, [r3, #0]
 8015cb2:	f003 030f 	and.w	r3, r3, #15
 8015cb6:	b2db      	uxtb	r3, r3
 8015cb8:	009b      	lsls	r3, r3, #2
 8015cba:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8015cbc:	7e7b      	ldrb	r3, [r7, #25]
 8015cbe:	b29b      	uxth	r3, r3
 8015cc0:	8b7a      	ldrh	r2, [r7, #26]
 8015cc2:	429a      	cmp	r2, r3
 8015cc4:	d202      	bcs.n	8015ccc <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015cc6:	f04f 33ff 	mov.w	r3, #4294967295
 8015cca:	e135      	b.n	8015f38 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8015ccc:	7e7b      	ldrb	r3, [r7, #25]
 8015cce:	b29b      	uxth	r3, r3
 8015cd0:	8b7a      	ldrh	r2, [r7, #26]
 8015cd2:	1ad3      	subs	r3, r2, r3
 8015cd4:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8015cd6:	69fb      	ldr	r3, [r7, #28]
 8015cd8:	88db      	ldrh	r3, [r3, #6]
 8015cda:	b29b      	uxth	r3, r3
 8015cdc:	4618      	mov	r0, r3
 8015cde:	f7f5 ff55 	bl	800bb8c <lwip_htons>
 8015ce2:	4603      	mov	r3, r0
 8015ce4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015ce8:	b29b      	uxth	r3, r3
 8015cea:	00db      	lsls	r3, r3, #3
 8015cec:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8015cee:	68bb      	ldr	r3, [r7, #8]
 8015cf0:	685b      	ldr	r3, [r3, #4]
 8015cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8015cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015cf6:	2200      	movs	r2, #0
 8015cf8:	701a      	strb	r2, [r3, #0]
 8015cfa:	2200      	movs	r2, #0
 8015cfc:	705a      	strb	r2, [r3, #1]
 8015cfe:	2200      	movs	r2, #0
 8015d00:	709a      	strb	r2, [r3, #2]
 8015d02:	2200      	movs	r2, #0
 8015d04:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8015d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d08:	8afa      	ldrh	r2, [r7, #22]
 8015d0a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8015d0c:	8afa      	ldrh	r2, [r7, #22]
 8015d0e:	8b7b      	ldrh	r3, [r7, #26]
 8015d10:	4413      	add	r3, r2
 8015d12:	b29a      	uxth	r2, r3
 8015d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d16:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8015d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d1a:	88db      	ldrh	r3, [r3, #6]
 8015d1c:	b29b      	uxth	r3, r3
 8015d1e:	8afa      	ldrh	r2, [r7, #22]
 8015d20:	429a      	cmp	r2, r3
 8015d22:	d902      	bls.n	8015d2a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015d24:	f04f 33ff 	mov.w	r3, #4294967295
 8015d28:	e106      	b.n	8015f38 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8015d2a:	68fb      	ldr	r3, [r7, #12]
 8015d2c:	685b      	ldr	r3, [r3, #4]
 8015d2e:	627b      	str	r3, [r7, #36]	; 0x24
 8015d30:	e068      	b.n	8015e04 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8015d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d34:	685b      	ldr	r3, [r3, #4]
 8015d36:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8015d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d3a:	889b      	ldrh	r3, [r3, #4]
 8015d3c:	b29a      	uxth	r2, r3
 8015d3e:	693b      	ldr	r3, [r7, #16]
 8015d40:	889b      	ldrh	r3, [r3, #4]
 8015d42:	b29b      	uxth	r3, r3
 8015d44:	429a      	cmp	r2, r3
 8015d46:	d235      	bcs.n	8015db4 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8015d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015d4c:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8015d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d50:	2b00      	cmp	r3, #0
 8015d52:	d020      	beq.n	8015d96 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8015d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d56:	889b      	ldrh	r3, [r3, #4]
 8015d58:	b29a      	uxth	r2, r3
 8015d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d5c:	88db      	ldrh	r3, [r3, #6]
 8015d5e:	b29b      	uxth	r3, r3
 8015d60:	429a      	cmp	r2, r3
 8015d62:	d307      	bcc.n	8015d74 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8015d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d66:	88db      	ldrh	r3, [r3, #6]
 8015d68:	b29a      	uxth	r2, r3
 8015d6a:	693b      	ldr	r3, [r7, #16]
 8015d6c:	889b      	ldrh	r3, [r3, #4]
 8015d6e:	b29b      	uxth	r3, r3
 8015d70:	429a      	cmp	r2, r3
 8015d72:	d902      	bls.n	8015d7a <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015d74:	f04f 33ff 	mov.w	r3, #4294967295
 8015d78:	e0de      	b.n	8015f38 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8015d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d7c:	68ba      	ldr	r2, [r7, #8]
 8015d7e:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8015d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d82:	88db      	ldrh	r3, [r3, #6]
 8015d84:	b29a      	uxth	r2, r3
 8015d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d88:	889b      	ldrh	r3, [r3, #4]
 8015d8a:	b29b      	uxth	r3, r3
 8015d8c:	429a      	cmp	r2, r3
 8015d8e:	d03d      	beq.n	8015e0c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8015d90:	2300      	movs	r3, #0
 8015d92:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8015d94:	e03a      	b.n	8015e0c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8015d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d98:	88db      	ldrh	r3, [r3, #6]
 8015d9a:	b29a      	uxth	r2, r3
 8015d9c:	693b      	ldr	r3, [r7, #16]
 8015d9e:	889b      	ldrh	r3, [r3, #4]
 8015da0:	b29b      	uxth	r3, r3
 8015da2:	429a      	cmp	r2, r3
 8015da4:	d902      	bls.n	8015dac <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015da6:	f04f 33ff 	mov.w	r3, #4294967295
 8015daa:	e0c5      	b.n	8015f38 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8015dac:	68fb      	ldr	r3, [r7, #12]
 8015dae:	68ba      	ldr	r2, [r7, #8]
 8015db0:	605a      	str	r2, [r3, #4]
      break;
 8015db2:	e02b      	b.n	8015e0c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8015db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015db6:	889b      	ldrh	r3, [r3, #4]
 8015db8:	b29a      	uxth	r2, r3
 8015dba:	693b      	ldr	r3, [r7, #16]
 8015dbc:	889b      	ldrh	r3, [r3, #4]
 8015dbe:	b29b      	uxth	r3, r3
 8015dc0:	429a      	cmp	r2, r3
 8015dc2:	d102      	bne.n	8015dca <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015dc4:	f04f 33ff 	mov.w	r3, #4294967295
 8015dc8:	e0b6      	b.n	8015f38 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8015dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015dcc:	889b      	ldrh	r3, [r3, #4]
 8015dce:	b29a      	uxth	r2, r3
 8015dd0:	693b      	ldr	r3, [r7, #16]
 8015dd2:	88db      	ldrh	r3, [r3, #6]
 8015dd4:	b29b      	uxth	r3, r3
 8015dd6:	429a      	cmp	r2, r3
 8015dd8:	d202      	bcs.n	8015de0 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015dda:	f04f 33ff 	mov.w	r3, #4294967295
 8015dde:	e0ab      	b.n	8015f38 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8015de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015de2:	2b00      	cmp	r3, #0
 8015de4:	d009      	beq.n	8015dfa <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8015de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015de8:	88db      	ldrh	r3, [r3, #6]
 8015dea:	b29a      	uxth	r2, r3
 8015dec:	693b      	ldr	r3, [r7, #16]
 8015dee:	889b      	ldrh	r3, [r3, #4]
 8015df0:	b29b      	uxth	r3, r3
 8015df2:	429a      	cmp	r2, r3
 8015df4:	d001      	beq.n	8015dfa <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8015df6:	2300      	movs	r3, #0
 8015df8:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8015dfa:	693b      	ldr	r3, [r7, #16]
 8015dfc:	681b      	ldr	r3, [r3, #0]
 8015dfe:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8015e00:	693b      	ldr	r3, [r7, #16]
 8015e02:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8015e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e06:	2b00      	cmp	r3, #0
 8015e08:	d193      	bne.n	8015d32 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8015e0a:	e000      	b.n	8015e0e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8015e0c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8015e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e10:	2b00      	cmp	r3, #0
 8015e12:	d12d      	bne.n	8015e70 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8015e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e16:	2b00      	cmp	r3, #0
 8015e18:	d01c      	beq.n	8015e54 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8015e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e1c:	88db      	ldrh	r3, [r3, #6]
 8015e1e:	b29a      	uxth	r2, r3
 8015e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e22:	889b      	ldrh	r3, [r3, #4]
 8015e24:	b29b      	uxth	r3, r3
 8015e26:	429a      	cmp	r2, r3
 8015e28:	d906      	bls.n	8015e38 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8015e2a:	4b45      	ldr	r3, [pc, #276]	; (8015f40 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015e2c:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8015e30:	4944      	ldr	r1, [pc, #272]	; (8015f44 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8015e32:	4845      	ldr	r0, [pc, #276]	; (8015f48 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015e34:	f000 fd04 	bl	8016840 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8015e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e3a:	68ba      	ldr	r2, [r7, #8]
 8015e3c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8015e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e40:	88db      	ldrh	r3, [r3, #6]
 8015e42:	b29a      	uxth	r2, r3
 8015e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e46:	889b      	ldrh	r3, [r3, #4]
 8015e48:	b29b      	uxth	r3, r3
 8015e4a:	429a      	cmp	r2, r3
 8015e4c:	d010      	beq.n	8015e70 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8015e4e:	2300      	movs	r3, #0
 8015e50:	623b      	str	r3, [r7, #32]
 8015e52:	e00d      	b.n	8015e70 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8015e54:	68fb      	ldr	r3, [r7, #12]
 8015e56:	685b      	ldr	r3, [r3, #4]
 8015e58:	2b00      	cmp	r3, #0
 8015e5a:	d006      	beq.n	8015e6a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8015e5c:	4b38      	ldr	r3, [pc, #224]	; (8015f40 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015e5e:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8015e62:	493a      	ldr	r1, [pc, #232]	; (8015f4c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8015e64:	4838      	ldr	r0, [pc, #224]	; (8015f48 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015e66:	f000 fceb 	bl	8016840 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8015e6a:	68fb      	ldr	r3, [r7, #12]
 8015e6c:	68ba      	ldr	r2, [r7, #8]
 8015e6e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8015e70:	687b      	ldr	r3, [r7, #4]
 8015e72:	2b00      	cmp	r3, #0
 8015e74:	d105      	bne.n	8015e82 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8015e76:	68fb      	ldr	r3, [r7, #12]
 8015e78:	7f9b      	ldrb	r3, [r3, #30]
 8015e7a:	f003 0301 	and.w	r3, r3, #1
 8015e7e:	2b00      	cmp	r3, #0
 8015e80:	d059      	beq.n	8015f36 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8015e82:	6a3b      	ldr	r3, [r7, #32]
 8015e84:	2b00      	cmp	r3, #0
 8015e86:	d04f      	beq.n	8015f28 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8015e88:	68fb      	ldr	r3, [r7, #12]
 8015e8a:	685b      	ldr	r3, [r3, #4]
 8015e8c:	2b00      	cmp	r3, #0
 8015e8e:	d006      	beq.n	8015e9e <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8015e90:	68fb      	ldr	r3, [r7, #12]
 8015e92:	685b      	ldr	r3, [r3, #4]
 8015e94:	685b      	ldr	r3, [r3, #4]
 8015e96:	889b      	ldrh	r3, [r3, #4]
 8015e98:	b29b      	uxth	r3, r3
 8015e9a:	2b00      	cmp	r3, #0
 8015e9c:	d002      	beq.n	8015ea4 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8015e9e:	2300      	movs	r3, #0
 8015ea0:	623b      	str	r3, [r7, #32]
 8015ea2:	e041      	b.n	8015f28 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8015ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ea6:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8015ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015eaa:	681b      	ldr	r3, [r3, #0]
 8015eac:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8015eae:	e012      	b.n	8015ed6 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8015eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015eb2:	685b      	ldr	r3, [r3, #4]
 8015eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8015eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015eb8:	88db      	ldrh	r3, [r3, #6]
 8015eba:	b29a      	uxth	r2, r3
 8015ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ebe:	889b      	ldrh	r3, [r3, #4]
 8015ec0:	b29b      	uxth	r3, r3
 8015ec2:	429a      	cmp	r2, r3
 8015ec4:	d002      	beq.n	8015ecc <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8015ec6:	2300      	movs	r3, #0
 8015ec8:	623b      	str	r3, [r7, #32]
            break;
 8015eca:	e007      	b.n	8015edc <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8015ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ece:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8015ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ed2:	681b      	ldr	r3, [r3, #0]
 8015ed4:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8015ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ed8:	2b00      	cmp	r3, #0
 8015eda:	d1e9      	bne.n	8015eb0 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8015edc:	6a3b      	ldr	r3, [r7, #32]
 8015ede:	2b00      	cmp	r3, #0
 8015ee0:	d022      	beq.n	8015f28 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8015ee2:	68fb      	ldr	r3, [r7, #12]
 8015ee4:	685b      	ldr	r3, [r3, #4]
 8015ee6:	2b00      	cmp	r3, #0
 8015ee8:	d106      	bne.n	8015ef8 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8015eea:	4b15      	ldr	r3, [pc, #84]	; (8015f40 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015eec:	f240 12df 	movw	r2, #479	; 0x1df
 8015ef0:	4917      	ldr	r1, [pc, #92]	; (8015f50 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8015ef2:	4815      	ldr	r0, [pc, #84]	; (8015f48 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015ef4:	f000 fca4 	bl	8016840 <iprintf>
          LWIP_ASSERT("sanity check",
 8015ef8:	68fb      	ldr	r3, [r7, #12]
 8015efa:	685b      	ldr	r3, [r3, #4]
 8015efc:	685b      	ldr	r3, [r3, #4]
 8015efe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015f00:	429a      	cmp	r2, r3
 8015f02:	d106      	bne.n	8015f12 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8015f04:	4b0e      	ldr	r3, [pc, #56]	; (8015f40 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015f06:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8015f0a:	4911      	ldr	r1, [pc, #68]	; (8015f50 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8015f0c:	480e      	ldr	r0, [pc, #56]	; (8015f48 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015f0e:	f000 fc97 	bl	8016840 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8015f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f14:	681b      	ldr	r3, [r3, #0]
 8015f16:	2b00      	cmp	r3, #0
 8015f18:	d006      	beq.n	8015f28 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8015f1a:	4b09      	ldr	r3, [pc, #36]	; (8015f40 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015f1c:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8015f20:	490c      	ldr	r1, [pc, #48]	; (8015f54 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8015f22:	4809      	ldr	r0, [pc, #36]	; (8015f48 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015f24:	f000 fc8c 	bl	8016840 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8015f28:	6a3b      	ldr	r3, [r7, #32]
 8015f2a:	2b00      	cmp	r3, #0
 8015f2c:	bf14      	ite	ne
 8015f2e:	2301      	movne	r3, #1
 8015f30:	2300      	moveq	r3, #0
 8015f32:	b2db      	uxtb	r3, r3
 8015f34:	e000      	b.n	8015f38 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8015f36:	2300      	movs	r3, #0
}
 8015f38:	4618      	mov	r0, r3
 8015f3a:	3730      	adds	r7, #48	; 0x30
 8015f3c:	46bd      	mov	sp, r7
 8015f3e:	bd80      	pop	{r7, pc}
 8015f40:	0801ae04 	.word	0x0801ae04
 8015f44:	0801aee8 	.word	0x0801aee8
 8015f48:	0801ae4c 	.word	0x0801ae4c
 8015f4c:	0801af08 	.word	0x0801af08
 8015f50:	0801af40 	.word	0x0801af40
 8015f54:	0801af50 	.word	0x0801af50

08015f58 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8015f58:	b580      	push	{r7, lr}
 8015f5a:	b08e      	sub	sp, #56	; 0x38
 8015f5c:	af00      	add	r7, sp, #0
 8015f5e:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8015f60:	687b      	ldr	r3, [r7, #4]
 8015f62:	685b      	ldr	r3, [r3, #4]
 8015f64:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8015f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f68:	781b      	ldrb	r3, [r3, #0]
 8015f6a:	f003 030f 	and.w	r3, r3, #15
 8015f6e:	b2db      	uxtb	r3, r3
 8015f70:	009b      	lsls	r3, r3, #2
 8015f72:	b2db      	uxtb	r3, r3
 8015f74:	2b14      	cmp	r3, #20
 8015f76:	f040 8171 	bne.w	801625c <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8015f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f7c:	88db      	ldrh	r3, [r3, #6]
 8015f7e:	b29b      	uxth	r3, r3
 8015f80:	4618      	mov	r0, r3
 8015f82:	f7f5 fe03 	bl	800bb8c <lwip_htons>
 8015f86:	4603      	mov	r3, r0
 8015f88:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015f8c:	b29b      	uxth	r3, r3
 8015f8e:	00db      	lsls	r3, r3, #3
 8015f90:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8015f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f94:	885b      	ldrh	r3, [r3, #2]
 8015f96:	b29b      	uxth	r3, r3
 8015f98:	4618      	mov	r0, r3
 8015f9a:	f7f5 fdf7 	bl	800bb8c <lwip_htons>
 8015f9e:	4603      	mov	r3, r0
 8015fa0:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8015fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015fa4:	781b      	ldrb	r3, [r3, #0]
 8015fa6:	f003 030f 	and.w	r3, r3, #15
 8015faa:	b2db      	uxtb	r3, r3
 8015fac:	009b      	lsls	r3, r3, #2
 8015fae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8015fb2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015fb6:	b29b      	uxth	r3, r3
 8015fb8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015fba:	429a      	cmp	r2, r3
 8015fbc:	f0c0 8150 	bcc.w	8016260 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8015fc0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015fc4:	b29b      	uxth	r3, r3
 8015fc6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015fc8:	1ad3      	subs	r3, r2, r3
 8015fca:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8015fcc:	6878      	ldr	r0, [r7, #4]
 8015fce:	f7f7 f9eb 	bl	800d3a8 <pbuf_clen>
 8015fd2:	4603      	mov	r3, r0
 8015fd4:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8015fd6:	4b8c      	ldr	r3, [pc, #560]	; (8016208 <ip4_reass+0x2b0>)
 8015fd8:	881b      	ldrh	r3, [r3, #0]
 8015fda:	461a      	mov	r2, r3
 8015fdc:	8c3b      	ldrh	r3, [r7, #32]
 8015fde:	4413      	add	r3, r2
 8015fe0:	2b0a      	cmp	r3, #10
 8015fe2:	dd10      	ble.n	8016006 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8015fe4:	8c3b      	ldrh	r3, [r7, #32]
 8015fe6:	4619      	mov	r1, r3
 8015fe8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015fea:	f7ff fd81 	bl	8015af0 <ip_reass_remove_oldest_datagram>
 8015fee:	4603      	mov	r3, r0
 8015ff0:	2b00      	cmp	r3, #0
 8015ff2:	f000 8137 	beq.w	8016264 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8015ff6:	4b84      	ldr	r3, [pc, #528]	; (8016208 <ip4_reass+0x2b0>)
 8015ff8:	881b      	ldrh	r3, [r3, #0]
 8015ffa:	461a      	mov	r2, r3
 8015ffc:	8c3b      	ldrh	r3, [r7, #32]
 8015ffe:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8016000:	2b0a      	cmp	r3, #10
 8016002:	f300 812f 	bgt.w	8016264 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8016006:	4b81      	ldr	r3, [pc, #516]	; (801620c <ip4_reass+0x2b4>)
 8016008:	681b      	ldr	r3, [r3, #0]
 801600a:	633b      	str	r3, [r7, #48]	; 0x30
 801600c:	e015      	b.n	801603a <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801600e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016010:	695a      	ldr	r2, [r3, #20]
 8016012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016014:	68db      	ldr	r3, [r3, #12]
 8016016:	429a      	cmp	r2, r3
 8016018:	d10c      	bne.n	8016034 <ip4_reass+0xdc>
 801601a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801601c:	699a      	ldr	r2, [r3, #24]
 801601e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016020:	691b      	ldr	r3, [r3, #16]
 8016022:	429a      	cmp	r2, r3
 8016024:	d106      	bne.n	8016034 <ip4_reass+0xdc>
 8016026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016028:	899a      	ldrh	r2, [r3, #12]
 801602a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801602c:	889b      	ldrh	r3, [r3, #4]
 801602e:	b29b      	uxth	r3, r3
 8016030:	429a      	cmp	r2, r3
 8016032:	d006      	beq.n	8016042 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8016034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016036:	681b      	ldr	r3, [r3, #0]
 8016038:	633b      	str	r3, [r7, #48]	; 0x30
 801603a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801603c:	2b00      	cmp	r3, #0
 801603e:	d1e6      	bne.n	801600e <ip4_reass+0xb6>
 8016040:	e000      	b.n	8016044 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8016042:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8016044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016046:	2b00      	cmp	r3, #0
 8016048:	d109      	bne.n	801605e <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801604a:	8c3b      	ldrh	r3, [r7, #32]
 801604c:	4619      	mov	r1, r3
 801604e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016050:	f7ff fdb0 	bl	8015bb4 <ip_reass_enqueue_new_datagram>
 8016054:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8016056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016058:	2b00      	cmp	r3, #0
 801605a:	d11c      	bne.n	8016096 <ip4_reass+0x13e>
      goto nullreturn;
 801605c:	e105      	b.n	801626a <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801605e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016060:	88db      	ldrh	r3, [r3, #6]
 8016062:	b29b      	uxth	r3, r3
 8016064:	4618      	mov	r0, r3
 8016066:	f7f5 fd91 	bl	800bb8c <lwip_htons>
 801606a:	4603      	mov	r3, r0
 801606c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016070:	2b00      	cmp	r3, #0
 8016072:	d110      	bne.n	8016096 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8016074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016076:	89db      	ldrh	r3, [r3, #14]
 8016078:	4618      	mov	r0, r3
 801607a:	f7f5 fd87 	bl	800bb8c <lwip_htons>
 801607e:	4603      	mov	r3, r0
 8016080:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8016084:	2b00      	cmp	r3, #0
 8016086:	d006      	beq.n	8016096 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8016088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801608a:	3308      	adds	r3, #8
 801608c:	2214      	movs	r2, #20
 801608e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016090:	4618      	mov	r0, r3
 8016092:	f000 fba5 	bl	80167e0 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8016096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016098:	88db      	ldrh	r3, [r3, #6]
 801609a:	b29b      	uxth	r3, r3
 801609c:	f003 0320 	and.w	r3, r3, #32
 80160a0:	2b00      	cmp	r3, #0
 80160a2:	bf0c      	ite	eq
 80160a4:	2301      	moveq	r3, #1
 80160a6:	2300      	movne	r3, #0
 80160a8:	b2db      	uxtb	r3, r3
 80160aa:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80160ac:	69fb      	ldr	r3, [r7, #28]
 80160ae:	2b00      	cmp	r3, #0
 80160b0:	d00e      	beq.n	80160d0 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80160b2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80160b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80160b6:	4413      	add	r3, r2
 80160b8:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80160ba:	8b7a      	ldrh	r2, [r7, #26]
 80160bc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80160be:	429a      	cmp	r2, r3
 80160c0:	f0c0 80a0 	bcc.w	8016204 <ip4_reass+0x2ac>
 80160c4:	8b7b      	ldrh	r3, [r7, #26]
 80160c6:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80160ca:	4293      	cmp	r3, r2
 80160cc:	f200 809a 	bhi.w	8016204 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80160d0:	69fa      	ldr	r2, [r7, #28]
 80160d2:	6879      	ldr	r1, [r7, #4]
 80160d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80160d6:	f7ff fdd5 	bl	8015c84 <ip_reass_chain_frag_into_datagram_and_validate>
 80160da:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80160dc:	697b      	ldr	r3, [r7, #20]
 80160de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80160e2:	f000 809b 	beq.w	801621c <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80160e6:	4b48      	ldr	r3, [pc, #288]	; (8016208 <ip4_reass+0x2b0>)
 80160e8:	881a      	ldrh	r2, [r3, #0]
 80160ea:	8c3b      	ldrh	r3, [r7, #32]
 80160ec:	4413      	add	r3, r2
 80160ee:	b29a      	uxth	r2, r3
 80160f0:	4b45      	ldr	r3, [pc, #276]	; (8016208 <ip4_reass+0x2b0>)
 80160f2:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80160f4:	69fb      	ldr	r3, [r7, #28]
 80160f6:	2b00      	cmp	r3, #0
 80160f8:	d00d      	beq.n	8016116 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80160fa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80160fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80160fe:	4413      	add	r3, r2
 8016100:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8016102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016104:	8a7a      	ldrh	r2, [r7, #18]
 8016106:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8016108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801610a:	7f9b      	ldrb	r3, [r3, #30]
 801610c:	f043 0301 	orr.w	r3, r3, #1
 8016110:	b2da      	uxtb	r2, r3
 8016112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016114:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8016116:	697b      	ldr	r3, [r7, #20]
 8016118:	2b01      	cmp	r3, #1
 801611a:	d171      	bne.n	8016200 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801611c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801611e:	8b9b      	ldrh	r3, [r3, #28]
 8016120:	3314      	adds	r3, #20
 8016122:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8016124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016126:	685b      	ldr	r3, [r3, #4]
 8016128:	685b      	ldr	r3, [r3, #4]
 801612a:	681b      	ldr	r3, [r3, #0]
 801612c:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801612e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016130:	685b      	ldr	r3, [r3, #4]
 8016132:	685b      	ldr	r3, [r3, #4]
 8016134:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8016136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016138:	3308      	adds	r3, #8
 801613a:	2214      	movs	r2, #20
 801613c:	4619      	mov	r1, r3
 801613e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016140:	f000 fb4e 	bl	80167e0 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8016144:	8a3b      	ldrh	r3, [r7, #16]
 8016146:	4618      	mov	r0, r3
 8016148:	f7f5 fd20 	bl	800bb8c <lwip_htons>
 801614c:	4603      	mov	r3, r0
 801614e:	461a      	mov	r2, r3
 8016150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016152:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8016154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016156:	2200      	movs	r2, #0
 8016158:	719a      	strb	r2, [r3, #6]
 801615a:	2200      	movs	r2, #0
 801615c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801615e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016160:	2200      	movs	r2, #0
 8016162:	729a      	strb	r2, [r3, #10]
 8016164:	2200      	movs	r2, #0
 8016166:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8016168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801616a:	685b      	ldr	r3, [r3, #4]
 801616c:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801616e:	e00d      	b.n	801618c <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8016170:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016172:	685b      	ldr	r3, [r3, #4]
 8016174:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8016176:	2114      	movs	r1, #20
 8016178:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801617a:	f7f7 f807 	bl	800d18c <pbuf_remove_header>
      pbuf_cat(p, r);
 801617e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8016180:	6878      	ldr	r0, [r7, #4]
 8016182:	f7f7 f94b 	bl	800d41c <pbuf_cat>
      r = iprh->next_pbuf;
 8016186:	68fb      	ldr	r3, [r7, #12]
 8016188:	681b      	ldr	r3, [r3, #0]
 801618a:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 801618c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801618e:	2b00      	cmp	r3, #0
 8016190:	d1ee      	bne.n	8016170 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8016192:	4b1e      	ldr	r3, [pc, #120]	; (801620c <ip4_reass+0x2b4>)
 8016194:	681b      	ldr	r3, [r3, #0]
 8016196:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016198:	429a      	cmp	r2, r3
 801619a:	d102      	bne.n	80161a2 <ip4_reass+0x24a>
      ipr_prev = NULL;
 801619c:	2300      	movs	r3, #0
 801619e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80161a0:	e010      	b.n	80161c4 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80161a2:	4b1a      	ldr	r3, [pc, #104]	; (801620c <ip4_reass+0x2b4>)
 80161a4:	681b      	ldr	r3, [r3, #0]
 80161a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80161a8:	e007      	b.n	80161ba <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80161aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161ac:	681b      	ldr	r3, [r3, #0]
 80161ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80161b0:	429a      	cmp	r2, r3
 80161b2:	d006      	beq.n	80161c2 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80161b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161b6:	681b      	ldr	r3, [r3, #0]
 80161b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80161ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161bc:	2b00      	cmp	r3, #0
 80161be:	d1f4      	bne.n	80161aa <ip4_reass+0x252>
 80161c0:	e000      	b.n	80161c4 <ip4_reass+0x26c>
          break;
 80161c2:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80161c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80161c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80161c8:	f7ff fd2e 	bl	8015c28 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80161cc:	6878      	ldr	r0, [r7, #4]
 80161ce:	f7f7 f8eb 	bl	800d3a8 <pbuf_clen>
 80161d2:	4603      	mov	r3, r0
 80161d4:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80161d6:	4b0c      	ldr	r3, [pc, #48]	; (8016208 <ip4_reass+0x2b0>)
 80161d8:	881b      	ldrh	r3, [r3, #0]
 80161da:	8c3a      	ldrh	r2, [r7, #32]
 80161dc:	429a      	cmp	r2, r3
 80161de:	d906      	bls.n	80161ee <ip4_reass+0x296>
 80161e0:	4b0b      	ldr	r3, [pc, #44]	; (8016210 <ip4_reass+0x2b8>)
 80161e2:	f240 229b 	movw	r2, #667	; 0x29b
 80161e6:	490b      	ldr	r1, [pc, #44]	; (8016214 <ip4_reass+0x2bc>)
 80161e8:	480b      	ldr	r0, [pc, #44]	; (8016218 <ip4_reass+0x2c0>)
 80161ea:	f000 fb29 	bl	8016840 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80161ee:	4b06      	ldr	r3, [pc, #24]	; (8016208 <ip4_reass+0x2b0>)
 80161f0:	881a      	ldrh	r2, [r3, #0]
 80161f2:	8c3b      	ldrh	r3, [r7, #32]
 80161f4:	1ad3      	subs	r3, r2, r3
 80161f6:	b29a      	uxth	r2, r3
 80161f8:	4b03      	ldr	r3, [pc, #12]	; (8016208 <ip4_reass+0x2b0>)
 80161fa:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80161fc:	687b      	ldr	r3, [r7, #4]
 80161fe:	e038      	b.n	8016272 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8016200:	2300      	movs	r3, #0
 8016202:	e036      	b.n	8016272 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8016204:	bf00      	nop
 8016206:	e00a      	b.n	801621e <ip4_reass+0x2c6>
 8016208:	20008d00 	.word	0x20008d00
 801620c:	20008cfc 	.word	0x20008cfc
 8016210:	0801ae04 	.word	0x0801ae04
 8016214:	0801af74 	.word	0x0801af74
 8016218:	0801ae4c 	.word	0x0801ae4c
    goto nullreturn_ipr;
 801621c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801621e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016220:	2b00      	cmp	r3, #0
 8016222:	d106      	bne.n	8016232 <ip4_reass+0x2da>
 8016224:	4b15      	ldr	r3, [pc, #84]	; (801627c <ip4_reass+0x324>)
 8016226:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801622a:	4915      	ldr	r1, [pc, #84]	; (8016280 <ip4_reass+0x328>)
 801622c:	4815      	ldr	r0, [pc, #84]	; (8016284 <ip4_reass+0x32c>)
 801622e:	f000 fb07 	bl	8016840 <iprintf>
  if (ipr->p == NULL) {
 8016232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016234:	685b      	ldr	r3, [r3, #4]
 8016236:	2b00      	cmp	r3, #0
 8016238:	d116      	bne.n	8016268 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801623a:	4b13      	ldr	r3, [pc, #76]	; (8016288 <ip4_reass+0x330>)
 801623c:	681b      	ldr	r3, [r3, #0]
 801623e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016240:	429a      	cmp	r2, r3
 8016242:	d006      	beq.n	8016252 <ip4_reass+0x2fa>
 8016244:	4b0d      	ldr	r3, [pc, #52]	; (801627c <ip4_reass+0x324>)
 8016246:	f240 22ab 	movw	r2, #683	; 0x2ab
 801624a:	4910      	ldr	r1, [pc, #64]	; (801628c <ip4_reass+0x334>)
 801624c:	480d      	ldr	r0, [pc, #52]	; (8016284 <ip4_reass+0x32c>)
 801624e:	f000 faf7 	bl	8016840 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8016252:	2100      	movs	r1, #0
 8016254:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016256:	f7ff fce7 	bl	8015c28 <ip_reass_dequeue_datagram>
 801625a:	e006      	b.n	801626a <ip4_reass+0x312>
    goto nullreturn;
 801625c:	bf00      	nop
 801625e:	e004      	b.n	801626a <ip4_reass+0x312>
    goto nullreturn;
 8016260:	bf00      	nop
 8016262:	e002      	b.n	801626a <ip4_reass+0x312>
      goto nullreturn;
 8016264:	bf00      	nop
 8016266:	e000      	b.n	801626a <ip4_reass+0x312>
  }

nullreturn:
 8016268:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801626a:	6878      	ldr	r0, [r7, #4]
 801626c:	f7f7 f814 	bl	800d298 <pbuf_free>
  return NULL;
 8016270:	2300      	movs	r3, #0
}
 8016272:	4618      	mov	r0, r3
 8016274:	3738      	adds	r7, #56	; 0x38
 8016276:	46bd      	mov	sp, r7
 8016278:	bd80      	pop	{r7, pc}
 801627a:	bf00      	nop
 801627c:	0801ae04 	.word	0x0801ae04
 8016280:	0801af90 	.word	0x0801af90
 8016284:	0801ae4c 	.word	0x0801ae4c
 8016288:	20008cfc 	.word	0x20008cfc
 801628c:	0801af9c 	.word	0x0801af9c

08016290 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8016290:	b580      	push	{r7, lr}
 8016292:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8016294:	2005      	movs	r0, #5
 8016296:	f7f6 f919 	bl	800c4cc <memp_malloc>
 801629a:	4603      	mov	r3, r0
}
 801629c:	4618      	mov	r0, r3
 801629e:	bd80      	pop	{r7, pc}

080162a0 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80162a0:	b580      	push	{r7, lr}
 80162a2:	b082      	sub	sp, #8
 80162a4:	af00      	add	r7, sp, #0
 80162a6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80162a8:	687b      	ldr	r3, [r7, #4]
 80162aa:	2b00      	cmp	r3, #0
 80162ac:	d106      	bne.n	80162bc <ip_frag_free_pbuf_custom_ref+0x1c>
 80162ae:	4b07      	ldr	r3, [pc, #28]	; (80162cc <ip_frag_free_pbuf_custom_ref+0x2c>)
 80162b0:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 80162b4:	4906      	ldr	r1, [pc, #24]	; (80162d0 <ip_frag_free_pbuf_custom_ref+0x30>)
 80162b6:	4807      	ldr	r0, [pc, #28]	; (80162d4 <ip_frag_free_pbuf_custom_ref+0x34>)
 80162b8:	f000 fac2 	bl	8016840 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80162bc:	6879      	ldr	r1, [r7, #4]
 80162be:	2005      	movs	r0, #5
 80162c0:	f7f6 f974 	bl	800c5ac <memp_free>
}
 80162c4:	bf00      	nop
 80162c6:	3708      	adds	r7, #8
 80162c8:	46bd      	mov	sp, r7
 80162ca:	bd80      	pop	{r7, pc}
 80162cc:	0801ae04 	.word	0x0801ae04
 80162d0:	0801afbc 	.word	0x0801afbc
 80162d4:	0801ae4c 	.word	0x0801ae4c

080162d8 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80162d8:	b580      	push	{r7, lr}
 80162da:	b084      	sub	sp, #16
 80162dc:	af00      	add	r7, sp, #0
 80162de:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80162e0:	687b      	ldr	r3, [r7, #4]
 80162e2:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80162e4:	68fb      	ldr	r3, [r7, #12]
 80162e6:	2b00      	cmp	r3, #0
 80162e8:	d106      	bne.n	80162f8 <ipfrag_free_pbuf_custom+0x20>
 80162ea:	4b11      	ldr	r3, [pc, #68]	; (8016330 <ipfrag_free_pbuf_custom+0x58>)
 80162ec:	f240 22ce 	movw	r2, #718	; 0x2ce
 80162f0:	4910      	ldr	r1, [pc, #64]	; (8016334 <ipfrag_free_pbuf_custom+0x5c>)
 80162f2:	4811      	ldr	r0, [pc, #68]	; (8016338 <ipfrag_free_pbuf_custom+0x60>)
 80162f4:	f000 faa4 	bl	8016840 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80162f8:	68fa      	ldr	r2, [r7, #12]
 80162fa:	687b      	ldr	r3, [r7, #4]
 80162fc:	429a      	cmp	r2, r3
 80162fe:	d006      	beq.n	801630e <ipfrag_free_pbuf_custom+0x36>
 8016300:	4b0b      	ldr	r3, [pc, #44]	; (8016330 <ipfrag_free_pbuf_custom+0x58>)
 8016302:	f240 22cf 	movw	r2, #719	; 0x2cf
 8016306:	490d      	ldr	r1, [pc, #52]	; (801633c <ipfrag_free_pbuf_custom+0x64>)
 8016308:	480b      	ldr	r0, [pc, #44]	; (8016338 <ipfrag_free_pbuf_custom+0x60>)
 801630a:	f000 fa99 	bl	8016840 <iprintf>
  if (pcr->original != NULL) {
 801630e:	68fb      	ldr	r3, [r7, #12]
 8016310:	695b      	ldr	r3, [r3, #20]
 8016312:	2b00      	cmp	r3, #0
 8016314:	d004      	beq.n	8016320 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8016316:	68fb      	ldr	r3, [r7, #12]
 8016318:	695b      	ldr	r3, [r3, #20]
 801631a:	4618      	mov	r0, r3
 801631c:	f7f6 ffbc 	bl	800d298 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8016320:	68f8      	ldr	r0, [r7, #12]
 8016322:	f7ff ffbd 	bl	80162a0 <ip_frag_free_pbuf_custom_ref>
}
 8016326:	bf00      	nop
 8016328:	3710      	adds	r7, #16
 801632a:	46bd      	mov	sp, r7
 801632c:	bd80      	pop	{r7, pc}
 801632e:	bf00      	nop
 8016330:	0801ae04 	.word	0x0801ae04
 8016334:	0801afc8 	.word	0x0801afc8
 8016338:	0801ae4c 	.word	0x0801ae4c
 801633c:	0801afd4 	.word	0x0801afd4

08016340 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8016340:	b580      	push	{r7, lr}
 8016342:	b094      	sub	sp, #80	; 0x50
 8016344:	af02      	add	r7, sp, #8
 8016346:	60f8      	str	r0, [r7, #12]
 8016348:	60b9      	str	r1, [r7, #8]
 801634a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801634c:	2300      	movs	r3, #0
 801634e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8016352:	68bb      	ldr	r3, [r7, #8]
 8016354:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8016356:	3b14      	subs	r3, #20
 8016358:	2b00      	cmp	r3, #0
 801635a:	da00      	bge.n	801635e <ip4_frag+0x1e>
 801635c:	3307      	adds	r3, #7
 801635e:	10db      	asrs	r3, r3, #3
 8016360:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8016362:	2314      	movs	r3, #20
 8016364:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8016366:	68fb      	ldr	r3, [r7, #12]
 8016368:	685b      	ldr	r3, [r3, #4]
 801636a:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 801636c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801636e:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8016370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016372:	781b      	ldrb	r3, [r3, #0]
 8016374:	f003 030f 	and.w	r3, r3, #15
 8016378:	b2db      	uxtb	r3, r3
 801637a:	009b      	lsls	r3, r3, #2
 801637c:	b2db      	uxtb	r3, r3
 801637e:	2b14      	cmp	r3, #20
 8016380:	d002      	beq.n	8016388 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8016382:	f06f 0305 	mvn.w	r3, #5
 8016386:	e110      	b.n	80165aa <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8016388:	68fb      	ldr	r3, [r7, #12]
 801638a:	895b      	ldrh	r3, [r3, #10]
 801638c:	2b13      	cmp	r3, #19
 801638e:	d809      	bhi.n	80163a4 <ip4_frag+0x64>
 8016390:	4b88      	ldr	r3, [pc, #544]	; (80165b4 <ip4_frag+0x274>)
 8016392:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8016396:	4988      	ldr	r1, [pc, #544]	; (80165b8 <ip4_frag+0x278>)
 8016398:	4888      	ldr	r0, [pc, #544]	; (80165bc <ip4_frag+0x27c>)
 801639a:	f000 fa51 	bl	8016840 <iprintf>
 801639e:	f06f 0305 	mvn.w	r3, #5
 80163a2:	e102      	b.n	80165aa <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80163a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163a6:	88db      	ldrh	r3, [r3, #6]
 80163a8:	b29b      	uxth	r3, r3
 80163aa:	4618      	mov	r0, r3
 80163ac:	f7f5 fbee 	bl	800bb8c <lwip_htons>
 80163b0:	4603      	mov	r3, r0
 80163b2:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 80163b4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80163b6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80163ba:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80163be:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80163c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80163c4:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 80163c6:	68fb      	ldr	r3, [r7, #12]
 80163c8:	891b      	ldrh	r3, [r3, #8]
 80163ca:	3b14      	subs	r3, #20
 80163cc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 80163d0:	e0e1      	b.n	8016596 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80163d2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80163d4:	00db      	lsls	r3, r3, #3
 80163d6:	b29b      	uxth	r3, r3
 80163d8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80163dc:	4293      	cmp	r3, r2
 80163de:	bf28      	it	cs
 80163e0:	4613      	movcs	r3, r2
 80163e2:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80163e4:	f44f 7220 	mov.w	r2, #640	; 0x280
 80163e8:	2114      	movs	r1, #20
 80163ea:	200e      	movs	r0, #14
 80163ec:	f7f6 fc70 	bl	800ccd0 <pbuf_alloc>
 80163f0:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 80163f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163f4:	2b00      	cmp	r3, #0
 80163f6:	f000 80d5 	beq.w	80165a4 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80163fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163fc:	895b      	ldrh	r3, [r3, #10]
 80163fe:	2b13      	cmp	r3, #19
 8016400:	d806      	bhi.n	8016410 <ip4_frag+0xd0>
 8016402:	4b6c      	ldr	r3, [pc, #432]	; (80165b4 <ip4_frag+0x274>)
 8016404:	f44f 7249 	mov.w	r2, #804	; 0x324
 8016408:	496d      	ldr	r1, [pc, #436]	; (80165c0 <ip4_frag+0x280>)
 801640a:	486c      	ldr	r0, [pc, #432]	; (80165bc <ip4_frag+0x27c>)
 801640c:	f000 fa18 	bl	8016840 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8016410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016412:	685b      	ldr	r3, [r3, #4]
 8016414:	2214      	movs	r2, #20
 8016416:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8016418:	4618      	mov	r0, r3
 801641a:	f000 f9e1 	bl	80167e0 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801641e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016420:	685b      	ldr	r3, [r3, #4]
 8016422:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8016424:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016426:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801642a:	e064      	b.n	80164f6 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801642c:	68fb      	ldr	r3, [r7, #12]
 801642e:	895a      	ldrh	r2, [r3, #10]
 8016430:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016432:	1ad3      	subs	r3, r2, r3
 8016434:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8016436:	68fb      	ldr	r3, [r7, #12]
 8016438:	895b      	ldrh	r3, [r3, #10]
 801643a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801643c:	429a      	cmp	r2, r3
 801643e:	d906      	bls.n	801644e <ip4_frag+0x10e>
 8016440:	4b5c      	ldr	r3, [pc, #368]	; (80165b4 <ip4_frag+0x274>)
 8016442:	f240 322d 	movw	r2, #813	; 0x32d
 8016446:	495f      	ldr	r1, [pc, #380]	; (80165c4 <ip4_frag+0x284>)
 8016448:	485c      	ldr	r0, [pc, #368]	; (80165bc <ip4_frag+0x27c>)
 801644a:	f000 f9f9 	bl	8016840 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801644e:	8bfa      	ldrh	r2, [r7, #30]
 8016450:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016454:	4293      	cmp	r3, r2
 8016456:	bf28      	it	cs
 8016458:	4613      	movcs	r3, r2
 801645a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801645e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016462:	2b00      	cmp	r3, #0
 8016464:	d105      	bne.n	8016472 <ip4_frag+0x132>
        poff = 0;
 8016466:	2300      	movs	r3, #0
 8016468:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801646a:	68fb      	ldr	r3, [r7, #12]
 801646c:	681b      	ldr	r3, [r3, #0]
 801646e:	60fb      	str	r3, [r7, #12]
        continue;
 8016470:	e041      	b.n	80164f6 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8016472:	f7ff ff0d 	bl	8016290 <ip_frag_alloc_pbuf_custom_ref>
 8016476:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8016478:	69bb      	ldr	r3, [r7, #24]
 801647a:	2b00      	cmp	r3, #0
 801647c:	d103      	bne.n	8016486 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801647e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016480:	f7f6 ff0a 	bl	800d298 <pbuf_free>
        goto memerr;
 8016484:	e08f      	b.n	80165a6 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8016486:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8016488:	68fb      	ldr	r3, [r7, #12]
 801648a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801648c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801648e:	4413      	add	r3, r2
 8016490:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8016494:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8016498:	9201      	str	r2, [sp, #4]
 801649a:	9300      	str	r3, [sp, #0]
 801649c:	4603      	mov	r3, r0
 801649e:	2241      	movs	r2, #65	; 0x41
 80164a0:	2000      	movs	r0, #0
 80164a2:	f7f6 fd3f 	bl	800cf24 <pbuf_alloced_custom>
 80164a6:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80164a8:	697b      	ldr	r3, [r7, #20]
 80164aa:	2b00      	cmp	r3, #0
 80164ac:	d106      	bne.n	80164bc <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80164ae:	69b8      	ldr	r0, [r7, #24]
 80164b0:	f7ff fef6 	bl	80162a0 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80164b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80164b6:	f7f6 feef 	bl	800d298 <pbuf_free>
        goto memerr;
 80164ba:	e074      	b.n	80165a6 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 80164bc:	68f8      	ldr	r0, [r7, #12]
 80164be:	f7f6 ff8b 	bl	800d3d8 <pbuf_ref>
      pcr->original = p;
 80164c2:	69bb      	ldr	r3, [r7, #24]
 80164c4:	68fa      	ldr	r2, [r7, #12]
 80164c6:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80164c8:	69bb      	ldr	r3, [r7, #24]
 80164ca:	4a3f      	ldr	r2, [pc, #252]	; (80165c8 <ip4_frag+0x288>)
 80164cc:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80164ce:	6979      	ldr	r1, [r7, #20]
 80164d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80164d2:	f7f6 ffa3 	bl	800d41c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80164d6:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80164da:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80164de:	1ad3      	subs	r3, r2, r3
 80164e0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 80164e4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80164e8:	2b00      	cmp	r3, #0
 80164ea:	d004      	beq.n	80164f6 <ip4_frag+0x1b6>
        poff = 0;
 80164ec:	2300      	movs	r3, #0
 80164ee:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80164f0:	68fb      	ldr	r3, [r7, #12]
 80164f2:	681b      	ldr	r3, [r3, #0]
 80164f4:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80164f6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80164fa:	2b00      	cmp	r3, #0
 80164fc:	d196      	bne.n	801642c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80164fe:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8016500:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016504:	4413      	add	r3, r2
 8016506:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8016508:	68bb      	ldr	r3, [r7, #8]
 801650a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801650c:	f1a3 0213 	sub.w	r2, r3, #19
 8016510:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016514:	429a      	cmp	r2, r3
 8016516:	bfcc      	ite	gt
 8016518:	2301      	movgt	r3, #1
 801651a:	2300      	movle	r3, #0
 801651c:	b2db      	uxtb	r3, r3
 801651e:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8016520:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8016524:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016528:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801652a:	6a3b      	ldr	r3, [r7, #32]
 801652c:	2b00      	cmp	r3, #0
 801652e:	d002      	beq.n	8016536 <ip4_frag+0x1f6>
 8016530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016532:	2b00      	cmp	r3, #0
 8016534:	d003      	beq.n	801653e <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8016536:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016538:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801653c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801653e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016540:	4618      	mov	r0, r3
 8016542:	f7f5 fb23 	bl	800bb8c <lwip_htons>
 8016546:	4603      	mov	r3, r0
 8016548:	461a      	mov	r2, r3
 801654a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801654c:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801654e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016550:	3314      	adds	r3, #20
 8016552:	b29b      	uxth	r3, r3
 8016554:	4618      	mov	r0, r3
 8016556:	f7f5 fb19 	bl	800bb8c <lwip_htons>
 801655a:	4603      	mov	r3, r0
 801655c:	461a      	mov	r2, r3
 801655e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016560:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8016562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016564:	2200      	movs	r2, #0
 8016566:	729a      	strb	r2, [r3, #10]
 8016568:	2200      	movs	r2, #0
 801656a:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801656c:	68bb      	ldr	r3, [r7, #8]
 801656e:	695b      	ldr	r3, [r3, #20]
 8016570:	687a      	ldr	r2, [r7, #4]
 8016572:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016574:	68b8      	ldr	r0, [r7, #8]
 8016576:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8016578:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801657a:	f7f6 fe8d 	bl	800d298 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801657e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016582:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016584:	1ad3      	subs	r3, r2, r3
 8016586:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801658a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801658e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016590:	4413      	add	r3, r2
 8016592:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8016596:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801659a:	2b00      	cmp	r3, #0
 801659c:	f47f af19 	bne.w	80163d2 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80165a0:	2300      	movs	r3, #0
 80165a2:	e002      	b.n	80165aa <ip4_frag+0x26a>
      goto memerr;
 80165a4:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80165a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80165aa:	4618      	mov	r0, r3
 80165ac:	3748      	adds	r7, #72	; 0x48
 80165ae:	46bd      	mov	sp, r7
 80165b0:	bd80      	pop	{r7, pc}
 80165b2:	bf00      	nop
 80165b4:	0801ae04 	.word	0x0801ae04
 80165b8:	0801afe0 	.word	0x0801afe0
 80165bc:	0801ae4c 	.word	0x0801ae4c
 80165c0:	0801affc 	.word	0x0801affc
 80165c4:	0801b01c 	.word	0x0801b01c
 80165c8:	080162d9 	.word	0x080162d9

080165cc <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80165cc:	b580      	push	{r7, lr}
 80165ce:	b086      	sub	sp, #24
 80165d0:	af00      	add	r7, sp, #0
 80165d2:	6078      	str	r0, [r7, #4]
 80165d4:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 80165d6:	230e      	movs	r3, #14
 80165d8:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 80165da:	687b      	ldr	r3, [r7, #4]
 80165dc:	895b      	ldrh	r3, [r3, #10]
 80165de:	2b0e      	cmp	r3, #14
 80165e0:	d96e      	bls.n	80166c0 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 80165e2:	687b      	ldr	r3, [r7, #4]
 80165e4:	7bdb      	ldrb	r3, [r3, #15]
 80165e6:	2b00      	cmp	r3, #0
 80165e8:	d106      	bne.n	80165f8 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 80165ea:	683b      	ldr	r3, [r7, #0]
 80165ec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80165f0:	3301      	adds	r3, #1
 80165f2:	b2da      	uxtb	r2, r3
 80165f4:	687b      	ldr	r3, [r7, #4]
 80165f6:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80165f8:	687b      	ldr	r3, [r7, #4]
 80165fa:	685b      	ldr	r3, [r3, #4]
 80165fc:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80165fe:	693b      	ldr	r3, [r7, #16]
 8016600:	7b1a      	ldrb	r2, [r3, #12]
 8016602:	7b5b      	ldrb	r3, [r3, #13]
 8016604:	021b      	lsls	r3, r3, #8
 8016606:	4313      	orrs	r3, r2
 8016608:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801660a:	693b      	ldr	r3, [r7, #16]
 801660c:	781b      	ldrb	r3, [r3, #0]
 801660e:	f003 0301 	and.w	r3, r3, #1
 8016612:	2b00      	cmp	r3, #0
 8016614:	d023      	beq.n	801665e <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8016616:	693b      	ldr	r3, [r7, #16]
 8016618:	781b      	ldrb	r3, [r3, #0]
 801661a:	2b01      	cmp	r3, #1
 801661c:	d10f      	bne.n	801663e <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801661e:	693b      	ldr	r3, [r7, #16]
 8016620:	785b      	ldrb	r3, [r3, #1]
 8016622:	2b00      	cmp	r3, #0
 8016624:	d11b      	bne.n	801665e <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8016626:	693b      	ldr	r3, [r7, #16]
 8016628:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801662a:	2b5e      	cmp	r3, #94	; 0x5e
 801662c:	d117      	bne.n	801665e <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801662e:	687b      	ldr	r3, [r7, #4]
 8016630:	7b5b      	ldrb	r3, [r3, #13]
 8016632:	f043 0310 	orr.w	r3, r3, #16
 8016636:	b2da      	uxtb	r2, r3
 8016638:	687b      	ldr	r3, [r7, #4]
 801663a:	735a      	strb	r2, [r3, #13]
 801663c:	e00f      	b.n	801665e <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801663e:	693b      	ldr	r3, [r7, #16]
 8016640:	2206      	movs	r2, #6
 8016642:	4928      	ldr	r1, [pc, #160]	; (80166e4 <ethernet_input+0x118>)
 8016644:	4618      	mov	r0, r3
 8016646:	f000 f8bb 	bl	80167c0 <memcmp>
 801664a:	4603      	mov	r3, r0
 801664c:	2b00      	cmp	r3, #0
 801664e:	d106      	bne.n	801665e <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8016650:	687b      	ldr	r3, [r7, #4]
 8016652:	7b5b      	ldrb	r3, [r3, #13]
 8016654:	f043 0308 	orr.w	r3, r3, #8
 8016658:	b2da      	uxtb	r2, r3
 801665a:	687b      	ldr	r3, [r7, #4]
 801665c:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801665e:	89fb      	ldrh	r3, [r7, #14]
 8016660:	2b08      	cmp	r3, #8
 8016662:	d003      	beq.n	801666c <ethernet_input+0xa0>
 8016664:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8016668:	d014      	beq.n	8016694 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801666a:	e032      	b.n	80166d2 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801666c:	683b      	ldr	r3, [r7, #0]
 801666e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016672:	f003 0308 	and.w	r3, r3, #8
 8016676:	2b00      	cmp	r3, #0
 8016678:	d024      	beq.n	80166c4 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801667a:	8afb      	ldrh	r3, [r7, #22]
 801667c:	4619      	mov	r1, r3
 801667e:	6878      	ldr	r0, [r7, #4]
 8016680:	f7f6 fd84 	bl	800d18c <pbuf_remove_header>
 8016684:	4603      	mov	r3, r0
 8016686:	2b00      	cmp	r3, #0
 8016688:	d11e      	bne.n	80166c8 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801668a:	6839      	ldr	r1, [r7, #0]
 801668c:	6878      	ldr	r0, [r7, #4]
 801668e:	f7fe ff21 	bl	80154d4 <ip4_input>
      break;
 8016692:	e013      	b.n	80166bc <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8016694:	683b      	ldr	r3, [r7, #0]
 8016696:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801669a:	f003 0308 	and.w	r3, r3, #8
 801669e:	2b00      	cmp	r3, #0
 80166a0:	d014      	beq.n	80166cc <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80166a2:	8afb      	ldrh	r3, [r7, #22]
 80166a4:	4619      	mov	r1, r3
 80166a6:	6878      	ldr	r0, [r7, #4]
 80166a8:	f7f6 fd70 	bl	800d18c <pbuf_remove_header>
 80166ac:	4603      	mov	r3, r0
 80166ae:	2b00      	cmp	r3, #0
 80166b0:	d10e      	bne.n	80166d0 <ethernet_input+0x104>
        etharp_input(p, netif);
 80166b2:	6839      	ldr	r1, [r7, #0]
 80166b4:	6878      	ldr	r0, [r7, #4]
 80166b6:	f7fe f8c1 	bl	801483c <etharp_input>
      break;
 80166ba:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80166bc:	2300      	movs	r3, #0
 80166be:	e00c      	b.n	80166da <ethernet_input+0x10e>
    goto free_and_return;
 80166c0:	bf00      	nop
 80166c2:	e006      	b.n	80166d2 <ethernet_input+0x106>
        goto free_and_return;
 80166c4:	bf00      	nop
 80166c6:	e004      	b.n	80166d2 <ethernet_input+0x106>
        goto free_and_return;
 80166c8:	bf00      	nop
 80166ca:	e002      	b.n	80166d2 <ethernet_input+0x106>
        goto free_and_return;
 80166cc:	bf00      	nop
 80166ce:	e000      	b.n	80166d2 <ethernet_input+0x106>
        goto free_and_return;
 80166d0:	bf00      	nop

free_and_return:
  pbuf_free(p);
 80166d2:	6878      	ldr	r0, [r7, #4]
 80166d4:	f7f6 fde0 	bl	800d298 <pbuf_free>
  return ERR_OK;
 80166d8:	2300      	movs	r3, #0
}
 80166da:	4618      	mov	r0, r3
 80166dc:	3718      	adds	r7, #24
 80166de:	46bd      	mov	sp, r7
 80166e0:	bd80      	pop	{r7, pc}
 80166e2:	bf00      	nop
 80166e4:	0801d0ec 	.word	0x0801d0ec

080166e8 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 80166e8:	b580      	push	{r7, lr}
 80166ea:	b086      	sub	sp, #24
 80166ec:	af00      	add	r7, sp, #0
 80166ee:	60f8      	str	r0, [r7, #12]
 80166f0:	60b9      	str	r1, [r7, #8]
 80166f2:	607a      	str	r2, [r7, #4]
 80166f4:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80166f6:	8c3b      	ldrh	r3, [r7, #32]
 80166f8:	4618      	mov	r0, r3
 80166fa:	f7f5 fa47 	bl	800bb8c <lwip_htons>
 80166fe:	4603      	mov	r3, r0
 8016700:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8016702:	210e      	movs	r1, #14
 8016704:	68b8      	ldr	r0, [r7, #8]
 8016706:	f7f6 fd31 	bl	800d16c <pbuf_add_header>
 801670a:	4603      	mov	r3, r0
 801670c:	2b00      	cmp	r3, #0
 801670e:	d125      	bne.n	801675c <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8016710:	68bb      	ldr	r3, [r7, #8]
 8016712:	685b      	ldr	r3, [r3, #4]
 8016714:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8016716:	693b      	ldr	r3, [r7, #16]
 8016718:	8afa      	ldrh	r2, [r7, #22]
 801671a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801671c:	693b      	ldr	r3, [r7, #16]
 801671e:	2206      	movs	r2, #6
 8016720:	6839      	ldr	r1, [r7, #0]
 8016722:	4618      	mov	r0, r3
 8016724:	f000 f85c 	bl	80167e0 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8016728:	693b      	ldr	r3, [r7, #16]
 801672a:	3306      	adds	r3, #6
 801672c:	2206      	movs	r2, #6
 801672e:	6879      	ldr	r1, [r7, #4]
 8016730:	4618      	mov	r0, r3
 8016732:	f000 f855 	bl	80167e0 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8016736:	68fb      	ldr	r3, [r7, #12]
 8016738:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801673c:	2b06      	cmp	r3, #6
 801673e:	d006      	beq.n	801674e <ethernet_output+0x66>
 8016740:	4b0a      	ldr	r3, [pc, #40]	; (801676c <ethernet_output+0x84>)
 8016742:	f44f 7299 	mov.w	r2, #306	; 0x132
 8016746:	490a      	ldr	r1, [pc, #40]	; (8016770 <ethernet_output+0x88>)
 8016748:	480a      	ldr	r0, [pc, #40]	; (8016774 <ethernet_output+0x8c>)
 801674a:	f000 f879 	bl	8016840 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801674e:	68fb      	ldr	r3, [r7, #12]
 8016750:	699b      	ldr	r3, [r3, #24]
 8016752:	68b9      	ldr	r1, [r7, #8]
 8016754:	68f8      	ldr	r0, [r7, #12]
 8016756:	4798      	blx	r3
 8016758:	4603      	mov	r3, r0
 801675a:	e002      	b.n	8016762 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801675c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801675e:	f06f 0301 	mvn.w	r3, #1
}
 8016762:	4618      	mov	r0, r3
 8016764:	3718      	adds	r7, #24
 8016766:	46bd      	mov	sp, r7
 8016768:	bd80      	pop	{r7, pc}
 801676a:	bf00      	nop
 801676c:	0801b02c 	.word	0x0801b02c
 8016770:	0801b064 	.word	0x0801b064
 8016774:	0801b098 	.word	0x0801b098

08016778 <__libc_init_array>:
 8016778:	b570      	push	{r4, r5, r6, lr}
 801677a:	4d0d      	ldr	r5, [pc, #52]	; (80167b0 <__libc_init_array+0x38>)
 801677c:	4c0d      	ldr	r4, [pc, #52]	; (80167b4 <__libc_init_array+0x3c>)
 801677e:	1b64      	subs	r4, r4, r5
 8016780:	10a4      	asrs	r4, r4, #2
 8016782:	2600      	movs	r6, #0
 8016784:	42a6      	cmp	r6, r4
 8016786:	d109      	bne.n	801679c <__libc_init_array+0x24>
 8016788:	4d0b      	ldr	r5, [pc, #44]	; (80167b8 <__libc_init_array+0x40>)
 801678a:	4c0c      	ldr	r4, [pc, #48]	; (80167bc <__libc_init_array+0x44>)
 801678c:	f001 fad2 	bl	8017d34 <_init>
 8016790:	1b64      	subs	r4, r4, r5
 8016792:	10a4      	asrs	r4, r4, #2
 8016794:	2600      	movs	r6, #0
 8016796:	42a6      	cmp	r6, r4
 8016798:	d105      	bne.n	80167a6 <__libc_init_array+0x2e>
 801679a:	bd70      	pop	{r4, r5, r6, pc}
 801679c:	f855 3b04 	ldr.w	r3, [r5], #4
 80167a0:	4798      	blx	r3
 80167a2:	3601      	adds	r6, #1
 80167a4:	e7ee      	b.n	8016784 <__libc_init_array+0xc>
 80167a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80167aa:	4798      	blx	r3
 80167ac:	3601      	adds	r6, #1
 80167ae:	e7f2      	b.n	8016796 <__libc_init_array+0x1e>
 80167b0:	0801d24c 	.word	0x0801d24c
 80167b4:	0801d24c 	.word	0x0801d24c
 80167b8:	0801d24c 	.word	0x0801d24c
 80167bc:	0801d250 	.word	0x0801d250

080167c0 <memcmp>:
 80167c0:	b510      	push	{r4, lr}
 80167c2:	3901      	subs	r1, #1
 80167c4:	4402      	add	r2, r0
 80167c6:	4290      	cmp	r0, r2
 80167c8:	d101      	bne.n	80167ce <memcmp+0xe>
 80167ca:	2000      	movs	r0, #0
 80167cc:	e005      	b.n	80167da <memcmp+0x1a>
 80167ce:	7803      	ldrb	r3, [r0, #0]
 80167d0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80167d4:	42a3      	cmp	r3, r4
 80167d6:	d001      	beq.n	80167dc <memcmp+0x1c>
 80167d8:	1b18      	subs	r0, r3, r4
 80167da:	bd10      	pop	{r4, pc}
 80167dc:	3001      	adds	r0, #1
 80167de:	e7f2      	b.n	80167c6 <memcmp+0x6>

080167e0 <memcpy>:
 80167e0:	440a      	add	r2, r1
 80167e2:	4291      	cmp	r1, r2
 80167e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80167e8:	d100      	bne.n	80167ec <memcpy+0xc>
 80167ea:	4770      	bx	lr
 80167ec:	b510      	push	{r4, lr}
 80167ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80167f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80167f6:	4291      	cmp	r1, r2
 80167f8:	d1f9      	bne.n	80167ee <memcpy+0xe>
 80167fa:	bd10      	pop	{r4, pc}

080167fc <memmove>:
 80167fc:	4288      	cmp	r0, r1
 80167fe:	b510      	push	{r4, lr}
 8016800:	eb01 0402 	add.w	r4, r1, r2
 8016804:	d902      	bls.n	801680c <memmove+0x10>
 8016806:	4284      	cmp	r4, r0
 8016808:	4623      	mov	r3, r4
 801680a:	d807      	bhi.n	801681c <memmove+0x20>
 801680c:	1e43      	subs	r3, r0, #1
 801680e:	42a1      	cmp	r1, r4
 8016810:	d008      	beq.n	8016824 <memmove+0x28>
 8016812:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016816:	f803 2f01 	strb.w	r2, [r3, #1]!
 801681a:	e7f8      	b.n	801680e <memmove+0x12>
 801681c:	4402      	add	r2, r0
 801681e:	4601      	mov	r1, r0
 8016820:	428a      	cmp	r2, r1
 8016822:	d100      	bne.n	8016826 <memmove+0x2a>
 8016824:	bd10      	pop	{r4, pc}
 8016826:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801682a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801682e:	e7f7      	b.n	8016820 <memmove+0x24>

08016830 <memset>:
 8016830:	4402      	add	r2, r0
 8016832:	4603      	mov	r3, r0
 8016834:	4293      	cmp	r3, r2
 8016836:	d100      	bne.n	801683a <memset+0xa>
 8016838:	4770      	bx	lr
 801683a:	f803 1b01 	strb.w	r1, [r3], #1
 801683e:	e7f9      	b.n	8016834 <memset+0x4>

08016840 <iprintf>:
 8016840:	b40f      	push	{r0, r1, r2, r3}
 8016842:	4b0a      	ldr	r3, [pc, #40]	; (801686c <iprintf+0x2c>)
 8016844:	b513      	push	{r0, r1, r4, lr}
 8016846:	681c      	ldr	r4, [r3, #0]
 8016848:	b124      	cbz	r4, 8016854 <iprintf+0x14>
 801684a:	69a3      	ldr	r3, [r4, #24]
 801684c:	b913      	cbnz	r3, 8016854 <iprintf+0x14>
 801684e:	4620      	mov	r0, r4
 8016850:	f000 fada 	bl	8016e08 <__sinit>
 8016854:	ab05      	add	r3, sp, #20
 8016856:	9a04      	ldr	r2, [sp, #16]
 8016858:	68a1      	ldr	r1, [r4, #8]
 801685a:	9301      	str	r3, [sp, #4]
 801685c:	4620      	mov	r0, r4
 801685e:	f000 fe59 	bl	8017514 <_vfiprintf_r>
 8016862:	b002      	add	sp, #8
 8016864:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016868:	b004      	add	sp, #16
 801686a:	4770      	bx	lr
 801686c:	2000006c 	.word	0x2000006c

08016870 <_puts_r>:
 8016870:	b570      	push	{r4, r5, r6, lr}
 8016872:	460e      	mov	r6, r1
 8016874:	4605      	mov	r5, r0
 8016876:	b118      	cbz	r0, 8016880 <_puts_r+0x10>
 8016878:	6983      	ldr	r3, [r0, #24]
 801687a:	b90b      	cbnz	r3, 8016880 <_puts_r+0x10>
 801687c:	f000 fac4 	bl	8016e08 <__sinit>
 8016880:	69ab      	ldr	r3, [r5, #24]
 8016882:	68ac      	ldr	r4, [r5, #8]
 8016884:	b913      	cbnz	r3, 801688c <_puts_r+0x1c>
 8016886:	4628      	mov	r0, r5
 8016888:	f000 fabe 	bl	8016e08 <__sinit>
 801688c:	4b2c      	ldr	r3, [pc, #176]	; (8016940 <_puts_r+0xd0>)
 801688e:	429c      	cmp	r4, r3
 8016890:	d120      	bne.n	80168d4 <_puts_r+0x64>
 8016892:	686c      	ldr	r4, [r5, #4]
 8016894:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016896:	07db      	lsls	r3, r3, #31
 8016898:	d405      	bmi.n	80168a6 <_puts_r+0x36>
 801689a:	89a3      	ldrh	r3, [r4, #12]
 801689c:	0598      	lsls	r0, r3, #22
 801689e:	d402      	bmi.n	80168a6 <_puts_r+0x36>
 80168a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80168a2:	f000 fb61 	bl	8016f68 <__retarget_lock_acquire_recursive>
 80168a6:	89a3      	ldrh	r3, [r4, #12]
 80168a8:	0719      	lsls	r1, r3, #28
 80168aa:	d51d      	bpl.n	80168e8 <_puts_r+0x78>
 80168ac:	6923      	ldr	r3, [r4, #16]
 80168ae:	b1db      	cbz	r3, 80168e8 <_puts_r+0x78>
 80168b0:	3e01      	subs	r6, #1
 80168b2:	68a3      	ldr	r3, [r4, #8]
 80168b4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80168b8:	3b01      	subs	r3, #1
 80168ba:	60a3      	str	r3, [r4, #8]
 80168bc:	bb39      	cbnz	r1, 801690e <_puts_r+0x9e>
 80168be:	2b00      	cmp	r3, #0
 80168c0:	da38      	bge.n	8016934 <_puts_r+0xc4>
 80168c2:	4622      	mov	r2, r4
 80168c4:	210a      	movs	r1, #10
 80168c6:	4628      	mov	r0, r5
 80168c8:	f000 f8a6 	bl	8016a18 <__swbuf_r>
 80168cc:	3001      	adds	r0, #1
 80168ce:	d011      	beq.n	80168f4 <_puts_r+0x84>
 80168d0:	250a      	movs	r5, #10
 80168d2:	e011      	b.n	80168f8 <_puts_r+0x88>
 80168d4:	4b1b      	ldr	r3, [pc, #108]	; (8016944 <_puts_r+0xd4>)
 80168d6:	429c      	cmp	r4, r3
 80168d8:	d101      	bne.n	80168de <_puts_r+0x6e>
 80168da:	68ac      	ldr	r4, [r5, #8]
 80168dc:	e7da      	b.n	8016894 <_puts_r+0x24>
 80168de:	4b1a      	ldr	r3, [pc, #104]	; (8016948 <_puts_r+0xd8>)
 80168e0:	429c      	cmp	r4, r3
 80168e2:	bf08      	it	eq
 80168e4:	68ec      	ldreq	r4, [r5, #12]
 80168e6:	e7d5      	b.n	8016894 <_puts_r+0x24>
 80168e8:	4621      	mov	r1, r4
 80168ea:	4628      	mov	r0, r5
 80168ec:	f000 f8e6 	bl	8016abc <__swsetup_r>
 80168f0:	2800      	cmp	r0, #0
 80168f2:	d0dd      	beq.n	80168b0 <_puts_r+0x40>
 80168f4:	f04f 35ff 	mov.w	r5, #4294967295
 80168f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80168fa:	07da      	lsls	r2, r3, #31
 80168fc:	d405      	bmi.n	801690a <_puts_r+0x9a>
 80168fe:	89a3      	ldrh	r3, [r4, #12]
 8016900:	059b      	lsls	r3, r3, #22
 8016902:	d402      	bmi.n	801690a <_puts_r+0x9a>
 8016904:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016906:	f000 fb30 	bl	8016f6a <__retarget_lock_release_recursive>
 801690a:	4628      	mov	r0, r5
 801690c:	bd70      	pop	{r4, r5, r6, pc}
 801690e:	2b00      	cmp	r3, #0
 8016910:	da04      	bge.n	801691c <_puts_r+0xac>
 8016912:	69a2      	ldr	r2, [r4, #24]
 8016914:	429a      	cmp	r2, r3
 8016916:	dc06      	bgt.n	8016926 <_puts_r+0xb6>
 8016918:	290a      	cmp	r1, #10
 801691a:	d004      	beq.n	8016926 <_puts_r+0xb6>
 801691c:	6823      	ldr	r3, [r4, #0]
 801691e:	1c5a      	adds	r2, r3, #1
 8016920:	6022      	str	r2, [r4, #0]
 8016922:	7019      	strb	r1, [r3, #0]
 8016924:	e7c5      	b.n	80168b2 <_puts_r+0x42>
 8016926:	4622      	mov	r2, r4
 8016928:	4628      	mov	r0, r5
 801692a:	f000 f875 	bl	8016a18 <__swbuf_r>
 801692e:	3001      	adds	r0, #1
 8016930:	d1bf      	bne.n	80168b2 <_puts_r+0x42>
 8016932:	e7df      	b.n	80168f4 <_puts_r+0x84>
 8016934:	6823      	ldr	r3, [r4, #0]
 8016936:	250a      	movs	r5, #10
 8016938:	1c5a      	adds	r2, r3, #1
 801693a:	6022      	str	r2, [r4, #0]
 801693c:	701d      	strb	r5, [r3, #0]
 801693e:	e7db      	b.n	80168f8 <_puts_r+0x88>
 8016940:	0801d1d0 	.word	0x0801d1d0
 8016944:	0801d1f0 	.word	0x0801d1f0
 8016948:	0801d1b0 	.word	0x0801d1b0

0801694c <puts>:
 801694c:	4b02      	ldr	r3, [pc, #8]	; (8016958 <puts+0xc>)
 801694e:	4601      	mov	r1, r0
 8016950:	6818      	ldr	r0, [r3, #0]
 8016952:	f7ff bf8d 	b.w	8016870 <_puts_r>
 8016956:	bf00      	nop
 8016958:	2000006c 	.word	0x2000006c

0801695c <rand>:
 801695c:	4b16      	ldr	r3, [pc, #88]	; (80169b8 <rand+0x5c>)
 801695e:	b510      	push	{r4, lr}
 8016960:	681c      	ldr	r4, [r3, #0]
 8016962:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8016964:	b9b3      	cbnz	r3, 8016994 <rand+0x38>
 8016966:	2018      	movs	r0, #24
 8016968:	f000 fb66 	bl	8017038 <malloc>
 801696c:	63a0      	str	r0, [r4, #56]	; 0x38
 801696e:	b928      	cbnz	r0, 801697c <rand+0x20>
 8016970:	4602      	mov	r2, r0
 8016972:	4b12      	ldr	r3, [pc, #72]	; (80169bc <rand+0x60>)
 8016974:	4812      	ldr	r0, [pc, #72]	; (80169c0 <rand+0x64>)
 8016976:	214e      	movs	r1, #78	; 0x4e
 8016978:	f000 f90e 	bl	8016b98 <__assert_func>
 801697c:	4a11      	ldr	r2, [pc, #68]	; (80169c4 <rand+0x68>)
 801697e:	4b12      	ldr	r3, [pc, #72]	; (80169c8 <rand+0x6c>)
 8016980:	e9c0 2300 	strd	r2, r3, [r0]
 8016984:	4b11      	ldr	r3, [pc, #68]	; (80169cc <rand+0x70>)
 8016986:	6083      	str	r3, [r0, #8]
 8016988:	230b      	movs	r3, #11
 801698a:	8183      	strh	r3, [r0, #12]
 801698c:	2201      	movs	r2, #1
 801698e:	2300      	movs	r3, #0
 8016990:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8016994:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8016996:	4a0e      	ldr	r2, [pc, #56]	; (80169d0 <rand+0x74>)
 8016998:	6920      	ldr	r0, [r4, #16]
 801699a:	6963      	ldr	r3, [r4, #20]
 801699c:	490d      	ldr	r1, [pc, #52]	; (80169d4 <rand+0x78>)
 801699e:	4342      	muls	r2, r0
 80169a0:	fb01 2203 	mla	r2, r1, r3, r2
 80169a4:	fba0 0101 	umull	r0, r1, r0, r1
 80169a8:	1c43      	adds	r3, r0, #1
 80169aa:	eb42 0001 	adc.w	r0, r2, r1
 80169ae:	e9c4 3004 	strd	r3, r0, [r4, #16]
 80169b2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80169b6:	bd10      	pop	{r4, pc}
 80169b8:	2000006c 	.word	0x2000006c
 80169bc:	0801d100 	.word	0x0801d100
 80169c0:	0801d117 	.word	0x0801d117
 80169c4:	abcd330e 	.word	0xabcd330e
 80169c8:	e66d1234 	.word	0xe66d1234
 80169cc:	0005deec 	.word	0x0005deec
 80169d0:	5851f42d 	.word	0x5851f42d
 80169d4:	4c957f2d 	.word	0x4c957f2d

080169d8 <siprintf>:
 80169d8:	b40e      	push	{r1, r2, r3}
 80169da:	b500      	push	{lr}
 80169dc:	b09c      	sub	sp, #112	; 0x70
 80169de:	ab1d      	add	r3, sp, #116	; 0x74
 80169e0:	9002      	str	r0, [sp, #8]
 80169e2:	9006      	str	r0, [sp, #24]
 80169e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80169e8:	4809      	ldr	r0, [pc, #36]	; (8016a10 <siprintf+0x38>)
 80169ea:	9107      	str	r1, [sp, #28]
 80169ec:	9104      	str	r1, [sp, #16]
 80169ee:	4909      	ldr	r1, [pc, #36]	; (8016a14 <siprintf+0x3c>)
 80169f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80169f4:	9105      	str	r1, [sp, #20]
 80169f6:	6800      	ldr	r0, [r0, #0]
 80169f8:	9301      	str	r3, [sp, #4]
 80169fa:	a902      	add	r1, sp, #8
 80169fc:	f000 fc60 	bl	80172c0 <_svfiprintf_r>
 8016a00:	9b02      	ldr	r3, [sp, #8]
 8016a02:	2200      	movs	r2, #0
 8016a04:	701a      	strb	r2, [r3, #0]
 8016a06:	b01c      	add	sp, #112	; 0x70
 8016a08:	f85d eb04 	ldr.w	lr, [sp], #4
 8016a0c:	b003      	add	sp, #12
 8016a0e:	4770      	bx	lr
 8016a10:	2000006c 	.word	0x2000006c
 8016a14:	ffff0208 	.word	0xffff0208

08016a18 <__swbuf_r>:
 8016a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016a1a:	460e      	mov	r6, r1
 8016a1c:	4614      	mov	r4, r2
 8016a1e:	4605      	mov	r5, r0
 8016a20:	b118      	cbz	r0, 8016a2a <__swbuf_r+0x12>
 8016a22:	6983      	ldr	r3, [r0, #24]
 8016a24:	b90b      	cbnz	r3, 8016a2a <__swbuf_r+0x12>
 8016a26:	f000 f9ef 	bl	8016e08 <__sinit>
 8016a2a:	4b21      	ldr	r3, [pc, #132]	; (8016ab0 <__swbuf_r+0x98>)
 8016a2c:	429c      	cmp	r4, r3
 8016a2e:	d12b      	bne.n	8016a88 <__swbuf_r+0x70>
 8016a30:	686c      	ldr	r4, [r5, #4]
 8016a32:	69a3      	ldr	r3, [r4, #24]
 8016a34:	60a3      	str	r3, [r4, #8]
 8016a36:	89a3      	ldrh	r3, [r4, #12]
 8016a38:	071a      	lsls	r2, r3, #28
 8016a3a:	d52f      	bpl.n	8016a9c <__swbuf_r+0x84>
 8016a3c:	6923      	ldr	r3, [r4, #16]
 8016a3e:	b36b      	cbz	r3, 8016a9c <__swbuf_r+0x84>
 8016a40:	6923      	ldr	r3, [r4, #16]
 8016a42:	6820      	ldr	r0, [r4, #0]
 8016a44:	1ac0      	subs	r0, r0, r3
 8016a46:	6963      	ldr	r3, [r4, #20]
 8016a48:	b2f6      	uxtb	r6, r6
 8016a4a:	4283      	cmp	r3, r0
 8016a4c:	4637      	mov	r7, r6
 8016a4e:	dc04      	bgt.n	8016a5a <__swbuf_r+0x42>
 8016a50:	4621      	mov	r1, r4
 8016a52:	4628      	mov	r0, r5
 8016a54:	f000 f944 	bl	8016ce0 <_fflush_r>
 8016a58:	bb30      	cbnz	r0, 8016aa8 <__swbuf_r+0x90>
 8016a5a:	68a3      	ldr	r3, [r4, #8]
 8016a5c:	3b01      	subs	r3, #1
 8016a5e:	60a3      	str	r3, [r4, #8]
 8016a60:	6823      	ldr	r3, [r4, #0]
 8016a62:	1c5a      	adds	r2, r3, #1
 8016a64:	6022      	str	r2, [r4, #0]
 8016a66:	701e      	strb	r6, [r3, #0]
 8016a68:	6963      	ldr	r3, [r4, #20]
 8016a6a:	3001      	adds	r0, #1
 8016a6c:	4283      	cmp	r3, r0
 8016a6e:	d004      	beq.n	8016a7a <__swbuf_r+0x62>
 8016a70:	89a3      	ldrh	r3, [r4, #12]
 8016a72:	07db      	lsls	r3, r3, #31
 8016a74:	d506      	bpl.n	8016a84 <__swbuf_r+0x6c>
 8016a76:	2e0a      	cmp	r6, #10
 8016a78:	d104      	bne.n	8016a84 <__swbuf_r+0x6c>
 8016a7a:	4621      	mov	r1, r4
 8016a7c:	4628      	mov	r0, r5
 8016a7e:	f000 f92f 	bl	8016ce0 <_fflush_r>
 8016a82:	b988      	cbnz	r0, 8016aa8 <__swbuf_r+0x90>
 8016a84:	4638      	mov	r0, r7
 8016a86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016a88:	4b0a      	ldr	r3, [pc, #40]	; (8016ab4 <__swbuf_r+0x9c>)
 8016a8a:	429c      	cmp	r4, r3
 8016a8c:	d101      	bne.n	8016a92 <__swbuf_r+0x7a>
 8016a8e:	68ac      	ldr	r4, [r5, #8]
 8016a90:	e7cf      	b.n	8016a32 <__swbuf_r+0x1a>
 8016a92:	4b09      	ldr	r3, [pc, #36]	; (8016ab8 <__swbuf_r+0xa0>)
 8016a94:	429c      	cmp	r4, r3
 8016a96:	bf08      	it	eq
 8016a98:	68ec      	ldreq	r4, [r5, #12]
 8016a9a:	e7ca      	b.n	8016a32 <__swbuf_r+0x1a>
 8016a9c:	4621      	mov	r1, r4
 8016a9e:	4628      	mov	r0, r5
 8016aa0:	f000 f80c 	bl	8016abc <__swsetup_r>
 8016aa4:	2800      	cmp	r0, #0
 8016aa6:	d0cb      	beq.n	8016a40 <__swbuf_r+0x28>
 8016aa8:	f04f 37ff 	mov.w	r7, #4294967295
 8016aac:	e7ea      	b.n	8016a84 <__swbuf_r+0x6c>
 8016aae:	bf00      	nop
 8016ab0:	0801d1d0 	.word	0x0801d1d0
 8016ab4:	0801d1f0 	.word	0x0801d1f0
 8016ab8:	0801d1b0 	.word	0x0801d1b0

08016abc <__swsetup_r>:
 8016abc:	4b32      	ldr	r3, [pc, #200]	; (8016b88 <__swsetup_r+0xcc>)
 8016abe:	b570      	push	{r4, r5, r6, lr}
 8016ac0:	681d      	ldr	r5, [r3, #0]
 8016ac2:	4606      	mov	r6, r0
 8016ac4:	460c      	mov	r4, r1
 8016ac6:	b125      	cbz	r5, 8016ad2 <__swsetup_r+0x16>
 8016ac8:	69ab      	ldr	r3, [r5, #24]
 8016aca:	b913      	cbnz	r3, 8016ad2 <__swsetup_r+0x16>
 8016acc:	4628      	mov	r0, r5
 8016ace:	f000 f99b 	bl	8016e08 <__sinit>
 8016ad2:	4b2e      	ldr	r3, [pc, #184]	; (8016b8c <__swsetup_r+0xd0>)
 8016ad4:	429c      	cmp	r4, r3
 8016ad6:	d10f      	bne.n	8016af8 <__swsetup_r+0x3c>
 8016ad8:	686c      	ldr	r4, [r5, #4]
 8016ada:	89a3      	ldrh	r3, [r4, #12]
 8016adc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016ae0:	0719      	lsls	r1, r3, #28
 8016ae2:	d42c      	bmi.n	8016b3e <__swsetup_r+0x82>
 8016ae4:	06dd      	lsls	r5, r3, #27
 8016ae6:	d411      	bmi.n	8016b0c <__swsetup_r+0x50>
 8016ae8:	2309      	movs	r3, #9
 8016aea:	6033      	str	r3, [r6, #0]
 8016aec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8016af0:	81a3      	strh	r3, [r4, #12]
 8016af2:	f04f 30ff 	mov.w	r0, #4294967295
 8016af6:	e03e      	b.n	8016b76 <__swsetup_r+0xba>
 8016af8:	4b25      	ldr	r3, [pc, #148]	; (8016b90 <__swsetup_r+0xd4>)
 8016afa:	429c      	cmp	r4, r3
 8016afc:	d101      	bne.n	8016b02 <__swsetup_r+0x46>
 8016afe:	68ac      	ldr	r4, [r5, #8]
 8016b00:	e7eb      	b.n	8016ada <__swsetup_r+0x1e>
 8016b02:	4b24      	ldr	r3, [pc, #144]	; (8016b94 <__swsetup_r+0xd8>)
 8016b04:	429c      	cmp	r4, r3
 8016b06:	bf08      	it	eq
 8016b08:	68ec      	ldreq	r4, [r5, #12]
 8016b0a:	e7e6      	b.n	8016ada <__swsetup_r+0x1e>
 8016b0c:	0758      	lsls	r0, r3, #29
 8016b0e:	d512      	bpl.n	8016b36 <__swsetup_r+0x7a>
 8016b10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016b12:	b141      	cbz	r1, 8016b26 <__swsetup_r+0x6a>
 8016b14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016b18:	4299      	cmp	r1, r3
 8016b1a:	d002      	beq.n	8016b22 <__swsetup_r+0x66>
 8016b1c:	4630      	mov	r0, r6
 8016b1e:	f000 fa93 	bl	8017048 <_free_r>
 8016b22:	2300      	movs	r3, #0
 8016b24:	6363      	str	r3, [r4, #52]	; 0x34
 8016b26:	89a3      	ldrh	r3, [r4, #12]
 8016b28:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8016b2c:	81a3      	strh	r3, [r4, #12]
 8016b2e:	2300      	movs	r3, #0
 8016b30:	6063      	str	r3, [r4, #4]
 8016b32:	6923      	ldr	r3, [r4, #16]
 8016b34:	6023      	str	r3, [r4, #0]
 8016b36:	89a3      	ldrh	r3, [r4, #12]
 8016b38:	f043 0308 	orr.w	r3, r3, #8
 8016b3c:	81a3      	strh	r3, [r4, #12]
 8016b3e:	6923      	ldr	r3, [r4, #16]
 8016b40:	b94b      	cbnz	r3, 8016b56 <__swsetup_r+0x9a>
 8016b42:	89a3      	ldrh	r3, [r4, #12]
 8016b44:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8016b48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016b4c:	d003      	beq.n	8016b56 <__swsetup_r+0x9a>
 8016b4e:	4621      	mov	r1, r4
 8016b50:	4630      	mov	r0, r6
 8016b52:	f000 fa31 	bl	8016fb8 <__smakebuf_r>
 8016b56:	89a0      	ldrh	r0, [r4, #12]
 8016b58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016b5c:	f010 0301 	ands.w	r3, r0, #1
 8016b60:	d00a      	beq.n	8016b78 <__swsetup_r+0xbc>
 8016b62:	2300      	movs	r3, #0
 8016b64:	60a3      	str	r3, [r4, #8]
 8016b66:	6963      	ldr	r3, [r4, #20]
 8016b68:	425b      	negs	r3, r3
 8016b6a:	61a3      	str	r3, [r4, #24]
 8016b6c:	6923      	ldr	r3, [r4, #16]
 8016b6e:	b943      	cbnz	r3, 8016b82 <__swsetup_r+0xc6>
 8016b70:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8016b74:	d1ba      	bne.n	8016aec <__swsetup_r+0x30>
 8016b76:	bd70      	pop	{r4, r5, r6, pc}
 8016b78:	0781      	lsls	r1, r0, #30
 8016b7a:	bf58      	it	pl
 8016b7c:	6963      	ldrpl	r3, [r4, #20]
 8016b7e:	60a3      	str	r3, [r4, #8]
 8016b80:	e7f4      	b.n	8016b6c <__swsetup_r+0xb0>
 8016b82:	2000      	movs	r0, #0
 8016b84:	e7f7      	b.n	8016b76 <__swsetup_r+0xba>
 8016b86:	bf00      	nop
 8016b88:	2000006c 	.word	0x2000006c
 8016b8c:	0801d1d0 	.word	0x0801d1d0
 8016b90:	0801d1f0 	.word	0x0801d1f0
 8016b94:	0801d1b0 	.word	0x0801d1b0

08016b98 <__assert_func>:
 8016b98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016b9a:	4614      	mov	r4, r2
 8016b9c:	461a      	mov	r2, r3
 8016b9e:	4b09      	ldr	r3, [pc, #36]	; (8016bc4 <__assert_func+0x2c>)
 8016ba0:	681b      	ldr	r3, [r3, #0]
 8016ba2:	4605      	mov	r5, r0
 8016ba4:	68d8      	ldr	r0, [r3, #12]
 8016ba6:	b14c      	cbz	r4, 8016bbc <__assert_func+0x24>
 8016ba8:	4b07      	ldr	r3, [pc, #28]	; (8016bc8 <__assert_func+0x30>)
 8016baa:	9100      	str	r1, [sp, #0]
 8016bac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016bb0:	4906      	ldr	r1, [pc, #24]	; (8016bcc <__assert_func+0x34>)
 8016bb2:	462b      	mov	r3, r5
 8016bb4:	f000 f9a6 	bl	8016f04 <fiprintf>
 8016bb8:	f000 ffd6 	bl	8017b68 <abort>
 8016bbc:	4b04      	ldr	r3, [pc, #16]	; (8016bd0 <__assert_func+0x38>)
 8016bbe:	461c      	mov	r4, r3
 8016bc0:	e7f3      	b.n	8016baa <__assert_func+0x12>
 8016bc2:	bf00      	nop
 8016bc4:	2000006c 	.word	0x2000006c
 8016bc8:	0801d172 	.word	0x0801d172
 8016bcc:	0801d17f 	.word	0x0801d17f
 8016bd0:	0801d1ad 	.word	0x0801d1ad

08016bd4 <__sflush_r>:
 8016bd4:	898a      	ldrh	r2, [r1, #12]
 8016bd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016bda:	4605      	mov	r5, r0
 8016bdc:	0710      	lsls	r0, r2, #28
 8016bde:	460c      	mov	r4, r1
 8016be0:	d458      	bmi.n	8016c94 <__sflush_r+0xc0>
 8016be2:	684b      	ldr	r3, [r1, #4]
 8016be4:	2b00      	cmp	r3, #0
 8016be6:	dc05      	bgt.n	8016bf4 <__sflush_r+0x20>
 8016be8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8016bea:	2b00      	cmp	r3, #0
 8016bec:	dc02      	bgt.n	8016bf4 <__sflush_r+0x20>
 8016bee:	2000      	movs	r0, #0
 8016bf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016bf4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016bf6:	2e00      	cmp	r6, #0
 8016bf8:	d0f9      	beq.n	8016bee <__sflush_r+0x1a>
 8016bfa:	2300      	movs	r3, #0
 8016bfc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8016c00:	682f      	ldr	r7, [r5, #0]
 8016c02:	602b      	str	r3, [r5, #0]
 8016c04:	d032      	beq.n	8016c6c <__sflush_r+0x98>
 8016c06:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8016c08:	89a3      	ldrh	r3, [r4, #12]
 8016c0a:	075a      	lsls	r2, r3, #29
 8016c0c:	d505      	bpl.n	8016c1a <__sflush_r+0x46>
 8016c0e:	6863      	ldr	r3, [r4, #4]
 8016c10:	1ac0      	subs	r0, r0, r3
 8016c12:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016c14:	b10b      	cbz	r3, 8016c1a <__sflush_r+0x46>
 8016c16:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016c18:	1ac0      	subs	r0, r0, r3
 8016c1a:	2300      	movs	r3, #0
 8016c1c:	4602      	mov	r2, r0
 8016c1e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016c20:	6a21      	ldr	r1, [r4, #32]
 8016c22:	4628      	mov	r0, r5
 8016c24:	47b0      	blx	r6
 8016c26:	1c43      	adds	r3, r0, #1
 8016c28:	89a3      	ldrh	r3, [r4, #12]
 8016c2a:	d106      	bne.n	8016c3a <__sflush_r+0x66>
 8016c2c:	6829      	ldr	r1, [r5, #0]
 8016c2e:	291d      	cmp	r1, #29
 8016c30:	d82c      	bhi.n	8016c8c <__sflush_r+0xb8>
 8016c32:	4a2a      	ldr	r2, [pc, #168]	; (8016cdc <__sflush_r+0x108>)
 8016c34:	40ca      	lsrs	r2, r1
 8016c36:	07d6      	lsls	r6, r2, #31
 8016c38:	d528      	bpl.n	8016c8c <__sflush_r+0xb8>
 8016c3a:	2200      	movs	r2, #0
 8016c3c:	6062      	str	r2, [r4, #4]
 8016c3e:	04d9      	lsls	r1, r3, #19
 8016c40:	6922      	ldr	r2, [r4, #16]
 8016c42:	6022      	str	r2, [r4, #0]
 8016c44:	d504      	bpl.n	8016c50 <__sflush_r+0x7c>
 8016c46:	1c42      	adds	r2, r0, #1
 8016c48:	d101      	bne.n	8016c4e <__sflush_r+0x7a>
 8016c4a:	682b      	ldr	r3, [r5, #0]
 8016c4c:	b903      	cbnz	r3, 8016c50 <__sflush_r+0x7c>
 8016c4e:	6560      	str	r0, [r4, #84]	; 0x54
 8016c50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016c52:	602f      	str	r7, [r5, #0]
 8016c54:	2900      	cmp	r1, #0
 8016c56:	d0ca      	beq.n	8016bee <__sflush_r+0x1a>
 8016c58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016c5c:	4299      	cmp	r1, r3
 8016c5e:	d002      	beq.n	8016c66 <__sflush_r+0x92>
 8016c60:	4628      	mov	r0, r5
 8016c62:	f000 f9f1 	bl	8017048 <_free_r>
 8016c66:	2000      	movs	r0, #0
 8016c68:	6360      	str	r0, [r4, #52]	; 0x34
 8016c6a:	e7c1      	b.n	8016bf0 <__sflush_r+0x1c>
 8016c6c:	6a21      	ldr	r1, [r4, #32]
 8016c6e:	2301      	movs	r3, #1
 8016c70:	4628      	mov	r0, r5
 8016c72:	47b0      	blx	r6
 8016c74:	1c41      	adds	r1, r0, #1
 8016c76:	d1c7      	bne.n	8016c08 <__sflush_r+0x34>
 8016c78:	682b      	ldr	r3, [r5, #0]
 8016c7a:	2b00      	cmp	r3, #0
 8016c7c:	d0c4      	beq.n	8016c08 <__sflush_r+0x34>
 8016c7e:	2b1d      	cmp	r3, #29
 8016c80:	d001      	beq.n	8016c86 <__sflush_r+0xb2>
 8016c82:	2b16      	cmp	r3, #22
 8016c84:	d101      	bne.n	8016c8a <__sflush_r+0xb6>
 8016c86:	602f      	str	r7, [r5, #0]
 8016c88:	e7b1      	b.n	8016bee <__sflush_r+0x1a>
 8016c8a:	89a3      	ldrh	r3, [r4, #12]
 8016c8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016c90:	81a3      	strh	r3, [r4, #12]
 8016c92:	e7ad      	b.n	8016bf0 <__sflush_r+0x1c>
 8016c94:	690f      	ldr	r7, [r1, #16]
 8016c96:	2f00      	cmp	r7, #0
 8016c98:	d0a9      	beq.n	8016bee <__sflush_r+0x1a>
 8016c9a:	0793      	lsls	r3, r2, #30
 8016c9c:	680e      	ldr	r6, [r1, #0]
 8016c9e:	bf08      	it	eq
 8016ca0:	694b      	ldreq	r3, [r1, #20]
 8016ca2:	600f      	str	r7, [r1, #0]
 8016ca4:	bf18      	it	ne
 8016ca6:	2300      	movne	r3, #0
 8016ca8:	eba6 0807 	sub.w	r8, r6, r7
 8016cac:	608b      	str	r3, [r1, #8]
 8016cae:	f1b8 0f00 	cmp.w	r8, #0
 8016cb2:	dd9c      	ble.n	8016bee <__sflush_r+0x1a>
 8016cb4:	6a21      	ldr	r1, [r4, #32]
 8016cb6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8016cb8:	4643      	mov	r3, r8
 8016cba:	463a      	mov	r2, r7
 8016cbc:	4628      	mov	r0, r5
 8016cbe:	47b0      	blx	r6
 8016cc0:	2800      	cmp	r0, #0
 8016cc2:	dc06      	bgt.n	8016cd2 <__sflush_r+0xfe>
 8016cc4:	89a3      	ldrh	r3, [r4, #12]
 8016cc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016cca:	81a3      	strh	r3, [r4, #12]
 8016ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8016cd0:	e78e      	b.n	8016bf0 <__sflush_r+0x1c>
 8016cd2:	4407      	add	r7, r0
 8016cd4:	eba8 0800 	sub.w	r8, r8, r0
 8016cd8:	e7e9      	b.n	8016cae <__sflush_r+0xda>
 8016cda:	bf00      	nop
 8016cdc:	20400001 	.word	0x20400001

08016ce0 <_fflush_r>:
 8016ce0:	b538      	push	{r3, r4, r5, lr}
 8016ce2:	690b      	ldr	r3, [r1, #16]
 8016ce4:	4605      	mov	r5, r0
 8016ce6:	460c      	mov	r4, r1
 8016ce8:	b913      	cbnz	r3, 8016cf0 <_fflush_r+0x10>
 8016cea:	2500      	movs	r5, #0
 8016cec:	4628      	mov	r0, r5
 8016cee:	bd38      	pop	{r3, r4, r5, pc}
 8016cf0:	b118      	cbz	r0, 8016cfa <_fflush_r+0x1a>
 8016cf2:	6983      	ldr	r3, [r0, #24]
 8016cf4:	b90b      	cbnz	r3, 8016cfa <_fflush_r+0x1a>
 8016cf6:	f000 f887 	bl	8016e08 <__sinit>
 8016cfa:	4b14      	ldr	r3, [pc, #80]	; (8016d4c <_fflush_r+0x6c>)
 8016cfc:	429c      	cmp	r4, r3
 8016cfe:	d11b      	bne.n	8016d38 <_fflush_r+0x58>
 8016d00:	686c      	ldr	r4, [r5, #4]
 8016d02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016d06:	2b00      	cmp	r3, #0
 8016d08:	d0ef      	beq.n	8016cea <_fflush_r+0xa>
 8016d0a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8016d0c:	07d0      	lsls	r0, r2, #31
 8016d0e:	d404      	bmi.n	8016d1a <_fflush_r+0x3a>
 8016d10:	0599      	lsls	r1, r3, #22
 8016d12:	d402      	bmi.n	8016d1a <_fflush_r+0x3a>
 8016d14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016d16:	f000 f927 	bl	8016f68 <__retarget_lock_acquire_recursive>
 8016d1a:	4628      	mov	r0, r5
 8016d1c:	4621      	mov	r1, r4
 8016d1e:	f7ff ff59 	bl	8016bd4 <__sflush_r>
 8016d22:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016d24:	07da      	lsls	r2, r3, #31
 8016d26:	4605      	mov	r5, r0
 8016d28:	d4e0      	bmi.n	8016cec <_fflush_r+0xc>
 8016d2a:	89a3      	ldrh	r3, [r4, #12]
 8016d2c:	059b      	lsls	r3, r3, #22
 8016d2e:	d4dd      	bmi.n	8016cec <_fflush_r+0xc>
 8016d30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016d32:	f000 f91a 	bl	8016f6a <__retarget_lock_release_recursive>
 8016d36:	e7d9      	b.n	8016cec <_fflush_r+0xc>
 8016d38:	4b05      	ldr	r3, [pc, #20]	; (8016d50 <_fflush_r+0x70>)
 8016d3a:	429c      	cmp	r4, r3
 8016d3c:	d101      	bne.n	8016d42 <_fflush_r+0x62>
 8016d3e:	68ac      	ldr	r4, [r5, #8]
 8016d40:	e7df      	b.n	8016d02 <_fflush_r+0x22>
 8016d42:	4b04      	ldr	r3, [pc, #16]	; (8016d54 <_fflush_r+0x74>)
 8016d44:	429c      	cmp	r4, r3
 8016d46:	bf08      	it	eq
 8016d48:	68ec      	ldreq	r4, [r5, #12]
 8016d4a:	e7da      	b.n	8016d02 <_fflush_r+0x22>
 8016d4c:	0801d1d0 	.word	0x0801d1d0
 8016d50:	0801d1f0 	.word	0x0801d1f0
 8016d54:	0801d1b0 	.word	0x0801d1b0

08016d58 <std>:
 8016d58:	2300      	movs	r3, #0
 8016d5a:	b510      	push	{r4, lr}
 8016d5c:	4604      	mov	r4, r0
 8016d5e:	e9c0 3300 	strd	r3, r3, [r0]
 8016d62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016d66:	6083      	str	r3, [r0, #8]
 8016d68:	8181      	strh	r1, [r0, #12]
 8016d6a:	6643      	str	r3, [r0, #100]	; 0x64
 8016d6c:	81c2      	strh	r2, [r0, #14]
 8016d6e:	6183      	str	r3, [r0, #24]
 8016d70:	4619      	mov	r1, r3
 8016d72:	2208      	movs	r2, #8
 8016d74:	305c      	adds	r0, #92	; 0x5c
 8016d76:	f7ff fd5b 	bl	8016830 <memset>
 8016d7a:	4b05      	ldr	r3, [pc, #20]	; (8016d90 <std+0x38>)
 8016d7c:	6263      	str	r3, [r4, #36]	; 0x24
 8016d7e:	4b05      	ldr	r3, [pc, #20]	; (8016d94 <std+0x3c>)
 8016d80:	62a3      	str	r3, [r4, #40]	; 0x28
 8016d82:	4b05      	ldr	r3, [pc, #20]	; (8016d98 <std+0x40>)
 8016d84:	62e3      	str	r3, [r4, #44]	; 0x2c
 8016d86:	4b05      	ldr	r3, [pc, #20]	; (8016d9c <std+0x44>)
 8016d88:	6224      	str	r4, [r4, #32]
 8016d8a:	6323      	str	r3, [r4, #48]	; 0x30
 8016d8c:	bd10      	pop	{r4, pc}
 8016d8e:	bf00      	nop
 8016d90:	08017abd 	.word	0x08017abd
 8016d94:	08017adf 	.word	0x08017adf
 8016d98:	08017b17 	.word	0x08017b17
 8016d9c:	08017b3b 	.word	0x08017b3b

08016da0 <_cleanup_r>:
 8016da0:	4901      	ldr	r1, [pc, #4]	; (8016da8 <_cleanup_r+0x8>)
 8016da2:	f000 b8c1 	b.w	8016f28 <_fwalk_reent>
 8016da6:	bf00      	nop
 8016da8:	08016ce1 	.word	0x08016ce1

08016dac <__sfmoreglue>:
 8016dac:	b570      	push	{r4, r5, r6, lr}
 8016dae:	2268      	movs	r2, #104	; 0x68
 8016db0:	1e4d      	subs	r5, r1, #1
 8016db2:	4355      	muls	r5, r2
 8016db4:	460e      	mov	r6, r1
 8016db6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8016dba:	f000 f9b1 	bl	8017120 <_malloc_r>
 8016dbe:	4604      	mov	r4, r0
 8016dc0:	b140      	cbz	r0, 8016dd4 <__sfmoreglue+0x28>
 8016dc2:	2100      	movs	r1, #0
 8016dc4:	e9c0 1600 	strd	r1, r6, [r0]
 8016dc8:	300c      	adds	r0, #12
 8016dca:	60a0      	str	r0, [r4, #8]
 8016dcc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8016dd0:	f7ff fd2e 	bl	8016830 <memset>
 8016dd4:	4620      	mov	r0, r4
 8016dd6:	bd70      	pop	{r4, r5, r6, pc}

08016dd8 <__sfp_lock_acquire>:
 8016dd8:	4801      	ldr	r0, [pc, #4]	; (8016de0 <__sfp_lock_acquire+0x8>)
 8016dda:	f000 b8c5 	b.w	8016f68 <__retarget_lock_acquire_recursive>
 8016dde:	bf00      	nop
 8016de0:	20008d09 	.word	0x20008d09

08016de4 <__sfp_lock_release>:
 8016de4:	4801      	ldr	r0, [pc, #4]	; (8016dec <__sfp_lock_release+0x8>)
 8016de6:	f000 b8c0 	b.w	8016f6a <__retarget_lock_release_recursive>
 8016dea:	bf00      	nop
 8016dec:	20008d09 	.word	0x20008d09

08016df0 <__sinit_lock_acquire>:
 8016df0:	4801      	ldr	r0, [pc, #4]	; (8016df8 <__sinit_lock_acquire+0x8>)
 8016df2:	f000 b8b9 	b.w	8016f68 <__retarget_lock_acquire_recursive>
 8016df6:	bf00      	nop
 8016df8:	20008d0a 	.word	0x20008d0a

08016dfc <__sinit_lock_release>:
 8016dfc:	4801      	ldr	r0, [pc, #4]	; (8016e04 <__sinit_lock_release+0x8>)
 8016dfe:	f000 b8b4 	b.w	8016f6a <__retarget_lock_release_recursive>
 8016e02:	bf00      	nop
 8016e04:	20008d0a 	.word	0x20008d0a

08016e08 <__sinit>:
 8016e08:	b510      	push	{r4, lr}
 8016e0a:	4604      	mov	r4, r0
 8016e0c:	f7ff fff0 	bl	8016df0 <__sinit_lock_acquire>
 8016e10:	69a3      	ldr	r3, [r4, #24]
 8016e12:	b11b      	cbz	r3, 8016e1c <__sinit+0x14>
 8016e14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016e18:	f7ff bff0 	b.w	8016dfc <__sinit_lock_release>
 8016e1c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8016e20:	6523      	str	r3, [r4, #80]	; 0x50
 8016e22:	4b13      	ldr	r3, [pc, #76]	; (8016e70 <__sinit+0x68>)
 8016e24:	4a13      	ldr	r2, [pc, #76]	; (8016e74 <__sinit+0x6c>)
 8016e26:	681b      	ldr	r3, [r3, #0]
 8016e28:	62a2      	str	r2, [r4, #40]	; 0x28
 8016e2a:	42a3      	cmp	r3, r4
 8016e2c:	bf04      	itt	eq
 8016e2e:	2301      	moveq	r3, #1
 8016e30:	61a3      	streq	r3, [r4, #24]
 8016e32:	4620      	mov	r0, r4
 8016e34:	f000 f820 	bl	8016e78 <__sfp>
 8016e38:	6060      	str	r0, [r4, #4]
 8016e3a:	4620      	mov	r0, r4
 8016e3c:	f000 f81c 	bl	8016e78 <__sfp>
 8016e40:	60a0      	str	r0, [r4, #8]
 8016e42:	4620      	mov	r0, r4
 8016e44:	f000 f818 	bl	8016e78 <__sfp>
 8016e48:	2200      	movs	r2, #0
 8016e4a:	60e0      	str	r0, [r4, #12]
 8016e4c:	2104      	movs	r1, #4
 8016e4e:	6860      	ldr	r0, [r4, #4]
 8016e50:	f7ff ff82 	bl	8016d58 <std>
 8016e54:	68a0      	ldr	r0, [r4, #8]
 8016e56:	2201      	movs	r2, #1
 8016e58:	2109      	movs	r1, #9
 8016e5a:	f7ff ff7d 	bl	8016d58 <std>
 8016e5e:	68e0      	ldr	r0, [r4, #12]
 8016e60:	2202      	movs	r2, #2
 8016e62:	2112      	movs	r1, #18
 8016e64:	f7ff ff78 	bl	8016d58 <std>
 8016e68:	2301      	movs	r3, #1
 8016e6a:	61a3      	str	r3, [r4, #24]
 8016e6c:	e7d2      	b.n	8016e14 <__sinit+0xc>
 8016e6e:	bf00      	nop
 8016e70:	0801d0fc 	.word	0x0801d0fc
 8016e74:	08016da1 	.word	0x08016da1

08016e78 <__sfp>:
 8016e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016e7a:	4607      	mov	r7, r0
 8016e7c:	f7ff ffac 	bl	8016dd8 <__sfp_lock_acquire>
 8016e80:	4b1e      	ldr	r3, [pc, #120]	; (8016efc <__sfp+0x84>)
 8016e82:	681e      	ldr	r6, [r3, #0]
 8016e84:	69b3      	ldr	r3, [r6, #24]
 8016e86:	b913      	cbnz	r3, 8016e8e <__sfp+0x16>
 8016e88:	4630      	mov	r0, r6
 8016e8a:	f7ff ffbd 	bl	8016e08 <__sinit>
 8016e8e:	3648      	adds	r6, #72	; 0x48
 8016e90:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8016e94:	3b01      	subs	r3, #1
 8016e96:	d503      	bpl.n	8016ea0 <__sfp+0x28>
 8016e98:	6833      	ldr	r3, [r6, #0]
 8016e9a:	b30b      	cbz	r3, 8016ee0 <__sfp+0x68>
 8016e9c:	6836      	ldr	r6, [r6, #0]
 8016e9e:	e7f7      	b.n	8016e90 <__sfp+0x18>
 8016ea0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8016ea4:	b9d5      	cbnz	r5, 8016edc <__sfp+0x64>
 8016ea6:	4b16      	ldr	r3, [pc, #88]	; (8016f00 <__sfp+0x88>)
 8016ea8:	60e3      	str	r3, [r4, #12]
 8016eaa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8016eae:	6665      	str	r5, [r4, #100]	; 0x64
 8016eb0:	f000 f859 	bl	8016f66 <__retarget_lock_init_recursive>
 8016eb4:	f7ff ff96 	bl	8016de4 <__sfp_lock_release>
 8016eb8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8016ebc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8016ec0:	6025      	str	r5, [r4, #0]
 8016ec2:	61a5      	str	r5, [r4, #24]
 8016ec4:	2208      	movs	r2, #8
 8016ec6:	4629      	mov	r1, r5
 8016ec8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8016ecc:	f7ff fcb0 	bl	8016830 <memset>
 8016ed0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8016ed4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8016ed8:	4620      	mov	r0, r4
 8016eda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016edc:	3468      	adds	r4, #104	; 0x68
 8016ede:	e7d9      	b.n	8016e94 <__sfp+0x1c>
 8016ee0:	2104      	movs	r1, #4
 8016ee2:	4638      	mov	r0, r7
 8016ee4:	f7ff ff62 	bl	8016dac <__sfmoreglue>
 8016ee8:	4604      	mov	r4, r0
 8016eea:	6030      	str	r0, [r6, #0]
 8016eec:	2800      	cmp	r0, #0
 8016eee:	d1d5      	bne.n	8016e9c <__sfp+0x24>
 8016ef0:	f7ff ff78 	bl	8016de4 <__sfp_lock_release>
 8016ef4:	230c      	movs	r3, #12
 8016ef6:	603b      	str	r3, [r7, #0]
 8016ef8:	e7ee      	b.n	8016ed8 <__sfp+0x60>
 8016efa:	bf00      	nop
 8016efc:	0801d0fc 	.word	0x0801d0fc
 8016f00:	ffff0001 	.word	0xffff0001

08016f04 <fiprintf>:
 8016f04:	b40e      	push	{r1, r2, r3}
 8016f06:	b503      	push	{r0, r1, lr}
 8016f08:	4601      	mov	r1, r0
 8016f0a:	ab03      	add	r3, sp, #12
 8016f0c:	4805      	ldr	r0, [pc, #20]	; (8016f24 <fiprintf+0x20>)
 8016f0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8016f12:	6800      	ldr	r0, [r0, #0]
 8016f14:	9301      	str	r3, [sp, #4]
 8016f16:	f000 fafd 	bl	8017514 <_vfiprintf_r>
 8016f1a:	b002      	add	sp, #8
 8016f1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8016f20:	b003      	add	sp, #12
 8016f22:	4770      	bx	lr
 8016f24:	2000006c 	.word	0x2000006c

08016f28 <_fwalk_reent>:
 8016f28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016f2c:	4606      	mov	r6, r0
 8016f2e:	4688      	mov	r8, r1
 8016f30:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8016f34:	2700      	movs	r7, #0
 8016f36:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016f3a:	f1b9 0901 	subs.w	r9, r9, #1
 8016f3e:	d505      	bpl.n	8016f4c <_fwalk_reent+0x24>
 8016f40:	6824      	ldr	r4, [r4, #0]
 8016f42:	2c00      	cmp	r4, #0
 8016f44:	d1f7      	bne.n	8016f36 <_fwalk_reent+0xe>
 8016f46:	4638      	mov	r0, r7
 8016f48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016f4c:	89ab      	ldrh	r3, [r5, #12]
 8016f4e:	2b01      	cmp	r3, #1
 8016f50:	d907      	bls.n	8016f62 <_fwalk_reent+0x3a>
 8016f52:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016f56:	3301      	adds	r3, #1
 8016f58:	d003      	beq.n	8016f62 <_fwalk_reent+0x3a>
 8016f5a:	4629      	mov	r1, r5
 8016f5c:	4630      	mov	r0, r6
 8016f5e:	47c0      	blx	r8
 8016f60:	4307      	orrs	r7, r0
 8016f62:	3568      	adds	r5, #104	; 0x68
 8016f64:	e7e9      	b.n	8016f3a <_fwalk_reent+0x12>

08016f66 <__retarget_lock_init_recursive>:
 8016f66:	4770      	bx	lr

08016f68 <__retarget_lock_acquire_recursive>:
 8016f68:	4770      	bx	lr

08016f6a <__retarget_lock_release_recursive>:
 8016f6a:	4770      	bx	lr

08016f6c <__swhatbuf_r>:
 8016f6c:	b570      	push	{r4, r5, r6, lr}
 8016f6e:	460e      	mov	r6, r1
 8016f70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016f74:	2900      	cmp	r1, #0
 8016f76:	b096      	sub	sp, #88	; 0x58
 8016f78:	4614      	mov	r4, r2
 8016f7a:	461d      	mov	r5, r3
 8016f7c:	da08      	bge.n	8016f90 <__swhatbuf_r+0x24>
 8016f7e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8016f82:	2200      	movs	r2, #0
 8016f84:	602a      	str	r2, [r5, #0]
 8016f86:	061a      	lsls	r2, r3, #24
 8016f88:	d410      	bmi.n	8016fac <__swhatbuf_r+0x40>
 8016f8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016f8e:	e00e      	b.n	8016fae <__swhatbuf_r+0x42>
 8016f90:	466a      	mov	r2, sp
 8016f92:	f000 fe01 	bl	8017b98 <_fstat_r>
 8016f96:	2800      	cmp	r0, #0
 8016f98:	dbf1      	blt.n	8016f7e <__swhatbuf_r+0x12>
 8016f9a:	9a01      	ldr	r2, [sp, #4]
 8016f9c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8016fa0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8016fa4:	425a      	negs	r2, r3
 8016fa6:	415a      	adcs	r2, r3
 8016fa8:	602a      	str	r2, [r5, #0]
 8016faa:	e7ee      	b.n	8016f8a <__swhatbuf_r+0x1e>
 8016fac:	2340      	movs	r3, #64	; 0x40
 8016fae:	2000      	movs	r0, #0
 8016fb0:	6023      	str	r3, [r4, #0]
 8016fb2:	b016      	add	sp, #88	; 0x58
 8016fb4:	bd70      	pop	{r4, r5, r6, pc}
	...

08016fb8 <__smakebuf_r>:
 8016fb8:	898b      	ldrh	r3, [r1, #12]
 8016fba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016fbc:	079d      	lsls	r5, r3, #30
 8016fbe:	4606      	mov	r6, r0
 8016fc0:	460c      	mov	r4, r1
 8016fc2:	d507      	bpl.n	8016fd4 <__smakebuf_r+0x1c>
 8016fc4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8016fc8:	6023      	str	r3, [r4, #0]
 8016fca:	6123      	str	r3, [r4, #16]
 8016fcc:	2301      	movs	r3, #1
 8016fce:	6163      	str	r3, [r4, #20]
 8016fd0:	b002      	add	sp, #8
 8016fd2:	bd70      	pop	{r4, r5, r6, pc}
 8016fd4:	ab01      	add	r3, sp, #4
 8016fd6:	466a      	mov	r2, sp
 8016fd8:	f7ff ffc8 	bl	8016f6c <__swhatbuf_r>
 8016fdc:	9900      	ldr	r1, [sp, #0]
 8016fde:	4605      	mov	r5, r0
 8016fe0:	4630      	mov	r0, r6
 8016fe2:	f000 f89d 	bl	8017120 <_malloc_r>
 8016fe6:	b948      	cbnz	r0, 8016ffc <__smakebuf_r+0x44>
 8016fe8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016fec:	059a      	lsls	r2, r3, #22
 8016fee:	d4ef      	bmi.n	8016fd0 <__smakebuf_r+0x18>
 8016ff0:	f023 0303 	bic.w	r3, r3, #3
 8016ff4:	f043 0302 	orr.w	r3, r3, #2
 8016ff8:	81a3      	strh	r3, [r4, #12]
 8016ffa:	e7e3      	b.n	8016fc4 <__smakebuf_r+0xc>
 8016ffc:	4b0d      	ldr	r3, [pc, #52]	; (8017034 <__smakebuf_r+0x7c>)
 8016ffe:	62b3      	str	r3, [r6, #40]	; 0x28
 8017000:	89a3      	ldrh	r3, [r4, #12]
 8017002:	6020      	str	r0, [r4, #0]
 8017004:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017008:	81a3      	strh	r3, [r4, #12]
 801700a:	9b00      	ldr	r3, [sp, #0]
 801700c:	6163      	str	r3, [r4, #20]
 801700e:	9b01      	ldr	r3, [sp, #4]
 8017010:	6120      	str	r0, [r4, #16]
 8017012:	b15b      	cbz	r3, 801702c <__smakebuf_r+0x74>
 8017014:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017018:	4630      	mov	r0, r6
 801701a:	f000 fdcf 	bl	8017bbc <_isatty_r>
 801701e:	b128      	cbz	r0, 801702c <__smakebuf_r+0x74>
 8017020:	89a3      	ldrh	r3, [r4, #12]
 8017022:	f023 0303 	bic.w	r3, r3, #3
 8017026:	f043 0301 	orr.w	r3, r3, #1
 801702a:	81a3      	strh	r3, [r4, #12]
 801702c:	89a0      	ldrh	r0, [r4, #12]
 801702e:	4305      	orrs	r5, r0
 8017030:	81a5      	strh	r5, [r4, #12]
 8017032:	e7cd      	b.n	8016fd0 <__smakebuf_r+0x18>
 8017034:	08016da1 	.word	0x08016da1

08017038 <malloc>:
 8017038:	4b02      	ldr	r3, [pc, #8]	; (8017044 <malloc+0xc>)
 801703a:	4601      	mov	r1, r0
 801703c:	6818      	ldr	r0, [r3, #0]
 801703e:	f000 b86f 	b.w	8017120 <_malloc_r>
 8017042:	bf00      	nop
 8017044:	2000006c 	.word	0x2000006c

08017048 <_free_r>:
 8017048:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801704a:	2900      	cmp	r1, #0
 801704c:	d044      	beq.n	80170d8 <_free_r+0x90>
 801704e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017052:	9001      	str	r0, [sp, #4]
 8017054:	2b00      	cmp	r3, #0
 8017056:	f1a1 0404 	sub.w	r4, r1, #4
 801705a:	bfb8      	it	lt
 801705c:	18e4      	addlt	r4, r4, r3
 801705e:	f000 fdcf 	bl	8017c00 <__malloc_lock>
 8017062:	4a1e      	ldr	r2, [pc, #120]	; (80170dc <_free_r+0x94>)
 8017064:	9801      	ldr	r0, [sp, #4]
 8017066:	6813      	ldr	r3, [r2, #0]
 8017068:	b933      	cbnz	r3, 8017078 <_free_r+0x30>
 801706a:	6063      	str	r3, [r4, #4]
 801706c:	6014      	str	r4, [r2, #0]
 801706e:	b003      	add	sp, #12
 8017070:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017074:	f000 bdca 	b.w	8017c0c <__malloc_unlock>
 8017078:	42a3      	cmp	r3, r4
 801707a:	d908      	bls.n	801708e <_free_r+0x46>
 801707c:	6825      	ldr	r5, [r4, #0]
 801707e:	1961      	adds	r1, r4, r5
 8017080:	428b      	cmp	r3, r1
 8017082:	bf01      	itttt	eq
 8017084:	6819      	ldreq	r1, [r3, #0]
 8017086:	685b      	ldreq	r3, [r3, #4]
 8017088:	1949      	addeq	r1, r1, r5
 801708a:	6021      	streq	r1, [r4, #0]
 801708c:	e7ed      	b.n	801706a <_free_r+0x22>
 801708e:	461a      	mov	r2, r3
 8017090:	685b      	ldr	r3, [r3, #4]
 8017092:	b10b      	cbz	r3, 8017098 <_free_r+0x50>
 8017094:	42a3      	cmp	r3, r4
 8017096:	d9fa      	bls.n	801708e <_free_r+0x46>
 8017098:	6811      	ldr	r1, [r2, #0]
 801709a:	1855      	adds	r5, r2, r1
 801709c:	42a5      	cmp	r5, r4
 801709e:	d10b      	bne.n	80170b8 <_free_r+0x70>
 80170a0:	6824      	ldr	r4, [r4, #0]
 80170a2:	4421      	add	r1, r4
 80170a4:	1854      	adds	r4, r2, r1
 80170a6:	42a3      	cmp	r3, r4
 80170a8:	6011      	str	r1, [r2, #0]
 80170aa:	d1e0      	bne.n	801706e <_free_r+0x26>
 80170ac:	681c      	ldr	r4, [r3, #0]
 80170ae:	685b      	ldr	r3, [r3, #4]
 80170b0:	6053      	str	r3, [r2, #4]
 80170b2:	4421      	add	r1, r4
 80170b4:	6011      	str	r1, [r2, #0]
 80170b6:	e7da      	b.n	801706e <_free_r+0x26>
 80170b8:	d902      	bls.n	80170c0 <_free_r+0x78>
 80170ba:	230c      	movs	r3, #12
 80170bc:	6003      	str	r3, [r0, #0]
 80170be:	e7d6      	b.n	801706e <_free_r+0x26>
 80170c0:	6825      	ldr	r5, [r4, #0]
 80170c2:	1961      	adds	r1, r4, r5
 80170c4:	428b      	cmp	r3, r1
 80170c6:	bf04      	itt	eq
 80170c8:	6819      	ldreq	r1, [r3, #0]
 80170ca:	685b      	ldreq	r3, [r3, #4]
 80170cc:	6063      	str	r3, [r4, #4]
 80170ce:	bf04      	itt	eq
 80170d0:	1949      	addeq	r1, r1, r5
 80170d2:	6021      	streq	r1, [r4, #0]
 80170d4:	6054      	str	r4, [r2, #4]
 80170d6:	e7ca      	b.n	801706e <_free_r+0x26>
 80170d8:	b003      	add	sp, #12
 80170da:	bd30      	pop	{r4, r5, pc}
 80170dc:	20008d0c 	.word	0x20008d0c

080170e0 <sbrk_aligned>:
 80170e0:	b570      	push	{r4, r5, r6, lr}
 80170e2:	4e0e      	ldr	r6, [pc, #56]	; (801711c <sbrk_aligned+0x3c>)
 80170e4:	460c      	mov	r4, r1
 80170e6:	6831      	ldr	r1, [r6, #0]
 80170e8:	4605      	mov	r5, r0
 80170ea:	b911      	cbnz	r1, 80170f2 <sbrk_aligned+0x12>
 80170ec:	f000 fcd6 	bl	8017a9c <_sbrk_r>
 80170f0:	6030      	str	r0, [r6, #0]
 80170f2:	4621      	mov	r1, r4
 80170f4:	4628      	mov	r0, r5
 80170f6:	f000 fcd1 	bl	8017a9c <_sbrk_r>
 80170fa:	1c43      	adds	r3, r0, #1
 80170fc:	d00a      	beq.n	8017114 <sbrk_aligned+0x34>
 80170fe:	1cc4      	adds	r4, r0, #3
 8017100:	f024 0403 	bic.w	r4, r4, #3
 8017104:	42a0      	cmp	r0, r4
 8017106:	d007      	beq.n	8017118 <sbrk_aligned+0x38>
 8017108:	1a21      	subs	r1, r4, r0
 801710a:	4628      	mov	r0, r5
 801710c:	f000 fcc6 	bl	8017a9c <_sbrk_r>
 8017110:	3001      	adds	r0, #1
 8017112:	d101      	bne.n	8017118 <sbrk_aligned+0x38>
 8017114:	f04f 34ff 	mov.w	r4, #4294967295
 8017118:	4620      	mov	r0, r4
 801711a:	bd70      	pop	{r4, r5, r6, pc}
 801711c:	20008d10 	.word	0x20008d10

08017120 <_malloc_r>:
 8017120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017124:	1ccd      	adds	r5, r1, #3
 8017126:	f025 0503 	bic.w	r5, r5, #3
 801712a:	3508      	adds	r5, #8
 801712c:	2d0c      	cmp	r5, #12
 801712e:	bf38      	it	cc
 8017130:	250c      	movcc	r5, #12
 8017132:	2d00      	cmp	r5, #0
 8017134:	4607      	mov	r7, r0
 8017136:	db01      	blt.n	801713c <_malloc_r+0x1c>
 8017138:	42a9      	cmp	r1, r5
 801713a:	d905      	bls.n	8017148 <_malloc_r+0x28>
 801713c:	230c      	movs	r3, #12
 801713e:	603b      	str	r3, [r7, #0]
 8017140:	2600      	movs	r6, #0
 8017142:	4630      	mov	r0, r6
 8017144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017148:	4e2e      	ldr	r6, [pc, #184]	; (8017204 <_malloc_r+0xe4>)
 801714a:	f000 fd59 	bl	8017c00 <__malloc_lock>
 801714e:	6833      	ldr	r3, [r6, #0]
 8017150:	461c      	mov	r4, r3
 8017152:	bb34      	cbnz	r4, 80171a2 <_malloc_r+0x82>
 8017154:	4629      	mov	r1, r5
 8017156:	4638      	mov	r0, r7
 8017158:	f7ff ffc2 	bl	80170e0 <sbrk_aligned>
 801715c:	1c43      	adds	r3, r0, #1
 801715e:	4604      	mov	r4, r0
 8017160:	d14d      	bne.n	80171fe <_malloc_r+0xde>
 8017162:	6834      	ldr	r4, [r6, #0]
 8017164:	4626      	mov	r6, r4
 8017166:	2e00      	cmp	r6, #0
 8017168:	d140      	bne.n	80171ec <_malloc_r+0xcc>
 801716a:	6823      	ldr	r3, [r4, #0]
 801716c:	4631      	mov	r1, r6
 801716e:	4638      	mov	r0, r7
 8017170:	eb04 0803 	add.w	r8, r4, r3
 8017174:	f000 fc92 	bl	8017a9c <_sbrk_r>
 8017178:	4580      	cmp	r8, r0
 801717a:	d13a      	bne.n	80171f2 <_malloc_r+0xd2>
 801717c:	6821      	ldr	r1, [r4, #0]
 801717e:	3503      	adds	r5, #3
 8017180:	1a6d      	subs	r5, r5, r1
 8017182:	f025 0503 	bic.w	r5, r5, #3
 8017186:	3508      	adds	r5, #8
 8017188:	2d0c      	cmp	r5, #12
 801718a:	bf38      	it	cc
 801718c:	250c      	movcc	r5, #12
 801718e:	4629      	mov	r1, r5
 8017190:	4638      	mov	r0, r7
 8017192:	f7ff ffa5 	bl	80170e0 <sbrk_aligned>
 8017196:	3001      	adds	r0, #1
 8017198:	d02b      	beq.n	80171f2 <_malloc_r+0xd2>
 801719a:	6823      	ldr	r3, [r4, #0]
 801719c:	442b      	add	r3, r5
 801719e:	6023      	str	r3, [r4, #0]
 80171a0:	e00e      	b.n	80171c0 <_malloc_r+0xa0>
 80171a2:	6822      	ldr	r2, [r4, #0]
 80171a4:	1b52      	subs	r2, r2, r5
 80171a6:	d41e      	bmi.n	80171e6 <_malloc_r+0xc6>
 80171a8:	2a0b      	cmp	r2, #11
 80171aa:	d916      	bls.n	80171da <_malloc_r+0xba>
 80171ac:	1961      	adds	r1, r4, r5
 80171ae:	42a3      	cmp	r3, r4
 80171b0:	6025      	str	r5, [r4, #0]
 80171b2:	bf18      	it	ne
 80171b4:	6059      	strne	r1, [r3, #4]
 80171b6:	6863      	ldr	r3, [r4, #4]
 80171b8:	bf08      	it	eq
 80171ba:	6031      	streq	r1, [r6, #0]
 80171bc:	5162      	str	r2, [r4, r5]
 80171be:	604b      	str	r3, [r1, #4]
 80171c0:	4638      	mov	r0, r7
 80171c2:	f104 060b 	add.w	r6, r4, #11
 80171c6:	f000 fd21 	bl	8017c0c <__malloc_unlock>
 80171ca:	f026 0607 	bic.w	r6, r6, #7
 80171ce:	1d23      	adds	r3, r4, #4
 80171d0:	1af2      	subs	r2, r6, r3
 80171d2:	d0b6      	beq.n	8017142 <_malloc_r+0x22>
 80171d4:	1b9b      	subs	r3, r3, r6
 80171d6:	50a3      	str	r3, [r4, r2]
 80171d8:	e7b3      	b.n	8017142 <_malloc_r+0x22>
 80171da:	6862      	ldr	r2, [r4, #4]
 80171dc:	42a3      	cmp	r3, r4
 80171de:	bf0c      	ite	eq
 80171e0:	6032      	streq	r2, [r6, #0]
 80171e2:	605a      	strne	r2, [r3, #4]
 80171e4:	e7ec      	b.n	80171c0 <_malloc_r+0xa0>
 80171e6:	4623      	mov	r3, r4
 80171e8:	6864      	ldr	r4, [r4, #4]
 80171ea:	e7b2      	b.n	8017152 <_malloc_r+0x32>
 80171ec:	4634      	mov	r4, r6
 80171ee:	6876      	ldr	r6, [r6, #4]
 80171f0:	e7b9      	b.n	8017166 <_malloc_r+0x46>
 80171f2:	230c      	movs	r3, #12
 80171f4:	603b      	str	r3, [r7, #0]
 80171f6:	4638      	mov	r0, r7
 80171f8:	f000 fd08 	bl	8017c0c <__malloc_unlock>
 80171fc:	e7a1      	b.n	8017142 <_malloc_r+0x22>
 80171fe:	6025      	str	r5, [r4, #0]
 8017200:	e7de      	b.n	80171c0 <_malloc_r+0xa0>
 8017202:	bf00      	nop
 8017204:	20008d0c 	.word	0x20008d0c

08017208 <__ssputs_r>:
 8017208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801720c:	688e      	ldr	r6, [r1, #8]
 801720e:	429e      	cmp	r6, r3
 8017210:	4682      	mov	sl, r0
 8017212:	460c      	mov	r4, r1
 8017214:	4690      	mov	r8, r2
 8017216:	461f      	mov	r7, r3
 8017218:	d838      	bhi.n	801728c <__ssputs_r+0x84>
 801721a:	898a      	ldrh	r2, [r1, #12]
 801721c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8017220:	d032      	beq.n	8017288 <__ssputs_r+0x80>
 8017222:	6825      	ldr	r5, [r4, #0]
 8017224:	6909      	ldr	r1, [r1, #16]
 8017226:	eba5 0901 	sub.w	r9, r5, r1
 801722a:	6965      	ldr	r5, [r4, #20]
 801722c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017230:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8017234:	3301      	adds	r3, #1
 8017236:	444b      	add	r3, r9
 8017238:	106d      	asrs	r5, r5, #1
 801723a:	429d      	cmp	r5, r3
 801723c:	bf38      	it	cc
 801723e:	461d      	movcc	r5, r3
 8017240:	0553      	lsls	r3, r2, #21
 8017242:	d531      	bpl.n	80172a8 <__ssputs_r+0xa0>
 8017244:	4629      	mov	r1, r5
 8017246:	f7ff ff6b 	bl	8017120 <_malloc_r>
 801724a:	4606      	mov	r6, r0
 801724c:	b950      	cbnz	r0, 8017264 <__ssputs_r+0x5c>
 801724e:	230c      	movs	r3, #12
 8017250:	f8ca 3000 	str.w	r3, [sl]
 8017254:	89a3      	ldrh	r3, [r4, #12]
 8017256:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801725a:	81a3      	strh	r3, [r4, #12]
 801725c:	f04f 30ff 	mov.w	r0, #4294967295
 8017260:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017264:	6921      	ldr	r1, [r4, #16]
 8017266:	464a      	mov	r2, r9
 8017268:	f7ff faba 	bl	80167e0 <memcpy>
 801726c:	89a3      	ldrh	r3, [r4, #12]
 801726e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8017272:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017276:	81a3      	strh	r3, [r4, #12]
 8017278:	6126      	str	r6, [r4, #16]
 801727a:	6165      	str	r5, [r4, #20]
 801727c:	444e      	add	r6, r9
 801727e:	eba5 0509 	sub.w	r5, r5, r9
 8017282:	6026      	str	r6, [r4, #0]
 8017284:	60a5      	str	r5, [r4, #8]
 8017286:	463e      	mov	r6, r7
 8017288:	42be      	cmp	r6, r7
 801728a:	d900      	bls.n	801728e <__ssputs_r+0x86>
 801728c:	463e      	mov	r6, r7
 801728e:	6820      	ldr	r0, [r4, #0]
 8017290:	4632      	mov	r2, r6
 8017292:	4641      	mov	r1, r8
 8017294:	f7ff fab2 	bl	80167fc <memmove>
 8017298:	68a3      	ldr	r3, [r4, #8]
 801729a:	1b9b      	subs	r3, r3, r6
 801729c:	60a3      	str	r3, [r4, #8]
 801729e:	6823      	ldr	r3, [r4, #0]
 80172a0:	4433      	add	r3, r6
 80172a2:	6023      	str	r3, [r4, #0]
 80172a4:	2000      	movs	r0, #0
 80172a6:	e7db      	b.n	8017260 <__ssputs_r+0x58>
 80172a8:	462a      	mov	r2, r5
 80172aa:	f000 fcb5 	bl	8017c18 <_realloc_r>
 80172ae:	4606      	mov	r6, r0
 80172b0:	2800      	cmp	r0, #0
 80172b2:	d1e1      	bne.n	8017278 <__ssputs_r+0x70>
 80172b4:	6921      	ldr	r1, [r4, #16]
 80172b6:	4650      	mov	r0, sl
 80172b8:	f7ff fec6 	bl	8017048 <_free_r>
 80172bc:	e7c7      	b.n	801724e <__ssputs_r+0x46>
	...

080172c0 <_svfiprintf_r>:
 80172c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80172c4:	4698      	mov	r8, r3
 80172c6:	898b      	ldrh	r3, [r1, #12]
 80172c8:	061b      	lsls	r3, r3, #24
 80172ca:	b09d      	sub	sp, #116	; 0x74
 80172cc:	4607      	mov	r7, r0
 80172ce:	460d      	mov	r5, r1
 80172d0:	4614      	mov	r4, r2
 80172d2:	d50e      	bpl.n	80172f2 <_svfiprintf_r+0x32>
 80172d4:	690b      	ldr	r3, [r1, #16]
 80172d6:	b963      	cbnz	r3, 80172f2 <_svfiprintf_r+0x32>
 80172d8:	2140      	movs	r1, #64	; 0x40
 80172da:	f7ff ff21 	bl	8017120 <_malloc_r>
 80172de:	6028      	str	r0, [r5, #0]
 80172e0:	6128      	str	r0, [r5, #16]
 80172e2:	b920      	cbnz	r0, 80172ee <_svfiprintf_r+0x2e>
 80172e4:	230c      	movs	r3, #12
 80172e6:	603b      	str	r3, [r7, #0]
 80172e8:	f04f 30ff 	mov.w	r0, #4294967295
 80172ec:	e0d1      	b.n	8017492 <_svfiprintf_r+0x1d2>
 80172ee:	2340      	movs	r3, #64	; 0x40
 80172f0:	616b      	str	r3, [r5, #20]
 80172f2:	2300      	movs	r3, #0
 80172f4:	9309      	str	r3, [sp, #36]	; 0x24
 80172f6:	2320      	movs	r3, #32
 80172f8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80172fc:	f8cd 800c 	str.w	r8, [sp, #12]
 8017300:	2330      	movs	r3, #48	; 0x30
 8017302:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80174ac <_svfiprintf_r+0x1ec>
 8017306:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801730a:	f04f 0901 	mov.w	r9, #1
 801730e:	4623      	mov	r3, r4
 8017310:	469a      	mov	sl, r3
 8017312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017316:	b10a      	cbz	r2, 801731c <_svfiprintf_r+0x5c>
 8017318:	2a25      	cmp	r2, #37	; 0x25
 801731a:	d1f9      	bne.n	8017310 <_svfiprintf_r+0x50>
 801731c:	ebba 0b04 	subs.w	fp, sl, r4
 8017320:	d00b      	beq.n	801733a <_svfiprintf_r+0x7a>
 8017322:	465b      	mov	r3, fp
 8017324:	4622      	mov	r2, r4
 8017326:	4629      	mov	r1, r5
 8017328:	4638      	mov	r0, r7
 801732a:	f7ff ff6d 	bl	8017208 <__ssputs_r>
 801732e:	3001      	adds	r0, #1
 8017330:	f000 80aa 	beq.w	8017488 <_svfiprintf_r+0x1c8>
 8017334:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017336:	445a      	add	r2, fp
 8017338:	9209      	str	r2, [sp, #36]	; 0x24
 801733a:	f89a 3000 	ldrb.w	r3, [sl]
 801733e:	2b00      	cmp	r3, #0
 8017340:	f000 80a2 	beq.w	8017488 <_svfiprintf_r+0x1c8>
 8017344:	2300      	movs	r3, #0
 8017346:	f04f 32ff 	mov.w	r2, #4294967295
 801734a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801734e:	f10a 0a01 	add.w	sl, sl, #1
 8017352:	9304      	str	r3, [sp, #16]
 8017354:	9307      	str	r3, [sp, #28]
 8017356:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801735a:	931a      	str	r3, [sp, #104]	; 0x68
 801735c:	4654      	mov	r4, sl
 801735e:	2205      	movs	r2, #5
 8017360:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017364:	4851      	ldr	r0, [pc, #324]	; (80174ac <_svfiprintf_r+0x1ec>)
 8017366:	f7e8 ff5b 	bl	8000220 <memchr>
 801736a:	9a04      	ldr	r2, [sp, #16]
 801736c:	b9d8      	cbnz	r0, 80173a6 <_svfiprintf_r+0xe6>
 801736e:	06d0      	lsls	r0, r2, #27
 8017370:	bf44      	itt	mi
 8017372:	2320      	movmi	r3, #32
 8017374:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017378:	0711      	lsls	r1, r2, #28
 801737a:	bf44      	itt	mi
 801737c:	232b      	movmi	r3, #43	; 0x2b
 801737e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017382:	f89a 3000 	ldrb.w	r3, [sl]
 8017386:	2b2a      	cmp	r3, #42	; 0x2a
 8017388:	d015      	beq.n	80173b6 <_svfiprintf_r+0xf6>
 801738a:	9a07      	ldr	r2, [sp, #28]
 801738c:	4654      	mov	r4, sl
 801738e:	2000      	movs	r0, #0
 8017390:	f04f 0c0a 	mov.w	ip, #10
 8017394:	4621      	mov	r1, r4
 8017396:	f811 3b01 	ldrb.w	r3, [r1], #1
 801739a:	3b30      	subs	r3, #48	; 0x30
 801739c:	2b09      	cmp	r3, #9
 801739e:	d94e      	bls.n	801743e <_svfiprintf_r+0x17e>
 80173a0:	b1b0      	cbz	r0, 80173d0 <_svfiprintf_r+0x110>
 80173a2:	9207      	str	r2, [sp, #28]
 80173a4:	e014      	b.n	80173d0 <_svfiprintf_r+0x110>
 80173a6:	eba0 0308 	sub.w	r3, r0, r8
 80173aa:	fa09 f303 	lsl.w	r3, r9, r3
 80173ae:	4313      	orrs	r3, r2
 80173b0:	9304      	str	r3, [sp, #16]
 80173b2:	46a2      	mov	sl, r4
 80173b4:	e7d2      	b.n	801735c <_svfiprintf_r+0x9c>
 80173b6:	9b03      	ldr	r3, [sp, #12]
 80173b8:	1d19      	adds	r1, r3, #4
 80173ba:	681b      	ldr	r3, [r3, #0]
 80173bc:	9103      	str	r1, [sp, #12]
 80173be:	2b00      	cmp	r3, #0
 80173c0:	bfbb      	ittet	lt
 80173c2:	425b      	neglt	r3, r3
 80173c4:	f042 0202 	orrlt.w	r2, r2, #2
 80173c8:	9307      	strge	r3, [sp, #28]
 80173ca:	9307      	strlt	r3, [sp, #28]
 80173cc:	bfb8      	it	lt
 80173ce:	9204      	strlt	r2, [sp, #16]
 80173d0:	7823      	ldrb	r3, [r4, #0]
 80173d2:	2b2e      	cmp	r3, #46	; 0x2e
 80173d4:	d10c      	bne.n	80173f0 <_svfiprintf_r+0x130>
 80173d6:	7863      	ldrb	r3, [r4, #1]
 80173d8:	2b2a      	cmp	r3, #42	; 0x2a
 80173da:	d135      	bne.n	8017448 <_svfiprintf_r+0x188>
 80173dc:	9b03      	ldr	r3, [sp, #12]
 80173de:	1d1a      	adds	r2, r3, #4
 80173e0:	681b      	ldr	r3, [r3, #0]
 80173e2:	9203      	str	r2, [sp, #12]
 80173e4:	2b00      	cmp	r3, #0
 80173e6:	bfb8      	it	lt
 80173e8:	f04f 33ff 	movlt.w	r3, #4294967295
 80173ec:	3402      	adds	r4, #2
 80173ee:	9305      	str	r3, [sp, #20]
 80173f0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80174bc <_svfiprintf_r+0x1fc>
 80173f4:	7821      	ldrb	r1, [r4, #0]
 80173f6:	2203      	movs	r2, #3
 80173f8:	4650      	mov	r0, sl
 80173fa:	f7e8 ff11 	bl	8000220 <memchr>
 80173fe:	b140      	cbz	r0, 8017412 <_svfiprintf_r+0x152>
 8017400:	2340      	movs	r3, #64	; 0x40
 8017402:	eba0 000a 	sub.w	r0, r0, sl
 8017406:	fa03 f000 	lsl.w	r0, r3, r0
 801740a:	9b04      	ldr	r3, [sp, #16]
 801740c:	4303      	orrs	r3, r0
 801740e:	3401      	adds	r4, #1
 8017410:	9304      	str	r3, [sp, #16]
 8017412:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017416:	4826      	ldr	r0, [pc, #152]	; (80174b0 <_svfiprintf_r+0x1f0>)
 8017418:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801741c:	2206      	movs	r2, #6
 801741e:	f7e8 feff 	bl	8000220 <memchr>
 8017422:	2800      	cmp	r0, #0
 8017424:	d038      	beq.n	8017498 <_svfiprintf_r+0x1d8>
 8017426:	4b23      	ldr	r3, [pc, #140]	; (80174b4 <_svfiprintf_r+0x1f4>)
 8017428:	bb1b      	cbnz	r3, 8017472 <_svfiprintf_r+0x1b2>
 801742a:	9b03      	ldr	r3, [sp, #12]
 801742c:	3307      	adds	r3, #7
 801742e:	f023 0307 	bic.w	r3, r3, #7
 8017432:	3308      	adds	r3, #8
 8017434:	9303      	str	r3, [sp, #12]
 8017436:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017438:	4433      	add	r3, r6
 801743a:	9309      	str	r3, [sp, #36]	; 0x24
 801743c:	e767      	b.n	801730e <_svfiprintf_r+0x4e>
 801743e:	fb0c 3202 	mla	r2, ip, r2, r3
 8017442:	460c      	mov	r4, r1
 8017444:	2001      	movs	r0, #1
 8017446:	e7a5      	b.n	8017394 <_svfiprintf_r+0xd4>
 8017448:	2300      	movs	r3, #0
 801744a:	3401      	adds	r4, #1
 801744c:	9305      	str	r3, [sp, #20]
 801744e:	4619      	mov	r1, r3
 8017450:	f04f 0c0a 	mov.w	ip, #10
 8017454:	4620      	mov	r0, r4
 8017456:	f810 2b01 	ldrb.w	r2, [r0], #1
 801745a:	3a30      	subs	r2, #48	; 0x30
 801745c:	2a09      	cmp	r2, #9
 801745e:	d903      	bls.n	8017468 <_svfiprintf_r+0x1a8>
 8017460:	2b00      	cmp	r3, #0
 8017462:	d0c5      	beq.n	80173f0 <_svfiprintf_r+0x130>
 8017464:	9105      	str	r1, [sp, #20]
 8017466:	e7c3      	b.n	80173f0 <_svfiprintf_r+0x130>
 8017468:	fb0c 2101 	mla	r1, ip, r1, r2
 801746c:	4604      	mov	r4, r0
 801746e:	2301      	movs	r3, #1
 8017470:	e7f0      	b.n	8017454 <_svfiprintf_r+0x194>
 8017472:	ab03      	add	r3, sp, #12
 8017474:	9300      	str	r3, [sp, #0]
 8017476:	462a      	mov	r2, r5
 8017478:	4b0f      	ldr	r3, [pc, #60]	; (80174b8 <_svfiprintf_r+0x1f8>)
 801747a:	a904      	add	r1, sp, #16
 801747c:	4638      	mov	r0, r7
 801747e:	f3af 8000 	nop.w
 8017482:	1c42      	adds	r2, r0, #1
 8017484:	4606      	mov	r6, r0
 8017486:	d1d6      	bne.n	8017436 <_svfiprintf_r+0x176>
 8017488:	89ab      	ldrh	r3, [r5, #12]
 801748a:	065b      	lsls	r3, r3, #25
 801748c:	f53f af2c 	bmi.w	80172e8 <_svfiprintf_r+0x28>
 8017490:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017492:	b01d      	add	sp, #116	; 0x74
 8017494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017498:	ab03      	add	r3, sp, #12
 801749a:	9300      	str	r3, [sp, #0]
 801749c:	462a      	mov	r2, r5
 801749e:	4b06      	ldr	r3, [pc, #24]	; (80174b8 <_svfiprintf_r+0x1f8>)
 80174a0:	a904      	add	r1, sp, #16
 80174a2:	4638      	mov	r0, r7
 80174a4:	f000 f9d4 	bl	8017850 <_printf_i>
 80174a8:	e7eb      	b.n	8017482 <_svfiprintf_r+0x1c2>
 80174aa:	bf00      	nop
 80174ac:	0801d210 	.word	0x0801d210
 80174b0:	0801d21a 	.word	0x0801d21a
 80174b4:	00000000 	.word	0x00000000
 80174b8:	08017209 	.word	0x08017209
 80174bc:	0801d216 	.word	0x0801d216

080174c0 <__sfputc_r>:
 80174c0:	6893      	ldr	r3, [r2, #8]
 80174c2:	3b01      	subs	r3, #1
 80174c4:	2b00      	cmp	r3, #0
 80174c6:	b410      	push	{r4}
 80174c8:	6093      	str	r3, [r2, #8]
 80174ca:	da08      	bge.n	80174de <__sfputc_r+0x1e>
 80174cc:	6994      	ldr	r4, [r2, #24]
 80174ce:	42a3      	cmp	r3, r4
 80174d0:	db01      	blt.n	80174d6 <__sfputc_r+0x16>
 80174d2:	290a      	cmp	r1, #10
 80174d4:	d103      	bne.n	80174de <__sfputc_r+0x1e>
 80174d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80174da:	f7ff ba9d 	b.w	8016a18 <__swbuf_r>
 80174de:	6813      	ldr	r3, [r2, #0]
 80174e0:	1c58      	adds	r0, r3, #1
 80174e2:	6010      	str	r0, [r2, #0]
 80174e4:	7019      	strb	r1, [r3, #0]
 80174e6:	4608      	mov	r0, r1
 80174e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80174ec:	4770      	bx	lr

080174ee <__sfputs_r>:
 80174ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80174f0:	4606      	mov	r6, r0
 80174f2:	460f      	mov	r7, r1
 80174f4:	4614      	mov	r4, r2
 80174f6:	18d5      	adds	r5, r2, r3
 80174f8:	42ac      	cmp	r4, r5
 80174fa:	d101      	bne.n	8017500 <__sfputs_r+0x12>
 80174fc:	2000      	movs	r0, #0
 80174fe:	e007      	b.n	8017510 <__sfputs_r+0x22>
 8017500:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017504:	463a      	mov	r2, r7
 8017506:	4630      	mov	r0, r6
 8017508:	f7ff ffda 	bl	80174c0 <__sfputc_r>
 801750c:	1c43      	adds	r3, r0, #1
 801750e:	d1f3      	bne.n	80174f8 <__sfputs_r+0xa>
 8017510:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017514 <_vfiprintf_r>:
 8017514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017518:	460d      	mov	r5, r1
 801751a:	b09d      	sub	sp, #116	; 0x74
 801751c:	4614      	mov	r4, r2
 801751e:	4698      	mov	r8, r3
 8017520:	4606      	mov	r6, r0
 8017522:	b118      	cbz	r0, 801752c <_vfiprintf_r+0x18>
 8017524:	6983      	ldr	r3, [r0, #24]
 8017526:	b90b      	cbnz	r3, 801752c <_vfiprintf_r+0x18>
 8017528:	f7ff fc6e 	bl	8016e08 <__sinit>
 801752c:	4b89      	ldr	r3, [pc, #548]	; (8017754 <_vfiprintf_r+0x240>)
 801752e:	429d      	cmp	r5, r3
 8017530:	d11b      	bne.n	801756a <_vfiprintf_r+0x56>
 8017532:	6875      	ldr	r5, [r6, #4]
 8017534:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017536:	07d9      	lsls	r1, r3, #31
 8017538:	d405      	bmi.n	8017546 <_vfiprintf_r+0x32>
 801753a:	89ab      	ldrh	r3, [r5, #12]
 801753c:	059a      	lsls	r2, r3, #22
 801753e:	d402      	bmi.n	8017546 <_vfiprintf_r+0x32>
 8017540:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017542:	f7ff fd11 	bl	8016f68 <__retarget_lock_acquire_recursive>
 8017546:	89ab      	ldrh	r3, [r5, #12]
 8017548:	071b      	lsls	r3, r3, #28
 801754a:	d501      	bpl.n	8017550 <_vfiprintf_r+0x3c>
 801754c:	692b      	ldr	r3, [r5, #16]
 801754e:	b9eb      	cbnz	r3, 801758c <_vfiprintf_r+0x78>
 8017550:	4629      	mov	r1, r5
 8017552:	4630      	mov	r0, r6
 8017554:	f7ff fab2 	bl	8016abc <__swsetup_r>
 8017558:	b1c0      	cbz	r0, 801758c <_vfiprintf_r+0x78>
 801755a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801755c:	07dc      	lsls	r4, r3, #31
 801755e:	d50e      	bpl.n	801757e <_vfiprintf_r+0x6a>
 8017560:	f04f 30ff 	mov.w	r0, #4294967295
 8017564:	b01d      	add	sp, #116	; 0x74
 8017566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801756a:	4b7b      	ldr	r3, [pc, #492]	; (8017758 <_vfiprintf_r+0x244>)
 801756c:	429d      	cmp	r5, r3
 801756e:	d101      	bne.n	8017574 <_vfiprintf_r+0x60>
 8017570:	68b5      	ldr	r5, [r6, #8]
 8017572:	e7df      	b.n	8017534 <_vfiprintf_r+0x20>
 8017574:	4b79      	ldr	r3, [pc, #484]	; (801775c <_vfiprintf_r+0x248>)
 8017576:	429d      	cmp	r5, r3
 8017578:	bf08      	it	eq
 801757a:	68f5      	ldreq	r5, [r6, #12]
 801757c:	e7da      	b.n	8017534 <_vfiprintf_r+0x20>
 801757e:	89ab      	ldrh	r3, [r5, #12]
 8017580:	0598      	lsls	r0, r3, #22
 8017582:	d4ed      	bmi.n	8017560 <_vfiprintf_r+0x4c>
 8017584:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017586:	f7ff fcf0 	bl	8016f6a <__retarget_lock_release_recursive>
 801758a:	e7e9      	b.n	8017560 <_vfiprintf_r+0x4c>
 801758c:	2300      	movs	r3, #0
 801758e:	9309      	str	r3, [sp, #36]	; 0x24
 8017590:	2320      	movs	r3, #32
 8017592:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017596:	f8cd 800c 	str.w	r8, [sp, #12]
 801759a:	2330      	movs	r3, #48	; 0x30
 801759c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8017760 <_vfiprintf_r+0x24c>
 80175a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80175a4:	f04f 0901 	mov.w	r9, #1
 80175a8:	4623      	mov	r3, r4
 80175aa:	469a      	mov	sl, r3
 80175ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80175b0:	b10a      	cbz	r2, 80175b6 <_vfiprintf_r+0xa2>
 80175b2:	2a25      	cmp	r2, #37	; 0x25
 80175b4:	d1f9      	bne.n	80175aa <_vfiprintf_r+0x96>
 80175b6:	ebba 0b04 	subs.w	fp, sl, r4
 80175ba:	d00b      	beq.n	80175d4 <_vfiprintf_r+0xc0>
 80175bc:	465b      	mov	r3, fp
 80175be:	4622      	mov	r2, r4
 80175c0:	4629      	mov	r1, r5
 80175c2:	4630      	mov	r0, r6
 80175c4:	f7ff ff93 	bl	80174ee <__sfputs_r>
 80175c8:	3001      	adds	r0, #1
 80175ca:	f000 80aa 	beq.w	8017722 <_vfiprintf_r+0x20e>
 80175ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80175d0:	445a      	add	r2, fp
 80175d2:	9209      	str	r2, [sp, #36]	; 0x24
 80175d4:	f89a 3000 	ldrb.w	r3, [sl]
 80175d8:	2b00      	cmp	r3, #0
 80175da:	f000 80a2 	beq.w	8017722 <_vfiprintf_r+0x20e>
 80175de:	2300      	movs	r3, #0
 80175e0:	f04f 32ff 	mov.w	r2, #4294967295
 80175e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80175e8:	f10a 0a01 	add.w	sl, sl, #1
 80175ec:	9304      	str	r3, [sp, #16]
 80175ee:	9307      	str	r3, [sp, #28]
 80175f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80175f4:	931a      	str	r3, [sp, #104]	; 0x68
 80175f6:	4654      	mov	r4, sl
 80175f8:	2205      	movs	r2, #5
 80175fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80175fe:	4858      	ldr	r0, [pc, #352]	; (8017760 <_vfiprintf_r+0x24c>)
 8017600:	f7e8 fe0e 	bl	8000220 <memchr>
 8017604:	9a04      	ldr	r2, [sp, #16]
 8017606:	b9d8      	cbnz	r0, 8017640 <_vfiprintf_r+0x12c>
 8017608:	06d1      	lsls	r1, r2, #27
 801760a:	bf44      	itt	mi
 801760c:	2320      	movmi	r3, #32
 801760e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017612:	0713      	lsls	r3, r2, #28
 8017614:	bf44      	itt	mi
 8017616:	232b      	movmi	r3, #43	; 0x2b
 8017618:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801761c:	f89a 3000 	ldrb.w	r3, [sl]
 8017620:	2b2a      	cmp	r3, #42	; 0x2a
 8017622:	d015      	beq.n	8017650 <_vfiprintf_r+0x13c>
 8017624:	9a07      	ldr	r2, [sp, #28]
 8017626:	4654      	mov	r4, sl
 8017628:	2000      	movs	r0, #0
 801762a:	f04f 0c0a 	mov.w	ip, #10
 801762e:	4621      	mov	r1, r4
 8017630:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017634:	3b30      	subs	r3, #48	; 0x30
 8017636:	2b09      	cmp	r3, #9
 8017638:	d94e      	bls.n	80176d8 <_vfiprintf_r+0x1c4>
 801763a:	b1b0      	cbz	r0, 801766a <_vfiprintf_r+0x156>
 801763c:	9207      	str	r2, [sp, #28]
 801763e:	e014      	b.n	801766a <_vfiprintf_r+0x156>
 8017640:	eba0 0308 	sub.w	r3, r0, r8
 8017644:	fa09 f303 	lsl.w	r3, r9, r3
 8017648:	4313      	orrs	r3, r2
 801764a:	9304      	str	r3, [sp, #16]
 801764c:	46a2      	mov	sl, r4
 801764e:	e7d2      	b.n	80175f6 <_vfiprintf_r+0xe2>
 8017650:	9b03      	ldr	r3, [sp, #12]
 8017652:	1d19      	adds	r1, r3, #4
 8017654:	681b      	ldr	r3, [r3, #0]
 8017656:	9103      	str	r1, [sp, #12]
 8017658:	2b00      	cmp	r3, #0
 801765a:	bfbb      	ittet	lt
 801765c:	425b      	neglt	r3, r3
 801765e:	f042 0202 	orrlt.w	r2, r2, #2
 8017662:	9307      	strge	r3, [sp, #28]
 8017664:	9307      	strlt	r3, [sp, #28]
 8017666:	bfb8      	it	lt
 8017668:	9204      	strlt	r2, [sp, #16]
 801766a:	7823      	ldrb	r3, [r4, #0]
 801766c:	2b2e      	cmp	r3, #46	; 0x2e
 801766e:	d10c      	bne.n	801768a <_vfiprintf_r+0x176>
 8017670:	7863      	ldrb	r3, [r4, #1]
 8017672:	2b2a      	cmp	r3, #42	; 0x2a
 8017674:	d135      	bne.n	80176e2 <_vfiprintf_r+0x1ce>
 8017676:	9b03      	ldr	r3, [sp, #12]
 8017678:	1d1a      	adds	r2, r3, #4
 801767a:	681b      	ldr	r3, [r3, #0]
 801767c:	9203      	str	r2, [sp, #12]
 801767e:	2b00      	cmp	r3, #0
 8017680:	bfb8      	it	lt
 8017682:	f04f 33ff 	movlt.w	r3, #4294967295
 8017686:	3402      	adds	r4, #2
 8017688:	9305      	str	r3, [sp, #20]
 801768a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8017770 <_vfiprintf_r+0x25c>
 801768e:	7821      	ldrb	r1, [r4, #0]
 8017690:	2203      	movs	r2, #3
 8017692:	4650      	mov	r0, sl
 8017694:	f7e8 fdc4 	bl	8000220 <memchr>
 8017698:	b140      	cbz	r0, 80176ac <_vfiprintf_r+0x198>
 801769a:	2340      	movs	r3, #64	; 0x40
 801769c:	eba0 000a 	sub.w	r0, r0, sl
 80176a0:	fa03 f000 	lsl.w	r0, r3, r0
 80176a4:	9b04      	ldr	r3, [sp, #16]
 80176a6:	4303      	orrs	r3, r0
 80176a8:	3401      	adds	r4, #1
 80176aa:	9304      	str	r3, [sp, #16]
 80176ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80176b0:	482c      	ldr	r0, [pc, #176]	; (8017764 <_vfiprintf_r+0x250>)
 80176b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80176b6:	2206      	movs	r2, #6
 80176b8:	f7e8 fdb2 	bl	8000220 <memchr>
 80176bc:	2800      	cmp	r0, #0
 80176be:	d03f      	beq.n	8017740 <_vfiprintf_r+0x22c>
 80176c0:	4b29      	ldr	r3, [pc, #164]	; (8017768 <_vfiprintf_r+0x254>)
 80176c2:	bb1b      	cbnz	r3, 801770c <_vfiprintf_r+0x1f8>
 80176c4:	9b03      	ldr	r3, [sp, #12]
 80176c6:	3307      	adds	r3, #7
 80176c8:	f023 0307 	bic.w	r3, r3, #7
 80176cc:	3308      	adds	r3, #8
 80176ce:	9303      	str	r3, [sp, #12]
 80176d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80176d2:	443b      	add	r3, r7
 80176d4:	9309      	str	r3, [sp, #36]	; 0x24
 80176d6:	e767      	b.n	80175a8 <_vfiprintf_r+0x94>
 80176d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80176dc:	460c      	mov	r4, r1
 80176de:	2001      	movs	r0, #1
 80176e0:	e7a5      	b.n	801762e <_vfiprintf_r+0x11a>
 80176e2:	2300      	movs	r3, #0
 80176e4:	3401      	adds	r4, #1
 80176e6:	9305      	str	r3, [sp, #20]
 80176e8:	4619      	mov	r1, r3
 80176ea:	f04f 0c0a 	mov.w	ip, #10
 80176ee:	4620      	mov	r0, r4
 80176f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80176f4:	3a30      	subs	r2, #48	; 0x30
 80176f6:	2a09      	cmp	r2, #9
 80176f8:	d903      	bls.n	8017702 <_vfiprintf_r+0x1ee>
 80176fa:	2b00      	cmp	r3, #0
 80176fc:	d0c5      	beq.n	801768a <_vfiprintf_r+0x176>
 80176fe:	9105      	str	r1, [sp, #20]
 8017700:	e7c3      	b.n	801768a <_vfiprintf_r+0x176>
 8017702:	fb0c 2101 	mla	r1, ip, r1, r2
 8017706:	4604      	mov	r4, r0
 8017708:	2301      	movs	r3, #1
 801770a:	e7f0      	b.n	80176ee <_vfiprintf_r+0x1da>
 801770c:	ab03      	add	r3, sp, #12
 801770e:	9300      	str	r3, [sp, #0]
 8017710:	462a      	mov	r2, r5
 8017712:	4b16      	ldr	r3, [pc, #88]	; (801776c <_vfiprintf_r+0x258>)
 8017714:	a904      	add	r1, sp, #16
 8017716:	4630      	mov	r0, r6
 8017718:	f3af 8000 	nop.w
 801771c:	4607      	mov	r7, r0
 801771e:	1c78      	adds	r0, r7, #1
 8017720:	d1d6      	bne.n	80176d0 <_vfiprintf_r+0x1bc>
 8017722:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017724:	07d9      	lsls	r1, r3, #31
 8017726:	d405      	bmi.n	8017734 <_vfiprintf_r+0x220>
 8017728:	89ab      	ldrh	r3, [r5, #12]
 801772a:	059a      	lsls	r2, r3, #22
 801772c:	d402      	bmi.n	8017734 <_vfiprintf_r+0x220>
 801772e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017730:	f7ff fc1b 	bl	8016f6a <__retarget_lock_release_recursive>
 8017734:	89ab      	ldrh	r3, [r5, #12]
 8017736:	065b      	lsls	r3, r3, #25
 8017738:	f53f af12 	bmi.w	8017560 <_vfiprintf_r+0x4c>
 801773c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801773e:	e711      	b.n	8017564 <_vfiprintf_r+0x50>
 8017740:	ab03      	add	r3, sp, #12
 8017742:	9300      	str	r3, [sp, #0]
 8017744:	462a      	mov	r2, r5
 8017746:	4b09      	ldr	r3, [pc, #36]	; (801776c <_vfiprintf_r+0x258>)
 8017748:	a904      	add	r1, sp, #16
 801774a:	4630      	mov	r0, r6
 801774c:	f000 f880 	bl	8017850 <_printf_i>
 8017750:	e7e4      	b.n	801771c <_vfiprintf_r+0x208>
 8017752:	bf00      	nop
 8017754:	0801d1d0 	.word	0x0801d1d0
 8017758:	0801d1f0 	.word	0x0801d1f0
 801775c:	0801d1b0 	.word	0x0801d1b0
 8017760:	0801d210 	.word	0x0801d210
 8017764:	0801d21a 	.word	0x0801d21a
 8017768:	00000000 	.word	0x00000000
 801776c:	080174ef 	.word	0x080174ef
 8017770:	0801d216 	.word	0x0801d216

08017774 <_printf_common>:
 8017774:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017778:	4616      	mov	r6, r2
 801777a:	4699      	mov	r9, r3
 801777c:	688a      	ldr	r2, [r1, #8]
 801777e:	690b      	ldr	r3, [r1, #16]
 8017780:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017784:	4293      	cmp	r3, r2
 8017786:	bfb8      	it	lt
 8017788:	4613      	movlt	r3, r2
 801778a:	6033      	str	r3, [r6, #0]
 801778c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017790:	4607      	mov	r7, r0
 8017792:	460c      	mov	r4, r1
 8017794:	b10a      	cbz	r2, 801779a <_printf_common+0x26>
 8017796:	3301      	adds	r3, #1
 8017798:	6033      	str	r3, [r6, #0]
 801779a:	6823      	ldr	r3, [r4, #0]
 801779c:	0699      	lsls	r1, r3, #26
 801779e:	bf42      	ittt	mi
 80177a0:	6833      	ldrmi	r3, [r6, #0]
 80177a2:	3302      	addmi	r3, #2
 80177a4:	6033      	strmi	r3, [r6, #0]
 80177a6:	6825      	ldr	r5, [r4, #0]
 80177a8:	f015 0506 	ands.w	r5, r5, #6
 80177ac:	d106      	bne.n	80177bc <_printf_common+0x48>
 80177ae:	f104 0a19 	add.w	sl, r4, #25
 80177b2:	68e3      	ldr	r3, [r4, #12]
 80177b4:	6832      	ldr	r2, [r6, #0]
 80177b6:	1a9b      	subs	r3, r3, r2
 80177b8:	42ab      	cmp	r3, r5
 80177ba:	dc26      	bgt.n	801780a <_printf_common+0x96>
 80177bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80177c0:	1e13      	subs	r3, r2, #0
 80177c2:	6822      	ldr	r2, [r4, #0]
 80177c4:	bf18      	it	ne
 80177c6:	2301      	movne	r3, #1
 80177c8:	0692      	lsls	r2, r2, #26
 80177ca:	d42b      	bmi.n	8017824 <_printf_common+0xb0>
 80177cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80177d0:	4649      	mov	r1, r9
 80177d2:	4638      	mov	r0, r7
 80177d4:	47c0      	blx	r8
 80177d6:	3001      	adds	r0, #1
 80177d8:	d01e      	beq.n	8017818 <_printf_common+0xa4>
 80177da:	6823      	ldr	r3, [r4, #0]
 80177dc:	68e5      	ldr	r5, [r4, #12]
 80177de:	6832      	ldr	r2, [r6, #0]
 80177e0:	f003 0306 	and.w	r3, r3, #6
 80177e4:	2b04      	cmp	r3, #4
 80177e6:	bf08      	it	eq
 80177e8:	1aad      	subeq	r5, r5, r2
 80177ea:	68a3      	ldr	r3, [r4, #8]
 80177ec:	6922      	ldr	r2, [r4, #16]
 80177ee:	bf0c      	ite	eq
 80177f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80177f4:	2500      	movne	r5, #0
 80177f6:	4293      	cmp	r3, r2
 80177f8:	bfc4      	itt	gt
 80177fa:	1a9b      	subgt	r3, r3, r2
 80177fc:	18ed      	addgt	r5, r5, r3
 80177fe:	2600      	movs	r6, #0
 8017800:	341a      	adds	r4, #26
 8017802:	42b5      	cmp	r5, r6
 8017804:	d11a      	bne.n	801783c <_printf_common+0xc8>
 8017806:	2000      	movs	r0, #0
 8017808:	e008      	b.n	801781c <_printf_common+0xa8>
 801780a:	2301      	movs	r3, #1
 801780c:	4652      	mov	r2, sl
 801780e:	4649      	mov	r1, r9
 8017810:	4638      	mov	r0, r7
 8017812:	47c0      	blx	r8
 8017814:	3001      	adds	r0, #1
 8017816:	d103      	bne.n	8017820 <_printf_common+0xac>
 8017818:	f04f 30ff 	mov.w	r0, #4294967295
 801781c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017820:	3501      	adds	r5, #1
 8017822:	e7c6      	b.n	80177b2 <_printf_common+0x3e>
 8017824:	18e1      	adds	r1, r4, r3
 8017826:	1c5a      	adds	r2, r3, #1
 8017828:	2030      	movs	r0, #48	; 0x30
 801782a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801782e:	4422      	add	r2, r4
 8017830:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8017834:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8017838:	3302      	adds	r3, #2
 801783a:	e7c7      	b.n	80177cc <_printf_common+0x58>
 801783c:	2301      	movs	r3, #1
 801783e:	4622      	mov	r2, r4
 8017840:	4649      	mov	r1, r9
 8017842:	4638      	mov	r0, r7
 8017844:	47c0      	blx	r8
 8017846:	3001      	adds	r0, #1
 8017848:	d0e6      	beq.n	8017818 <_printf_common+0xa4>
 801784a:	3601      	adds	r6, #1
 801784c:	e7d9      	b.n	8017802 <_printf_common+0x8e>
	...

08017850 <_printf_i>:
 8017850:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017854:	7e0f      	ldrb	r7, [r1, #24]
 8017856:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8017858:	2f78      	cmp	r7, #120	; 0x78
 801785a:	4691      	mov	r9, r2
 801785c:	4680      	mov	r8, r0
 801785e:	460c      	mov	r4, r1
 8017860:	469a      	mov	sl, r3
 8017862:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8017866:	d807      	bhi.n	8017878 <_printf_i+0x28>
 8017868:	2f62      	cmp	r7, #98	; 0x62
 801786a:	d80a      	bhi.n	8017882 <_printf_i+0x32>
 801786c:	2f00      	cmp	r7, #0
 801786e:	f000 80d8 	beq.w	8017a22 <_printf_i+0x1d2>
 8017872:	2f58      	cmp	r7, #88	; 0x58
 8017874:	f000 80a3 	beq.w	80179be <_printf_i+0x16e>
 8017878:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801787c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8017880:	e03a      	b.n	80178f8 <_printf_i+0xa8>
 8017882:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8017886:	2b15      	cmp	r3, #21
 8017888:	d8f6      	bhi.n	8017878 <_printf_i+0x28>
 801788a:	a101      	add	r1, pc, #4	; (adr r1, 8017890 <_printf_i+0x40>)
 801788c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017890:	080178e9 	.word	0x080178e9
 8017894:	080178fd 	.word	0x080178fd
 8017898:	08017879 	.word	0x08017879
 801789c:	08017879 	.word	0x08017879
 80178a0:	08017879 	.word	0x08017879
 80178a4:	08017879 	.word	0x08017879
 80178a8:	080178fd 	.word	0x080178fd
 80178ac:	08017879 	.word	0x08017879
 80178b0:	08017879 	.word	0x08017879
 80178b4:	08017879 	.word	0x08017879
 80178b8:	08017879 	.word	0x08017879
 80178bc:	08017a09 	.word	0x08017a09
 80178c0:	0801792d 	.word	0x0801792d
 80178c4:	080179eb 	.word	0x080179eb
 80178c8:	08017879 	.word	0x08017879
 80178cc:	08017879 	.word	0x08017879
 80178d0:	08017a2b 	.word	0x08017a2b
 80178d4:	08017879 	.word	0x08017879
 80178d8:	0801792d 	.word	0x0801792d
 80178dc:	08017879 	.word	0x08017879
 80178e0:	08017879 	.word	0x08017879
 80178e4:	080179f3 	.word	0x080179f3
 80178e8:	682b      	ldr	r3, [r5, #0]
 80178ea:	1d1a      	adds	r2, r3, #4
 80178ec:	681b      	ldr	r3, [r3, #0]
 80178ee:	602a      	str	r2, [r5, #0]
 80178f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80178f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80178f8:	2301      	movs	r3, #1
 80178fa:	e0a3      	b.n	8017a44 <_printf_i+0x1f4>
 80178fc:	6820      	ldr	r0, [r4, #0]
 80178fe:	6829      	ldr	r1, [r5, #0]
 8017900:	0606      	lsls	r6, r0, #24
 8017902:	f101 0304 	add.w	r3, r1, #4
 8017906:	d50a      	bpl.n	801791e <_printf_i+0xce>
 8017908:	680e      	ldr	r6, [r1, #0]
 801790a:	602b      	str	r3, [r5, #0]
 801790c:	2e00      	cmp	r6, #0
 801790e:	da03      	bge.n	8017918 <_printf_i+0xc8>
 8017910:	232d      	movs	r3, #45	; 0x2d
 8017912:	4276      	negs	r6, r6
 8017914:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017918:	485e      	ldr	r0, [pc, #376]	; (8017a94 <_printf_i+0x244>)
 801791a:	230a      	movs	r3, #10
 801791c:	e019      	b.n	8017952 <_printf_i+0x102>
 801791e:	680e      	ldr	r6, [r1, #0]
 8017920:	602b      	str	r3, [r5, #0]
 8017922:	f010 0f40 	tst.w	r0, #64	; 0x40
 8017926:	bf18      	it	ne
 8017928:	b236      	sxthne	r6, r6
 801792a:	e7ef      	b.n	801790c <_printf_i+0xbc>
 801792c:	682b      	ldr	r3, [r5, #0]
 801792e:	6820      	ldr	r0, [r4, #0]
 8017930:	1d19      	adds	r1, r3, #4
 8017932:	6029      	str	r1, [r5, #0]
 8017934:	0601      	lsls	r1, r0, #24
 8017936:	d501      	bpl.n	801793c <_printf_i+0xec>
 8017938:	681e      	ldr	r6, [r3, #0]
 801793a:	e002      	b.n	8017942 <_printf_i+0xf2>
 801793c:	0646      	lsls	r6, r0, #25
 801793e:	d5fb      	bpl.n	8017938 <_printf_i+0xe8>
 8017940:	881e      	ldrh	r6, [r3, #0]
 8017942:	4854      	ldr	r0, [pc, #336]	; (8017a94 <_printf_i+0x244>)
 8017944:	2f6f      	cmp	r7, #111	; 0x6f
 8017946:	bf0c      	ite	eq
 8017948:	2308      	moveq	r3, #8
 801794a:	230a      	movne	r3, #10
 801794c:	2100      	movs	r1, #0
 801794e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8017952:	6865      	ldr	r5, [r4, #4]
 8017954:	60a5      	str	r5, [r4, #8]
 8017956:	2d00      	cmp	r5, #0
 8017958:	bfa2      	ittt	ge
 801795a:	6821      	ldrge	r1, [r4, #0]
 801795c:	f021 0104 	bicge.w	r1, r1, #4
 8017960:	6021      	strge	r1, [r4, #0]
 8017962:	b90e      	cbnz	r6, 8017968 <_printf_i+0x118>
 8017964:	2d00      	cmp	r5, #0
 8017966:	d04d      	beq.n	8017a04 <_printf_i+0x1b4>
 8017968:	4615      	mov	r5, r2
 801796a:	fbb6 f1f3 	udiv	r1, r6, r3
 801796e:	fb03 6711 	mls	r7, r3, r1, r6
 8017972:	5dc7      	ldrb	r7, [r0, r7]
 8017974:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8017978:	4637      	mov	r7, r6
 801797a:	42bb      	cmp	r3, r7
 801797c:	460e      	mov	r6, r1
 801797e:	d9f4      	bls.n	801796a <_printf_i+0x11a>
 8017980:	2b08      	cmp	r3, #8
 8017982:	d10b      	bne.n	801799c <_printf_i+0x14c>
 8017984:	6823      	ldr	r3, [r4, #0]
 8017986:	07de      	lsls	r6, r3, #31
 8017988:	d508      	bpl.n	801799c <_printf_i+0x14c>
 801798a:	6923      	ldr	r3, [r4, #16]
 801798c:	6861      	ldr	r1, [r4, #4]
 801798e:	4299      	cmp	r1, r3
 8017990:	bfde      	ittt	le
 8017992:	2330      	movle	r3, #48	; 0x30
 8017994:	f805 3c01 	strble.w	r3, [r5, #-1]
 8017998:	f105 35ff 	addle.w	r5, r5, #4294967295
 801799c:	1b52      	subs	r2, r2, r5
 801799e:	6122      	str	r2, [r4, #16]
 80179a0:	f8cd a000 	str.w	sl, [sp]
 80179a4:	464b      	mov	r3, r9
 80179a6:	aa03      	add	r2, sp, #12
 80179a8:	4621      	mov	r1, r4
 80179aa:	4640      	mov	r0, r8
 80179ac:	f7ff fee2 	bl	8017774 <_printf_common>
 80179b0:	3001      	adds	r0, #1
 80179b2:	d14c      	bne.n	8017a4e <_printf_i+0x1fe>
 80179b4:	f04f 30ff 	mov.w	r0, #4294967295
 80179b8:	b004      	add	sp, #16
 80179ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80179be:	4835      	ldr	r0, [pc, #212]	; (8017a94 <_printf_i+0x244>)
 80179c0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80179c4:	6829      	ldr	r1, [r5, #0]
 80179c6:	6823      	ldr	r3, [r4, #0]
 80179c8:	f851 6b04 	ldr.w	r6, [r1], #4
 80179cc:	6029      	str	r1, [r5, #0]
 80179ce:	061d      	lsls	r5, r3, #24
 80179d0:	d514      	bpl.n	80179fc <_printf_i+0x1ac>
 80179d2:	07df      	lsls	r7, r3, #31
 80179d4:	bf44      	itt	mi
 80179d6:	f043 0320 	orrmi.w	r3, r3, #32
 80179da:	6023      	strmi	r3, [r4, #0]
 80179dc:	b91e      	cbnz	r6, 80179e6 <_printf_i+0x196>
 80179de:	6823      	ldr	r3, [r4, #0]
 80179e0:	f023 0320 	bic.w	r3, r3, #32
 80179e4:	6023      	str	r3, [r4, #0]
 80179e6:	2310      	movs	r3, #16
 80179e8:	e7b0      	b.n	801794c <_printf_i+0xfc>
 80179ea:	6823      	ldr	r3, [r4, #0]
 80179ec:	f043 0320 	orr.w	r3, r3, #32
 80179f0:	6023      	str	r3, [r4, #0]
 80179f2:	2378      	movs	r3, #120	; 0x78
 80179f4:	4828      	ldr	r0, [pc, #160]	; (8017a98 <_printf_i+0x248>)
 80179f6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80179fa:	e7e3      	b.n	80179c4 <_printf_i+0x174>
 80179fc:	0659      	lsls	r1, r3, #25
 80179fe:	bf48      	it	mi
 8017a00:	b2b6      	uxthmi	r6, r6
 8017a02:	e7e6      	b.n	80179d2 <_printf_i+0x182>
 8017a04:	4615      	mov	r5, r2
 8017a06:	e7bb      	b.n	8017980 <_printf_i+0x130>
 8017a08:	682b      	ldr	r3, [r5, #0]
 8017a0a:	6826      	ldr	r6, [r4, #0]
 8017a0c:	6961      	ldr	r1, [r4, #20]
 8017a0e:	1d18      	adds	r0, r3, #4
 8017a10:	6028      	str	r0, [r5, #0]
 8017a12:	0635      	lsls	r5, r6, #24
 8017a14:	681b      	ldr	r3, [r3, #0]
 8017a16:	d501      	bpl.n	8017a1c <_printf_i+0x1cc>
 8017a18:	6019      	str	r1, [r3, #0]
 8017a1a:	e002      	b.n	8017a22 <_printf_i+0x1d2>
 8017a1c:	0670      	lsls	r0, r6, #25
 8017a1e:	d5fb      	bpl.n	8017a18 <_printf_i+0x1c8>
 8017a20:	8019      	strh	r1, [r3, #0]
 8017a22:	2300      	movs	r3, #0
 8017a24:	6123      	str	r3, [r4, #16]
 8017a26:	4615      	mov	r5, r2
 8017a28:	e7ba      	b.n	80179a0 <_printf_i+0x150>
 8017a2a:	682b      	ldr	r3, [r5, #0]
 8017a2c:	1d1a      	adds	r2, r3, #4
 8017a2e:	602a      	str	r2, [r5, #0]
 8017a30:	681d      	ldr	r5, [r3, #0]
 8017a32:	6862      	ldr	r2, [r4, #4]
 8017a34:	2100      	movs	r1, #0
 8017a36:	4628      	mov	r0, r5
 8017a38:	f7e8 fbf2 	bl	8000220 <memchr>
 8017a3c:	b108      	cbz	r0, 8017a42 <_printf_i+0x1f2>
 8017a3e:	1b40      	subs	r0, r0, r5
 8017a40:	6060      	str	r0, [r4, #4]
 8017a42:	6863      	ldr	r3, [r4, #4]
 8017a44:	6123      	str	r3, [r4, #16]
 8017a46:	2300      	movs	r3, #0
 8017a48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017a4c:	e7a8      	b.n	80179a0 <_printf_i+0x150>
 8017a4e:	6923      	ldr	r3, [r4, #16]
 8017a50:	462a      	mov	r2, r5
 8017a52:	4649      	mov	r1, r9
 8017a54:	4640      	mov	r0, r8
 8017a56:	47d0      	blx	sl
 8017a58:	3001      	adds	r0, #1
 8017a5a:	d0ab      	beq.n	80179b4 <_printf_i+0x164>
 8017a5c:	6823      	ldr	r3, [r4, #0]
 8017a5e:	079b      	lsls	r3, r3, #30
 8017a60:	d413      	bmi.n	8017a8a <_printf_i+0x23a>
 8017a62:	68e0      	ldr	r0, [r4, #12]
 8017a64:	9b03      	ldr	r3, [sp, #12]
 8017a66:	4298      	cmp	r0, r3
 8017a68:	bfb8      	it	lt
 8017a6a:	4618      	movlt	r0, r3
 8017a6c:	e7a4      	b.n	80179b8 <_printf_i+0x168>
 8017a6e:	2301      	movs	r3, #1
 8017a70:	4632      	mov	r2, r6
 8017a72:	4649      	mov	r1, r9
 8017a74:	4640      	mov	r0, r8
 8017a76:	47d0      	blx	sl
 8017a78:	3001      	adds	r0, #1
 8017a7a:	d09b      	beq.n	80179b4 <_printf_i+0x164>
 8017a7c:	3501      	adds	r5, #1
 8017a7e:	68e3      	ldr	r3, [r4, #12]
 8017a80:	9903      	ldr	r1, [sp, #12]
 8017a82:	1a5b      	subs	r3, r3, r1
 8017a84:	42ab      	cmp	r3, r5
 8017a86:	dcf2      	bgt.n	8017a6e <_printf_i+0x21e>
 8017a88:	e7eb      	b.n	8017a62 <_printf_i+0x212>
 8017a8a:	2500      	movs	r5, #0
 8017a8c:	f104 0619 	add.w	r6, r4, #25
 8017a90:	e7f5      	b.n	8017a7e <_printf_i+0x22e>
 8017a92:	bf00      	nop
 8017a94:	0801d221 	.word	0x0801d221
 8017a98:	0801d232 	.word	0x0801d232

08017a9c <_sbrk_r>:
 8017a9c:	b538      	push	{r3, r4, r5, lr}
 8017a9e:	4d06      	ldr	r5, [pc, #24]	; (8017ab8 <_sbrk_r+0x1c>)
 8017aa0:	2300      	movs	r3, #0
 8017aa2:	4604      	mov	r4, r0
 8017aa4:	4608      	mov	r0, r1
 8017aa6:	602b      	str	r3, [r5, #0]
 8017aa8:	f7e9 fe50 	bl	800174c <_sbrk>
 8017aac:	1c43      	adds	r3, r0, #1
 8017aae:	d102      	bne.n	8017ab6 <_sbrk_r+0x1a>
 8017ab0:	682b      	ldr	r3, [r5, #0]
 8017ab2:	b103      	cbz	r3, 8017ab6 <_sbrk_r+0x1a>
 8017ab4:	6023      	str	r3, [r4, #0]
 8017ab6:	bd38      	pop	{r3, r4, r5, pc}
 8017ab8:	20008d04 	.word	0x20008d04

08017abc <__sread>:
 8017abc:	b510      	push	{r4, lr}
 8017abe:	460c      	mov	r4, r1
 8017ac0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017ac4:	f000 f8d8 	bl	8017c78 <_read_r>
 8017ac8:	2800      	cmp	r0, #0
 8017aca:	bfab      	itete	ge
 8017acc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8017ace:	89a3      	ldrhlt	r3, [r4, #12]
 8017ad0:	181b      	addge	r3, r3, r0
 8017ad2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8017ad6:	bfac      	ite	ge
 8017ad8:	6563      	strge	r3, [r4, #84]	; 0x54
 8017ada:	81a3      	strhlt	r3, [r4, #12]
 8017adc:	bd10      	pop	{r4, pc}

08017ade <__swrite>:
 8017ade:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017ae2:	461f      	mov	r7, r3
 8017ae4:	898b      	ldrh	r3, [r1, #12]
 8017ae6:	05db      	lsls	r3, r3, #23
 8017ae8:	4605      	mov	r5, r0
 8017aea:	460c      	mov	r4, r1
 8017aec:	4616      	mov	r6, r2
 8017aee:	d505      	bpl.n	8017afc <__swrite+0x1e>
 8017af0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017af4:	2302      	movs	r3, #2
 8017af6:	2200      	movs	r2, #0
 8017af8:	f000 f870 	bl	8017bdc <_lseek_r>
 8017afc:	89a3      	ldrh	r3, [r4, #12]
 8017afe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017b02:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8017b06:	81a3      	strh	r3, [r4, #12]
 8017b08:	4632      	mov	r2, r6
 8017b0a:	463b      	mov	r3, r7
 8017b0c:	4628      	mov	r0, r5
 8017b0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017b12:	f000 b817 	b.w	8017b44 <_write_r>

08017b16 <__sseek>:
 8017b16:	b510      	push	{r4, lr}
 8017b18:	460c      	mov	r4, r1
 8017b1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017b1e:	f000 f85d 	bl	8017bdc <_lseek_r>
 8017b22:	1c43      	adds	r3, r0, #1
 8017b24:	89a3      	ldrh	r3, [r4, #12]
 8017b26:	bf15      	itete	ne
 8017b28:	6560      	strne	r0, [r4, #84]	; 0x54
 8017b2a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8017b2e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8017b32:	81a3      	strheq	r3, [r4, #12]
 8017b34:	bf18      	it	ne
 8017b36:	81a3      	strhne	r3, [r4, #12]
 8017b38:	bd10      	pop	{r4, pc}

08017b3a <__sclose>:
 8017b3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017b3e:	f000 b81b 	b.w	8017b78 <_close_r>
	...

08017b44 <_write_r>:
 8017b44:	b538      	push	{r3, r4, r5, lr}
 8017b46:	4d07      	ldr	r5, [pc, #28]	; (8017b64 <_write_r+0x20>)
 8017b48:	4604      	mov	r4, r0
 8017b4a:	4608      	mov	r0, r1
 8017b4c:	4611      	mov	r1, r2
 8017b4e:	2200      	movs	r2, #0
 8017b50:	602a      	str	r2, [r5, #0]
 8017b52:	461a      	mov	r2, r3
 8017b54:	f7e8 fdf8 	bl	8000748 <_write>
 8017b58:	1c43      	adds	r3, r0, #1
 8017b5a:	d102      	bne.n	8017b62 <_write_r+0x1e>
 8017b5c:	682b      	ldr	r3, [r5, #0]
 8017b5e:	b103      	cbz	r3, 8017b62 <_write_r+0x1e>
 8017b60:	6023      	str	r3, [r4, #0]
 8017b62:	bd38      	pop	{r3, r4, r5, pc}
 8017b64:	20008d04 	.word	0x20008d04

08017b68 <abort>:
 8017b68:	b508      	push	{r3, lr}
 8017b6a:	2006      	movs	r0, #6
 8017b6c:	f000 f8be 	bl	8017cec <raise>
 8017b70:	2001      	movs	r0, #1
 8017b72:	f7e9 fd8f 	bl	8001694 <_exit>
	...

08017b78 <_close_r>:
 8017b78:	b538      	push	{r3, r4, r5, lr}
 8017b7a:	4d06      	ldr	r5, [pc, #24]	; (8017b94 <_close_r+0x1c>)
 8017b7c:	2300      	movs	r3, #0
 8017b7e:	4604      	mov	r4, r0
 8017b80:	4608      	mov	r0, r1
 8017b82:	602b      	str	r3, [r5, #0]
 8017b84:	f7e9 fdad 	bl	80016e2 <_close>
 8017b88:	1c43      	adds	r3, r0, #1
 8017b8a:	d102      	bne.n	8017b92 <_close_r+0x1a>
 8017b8c:	682b      	ldr	r3, [r5, #0]
 8017b8e:	b103      	cbz	r3, 8017b92 <_close_r+0x1a>
 8017b90:	6023      	str	r3, [r4, #0]
 8017b92:	bd38      	pop	{r3, r4, r5, pc}
 8017b94:	20008d04 	.word	0x20008d04

08017b98 <_fstat_r>:
 8017b98:	b538      	push	{r3, r4, r5, lr}
 8017b9a:	4d07      	ldr	r5, [pc, #28]	; (8017bb8 <_fstat_r+0x20>)
 8017b9c:	2300      	movs	r3, #0
 8017b9e:	4604      	mov	r4, r0
 8017ba0:	4608      	mov	r0, r1
 8017ba2:	4611      	mov	r1, r2
 8017ba4:	602b      	str	r3, [r5, #0]
 8017ba6:	f7e9 fda8 	bl	80016fa <_fstat>
 8017baa:	1c43      	adds	r3, r0, #1
 8017bac:	d102      	bne.n	8017bb4 <_fstat_r+0x1c>
 8017bae:	682b      	ldr	r3, [r5, #0]
 8017bb0:	b103      	cbz	r3, 8017bb4 <_fstat_r+0x1c>
 8017bb2:	6023      	str	r3, [r4, #0]
 8017bb4:	bd38      	pop	{r3, r4, r5, pc}
 8017bb6:	bf00      	nop
 8017bb8:	20008d04 	.word	0x20008d04

08017bbc <_isatty_r>:
 8017bbc:	b538      	push	{r3, r4, r5, lr}
 8017bbe:	4d06      	ldr	r5, [pc, #24]	; (8017bd8 <_isatty_r+0x1c>)
 8017bc0:	2300      	movs	r3, #0
 8017bc2:	4604      	mov	r4, r0
 8017bc4:	4608      	mov	r0, r1
 8017bc6:	602b      	str	r3, [r5, #0]
 8017bc8:	f7e9 fda7 	bl	800171a <_isatty>
 8017bcc:	1c43      	adds	r3, r0, #1
 8017bce:	d102      	bne.n	8017bd6 <_isatty_r+0x1a>
 8017bd0:	682b      	ldr	r3, [r5, #0]
 8017bd2:	b103      	cbz	r3, 8017bd6 <_isatty_r+0x1a>
 8017bd4:	6023      	str	r3, [r4, #0]
 8017bd6:	bd38      	pop	{r3, r4, r5, pc}
 8017bd8:	20008d04 	.word	0x20008d04

08017bdc <_lseek_r>:
 8017bdc:	b538      	push	{r3, r4, r5, lr}
 8017bde:	4d07      	ldr	r5, [pc, #28]	; (8017bfc <_lseek_r+0x20>)
 8017be0:	4604      	mov	r4, r0
 8017be2:	4608      	mov	r0, r1
 8017be4:	4611      	mov	r1, r2
 8017be6:	2200      	movs	r2, #0
 8017be8:	602a      	str	r2, [r5, #0]
 8017bea:	461a      	mov	r2, r3
 8017bec:	f7e9 fda0 	bl	8001730 <_lseek>
 8017bf0:	1c43      	adds	r3, r0, #1
 8017bf2:	d102      	bne.n	8017bfa <_lseek_r+0x1e>
 8017bf4:	682b      	ldr	r3, [r5, #0]
 8017bf6:	b103      	cbz	r3, 8017bfa <_lseek_r+0x1e>
 8017bf8:	6023      	str	r3, [r4, #0]
 8017bfa:	bd38      	pop	{r3, r4, r5, pc}
 8017bfc:	20008d04 	.word	0x20008d04

08017c00 <__malloc_lock>:
 8017c00:	4801      	ldr	r0, [pc, #4]	; (8017c08 <__malloc_lock+0x8>)
 8017c02:	f7ff b9b1 	b.w	8016f68 <__retarget_lock_acquire_recursive>
 8017c06:	bf00      	nop
 8017c08:	20008d08 	.word	0x20008d08

08017c0c <__malloc_unlock>:
 8017c0c:	4801      	ldr	r0, [pc, #4]	; (8017c14 <__malloc_unlock+0x8>)
 8017c0e:	f7ff b9ac 	b.w	8016f6a <__retarget_lock_release_recursive>
 8017c12:	bf00      	nop
 8017c14:	20008d08 	.word	0x20008d08

08017c18 <_realloc_r>:
 8017c18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017c1c:	4680      	mov	r8, r0
 8017c1e:	4614      	mov	r4, r2
 8017c20:	460e      	mov	r6, r1
 8017c22:	b921      	cbnz	r1, 8017c2e <_realloc_r+0x16>
 8017c24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017c28:	4611      	mov	r1, r2
 8017c2a:	f7ff ba79 	b.w	8017120 <_malloc_r>
 8017c2e:	b92a      	cbnz	r2, 8017c3c <_realloc_r+0x24>
 8017c30:	f7ff fa0a 	bl	8017048 <_free_r>
 8017c34:	4625      	mov	r5, r4
 8017c36:	4628      	mov	r0, r5
 8017c38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017c3c:	f000 f872 	bl	8017d24 <_malloc_usable_size_r>
 8017c40:	4284      	cmp	r4, r0
 8017c42:	4607      	mov	r7, r0
 8017c44:	d802      	bhi.n	8017c4c <_realloc_r+0x34>
 8017c46:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8017c4a:	d812      	bhi.n	8017c72 <_realloc_r+0x5a>
 8017c4c:	4621      	mov	r1, r4
 8017c4e:	4640      	mov	r0, r8
 8017c50:	f7ff fa66 	bl	8017120 <_malloc_r>
 8017c54:	4605      	mov	r5, r0
 8017c56:	2800      	cmp	r0, #0
 8017c58:	d0ed      	beq.n	8017c36 <_realloc_r+0x1e>
 8017c5a:	42bc      	cmp	r4, r7
 8017c5c:	4622      	mov	r2, r4
 8017c5e:	4631      	mov	r1, r6
 8017c60:	bf28      	it	cs
 8017c62:	463a      	movcs	r2, r7
 8017c64:	f7fe fdbc 	bl	80167e0 <memcpy>
 8017c68:	4631      	mov	r1, r6
 8017c6a:	4640      	mov	r0, r8
 8017c6c:	f7ff f9ec 	bl	8017048 <_free_r>
 8017c70:	e7e1      	b.n	8017c36 <_realloc_r+0x1e>
 8017c72:	4635      	mov	r5, r6
 8017c74:	e7df      	b.n	8017c36 <_realloc_r+0x1e>
	...

08017c78 <_read_r>:
 8017c78:	b538      	push	{r3, r4, r5, lr}
 8017c7a:	4d07      	ldr	r5, [pc, #28]	; (8017c98 <_read_r+0x20>)
 8017c7c:	4604      	mov	r4, r0
 8017c7e:	4608      	mov	r0, r1
 8017c80:	4611      	mov	r1, r2
 8017c82:	2200      	movs	r2, #0
 8017c84:	602a      	str	r2, [r5, #0]
 8017c86:	461a      	mov	r2, r3
 8017c88:	f7e9 fd0e 	bl	80016a8 <_read>
 8017c8c:	1c43      	adds	r3, r0, #1
 8017c8e:	d102      	bne.n	8017c96 <_read_r+0x1e>
 8017c90:	682b      	ldr	r3, [r5, #0]
 8017c92:	b103      	cbz	r3, 8017c96 <_read_r+0x1e>
 8017c94:	6023      	str	r3, [r4, #0]
 8017c96:	bd38      	pop	{r3, r4, r5, pc}
 8017c98:	20008d04 	.word	0x20008d04

08017c9c <_raise_r>:
 8017c9c:	291f      	cmp	r1, #31
 8017c9e:	b538      	push	{r3, r4, r5, lr}
 8017ca0:	4604      	mov	r4, r0
 8017ca2:	460d      	mov	r5, r1
 8017ca4:	d904      	bls.n	8017cb0 <_raise_r+0x14>
 8017ca6:	2316      	movs	r3, #22
 8017ca8:	6003      	str	r3, [r0, #0]
 8017caa:	f04f 30ff 	mov.w	r0, #4294967295
 8017cae:	bd38      	pop	{r3, r4, r5, pc}
 8017cb0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8017cb2:	b112      	cbz	r2, 8017cba <_raise_r+0x1e>
 8017cb4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017cb8:	b94b      	cbnz	r3, 8017cce <_raise_r+0x32>
 8017cba:	4620      	mov	r0, r4
 8017cbc:	f000 f830 	bl	8017d20 <_getpid_r>
 8017cc0:	462a      	mov	r2, r5
 8017cc2:	4601      	mov	r1, r0
 8017cc4:	4620      	mov	r0, r4
 8017cc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017cca:	f000 b817 	b.w	8017cfc <_kill_r>
 8017cce:	2b01      	cmp	r3, #1
 8017cd0:	d00a      	beq.n	8017ce8 <_raise_r+0x4c>
 8017cd2:	1c59      	adds	r1, r3, #1
 8017cd4:	d103      	bne.n	8017cde <_raise_r+0x42>
 8017cd6:	2316      	movs	r3, #22
 8017cd8:	6003      	str	r3, [r0, #0]
 8017cda:	2001      	movs	r0, #1
 8017cdc:	e7e7      	b.n	8017cae <_raise_r+0x12>
 8017cde:	2400      	movs	r4, #0
 8017ce0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8017ce4:	4628      	mov	r0, r5
 8017ce6:	4798      	blx	r3
 8017ce8:	2000      	movs	r0, #0
 8017cea:	e7e0      	b.n	8017cae <_raise_r+0x12>

08017cec <raise>:
 8017cec:	4b02      	ldr	r3, [pc, #8]	; (8017cf8 <raise+0xc>)
 8017cee:	4601      	mov	r1, r0
 8017cf0:	6818      	ldr	r0, [r3, #0]
 8017cf2:	f7ff bfd3 	b.w	8017c9c <_raise_r>
 8017cf6:	bf00      	nop
 8017cf8:	2000006c 	.word	0x2000006c

08017cfc <_kill_r>:
 8017cfc:	b538      	push	{r3, r4, r5, lr}
 8017cfe:	4d07      	ldr	r5, [pc, #28]	; (8017d1c <_kill_r+0x20>)
 8017d00:	2300      	movs	r3, #0
 8017d02:	4604      	mov	r4, r0
 8017d04:	4608      	mov	r0, r1
 8017d06:	4611      	mov	r1, r2
 8017d08:	602b      	str	r3, [r5, #0]
 8017d0a:	f7e9 fcb1 	bl	8001670 <_kill>
 8017d0e:	1c43      	adds	r3, r0, #1
 8017d10:	d102      	bne.n	8017d18 <_kill_r+0x1c>
 8017d12:	682b      	ldr	r3, [r5, #0]
 8017d14:	b103      	cbz	r3, 8017d18 <_kill_r+0x1c>
 8017d16:	6023      	str	r3, [r4, #0]
 8017d18:	bd38      	pop	{r3, r4, r5, pc}
 8017d1a:	bf00      	nop
 8017d1c:	20008d04 	.word	0x20008d04

08017d20 <_getpid_r>:
 8017d20:	f7e9 bc9e 	b.w	8001660 <_getpid>

08017d24 <_malloc_usable_size_r>:
 8017d24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017d28:	1f18      	subs	r0, r3, #4
 8017d2a:	2b00      	cmp	r3, #0
 8017d2c:	bfbc      	itt	lt
 8017d2e:	580b      	ldrlt	r3, [r1, r0]
 8017d30:	18c0      	addlt	r0, r0, r3
 8017d32:	4770      	bx	lr

08017d34 <_init>:
 8017d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017d36:	bf00      	nop
 8017d38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017d3a:	bc08      	pop	{r3}
 8017d3c:	469e      	mov	lr, r3
 8017d3e:	4770      	bx	lr

08017d40 <_fini>:
 8017d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017d42:	bf00      	nop
 8017d44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017d46:	bc08      	pop	{r3}
 8017d48:	469e      	mov	lr, r3
 8017d4a:	4770      	bx	lr
